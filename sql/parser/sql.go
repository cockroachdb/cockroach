// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:29
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           IntVal
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
	idxElem        IndexElem
	idxElems       IndexElemList
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HOUR = 57447
const IF = 57448
const IFNULL = 57449
const IN = 57450
const INDEX = 57451
const INITIALLY = 57452
const INNER = 57453
const INSERT = 57454
const INT = 57455
const INT64 = 57456
const INTEGER = 57457
const INTERSECT = 57458
const INTERVAL = 57459
const INTO = 57460
const IS = 57461
const ISOLATION = 57462
const JOIN = 57463
const KEY = 57464
const LATERAL = 57465
const LEADING = 57466
const LEAST = 57467
const LEFT = 57468
const LEVEL = 57469
const LIKE = 57470
const LIMIT = 57471
const LOCAL = 57472
const LOCALTIME = 57473
const LOCALTIMESTAMP = 57474
const LSHIFT = 57475
const MATCH = 57476
const MINUTE = 57477
const MONTH = 57478
const NAME = 57479
const NAMES = 57480
const NATURAL = 57481
const NEXT = 57482
const NO = 57483
const NOT = 57484
const NOTHING = 57485
const NULL = 57486
const NULLIF = 57487
const NULLS = 57488
const NUMERIC = 57489
const OF = 57490
const OFF = 57491
const OFFSET = 57492
const ON = 57493
const ONLY = 57494
const OR = 57495
const ORDER = 57496
const ORDINALITY = 57497
const OUT = 57498
const OUTER = 57499
const OVER = 57500
const OVERLAPS = 57501
const OVERLAY = 57502
const PARTIAL = 57503
const PARTITION = 57504
const PLACING = 57505
const POSITION = 57506
const PRECEDING = 57507
const PRECISION = 57508
const PRIMARY = 57509
const RANGE = 57510
const READ = 57511
const REAL = 57512
const RECURSIVE = 57513
const REF = 57514
const REFERENCES = 57515
const RENAME = 57516
const REPEATABLE = 57517
const RESTRICT = 57518
const RETURNING = 57519
const REVOKE = 57520
const RIGHT = 57521
const ROLLBACK = 57522
const ROLLUP = 57523
const ROW = 57524
const ROWS = 57525
const RSHIFT = 57526
const SEARCH = 57527
const SECOND = 57528
const SELECT = 57529
const SERIALIZABLE = 57530
const SESSION = 57531
const SESSION_USER = 57532
const SET = 57533
const SHOW = 57534
const SIMILAR = 57535
const SIMPLE = 57536
const SMALLINT = 57537
const SNAPSHOT = 57538
const SOME = 57539
const SQL = 57540
const START = 57541
const STRICT = 57542
const STRING = 57543
const STORING = 57544
const SUBSTRING = 57545
const SYMMETRIC = 57546
const TABLE = 57547
const TABLES = 57548
const TEXT = 57549
const THEN = 57550
const TIME = 57551
const TIMESTAMP = 57552
const TO = 57553
const TRAILING = 57554
const TRANSACTION = 57555
const TREAT = 57556
const TRIM = 57557
const TRUE = 57558
const TRUNCATE = 57559
const TYPE = 57560
const UNBOUNDED = 57561
const UNCOMMITTED = 57562
const UNION = 57563
const UNIQUE = 57564
const UNKNOWN = 57565
const UPDATE = 57566
const USER = 57567
const USING = 57568
const VALID = 57569
const VALIDATE = 57570
const VALUE = 57571
const VALUES = 57572
const VARCHAR = 57573
const VARIADIC = 57574
const VARYING = 57575
const WHEN = 57576
const WHERE = 57577
const WINDOW = 57578
const WITH = 57579
const WITHIN = 57580
const WITHOUT = 57581
const YEAR = 57582
const ZONE = 57583
const NOT_LA = 57584
const WITH_LA = 57585
const POSTFIXOP = 57586
const UMINUS = 57587

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:3789

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	264, 19,
	-2, 291,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 262,
	151, 262,
	262, 262,
	264, 262,
	-2, 272,
	-1, 40,
	1, 265,
	151, 265,
	262, 265,
	264, 265,
	-2, 271,
	-1, 49,
	1, 19,
	264, 19,
	-2, 291,
	-1, 85,
	1, 127,
	264, 127,
	-2, 740,
	-1, 239,
	129, 301,
	150, 301,
	-2, 268,
	-1, 242,
	129, 300,
	150, 300,
	-2, 266,
	-1, 345,
	129, 300,
	150, 300,
	-2, 269,
	-1, 402,
	261, 690,
	-2, 685,
	-1, 403,
	261, 691,
	-2, 686,
	-1, 409,
	6, 419,
	261, 419,
	-2, 814,
	-1, 431,
	6, 389,
	-2, 793,
	-1, 432,
	6, 416,
	261, 416,
	-2, 794,
	-1, 433,
	6, 397,
	-2, 795,
	-1, 434,
	6, 396,
	-2, 796,
	-1, 435,
	6, 416,
	261, 416,
	-2, 798,
	-1, 436,
	6, 416,
	261, 416,
	-2, 799,
	-1, 437,
	6, 417,
	-2, 801,
	-1, 438,
	6, 384,
	-2, 802,
	-1, 439,
	6, 384,
	-2, 803,
	-1, 440,
	6, 399,
	-2, 806,
	-1, 441,
	6, 385,
	-2, 811,
	-1, 442,
	6, 386,
	-2, 812,
	-1, 443,
	6, 387,
	-2, 813,
	-1, 444,
	6, 384,
	-2, 817,
	-1, 445,
	6, 390,
	-2, 822,
	-1, 446,
	6, 388,
	-2, 824,
	-1, 447,
	6, 418,
	-2, 828,
	-1, 448,
	6, 414,
	261, 414,
	-2, 832,
	-1, 689,
	85, 272,
	116, 272,
	129, 272,
	150, 272,
	154, 272,
	221, 272,
	-2, 521,
	-1, 697,
	261, 670,
	-2, 664,
	-1, 882,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 452,
	-1, 883,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 453,
	-1, 884,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 454,
	-1, 888,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 458,
	-1, 889,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 459,
	-1, 890,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 460,
	-1, 893,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 465,
	-1, 924,
	159, 591,
	-2, 594,
	-1, 1070,
	85, 272,
	116, 272,
	129, 272,
	150, 272,
	154, 272,
	221, 272,
	-2, 342,
	-1, 1078,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 466,
	-1, 1083,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 467,
	-1, 1102,
	159, 590,
	-2, 593,
	-1, 1239,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 468,
	-1, 1244,
	119, 0,
	-2, 478,
	-1, 1253,
	159, 592,
	-2, 595,
	-1, 1293,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 502,
	-1, 1294,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 503,
	-1, 1295,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 504,
	-1, 1299,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 508,
	-1, 1300,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 509,
	-1, 1301,
	12, 0,
	13, 0,
	14, 0,
	244, 0,
	245, 0,
	246, 0,
	-2, 510,
	-1, 1393,
	119, 0,
	-2, 479,
	-1, 1397,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 482,
	-1, 1398,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 484,
	-1, 1477,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 483,
	-1, 1478,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 485,
	-1, 1486,
	119, 0,
	-2, 511,
	-1, 1523,
	119, 0,
	-2, 512,
	-1, 1568,
	30, 0,
	128, 0,
	193, 0,
	242, 0,
	-2, 792,
}

const sqlNprod = 924
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18021

var sqlAct = [...]int{

	921, 1567, 1550, 1434, 1588, 1528, 1552, 1551, 775, 1566,
	823, 1273, 1456, 1494, 692, 1467, 1362, 1331, 243, 1379,
	270, 487, 810, 1373, 807, 1245, 1159, 1361, 768, 1105,
	86, 1066, 461, 1246, 1160, 1219, 694, 1058, 248, 28,
	13, 809, 627, 831, 776, 466, 754, 401, 1228, 1054,
	976, 745, 941, 909, 834, 906, 649, 18, 727, 1069,
	931, 250, 39, 723, 28, 400, 61, 10, 804, 937,
	393, 242, 471, 643, 505, 6, 469, 375, 832, 532,
	59, 812, 516, 63, 291, 366, 83, 39, 28, 289,
	287, 253, 348, 62, 349, 496, 507, 40, 68, 347,
	280, 64, 41, 647, 503, 1458, 247, 247, 403, 489,
	90, 39, 934, 449, 464, 464, 979, 359, 462, 462,
	769, 463, 463, 489, 497, 1564, 266, 1558, 1455, 273,
	827, 1098, 1557, 376, 281, 827, 773, 240, 1549, 89,
	650, 1396, 239, 292, 1544, 1525, 935, 827, 1396, 650,
	1027, 1519, 89, 89, 827, 1513, 89, 1100, 1455, 89,
	89, 89, 1101, 1099, 89, 89, 89, 89, 1098, 294,
	1504, 295, 1479, 1455, 296, 1396, 936, 933, 1516, 1306,
	1474, 267, 284, 827, 267, 1252, 276, 89, 89, 267,
	1464, 286, 1454, 1455, 1439, 1455, 1438, 827, 1419, 827,
	1399, 1098, 1395, 1098, 1341, 1396, 1249, 827, 1210, 1098,
	1206, 488, 1177, 488, 45, 1178, 1175, 1104, 1098, 1098,
	1174, 1173, 1102, 1098, 1098, 1098, 828, 938, 742, 827,
	494, 741, 47, 495, 1038, 743, 1056, 45, 395, 1040,
	827, 1132, 488, 1148, 1149, 1150, 490, 492, 917, 45,
	822, 798, 651, 1392, 360, 47, 312, 48, 346, 265,
	490, 49, 367, 367, 43, 531, 340, 47, 326, 345,
	44, 365, 467, 45, 1565, 1563, 1520, 1463, 451, 1424,
	48, 932, 1420, 1145, 460, 652, 456, 43, 42, 1358,
	1412, 47, 48, 44, 1411, 1406, 1405, 1404, 1403, 43,
	1390, 1321, 1076, 654, 1316, 44, 1315, 1314, 1027, 1256,
	1234, 60, 339, 1218, 1042, 1180, 48, 651, 464, 1179,
	1167, 653, 462, 772, 1495, 463, 1158, 1131, 1128, 1126,
	1115, 1109, 700, 1039, 991, 488, 948, 947, 359, 358,
	1275, 1515, 89, 1496, 89, 1476, 89, 42, 240, 624,
	1151, 635, 637, 239, 450, 914, 1488, 281, 644, 1470,
	623, 89, 1461, 1453, 1146, 1431, 1417, 267, 1388, 1384,
	1369, 683, 684, 685, 686, 687, 1243, 89, 1233, 480,
	690, 1216, 1215, 1213, 1192, 1191, 1157, 89, 89, 1123,
	89, 1122, 1114, 1132, 1095, 1091, 911, 728, 731, 1357,
	703, 1005, 458, 697, 1004, 986, 946, 826, 733, 501,
	721, 500, 267, 482, 616, 1147, 720, 620, 527, 621,
	89, 719, 89, 718, 520, 619, 717, 294, 294, 295,
	295, 716, 296, 296, 915, 534, 89, 535, 89, 89,
	536, 89, 633, 632, 715, 286, 631, 286, 714, 713,
	240, 89, 645, 240, 240, 639, 652, 712, 640, 641,
	711, 710, 709, 286, 708, 740, 1005, 707, 698, 89,
	696, 42, 89, 625, 654, 1142, 1143, 1144, 271, 1141,
	1138, 1139, 1140, 1133, 1134, 1135, 1136, 1137, 363, 1475,
	457, 695, 653, 736, 1236, 748, 691, 1235, 729, 725,
	726, 1360, 1028, 732, 320, 1132, 1077, 1148, 1149, 1150,
	333, 1132, 734, 321, 251, 705, 1374, 1391, 352, 769,
	28, 1276, 771, 785, 289, 759, 761, 655, 656, 657,
	658, 659, 1132, 28, 455, 61, 1118, 942, 724, 1024,
	1534, 1578, 737, 739, 1577, 1349, 1503, 1145, 228, 229,
	335, 1034, 63, 1447, 751, 764, 39, 1132, 747, 260,
	526, 1446, 62, 747, 1203, 1204, 408, 453, 89, 746,
	64, 534, 534, 535, 535, 787, 536, 536, 292, 668,
	788, 89, 1184, 1183, 786, 89, 1113, 701, 89, 1112,
	53, 1111, 89, 735, 89, 89, 1110, 89, 1079, 898,
	89, 89, 89, 791, 294, 1132, 295, 89, 89, 296,
	267, 803, 789, 767, 1151, 766, 784, 779, 318, 765,
	1387, 872, 783, 790, 234, 286, 54, 1502, 1146, 472,
	669, 473, 286, 1536, 1146, 1133, 1134, 1135, 1136, 1137,
	534, 483, 535, 938, 908, 536, 1436, 908, 820, 821,
	452, 237, 367, 319, 1585, 1019, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 478, 829, 1147,
	1146, 477, 56, 51, 871, 1147, 837, 1035, 942, 1577,
	1497, 246, 1591, 474, 663, 660, 661, 662, 655, 656,
	657, 658, 659, 806, 1194, 525, 513, 524, 722, 518,
	949, 369, 960, 896, 970, 972, 977, 980, 981, 982,
	1033, 1201, 245, 57, 52, 736, 744, 89, 1146, 489,
	736, 1147, 922, 89, 89, 1484, 962, 836, 55, 1142,
	1143, 1144, 467, 1141, 1138, 1139, 1140, 1133, 1134, 1135,
	1136, 1137, 1140, 1133, 1134, 1135, 1136, 1137, 267, 89,
	247, 912, 89, 990, 355, 356, 913, 361, 688, 1121,
	1020, 652, 247, 1000, 405, 528, 1135, 1136, 1137, 1147,
	337, 472, 1229, 473, 267, 1553, 1002, 994, 235, 654,
	534, 897, 535, 1437, 1589, 536, 1138, 1139, 1140, 1133,
	1134, 1135, 1136, 1137, 1262, 238, 1030, 653, 1576, 1574,
	1372, 894, 918, 923, 1195, 926, 995, 1554, 530, 58,
	50, 1081, 1584, 644, 907, 755, 1022, 244, 1546, 1590,
	971, 529, 1026, 794, 1263, 1265, 983, 984, 985, 796,
	475, 1015, 816, 1547, 1592, 474, 1043, 1133, 1134, 1135,
	1136, 1137, 797, 89, 89, 89, 1041, 329, 1031, 89,
	795, 1032, 89, 1037, 313, 28, 490, 1049, 89, 89,
	89, 89, 89, 1036, 89, 89, 895, 758, 996, 1072,
	1555, 89, 952, 89, 1051, 938, 938, 350, 39, 89,
	1071, 843, 1065, 1583, 1050, 1078, 1047, 1023, 89, 1083,
	311, 89, 1052, 351, 1075, 1029, 286, 294, 351, 295,
	1441, 1440, 296, 1556, 286, 729, 1429, 732, 1097, 1345,
	1186, 934, 89, 1529, 89, 89, 1057, 89, 1106, 999,
	1415, 862, 726, 725, 1302, 472, 89, 473, 1016, 817,
	1598, 89, 89, 1119, 89, 1103, 630, 1124, 757, 955,
	1044, 1082, 1080, 519, 514, 935, 626, 1261, 350, 1348,
	652, 622, 502, 1430, 1007, 1006, 1347, 1061, 690, 267,
	1382, 245, 1224, 317, 977, 977, 977, 904, 654, 1337,
	1064, 1332, 1223, 956, 334, 936, 933, 1344, 902, 1330,
	1059, 843, 475, 1117, 1182, 1062, 653, 279, 1303, 474,
	1416, 1487, 667, 756, 1304, 1189, 342, 861, 1060, 1338,
	1597, 1220, 1055, 957, 954, 657, 658, 659, 945, 1414,
	1161, 1242, 1127, 66, 1164, 1165, 1166, 1090, 1094, 467,
	792, 862, 1096, 1198, 1346, 1200, 938, 650, 1162, 1061,
	1181, 900, 332, 899, 330, 1107, 1108, 905, 1063, 327,
	1188, 278, 1064, 706, 618, 1207, 944, 1328, 1199, 1197,
	1185, 69, 1227, 638, 958, 1045, 818, 1062, 1202, 815,
	493, 491, 1208, 486, 1209, 479, 476, 1333, 1238, 1334,
	1239, 74, 1212, 668, 1156, 1214, 70, 1270, 336, 1448,
	932, 1244, 470, 824, 1578, 1169, 323, 522, 1226, 1254,
	1222, 1450, 1336, 1225, 71, 1254, 77, 861, 1339, 1190,
	353, 1230, 1231, 763, 89, 901, 1205, 73, 953, 1271,
	1063, 1458, 903, 1499, 747, 1258, 1259, 1260, 1280, 263,
	762, 1282, 1522, 747, 669, 1221, 89, 357, 1255, 760,
	1517, 3, 652, 774, 825, 646, 475, 89, 1074, 89,
	1595, 89, 652, 1277, 89, 1596, 1281, 1335, 1132, 1279,
	654, 779, 1311, 1312, 324, 89, 1283, 652, 89, 316,
	354, 1318, 1319, 1320, 799, 1389, 89, 800, 653, 89,
	388, 1264, 1266, 1267, 1088, 314, 315, 1310, 653, 264,
	267, 272, 72, 267, 1309, 1086, 1322, 1313, 663, 660,
	661, 662, 655, 656, 657, 658, 659, 65, 1327, 1268,
	1237, 87, 1250, 1176, 989, 988, 987, 1323, 939, 842,
	864, 1375, 801, 1401, 254, 254, 1269, 802, 269, 75,
	89, 269, 275, 269, 699, 76, 269, 282, 269, 87,
	1370, 233, 1435, 1393, 1371, 28, 67, 1359, 1397, 1398,
	1084, 617, 328, 1400, 1089, 1408, 1545, 1120, 1402, 87,
	87, 1367, 1483, 1466, 1367, 943, 1386, 1377, 1378, 1394,
	704, 1383, 23, 1407, 1307, 1364, 381, 1410, 1329, 1366,
	1187, 811, 1366, 537, 1368, 1317, 1057, 1368, 523, 512,
	404, 331, 89, 89, 89, 1342, 1343, 506, 69, 515,
	89, 89, 951, 863, 454, 406, 89, 1418, 89, 227,
	89, 89, 89, 89, 840, 407, 1413, 841, 74, 842,
	864, 730, 1085, 70, 89, 394, 838, 1061, 290, 1087,
	843, 777, 89, 89, 940, 1352, 89, 1385, 1376, 1116,
	1064, 71, 89, 89, 230, 231, 232, 1425, 1442, 702,
	1059, 1426, 380, 386, 73, 1062, 385, 267, 267, 919,
	377, 267, 81, 1428, 843, 82, 1460, 1021, 1060, 1356,
	862, 843, 1444, 1445, 770, 819, 1337, 1459, 1457, 634,
	1381, 1451, 1471, 1443, 89, 1449, 1196, 236, 1129, 969,
	961, 959, 1477, 1478, 950, 338, 465, 1462, 1469, 778,
	364, 325, 843, 863, 862, 1367, 1338, 830, 1063, 1073,
	362, 862, 642, 262, 269, 261, 87, 1367, 343, 808,
	322, 1482, 1491, 1366, 963, 793, 1472, 839, 1368, 72,
	1480, 481, 1493, 254, 1498, 1366, 1533, 89, 1193, 89,
	1368, 89, 862, 1489, 46, 1492, 861, 17, 89, 269,
	16, 15, 14, 12, 467, 1380, 11, 1048, 1506, 269,
	269, 9, 484, 8, 7, 22, 75, 1508, 1514, 21,
	1510, 20, 1507, 1433, 1333, 5, 1334, 4, 1132, 2,
	861, 89, 843, 89, 1, 0, 0, 861, 1473, 1509,
	736, 89, 269, 89, 269, 0, 0, 0, 0, 1336,
	0, 0, 1521, 1367, 0, 1339, 1465, 0, 87, 0,
	269, 87, 0, 87, 1524, 0, 267, 1540, 861, 0,
	1145, 1366, 862, 629, 1538, 0, 1368, 839, 0, 1543,
	1535, 1539, 1542, 1537, 0, 1560, 0, 0, 0, 0,
	0, 254, 0, 1541, 648, 1561, 1559, 1571, 1571, 1562,
	217, 0, 0, 0, 1335, 89, 89, 1572, 1573, 89,
	1575, 0, 0, 1367, 226, 1579, 0, 89, 1581, 1571,
	1582, 0, 0, 0, 1518, 0, 0, 0, 1512, 89,
	0, 1366, 1594, 1593, 0, 0, 1368, 0, 843, 0,
	1580, 0, 0, 0, 0, 219, 1571, 1599, 861, 1530,
	1531, 1146, 0, 0, 89, 89, 89, 0, 89, 0,
	0, 0, 0, 0, 218, 220, 0, 0, 963, 963,
	0, 0, 0, 0, 0, 89, 0, 0, 862, 0,
	0, 1532, 0, 0, 0, 843, 0, 0, 0, 1548,
	269, 0, 0, 1092, 1093, 89, 221, 0, 0, 0,
	0, 0, 1147, 752, 0, 222, 843, 269, 842, 864,
	269, 0, 0, 0, 269, 0, 781, 782, 0, 269,
	779, 0, 269, 87, 87, 862, 963, 963, 963, 269,
	648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 864, 0, 0, 862, 0, 0, 842,
	864, 1153, 1154, 1155, 861, 0, 0, 382, 29, 0,
	0, 0, 0, 0, 0, 0, 1141, 1138, 1139, 1140,
	1133, 1134, 1135, 1136, 1137, 0, 0, 843, 0, 0,
	842, 864, 0, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 863, 0, 0, 652, 0, 241, 0, 0,
	249, 861, 223, 0, 0, 224, 0, 29, 0, 225,
	0, 0, 0, 654, 0, 0, 0, 862, 249, 0,
	0, 0, 861, 0, 0, 0, 863, 0, 0, 0,
	0, 653, 0, 863, 0, 0, 1132, 0, 1148, 1149,
	1150, 0, 963, 963, 0, 0, 0, 0, 1248, 805,
	0, 0, 0, 0, 0, 269, 752, 0, 0, 0,
	842, 864, 0, 0, 863, 0, 0, 1240, 1241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1145, 0,
	0, 269, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 963, 963, 963, 963, 963,
	963, 963, 963, 963, 963, 963, 963, 963, 963, 963,
	963, 963, 963, 0, 963, 0, 839, 0, 668, 0,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 0, 1305,
	0, 0, 652, 0, 863, 1151, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 0, 0, 839, 0, 1146,
	654, 0, 0, 0, 0, 0, 842, 864, 0, 669,
	0, 652, 0, 0, 0, 269, 997, 998, 653, 0,
	0, 752, 0, 0, 1003, 0, 652, 0, 839, 654,
	1008, 1009, 1011, 1013, 1014, 0, 1017, 1018, 0, 0,
	0, 0, 0, 269, 654, 1025, 679, 653, 241, 0,
	1147, 269, 0, 842, 864, 0, 0, 0, 0, 0,
	805, 0, 653, 805, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 0, 842, 864, 662, 655, 656, 657,
	658, 659, 0, 0, 629, 0, 87, 269, 0, 1046,
	863, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	0, 0, 0, 1068, 1068, 668, 269, 0, 839, 0,
	1142, 1143, 1144, 0, 1141, 1138, 1139, 1140, 1133, 1134,
	1135, 1136, 1137, 0, 680, 0, 1132, 0, 1148, 1149,
	1150, 0, 0, 0, 668, 0, 0, 863, 1247, 0,
	963, 0, 0, 0, 675, 842, 864, 0, 0, 668,
	241, 0, 0, 241, 241, 0, 669, 0, 863, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 1145, 0,
	0, 0, 0, 0, 0, 0, 652, 689, 670, 671,
	672, 693, 0, 0, 0, 669, 0, 0, 673, 0,
	0, 0, 0, 0, 654, 0, 679, 0, 0, 0,
	669, 1132, 0, 1148, 1149, 1150, 0, 0, 0, 677,
	0, 0, 653, 0, 839, 0, 963, 0, 667, 0,
	0, 660, 661, 662, 655, 656, 657, 658, 659, 863,
	0, 0, 0, 0, 0, 1151, 0, 0, 0, 0,
	0, 1486, 0, 1145, 0, 0, 0, 0, 0, 1146,
	0, 0, 0, 655, 656, 657, 658, 659, 676, 0,
	0, 839, 0, 0, 663, 660, 661, 662, 655, 656,
	657, 658, 659, 0, 680, 0, 648, 0, 0, 29,
	0, 0, 839, 0, 652, 678, 670, 671, 672, 963,
	0, 0, 29, 0, 675, 0, 673, 0, 269, 668,
	1147, 0, 654, 0, 679, 0, 0, 0, 0, 1211,
	1151, 752, 0, 629, 1523, 0, 1217, 0, 0, 674,
	653, 0, 0, 0, 1146, 0, 667, 269, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 1232, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 839, 0, 0, 0, 0, 0, 677,
	1142, 1143, 1144, 0, 1141, 1138, 1139, 1140, 1133, 1134,
	1135, 1136, 1137, 0, 0, 1147, 0, 0, 0, 0,
	0, 0, 680, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1274, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 675, 0, 0, 0, 0, 668, 676, 0,
	664, 665, 666, 0, 663, 660, 661, 662, 655, 656,
	657, 658, 659, 0, 0, 0, 992, 674, 0, 0,
	0, 0, 0, 993, 0, 1142, 1143, 1144, 0, 1141,
	1138, 1139, 1140, 1133, 1134, 1135, 1136, 1137, 833, 0,
	0, 0, 0, 0, 1325, 1326, 752, 0, 669, 0,
	0, 0, 648, 648, 0, 0, 0, 677, 1350, 0,
	1351, 0, 269, 1353, 1354, 1355, 0, 0, 910, 0,
	0, 0, 0, 0, 1363, 0, 752, 1363, 0, 0,
	0, 0, 0, 0, 269, 269, 0, 0, 269, 0,
	0, 0, 0, 0, 648, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 0, 664, 665,
	666, 0, 663, 660, 661, 662, 655, 656, 657, 658,
	659, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 1409, 0, 0, 0,
	0, 19, 0, 0, 0, 0, 652, 0, 670, 671,
	672, 32, 0, 0, 0, 0, 0, 0, 673, 0,
	249, 0, 0, 0, 654, 0, 679, 0, 0, 0,
	0, 0, 34, 1132, 0, 1148, 1149, 1150, 38, 0,
	0, 0, 653, 0, 0, 0, 0, 0, 667, 752,
	0, 1427, 652, 87, 670, 671, 672, 0, 0, 0,
	269, 0, 0, 24, 673, 35, 0, 0, 0, 25,
	654, 0, 679, 0, 29, 1145, 0, 0, 1363, 0,
	0, 26, 0, 1070, 0, 0, 0, 0, 653, 0,
	1363, 0, 0, 269, 667, 1468, 0, 0, 0, 0,
	0, 0, 0, 269, 680, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 668,
	0, 1152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1151, 0, 0, 910, 0, 0, 0, 674,
	680, 0, 0, 0, 0, 0, 1146, 0, 0, 689,
	27, 678, 36, 0, 0, 0, 0, 1500, 1501, 45,
	675, 1505, 0, 30, 31, 668, 1363, 0, 0, 87,
	669, 33, 0, 0, 0, 0, 0, 47, 0, 677,
	0, 648, 0, 0, 0, 674, 0, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 0, 1147, 0, 0,
	0, 0, 48, 0, 0, 689, 648, 648, 269, 43,
	87, 0, 0, 0, 0, 44, 669, 0, 0, 0,
	0, 0, 0, 0, 0, 677, 1363, 1468, 676, 0,
	664, 665, 666, 42, 663, 660, 661, 662, 655, 656,
	657, 658, 659, 0, 0, 0, 0, 269, 0, 0,
	0, 1172, 0, 0, 0, 0, 0, 1142, 1143, 1144,
	0, 1141, 1138, 1139, 1140, 1133, 1134, 1135, 1136, 1137,
	0, 0, 0, 0, 676, 0, 664, 665, 666, 0,
	663, 660, 661, 662, 655, 656, 657, 658, 659, 0,
	0, 0, 1324, 0, 833, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 390, 391, 392, 389,
	378, 0, 0, 0, 0, 0, 0, 91, 92, 928,
	93, 0, 0, 0, 0, 384, 0, 0, 0, 94,
	95, 177, 431, 432, 96, 433, 434, 0, 97, 182,
	98, 399, 417, 435, 436, 0, 427, 0, 410, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 299, 104,
	105, 0, 411, 413, 0, 412, 414, 106, 107, 108,
	109, 437, 110, 438, 439, 0, 0, 111, 0, 929,
	0, 430, 113, 0, 0, 0, 0, 383, 114, 418,
	397, 0, 115, 116, 440, 117, 0, 0, 0, 300,
	0, 118, 428, 0, 193, 0, 119, 424, 426, 0,
	0, 0, 301, 120, 441, 442, 443, 0, 409, 0,
	302, 121, 303, 122, 0, 0, 429, 304, 123, 305,
	0, 255, 0, 0, 29, 124, 125, 126, 127, 256,
	306, 128, 129, 373, 130, 398, 425, 131, 444, 132,
	133, 833, 833, 0, 0, 833, 134, 203, 307, 135,
	308, 419, 136, 137, 0, 420, 138, 206, 0, 139,
	140, 445, 141, 142, 0, 143, 144, 145, 0, 146,
	309, 147, 148, 387, 149, 0, 150, 151, 0, 152,
	257, 415, 153, 154, 310, 155, 446, 156, 0, 157,
	158, 160, 210, 159, 421, 0, 0, 161, 162, 0,
	259, 447, 0, 0, 258, 422, 423, 396, 163, 164,
	165, 166, 0, 0, 167, 168, 416, 0, 169, 170,
	171, 215, 448, 927, 172, 0, 0, 0, 0, 173,
	174, 175, 176, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 371, 930, 0, 0, 0, 372,
	0, 0, 379, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 91, 92, 538, 93, 539, 540, 541,
	542, 543, 544, 545, 546, 94, 95, 177, 178, 179,
	96, 180, 181, 547, 97, 182, 98, 548, 549, 183,
	184, 550, 185, 551, 298, 552, 99, 100, 101, 0,
	102, 553, 103, 554, 299, 104, 105, 555, 556, 557,
	558, 559, 560, 106, 107, 108, 109, 186, 110, 187,
	188, 561, 562, 111, 563, 564, 565, 112, 113, 566,
	567, 689, 568, 189, 114, 190, 569, 570, 115, 116,
	191, 117, 571, 572, 573, 300, 574, 118, 192, 575,
	193, 576, 119, 194, 195, 577, 578, 579, 301, 120,
	196, 197, 198, 580, 199, 581, 302, 121, 303, 122,
	582, 583, 200, 304, 123, 305, 584, 255, 585, 586,
	0, 124, 125, 126, 127, 256, 306, 128, 129, 587,
	130, 588, 201, 131, 202, 132, 133, 589, 590, 591,
	592, 593, 134, 203, 307, 135, 308, 204, 136, 137,
	594, 205, 138, 206, 595, 139, 140, 207, 141, 142,
	596, 143, 144, 145, 597, 146, 309, 147, 148, 208,
	149, 0, 150, 151, 598, 152, 257, 599, 153, 154,
	310, 155, 209, 156, 600, 157, 158, 160, 210, 159,
	211, 601, 602, 161, 162, 603, 259, 212, 604, 605,
	258, 213, 214, 606, 163, 164, 165, 166, 607, 608,
	167, 168, 609, 610, 169, 170, 171, 215, 216, 611,
	172, 612, 613, 614, 615, 173, 174, 175, 176, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 91, 92, 538, 93, 539, 540, 541, 542,
	543, 544, 545, 546, 94, 95, 177, 178, 179, 96,
	180, 181, 547, 97, 182, 98, 548, 549, 183, 184,
	550, 185, 551, 298, 552, 99, 100, 101, 0, 102,
	553, 103, 554, 299, 104, 105, 555, 556, 557, 558,
	559, 560, 106, 107, 108, 109, 186, 110, 187, 188,
	561, 562, 111, 563, 564, 565, 112, 113, 566, 567,
	0, 568, 189, 114, 190, 569, 570, 115, 116, 191,
	117, 571, 572, 573, 300, 574, 118, 192, 575, 193,
	576, 119, 194, 195, 577, 578, 579, 301, 120, 196,
	197, 198, 580, 199, 581, 302, 121, 303, 122, 582,
	583, 200, 304, 123, 305, 584, 255, 585, 586, 0,
	124, 125, 126, 127, 256, 306, 128, 129, 587, 130,
	588, 201, 131, 202, 132, 133, 589, 590, 591, 592,
	593, 134, 203, 307, 135, 308, 204, 136, 137, 594,
	205, 138, 206, 595, 139, 140, 207, 141, 142, 596,
	143, 144, 145, 597, 146, 309, 147, 148, 208, 149,
	0, 150, 151, 598, 152, 257, 599, 153, 154, 310,
	155, 209, 156, 600, 157, 158, 160, 210, 159, 211,
	601, 602, 161, 162, 603, 259, 212, 604, 605, 258,
	213, 214, 606, 163, 164, 165, 166, 607, 608, 167,
	168, 609, 610, 169, 170, 171, 215, 216, 611, 172,
	612, 613, 614, 615, 173, 174, 175, 176, 402, 390,
	391, 392, 389, 378, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 0, 384, 0,
	0, 0, 94, 95, 177, 431, 432, 96, 433, 434,
	0, 97, 182, 98, 399, 417, 435, 436, 0, 427,
	0, 410, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 411, 413, 0, 412, 414,
	106, 107, 108, 109, 437, 110, 438, 439, 468, 0,
	111, 0, 0, 0, 430, 113, 0, 0, 0, 0,
	383, 114, 418, 397, 0, 115, 116, 440, 117, 0,
	0, 0, 300, 0, 118, 428, 0, 193, 0, 119,
	424, 426, 0, 0, 0, 301, 120, 441, 442, 443,
	0, 409, 0, 302, 121, 303, 122, 0, 0, 429,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 373, 130, 398, 425,
	131, 444, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 419, 136, 137, 0, 420, 138,
	206, 0, 139, 140, 445, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 387, 149, 0, 150,
	151, 45, 152, 257, 415, 153, 154, 310, 155, 446,
	156, 0, 157, 158, 160, 210, 159, 421, 0, 47,
	161, 162, 0, 259, 447, 0, 0, 258, 422, 423,
	396, 163, 164, 165, 166, 0, 0, 167, 168, 416,
	0, 169, 170, 171, 297, 448, 0, 172, 0, 0,
	0, 43, 173, 174, 175, 176, 374, 44, 402, 390,
	391, 392, 389, 378, 0, 0, 370, 371, 0, 0,
	91, 92, 372, 93, 0, 379, 0, 0, 384, 0,
	0, 0, 94, 95, 177, 431, 432, 96, 433, 434,
	0, 97, 182, 98, 399, 417, 435, 436, 0, 427,
	0, 410, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 411, 413, 0, 412, 414,
	106, 107, 108, 109, 437, 110, 438, 439, 0, 0,
	111, 0, 0, 0, 430, 113, 0, 0, 0, 0,
	383, 114, 418, 397, 0, 115, 116, 440, 117, 0,
	0, 0, 300, 0, 118, 428, 0, 193, 0, 119,
	424, 426, 0, 0, 0, 301, 120, 441, 442, 443,
	0, 409, 0, 302, 121, 303, 122, 0, 0, 429,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 373, 130, 398, 425,
	131, 444, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 419, 136, 137, 0, 420, 138,
	206, 0, 139, 140, 445, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 387, 149, 0, 150,
	151, 45, 152, 257, 415, 153, 154, 310, 155, 446,
	156, 0, 157, 158, 160, 210, 159, 421, 0, 47,
	161, 162, 0, 259, 447, 0, 0, 258, 422, 423,
	396, 163, 164, 165, 166, 0, 0, 167, 168, 416,
	0, 169, 170, 171, 297, 448, 0, 172, 0, 0,
	0, 43, 173, 174, 175, 176, 374, 44, 402, 390,
	391, 392, 389, 378, 0, 0, 370, 371, 0, 0,
	91, 92, 372, 93, 0, 379, 0, 0, 384, 0,
	0, 0, 94, 95, 177, 431, 432, 96, 433, 434,
	973, 97, 182, 98, 399, 417, 435, 436, 0, 427,
	0, 410, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 411, 413, 0, 412, 414,
	106, 107, 108, 109, 437, 110, 438, 439, 0, 0,
	111, 0, 0, 0, 430, 113, 0, 0, 0, 0,
	383, 114, 418, 397, 0, 115, 116, 440, 117, 0,
	0, 978, 300, 0, 118, 428, 0, 193, 0, 119,
	424, 426, 0, 0, 0, 301, 120, 441, 442, 443,
	0, 409, 0, 302, 121, 303, 122, 0, 974, 429,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 373, 130, 398, 425,
	131, 444, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 419, 136, 137, 0, 420, 138,
	206, 0, 139, 140, 445, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 387, 149, 0, 150,
	151, 0, 152, 257, 415, 153, 154, 310, 155, 446,
	156, 0, 157, 158, 160, 210, 159, 421, 0, 0,
	161, 162, 0, 259, 447, 0, 975, 258, 422, 423,
	396, 163, 164, 165, 166, 0, 0, 167, 168, 416,
	0, 169, 170, 171, 215, 448, 0, 172, 0, 0,
	0, 0, 173, 174, 175, 176, 374, 0, 402, 390,
	391, 392, 389, 378, 0, 0, 370, 371, 0, 0,
	91, 92, 372, 93, 0, 379, 0, 0, 384, 0,
	0, 0, 94, 95, 177, 431, 432, 96, 433, 434,
	0, 97, 182, 98, 399, 417, 435, 436, 0, 427,
	0, 410, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 411, 413, 0, 412, 414,
	106, 107, 108, 109, 437, 110, 438, 439, 0, 0,
	111, 0, 0, 0, 430, 113, 0, 0, 0, 0,
	383, 114, 418, 397, 0, 115, 116, 440, 117, 0,
	0, 0, 300, 0, 118, 428, 0, 193, 0, 119,
	424, 426, 0, 0, 0, 301, 120, 441, 442, 443,
	0, 409, 0, 302, 121, 303, 122, 0, 0, 429,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 373, 130, 398, 425,
	131, 444, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 419, 136, 137, 0, 420, 138,
	206, 0, 139, 140, 445, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 387, 149, 0, 150,
	151, 0, 152, 257, 415, 153, 154, 310, 155, 446,
	156, 0, 157, 158, 160, 210, 159, 421, 0, 0,
	161, 162, 0, 259, 447, 0, 0, 258, 422, 423,
	396, 163, 164, 165, 166, 0, 0, 167, 168, 416,
	0, 169, 170, 171, 215, 448, 0, 172, 0, 0,
	0, 0, 173, 174, 175, 176, 374, 0, 402, 390,
	391, 392, 389, 378, 0, 0, 370, 371, 0, 0,
	91, 92, 372, 93, 0, 379, 1308, 0, 384, 0,
	0, 0, 94, 95, 177, 431, 432, 96, 433, 434,
	0, 97, 182, 98, 399, 417, 435, 436, 0, 427,
	0, 410, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 411, 413, 0, 412, 414,
	106, 107, 108, 109, 437, 110, 438, 439, 0, 0,
	111, 0, 0, 0, 430, 113, 0, 0, 0, 0,
	383, 114, 418, 397, 0, 115, 116, 440, 117, 0,
	0, 0, 300, 0, 118, 428, 0, 193, 0, 119,
	424, 426, 0, 0, 0, 301, 120, 441, 442, 443,
	0, 409, 0, 302, 121, 303, 122, 0, 0, 429,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 373, 130, 398, 425,
	131, 444, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 419, 136, 137, 0, 420, 138,
	206, 0, 139, 140, 445, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 387, 149, 0, 150,
	151, 0, 152, 257, 415, 153, 154, 310, 155, 446,
	156, 0, 157, 158, 160, 210, 159, 421, 0, 0,
	161, 162, 0, 259, 447, 0, 0, 258, 422, 423,
	396, 163, 164, 165, 166, 0, 0, 167, 168, 416,
	0, 169, 170, 171, 215, 448, 0, 172, 0, 0,
	0, 0, 173, 174, 175, 176, 374, 0, 402, 390,
	391, 392, 389, 378, 0, 0, 370, 371, 0, 0,
	91, 92, 372, 93, 0, 379, 1251, 0, 384, 0,
	0, 0, 94, 95, 177, 431, 432, 96, 433, 434,
	0, 97, 182, 98, 399, 417, 435, 436, 0, 427,
	0, 410, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 411, 413, 0, 412, 414,
	106, 107, 108, 109, 437, 110, 438, 439, 0, 0,
	111, 0, 0, 0, 430, 113, 0, 0, 0, 0,
	383, 114, 418, 397, 0, 115, 116, 440, 117, 0,
	0, 0, 300, 0, 118, 428, 0, 193, 0, 119,
	424, 426, 0, 0, 0, 301, 120, 441, 442, 443,
	0, 409, 0, 302, 121, 303, 122, 0, 0, 429,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 373, 130, 398, 425,
	131, 444, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 419, 136, 137, 0, 420, 138,
	206, 0, 139, 140, 445, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 387, 149, 0, 150,
	151, 0, 152, 257, 415, 153, 154, 310, 155, 446,
	156, 0, 157, 158, 160, 210, 159, 421, 0, 0,
	161, 162, 0, 259, 447, 0, 0, 258, 422, 423,
	396, 163, 164, 165, 166, 0, 0, 167, 168, 416,
	0, 169, 170, 171, 215, 448, 0, 172, 0, 0,
	0, 0, 173, 174, 175, 176, 374, 0, 402, 390,
	391, 392, 389, 378, 0, 0, 370, 371, 0, 0,
	91, 92, 372, 93, 0, 379, 924, 0, 384, 0,
	0, 0, 94, 95, 177, 431, 432, 96, 433, 434,
	0, 97, 182, 98, 399, 417, 435, 436, 0, 427,
	0, 410, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 411, 413, 0, 412, 414,
	106, 107, 108, 109, 437, 110, 438, 439, 0, 0,
	111, 0, 0, 0, 430, 113, 0, 0, 0, 0,
	383, 114, 418, 397, 0, 115, 116, 440, 117, 0,
	0, 0, 300, 0, 118, 428, 0, 193, 0, 119,
	424, 426, 0, 0, 0, 301, 120, 441, 442, 443,
	0, 409, 0, 302, 121, 303, 122, 0, 0, 429,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 373, 130, 398, 425,
	131, 444, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 419, 136, 137, 0, 420, 138,
	206, 0, 139, 140, 445, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 387, 149, 0, 150,
	151, 0, 152, 257, 415, 153, 154, 310, 155, 446,
	156, 0, 157, 158, 160, 210, 159, 421, 0, 0,
	161, 162, 0, 259, 447, 0, 0, 258, 422, 423,
	396, 163, 164, 165, 166, 0, 0, 167, 168, 416,
	0, 169, 170, 171, 215, 448, 0, 172, 0, 0,
	0, 0, 173, 174, 175, 176, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 370, 371, 0, 0,
	0, 0, 372, 695, 920, 379, 402, 390, 391, 392,
	389, 378, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 0, 384, 0, 0, 0,
	94, 95, 177, 431, 432, 96, 433, 434, 0, 97,
	182, 98, 399, 417, 435, 436, 0, 427, 0, 410,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 299,
	104, 105, 0, 411, 413, 0, 412, 414, 106, 107,
	108, 109, 437, 110, 438, 439, 0, 0, 111, 0,
	0, 0, 430, 113, 0, 0, 0, 0, 383, 114,
	418, 397, 0, 115, 116, 440, 117, 0, 0, 0,
	300, 0, 118, 428, 0, 193, 0, 119, 424, 426,
	0, 0, 0, 301, 120, 441, 442, 443, 0, 409,
	0, 302, 121, 303, 122, 0, 0, 429, 304, 123,
	305, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 306, 128, 129, 373, 130, 398, 425, 131, 444,
	132, 133, 0, 0, 0, 0, 0, 134, 203, 307,
	135, 308, 419, 136, 137, 0, 420, 138, 206, 0,
	139, 140, 445, 141, 142, 0, 143, 144, 145, 0,
	146, 309, 147, 148, 387, 149, 0, 150, 151, 0,
	152, 257, 415, 153, 154, 310, 155, 446, 156, 0,
	157, 158, 160, 210, 159, 421, 0, 0, 161, 162,
	0, 259, 447, 0, 0, 258, 422, 423, 396, 163,
	164, 165, 166, 0, 0, 167, 168, 416, 0, 169,
	170, 171, 215, 448, 1257, 172, 0, 0, 0, 0,
	173, 174, 175, 176, 374, 0, 402, 390, 391, 392,
	389, 378, 0, 0, 370, 371, 0, 0, 91, 92,
	372, 93, 0, 379, 0, 0, 384, 0, 0, 0,
	94, 95, 177, 431, 432, 96, 433, 434, 0, 97,
	182, 98, 399, 417, 435, 436, 0, 427, 0, 410,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 299,
	104, 105, 0, 411, 413, 0, 412, 414, 106, 107,
	108, 109, 437, 110, 438, 439, 468, 0, 111, 0,
	0, 0, 430, 113, 0, 0, 0, 0, 383, 114,
	418, 397, 0, 115, 116, 440, 117, 0, 0, 0,
	300, 0, 118, 428, 0, 193, 0, 119, 424, 426,
	0, 0, 0, 301, 120, 441, 442, 443, 0, 409,
	0, 302, 121, 303, 122, 0, 0, 429, 304, 123,
	305, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 306, 128, 129, 373, 130, 398, 425, 131, 444,
	132, 133, 0, 0, 0, 0, 0, 134, 203, 307,
	135, 308, 419, 136, 137, 0, 420, 138, 206, 0,
	139, 140, 445, 141, 142, 0, 143, 144, 145, 0,
	146, 309, 147, 148, 387, 149, 0, 150, 151, 0,
	152, 257, 415, 153, 154, 310, 155, 446, 156, 0,
	157, 158, 160, 210, 159, 421, 0, 0, 161, 162,
	0, 259, 447, 0, 0, 258, 422, 423, 396, 163,
	164, 165, 166, 0, 0, 167, 168, 416, 0, 169,
	170, 171, 215, 448, 0, 172, 0, 0, 0, 0,
	173, 174, 175, 176, 374, 0, 402, 390, 391, 392,
	389, 378, 0, 0, 370, 371, 0, 0, 91, 92,
	372, 93, 0, 379, 0, 0, 384, 0, 0, 0,
	94, 95, 177, 431, 432, 96, 433, 434, 0, 97,
	182, 98, 399, 417, 435, 436, 0, 427, 0, 410,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 299,
	104, 105, 0, 411, 413, 0, 412, 414, 106, 107,
	108, 109, 437, 110, 438, 439, 0, 0, 111, 0,
	0, 0, 430, 113, 0, 0, 0, 0, 383, 114,
	418, 397, 0, 115, 116, 440, 117, 0, 0, 978,
	300, 0, 118, 428, 0, 193, 0, 119, 424, 426,
	0, 0, 0, 301, 120, 441, 442, 443, 0, 409,
	0, 302, 121, 303, 122, 0, 0, 429, 304, 123,
	305, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 306, 128, 129, 373, 130, 398, 425, 131, 444,
	132, 133, 0, 0, 0, 0, 0, 134, 203, 307,
	135, 308, 419, 136, 137, 0, 420, 138, 206, 0,
	139, 140, 445, 141, 142, 0, 143, 144, 145, 0,
	146, 309, 147, 148, 387, 149, 0, 150, 151, 0,
	152, 257, 415, 153, 154, 310, 155, 446, 156, 0,
	157, 158, 160, 210, 159, 421, 0, 0, 161, 162,
	0, 259, 447, 0, 0, 258, 422, 423, 396, 163,
	164, 165, 166, 0, 0, 167, 168, 416, 0, 169,
	170, 171, 215, 448, 0, 172, 0, 0, 0, 0,
	173, 174, 175, 176, 374, 0, 402, 390, 391, 392,
	389, 378, 0, 0, 370, 371, 0, 0, 91, 92,
	372, 93, 0, 379, 0, 0, 384, 0, 0, 0,
	94, 95, 177, 431, 432, 96, 433, 434, 0, 97,
	182, 98, 399, 417, 435, 436, 0, 427, 0, 410,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 299,
	104, 105, 0, 411, 413, 0, 412, 414, 106, 107,
	108, 109, 437, 110, 438, 439, 0, 0, 111, 0,
	0, 0, 430, 113, 0, 0, 0, 0, 383, 114,
	418, 397, 0, 115, 116, 440, 117, 0, 0, 0,
	300, 0, 118, 428, 0, 193, 0, 119, 424, 426,
	0, 0, 0, 301, 120, 441, 442, 443, 0, 409,
	0, 302, 121, 303, 122, 0, 0, 429, 304, 123,
	305, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 306, 128, 129, 373, 130, 398, 425, 131, 444,
	132, 133, 0, 0, 0, 0, 0, 134, 203, 307,
	135, 308, 419, 136, 137, 0, 420, 138, 206, 0,
	139, 140, 445, 141, 142, 0, 143, 144, 145, 0,
	146, 309, 147, 148, 387, 149, 0, 150, 151, 0,
	152, 257, 415, 153, 154, 310, 155, 446, 156, 0,
	157, 158, 160, 210, 159, 421, 0, 0, 161, 162,
	0, 259, 447, 0, 0, 258, 422, 423, 396, 163,
	164, 165, 166, 0, 0, 167, 168, 416, 0, 169,
	170, 171, 215, 448, 0, 172, 0, 0, 0, 0,
	173, 174, 175, 176, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 370, 371, 368, 0, 0, 0,
	372, 0, 0, 379, 402, 390, 391, 392, 389, 378,
	0, 0, 0, 0, 0, 0, 91, 92, 636, 93,
	0, 0, 0, 0, 384, 0, 0, 0, 94, 95,
	177, 431, 432, 96, 433, 434, 0, 97, 182, 98,
	399, 417, 435, 436, 0, 427, 0, 410, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 299, 104, 105,
	0, 411, 413, 0, 412, 414, 106, 107, 108, 109,
	437, 110, 438, 439, 0, 0, 111, 0, 0, 0,
	430, 113, 0, 0, 0, 0, 383, 114, 418, 397,
	0, 115, 116, 440, 117, 0, 0, 0, 300, 0,
	118, 428, 0, 193, 0, 119, 424, 426, 0, 0,
	0, 301, 120, 441, 442, 443, 0, 409, 0, 302,
	121, 303, 122, 0, 0, 429, 304, 123, 305, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 306,
	128, 129, 373, 130, 398, 425, 131, 444, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 307, 135, 308,
	419, 136, 137, 0, 420, 138, 206, 0, 139, 140,
	445, 141, 142, 0, 143, 144, 145, 0, 146, 309,
	147, 148, 387, 149, 0, 150, 151, 0, 152, 257,
	415, 153, 154, 310, 155, 446, 156, 0, 157, 158,
	160, 210, 159, 421, 0, 0, 161, 162, 0, 259,
	447, 0, 0, 258, 422, 423, 396, 163, 164, 165,
	166, 0, 0, 167, 168, 416, 0, 169, 170, 171,
	215, 448, 0, 172, 0, 0, 0, 0, 173, 174,
	175, 176, 374, 0, 402, 390, 391, 392, 389, 378,
	0, 0, 370, 371, 0, 0, 91, 92, 372, 93,
	0, 379, 0, 0, 384, 0, 0, 0, 94, 95,
	177, 431, 432, 96, 433, 434, 0, 97, 182, 98,
	399, 417, 435, 436, 0, 427, 0, 410, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 299, 104, 1570,
	0, 411, 413, 0, 412, 414, 106, 107, 108, 109,
	437, 110, 438, 439, 0, 0, 111, 0, 0, 0,
	430, 113, 0, 0, 0, 0, 383, 114, 418, 397,
	0, 115, 116, 440, 117, 0, 0, 0, 300, 0,
	118, 428, 0, 193, 0, 119, 424, 426, 0, 0,
	0, 301, 120, 441, 442, 443, 0, 409, 0, 302,
	121, 303, 122, 0, 0, 429, 304, 123, 305, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 306,
	128, 129, 373, 130, 398, 425, 131, 444, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 307, 135, 308,
	419, 136, 137, 0, 420, 138, 206, 0, 139, 140,
	445, 141, 142, 0, 143, 144, 145, 0, 146, 309,
	147, 148, 387, 149, 0, 150, 151, 0, 152, 257,
	415, 153, 154, 310, 155, 446, 156, 0, 157, 158,
	160, 210, 159, 421, 0, 0, 161, 162, 0, 259,
	447, 0, 0, 258, 422, 423, 396, 163, 164, 1569,
	166, 0, 0, 167, 168, 416, 0, 169, 170, 171,
	215, 448, 0, 172, 0, 0, 0, 0, 173, 174,
	175, 176, 374, 0, 402, 390, 391, 392, 389, 378,
	0, 0, 370, 371, 0, 0, 91, 92, 372, 93,
	0, 379, 0, 0, 384, 0, 0, 0, 94, 95,
	1568, 431, 432, 96, 433, 434, 0, 97, 182, 98,
	399, 417, 435, 436, 0, 427, 0, 410, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 299, 104, 1570,
	0, 411, 413, 0, 412, 414, 106, 107, 108, 109,
	437, 110, 438, 439, 0, 0, 111, 0, 0, 0,
	430, 113, 0, 0, 0, 0, 383, 114, 418, 397,
	0, 115, 116, 440, 117, 0, 0, 0, 300, 0,
	118, 428, 0, 193, 0, 119, 424, 426, 0, 0,
	0, 301, 120, 441, 442, 443, 0, 409, 0, 302,
	121, 303, 122, 0, 0, 429, 304, 123, 305, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 306,
	128, 129, 373, 130, 398, 425, 131, 444, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 307, 135, 308,
	419, 136, 137, 0, 420, 138, 206, 0, 139, 140,
	445, 141, 142, 0, 143, 144, 145, 0, 146, 309,
	147, 148, 387, 149, 0, 150, 151, 0, 152, 257,
	415, 153, 154, 310, 155, 446, 156, 0, 157, 158,
	160, 210, 159, 421, 0, 0, 161, 162, 0, 259,
	447, 0, 0, 258, 422, 423, 396, 163, 164, 1569,
	166, 0, 0, 167, 168, 416, 0, 169, 170, 171,
	215, 448, 0, 172, 0, 0, 0, 0, 173, 174,
	175, 176, 374, 0, 402, 390, 391, 392, 389, 378,
	0, 0, 370, 371, 0, 0, 91, 92, 372, 93,
	0, 379, 0, 0, 384, 0, 0, 0, 94, 95,
	177, 431, 432, 96, 433, 434, 0, 97, 182, 98,
	399, 417, 435, 436, 0, 427, 0, 410, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 299, 104, 105,
	0, 411, 413, 0, 412, 414, 106, 107, 108, 109,
	437, 110, 438, 439, 0, 0, 111, 0, 0, 0,
	430, 113, 0, 0, 0, 0, 383, 114, 418, 397,
	0, 115, 116, 440, 117, 0, 0, 0, 300, 0,
	118, 428, 0, 193, 0, 119, 424, 426, 0, 0,
	0, 301, 120, 441, 442, 443, 0, 409, 0, 302,
	121, 303, 122, 0, 0, 429, 304, 123, 305, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 306,
	128, 129, 373, 130, 398, 425, 131, 444, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 307, 135, 308,
	419, 136, 137, 0, 420, 138, 206, 0, 139, 140,
	445, 141, 142, 0, 143, 144, 145, 0, 146, 309,
	147, 148, 387, 149, 0, 150, 151, 0, 152, 257,
	415, 153, 154, 310, 155, 446, 156, 0, 157, 158,
	160, 210, 159, 421, 0, 0, 161, 162, 0, 259,
	447, 0, 0, 258, 422, 423, 396, 163, 164, 165,
	166, 0, 0, 167, 168, 416, 0, 169, 170, 171,
	215, 448, 0, 172, 0, 0, 0, 0, 173, 174,
	175, 176, 374, 0, 402, 390, 391, 392, 389, 378,
	0, 0, 370, 371, 0, 0, 91, 92, 372, 93,
	0, 379, 0, 0, 384, 0, 0, 0, 94, 95,
	177, 431, 432, 96, 433, 434, 0, 97, 182, 98,
	399, 417, 435, 436, 0, 427, 0, 410, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 299, 104, 105,
	0, 411, 413, 0, 412, 414, 106, 107, 108, 109,
	437, 110, 438, 439, 0, 0, 111, 0, 0, 0,
	430, 113, 0, 0, 0, 0, 383, 114, 418, 397,
	0, 115, 116, 440, 117, 0, 0, 0, 300, 0,
	118, 428, 0, 193, 0, 119, 424, 426, 0, 0,
	0, 301, 120, 441, 442, 443, 0, 409, 0, 302,
	121, 303, 122, 0, 0, 429, 304, 123, 305, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 306,
	128, 129, 0, 130, 398, 425, 131, 444, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 307, 135, 308,
	419, 136, 137, 0, 420, 138, 206, 0, 139, 140,
	445, 141, 142, 0, 143, 144, 145, 0, 146, 309,
	147, 148, 968, 149, 0, 150, 151, 0, 152, 257,
	415, 153, 154, 310, 155, 446, 156, 0, 157, 158,
	160, 210, 159, 421, 0, 0, 161, 162, 0, 259,
	447, 0, 0, 258, 422, 423, 396, 163, 164, 165,
	166, 0, 0, 167, 168, 416, 0, 169, 170, 171,
	215, 448, 0, 172, 0, 0, 0, 0, 173, 174,
	175, 176, 402, 390, 391, 392, 389, 378, 0, 0,
	0, 0, 964, 965, 91, 92, 0, 93, 966, 0,
	0, 967, 384, 0, 0, 0, 94, 95, 0, 431,
	432, 96, 433, 434, 0, 97, 182, 98, 399, 417,
	435, 436, 0, 427, 0, 410, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 299, 104, 1570, 0, 411,
	413, 0, 412, 414, 106, 107, 108, 109, 437, 110,
	438, 439, 0, 0, 111, 0, 0, 0, 430, 113,
	0, 0, 0, 0, 383, 114, 418, 397, 0, 115,
	116, 440, 117, 0, 0, 0, 300, 0, 118, 428,
	0, 193, 0, 119, 424, 426, 0, 0, 0, 301,
	120, 441, 442, 443, 0, 409, 0, 0, 121, 303,
	122, 0, 0, 429, 304, 123, 0, 0, 255, 0,
	0, 0, 124, 125, 126, 127, 256, 306, 128, 129,
	373, 130, 398, 425, 131, 444, 132, 133, 0, 0,
	0, 0, 0, 134, 203, 307, 135, 308, 419, 136,
	137, 0, 420, 138, 206, 0, 139, 140, 445, 141,
	142, 0, 143, 144, 145, 0, 146, 309, 147, 148,
	387, 149, 0, 150, 151, 0, 152, 257, 415, 153,
	154, 0, 155, 446, 156, 0, 157, 158, 160, 210,
	159, 421, 0, 0, 161, 162, 0, 259, 447, 0,
	0, 258, 422, 423, 396, 163, 164, 1569, 166, 0,
	0, 167, 168, 416, 0, 169, 170, 171, 215, 448,
	0, 172, 0, 0, 0, 0, 173, 174, 175, 176,
	402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	370, 371, 91, 92, 0, 93, 372, 0, 0, 379,
	0, 0, 0, 0, 94, 95, 177, 178, 179, 96,
	180, 181, 0, 97, 182, 98, 0, 417, 183, 184,
	0, 427, 0, 410, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 299, 104, 105, 0, 411, 413, 0,
	412, 414, 106, 107, 108, 109, 186, 110, 187, 188,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 189, 114, 418, 0, 0, 115, 116, 191,
	117, 0, 0, 0, 300, 0, 118, 428, 0, 193,
	0, 119, 424, 426, 0, 0, 0, 301, 120, 196,
	197, 198, 0, 199, 0, 302, 121, 303, 122, 0,
	0, 429, 304, 123, 305, 0, 255, 0, 0, 0,
	124, 125, 126, 127, 256, 306, 128, 129, 0, 130,
	0, 425, 131, 202, 132, 133, 0, 0, 0, 0,
	0, 134, 203, 307, 135, 308, 419, 136, 137, 0,
	420, 138, 206, 0, 139, 140, 207, 141, 142, 0,
	143, 144, 145, 0, 146, 309, 147, 148, 208, 149,
	0, 150, 151, 0, 152, 257, 415, 153, 154, 310,
	155, 209, 156, 0, 157, 158, 160, 210, 159, 421,
	0, 0, 161, 162, 0, 259, 212, 0, 0, 258,
	422, 423, 0, 163, 164, 165, 166, 0, 0, 167,
	168, 416, 0, 169, 170, 171, 215, 216, 0, 172,
	0, 0, 0, 0, 173, 174, 175, 176, 293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 1365, 0, 0,
	0, 0, 94, 95, 177, 178, 179, 96, 180, 181,
	0, 97, 182, 98, 0, 0, 183, 184, 0, 185,
	0, 298, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 186, 110, 187, 188, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	189, 114, 190, 0, 0, 115, 116, 191, 117, 0,
	0, 0, 300, 0, 118, 192, 0, 193, 0, 119,
	194, 195, 0, 0, 0, 301, 120, 196, 197, 198,
	0, 199, 0, 302, 121, 303, 122, 0, 0, 200,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 0, 130, 0, 201,
	131, 202, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 204, 136, 137, 0, 205, 138,
	206, 0, 139, 140, 207, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 208, 149, 0, 150,
	151, 45, 152, 257, 0, 153, 154, 310, 155, 209,
	156, 0, 157, 158, 160, 210, 159, 211, 0, 47,
	161, 162, 0, 259, 212, 0, 0, 258, 213, 214,
	0, 163, 164, 165, 166, 0, 0, 167, 168, 0,
	0, 169, 170, 171, 297, 216, 0, 172, 0, 0,
	0, 43, 173, 174, 175, 176, 0, 44, 293, 513,
	517, 0, 518, 508, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 42, 0, 0, 0, 0,
	0, 0, 94, 95, 177, 178, 179, 96, 180, 181,
	0, 97, 182, 98, 0, 0, 183, 184, 0, 185,
	0, 298, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 186, 110, 187, 188, 521, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	189, 114, 190, 510, 0, 115, 116, 191, 117, 0,
	0, 0, 300, 0, 118, 192, 0, 193, 0, 119,
	194, 195, 0, 0, 0, 301, 120, 196, 197, 198,
	0, 199, 0, 302, 121, 303, 122, 0, 0, 200,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 0, 130, 0, 201,
	131, 202, 132, 133, 0, 511, 0, 0, 0, 134,
	203, 307, 135, 308, 204, 136, 137, 0, 205, 138,
	206, 0, 139, 140, 207, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 208, 149, 0, 150,
	151, 0, 152, 257, 0, 153, 154, 310, 155, 209,
	156, 0, 157, 158, 160, 210, 159, 211, 0, 0,
	161, 162, 0, 259, 212, 0, 0, 258, 213, 214,
	509, 163, 164, 165, 166, 0, 0, 167, 168, 0,
	0, 169, 170, 171, 215, 216, 0, 172, 0, 0,
	0, 0, 173, 174, 175, 176, 293, 513, 517, 0,
	518, 508, 0, 0, 0, 0, 519, 514, 91, 92,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 177, 178, 179, 96, 180, 181, 0, 97,
	182, 98, 0, 0, 183, 184, 0, 185, 0, 298,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 299,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 186, 110, 187, 188, 504, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 189, 114,
	190, 510, 0, 115, 116, 191, 117, 0, 0, 0,
	300, 0, 118, 192, 0, 193, 0, 119, 194, 195,
	0, 0, 0, 301, 120, 196, 197, 198, 0, 199,
	0, 302, 121, 303, 122, 0, 0, 200, 304, 123,
	305, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 306, 128, 129, 0, 130, 0, 201, 131, 202,
	132, 133, 0, 511, 0, 0, 0, 134, 203, 307,
	135, 308, 204, 136, 137, 0, 205, 138, 206, 0,
	139, 140, 207, 141, 142, 0, 143, 144, 145, 0,
	146, 309, 147, 148, 208, 149, 0, 150, 151, 0,
	152, 257, 0, 153, 154, 310, 155, 209, 156, 0,
	157, 158, 160, 210, 159, 211, 0, 0, 161, 162,
	0, 259, 212, 0, 0, 258, 213, 214, 509, 163,
	164, 165, 166, 0, 0, 167, 168, 0, 0, 169,
	170, 171, 215, 216, 0, 172, 0, 0, 0, 0,
	173, 174, 175, 176, 293, 513, 517, 0, 518, 508,
	0, 0, 0, 0, 519, 514, 91, 92, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	177, 178, 179, 96, 180, 181, 0, 97, 182, 98,
	0, 0, 183, 184, 0, 185, 0, 298, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 299, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	186, 110, 187, 188, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 189, 114, 190, 510,
	0, 115, 116, 191, 117, 0, 0, 0, 300, 0,
	118, 192, 0, 193, 0, 119, 194, 195, 0, 0,
	0, 301, 120, 196, 197, 198, 0, 199, 0, 302,
	121, 303, 122, 0, 0, 200, 304, 123, 305, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 306,
	128, 129, 0, 130, 0, 201, 131, 202, 132, 133,
	0, 511, 0, 0, 0, 134, 203, 307, 135, 308,
	204, 136, 137, 0, 205, 138, 206, 0, 139, 140,
	207, 141, 142, 0, 143, 144, 145, 0, 146, 309,
	147, 148, 208, 149, 0, 150, 151, 0, 152, 257,
	0, 153, 154, 310, 155, 209, 156, 0, 157, 158,
	160, 210, 159, 211, 0, 0, 161, 162, 0, 259,
	212, 0, 0, 258, 213, 214, 509, 163, 164, 165,
	166, 0, 0, 167, 168, 0, 0, 169, 170, 171,
	215, 216, 88, 172, 0, 0, 0, 0, 173, 174,
	175, 176, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 0, 519, 514, 0, 0, 94, 95, 177, 178,
	179, 96, 180, 181, 0, 97, 182, 98, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 186, 110,
	187, 188, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 189, 114, 190, 0, 0, 115,
	116, 191, 117, 0, 0, 0, 0, 0, 118, 192,
	0, 193, 0, 119, 194, 195, 0, 0, 0, 0,
	120, 196, 197, 198, 0, 199, 0, 0, 121, 0,
	122, 0, 0, 200, 0, 123, 0, 0, 255, 0,
	0, 0, 124, 125, 126, 127, 256, 0, 128, 129,
	0, 130, 0, 201, 131, 202, 132, 133, 0, 0,
	268, 0, 0, 134, 203, 0, 135, 0, 204, 136,
	137, 0, 205, 138, 206, 0, 139, 140, 207, 141,
	142, 0, 143, 144, 145, 0, 146, 0, 147, 148,
	208, 149, 0, 150, 151, 45, 152, 257, 0, 153,
	154, 0, 155, 209, 156, 0, 157, 158, 160, 210,
	159, 211, 0, 47, 161, 162, 0, 259, 212, 0,
	0, 258, 213, 214, 0, 163, 164, 165, 166, 0,
	0, 167, 168, 0, 0, 169, 170, 171, 297, 216,
	0, 172, 0, 0, 0, 43, 173, 174, 175, 176,
	88, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 835,
	0, 0, 0, 0, 94, 95, 177, 178, 179, 96,
	180, 181, 0, 97, 182, 98, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 186, 110, 187, 188,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 189, 114, 190, 0, 0, 115, 116, 191,
	117, 0, 0, 0, 0, 0, 118, 192, 0, 193,
	0, 119, 194, 195, 0, 0, 0, 0, 120, 196,
	197, 198, 0, 199, 0, 0, 121, 0, 122, 0,
	0, 200, 0, 123, 0, 0, 255, 0, 0, 0,
	124, 125, 126, 127, 256, 0, 128, 129, 0, 130,
	0, 201, 131, 202, 132, 133, 0, 0, 0, 0,
	0, 134, 203, 0, 135, 0, 204, 136, 137, 0,
	205, 138, 206, 0, 139, 140, 207, 141, 142, 0,
	143, 144, 145, 0, 146, 0, 147, 148, 208, 149,
	0, 150, 151, 45, 152, 257, 0, 153, 154, 0,
	155, 209, 156, 0, 157, 158, 160, 210, 159, 211,
	0, 47, 161, 162, 0, 259, 212, 0, 0, 258,
	213, 214, 0, 163, 164, 165, 166, 0, 0, 167,
	168, 0, 0, 169, 170, 171, 297, 216, 0, 172,
	0, 0, 0, 43, 173, 174, 175, 176, 88, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 42, 0, 1067,
	0, 0, 94, 95, 177, 178, 179, 96, 180, 181,
	0, 97, 182, 98, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 186, 110, 187, 188, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	189, 114, 190, 0, 0, 115, 116, 191, 117, 0,
	0, 0, 0, 0, 118, 192, 0, 193, 0, 119,
	194, 195, 0, 0, 0, 0, 120, 196, 197, 198,
	0, 199, 0, 0, 121, 0, 122, 0, 0, 200,
	0, 123, 0, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 0, 128, 129, 0, 130, 0, 201,
	131, 202, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 0, 135, 0, 204, 136, 137, 0, 205, 138,
	206, 0, 139, 140, 207, 141, 142, 0, 143, 144,
	145, 0, 146, 0, 147, 148, 208, 149, 0, 150,
	151, 0, 152, 257, 0, 153, 154, 0, 155, 209,
	156, 0, 157, 158, 160, 210, 159, 211, 0, 0,
	161, 162, 0, 259, 212, 0, 0, 258, 213, 214,
	0, 163, 164, 165, 166, 0, 88, 167, 168, 0,
	0, 169, 170, 171, 215, 216, 0, 172, 91, 92,
	0, 93, 173, 174, 175, 176, 0, 0, 0, 0,
	94, 95, 177, 178, 179, 96, 180, 181, 0, 97,
	182, 98, 0, 0, 183, 184, 359, 185, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 186, 110, 187, 188, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 189, 114,
	190, 0, 0, 115, 116, 191, 117, 0, 0, 0,
	0, 0, 118, 192, 0, 193, 0, 119, 194, 195,
	0, 0, 0, 0, 120, 196, 197, 198, 0, 199,
	0, 0, 121, 0, 122, 0, 0, 200, 0, 123,
	0, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 0, 128, 129, 0, 130, 0, 201, 131, 202,
	132, 133, 0, 0, 268, 0, 0, 134, 203, 0,
	135, 0, 204, 136, 137, 0, 205, 138, 206, 0,
	139, 140, 207, 141, 142, 0, 143, 144, 145, 0,
	146, 0, 147, 148, 208, 149, 0, 150, 151, 0,
	152, 257, 0, 153, 154, 0, 155, 209, 156, 0,
	157, 158, 160, 210, 159, 211, 0, 0, 161, 162,
	0, 259, 212, 0, 0, 258, 213, 214, 0, 163,
	164, 165, 166, 0, 0, 167, 168, 0, 0, 169,
	170, 171, 215, 216, 0, 172, 0, 0, 0, 0,
	173, 174, 175, 176, 88, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 835, 0, 0, 0, 0, 94, 95,
	177, 178, 179, 96, 180, 181, 0, 97, 182, 98,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	186, 110, 187, 188, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 189, 114, 190, 0,
	0, 115, 116, 191, 117, 0, 0, 0, 0, 0,
	118, 192, 0, 193, 0, 119, 194, 195, 0, 0,
	0, 0, 120, 196, 197, 198, 0, 199, 0, 0,
	121, 0, 122, 0, 0, 200, 0, 123, 1146, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 0,
	128, 129, 0, 130, 0, 201, 131, 202, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 0, 135, 0,
	204, 136, 137, 0, 205, 138, 206, 0, 139, 140,
	207, 141, 142, 0, 143, 144, 145, 0, 146, 1147,
	147, 148, 208, 149, 0, 150, 151, 0, 152, 257,
	0, 153, 154, 0, 155, 209, 156, 0, 157, 158,
	160, 210, 159, 211, 0, 0, 161, 162, 0, 259,
	212, 0, 0, 258, 213, 214, 0, 163, 164, 165,
	166, 0, 0, 167, 168, 0, 0, 169, 170, 171,
	215, 216, 0, 172, 0, 0, 0, 0, 173, 174,
	175, 176, 88, 1141, 1138, 1139, 1140, 1133, 1134, 1135,
	1136, 1137, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 780, 0, 0, 0, 0, 94, 95, 177, 178,
	179, 96, 180, 181, 0, 97, 182, 98, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 186, 110,
	187, 188, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 189, 114, 190, 0, 0, 115,
	116, 191, 117, 0, 0, 0, 0, 0, 118, 192,
	0, 193, 0, 119, 194, 195, 0, 0, 0, 0,
	120, 196, 197, 198, 0, 199, 0, 0, 121, 0,
	122, 0, 0, 200, 0, 123, 0, 0, 255, 0,
	0, 0, 124, 125, 126, 127, 256, 0, 128, 129,
	0, 130, 0, 201, 131, 202, 132, 133, 0, 0,
	0, 0, 0, 134, 203, 0, 135, 0, 204, 136,
	137, 0, 205, 138, 206, 0, 139, 140, 207, 141,
	142, 0, 143, 144, 145, 0, 146, 0, 147, 148,
	208, 149, 0, 150, 151, 0, 152, 257, 0, 153,
	154, 0, 155, 209, 156, 0, 157, 158, 160, 210,
	159, 211, 0, 0, 161, 162, 0, 259, 212, 0,
	0, 258, 213, 214, 0, 163, 164, 165, 166, 0,
	0, 167, 168, 0, 0, 169, 170, 171, 215, 216,
	0, 172, 0, 0, 0, 0, 173, 174, 175, 176,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 1275,
	0, 0, 0, 0, 94, 95, 177, 178, 179, 96,
	180, 181, 0, 97, 182, 98, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 186, 110, 187, 188,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 189, 114, 190, 0, 0, 115, 116, 191,
	117, 0, 0, 0, 0, 0, 118, 192, 0, 193,
	0, 119, 194, 195, 0, 0, 0, 0, 120, 196,
	197, 198, 0, 199, 0, 0, 121, 0, 122, 0,
	0, 200, 0, 123, 0, 0, 255, 0, 0, 0,
	124, 125, 126, 127, 256, 0, 128, 129, 0, 130,
	0, 201, 131, 202, 132, 133, 0, 0, 0, 0,
	0, 134, 203, 0, 135, 0, 204, 136, 137, 0,
	205, 138, 206, 0, 139, 140, 207, 141, 142, 0,
	143, 144, 145, 0, 146, 0, 147, 148, 208, 149,
	0, 150, 151, 0, 152, 257, 0, 153, 154, 0,
	155, 209, 156, 0, 157, 158, 160, 210, 159, 211,
	0, 0, 161, 162, 0, 259, 212, 0, 0, 258,
	213, 214, 0, 163, 164, 165, 166, 0, 0, 167,
	168, 0, 0, 169, 170, 171, 215, 216, 0, 172,
	0, 0, 0, 0, 173, 174, 175, 176, 293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 459, 0, 0,
	0, 0, 94, 95, 177, 178, 179, 96, 180, 181,
	0, 97, 182, 98, 0, 0, 183, 184, 0, 185,
	0, 298, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 299, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 186, 110, 187, 188, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	189, 114, 190, 0, 0, 115, 116, 191, 117, 0,
	0, 0, 300, 0, 118, 192, 0, 193, 0, 119,
	194, 195, 0, 0, 0, 301, 120, 196, 197, 198,
	0, 199, 0, 302, 121, 303, 122, 0, 0, 200,
	304, 123, 305, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 306, 128, 129, 0, 130, 0, 201,
	131, 202, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 307, 135, 308, 204, 136, 137, 0, 205, 138,
	206, 0, 139, 140, 207, 141, 142, 0, 143, 144,
	145, 0, 146, 309, 147, 148, 208, 149, 0, 150,
	151, 0, 152, 257, 0, 153, 154, 310, 155, 209,
	156, 0, 157, 158, 160, 210, 159, 211, 0, 0,
	161, 162, 0, 259, 212, 0, 0, 258, 213, 214,
	0, 163, 164, 165, 166, 0, 88, 167, 168, 0,
	0, 169, 170, 171, 215, 216, 0, 172, 91, 92,
	0, 93, 173, 174, 175, 176, 0, 0, 0, 0,
	94, 95, 177, 178, 179, 96, 180, 181, 0, 97,
	182, 98, 0, 0, 183, 184, 755, 185, 0, 0,
	0, 99, 100, 101, 0, 102, 753, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 186, 110, 187, 188, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 189, 114,
	190, 0, 0, 115, 116, 191, 117, 0, 758, 0,
	0, 0, 118, 192, 0, 193, 0, 119, 194, 195,
	0, 813, 0, 0, 120, 196, 197, 198, 0, 199,
	0, 0, 121, 0, 122, 0, 0, 200, 0, 123,
	0, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 0, 128, 129, 0, 130, 0, 201, 131, 202,
	132, 133, 0, 0, 0, 0, 0, 134, 203, 0,
	135, 0, 204, 136, 137, 0, 205, 138, 206, 757,
	139, 140, 207, 141, 142, 0, 143, 144, 145, 0,
	146, 0, 147, 148, 208, 149, 0, 150, 151, 0,
	152, 257, 0, 153, 154, 0, 155, 209, 156, 0,
	157, 158, 160, 210, 159, 211, 0, 0, 161, 162,
	0, 259, 212, 0, 0, 258, 213, 214, 0, 163,
	164, 165, 166, 0, 814, 167, 168, 0, 0, 169,
	170, 171, 215, 216, 88, 172, 0, 0, 0, 0,
	173, 174, 175, 176, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	177, 178, 179, 96, 180, 181, 0, 97, 182, 98,
	0, 0, 183, 184, 755, 185, 0, 0, 750, 99,
	100, 101, 0, 102, 753, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	186, 110, 187, 188, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 189, 114, 190, 0,
	0, 115, 116, 191, 117, 0, 758, 0, 0, 0,
	118, 192, 0, 193, 0, 119, 749, 195, 0, 0,
	0, 0, 120, 196, 197, 198, 0, 199, 0, 0,
	121, 0, 122, 0, 0, 200, 0, 123, 0, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 0,
	128, 129, 0, 130, 0, 201, 131, 202, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 0, 135, 0,
	204, 136, 137, 0, 205, 138, 206, 757, 139, 140,
	207, 141, 142, 0, 143, 144, 145, 0, 146, 0,
	147, 148, 208, 149, 0, 150, 151, 0, 152, 257,
	0, 153, 154, 0, 155, 209, 156, 0, 157, 158,
	160, 210, 159, 211, 0, 0, 161, 162, 0, 259,
	212, 0, 0, 258, 213, 214, 0, 163, 164, 165,
	166, 0, 756, 167, 168, 0, 0, 169, 170, 171,
	215, 216, 88, 172, 0, 0, 0, 0, 173, 174,
	175, 176, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 0, 0, 1067, 0, 0, 94, 95, 177, 178,
	179, 96, 180, 181, 0, 97, 182, 98, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 186, 110,
	187, 188, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 189, 114, 190, 0, 0, 115,
	116, 191, 117, 0, 0, 0, 0, 0, 118, 192,
	0, 193, 0, 119, 194, 195, 0, 0, 0, 0,
	120, 196, 197, 198, 0, 199, 0, 0, 121, 0,
	122, 0, 0, 200, 0, 123, 0, 0, 255, 0,
	0, 0, 124, 125, 126, 127, 256, 0, 128, 129,
	0, 130, 0, 201, 131, 202, 132, 133, 0, 0,
	0, 0, 0, 134, 203, 0, 135, 0, 204, 136,
	137, 0, 205, 138, 206, 0, 139, 140, 207, 141,
	142, 0, 143, 144, 145, 0, 146, 0, 147, 148,
	208, 149, 0, 150, 151, 0, 152, 257, 0, 153,
	154, 0, 155, 209, 156, 0, 157, 158, 160, 210,
	159, 211, 0, 0, 161, 162, 0, 259, 212, 0,
	0, 258, 213, 214, 0, 163, 164, 165, 166, 0,
	88, 167, 168, 0, 0, 169, 170, 171, 215, 216,
	0, 172, 91, 92, 0, 93, 173, 174, 175, 176,
	0, 0, 0, 0, 94, 95, 177, 178, 179, 96,
	180, 181, 0, 97, 182, 98, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 186, 110, 187, 188,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 189, 114, 190, 0, 0, 115, 116, 191,
	117, 0, 0, 0, 0, 0, 118, 192, 0, 193,
	0, 119, 194, 195, 0, 0, 0, 0, 120, 196,
	197, 198, 0, 199, 0, 0, 121, 0, 122, 0,
	0, 200, 0, 123, 0, 0, 255, 0, 0, 0,
	124, 125, 126, 127, 256, 0, 128, 129, 0, 130,
	0, 201, 131, 202, 132, 133, 0, 0, 268, 0,
	0, 134, 203, 0, 135, 0, 204, 136, 137, 0,
	205, 138, 206, 0, 139, 140, 207, 141, 142, 0,
	143, 144, 145, 0, 146, 0, 147, 148, 208, 149,
	0, 150, 151, 0, 152, 257, 0, 153, 154, 0,
	155, 209, 156, 0, 157, 158, 160, 210, 159, 211,
	0, 0, 161, 162, 0, 259, 212, 0, 0, 258,
	213, 214, 0, 163, 164, 165, 166, 0, 88, 167,
	168, 0, 0, 169, 170, 171, 215, 216, 0, 172,
	91, 92, 0, 93, 173, 174, 175, 176, 0, 0,
	0, 0, 94, 95, 177, 178, 179, 96, 180, 181,
	0, 97, 182, 98, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 499, 109, 186, 110, 187, 188, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	189, 114, 190, 0, 0, 115, 116, 191, 117, 0,
	0, 0, 0, 0, 118, 192, 0, 193, 0, 119,
	194, 195, 0, 0, 0, 0, 120, 196, 197, 198,
	0, 199, 0, 0, 121, 0, 122, 0, 0, 200,
	0, 123, 0, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 0, 128, 129, 0, 130, 0, 201,
	131, 202, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 0, 135, 0, 204, 136, 137, 0, 205, 138,
	206, 0, 139, 140, 207, 141, 142, 0, 143, 144,
	145, 0, 146, 0, 147, 148, 208, 149, 0, 150,
	151, 0, 152, 257, 0, 153, 154, 0, 155, 209,
	156, 0, 157, 158, 160, 210, 159, 211, 0, 498,
	161, 162, 0, 259, 212, 0, 0, 258, 213, 214,
	0, 163, 164, 165, 166, 0, 88, 167, 168, 0,
	0, 169, 170, 171, 215, 216, 0, 172, 91, 92,
	0, 93, 173, 174, 175, 176, 0, 0, 0, 0,
	94, 95, 177, 178, 179, 96, 180, 181, 0, 97,
	182, 98, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 186, 110, 187, 188, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 189, 114,
	190, 0, 0, 115, 116, 191, 117, 0, 0, 0,
	0, 0, 118, 192, 0, 193, 0, 119, 274, 195,
	0, 0, 0, 0, 120, 196, 197, 198, 0, 199,
	0, 0, 121, 0, 122, 0, 0, 200, 0, 123,
	0, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 0, 128, 129, 0, 130, 0, 201, 131, 202,
	132, 133, 0, 0, 268, 0, 0, 134, 203, 0,
	135, 0, 204, 136, 137, 0, 205, 138, 206, 0,
	139, 140, 207, 141, 142, 0, 143, 144, 145, 0,
	146, 0, 147, 148, 208, 149, 0, 150, 151, 0,
	152, 257, 0, 153, 154, 0, 155, 209, 156, 0,
	157, 158, 160, 210, 159, 211, 0, 0, 161, 162,
	0, 259, 212, 0, 0, 258, 213, 214, 0, 163,
	164, 165, 166, 0, 88, 167, 168, 0, 0, 169,
	170, 171, 215, 216, 0, 172, 91, 92, 0, 93,
	173, 174, 175, 176, 0, 0, 0, 0, 94, 95,
	177, 178, 179, 96, 180, 181, 0, 97, 182, 98,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	186, 110, 187, 188, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 189, 114, 190, 0,
	0, 115, 116, 191, 117, 0, 0, 0, 0, 0,
	118, 192, 0, 193, 0, 119, 194, 195, 0, 0,
	0, 0, 120, 196, 197, 198, 0, 199, 0, 0,
	121, 0, 122, 0, 0, 200, 0, 123, 0, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 0,
	128, 129, 0, 130, 0, 201, 131, 202, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 0, 135, 0,
	204, 136, 137, 0, 205, 138, 206, 0, 139, 140,
	207, 141, 142, 0, 143, 144, 145, 0, 146, 0,
	147, 148, 208, 149, 0, 150, 151, 0, 152, 257,
	0, 153, 154, 0, 155, 209, 156, 0, 157, 158,
	160, 210, 159, 211, 0, 0, 161, 162, 0, 259,
	212, 0, 0, 258, 213, 214, 0, 163, 164, 165,
	166, 0, 88, 167, 168, 0, 0, 169, 170, 171,
	215, 216, 0, 172, 91, 92, 0, 93, 173, 174,
	175, 176, 0, 0, 0, 0, 94, 95, 177, 178,
	179, 96, 180, 181, 0, 97, 182, 98, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 186, 110,
	187, 188, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 189, 114, 190, 0, 0, 115,
	116, 191, 117, 0, 0, 0, 0, 0, 118, 192,
	0, 193, 0, 119, 1012, 195, 0, 0, 0, 0,
	120, 196, 197, 198, 0, 199, 0, 0, 121, 0,
	122, 0, 0, 200, 0, 123, 0, 0, 255, 0,
	0, 0, 124, 125, 126, 127, 256, 0, 128, 129,
	0, 130, 0, 201, 131, 202, 132, 133, 0, 0,
	0, 0, 0, 134, 203, 0, 135, 0, 204, 136,
	137, 0, 205, 138, 206, 0, 139, 140, 207, 141,
	142, 0, 143, 144, 145, 0, 146, 0, 147, 148,
	208, 149, 0, 150, 151, 0, 152, 257, 0, 153,
	154, 0, 155, 209, 156, 0, 157, 158, 160, 210,
	159, 211, 0, 0, 161, 162, 0, 259, 212, 0,
	0, 258, 213, 214, 0, 163, 164, 165, 166, 0,
	88, 167, 168, 0, 0, 169, 170, 171, 215, 216,
	0, 172, 91, 92, 0, 93, 173, 174, 175, 176,
	0, 0, 0, 0, 94, 95, 177, 178, 179, 96,
	180, 181, 0, 97, 182, 98, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 186, 110, 187, 188,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 189, 114, 190, 0, 0, 115, 116, 191,
	117, 0, 0, 0, 0, 0, 118, 192, 0, 193,
	0, 119, 1010, 195, 0, 0, 0, 0, 120, 196,
	197, 198, 0, 199, 0, 0, 121, 0, 122, 0,
	0, 200, 0, 123, 0, 0, 255, 0, 0, 0,
	124, 125, 126, 127, 256, 0, 128, 129, 0, 130,
	0, 201, 131, 202, 132, 133, 0, 0, 0, 0,
	0, 134, 203, 0, 135, 0, 204, 136, 137, 0,
	205, 138, 206, 0, 139, 140, 207, 141, 142, 0,
	143, 144, 145, 0, 146, 0, 147, 148, 208, 149,
	0, 150, 151, 0, 152, 257, 0, 153, 154, 0,
	155, 209, 156, 0, 157, 158, 160, 210, 159, 211,
	0, 0, 161, 162, 0, 259, 212, 0, 0, 258,
	213, 214, 0, 163, 164, 165, 166, 0, 88, 167,
	168, 0, 0, 169, 170, 171, 215, 216, 0, 172,
	91, 92, 0, 93, 173, 174, 175, 176, 0, 0,
	0, 0, 94, 95, 177, 178, 179, 96, 180, 181,
	0, 97, 182, 98, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 186, 110, 187, 188, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	189, 114, 190, 0, 0, 115, 116, 191, 117, 0,
	0, 0, 0, 0, 118, 192, 0, 193, 0, 119,
	1001, 195, 0, 0, 0, 0, 120, 196, 197, 198,
	0, 199, 0, 0, 121, 0, 122, 0, 0, 200,
	0, 123, 0, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 0, 128, 129, 0, 130, 0, 201,
	131, 202, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 0, 135, 0, 204, 136, 137, 0, 205, 138,
	206, 0, 139, 140, 207, 141, 142, 0, 143, 144,
	145, 0, 146, 0, 147, 148, 208, 149, 0, 150,
	151, 0, 152, 257, 0, 153, 154, 0, 155, 209,
	156, 0, 157, 158, 160, 210, 159, 211, 0, 0,
	161, 162, 0, 259, 212, 0, 0, 258, 213, 214,
	0, 163, 164, 165, 166, 0, 88, 167, 168, 0,
	0, 169, 170, 171, 215, 216, 0, 172, 91, 92,
	0, 93, 173, 174, 175, 176, 0, 0, 0, 0,
	94, 95, 177, 178, 179, 96, 180, 181, 0, 97,
	182, 98, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 186, 110, 187, 188, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 189, 114,
	190, 0, 0, 115, 116, 191, 117, 0, 0, 0,
	0, 0, 118, 192, 0, 193, 0, 119, 628, 195,
	0, 0, 0, 0, 120, 196, 197, 198, 0, 199,
	0, 0, 121, 0, 122, 0, 0, 200, 0, 123,
	0, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 0, 128, 129, 0, 130, 0, 201, 131, 202,
	132, 133, 0, 0, 0, 0, 0, 134, 203, 0,
	135, 0, 204, 136, 137, 0, 205, 138, 206, 0,
	139, 140, 207, 141, 142, 0, 143, 144, 145, 0,
	146, 0, 147, 148, 208, 149, 0, 150, 151, 0,
	152, 257, 0, 153, 154, 0, 155, 209, 156, 0,
	157, 158, 160, 210, 159, 211, 0, 0, 161, 162,
	0, 259, 212, 0, 0, 258, 213, 214, 0, 163,
	164, 165, 166, 0, 88, 167, 168, 0, 0, 169,
	170, 171, 215, 216, 0, 172, 91, 92, 0, 93,
	173, 174, 175, 176, 0, 485, 0, 0, 94, 95,
	177, 178, 179, 96, 180, 181, 0, 97, 182, 98,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	186, 110, 187, 188, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 189, 114, 190, 0,
	0, 115, 116, 191, 117, 0, 0, 0, 0, 0,
	118, 192, 0, 193, 0, 119, 194, 195, 0, 0,
	0, 0, 120, 196, 197, 198, 0, 199, 0, 0,
	121, 0, 122, 0, 0, 200, 0, 123, 0, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 0,
	128, 129, 0, 130, 0, 201, 131, 202, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 0, 135, 0,
	204, 136, 137, 0, 205, 138, 206, 0, 139, 140,
	207, 141, 142, 0, 143, 144, 145, 0, 146, 0,
	147, 148, 208, 149, 0, 150, 151, 0, 152, 257,
	0, 0, 154, 0, 155, 209, 156, 0, 157, 158,
	160, 210, 159, 211, 0, 0, 161, 162, 0, 259,
	212, 0, 0, 258, 213, 214, 0, 163, 164, 165,
	166, 0, 88, 167, 168, 0, 0, 169, 170, 171,
	215, 216, 0, 172, 91, 92, 0, 93, 173, 174,
	175, 176, 0, 0, 0, 0, 94, 95, 177, 178,
	179, 96, 180, 181, 0, 97, 182, 98, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 186, 110,
	187, 188, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 189, 114, 190, 0, 0, 115,
	116, 191, 117, 0, 0, 0, 0, 0, 118, 192,
	0, 193, 0, 119, 344, 195, 0, 0, 0, 0,
	120, 196, 197, 198, 0, 199, 0, 0, 121, 0,
	122, 0, 0, 200, 0, 123, 0, 0, 255, 0,
	0, 0, 124, 125, 126, 127, 256, 0, 128, 129,
	0, 130, 0, 201, 131, 202, 132, 133, 0, 0,
	0, 0, 0, 134, 203, 0, 135, 0, 204, 136,
	137, 0, 205, 138, 206, 0, 139, 140, 207, 141,
	142, 0, 143, 144, 145, 0, 146, 0, 147, 148,
	208, 149, 0, 150, 151, 0, 152, 257, 0, 153,
	154, 0, 155, 209, 156, 0, 157, 158, 160, 210,
	159, 211, 0, 0, 161, 162, 0, 259, 212, 0,
	0, 258, 213, 214, 0, 163, 164, 165, 166, 0,
	88, 167, 168, 0, 0, 169, 170, 171, 215, 216,
	0, 172, 91, 92, 0, 93, 173, 174, 175, 176,
	0, 0, 0, 0, 94, 95, 177, 178, 179, 96,
	180, 181, 0, 97, 182, 98, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 186, 110, 187, 188,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 189, 114, 190, 0, 0, 115, 116, 191,
	117, 0, 0, 0, 0, 0, 118, 192, 0, 193,
	0, 119, 341, 195, 0, 0, 0, 0, 120, 196,
	197, 198, 0, 199, 0, 0, 121, 0, 122, 0,
	0, 200, 0, 123, 0, 0, 255, 0, 0, 0,
	124, 125, 126, 127, 256, 0, 128, 129, 0, 130,
	0, 201, 131, 202, 132, 133, 0, 0, 0, 0,
	0, 134, 203, 0, 135, 0, 204, 136, 137, 0,
	205, 138, 206, 0, 139, 140, 207, 141, 142, 0,
	143, 144, 145, 0, 146, 0, 147, 148, 208, 149,
	0, 150, 151, 0, 152, 257, 0, 153, 154, 0,
	155, 209, 156, 0, 157, 158, 160, 210, 159, 211,
	0, 0, 161, 162, 0, 259, 212, 0, 0, 258,
	213, 214, 0, 163, 164, 165, 166, 0, 88, 167,
	168, 0, 0, 169, 170, 171, 215, 216, 0, 172,
	91, 92, 0, 93, 173, 174, 175, 176, 0, 0,
	0, 0, 94, 95, 177, 178, 179, 96, 180, 181,
	0, 97, 182, 98, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 186, 110, 187, 188, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	189, 114, 190, 0, 0, 115, 116, 191, 117, 0,
	0, 0, 0, 0, 118, 192, 0, 193, 0, 119,
	194, 195, 0, 0, 0, 0, 120, 196, 197, 198,
	0, 199, 0, 0, 121, 0, 122, 0, 0, 200,
	0, 123, 0, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 85, 0, 128, 129, 0, 130, 0, 201,
	131, 202, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 0, 135, 0, 204, 136, 137, 0, 205, 138,
	206, 0, 139, 140, 207, 141, 142, 0, 143, 144,
	145, 0, 146, 0, 147, 148, 208, 149, 0, 150,
	151, 0, 152, 257, 0, 153, 154, 0, 155, 209,
	156, 0, 157, 158, 160, 210, 159, 211, 0, 0,
	161, 162, 0, 84, 212, 0, 0, 80, 213, 214,
	0, 163, 164, 165, 166, 0, 88, 167, 168, 0,
	0, 169, 170, 171, 215, 216, 0, 172, 91, 92,
	0, 93, 173, 174, 175, 176, 0, 0, 0, 0,
	94, 95, 177, 178, 179, 96, 180, 181, 0, 97,
	182, 98, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 186, 110, 187, 188, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 189, 114,
	190, 0, 0, 115, 116, 191, 117, 0, 0, 0,
	0, 0, 118, 192, 0, 193, 0, 119, 288, 195,
	0, 0, 0, 0, 120, 196, 197, 198, 0, 199,
	0, 0, 121, 0, 122, 0, 0, 200, 0, 123,
	0, 0, 255, 0, 0, 0, 124, 125, 126, 127,
	256, 0, 128, 129, 0, 130, 0, 201, 131, 202,
	132, 133, 0, 0, 0, 0, 0, 134, 203, 0,
	135, 0, 204, 136, 137, 0, 205, 138, 206, 0,
	139, 140, 207, 141, 142, 0, 143, 144, 145, 0,
	146, 0, 147, 148, 208, 149, 0, 150, 151, 0,
	152, 257, 0, 153, 154, 0, 155, 209, 156, 0,
	157, 158, 160, 210, 159, 211, 0, 0, 161, 162,
	0, 259, 212, 0, 0, 258, 213, 214, 0, 163,
	164, 165, 166, 0, 88, 167, 168, 0, 0, 169,
	170, 171, 215, 216, 0, 172, 91, 92, 0, 93,
	173, 174, 175, 176, 0, 0, 0, 0, 94, 95,
	177, 178, 179, 96, 180, 181, 0, 97, 182, 98,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	186, 110, 187, 188, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 189, 114, 190, 0,
	0, 115, 116, 191, 117, 0, 0, 0, 0, 0,
	118, 192, 0, 193, 0, 119, 285, 195, 0, 0,
	0, 0, 120, 196, 197, 198, 0, 199, 0, 0,
	121, 0, 122, 0, 0, 200, 0, 123, 0, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 0,
	128, 129, 0, 130, 0, 201, 131, 202, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 0, 135, 0,
	204, 136, 137, 0, 205, 138, 206, 0, 139, 140,
	207, 141, 142, 0, 143, 144, 145, 0, 146, 0,
	147, 148, 208, 149, 0, 150, 151, 0, 152, 257,
	0, 153, 154, 0, 155, 209, 156, 0, 157, 158,
	160, 210, 159, 211, 0, 0, 161, 162, 0, 259,
	212, 0, 0, 258, 213, 214, 0, 163, 164, 165,
	166, 0, 88, 167, 168, 0, 0, 169, 170, 171,
	215, 216, 0, 172, 91, 92, 0, 93, 173, 174,
	175, 176, 0, 0, 0, 0, 94, 95, 177, 178,
	179, 96, 180, 181, 0, 97, 182, 98, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 186, 110,
	187, 188, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 189, 114, 190, 0, 0, 115,
	116, 191, 117, 0, 0, 0, 0, 0, 118, 192,
	0, 193, 0, 119, 283, 195, 0, 0, 0, 0,
	120, 196, 197, 198, 0, 199, 0, 0, 121, 0,
	122, 0, 0, 200, 0, 123, 0, 0, 255, 0,
	0, 0, 124, 125, 126, 127, 256, 0, 128, 129,
	0, 130, 0, 201, 131, 202, 132, 133, 0, 0,
	0, 0, 0, 134, 203, 0, 135, 0, 204, 136,
	137, 0, 205, 138, 206, 0, 139, 140, 207, 141,
	142, 0, 143, 144, 145, 0, 146, 0, 147, 148,
	208, 149, 0, 150, 151, 0, 152, 257, 0, 153,
	154, 0, 155, 209, 156, 0, 157, 158, 160, 210,
	159, 211, 0, 0, 161, 162, 0, 259, 212, 0,
	0, 258, 213, 214, 0, 163, 164, 165, 166, 0,
	88, 167, 168, 0, 0, 169, 170, 171, 215, 216,
	0, 172, 91, 92, 0, 93, 173, 174, 175, 176,
	0, 0, 0, 0, 94, 95, 177, 178, 179, 96,
	180, 181, 0, 97, 182, 98, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 186, 110, 187, 188,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 189, 114, 190, 0, 0, 115, 116, 191,
	117, 0, 0, 0, 0, 0, 118, 192, 0, 193,
	0, 119, 277, 195, 0, 0, 0, 0, 120, 196,
	197, 198, 0, 199, 0, 0, 121, 0, 122, 0,
	0, 200, 0, 123, 0, 0, 255, 0, 0, 0,
	124, 125, 126, 127, 256, 0, 128, 129, 0, 130,
	0, 201, 131, 202, 132, 133, 0, 0, 0, 0,
	0, 134, 203, 0, 135, 0, 204, 136, 137, 0,
	205, 138, 206, 0, 139, 140, 207, 141, 142, 0,
	143, 144, 145, 0, 146, 0, 147, 148, 208, 149,
	0, 150, 151, 0, 152, 257, 0, 153, 154, 0,
	155, 209, 156, 0, 157, 158, 160, 210, 159, 211,
	0, 0, 161, 162, 0, 259, 212, 0, 0, 258,
	213, 214, 0, 163, 164, 165, 166, 0, 88, 167,
	168, 0, 0, 169, 170, 171, 215, 216, 0, 172,
	91, 92, 0, 93, 173, 174, 175, 176, 0, 0,
	0, 0, 94, 95, 177, 178, 179, 96, 180, 181,
	0, 97, 182, 98, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 186, 110, 187, 188, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	189, 114, 190, 0, 0, 115, 116, 191, 117, 0,
	0, 0, 0, 0, 118, 192, 0, 193, 0, 119,
	194, 195, 0, 0, 0, 0, 120, 196, 197, 198,
	0, 199, 0, 0, 121, 0, 122, 0, 0, 200,
	0, 123, 0, 0, 255, 0, 0, 0, 124, 125,
	126, 127, 256, 0, 128, 129, 0, 130, 0, 201,
	131, 202, 132, 133, 0, 0, 0, 0, 0, 134,
	203, 0, 135, 0, 204, 136, 137, 0, 205, 138,
	206, 0, 139, 140, 207, 252, 142, 0, 143, 144,
	145, 0, 146, 0, 147, 148, 208, 149, 0, 150,
	151, 0, 152, 257, 0, 153, 154, 0, 155, 209,
	156, 0, 157, 158, 160, 210, 159, 211, 0, 0,
	161, 162, 0, 259, 212, 0, 0, 258, 213, 214,
	0, 163, 164, 165, 166, 0, 88, 167, 168, 0,
	0, 169, 170, 171, 215, 216, 0, 172, 91, 92,
	0, 93, 173, 174, 175, 176, 0, 0, 0, 0,
	94, 95, 177, 178, 179, 96, 180, 181, 0, 97,
	182, 98, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 186, 110, 187, 188, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 189, 114,
	190, 0, 0, 115, 116, 191, 117, 0, 0, 0,
	0, 0, 118, 192, 0, 193, 0, 119, 194, 195,
	0, 0, 0, 0, 120, 196, 197, 198, 0, 199,
	0, 0, 121, 0, 122, 0, 0, 200, 0, 123,
	0, 0, 78, 0, 0, 0, 124, 125, 126, 127,
	85, 0, 128, 129, 0, 130, 0, 201, 131, 202,
	132, 133, 0, 0, 0, 0, 0, 134, 203, 0,
	135, 0, 204, 136, 137, 0, 205, 138, 206, 0,
	139, 140, 207, 141, 142, 0, 143, 144, 145, 0,
	146, 0, 147, 148, 208, 149, 0, 150, 151, 0,
	152, 79, 0, 153, 154, 0, 155, 209, 156, 0,
	157, 158, 160, 210, 159, 211, 0, 0, 161, 162,
	0, 84, 212, 0, 0, 80, 213, 214, 0, 163,
	164, 165, 166, 0, 88, 167, 168, 0, 0, 169,
	170, 171, 215, 216, 0, 172, 91, 92, 0, 93,
	173, 174, 175, 176, 0, 0, 0, 0, 94, 95,
	177, 178, 179, 96, 180, 181, 0, 97, 182, 98,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	186, 110, 187, 188, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 189, 114, 190, 0,
	0, 115, 116, 191, 117, 0, 0, 0, 0, 0,
	118, 192, 0, 193, 0, 119, 194, 195, 0, 0,
	0, 0, 120, 196, 197, 198, 0, 199, 0, 0,
	121, 0, 122, 0, 0, 200, 0, 123, 0, 0,
	255, 0, 0, 0, 124, 125, 126, 127, 256, 0,
	128, 129, 0, 130, 0, 201, 131, 202, 132, 133,
	0, 0, 0, 0, 0, 134, 203, 0, 135, 0,
	204, 136, 0, 0, 205, 138, 206, 0, 0, 140,
	207, 141, 142, 0, 143, 144, 145, 0, 146, 0,
	147, 148, 208, 0, 0, 150, 151, 0, 152, 257,
	0, 153, 154, 0, 155, 209, 156, 0, 157, 158,
	160, 210, 159, 211, 0, 0, 161, 162, 0, 259,
	212, 0, 0, 258, 213, 214, 0, 163, 164, 165,
	166, 0, 0, 167, 168, 0, 0, 169, 170, 171,
	215, 216, 652, 172, 670, 671, 672, 0, 173, 174,
	175, 176, 0, 0, 673, 0, 0, 0, 0, 0,
	654, 0, 679, 0, 0, 0, 0, 0, 652, 0,
	670, 671, 672, 0, 0, 0, 0, 0, 653, 0,
	673, 0, 0, 0, 667, 0, 654, 0, 679, 0,
	0, 0, 0, 0, 0, 0, 652, 0, 670, 671,
	672, 0, 0, 0, 653, 0, 0, 0, 673, 0,
	667, 0, 0, 0, 654, 0, 679, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 0, 0, 667, 0,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 678, 0, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 668, 680, 0, 0, 0,
	1132, 0, 1148, 1149, 1150, 0, 0, 678, 0, 0,
	0, 0, 0, 0, 0, 674, 675, 0, 0, 0,
	0, 668, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 0,
	0, 674, 1145, 0, 675, 0, 669, 0, 0, 668,
	0, 0, 0, 0, 0, 677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 674,
	0, 0, 669, 0, 0, 0, 0, 0, 0, 0,
	0, 677, 0, 652, 0, 670, 671, 672, 0, 0,
	0, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	669, 654, 0, 679, 676, 0, 664, 665, 666, 677,
	663, 660, 661, 662, 655, 656, 657, 658, 659, 653,
	0, 0, 0, 1146, 0, 667, 0, 1171, 0, 0,
	676, 0, 664, 665, 666, 0, 663, 660, 661, 662,
	655, 656, 657, 658, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 1170, 0, 0, 0, 0, 676, 0,
	664, 665, 666, 0, 663, 660, 661, 662, 655, 656,
	657, 658, 659, 652, 1147, 670, 671, 672, 1527, 0,
	0, 680, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 654, 678, 679, 0, 0, 0, 0, 0, 0,
	0, 675, 0, 0, 0, 0, 668, 0, 0, 653,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 0, 0,
	0, 0, 0, 0, 1142, 1143, 1144, 0, 1141, 1138,
	1139, 1140, 1133, 1134, 1135, 1136, 1137, 0, 0, 0,
	652, 0, 670, 671, 672, 0, 0, 669, 0, 0,
	0, 0, 673, 0, 0, 0, 677, 0, 654, 0,
	679, 680, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 678, 0, 0, 0, 653, 0, 0, 0,
	0, 675, 667, 0, 0, 0, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 676, 674, 664, 665, 666,
	0, 663, 660, 661, 662, 655, 656, 657, 658, 659,
	0, 0, 0, 0, 652, 1526, 670, 671, 672, 0,
	0, 0, 0, 0, 0, 0, 673, 669, 680, 0,
	0, 0, 654, 0, 679, 0, 677, 0, 0, 678,
	652, 0, 670, 671, 672, 0, 0, 0, 675, 0,
	653, 0, 673, 668, 0, 0, 667, 0, 654, 0,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 653, 0, 0, 0,
	0, 0, 667, 0, 0, 676, 0, 664, 665, 666,
	0, 663, 660, 661, 662, 655, 656, 657, 658, 659,
	0, 0, 0, 0, 669, 1511, 0, 0, 0, 0,
	0, 0, 680, 677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 675, 0, 0, 0, 0, 668, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 0, 0, 0, 0, 674, 675, 0,
	0, 0, 676, 668, 664, 665, 666, 0, 663, 660,
	661, 662, 655, 656, 657, 658, 659, 0, 0, 0,
	0, 0, 1490, 674, 0, 0, 0, 0, 669, 652,
	0, 670, 671, 672, 0, 0, 0, 677, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 654, 0, 679,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 0,
	0, 0, 0, 677, 0, 653, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 0, 664, 665,
	666, 0, 663, 660, 661, 662, 655, 656, 657, 658,
	659, 0, 0, 0, 0, 0, 1485, 0, 0, 0,
	0, 0, 676, 0, 664, 665, 666, 0, 663, 660,
	661, 662, 655, 656, 657, 658, 659, 680, 0, 0,
	0, 0, 1481, 652, 0, 670, 671, 672, 678, 0,
	0, 0, 0, 0, 0, 673, 0, 675, 0, 0,
	0, 654, 668, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 653,
	0, 0, 674, 0, 0, 667, 0, 0, 0, 652,
	0, 670, 671, 672, 0, 0, 0, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 654, 0, 679,
	0, 0, 0, 669, 0, 0, 0, 0, 0, 0,
	0, 0, 677, 0, 0, 653, 652, 0, 670, 671,
	672, 667, 0, 0, 0, 0, 0, 0, 673, 0,
	0, 680, 0, 0, 654, 0, 679, 0, 0, 0,
	0, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 675, 653, 0, 0, 0, 668, 0, 667, 0,
	0, 676, 0, 664, 665, 666, 0, 663, 660, 661,
	662, 655, 656, 657, 658, 659, 674, 680, 0, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 669, 0, 652,
	0, 670, 671, 672, 680, 0, 677, 0, 0, 0,
	0, 0, 674, 0, 0, 678, 0, 654, 0, 679,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 668,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 0,
	0, 667, 0, 669, 0, 0, 0, 0, 0, 674,
	0, 0, 677, 0, 0, 676, 0, 664, 665, 666,
	0, 663, 660, 661, 662, 655, 656, 657, 658, 659,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 0,
	669, 0, 652, 0, 670, 671, 672, 0, 0, 677,
	0, 0, 0, 0, 673, 0, 0, 680, 0, 0,
	654, 676, 679, 664, 665, 666, 0, 663, 660, 661,
	662, 655, 656, 657, 658, 659, 0, 675, 653, 0,
	0, 1340, 668, 0, 667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	664, 665, 666, 0, 663, 660, 661, 662, 655, 656,
	657, 658, 659, 0, 0, 0, 0, 652, 1278, 670,
	671, 672, 0, 0, 0, 0, 0, 0, 0, 673,
	0, 0, 0, 669, 0, 654, 0, 679, 0, 0,
	680, 0, 677, 0, 0, 0, 652, 0, 670, 671,
	672, 678, 0, 653, 0, 0, 0, 0, 673, 667,
	675, 0, 0, 0, 654, 668, 679, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 653, 0, 0, 674, 0, 0, 667, 0,
	0, 676, 0, 664, 665, 666, 0, 663, 660, 661,
	662, 655, 656, 657, 658, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 680, 669, 0, 0, 0,
	0, 0, 0, 0, 0, 677, 678, 0, 0, 0,
	1587, 0, 0, 0, 0, 675, 0, 0, 0, 0,
	668, 0, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 0,
	674, 0, 0, 0, 675, 0, 0, 0, 0, 668,
	0, 0, 0, 0, 676, 0, 664, 665, 666, 0,
	663, 660, 661, 662, 655, 656, 657, 658, 659, 674,
	0, 669, 0, 0, 1253, 0, 0, 0, 0, 0,
	677, 1586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 0, 670, 671, 672, 0, 0, 0,
	669, 0, 0, 0, 673, 0, 0, 0, 0, 677,
	654, 0, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 653, 676,
	0, 664, 665, 666, 667, 663, 660, 661, 662, 655,
	656, 657, 658, 659, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	664, 665, 666, 0, 663, 660, 661, 662, 655, 656,
	657, 658, 659, 0, 0, 0, 0, 1162, 0, 1161,
	652, 0, 670, 671, 672, 0, 0, 0, 0, 0,
	680, 0, 673, 0, 0, 0, 824, 0, 654, 0,
	679, 678, 0, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 668, 653, 0, 0, 0,
	0, 0, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 682, 0, 0, 0, 0, 0, 652,
	0, 670, 671, 672, 0, 0, 669, 0, 0, 0,
	0, 673, 0, 0, 681, 677, 0, 654, 680, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 0, 0, 653, 0, 0, 675, 0,
	0, 667, 0, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 676, 0, 664, 665, 666, 0,
	663, 660, 661, 662, 655, 656, 657, 658, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 669, 0, 0, 680, 0, 0,
	0, 0, 0, 677, 0, 0, 0, 652, 678, 670,
	671, 672, 0, 0, 0, 0, 0, 675, 0, 673,
	0, 0, 668, 0, 0, 654, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 674, 653, 0, 0, 0, 0, 0, 667,
	0, 0, 676, 0, 664, 665, 666, 0, 663, 660,
	661, 662, 655, 656, 657, 658, 659, 0, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 0, 0, 0,
	0, 0, 677, 0, 652, 0, 670, 671, 672, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 654, 0, 679, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 678, 0, 0, 0,
	653, 0, 0, 0, 0, 675, 667, 0, 0, 0,
	668, 676, 0, 664, 665, 666, 0, 663, 660, 661,
	662, 655, 656, 657, 658, 659, 0, 0, 0, 0,
	674, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 652, 0, 670,
	671, 672, 0, 0, 0, 0, 0, 0, 0, 673,
	0, 669, 680, 0, 0, 654, 0, 679, 0, 0,
	677, 0, 0, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 675, 653, 0, 0, 0, 668, 0, 667,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	0, 664, 665, 666, 0, 663, 660, 661, 662, 655,
	656, 657, 658, 659, 1168, 0, 0, 652, 669, 670,
	671, 672, 0, 0, 0, 680, 0, 677, 0, 673,
	0, 0, 1163, 0, 0, 654, 678, 679, 0, 0,
	0, 0, 1272, 0, 0, 675, 0, 0, 0, 0,
	668, 0, 0, 653, 0, 0, 0, 0, 0, 667,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 676, 0, 664, 665,
	666, 0, 663, 660, 661, 662, 655, 656, 657, 658,
	659, 0, 0, 0, 652, 0, 670, 671, 672, 0,
	0, 669, 0, 0, 0, 0, 673, 0, 0, 0,
	677, 0, 654, 0, 679, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 678, 0, 0, 0,
	653, 0, 0, 0, 0, 675, 667, 0, 0, 0,
	668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	674, 664, 665, 666, 0, 663, 660, 661, 662, 655,
	656, 657, 658, 659, 0, 0, 0, 0, 652, 0,
	670, 671, 672, 0, 0, 0, 0, 0, 0, 0,
	673, 669, 680, 1125, 0, 0, 654, 0, 679, 0,
	677, 0, 0, 678, 652, 0, 670, 671, 672, 0,
	0, 0, 675, 0, 653, 0, 673, 668, 0, 0,
	667, 0, 654, 0, 679, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	653, 0, 0, 0, 0, 0, 667, 1130, 0, 676,
	0, 664, 665, 666, 0, 663, 660, 661, 662, 655,
	656, 657, 658, 659, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 0, 0, 0, 680, 677, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 678, 0, 0,
	0, 0, 0, 0, 0, 0, 675, 0, 0, 0,
	0, 668, 680, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 0, 0, 0, 0, 0, 0,
	0, 674, 675, 0, 0, 0, 676, 668, 664, 665,
	666, 0, 663, 660, 661, 662, 655, 656, 657, 658,
	659, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 669, 652, 0, 670, 671, 672, 0, 0,
	0, 677, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 654, 0, 679, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 0, 0, 0, 0, 677, 0, 653,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 664, 665, 666, 0, 663, 660, 661, 662,
	655, 656, 657, 658, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 0, 664, 665,
	666, 0, 663, 660, 661, 662, 655, 656, 657, 658,
	659, 680, 652, 0, 670, 671, 672, 0, 0, 0,
	0, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	654, 675, 679, 0, 0, 0, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 653, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 0,
	852, 867, 844, 860, 859, 0, 0, 845, 0, 0,
	0, 869, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 0, 0, 0, 0, 677, 0, 0, 865,
	0, 857, 856, 0, 0, 0, 0, 0, 0, 855,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 678, 854, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 668, 0, 0, 0, 0,
	0, 0, 848, 849, 850, 676, 530, 664, 665, 666,
	0, 663, 660, 661, 662, 655, 656, 657, 658, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 669, 0, 0, 0,
	0, 0, 0, 0, 0, 677, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 846, 0, 0, 866,
	0, 0, 0, 0, 676, 0, 664, 665, 666, 0,
	663, 660, 661, 662, 655, 656, 657, 658, 659, 0,
	870,
}
var sqlPact = [...]int{

	2442, -1000, -3, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 615,
	-1000, -1000, -1000, 514, 614, 50, 1005, 1005, -1000, -1000,
	15092, 1546, 335, 336, 335, 335, 335, 419, 583, 86,
	-1000, 606, 27, 14874, 12040, 1111, -6, 11386, 217, 2442,
	11822, 12040, 14656, 954, 879, 11386, 14438, 14220, 14002, -1000,
	7904, -1000, -1000, -1000, -1000, 749, -1000, -9, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 713, -1000, 13784, 13784,
	853, -1000, -1000, 407, 272, 1090, -1000, 5, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 952,
	-1000, 706, 947, 945, 269, 864, -1000, 853, -1000, 853,
	-1000, -1000, -1000, 11386, -1000, 13566, 897, 13348, -1000, 606,
	-1000, -1000, -1000, 758, 1092, 1092, 1092, 1100, 77, 76,
	86, -11, 12040, -1000, 227, -1000, -1000, -1000, -1000, -1000,
	-11, 5972, 5972, -1000, -1000, 217, -1000, 236, 10256, -144,
	-1000, 5492, -1000, 918, 990, 507, 503, 989, 11386, 12040,
	450, 13130, -1000, 987, 70, 985, -1000, -18, 984, -1000,
	-32, -1000, -1000, -1000, -1000, -1000, -1000, 217, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11604, 1242, 11604, -1000, -1000, -1000, 835, 8382, 8144,
	1038, 701, -1000, -1000, -1000, 2, 3316, 12040, 959, 11604,
	12040, -1000, 12040, -1000, 834, -1000, -1000, -1000, 84, -1000,
	212, 814, 12912, -1000, 804, -1000, 758, -1000, 753, 829,
	6230, 6950, 86, -1000, -1000, 86, 86, 6950, -1000, -1000,
	12040, -11, 1120, 12040, 940, -13, -1000, 16969, -1000, -1000,
	6950, 6950, 6950, 6950, 6950, 609, -1000, -1000, -1000, 3794,
	-1000, -1000, -144, 210, 232, -1000, -1000, 209, -144, -1000,
	-1000, -1000, -1000, 207, 1228, 326, -1000, -1000, -1000, 6950,
	277, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	958, 206, 203, -1000, -1000, -1000, -1000, 201, 200, 199,
	196, 188, 187, 183, 170, 165, 162, 160, 155, 149,
	542, -1000, 305, -1000, -1000, 305, 305, -1000, 136, 136,
	137, -1000, -1000, -1000, 136, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 147, 52, -1000, -1000, -1000, 12040,
	-144, -1000, 3077, 3316, 6950, -34, -1000, 17514, -1000, -30,
	515, -1000, 10940, 1085, 1076, 1059, 11386, 408, 404, 12040,
	284, 62, 1118, 9780, -1000, 12040, 12040, -1000, 12040, -1000,
	-1000, 12040, 12040, 12040, 27, 10494, 401, -23, 12040, 12040,
	-1000, 933, 664, -14, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1169, -1000, -1000, -1000, -1000, 1214,
	-14, -1000, -1000, -1000, -1000, -1000, 1221, -1000, -1000, -1000,
	-1000, 3316, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12040, -1000,
	-1000, -1000, -1000, -1000, 11386, 10712, 983, 691, 797, -1000,
	980, -1000, -1000, -1000, -1000, 17514, -1000, 17514, 466, 855,
	-1000, 855, -15, -1000, 16890, -1000, 146, -36, -1000, 284,
	9542, 5972, 17789, 12040, 412, 6950, 6950, 6950, 6950, 6950,
	6950, 6950, 6950, 6950, 6950, 6950, 6950, 6950, 6950, 6950,
	6950, 6950, 6950, 6950, 6950, 6950, 683, 388, 899, 620,
	135, 3316, -1000, 1157, 1157, 1157, 17762, 17762, 173, -145,
	16607, -17, -144, -1000, -1000, 4994, 4754, -144, 2781, -1000,
	850, 1210, 303, 17514, 965, 916, 145, 75, 74, 6950,
	878, 6950, 7190, 6950, 6950, 4034, 6950, 6950, 6950, 6950,
	6950, 6950, -1000, 144, -1000, -1000, -1000, -1000, 1208, -1000,
	-1000, 1207, -1000, 1206, 284, 72, -1000, -1000, -1000, -1000,
	2076, 5492, -1000, 612, 12040, 12040, 12040, -1000, -1000, 787,
	12694, -1000, 17789, 12040, -1000, 143, 140, 843, 842, 12040,
	12040, 12476, 12258, 12040, 764, 12040, 12040, 481, -1000, 6950,
	675, -1000, 9086, 309, 12040, 43, -1000, -1000, -1000, 256,
	12040, -1000, -1000, -1000, 70, -1000, -18, -1000, -1000, 12040,
	-23, -25, 12040, -1000, 500, -1000, 518, -1000, 8620, -1000,
	-1000, -1000, 850, -1000, -31, -1000, -1000, 71, -26, -1000,
	-1000, -1000, -1000, 12040, 205, 12040, 12040, 979, 12040, -1000,
	-1000, -1000, 6950, -1000, -1000, -1000, 27, 12040, -1000, 910,
	-29, 869, 11168, 11168, -1000, 8848, -1000, -1000, 1124, -1000,
	-1000, -1000, -1000, 41, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 137, 542, 136, 136, 136, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 305, 305, 305,
	-1000, -1000, 265, 761, 761, 1132, 1132, 1132, 1735, 1735,
	1911, 1882, 1926, 1926, 1926, 446, 275, 275, 1926, 1926,
	1926, 17762, 17663, 950, 6950, 387, 617, 135, 6950, -1000,
	1106, -1000, -1000, -1000, 930, 134, 7190, 7190, -1000, -1000,
	-1000, 3794, -1000, -1000, 133, 6950, -1000, 6950, -97, -103,
	-1000, 17514, -1000, -40, -1000, -1000, -48, 6950, 6950, 6950,
	69, -1000, 385, -1000, 380, 378, 375, -1000, 131, 68,
	454, -1000, 6950, 611, 130, 128, 6950, -1000, -1000, 17488,
	67, 925, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 66,
	17404, 65, 2483, -1000, 7190, 7190, 7190, 3794, 125, 64,
	16802, -134, 17327, 5732, 5732, 5732, 58, 17237, 6950, -134,
	15558, 15532, 2456, -41, -42, -46, 1205, -50, 57, 53,
	910, -1000, -1000, 6950, -1000, -1000, -1000, 372, 371, 974,
	-1000, 778, -1000, 781, 6950, 12040, 124, 123, 623, -1000,
	973, 690, 972, 690, -1000, -30, 510, -1000, -1000, 354,
	17514, -1000, 1063, -52, -1000, -1000, 284, 9780, 5492, -54,
	-1000, -31, -31, -1000, -1000, -1000, -1000, -1000, 12040, -1000,
	10712, 122, 12040, 121, 120, 12040, -1000, -1000, 51, -1000,
	-1000, -1000, -1000, -1000, 907, 1098, 9542, 861, 851, 9542,
	941, 625, 625, 625, -1000, -1000, -1000, 12040, 117, -1000,
	9324, 48, 869, 238, 235, -1000, 1202, 6950, 950, 6950,
	7190, 7190, -1000, 950, -1000, -1000, -1000, -1000, 924, 115,
	6950, 17789, 2026, 1776, -56, 4514, -80, 16532, 6950, -1000,
	-1000, 232, -1000, 47, 5252, -1000, 17077, -47, -47, -1000,
	821, 699, 700, 457, 1201, 1220, 1004, -1000, 6950, 17154,
	-1000, 10018, 286, 618, 16356, 17789, -1000, 6950, -1000, 923,
	6950, -1000, 17789, 7190, 7190, 7190, 7190, 7190, 7190, 7190,
	7190, 7190, 7190, 7190, 7190, 7190, 7190, 7190, 7190, 7190,
	7190, 856, 7190, 1148, 1148, 1148, -86, 4274, -1000, 943,
	923, 6950, 6950, 17789, 45, 44, 42, -1000, 6950, -134,
	6950, 6950, 6950, -1000, -1000, -1000, 39, -1000, 1188, -1000,
	-1000, 907, 2502, 12040, 12040, 12040, 971, 935, -1000, 16319,
	-58, 12040, 12040, -1000, 845, 892, 327, 12040, -1000, 12040,
	-1000, 12040, 12040, 12040, 12040, 138, 27, -1000, -1000, -1000,
	255, -1000, -1000, 7666, 109, 10712, 7666, 659, -1000, 280,
	6950, 6950, 869, 9542, 9542, 1229, 849, 9542, -1000, -1000,
	-1000, -1000, 108, 12040, 11168, 360, 1167, 38, 1142, 950,
	495, 231, 6950, 17789, 16449, -60, -1000, 6950, 6950, -1000,
	-62, -1000, 6950, -1000, 17514, -1000, 1217, 6950, 36, 35,
	34, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 33, -1000,
	-1000, 17514, 6950, -1000, -1000, 15310, 6950, 32, -1000, 28,
	17514, 943, 17514, -1000, 522, 522, 1148, 1148, 1148, 501,
	501, 595, 547, 1468, 1468, 1468, 9775, 383, 383, 1468,
	1468, 1468, 922, 852, 105, 2101, 6950, -64, -1000, -1000,
	-1000, 17514, 17514, 20, -1000, -1000, -1000, -134, 2184, 16273,
	16169, -1000, 17, 280, -1000, -1000, -1000, -1000, 12040, -1000,
	12040, -1000, 12040, 772, -1000, -1000, 841, 104, 7190, 12040,
	-1000, 591, -66, -68, 767, -1000, 766, 6950, -1000, 17789,
	690, 690, -1000, 350, 342, -1000, 1010, 7666, 1047, -1000,
	102, -70, -1000, 59, 1075, 6950, -1000, -1000, 101, 7666,
	15, -72, 12040, -1000, 12040, 17514, -134, -1000, 1229, -1000,
	98, 6950, 9542, -1000, 12040, -82, -1000, -1000, 229, 85,
	-1000, 6950, 6950, 16449, -90, -1000, 17789, 950, 950, -1000,
	16020, -1000, 17077, -1000, -1000, -1000, -1000, 17514, 573, -1000,
	15994, -1000, -1000, -1000, 7190, 904, 95, 17789, 15910, -1000,
	-1000, 6950, -1000, -1000, -1000, -1000, -1000, 1332, -1000, -1000,
	-1000, 6950, 2101, 63, -1000, 82, -1000, -1000, -1000, 517,
	-1000, -1000, 17514, 1077, -1000, -1000, 12040, 12040, 403, -92,
	12040, -1000, -1000, 3554, 591, 7666, 1067, -144, 12040, 1067,
	15833, 2781, -107, -1000, 591, 80, -87, -1000, 1115, -1000,
	12040, 17514, -1000, -111, -1000, -1000, -1000, 950, 950, -1000,
	-1000, -1000, 14, 618, 1095, -1000, 15660, 7190, 17789, -117,
	-1000, 15743, -1000, 15586, 789, 12040, 12040, 12040, 314, 12040,
	-1000, -1000, 442, -1000, 284, -1000, -1000, -1000, -1000, -1000,
	-1000, 1075, -48, 591, -1000, 7666, 12040, 79, -118, -1000,
	-1000, 660, 6950, 15660, -124, -1000, -1000, -1000, 634, 719,
	-130, -135, 63, -1000, 6950, -1000, 9780, -1000, 1067, 13,
	-1000, -137, -1000, -1000, -1000, 12, 6710, 6710, -134, -1000,
	-1000, 658, 657, 465, -1000, -1000, -1000, -1000, -1000, 789,
	17514, -115, -1000, -1000, 591, -1000, -1000, -1000, 7428, 728,
	472, 16636, -1000, -1000, 1018, -1000, 320, 653, 653, 634,
	-1000, -1000, 1128, -1000, -1000, -1000, -1000, -1000, -1000, 1139,
	-1000, -1000, 866, -1000, -1000, 6470, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1484, 1479, 1141, 1477, 1475, 1471, 1469, 1465, 75,
	1464, 1463, 80, 1461, 67, 1457, 1456, 1453, 40, 1452,
	1451, 1450, 1447, 57, 38, 1707, 102, 97, 1444, 1438,
	1436, 10, 72, 76, 1434, 21, 550, 1088, 1180, 42,
	70, 12, 133, 1431, 1425, 1420, 24, 1419, 1415, 1413,
	13, 29, 18, 1412, 27, 103, 1410, 1409, 56, 1407,
	124, 30, 90, 116, 1401, 271, 1400, 8, 44, 1399,
	14, 1396, 20, 49, 99, 1395, 518, 48, 19, 37,
	1394, 1391, 1390, 1389, 50, 60, 69, 1388, 1387, 51,
	1386, 92, 94, 1379, 1375, 1374, 1369, 1367, 1365, 1106,
	1362, 3, 22, 41, 28, 32, 0, 736, 711, 1360,
	26, 34, 53, 35, 36, 25, 1359, 77, 1356, 1353,
	1352, 1349, 1339, 52, 1334, 45, 96, 31, 59, 73,
	16, 43, 54, 78, 100, 85, 1331, 84, 1328, 33,
	1326, 1325, 774, 58, 1321, 1317, 1315, 650, 567, 566,
	238, 1314, 1305, 354, 278, 1304, 1302, 63, 1299, 1297,
	104, 1291, 86, 79, 1290, 82, 1289, 74, 1288, 108,
	113, 110, 1283, 81, 46, 1281, 1280, 1278, 17, 2,
	6, 5, 7, 4, 65, 47, 1276, 1275, 91, 61,
	1272, 514, 1270, 1265, 23, 1263, 1262, 15, 1257, 11,
	1256, 9, 1, 1255, 95, 1252, 68, 1251, 1207, 1246,
	98, 1242, 1241, 1309, 55,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 62, 62,
	61, 61, 64, 64, 11, 11, 12, 12, 12, 12,
	138, 138, 137, 13, 17, 204, 204, 204, 208, 208,
	209, 209, 210, 210, 210, 210, 210, 210, 210, 206,
	206, 19, 19, 19, 99, 99, 98, 98, 98, 98,
	100, 100, 100, 100, 162, 160, 160, 167, 167, 167,
	44, 44, 44, 44, 44, 159, 159, 159, 159, 168,
	168, 168, 168, 168, 168, 45, 45, 45, 166, 166,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	161, 161, 205, 205, 207, 207, 8, 8, 46, 46,
	47, 47, 103, 103, 103, 102, 176, 176, 177, 177,
	177, 178, 178, 178, 178, 178, 178, 178, 175, 175,
	173, 173, 174, 174, 174, 174, 211, 211, 101, 101,
	50, 50, 181, 181, 181, 181, 179, 179, 179, 179,
	179, 182, 180, 183, 183, 183, 183, 183, 126, 126,
	126, 22, 7, 7, 88, 88, 54, 54, 130, 130,
	130, 41, 41, 31, 31, 31, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 89, 89, 90, 90, 21,
	21, 21, 21, 21, 213, 213, 36, 36, 37, 6,
	6, 14, 43, 43, 95, 95, 95, 97, 97, 97,
	96, 96, 96, 23, 67, 67, 68, 68, 136, 69,
	69, 18, 18, 25, 25, 24, 24, 24, 24, 24,
	24, 26, 26, 27, 27, 27, 27, 27, 27, 27,
	189, 189, 189, 191, 191, 188, 15, 15, 15, 15,
	190, 190, 212, 212, 76, 76, 76, 49, 48, 48,
	52, 52, 51, 53, 53, 129, 74, 74, 74, 74,
	91, 92, 92, 93, 93, 94, 94, 73, 73, 113,
	113, 28, 28, 58, 58, 59, 59, 131, 131, 131,
	131, 132, 132, 132, 132, 132, 132, 127, 127, 127,
	127, 128, 128, 79, 79, 79, 79, 77, 77, 78,
	78, 133, 133, 133, 133, 75, 75, 134, 134, 134,
	104, 104, 139, 139, 139, 57, 57, 57, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 141, 141,
	141, 141, 143, 143, 143, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 144, 144,
	151, 151, 152, 152, 153, 154, 145, 145, 146, 146,
	147, 148, 155, 155, 155, 157, 157, 149, 149, 150,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 86, 86, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 184, 184, 184,
	184, 184, 184, 184, 186, 186, 187, 187, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 192, 192, 193, 193, 194, 194, 195,
	195, 197, 198, 198, 198, 199, 203, 203, 196, 196,
	200, 200, 200, 201, 201, 202, 202, 202, 202, 202,
	117, 117, 117, 118, 118, 119, 63, 63, 115, 115,
	114, 114, 114, 116, 116, 80, 156, 156, 156, 156,
	156, 156, 156, 81, 81, 87, 82, 82, 83, 83,
	83, 83, 83, 83, 110, 111, 84, 84, 84, 112,
	112, 120, 124, 124, 123, 122, 122, 121, 121, 105,
	105, 105, 105, 105, 70, 70, 214, 214, 125, 125,
	71, 71, 72, 66, 66, 65, 65, 135, 135, 135,
	135, 60, 60, 42, 42, 55, 55, 56, 56, 40,
	40, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 158, 158, 158, 38, 38, 38, 39, 39,
	164, 164, 164, 165, 165, 165, 165, 163, 163, 163,
	163, 163, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 4, 2, 4, 4, 3, 3, 4, 2,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 3, 2, 0, 3, 1,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	3, 1, 4, 5, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 10, 13, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 3,
	3, 2, 2, 2, 1, 0, 1, 0, 3, 3,
	6, 6, 1, 3, 1, 4, 2, 8, 5, 0,
	4, 3, 0, 7, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 2, 0, 1, 3, 2, 2, 1,
	4, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 4, 5, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 1, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 2,
	2, 2, 3, 5, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -190, 81, 87, 99, 178, -24, -25,
	191, 192, 29, 199, 50, 83, 180, 217, 56, -189,
	-27, -26, 261, 237, 243, 187, -28, 205, 230, 264,
	205, 68, 109, 76, 112, 224, 68, 109, 205, -12,
	261, -18, -14, -23, -9, -208, 18, -209, -210, 56,
	81, 99, 187, 112, 76, 224, -208, -99, 130, 189,
	213, -100, -98, -162, 209, 138, -61, -38, 4, -169,
	-171, 16, 17, 19, 28, 29, 33, 37, 39, 49,
	50, 51, 53, 55, 58, 59, 66, 67, 68, 69,
	71, 76, 80, 81, 87, 91, 92, 94, 100, 105,
	112, 120, 122, 127, 134, 135, 136, 137, 140, 141,
	143, 146, 148, 149, 155, 158, 161, 162, 165, 168,
	169, 171, 172, 174, 175, 176, 178, 180, 181, 183,
	185, 186, 188, 191, 192, 194, 196, 198, 199, 202,
	200, 206, 207, 217, 218, 219, 220, 223, 224, 227,
	228, 229, 233, 238, 239, 240, 241, 30, 31, 32,
	34, 35, 38, 42, 43, 45, 70, 72, 73, 86,
	88, 93, 101, 103, 106, 107, 113, 114, 115, 117,
	125, 145, 147, 156, 160, 164, 166, 170, 182, 195,
	201, 203, 210, 214, 215, 230, 231, 4, 68, 49,
	69, 100, 109, 206, 209, 213, 18, -213, 213, 213,
	-213, -213, -213, -212, 205, 205, -88, 68, 222, -26,
	-27, -25, -51, -52, 221, 116, 85, 154, -24, -25,
	-189, -191, 171, -188, -38, 130, 138, 189, 213, 209,
	-191, -48, -49, 18, 78, 265, -133, -42, 152, -38,
	-72, 261, -3, -133, 106, -38, -42, 106, 97, 118,
	-134, -133, -38, 106, -60, 106, -42, -62, 106, -61,
	-138, -137, -165, 4, -169, -171, -170, 230, 47, 57,
	98, 111, 119, 121, 126, 128, 139, 157, 159, 179,
	193, 151, 265, 151, -99, -99, -37, 120, 211, 246,
	97, 241, -45, 6, 74, -64, 263, 97, -205, 151,
	97, -161, 97, 241, 120, -36, -37, -36, -75, -133,
	-61, 106, 109, -38, 106, -51, -52, -74, -91, -92,
	129, 150, -76, 18, 78, -76, -76, 37, 262, 262,
	265, -191, -56, 261, -66, -65, -135, -106, 254, -108,
	252, 253, 258, 142, 242, -117, -42, -109, 9, 261,
	-120, -186, -25, 86, 24, -118, -119, 182, -38, 8,
	5, 6, 7, -40, -141, -150, 216, 89, 144, 40,
	-184, -185, 4, -169, -164, -142, -152, -146, -149, 117,
	47, 61, 64, 62, 65, 190, 225, 41, 88, 160,
	164, 203, 214, 215, 106, 145, 107, 45, 101, 125,
	80, 31, 32, 34, 35, 42, 43, 70, 72, 73,
	93, 113, 114, 115, 147, 170, 195, 210, 231, -170,
	-153, -154, -147, -148, -155, -65, -72, 254, -42, 261,
	-70, -105, 263, 266, 259, -71, -125, -106, 74, -33,
	174, -32, 17, 19, 81, 228, 86, 174, 174, 86,
	-134, -43, -42, 191, -38, 25, 86, -35, 265, 39,
	176, 86, 265, 86, 262, 265, -204, -60, 205, 68,
	-210, -204, 127, -160, 74, -167, -159, -126, 9, 216,
	89, 151, -166, 5, 253, -158, -165, 6, 8, 252,
	-160, 74, 59, -168, 6, 4, -150, -126, 74, 130,
	117, 263, -163, 4, -169, -171, -170, -172, 18, 20,
	21, 22, 23, 24, 25, 26, 27, 36, 40, 41,
	44, 46, 48, 54, 56, 60, 61, 62, 63, 64,
	65, 74, 75, 77, 78, 79, 82, 83, 85, 89,
	90, 95, 96, 97, 99, 102, 104, 108, 109, 110,
	116, 118, 123, 124, 129, 131, 132, 142, 144, 150,
	151, 152, 153, 154, 163, 167, 173, 177, 187, 190,
	197, 204, 205, 208, 211, 212, 216, 221, 222, 225,
	226, 232, 234, 235, 236, 237, -162, -207, 95, -204,
	-162, -162, 127, -35, 265, 261, 142, -39, 106, -38,
	142, -74, -92, -91, -93, -106, 18, -106, -108, -26,
	-26, -26, -53, -129, -106, -188, 25, -55, -38, -58,
	97, 265, 10, 46, 28, 252, 253, 254, 255, 256,
	249, 250, 251, 248, 244, 245, 246, 52, 133, 184,
	12, 13, 14, 22, 153, 128, 242, 193, 119, 30,
	108, 25, 4, -106, -106, -106, -106, -106, 159, -25,
	-106, -63, -70, -25, -114, 259, 261, -70, 261, 6,
	6, 261, -121, -106, -192, 238, 95, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 166, -157, 233, -157, -157, -143, 261, -143,
	-144, 261, -143, 261, -58, -42, -105, -163, 254, -163,
	-106, 265, 262, 265, 211, -89, 54, 48, -102, 106,
	48, -173, -38, 54, -174, 44, 222, 167, 96, -89,
	54, -89, 54, 54, -133, 211, 211, -42, -104, 235,
	-95, -18, 261, 74, 25, -67, -68, -136, -69, -42,
	261, -38, -38, -42, -60, -61, -62, -12, -137, 211,
	-60, -55, 97, -44, 169, 196, 175, 188, 265, 5,
	8, 8, 6, -163, -206, -38, -133, -46, -47, -103,
	-102, -175, -173, 109, 222, 86, 151, 142, 86, -94,
	182, 183, 265, -31, 26, 77, 261, 265, 262, -104,
	-59, -131, -133, -25, -132, 261, -135, -139, -140, -142,
	-151, -145, -149, -150, 33, 38, 207, 201, 113, 114,
	115, 195, 31, 170, 93, 80, 73, 72, 147, 35,
	34, -153, -154, -147, -148, 70, 210, 32, 43, 42,
	231, -61, 209, -106, -106, -106, -106, -106, -106, -106,
	-106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
	-106, -106, -106, -106, 128, 193, 30, 108, 211, 144,
	142, 216, 89, 223, 78, 148, -214, 204, 27, -112,
	-25, 261, -163, -117, 182, 261, 262, 265, -63, -116,
	260, -106, -114, -63, 262, 262, -63, 232, 18, 78,
	254, -85, 240, 136, 71, 105, 135, -86, 186, 8,
	-124, -123, 234, -193, 91, 102, 261, 262, 262, -106,
	-80, -156, 4, 240, 136, 71, 105, 135, 186, -81,
	-106, -82, -107, -108, 252, 253, 258, 261, 182, -83,
	-106, -63, -106, 36, 124, 212, -84, -106, 97, -63,
	-106, -106, -106, -63, -63, -63, 261, 8, 8, 8,
	-104, 262, 260, 267, -125, -32, -42, -38, -38, 142,
	-102, 106, -139, -38, 261, 261, 122, 122, -38, -38,
	106, -38, 106, -38, -38, -33, 174, -38, -38, 174,
	-106, -97, 151, -60, 230, -38, -58, 265, 246, -60,
	-35, -206, -206, 220, 51, 169, -167, -85, 265, 262,
	265, -39, 109, -61, -42, 86, -38, -129, -15, -18,
	-14, -23, -9, -38, -73, 102, 265, 57, -79, 121,
	139, 98, 126, 179, 111, -128, -127, 25, -38, -128,
	-25, -132, -131, -57, 24, -85, 261, 241, -106, 211,
	-214, 204, -112, -106, 144, 216, 89, 223, 78, 148,
	97, 261, -107, -107, -63, 261, -63, -106, 265, 260,
	260, 265, 262, -52, 265, -51, -106, -63, -63, 262,
	211, 211, 211, 211, 261, 262, -122, -123, 82, -106,
	-198, 158, 261, 261, -106, 25, 262, 97, 262, -87,
	163, 262, 10, 252, 253, 254, 255, 256, 249, 250,
	251, 248, 244, 245, 246, 52, 133, 184, 12, 13,
	14, 119, 108, -107, -107, -107, -63, 261, 262, -110,
	-111, 97, 95, 25, -84, -84, -84, 262, 97, -63,
	265, 265, 265, 262, 262, 262, 8, 262, 265, 262,
	262, -73, -106, 211, 211, 86, 142, -176, -174, -106,
	-55, 261, 261, -29, 81, 191, -90, 86, -35, 86,
	-35, 211, -89, 54, 211, 53, 262, -104, -68, -125,
	262, -38, -103, 261, -39, 261, 261, -38, 262, -113,
	104, 37, -131, 121, 121, -131, -79, 121, -77, 157,
	-77, -77, -38, 261, 262, 259, 259, 8, -106, -106,
	-107, -107, 97, 261, -106, -115, -139, 22, 22, 262,
	-63, 262, 265, 262, -106, -114, 262, 232, -52, -52,
	-52, 136, 105, 135, -86, 135, -86, -86, 8, 6,
	83, -106, 208, -199, -38, 261, 235, -51, 262, -139,
	-106, -110, -106, -139, -107, -107, -107, -107, -107, -107,
	-107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, 78, 142, 148, -107, 265, -63, 262, -111,
	-110, -106, -106, -139, 262, 262, 262, -63, -106, -106,
	-106, 262, 8, -113, 260, -38, -38, -102, 86, -177,
	54, -178, 46, 142, 144, 222, 167, 44, 74, 173,
	262, 262, -55, -55, 142, 74, 142, 74, 67, 218,
	-38, -38, -42, -38, -38, -38, -96, 261, 151, -18,
	246, -54, -130, -38, -187, 261, -184, -185, -40, 261,
	-46, -54, 151, -194, 236, -106, -63, -131, -131, -78,
	226, 151, 121, -131, 261, -55, -127, 260, 8, 8,
	262, 22, 22, -106, -115, 262, 265, -106, -106, 262,
	-106, 6, -106, 262, 262, 262, 262, -106, -203, -38,
	-106, 262, 262, -111, 97, 78, 148, 261, -106, 262,
	262, 265, 262, 262, 262, -194, -102, -38, -61, 144,
	122, 261, -107, -42, -101, -211, 55, 202, 262, 262,
	144, 144, -106, -139, -35, -35, 211, 211, 79, -54,
	54, -72, -25, 261, 262, 265, -41, -70, 46, -41,
	-106, 261, -54, 262, 262, -42, -195, -197, -38, -78,
	261, -106, -131, -55, 262, 260, 260, -106, -106, 262,
	-139, 262, -52, -196, 162, 262, -107, 97, 261, -115,
	262, -106, -178, -106, -50, 261, 261, 173, -34, 46,
	-38, -38, 224, 143, 262, -38, -101, -130, -31, -61,
	-31, 262, -63, 262, -101, 261, 265, 25, -55, 262,
	262, -52, 37, -107, -115, 262, 262, 262, -181, 134,
	-55, -55, -42, -30, 226, -61, 191, -104, -41, -52,
	-101, -54, -197, -199, 262, -200, 168, 183, -63, 262,
	-179, -182, -180, 151, 98, 161, 194, 262, 262, -50,
	-106, -67, -31, 262, 262, 262, -201, -202, 30, 219,
	59, -106, -201, -180, 151, -182, 151, 224, 76, -181,
	-104, -101, -202, 165, 94, 182, 165, 94, -183, 141,
	176, 39, 191, -183, -179, 22, 16, 144, 74, -202,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 291, 0, 0, 261, -2,
	0, 0, 235, 0, 235, 235, 235, 293, 205, 290,
	-2, 301, 0, 0, 0, 299, 275, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 66, 67, 68, 69, 0, 78, 79, 80, 82,
	83, 84, 85, 86, 87, 88, 0, 91, 735, 766,
	777, 95, 100, 0, 827, -2, 104, 60, 685, 686,
	687, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 736, 737, 738, 739, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 828, 829, 830, 831, 832, 130, 131, 0,
	133, 143, 0, 141, 0, 0, 139, 237, 234, 237,
	231, 232, 233, 0, 292, 0, 0, 0, 204, -2,
	271, 272, -2, 0, 296, 296, 296, 0, 0, 272,
	0, 280, 754, 283, 668, 735, 740, 766, 777, 827,
	281, 654, 0, 298, 297, 0, 276, 351, 0, 663,
	321, 0, 2, 0, 809, 0, 0, 809, 0, 0,
	0, 357, 52, 809, 43, 809, 661, 56, 809, 58,
	0, 70, 72, 693, 694, 695, 696, 831, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 0, 0, 0, 92, 93, 94, 0, 0, 0,
	0, 0, 103, 125, 126, 61, 0, 0, 145, 0,
	0, 136, 0, 137, 0, 229, 236, 230, 43, 355,
	0, 809, 689, 239, 809, -2, 0, 267, 308, 309,
	0, 0, 0, 294, 295, 0, 0, 0, 263, 264,
	0, 282, 0, 0, 324, 653, 655, 659, 660, 436,
	0, 0, 0, 0, 0, 0, 515, 516, 517, 0,
	519, 520, 521, 804, 0, 525, 526, 823, 663, 671,
	672, 673, 674, 0, 0, 0, 679, 680, 681, 638,
	564, 535, -2, -2, 669, 378, 379, 380, 381, -2,
	833, 539, 541, 543, 544, 545, 546, 0, 805, 819,
	820, 826, 829, 830, 809, 816, 810, 800, 807, 815,
	723, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 692,
	402, 403, 408, 409, 411, 324, 322, 352, 353, 0,
	664, 644, 0, 0, 0, 0, 650, 648, 649, 20,
	226, 22, 0, 226, 226, 0, 0, 0, 0, 0,
	361, 0, 242, 0, 358, 0, 0, 54, 0, 41,
	42, 0, 0, 0, 291, 0, 0, 75, 0, 719,
	81, 0, 0, 96, 98, 105, 107, 108, 109, 115,
	116, 117, 118, 198, 0, 200, 128, 129, 682, 0,
	97, 99, 101, 102, 119, 120, 0, 122, 123, 124,
	419, 0, 62, 697, 698, 699, 700, 701, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 132, 134, 0, 142,
	135, 140, 138, 201, 0, 149, 0, 0, 809, 688,
	0, 270, 306, 307, 310, 313, 314, 311, 436, 277,
	278, 279, 302, 303, 215, 284, 0, 0, 665, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	0, 0, 658, 440, 441, 442, 463, 464, 0, -2,
	596, 0, 522, 523, 524, 0, 0, -2, 0, 676,
	433, 0, 0, 637, 566, 0, 0, 0, 0, 0,
	0, 0, 617, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 392, 405, 415, 413, 412, 394, 0, 393,
	391, 0, 395, 0, 361, 0, 645, 639, 640, 641,
	0, 0, 652, 0, 0, 0, 0, 225, 24, 809,
	0, 34, 0, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	249, 244, 0, 0, 0, 324, 254, 256, 257, 0,
	0, 359, 53, 662, 43, 59, 57, 65, 71, 0,
	76, 77, 0, 238, 0, 112, 0, 114, 0, 199,
	684, 683, 433, 63, 144, 89, 356, 0, 148, 150,
	152, 153, 154, 689, 0, 0, 0, 0, 0, 312,
	315, 316, 0, 305, 213, 214, 291, 0, 667, 318,
	323, 325, 342, 342, 329, 0, 656, 437, 367, 368,
	369, 370, 371, 433, 374, 375, 376, 377, 385, 386,
	387, 388, 389, 390, 399, 0, 384, 384, 384, 396,
	397, 400, 401, 406, 407, 417, 418, 416, 416, 416,
	414, 438, 0, 443, 444, 445, 446, 447, 448, 449,
	450, 451, -2, -2, -2, 455, 456, 457, -2, -2,
	-2, 461, 462, -2, 0, 0, 647, 0, 0, 469,
	0, 472, 474, 476, 0, 0, 0, 0, 646, 486,
	629, 0, 657, 471, 0, 0, 518, 0, 0, 0,
	602, 596, 603, 0, -2, 527, 301, 0, 0, 0,
	0, 677, 420, 421, 422, 423, 424, 425, 434, 0,
	636, 632, 0, 574, 0, 0, 0, 540, 542, 0,
	0, 0, 606, 607, 608, 609, 610, 611, 612, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 823, 0,
	596, 622, 0, 0, 0, 0, 0, 596, 0, 628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	318, 354, 642, 0, 651, 23, 217, 0, 0, 0,
	26, 809, 157, 0, 0, 0, 0, 0, 228, 35,
	809, 43, 809, 43, 36, 21, 226, 216, 219, 0,
	360, 241, 0, 0, 246, 243, 361, 0, 0, 0,
	55, 73, 74, 110, 111, 113, 106, 121, 0, 146,
	0, 0, 689, 0, 0, 0, 240, 304, 0, 286,
	287, 288, 289, 666, 320, 0, 0, 0, 0, 0,
	0, 348, 348, 348, 346, 327, 341, 0, 340, 328,
	-2, 329, 0, 362, 364, 372, 0, 0, -2, 0,
	0, 0, 487, -2, 470, 473, 475, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 600,
	601, 0, -2, 0, 0, 300, 301, 301, 301, 533,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	534, 0, 0, 0, 0, 0, 548, 0, 549, 0,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 490, 491, 492, 0, 0, 551, 620,
	621, 0, 0, 0, 0, 0, 0, 556, 0, 627,
	0, 0, 0, 560, 561, 562, 0, 382, 0, 398,
	410, 320, 0, 0, 0, 0, 0, 155, 170, 0,
	0, 0, 0, 28, 0, 0, 0, 0, 32, 0,
	38, 0, 0, 0, 0, 252, 0, 253, 255, 258,
	0, 90, 151, 0, 0, 149, 0, 0, 285, 568,
	0, 0, 326, 0, 0, 0, 0, 0, 343, 347,
	344, 345, 338, 0, 331, 0, 0, 0, 439, -2,
	0, 0, 0, 0, -2, 0, 598, 0, 0, 630,
	0, 591, 0, -2, 597, 604, 528, 0, 0, 0,
	0, 426, 427, 428, 429, 430, 431, 432, 0, 678,
	631, 635, 0, 572, 573, 577, 0, 0, 538, 0,
	605, 614, 615, 489, 493, 494, 495, 496, 497, 498,
	499, 500, 501, -2, -2, -2, 505, 506, 507, -2,
	-2, -2, 0, 0, 0, 616, 0, 0, 594, 618,
	619, 624, 625, 0, 553, 554, 555, 626, 0, 0,
	0, 404, 0, 568, 643, 221, 223, 25, 0, 156,
	0, 159, 0, 0, 162, 163, 0, 0, 0, 0,
	172, 179, 0, 0, 0, 40, 0, 0, 227, 0,
	43, 43, 218, 0, 0, 220, 0, 0, 0, 245,
	0, 0, 206, 212, 212, 0, 536, 537, 0, 0,
	0, 0, 0, 273, 0, 319, 317, 332, 0, 334,
	0, 0, 0, 336, 0, 0, 330, 365, 0, 0,
	373, 0, 0, -2, 0, 480, 0, -2, -2, 590,
	597, 675, 301, 529, 531, 532, 435, 634, 579, 576,
	0, 563, 547, 613, 0, 0, 0, 0, 597, 593,
	552, 0, 558, 559, 383, 274, 27, 0, 160, 161,
	164, 0, 166, 181, 173, 0, 176, 177, 174, 0,
	29, 30, 39, 45, 31, 37, 0, 0, 0, 0,
	0, 259, 260, 0, 179, 0, 215, 670, 0, 215,
	0, 0, 0, 147, 179, 0, 567, 569, 0, 333,
	0, 350, 335, 0, 339, 366, 363, -2, -2, 481,
	599, 592, 0, 301, 0, 565, -2, 0, 0, 0,
	595, 0, 158, 0, 185, 0, 0, 0, 47, 0,
	222, 224, 0, 248, 361, 251, 168, 207, 208, 211,
	209, 212, 301, 179, 202, 0, 0, 0, 0, 337,
	530, 582, 0, -2, 0, 513, 557, 165, 190, 0,
	0, 0, 181, 33, 0, 44, 0, 250, 215, 0,
	169, 0, 570, 571, 349, 0, 0, 0, 578, 514,
	167, 186, 187, 0, 182, 183, 184, 180, 178, 185,
	46, 361, 210, 528, 179, 575, 580, 583, -2, 780,
	716, 0, 581, 188, 0, 189, 0, 0, 0, 190,
	247, 203, 0, 585, 586, 587, 588, 589, 191, 0,
	194, 195, 0, 192, 175, 0, 193, 196, 197, 584,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 250, 3, 256, 251, 3,
	261, 262, 254, 252, 265, 253, 263, 255, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 267, 264,
	244, 246, 245, 3, 266, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 259, 3, 260, 249, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 248, 3, 258,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 247, 257,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:444
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:450
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:456
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:475
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:484
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:490
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:494
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:500
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:504
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:511
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:516
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:521
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:526
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:530
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:532
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:534
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:537
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:542
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:547
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:550
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:554
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:556
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:559
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:564
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:569
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:570
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:574
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:575
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:578
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:579
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:582
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:583
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:594
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:601
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:605
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:609
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:613
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:617
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:621
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:627
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:631
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:637
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:641
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:647
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:651
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:658
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:662
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:668
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:677
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:681
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:691
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:709
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:715
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:722
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[2].isoLevel}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			unimplemented()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.stmt = &SetTimeZone{Value: sqlDollar[3].expr}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:830
		{
			unimplemented()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:855
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:869
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.expr = DBool(true)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.expr = DBool(false)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:911
		{
			// TODO(pmattis): support opt_interval?
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
			// Use an empty EvalContext.
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.expr = d
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			unimplemented()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			unimplemented()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:939
		{
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.stmt = &Show{Name: "TIME ZONE"}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.stmt = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.qname = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.targetListPtr = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.strs = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.tblDefs = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.colQuals = nil
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1086
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			unimplemented()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1119
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1130
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].idxElems,
				Storing: sqlDollar[6].strs,
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].idxElems,
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1167
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1187
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.strs = nil
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.strs = nil
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1223
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1224
		{
			unimplemented()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1225
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1226
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			unimplemented()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1237
		{
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1246
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.expr = DInt(sqlDollar[1].ival.Val)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].idxElems,
				Storing: sqlDollar[10].strs,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].idxElems,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.boolVal = true
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.boolVal = false
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.idxElems = IndexElemList{sqlDollar[1].idxElem}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.idxElems = append(sqlDollar[1].idxElems, sqlDollar[3].idxElem)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.idxElem = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].dir}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1326
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1330
		{
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.dir = Ascending
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.dir = Descending
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.dir = DefaultDirection
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.stmt = nil
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.stmt = nil
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.boolVal = true
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.boolVal = false
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1397
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1424
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.isoLevel = UnspecifiedIsolation
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.stmt = &Insert{}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1482
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1483
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1484
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1489
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1734
		{
			unimplemented()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1735
		{
			unimplemented()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1738
		{
			unimplemented()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			unimplemented()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1751
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.boolVal = true
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.boolVal = false
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.boolVal = false
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.boolVal = true
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1779
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.orderBy = nil
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.expr = nil
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.groupBy = nil
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.expr = nil
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.tblExprs = nil
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: Name(sqlDollar[2].str)}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1968
		{
			unimplemented()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2011
		{
			unimplemented()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2016
		{
			unimplemented()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.str = ""
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.str = astFullJoin
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.str = astLeftJoin
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.str = astRightJoin
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.str = astInnerJoin
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2050
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2085
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[3].str)}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.expr = nil
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2143
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2148
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			unimplemented()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val)}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val), Scale: int(sqlDollar[4].ival.Val)}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival.Val)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.ival = IntVal{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival.Val)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival.Val)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2335
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.colType = &DateType{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
			unimplemented()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2356
		{
			unimplemented()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			unimplemented()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2359
		{
			unimplemented()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			unimplemented()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			unimplemented()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			unimplemented()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			unimplemented()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			unimplemented()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2367
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2370
		{
			unimplemented()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2399
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2771
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2775
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2776
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2778
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: All, Exprs: sqlDollar[4].exprs}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2783
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: Distinct, Exprs: sqlDollar[4].exprs}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
			unimplemented()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.expr = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].exprs}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2862
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].exprs}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2906
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2907
		{
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2910
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2911
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2915
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			unimplemented()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			unimplemented()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2948
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2958
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2962
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2969
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2972
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.expr = Row(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.expr = Row(nil)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.expr = Array(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr, sqlDollar[4].expr}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.exprs = Exprs{sqlDollar[3].expr, sqlDollar[1].expr}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.exprs = nil
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[3].expr, sqlDollar[2].expr}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, DInt(1), sqlDollar[2].expr}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.exprs = nil
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.exprs = append(sqlDollar[3].exprs, sqlDollar[1].expr)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.expr = nil
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.expr = nil
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3291
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.selExprs = nil
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.selExpr = starSelectExpr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3406
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.expr = &IntVal{Val: sqlDollar[1].ival.Val, Str: sqlDollar[1].ival.Str}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3442
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3453
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.expr = DBool(true)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.expr = DBool(false)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.expr = DNull
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.ival = IntVal{Val: -sqlDollar[2].ival.Val, Str: "-" + sqlDollar[2].ival.Str}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
