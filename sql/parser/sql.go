// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PRIMARY = 57522
const PRIORITY = 57523
const RANGE = 57524
const READ = 57525
const REAL = 57526
const RECURSIVE = 57527
const REF = 57528
const REFERENCES = 57529
const RENAME = 57530
const REPEATABLE = 57531
const RELEASE = 57532
const RESTRICT = 57533
const RETURNING = 57534
const REVOKE = 57535
const RIGHT = 57536
const ROLLBACK = 57537
const ROLLUP = 57538
const ROW = 57539
const ROWS = 57540
const RSHIFT = 57541
const SAVEPOINT = 57542
const SEARCH = 57543
const SECOND = 57544
const SELECT = 57545
const SERIAL = 57546
const SERIALIZABLE = 57547
const SESSION = 57548
const SESSION_USER = 57549
const SET = 57550
const SHOW = 57551
const SIMILAR = 57552
const SIMPLE = 57553
const SMALLINT = 57554
const SMALLSERIAL = 57555
const SNAPSHOT = 57556
const SOME = 57557
const SQL = 57558
const START = 57559
const STRICT = 57560
const STRING = 57561
const STORING = 57562
const SUBSTRING = 57563
const SYMMETRIC = 57564
const SYSTEM = 57565
const TABLE = 57566
const TABLES = 57567
const TEXT = 57568
const THEN = 57569
const TIME = 57570
const TIMESTAMP = 57571
const TIMESTAMPTZ = 57572
const TO = 57573
const TRAILING = 57574
const TRANSACTION = 57575
const TREAT = 57576
const TRIM = 57577
const TRUE = 57578
const TRUNCATE = 57579
const TYPE = 57580
const UNBOUNDED = 57581
const UNCOMMITTED = 57582
const UNION = 57583
const UNIQUE = 57584
const UNKNOWN = 57585
const UPDATE = 57586
const UPSERT = 57587
const USER = 57588
const USING = 57589
const VALID = 57590
const VALIDATE = 57591
const VALUE = 57592
const VALUES = 57593
const VARCHAR = 57594
const VARIADIC = 57595
const VARYING = 57596
const WHEN = 57597
const WHERE = 57598
const WINDOW = 57599
const WITH = 57600
const WITHIN = 57601
const WITHOUT = 57602
const YEAR = 57603
const ZONE = 57604
const NOT_LA = 57605
const WITH_LA = 57606
const AS_LA = 57607
const POSTFIXOP = 57608
const UMINUS = 57609

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4489

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	286, 21,
	-2, 333,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 304,
	164, 304,
	192, 304,
	284, 304,
	286, 304,
	-2, 314,
	-1, 44,
	1, 307,
	164, 307,
	192, 307,
	284, 307,
	286, 307,
	-2, 313,
	-1, 53,
	1, 21,
	286, 21,
	-2, 333,
	-1, 250,
	1, 142,
	286, 142,
	-2, 816,
	-1, 282,
	139, 343,
	163, 343,
	-2, 310,
	-1, 285,
	139, 342,
	163, 342,
	-2, 308,
	-1, 398,
	139, 342,
	163, 342,
	-2, 311,
	-1, 454,
	283, 760,
	-2, 753,
	-1, 455,
	283, 761,
	-2, 754,
	-1, 461,
	5, 477,
	283, 477,
	-2, 900,
	-1, 483,
	5, 443,
	-2, 876,
	-1, 484,
	5, 471,
	283, 471,
	-2, 878,
	-1, 485,
	5, 451,
	-2, 879,
	-1, 486,
	5, 450,
	-2, 880,
	-1, 487,
	5, 471,
	283, 471,
	-2, 883,
	-1, 488,
	5, 471,
	283, 471,
	-2, 884,
	-1, 489,
	5, 472,
	-2, 887,
	-1, 490,
	5, 438,
	-2, 888,
	-1, 491,
	5, 438,
	-2, 889,
	-1, 492,
	5, 453,
	-2, 892,
	-1, 493,
	5, 439,
	-2, 897,
	-1, 494,
	5, 440,
	-2, 898,
	-1, 495,
	5, 441,
	-2, 899,
	-1, 496,
	5, 438,
	-2, 903,
	-1, 497,
	5, 444,
	-2, 908,
	-1, 498,
	5, 442,
	-2, 911,
	-1, 499,
	5, 469,
	283, 469,
	-2, 913,
	-1, 500,
	5, 473,
	-2, 916,
	-1, 501,
	5, 475,
	-2, 917,
	-1, 502,
	5, 468,
	283, 468,
	-2, 921,
	-1, 769,
	89, 314,
	125, 314,
	139, 314,
	163, 314,
	167, 314,
	241, 314,
	-2, 581,
	-1, 777,
	283, 738,
	-2, 727,
	-1, 983,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 511,
	-1, 984,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 512,
	-1, 985,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 513,
	-1, 989,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 517,
	-1, 990,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 518,
	-1, 991,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 519,
	-1, 994,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 524,
	-1, 1025,
	172, 651,
	-2, 654,
	-1, 1185,
	89, 314,
	125, 314,
	139, 314,
	163, 314,
	167, 314,
	241, 314,
	-2, 391,
	-1, 1193,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 525,
	-1, 1198,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 526,
	-1, 1217,
	172, 650,
	-2, 653,
	-1, 1366,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 527,
	-1, 1371,
	128, 0,
	-2, 537,
	-1, 1380,
	172, 652,
	-2, 655,
	-1, 1421,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 562,
	-1, 1422,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 563,
	-1, 1423,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 564,
	-1, 1427,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 568,
	-1, 1428,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 569,
	-1, 1429,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 570,
	-1, 1533,
	128, 0,
	-2, 538,
	-1, 1537,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 541,
	-1, 1538,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 543,
	-1, 1623,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 542,
	-1, 1624,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 544,
	-1, 1632,
	128, 0,
	-2, 571,
	-1, 1673,
	128, 0,
	-2, 572,
	-1, 1721,
	30, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 875,
}

const sqlNprod = 1014
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20935

var sqlAct = [...]int{

	455, 1720, 1701, 1574, 1742, 1678, 1702, 850, 1703, 1719,
	1080, 858, 1400, 602, 918, 1609, 1596, 286, 1492, 453,
	1521, 1493, 1502, 515, 251, 1372, 726, 1459, 1513, 927,
	452, 91, 445, 1373, 91, 772, 308, 31, 1182, 1507,
	1275, 91, 14, 899, 1123, 1343, 902, 92, 91, 91,
	1038, 1276, 91, 503, 774, 91, 91, 91, 544, 1220,
	1172, 91, 91, 91, 91, 1181, 334, 417, 707, 1352,
	66, 704, 901, 524, 859, 521, 826, 1042, 835, 1010,
	803, 1032, 1168, 1007, 291, 1077, 930, 807, 329, 91,
	722, 386, 293, 43, 20, 10, 575, 6, 560, 447,
	728, 894, 1129, 291, 526, 285, 928, 427, 418, 516,
	517, 557, 586, 335, 331, 387, 8, 326, 324, 336,
	43, 7, 71, 70, 5, 72, 4, 64, 905, 327,
	400, 296, 402, 852, 401, 87, 577, 556, 248, 573,
	78, 537, 320, 294, 73, 1616, 43, 44, 1617, 68,
	1749, 546, 67, 922, 69, 45, 405, 1180, 304, 546,
	546, 311, 1035, 851, 290, 1716, 1709, 321, 1595, 922,
	731, 290, 1700, 535, 314, 1536, 275, 1694, 332, 1675,
	922, 1669, 1536, 1659, 922, 1213, 1595, 1663, 733, 730,
	759, 283, 298, 1650, 1135, 1625, 922, 1620, 1536, 282,
	922, 1036, 1606, 1603, 1594, 1595, 1604, 1595, 1579, 732,
	1578, 922, 730, 922, 1559, 747, 1539, 1213, 1535, 1213,
	1469, 1536, 731, 922, 750, 751, 752, 1376, 1332, 729,
	1213, 1327, 49, 1326, 1037, 1034, 1327, 1434, 1293, 1379,
	733, 1294, 759, 1291, 91, 91, 1213, 1290, 1289, 1217,
	1213, 1213, 1213, 51, 1150, 1215, 824, 1214, 1170, 738,
	1216, 732, 1213, 923, 1598, 823, 922, 747, 822, 552,
	1152, 922, 553, 874, 1018, 91, 760, 91, 917, 91,
	52, 91, 518, 888, 1219, 412, 519, 47, 519, 413,
	1039, 1213, 698, 48, 505, 697, 91, 567, 755, 566,
	399, 547, 353, 393, 748, 303, 53, 91, 601, 547,
	547, 738, 46, 518, 49, 372, 1711, 519, 91, 91,
	91, 1718, 91, 1715, 1708, 1670, 1605, 1564, 760, 1560,
	1552, 1551, 1546, 1545, 1544, 51, 1543, 360, 1530, 1449,
	510, 1444, 398, 514, 1487, 1443, 1442, 1383, 1361, 1033,
	755, 1342, 91, 91, 1298, 91, 748, 1295, 1283, 749,
	1274, 361, 52, 1246, 1243, 334, 334, 1241, 509, 1402,
	757, 1191, 1135, 604, 91, 1230, 91, 91, 91, 91,
	1224, 91, 1154, 392, 1151, 91, 549, 1094, 1049, 1048,
	91, 1015, 511, 412, 46, 729, 91, 550, 780, 411,
	1662, 1519, 1618, 1642, 1641, 545, 701, 1634, 1612, 1601,
	390, 749, 335, 335, 91, 1593, 1571, 91, 336, 336,
	605, 1557, 757, 756, 321, 1524, 606, 1500, 1370, 731,
	743, 740, 741, 742, 734, 735, 736, 737, 739, 414,
	1360, 283, 771, 775, 1339, 408, 409, 733, 1338, 282,
	700, 1528, 855, 1247, 1337, 1264, 1265, 1266, 554, 74,
	536, 539, 1335, 1486, 1310, 1532, 1309, 596, 732, 291,
	1273, 1238, 1237, 1247, 1229, 756, 777, 1016, 744, 745,
	746, 1210, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 1206, 564, 1012, 563, 1622, 518, 808, 1261, 42,
	519, 811, 1108, 1107, 597, 590, 1087, 1047, 921, 815,
	801, 800, 687, 690, 91, 691, 692, 693, 738, 694,
	604, 799, 798, 696, 26, 699, 797, 796, 91, 795,
	710, 27, 91, 820, 711, 91, 91, 712, 818, 794,
	793, 91, 1252, 91, 91, 724, 91, 792, 1108, 91,
	791, 91, 91, 283, 334, 790, 283, 283, 789, 91,
	91, 718, 1252, 748, 719, 720, 788, 605, 805, 806,
	787, 1267, 778, 606, 829, 868, 329, 776, 49, 809,
	853, 46, 853, 702, 812, 309, 876, 1262, 416, 1621,
	1363, 1362, 385, 1491, 504, 66, 1136, 366, 912, 51,
	813, 335, 604, 1297, 814, 840, 842, 336, 1296, 1192,
	816, 381, 367, 785, 1508, 893, 1247, 851, 749, 1403,
	1043, 1233, 804, 1131, 1684, 1730, 52, 1477, 280, 274,
	1731, 273, 880, 47, 1649, 1146, 731, 268, 845, 48,
	828, 242, 1263, 49, 269, 43, 1321, 71, 70, 605,
	72, 836, 848, 1587, 733, 606, 832, 1586, 854, 882,
	1322, 1302, 1301, 866, 51, 1228, 332, 867, 871, 73,
	875, 877, 878, 857, 68, 732, 781, 67, 1227, 69,
	870, 869, 881, 1247, 1226, 1264, 1265, 1266, 1247, 1225,
	91, 52, 742, 734, 735, 736, 737, 739, 47, 527,
	1022, 528, 91, 91, 48, 1252, 1035, 839, 1194, 1258,
	1259, 1260, 999, 1257, 1254, 1255, 1256, 1248, 1249, 1250,
	1251, 1253, 1648, 46, 364, 738, 1527, 1053, 1261, 731,
	873, 91, 847, 91, 846, 389, 924, 1248, 1249, 1250,
	1251, 1253, 1695, 1091, 460, 1036, 1090, 733, 972, 384,
	351, 57, 421, 277, 1666, 1686, 527, 971, 528, 61,
	55, 365, 604, 1009, 731, 932, 529, 1009, 732, 540,
	748, 1312, 1252, 1576, 747, 1013, 1039, 1252, 1037, 1034,
	1739, 278, 733, 1392, 838, 1705, 1019, 1024, 546, 1027,
	897, 1043, 527, 58, 528, 1730, 818, 1056, 1063, 281,
	1124, 818, 1324, 732, 1072, 62, 56, 1389, 898, 605,
	1084, 1085, 1086, 896, 1133, 606, 289, 1262, 738, 731,
	1319, 1145, 1262, 529, 1093, 749, 91, 91, 91, 1122,
	1023, 938, 91, 507, 1039, 91, 1057, 733, 925, 1039,
	1390, 91, 91, 91, 91, 91, 837, 91, 91, 1697,
	74, 1643, 288, 738, 1706, 91, 533, 91, 732, 529,
	915, 916, 388, 748, 91, 1698, 1147, 1105, 1630, 1058,
	1055, 506, 1263, 91, 91, 91, 1014, 1263, 1103, 997,
	91, 1247, 1250, 1251, 1253, 356, 358, 1745, 457, 334,
	42, 1707, 291, 1033, 290, 1313, 1039, 1126, 1097, 532,
	734, 735, 736, 737, 739, 362, 363, 91, 738, 91,
	91, 91, 63, 54, 91, 26, 60, 59, 749, 1118,
	802, 768, 27, 91, 1738, 1059, 1138, 1119, 1139, 1098,
	91, 530, 91, 938, 1156, 1577, 335, 1236, 547, 1258,
	1259, 1260, 336, 1257, 1254, 1255, 1256, 1248, 1249, 1250,
	1251, 1253, 1248, 1249, 1250, 1251, 1253, 363, 1196, 1134,
	1353, 1187, 1008, 525, 1163, 998, 1137, 290, 287, 291,
	1252, 1704, 1144, 1142, 1149, 1141, 828, 1128, 1153, 1140,
	1155, 1143, 827, 382, 1054, 1148, 1729, 995, 530, 743,
	740, 741, 742, 734, 735, 736, 737, 739, 1743, 1247,
	419, 419, 1737, 1727, 1506, 1124, 910, 375, 1161, 403,
	522, 354, 440, 404, 43, 1262, 1165, 1164, 1186, 1166,
	1190, 352, 1615, 1209, 530, 1581, 960, 1211, 734, 735,
	736, 737, 739, 404, 49, 383, 1430, 1744, 1555, 1580,
	1222, 1223, 809, 89, 812, 1218, 252, 1569, 806, 805,
	291, 1753, 1473, 89, 1746, 51, 1476, 1304, 1102, 996,
	297, 297, 911, 1475, 307, 572, 709, 307, 313, 307,
	1263, 884, 703, 307, 322, 307, 252, 886, 1197, 1272,
	1388, 1195, 52, 1522, 1679, 736, 737, 739, 1252, 47,
	1285, 403, 1516, 887, 1570, 48, 570, 695, 568, 1110,
	1109, 355, 885, 1348, 714, 716, 291, 571, 1347, 91,
	1431, 723, 362, 395, 65, 319, 1432, 318, 1556, 1232,
	288, 1344, 1169, 763, 764, 765, 766, 767, 960, 1046,
	1472, 1752, 770, 1262, 1523, 1308, 91, 1633, 1554, 1277,
	1369, 1474, 1329, 1242, 1256, 1248, 1249, 1250, 1251, 1253,
	76, 91, 783, 91, 731, 91, 825, 717, 1205, 91,
	1280, 1281, 1282, 879, 380, 378, 377, 376, 373, 317,
	1278, 91, 733, 1316, 91, 1318, 1299, 786, 689, 1045,
	91, 604, 1456, 1317, 91, 1306, 91, 1315, 1263, 1303,
	1397, 79, 1323, 732, 1357, 1158, 1320, 913, 909, 872,
	1346, 1328, 551, 1349, 548, 1175, 543, 534, 531, 708,
	1330, 84, 1331, 1588, 1118, 919, 80, 406, 1731, 819,
	1178, 1377, 592, 301, 369, 1334, 1336, 828, 605, 1341,
	1351, 1590, 844, 843, 606, 1350, 1176, 91, 81, 1385,
	1386, 1387, 828, 738, 1325, 1356, 1354, 1355, 841, 1598,
	1645, 3, 1672, 83, 1345, 410, 252, 252, 731, 1257,
	1254, 1255, 1256, 1248, 1249, 1250, 1251, 1253, 731, 920,
	75, 1382, 1664, 1189, 1406, 856, 733, 1391, 1393, 1394,
	407, 1410, 725, 1750, 1435, 1408, 302, 89, 748, 307,
	565, 252, 1751, 396, 1177, 1445, 370, 732, 1404, 1247,
	86, 731, 91, 91, 91, 310, 938, 732, 297, 1529,
	91, 91, 1450, 1441, 1395, 267, 91, 1438, 91, 307,
	91, 91, 91, 91, 890, 889, 959, 1437, 91, 1364,
	307, 307, 307, 1292, 541, 82, 1470, 1471, 91, 91,
	938, 1092, 1089, 749, 1088, 1451, 1040, 938, 91, 91,
	1455, 891, 91, 270, 271, 1498, 1510, 1717, 1505, 1498,
	1541, 91, 91, 1396, 307, 561, 1497, 561, 1499, 1488,
	1497, 1159, 1499, 892, 1490, 779, 85, 1511, 1512, 938,
	276, 1517, 1504, 1575, 77, 688, 252, 1525, 561, 252,
	252, 252, 1484, 252, 1465, 1005, 1534, 252, 374, 1548,
	1526, 1696, 89, 91, 1235, 1629, 1608, 1003, 706, 1044,
	784, 25, 1495, 1203, 743, 740, 741, 742, 734, 735,
	736, 737, 739, 433, 1466, 1201, 297, 1457, 959, 727,
	419, 1305, 904, 903, 607, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 91, 593, 91,
	1553, 91, 582, 456, 379, 576, 585, 1052, 91, 1001,
	938, 1000, 508, 458, 935, 1006, 937, 459, 936, 810,
	446, 933, 330, 1518, 860, 1568, 1041, 91, 1231, 1199,
	1050, 1565, 1061, 1204, 1071, 1073, 1078, 1081, 1082, 1083,
	782, 960, 1461, 1566, 1462, 432, 438, 91, 437, 91,
	1020, 1583, 1599, 1589, 429, 1520, 1179, 91, 359, 1602,
	1498, 246, 247, 522, 1127, 91, 307, 1464, 1591, 1485,
	1597, 1497, 914, 1499, 1467, 960, 713, 1584, 1585, 1314,
	833, 1611, 960, 279, 307, 1064, 1614, 307, 849, 1244,
	1002, 1619, 1125, 307, 1070, 864, 865, 1004, 307, 1062,
	1628, 307, 1060, 252, 252, 962, 1051, 391, 1200, 520,
	1626, 561, 727, 861, 960, 1202, 371, 938, 937, 926,
	1188, 415, 1501, 1635, 721, 1710, 300, 91, 91, 1463,
	299, 91, 900, 428, 368, 1638, 569, 883, 1652, 91,
	272, 1640, 1644, 961, 1311, 91, 1683, 50, 19, 17,
	1661, 1654, 1658, 91, 1656, 1498, 16, 1653, 723, 604,
	934, 818, 15, 1655, 13, 12, 1497, 1660, 1499, 11,
	18, 291, 1668, 1162, 9, 24, 938, 1667, 23, 1665,
	22, 2, 91, 91, 91, 305, 91, 1671, 305, 1,
	316, 0, 0, 0, 305, 0, 316, 938, 1687, 0,
	1674, 0, 0, 1690, 91, 960, 605, 962, 0, 1681,
	1685, 0, 606, 0, 1688, 0, 1689, 1693, 0, 1692,
	0, 1691, 1498, 1699, 0, 0, 0, 91, 0, 0,
	0, 0, 1247, 1497, 1171, 1499, 1193, 0, 1713, 0,
	1198, 0, 895, 1714, 0, 961, 0, 731, 1725, 0,
	1728, 1726, 91, 0, 307, 833, 1732, 0, 0, 1212,
	1735, 1734, 934, 1736, 0, 733, 0, 595, 594, 1221,
	588, 583, 0, 79, 938, 1748, 1747, 1261, 1733, 1175,
	0, 0, 0, 307, 1234, 252, 732, 0, 1239, 0,
	0, 0, 1754, 84, 1178, 0, 0, 0, 80, 0,
	1064, 1064, 0, 0, 1173, 0, 0, 0, 0, 770,
	1176, 0, 960, 0, 0, 1078, 1078, 1078, 0, 0,
	81, 1252, 0, 0, 1174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 738, 1300, 0, 0,
	598, 959, 0, 0, 0, 0, 1207, 1208, 1307, 0,
	0, 0, 0, 1171, 0, 0, 0, 0, 1064, 1064,
	1064, 0, 0, 0, 0, 419, 1262, 0, 1177, 0,
	0, 960, 0, 0, 419, 959, 0, 522, 307, 1100,
	1101, 748, 959, 0, 833, 0, 0, 1106, 0, 600,
	0, 0, 960, 1111, 1112, 1114, 1116, 1117, 1175, 1120,
	1121, 0, 0, 599, 1269, 1270, 1271, 307, 0, 1132,
	305, 0, 0, 1178, 959, 0, 307, 82, 0, 0,
	0, 1263, 0, 1173, 0, 307, 895, 561, 0, 1176,
	0, 0, 895, 1365, 1247, 1366, 749, 0, 0, 0,
	512, 0, 0, 1174, 0, 0, 1371, 0, 0, 0,
	0, 305, 538, 538, 1381, 0, 0, 1515, 85, 706,
	1381, 706, 252, 307, 0, 0, 1160, 0, 0, 960,
	0, 0, 0, 0, 1398, 1167, 0, 0, 0, 0,
	0, 0, 1184, 1407, 307, 305, 1409, 1177, 1064, 1064,
	0, 937, 1257, 1254, 1255, 1256, 1248, 1249, 1250, 1251,
	1253, 0, 0, 0, 0, 959, 0, 0, 740, 741,
	742, 734, 735, 736, 737, 739, 0, 0, 1439, 1440,
	0, 0, 0, 1252, 0, 937, 0, 1446, 1447, 1448,
	0, 0, 937, 0, 1367, 1368, 0, 589, 584, 0,
	1514, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
	0, 1064, 0, 0, 937, 419, 0, 0, 1262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 434, 32, 1509, 0, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 0, 1433, 0, 0,
	1533, 32, 959, 0, 962, 1537, 1538, 0, 961, 0,
	1540, 962, 0, 1263, 0, 1542, 0, 284, 0, 0,
	292, 0, 0, 0, 0, 934, 0, 32, 0, 0,
	1547, 0, 0, 0, 1550, 0, 0, 817, 0, 292,
	0, 0, 961, 962, 0, 937, 0, 0, 0, 961,
	0, 727, 0, 0, 0, 305, 0, 0, 316, 934,
	0, 959, 0, 254, 862, 1558, 934, 0, 0, 316,
	0, 0, 316, 1465, 0, 1460, 0, 265, 307, 0,
	0, 961, 959, 1458, 0, 1254, 1255, 1256, 1248, 1249,
	1250, 1251, 1253, 1333, 0, 833, 0, 706, 934, 0,
	0, 1340, 0, 1466, 0, 0, 1582, 0, 0, 0,
	0, 256, 0, 307, 0, 0, 307, 0, 266, 0,
	0, 0, 1184, 0, 0, 0, 1359, 1600, 1184, 0,
	255, 257, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1613, 0, 0, 1064,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 1623, 1624, 0, 0, 258, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 259, 260, 0, 1401,
	0, 1461, 0, 1462, 0, 0, 0, 0, 0, 934,
	0, 261, 1637, 0, 0, 1572, 0, 0, 0, 0,
	0, 0, 1639, 0, 0, 0, 1464, 0, 0, 0,
	0, 937, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 305, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 1064, 0, 0,
	0, 962, 0, 0, 1453, 1454, 833, 0, 0, 0,
	0, 0, 727, 727, 305, 0, 0, 0, 1478, 0,
	1479, 0, 307, 1481, 1482, 1483, 0, 284, 1463, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 1494, 961,
	1503, 833, 1494, 1632, 262, 0, 0, 263, 0, 0,
	307, 307, 264, 0, 307, 0, 934, 0, 0, 0,
	962, 0, 0, 727, 1184, 0, 0, 0, 1247, 937,
	1264, 1265, 1266, 0, 0, 1712, 1064, 0, 0, 0,
	1531, 962, 0, 0, 0, 0, 0, 0, 1724, 1724,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 1549, 0, 0, 0, 1099,
	0, 0, 1724, 1261, 0, 934, 0, 0, 0, 961,
	0, 0, 1673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 0, 1130, 284,
	0, 1724, 284, 284, 0, 0, 0, 1130, 0, 0,
	0, 0, 0, 0, 0, 0, 305, 1252, 962, 833,
	0, 1567, 0, 252, 0, 769, 0, 0, 0, 773,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1267, 0, 0, 727,
	0, 0, 0, 0, 1157, 0, 961, 0, 0, 0,
	0, 0, 1262, 1494, 0, 0, 0, 0, 0, 307,
	0, 1610, 0, 934, 0, 305, 0, 0, 0, 307,
	0, 731, 0, 750, 751, 752, 0, 727, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 0, 733,
	0, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 750, 751, 752, 1263, 0, 0,
	732, 0, 0, 0, 753, 0, 747, 0, 0, 0,
	733, 32, 759, 32, 0, 0, 0, 0, 1247, 0,
	1264, 1265, 1266, 0, 0, 0, 32, 0, 0, 1646,
	1647, 732, 0, 1651, 0, 0, 0, 747, 1494, 0,
	0, 252, 0, 0, 0, 0, 0, 1503, 0, 0,
	738, 0, 0, 0, 0, 727, 0, 0, 0, 0,
	0, 0, 0, 1261, 1258, 1259, 1260, 760, 1257, 1254,
	1255, 1256, 1248, 1249, 1250, 1251, 1253, 0, 0, 758,
	0, 738, 0, 0, 1680, 727, 307, 0, 252, 755,
	0, 0, 0, 0, 0, 748, 0, 0, 760, 0,
	0, 0, 0, 0, 0, 1494, 1610, 1252, 0, 0,
	758, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	755, 0, 0, 0, 1268, 0, 748, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 1267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	749, 0, 1262, 0, 727, 0, 0, 0, 0, 862,
	0, 757, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 305, 0, 0, 305, 0, 0,
	0, 0, 0, 0, 929, 0, 0, 1263, 0, 0,
	0, 0, 0, 0, 756, 0, 0, 744, 745, 746,
	0, 743, 740, 741, 742, 734, 735, 736, 737, 739,
	0, 0, 0, 1095, 1011, 0, 0, 21, 0, 0,
	0, 0, 1096, 0, 0, 756, 0, 35, 744, 745,
	746, 0, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 1561,
	0, 37, 0, 0, 1258, 1259, 1260, 42, 1257, 1254,
	1255, 1256, 1248, 1249, 1250, 1251, 1253, 0, 731, 0,
	750, 751, 752, 0, 0, 0, 0, 0, 0, 0,
	753, 0, 26, 0, 0, 38, 733, 0, 759, 27,
	0, 731, 0, 750, 751, 752, 0, 0, 0, 0,
	0, 0, 0, 753, 28, 0, 0, 732, 292, 733,
	0, 759, 0, 747, 731, 0, 750, 751, 752, 0,
	0, 0, 0, 1480, 0, 0, 753, 0, 0, 0,
	732, 1489, 733, 0, 759, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 305, 305, 732, 0, 305, 0, 738, 0, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 760, 32, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 1185, 758, 0, 40, 0,
	0, 29, 0, 39, 0, 0, 755, 760, 30, 0,
	0, 49, 748, 738, 0, 0, 33, 34, 0, 758,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 755,
	760, 0, 51, 0, 754, 748, 0, 0, 0, 0,
	0, 0, 758, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 755, 0, 0, 0, 0, 754, 748, 52,
	0, 0, 1011, 0, 0, 0, 47, 749, 0, 0,
	0, 0, 48, 0, 0, 0, 769, 0, 757, 0,
	754, 1573, 0, 0, 0, 0, 0, 0, 0, 0,
	749, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	1607, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	305, 756, 769, 0, 744, 745, 746, 0, 743, 740,
	741, 742, 734, 735, 736, 737, 739, 0, 0, 0,
	0, 0, 0, 0, 756, 1288, 0, 744, 745, 746,
	0, 743, 740, 741, 742, 734, 735, 736, 737, 739,
	0, 0, 0, 0, 0, 0, 0, 756, 1287, 0,
	744, 745, 746, 0, 743, 740, 741, 742, 734, 735,
	736, 737, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1682, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 443, 444,
	441, 442, 430, 0, 0, 0, 0, 0, 0, 93,
	94, 0, 95, 0, 0, 0, 0, 436, 0, 0,
	862, 96, 97, 0, 483, 197, 484, 98, 485, 486,
	0, 99, 201, 202, 100, 451, 469, 487, 488, 205,
	0, 479, 0, 462, 0, 101, 102, 103, 0, 104,
	0, 105, 0, 339, 106, 1723, 0, 463, 465, 0,
	464, 466, 108, 109, 110, 111, 489, 112, 490, 491,
	0, 0, 113, 0, 0, 0, 482, 115, 0, 116,
	0, 0, 0, 435, 117, 470, 449, 0, 0, 118,
	119, 492, 0, 120, 0, 121, 0, 0, 340, 0,
	122, 480, 0, 214, 0, 123, 124, 476, 478, 0,
	32, 125, 0, 341, 126, 493, 494, 495, 0, 461,
	0, 0, 127, 343, 128, 129, 0, 0, 481, 344,
	130, 929, 929, 131, 0, 929, 132, 0, 133, 134,
	135, 136, 137, 346, 138, 139, 142, 140, 425, 141,
	450, 477, 143, 496, 144, 145, 0, 0, 0, 0,
	0, 146, 224, 347, 147, 348, 471, 148, 149, 0,
	472, 150, 227, 0, 151, 152, 153, 497, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 349, 161, 162,
	439, 163, 0, 253, 164, 165, 0, 230, 166, 167,
	467, 168, 169, 0, 170, 498, 232, 171, 0, 172,
	173, 175, 499, 174, 473, 0, 176, 0, 177, 178,
	0, 235, 500, 501, 0, 0, 179, 474, 475, 448,
	180, 181, 1722, 183, 0, 0, 184, 185, 186, 468,
	0, 187, 188, 189, 240, 502, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 422, 423, 0,
	0, 0, 0, 424, 0, 1592, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 0, 0, 0,
	929, 0, 0, 0, 0, 93, 94, 608, 95, 609,
	610, 611, 612, 613, 614, 615, 616, 96, 97, 195,
	196, 197, 198, 98, 199, 200, 617, 99, 201, 202,
	100, 618, 619, 203, 204, 205, 620, 206, 621, 338,
	622, 101, 102, 103, 0, 104, 623, 105, 624, 339,
	106, 107, 625, 626, 627, 628, 629, 630, 108, 109,
	110, 111, 207, 112, 208, 209, 631, 632, 113, 633,
	634, 635, 114, 115, 636, 116, 637, 769, 638, 210,
	117, 211, 639, 640, 641, 118, 119, 212, 0, 120,
	642, 121, 643, 644, 340, 645, 122, 213, 646, 214,
	647, 123, 124, 215, 216, 648, 649, 125, 650, 341,
	126, 217, 218, 219, 651, 220, 652, 342, 127, 343,
	128, 129, 653, 654, 221, 344, 130, 345, 655, 131,
	656, 657, 132, 0, 133, 134, 135, 136, 137, 346,
	138, 139, 142, 140, 658, 141, 659, 222, 143, 223,
	144, 145, 660, 661, 662, 663, 664, 146, 224, 347,
	147, 348, 225, 148, 149, 665, 226, 150, 227, 666,
	151, 152, 153, 228, 154, 155, 667, 157, 158, 156,
	159, 668, 160, 349, 161, 162, 229, 163, 0, 253,
	164, 165, 669, 230, 166, 167, 670, 168, 169, 350,
	170, 231, 232, 171, 671, 172, 173, 175, 233, 174,
	234, 672, 176, 673, 177, 178, 674, 235, 236, 237,
	675, 676, 179, 238, 239, 677, 180, 181, 182, 183,
	678, 679, 184, 185, 186, 680, 681, 187, 188, 189,
	240, 241, 682, 190, 683, 684, 685, 686, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1358, 93,
	94, 608, 95, 609, 610, 611, 612, 613, 614, 615,
	616, 96, 97, 195, 196, 197, 198, 98, 199, 200,
	617, 99, 201, 202, 100, 618, 619, 203, 204, 205,
	620, 206, 621, 338, 622, 101, 102, 103, 0, 104,
	623, 105, 624, 339, 106, 107, 625, 626, 627, 628,
	629, 630, 108, 109, 110, 111, 207, 112, 208, 209,
	631, 632, 113, 633, 634, 635, 114, 115, 636, 116,
	637, 0, 638, 210, 117, 211, 639, 640, 641, 118,
	119, 212, 0, 120, 642, 121, 643, 644, 340, 645,
	122, 213, 646, 214, 647, 123, 124, 215, 216, 648,
	649, 125, 650, 341, 126, 217, 218, 219, 651, 220,
	652, 342, 127, 343, 128, 129, 653, 654, 221, 344,
	130, 345, 655, 131, 656, 657, 132, 0, 133, 134,
	135, 136, 137, 346, 138, 139, 142, 140, 658, 141,
	659, 222, 143, 223, 144, 145, 660, 661, 662, 663,
	664, 146, 224, 347, 147, 348, 225, 148, 149, 665,
	226, 150, 227, 666, 151, 152, 153, 228, 154, 155,
	667, 157, 158, 156, 159, 668, 160, 349, 161, 162,
	229, 163, 0, 253, 164, 165, 669, 230, 166, 167,
	670, 168, 169, 350, 170, 231, 232, 171, 671, 172,
	173, 175, 233, 174, 234, 672, 176, 673, 177, 178,
	674, 235, 236, 237, 675, 676, 179, 238, 239, 677,
	180, 181, 182, 183, 678, 679, 184, 185, 186, 680,
	681, 187, 188, 189, 240, 241, 682, 190, 683, 684,
	685, 686, 191, 192, 193, 194, 0, 0, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 821,
	93, 94, 608, 95, 609, 610, 611, 612, 613, 614,
	615, 616, 96, 97, 195, 196, 197, 198, 98, 199,
	200, 617, 99, 201, 202, 100, 618, 619, 203, 204,
	205, 620, 206, 621, 338, 622, 101, 102, 103, 0,
	104, 623, 105, 624, 339, 106, 107, 625, 626, 627,
	628, 629, 630, 108, 109, 110, 111, 207, 112, 208,
	209, 631, 632, 113, 633, 634, 635, 114, 115, 636,
	116, 637, 0, 638, 210, 117, 211, 639, 640, 641,
	118, 119, 212, 0, 120, 642, 121, 643, 644, 340,
	645, 122, 213, 646, 214, 647, 123, 124, 215, 216,
	648, 649, 125, 650, 341, 126, 217, 218, 219, 651,
	220, 652, 342, 127, 343, 128, 129, 653, 654, 221,
	344, 130, 345, 655, 131, 656, 657, 132, 0, 133,
	134, 135, 136, 137, 346, 138, 139, 142, 140, 658,
	141, 659, 222, 143, 223, 144, 145, 660, 661, 662,
	663, 664, 146, 224, 347, 147, 348, 225, 148, 149,
	665, 226, 150, 227, 666, 151, 152, 153, 228, 154,
	155, 667, 157, 158, 156, 159, 668, 160, 349, 161,
	162, 229, 163, 0, 253, 164, 165, 669, 230, 166,
	167, 670, 168, 169, 350, 170, 231, 232, 171, 671,
	172, 173, 175, 233, 174, 234, 672, 176, 673, 177,
	178, 674, 235, 236, 237, 675, 676, 179, 238, 239,
	677, 180, 181, 182, 183, 678, 679, 184, 185, 186,
	680, 681, 187, 188, 189, 240, 241, 682, 190, 683,
	684, 685, 686, 191, 192, 193, 194, 454, 443, 444,
	441, 442, 430, 0, 0, 0, 0, 0, 0, 93,
	94, 1029, 95, 0, 0, 0, 0, 436, 0, 0,
	0, 96, 97, 195, 483, 197, 484, 98, 485, 486,
	0, 99, 201, 202, 100, 451, 469, 487, 488, 205,
	0, 479, 0, 462, 0, 101, 102, 103, 0, 104,
	0, 105, 0, 339, 106, 107, 0, 463, 465, 0,
	464, 466, 108, 109, 110, 111, 489, 112, 490, 491,
	0, 0, 113, 0, 1030, 0, 482, 115, 0, 116,
	0, 0, 0, 435, 117, 470, 449, 0, 0, 118,
	119, 492, 0, 120, 0, 121, 0, 0, 340, 0,
	122, 480, 0, 214, 0, 123, 124, 476, 478, 0,
	0, 125, 0, 341, 126, 493, 494, 495, 0, 461,
	0, 342, 127, 343, 128, 129, 0, 0, 481, 344,
	130, 345, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 346, 138, 139, 142, 140, 425, 141,
	450, 477, 143, 496, 144, 145, 0, 0, 0, 0,
	0, 146, 224, 347, 147, 348, 471, 148, 149, 0,
	472, 150, 227, 0, 151, 152, 153, 497, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 349, 161, 162,
	439, 163, 0, 253, 164, 165, 0, 230, 166, 167,
	467, 168, 169, 350, 170, 498, 232, 171, 0, 172,
	173, 175, 499, 174, 473, 0, 176, 0, 177, 178,
	0, 235, 500, 501, 0, 0, 179, 474, 475, 448,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 468,
	0, 187, 188, 189, 240, 502, 1028, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 426, 0, 0, 454,
	443, 444, 441, 442, 430, 0, 0, 422, 423, 1031,
	0, 93, 94, 424, 95, 0, 431, 1026, 0, 436,
	0, 0, 0, 96, 97, 195, 483, 197, 484, 98,
	485, 486, 0, 99, 201, 202, 100, 451, 469, 487,
	488, 205, 0, 479, 0, 462, 0, 101, 102, 103,
	0, 104, 0, 105, 0, 339, 106, 107, 0, 463,
	465, 0, 464, 466, 108, 109, 110, 111, 489, 112,
	490, 491, 523, 0, 113, 0, 0, 0, 482, 115,
	0, 116, 0, 0, 0, 435, 117, 470, 449, 0,
	0, 118, 119, 492, 0, 120, 0, 121, 0, 0,
	340, 0, 122, 480, 0, 214, 0, 123, 124, 476,
	478, 0, 0, 125, 0, 341, 126, 493, 494, 495,
	0, 461, 0, 342, 127, 343, 128, 129, 0, 0,
	481, 344, 130, 345, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 346, 138, 139, 142, 140,
	425, 141, 450, 477, 143, 496, 144, 145, 0, 0,
	0, 0, 0, 146, 224, 347, 147, 348, 471, 148,
	149, 0, 472, 150, 227, 0, 151, 152, 153, 497,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 349,
	161, 162, 439, 163, 0, 253, 164, 165, 49, 230,
	166, 167, 467, 168, 169, 350, 170, 498, 232, 171,
	0, 172, 173, 175, 499, 174, 473, 0, 176, 51,
	177, 178, 0, 235, 500, 501, 0, 0, 179, 474,
	475, 448, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 468, 0, 187, 188, 189, 337, 502, 0, 190,
	0, 0, 0, 47, 191, 192, 193, 194, 426, 48,
	0, 454, 443, 444, 441, 442, 430, 0, 0, 422,
	423, 0, 0, 93, 94, 424, 95, 0, 431, 0,
	0, 436, 0, 0, 0, 96, 97, 195, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 0, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 425, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 439, 163, 0, 253, 164, 165,
	49, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 51, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 337, 502,
	0, 190, 0, 0, 0, 47, 191, 192, 193, 194,
	426, 48, 0, 454, 443, 444, 441, 442, 430, 0,
	0, 422, 423, 0, 0, 93, 94, 424, 95, 0,
	431, 0, 0, 436, 0, 0, 0, 96, 97, 195,
	483, 197, 484, 98, 485, 486, 1074, 99, 201, 202,
	100, 451, 469, 487, 488, 205, 0, 479, 0, 462,
	0, 101, 102, 103, 0, 104, 0, 105, 0, 339,
	106, 107, 0, 463, 465, 0, 464, 466, 108, 109,
	110, 111, 489, 112, 490, 491, 0, 0, 113, 0,
	0, 0, 482, 115, 0, 116, 0, 0, 0, 435,
	117, 470, 449, 0, 0, 118, 119, 492, 0, 120,
	0, 121, 0, 1079, 340, 0, 122, 480, 0, 214,
	0, 123, 124, 476, 478, 0, 0, 125, 0, 341,
	126, 493, 494, 495, 0, 461, 0, 342, 127, 343,
	128, 129, 0, 1075, 481, 344, 130, 345, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 346,
	138, 139, 142, 140, 425, 141, 450, 477, 143, 496,
	144, 145, 0, 0, 0, 0, 0, 146, 224, 347,
	147, 348, 471, 148, 149, 0, 472, 150, 227, 0,
	151, 152, 153, 497, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 349, 161, 162, 439, 163, 0, 253,
	164, 165, 0, 230, 166, 167, 467, 168, 169, 350,
	170, 498, 232, 171, 0, 172, 173, 175, 499, 174,
	473, 0, 176, 0, 177, 178, 0, 235, 500, 501,
	0, 1076, 179, 474, 475, 448, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 468, 0, 187, 188, 189,
	240, 502, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 426, 454, 443, 444, 441, 442, 430, 0,
	0, 0, 0, 422, 423, 93, 94, 0, 95, 424,
	0, 0, 431, 436, 0, 0, 0, 96, 97, 195,
	483, 197, 484, 98, 485, 486, 0, 99, 201, 202,
	100, 451, 469, 487, 488, 205, 0, 479, 0, 462,
	0, 101, 102, 103, 0, 104, 0, 105, 0, 339,
	106, 107, 0, 463, 465, 0, 464, 466, 108, 109,
	110, 111, 489, 112, 490, 491, 0, 0, 113, 0,
	0, 0, 482, 115, 0, 116, 0, 0, 0, 435,
	117, 470, 449, 0, 0, 118, 119, 492, 0, 120,
	0, 121, 0, 0, 340, 0, 122, 480, 0, 214,
	0, 123, 124, 476, 478, 0, 0, 125, 0, 341,
	126, 493, 494, 495, 0, 461, 0, 342, 127, 343,
	128, 129, 0, 0, 481, 344, 130, 345, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 346,
	138, 139, 142, 140, 425, 141, 450, 477, 143, 496,
	144, 145, 0, 0, 0, 0, 0, 146, 224, 347,
	147, 348, 471, 148, 149, 0, 472, 150, 227, 0,
	151, 152, 153, 497, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 349, 161, 162, 439, 163, 0, 253,
	164, 165, 0, 230, 166, 167, 467, 168, 169, 350,
	170, 498, 232, 171, 0, 172, 173, 175, 499, 174,
	473, 0, 176, 0, 177, 178, 0, 235, 500, 501,
	0, 0, 179, 474, 475, 448, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 468, 0, 187, 188, 189,
	240, 502, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 426, 0, 0, 454, 443, 444, 441, 442,
	430, 0, 0, 422, 423, 0, 0, 93, 94, 424,
	95, 0, 431, 1436, 0, 436, 0, 0, 0, 96,
	97, 195, 483, 197, 484, 98, 485, 486, 0, 99,
	201, 202, 100, 451, 469, 487, 488, 205, 0, 479,
	0, 462, 0, 101, 102, 103, 0, 104, 0, 105,
	0, 339, 106, 107, 0, 463, 465, 0, 464, 466,
	108, 109, 110, 111, 489, 112, 490, 491, 0, 0,
	113, 0, 0, 0, 482, 115, 0, 116, 0, 0,
	0, 435, 117, 470, 449, 0, 0, 118, 119, 492,
	0, 120, 0, 121, 0, 0, 340, 0, 122, 480,
	0, 214, 0, 123, 124, 476, 478, 0, 0, 125,
	0, 341, 126, 493, 494, 495, 0, 461, 0, 342,
	127, 343, 128, 129, 0, 0, 481, 344, 130, 345,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 346, 138, 139, 142, 140, 425, 141, 450, 477,
	143, 496, 144, 145, 0, 0, 0, 0, 0, 146,
	224, 347, 147, 348, 471, 148, 149, 0, 472, 150,
	227, 0, 151, 152, 153, 497, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 349, 161, 162, 439, 163,
	0, 253, 164, 165, 0, 230, 166, 167, 467, 168,
	169, 350, 170, 498, 232, 171, 0, 172, 173, 175,
	499, 174, 473, 0, 176, 0, 177, 178, 0, 235,
	500, 501, 0, 0, 179, 474, 475, 448, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 468, 0, 187,
	188, 189, 240, 502, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 426, 0, 0, 454, 443, 444,
	441, 442, 430, 0, 0, 422, 423, 0, 0, 93,
	94, 424, 95, 0, 431, 1378, 0, 436, 0, 0,
	0, 96, 97, 195, 483, 197, 484, 98, 485, 486,
	0, 99, 201, 202, 100, 451, 469, 487, 488, 205,
	0, 479, 0, 462, 0, 101, 102, 103, 0, 104,
	0, 105, 0, 339, 106, 107, 0, 463, 465, 0,
	464, 466, 108, 109, 110, 111, 489, 112, 490, 491,
	0, 0, 113, 0, 0, 0, 482, 115, 0, 116,
	0, 0, 0, 435, 117, 470, 449, 0, 0, 118,
	119, 492, 0, 120, 0, 121, 0, 0, 340, 0,
	122, 480, 0, 214, 0, 123, 124, 476, 478, 0,
	0, 125, 0, 341, 126, 493, 494, 495, 0, 461,
	0, 342, 127, 343, 128, 129, 0, 0, 481, 344,
	130, 345, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 346, 138, 139, 142, 140, 425, 141,
	450, 477, 143, 496, 144, 145, 0, 0, 0, 0,
	0, 146, 224, 347, 147, 348, 471, 148, 149, 0,
	472, 150, 227, 0, 151, 152, 153, 497, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 349, 161, 162,
	439, 163, 0, 253, 164, 165, 0, 230, 166, 167,
	467, 168, 169, 350, 170, 498, 232, 171, 0, 172,
	173, 175, 499, 174, 473, 0, 176, 0, 177, 178,
	0, 235, 500, 501, 0, 0, 179, 474, 475, 448,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 468,
	0, 187, 188, 189, 240, 502, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 426, 0, 0, 454,
	443, 444, 441, 442, 430, 0, 0, 422, 423, 0,
	0, 93, 94, 424, 95, 0, 431, 1025, 0, 436,
	0, 0, 0, 96, 97, 195, 483, 197, 484, 98,
	485, 486, 0, 99, 201, 202, 100, 451, 469, 487,
	488, 205, 0, 479, 0, 462, 0, 101, 102, 103,
	0, 104, 0, 105, 0, 339, 106, 107, 0, 463,
	465, 0, 464, 466, 108, 109, 110, 111, 489, 112,
	490, 491, 0, 0, 113, 0, 0, 0, 482, 115,
	0, 116, 0, 0, 0, 435, 117, 470, 449, 0,
	0, 118, 119, 492, 0, 120, 0, 121, 0, 0,
	340, 0, 122, 480, 0, 214, 0, 123, 124, 476,
	478, 0, 0, 125, 0, 341, 126, 493, 494, 495,
	0, 461, 0, 342, 127, 343, 128, 129, 0, 0,
	481, 344, 130, 345, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 346, 138, 139, 142, 140,
	425, 141, 450, 477, 143, 496, 144, 145, 0, 0,
	0, 0, 0, 146, 224, 347, 147, 348, 471, 148,
	149, 0, 472, 150, 227, 0, 151, 152, 153, 497,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 349,
	161, 162, 439, 163, 0, 253, 164, 165, 0, 230,
	166, 167, 467, 168, 169, 350, 170, 498, 232, 171,
	0, 172, 173, 175, 499, 174, 473, 0, 176, 0,
	177, 178, 0, 235, 500, 501, 0, 0, 179, 474,
	475, 448, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 468, 0, 187, 188, 189, 240, 502, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 426, 454,
	443, 444, 441, 442, 430, 0, 0, 0, 0, 422,
	423, 93, 94, 0, 95, 424, 775, 1021, 431, 436,
	0, 0, 0, 96, 97, 195, 483, 197, 484, 98,
	485, 486, 0, 99, 201, 202, 100, 451, 469, 487,
	488, 205, 0, 479, 0, 462, 0, 101, 102, 103,
	0, 104, 0, 105, 0, 339, 106, 107, 0, 463,
	465, 0, 464, 466, 108, 109, 110, 111, 489, 112,
	490, 491, 0, 0, 113, 0, 0, 0, 482, 115,
	0, 116, 0, 0, 0, 435, 117, 470, 449, 0,
	0, 118, 119, 492, 0, 120, 0, 121, 0, 0,
	340, 0, 122, 480, 0, 214, 0, 123, 124, 476,
	478, 0, 0, 125, 0, 341, 126, 493, 494, 495,
	0, 461, 0, 342, 127, 343, 128, 129, 0, 0,
	481, 344, 130, 345, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 346, 138, 139, 142, 140,
	425, 141, 450, 477, 143, 496, 144, 145, 0, 0,
	0, 0, 0, 146, 224, 347, 147, 348, 471, 148,
	149, 0, 472, 150, 227, 0, 151, 152, 153, 497,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 349,
	161, 162, 439, 163, 0, 253, 164, 165, 0, 230,
	166, 167, 467, 168, 169, 350, 170, 498, 232, 171,
	0, 172, 173, 175, 499, 174, 473, 0, 176, 0,
	177, 178, 0, 235, 500, 501, 0, 0, 179, 474,
	475, 448, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 468, 0, 187, 188, 189, 240, 502, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 426, 0,
	0, 454, 443, 444, 441, 442, 430, 0, 0, 422,
	423, 420, 0, 93, 94, 424, 95, 0, 431, 0,
	0, 436, 0, 0, 0, 96, 97, 195, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 0, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 425, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 439, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 502,
	1384, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	426, 454, 443, 444, 441, 442, 430, 0, 0, 0,
	0, 422, 423, 93, 94, 0, 95, 424, 0, 0,
	431, 436, 0, 0, 0, 96, 97, 195, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 523, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 425, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 439, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 502,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	426, 454, 443, 444, 441, 442, 430, 0, 0, 0,
	0, 422, 423, 93, 94, 0, 95, 424, 0, 0,
	431, 436, 0, 0, 0, 96, 97, 195, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 0, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 1079, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 425, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 439, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 502,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	426, 454, 443, 444, 441, 442, 430, 0, 0, 0,
	0, 422, 423, 93, 94, 715, 95, 424, 0, 0,
	431, 436, 0, 0, 0, 96, 97, 195, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 0, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 425, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 439, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 502,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	426, 454, 443, 444, 441, 442, 430, 0, 0, 0,
	0, 422, 423, 93, 94, 0, 95, 424, 0, 0,
	431, 436, 0, 0, 0, 96, 97, 195, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 1723,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 0, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 425, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 439, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 1722, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 502,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	426, 454, 443, 444, 441, 442, 430, 0, 0, 0,
	0, 422, 423, 93, 94, 0, 95, 424, 0, 0,
	431, 436, 0, 0, 0, 96, 97, 1721, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 1723,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 0, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 425, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 439, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 1722, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 502,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	426, 454, 443, 444, 441, 442, 430, 0, 0, 0,
	0, 422, 423, 93, 94, 0, 95, 424, 0, 0,
	431, 436, 0, 0, 0, 96, 97, 195, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 0, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 425, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 439, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 502,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	426, 454, 443, 444, 441, 442, 430, 0, 0, 0,
	0, 422, 423, 93, 94, 0, 95, 424, 0, 0,
	431, 436, 0, 0, 0, 96, 97, 195, 483, 197,
	484, 98, 485, 486, 0, 99, 201, 202, 100, 451,
	469, 487, 488, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	489, 112, 490, 491, 0, 0, 113, 0, 0, 0,
	482, 115, 0, 116, 0, 0, 0, 435, 117, 470,
	449, 0, 0, 118, 119, 492, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 493,
	494, 495, 0, 461, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 0, 141, 450, 477, 143, 496, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 497, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 1069, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 498,
	232, 171, 0, 172, 173, 175, 499, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 500, 501, 0, 0,
	179, 474, 475, 448, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 502,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 1066, 93, 94, 0, 95, 1067, 0, 0,
	1068, 0, 0, 0, 0, 96, 97, 195, 196, 197,
	198, 98, 199, 200, 0, 99, 201, 202, 100, 0,
	469, 203, 204, 205, 0, 479, 0, 462, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 463, 465, 0, 464, 466, 108, 109, 110, 111,
	207, 112, 208, 209, 0, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 210, 117, 470,
	0, 0, 0, 118, 119, 212, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 480, 0, 214, 0, 123,
	124, 476, 478, 0, 0, 125, 0, 341, 126, 217,
	218, 219, 0, 220, 0, 342, 127, 343, 128, 129,
	0, 0, 481, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 0, 141, 0, 477, 143, 223, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	471, 148, 149, 0, 472, 150, 227, 0, 151, 152,
	153, 228, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 229, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 467, 168, 169, 350, 170, 231,
	232, 171, 0, 172, 173, 175, 233, 174, 473, 0,
	176, 0, 177, 178, 0, 235, 236, 237, 0, 0,
	179, 474, 475, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 468, 0, 187, 188, 189, 240, 241,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 94, 0, 95, 0, 0, 0, 0,
	1496, 0, 0, 0, 96, 97, 195, 196, 197, 198,
	98, 199, 200, 0, 99, 201, 202, 100, 0, 0,
	203, 204, 205, 0, 206, 0, 338, 0, 101, 102,
	103, 0, 104, 0, 105, 0, 339, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 110, 111, 207,
	112, 208, 209, 0, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 210, 117, 211, 0,
	0, 0, 118, 119, 212, 0, 120, 0, 121, 0,
	0, 340, 0, 122, 213, 0, 214, 0, 123, 124,
	215, 216, 0, 0, 125, 0, 341, 126, 217, 218,
	219, 0, 220, 0, 342, 127, 343, 128, 129, 0,
	0, 221, 344, 130, 345, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 346, 138, 139, 142,
	140, 0, 141, 0, 222, 143, 223, 144, 145, 0,
	0, 0, 0, 0, 146, 224, 347, 147, 348, 225,
	148, 149, 0, 226, 150, 227, 0, 151, 152, 153,
	228, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	349, 161, 162, 229, 163, 0, 253, 164, 165, 49,
	230, 166, 167, 0, 168, 169, 350, 170, 231, 232,
	171, 0, 172, 173, 175, 233, 174, 234, 0, 176,
	51, 177, 178, 0, 235, 236, 237, 0, 0, 179,
	238, 239, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 337, 241, 0,
	190, 0, 0, 0, 47, 191, 192, 193, 194, 0,
	48, 333, 587, 0, 588, 583, 578, 0, 0, 0,
	0, 0, 0, 93, 94, 0, 95, 0, 0, 46,
	0, 0, 0, 0, 0, 96, 97, 195, 196, 197,
	198, 98, 199, 200, 0, 99, 201, 202, 100, 0,
	0, 203, 204, 205, 0, 206, 0, 338, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 110, 111,
	207, 112, 208, 209, 591, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 210, 117, 211,
	580, 0, 0, 118, 119, 212, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 213, 0, 214, 0, 123,
	124, 215, 216, 0, 0, 125, 0, 341, 126, 217,
	218, 219, 0, 220, 0, 342, 127, 343, 128, 129,
	0, 0, 221, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 0, 141, 0, 222, 143, 223, 144, 145,
	0, 581, 0, 0, 0, 146, 224, 347, 147, 348,
	225, 148, 149, 0, 226, 150, 227, 0, 151, 152,
	153, 228, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 229, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 0, 168, 169, 350, 170, 231,
	232, 171, 0, 172, 173, 175, 233, 174, 234, 0,
	176, 0, 177, 178, 0, 235, 236, 237, 0, 0,
	179, 238, 239, 579, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 240, 241,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 333, 587, 0, 588, 583, 578, 0, 0, 0,
	0, 589, 584, 93, 94, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 195, 196, 197,
	198, 98, 199, 200, 0, 99, 201, 202, 100, 0,
	0, 203, 204, 205, 0, 206, 0, 338, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 110, 111,
	207, 112, 208, 209, 574, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 210, 117, 211,
	580, 0, 0, 118, 119, 212, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 213, 0, 214, 0, 123,
	124, 215, 216, 0, 0, 125, 0, 341, 126, 217,
	218, 219, 0, 220, 0, 342, 127, 343, 128, 129,
	0, 0, 221, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 0, 141, 0, 222, 143, 223, 144, 145,
	0, 581, 0, 0, 0, 146, 224, 347, 147, 348,
	225, 148, 149, 0, 226, 150, 227, 0, 151, 152,
	153, 228, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 229, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 0, 168, 169, 350, 170, 231,
	232, 171, 0, 172, 173, 175, 233, 174, 234, 0,
	176, 0, 177, 178, 0, 235, 236, 237, 0, 0,
	179, 238, 239, 579, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 240, 241,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 333, 587, 0, 588, 583, 578, 0, 0, 0,
	0, 589, 584, 93, 94, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 195, 196, 197,
	198, 98, 199, 200, 0, 99, 201, 202, 100, 0,
	0, 203, 204, 205, 0, 206, 0, 338, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 110, 111,
	207, 112, 208, 209, 0, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 210, 117, 211,
	580, 0, 0, 118, 119, 212, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 213, 0, 214, 0, 123,
	124, 215, 216, 0, 0, 125, 0, 341, 126, 217,
	218, 219, 0, 220, 0, 342, 127, 343, 128, 129,
	0, 0, 221, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 0, 141, 0, 222, 143, 223, 144, 145,
	0, 581, 0, 0, 0, 146, 224, 347, 147, 348,
	225, 148, 149, 0, 226, 150, 227, 0, 151, 152,
	153, 228, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 229, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 0, 168, 169, 350, 170, 231,
	232, 171, 0, 172, 173, 175, 233, 174, 234, 0,
	176, 0, 177, 178, 0, 235, 236, 237, 0, 0,
	179, 238, 239, 579, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 240, 241,
	90, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 93, 94, 0, 95, 0, 0, 0, 0,
	0, 589, 584, 0, 96, 97, 195, 196, 197, 198,
	98, 199, 200, 0, 99, 201, 202, 100, 0, 0,
	203, 204, 205, 0, 206, 0, 0, 0, 101, 102,
	103, 0, 104, 0, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 110, 111, 207,
	112, 208, 209, 0, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 210, 117, 211, 0,
	0, 0, 118, 119, 212, 0, 120, 0, 121, 0,
	0, 0, 0, 122, 213, 0, 214, 0, 123, 124,
	215, 216, 0, 0, 125, 0, 0, 126, 217, 218,
	219, 0, 220, 0, 0, 127, 0, 128, 129, 0,
	0, 221, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 222, 143, 223, 144, 145, 0,
	0, 306, 0, 0, 146, 224, 0, 147, 0, 225,
	148, 149, 0, 226, 150, 227, 0, 151, 152, 153,
	228, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	0, 161, 162, 229, 163, 0, 253, 164, 165, 49,
	230, 166, 167, 0, 168, 169, 0, 170, 231, 232,
	171, 0, 172, 173, 175, 233, 174, 234, 0, 176,
	51, 177, 178, 0, 235, 236, 237, 0, 0, 179,
	238, 239, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 337, 241, 0,
	190, 0, 0, 0, 47, 191, 192, 193, 194, 90,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 94, 0, 95, 0, 0, 0, 0, 931,
	0, 0, 0, 96, 97, 195, 196, 197, 198, 98,
	199, 200, 0, 99, 201, 202, 100, 0, 0, 203,
	204, 205, 0, 206, 0, 0, 0, 101, 102, 103,
	0, 104, 0, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 110, 111, 207, 112,
	208, 209, 0, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 210, 117, 211, 0, 0,
	0, 118, 119, 212, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 213, 0, 214, 0, 123, 124, 215,
	216, 0, 0, 125, 0, 0, 126, 217, 218, 219,
	0, 220, 0, 0, 127, 0, 128, 129, 0, 0,
	221, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 222, 143, 223, 144, 145, 0, 0,
	0, 0, 0, 146, 224, 0, 147, 0, 225, 148,
	149, 0, 226, 150, 227, 0, 151, 152, 153, 228,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 229, 163, 0, 253, 164, 165, 49, 230,
	166, 167, 0, 168, 169, 0, 170, 231, 232, 171,
	0, 172, 173, 175, 233, 174, 234, 0, 176, 51,
	177, 178, 0, 235, 236, 237, 0, 0, 179, 238,
	239, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 337, 241, 0, 190,
	0, 0, 0, 47, 191, 192, 193, 194, 90, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 94, 0, 95, 0, 0, 0, 0, 46, 1183,
	0, 0, 96, 97, 195, 196, 197, 198, 98, 199,
	200, 0, 99, 201, 202, 100, 0, 0, 203, 204,
	205, 0, 206, 0, 0, 0, 101, 102, 103, 0,
	104, 0, 105, 0, 0, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 110, 111, 207, 112, 208,
	209, 0, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 210, 117, 211, 0, 0, 0,
	118, 119, 212, 0, 120, 0, 121, 0, 0, 0,
	0, 122, 213, 0, 214, 0, 123, 124, 215, 216,
	0, 0, 125, 0, 0, 126, 217, 218, 219, 0,
	220, 0, 0, 127, 0, 128, 129, 0, 0, 221,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 222, 143, 223, 144, 145, 0, 0, 0,
	0, 0, 146, 224, 0, 147, 0, 225, 148, 149,
	0, 226, 150, 227, 0, 151, 152, 153, 228, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 229, 163, 0, 253, 164, 165, 0, 230, 166,
	167, 0, 168, 169, 0, 170, 231, 232, 171, 0,
	172, 173, 175, 233, 174, 234, 0, 176, 0, 177,
	178, 0, 235, 236, 237, 0, 0, 179, 238, 239,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 240, 241, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	94, 0, 95, 0, 0, 0, 0, 0, 412, 0,
	0, 96, 97, 195, 196, 197, 198, 98, 199, 200,
	0, 99, 201, 202, 100, 0, 0, 203, 204, 205,
	0, 206, 0, 0, 0, 101, 102, 103, 0, 104,
	0, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 110, 111, 207, 112, 208, 209,
	0, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 210, 117, 211, 0, 0, 0, 118,
	119, 212, 0, 120, 0, 121, 0, 0, 0, 0,
	122, 213, 0, 214, 0, 123, 124, 215, 216, 0,
	0, 125, 0, 0, 126, 217, 218, 219, 0, 220,
	0, 0, 127, 0, 128, 129, 0, 0, 221, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 222, 143, 223, 144, 145, 0, 0, 306, 0,
	0, 146, 224, 0, 147, 0, 225, 148, 149, 0,
	226, 150, 227, 0, 151, 152, 153, 228, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 0, 161, 162,
	229, 163, 0, 253, 164, 165, 0, 230, 166, 167,
	0, 168, 169, 0, 170, 231, 232, 171, 0, 172,
	173, 175, 233, 174, 234, 0, 176, 0, 177, 178,
	0, 235, 236, 237, 0, 0, 179, 238, 239, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 240, 241, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 94,
	0, 95, 0, 0, 0, 0, 931, 0, 0, 0,
	96, 97, 195, 196, 197, 198, 98, 199, 200, 0,
	99, 201, 202, 100, 0, 0, 203, 204, 205, 0,
	206, 0, 0, 0, 101, 102, 103, 0, 104, 0,
	105, 0, 0, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 110, 111, 207, 112, 208, 209, 0,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 210, 117, 211, 0, 0, 0, 118, 119,
	212, 0, 120, 0, 121, 0, 0, 0, 0, 122,
	213, 0, 214, 0, 123, 124, 215, 216, 0, 0,
	125, 0, 0, 126, 217, 218, 219, 0, 220, 0,
	0, 127, 0, 128, 129, 0, 0, 221, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	222, 143, 223, 144, 145, 0, 0, 0, 0, 0,
	146, 224, 0, 147, 0, 225, 148, 149, 0, 226,
	150, 227, 0, 151, 152, 153, 228, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 0, 161, 162, 229,
	163, 0, 253, 164, 165, 0, 230, 166, 167, 0,
	168, 169, 0, 170, 231, 232, 171, 0, 172, 173,
	175, 233, 174, 234, 0, 176, 0, 177, 178, 0,
	235, 236, 237, 0, 0, 179, 238, 239, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 240, 241, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 94, 0,
	95, 0, 0, 0, 0, 863, 0, 0, 0, 96,
	97, 195, 196, 197, 198, 98, 199, 200, 0, 99,
	201, 202, 100, 0, 0, 203, 204, 205, 0, 206,
	0, 0, 0, 101, 102, 103, 0, 104, 0, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 110, 111, 207, 112, 208, 209, 0, 0,
	113, 0, 0, 0, 114, 115, 0, 116, 0, 0,
	0, 210, 117, 211, 0, 0, 0, 118, 119, 212,
	0, 120, 0, 121, 0, 0, 0, 0, 122, 213,
	0, 214, 0, 123, 124, 215, 216, 0, 0, 125,
	0, 0, 126, 217, 218, 219, 0, 220, 0, 0,
	127, 0, 128, 129, 0, 0, 221, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 222,
	143, 223, 144, 145, 0, 0, 0, 0, 0, 146,
	224, 0, 147, 0, 225, 148, 149, 0, 226, 150,
	227, 0, 151, 152, 153, 228, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 229, 163,
	0, 253, 164, 165, 0, 230, 166, 167, 0, 168,
	169, 0, 170, 231, 232, 171, 0, 172, 173, 175,
	233, 174, 234, 0, 176, 0, 177, 178, 0, 235,
	236, 237, 0, 0, 179, 238, 239, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 240, 241, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 94, 0, 95,
	0, 0, 0, 0, 1402, 0, 0, 0, 96, 97,
	195, 196, 197, 198, 98, 199, 200, 0, 99, 201,
	202, 100, 0, 0, 203, 204, 205, 0, 206, 0,
	0, 0, 101, 102, 103, 0, 104, 0, 105, 0,
	0, 106, 107, 0, 0, 0, 0, 0, 0, 108,
	109, 110, 111, 207, 112, 208, 209, 0, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	210, 117, 211, 0, 0, 0, 118, 119, 212, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 213, 0,
	214, 0, 123, 124, 215, 216, 0, 0, 125, 0,
	0, 126, 217, 218, 219, 0, 220, 0, 0, 127,
	0, 128, 129, 0, 0, 221, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 222, 143,
	223, 144, 145, 0, 0, 0, 0, 0, 146, 224,
	0, 147, 0, 225, 148, 149, 0, 226, 150, 227,
	0, 151, 152, 153, 228, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 0, 161, 162, 229, 163, 0,
	253, 164, 165, 0, 230, 166, 167, 0, 168, 169,
	0, 170, 231, 232, 171, 0, 172, 173, 175, 233,
	174, 234, 0, 176, 0, 177, 178, 0, 235, 236,
	237, 0, 0, 179, 238, 239, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 240, 241, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 94, 0, 95, 0,
	0, 0, 0, 513, 0, 0, 0, 96, 97, 195,
	196, 197, 198, 98, 199, 200, 0, 99, 201, 202,
	100, 0, 0, 203, 204, 205, 0, 206, 0, 0,
	0, 101, 102, 103, 0, 104, 0, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	559, 111, 207, 112, 208, 209, 0, 0, 113, 0,
	0, 0, 114, 115, 0, 116, 0, 0, 0, 210,
	117, 211, 0, 0, 0, 118, 119, 212, 0, 120,
	0, 121, 0, 0, 0, 0, 122, 213, 0, 214,
	0, 123, 124, 215, 216, 0, 0, 125, 0, 0,
	126, 217, 218, 219, 0, 220, 0, 0, 127, 0,
	128, 129, 0, 0, 221, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 222, 143, 223,
	144, 145, 0, 0, 0, 0, 0, 146, 224, 0,
	147, 0, 225, 148, 149, 0, 226, 150, 227, 0,
	151, 152, 153, 228, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 0, 161, 162, 229, 163, 0, 253,
	164, 165, 0, 230, 166, 167, 0, 168, 169, 0,
	170, 231, 232, 171, 0, 172, 173, 175, 233, 174,
	234, 0, 176, 558, 177, 178, 0, 235, 236, 237,
	0, 0, 179, 238, 239, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	240, 241, 90, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 93, 94, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 562, 96, 97, 195, 196,
	197, 198, 98, 199, 200, 0, 99, 201, 202, 100,
	0, 0, 203, 204, 205, 0, 206, 0, 0, 0,
	101, 102, 103, 0, 104, 0, 105, 0, 0, 106,
	107, 0, 0, 0, 0, 0, 0, 108, 109, 110,
	111, 207, 112, 208, 209, 0, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 210, 117,
	211, 0, 0, 0, 118, 119, 212, 0, 120, 0,
	121, 0, 0, 0, 0, 122, 213, 0, 214, 0,
	123, 124, 215, 216, 0, 0, 125, 0, 0, 126,
	217, 218, 219, 0, 220, 0, 0, 127, 0, 128,
	129, 0, 0, 221, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 222, 143, 223, 144,
	145, 0, 0, 0, 0, 0, 146, 224, 0, 147,
	0, 225, 148, 149, 0, 226, 150, 227, 0, 151,
	152, 153, 228, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 229, 163, 0, 253, 164,
	165, 0, 230, 166, 167, 0, 168, 169, 0, 170,
	231, 232, 171, 0, 172, 173, 175, 233, 174, 234,
	0, 176, 0, 177, 178, 0, 235, 236, 237, 0,
	0, 179, 238, 239, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 240,
	241, 333, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 93, 94, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 562, 96, 97, 195, 196, 197,
	198, 98, 199, 200, 0, 99, 201, 202, 100, 0,
	0, 203, 204, 205, 0, 206, 0, 338, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 339, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 110, 111,
	207, 112, 208, 209, 0, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 210, 117, 211,
	0, 0, 0, 118, 119, 212, 0, 120, 0, 121,
	0, 0, 340, 0, 122, 213, 0, 214, 0, 123,
	124, 215, 216, 0, 0, 125, 0, 341, 126, 217,
	218, 219, 0, 220, 0, 342, 127, 343, 128, 129,
	0, 0, 221, 344, 130, 345, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 346, 138, 139,
	142, 140, 0, 141, 0, 222, 143, 223, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 347, 147, 348,
	225, 148, 149, 0, 226, 150, 227, 0, 151, 152,
	153, 228, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 349, 161, 162, 229, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 0, 168, 169, 350, 170, 231,
	232, 171, 0, 172, 173, 175, 233, 174, 234, 0,
	176, 0, 177, 178, 0, 235, 236, 237, 0, 0,
	179, 238, 239, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 240, 241,
	90, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 93, 94, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 195, 196, 197, 198,
	98, 199, 200, 0, 99, 201, 202, 100, 0, 0,
	203, 204, 205, 836, 206, 0, 0, 0, 101, 102,
	103, 0, 104, 834, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 110, 111, 207,
	112, 208, 209, 0, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 210, 117, 211, 0,
	908, 0, 118, 119, 212, 0, 120, 0, 121, 839,
	0, 0, 0, 122, 213, 0, 214, 0, 123, 124,
	215, 216, 0, 906, 125, 0, 0, 126, 217, 218,
	219, 0, 220, 0, 0, 127, 0, 128, 129, 0,
	0, 221, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 222, 143, 223, 144, 145, 0,
	0, 0, 0, 0, 146, 224, 0, 147, 0, 225,
	148, 149, 0, 226, 150, 227, 838, 151, 152, 153,
	228, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	0, 161, 162, 229, 163, 0, 253, 164, 165, 0,
	230, 166, 167, 0, 168, 169, 0, 170, 231, 232,
	171, 0, 172, 173, 175, 233, 174, 234, 0, 176,
	0, 177, 178, 0, 235, 236, 237, 0, 0, 179,
	238, 239, 0, 180, 181, 182, 183, 0, 907, 184,
	185, 186, 0, 0, 187, 188, 189, 240, 241, 90,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 93, 94, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 195, 196, 197, 198, 98,
	199, 200, 0, 99, 201, 202, 100, 0, 0, 203,
	204, 205, 836, 206, 0, 0, 831, 101, 102, 103,
	0, 104, 834, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 110, 111, 207, 112,
	208, 209, 0, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 210, 117, 211, 0, 0,
	0, 118, 119, 212, 0, 120, 0, 121, 839, 0,
	0, 0, 122, 213, 0, 214, 0, 123, 124, 830,
	216, 0, 0, 125, 0, 0, 126, 217, 218, 219,
	0, 220, 0, 0, 127, 0, 128, 129, 0, 0,
	221, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 222, 143, 223, 144, 145, 0, 0,
	0, 0, 0, 146, 224, 0, 147, 0, 225, 148,
	149, 0, 226, 150, 227, 838, 151, 152, 153, 228,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 229, 163, 0, 253, 164, 165, 0, 230,
	166, 167, 0, 168, 169, 0, 170, 231, 232, 171,
	0, 172, 173, 175, 233, 174, 234, 0, 176, 0,
	177, 178, 0, 235, 236, 237, 0, 0, 179, 238,
	239, 0, 180, 181, 182, 183, 0, 837, 184, 185,
	186, 0, 0, 187, 188, 189, 240, 241, 90, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	93, 94, 0, 95, 0, 0, 0, 0, 0, 1183,
	0, 0, 96, 97, 195, 196, 197, 198, 98, 199,
	200, 0, 99, 201, 202, 100, 0, 0, 203, 204,
	205, 0, 206, 0, 0, 0, 101, 102, 103, 0,
	104, 0, 105, 0, 0, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 110, 111, 207, 112, 208,
	209, 0, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 210, 117, 211, 0, 0, 0,
	118, 119, 212, 0, 120, 0, 121, 0, 0, 0,
	0, 122, 213, 0, 214, 0, 123, 124, 215, 216,
	0, 0, 125, 0, 0, 126, 217, 218, 219, 0,
	220, 0, 0, 127, 0, 128, 129, 0, 0, 221,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 222, 143, 223, 144, 145, 0, 0, 0,
	0, 0, 146, 224, 0, 147, 0, 225, 148, 149,
	0, 226, 150, 227, 0, 151, 152, 153, 228, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 229, 163, 0, 253, 164, 165, 0, 230, 166,
	167, 0, 168, 169, 0, 170, 231, 232, 171, 0,
	172, 173, 175, 233, 174, 234, 0, 176, 0, 177,
	178, 0, 235, 236, 237, 0, 0, 179, 238, 239,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 240, 241, 90, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 93,
	94, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 195, 196, 197, 198, 98, 199, 200,
	0, 99, 201, 202, 100, 0, 0, 203, 204, 205,
	0, 206, 0, 0, 0, 101, 102, 103, 0, 104,
	0, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 110, 111, 207, 112, 208, 209,
	0, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 210, 117, 211, 0, 0, 0, 118,
	119, 212, 0, 120, 0, 121, 0, 0, 0, 0,
	122, 213, 0, 214, 0, 123, 124, 215, 216, 0,
	0, 125, 0, 0, 126, 217, 218, 219, 0, 220,
	0, 0, 127, 0, 128, 129, 0, 0, 221, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 222, 143, 223, 144, 145, 0, 0, 306, 0,
	0, 146, 224, 0, 147, 0, 225, 148, 149, 0,
	226, 150, 227, 0, 151, 152, 153, 228, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 0, 161, 162,
	229, 163, 0, 253, 164, 165, 0, 230, 166, 167,
	0, 168, 169, 0, 170, 231, 232, 171, 0, 172,
	173, 175, 233, 174, 234, 0, 176, 0, 177, 178,
	0, 235, 236, 237, 0, 0, 179, 238, 239, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 240, 241, 90, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 93, 94,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 195, 196, 197, 198, 98, 199, 200, 0,
	99, 201, 202, 100, 0, 0, 203, 204, 205, 0,
	206, 0, 0, 0, 101, 102, 103, 0, 104, 0,
	105, 0, 0, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 110, 111, 207, 112, 208, 209, 0,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 210, 117, 211, 0, 0, 0, 118, 119,
	212, 0, 120, 0, 121, 0, 0, 0, 0, 122,
	213, 0, 214, 0, 123, 124, 555, 216, 0, 0,
	125, 0, 0, 126, 217, 218, 219, 0, 220, 0,
	0, 127, 0, 128, 129, 0, 0, 221, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	222, 143, 223, 144, 145, 0, 0, 306, 0, 0,
	146, 224, 0, 147, 0, 225, 148, 149, 0, 226,
	150, 227, 0, 151, 152, 153, 228, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 0, 161, 162, 229,
	163, 0, 253, 164, 165, 0, 230, 166, 167, 0,
	168, 169, 0, 170, 231, 232, 171, 0, 172, 173,
	175, 233, 174, 234, 0, 176, 0, 177, 178, 0,
	235, 236, 237, 0, 0, 179, 238, 239, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 240, 241, 90, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 93, 94, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 195, 196, 197, 198, 98, 199, 200, 0, 99,
	201, 202, 100, 0, 0, 203, 204, 205, 0, 206,
	0, 0, 0, 101, 102, 103, 0, 104, 0, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 110, 111, 207, 112, 208, 209, 0, 0,
	113, 0, 0, 0, 114, 115, 0, 116, 0, 0,
	0, 210, 117, 211, 0, 0, 0, 118, 119, 212,
	0, 120, 0, 121, 0, 0, 0, 0, 122, 213,
	0, 214, 0, 123, 124, 312, 216, 0, 0, 125,
	0, 0, 126, 217, 218, 219, 0, 220, 0, 0,
	127, 0, 128, 129, 0, 0, 221, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 222,
	143, 223, 144, 145, 0, 0, 306, 0, 0, 146,
	224, 0, 147, 0, 225, 148, 149, 0, 226, 150,
	227, 0, 151, 152, 153, 228, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 229, 163,
	0, 253, 164, 165, 0, 230, 166, 167, 0, 168,
	169, 0, 170, 231, 232, 171, 0, 172, 173, 175,
	233, 174, 234, 0, 176, 0, 177, 178, 0, 235,
	236, 237, 0, 0, 179, 238, 239, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 240, 241, 90, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 93, 94, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	195, 196, 197, 198, 98, 199, 200, 0, 99, 201,
	202, 100, 0, 0, 203, 204, 205, 0, 206, 0,
	0, 0, 101, 102, 103, 0, 104, 0, 105, 0,
	0, 106, 107, 0, 0, 0, 0, 0, 0, 108,
	109, 110, 111, 207, 112, 208, 209, 0, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	210, 117, 211, 0, 0, 0, 118, 119, 212, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 213, 0,
	214, 0, 123, 124, 215, 216, 0, 0, 125, 0,
	0, 126, 217, 218, 219, 0, 220, 0, 0, 127,
	0, 128, 129, 0, 0, 221, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 222, 143,
	223, 144, 145, 0, 0, 0, 0, 0, 146, 224,
	0, 147, 0, 225, 148, 149, 0, 226, 150, 227,
	0, 151, 152, 153, 228, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 0, 161, 162, 229, 163, 0,
	253, 164, 165, 0, 230, 166, 167, 0, 168, 169,
	0, 170, 231, 232, 171, 0, 172, 173, 175, 233,
	174, 234, 0, 176, 0, 177, 178, 0, 235, 236,
	237, 0, 0, 179, 238, 239, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 240, 241, 90, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 93, 94, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 195,
	196, 197, 198, 98, 199, 200, 0, 99, 201, 202,
	100, 0, 0, 203, 204, 205, 0, 206, 0, 0,
	0, 101, 102, 103, 0, 104, 0, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	110, 111, 207, 112, 208, 209, 0, 0, 113, 0,
	0, 0, 114, 115, 0, 116, 0, 0, 0, 210,
	117, 211, 0, 0, 0, 118, 119, 212, 0, 120,
	0, 121, 0, 0, 0, 0, 122, 213, 0, 214,
	0, 123, 124, 1115, 216, 0, 0, 125, 0, 0,
	126, 217, 218, 219, 0, 220, 0, 0, 127, 0,
	128, 129, 0, 0, 221, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 222, 143, 223,
	144, 145, 0, 0, 0, 0, 0, 146, 224, 0,
	147, 0, 225, 148, 149, 0, 226, 150, 227, 0,
	151, 152, 153, 228, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 0, 161, 162, 229, 163, 0, 253,
	164, 165, 0, 230, 166, 167, 0, 168, 169, 0,
	170, 231, 232, 171, 0, 172, 173, 175, 233, 174,
	234, 0, 176, 0, 177, 178, 0, 235, 236, 237,
	0, 0, 179, 238, 239, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	240, 241, 90, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 93, 94, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 195, 196,
	197, 198, 98, 199, 200, 0, 99, 201, 202, 100,
	0, 0, 203, 204, 205, 0, 206, 0, 0, 0,
	101, 102, 103, 0, 104, 0, 105, 0, 0, 106,
	107, 0, 0, 0, 0, 0, 0, 108, 109, 110,
	111, 207, 112, 208, 209, 0, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 210, 117,
	211, 0, 0, 0, 118, 119, 212, 0, 120, 0,
	121, 0, 0, 0, 0, 122, 213, 0, 214, 0,
	123, 124, 1113, 216, 0, 0, 125, 0, 0, 126,
	217, 218, 219, 0, 220, 0, 0, 127, 0, 128,
	129, 0, 0, 221, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 222, 143, 223, 144,
	145, 0, 0, 0, 0, 0, 146, 224, 0, 147,
	0, 225, 148, 149, 0, 226, 150, 227, 0, 151,
	152, 153, 228, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 229, 163, 0, 253, 164,
	165, 0, 230, 166, 167, 0, 168, 169, 0, 170,
	231, 232, 171, 0, 172, 173, 175, 233, 174, 234,
	0, 176, 0, 177, 178, 0, 235, 236, 237, 0,
	0, 179, 238, 239, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 240,
	241, 90, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 93, 94, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 195, 196, 197,
	198, 98, 199, 200, 0, 99, 201, 202, 100, 0,
	0, 203, 204, 205, 0, 206, 0, 0, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 110, 111,
	207, 112, 208, 209, 0, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 210, 117, 211,
	0, 0, 0, 118, 119, 212, 0, 120, 0, 121,
	0, 0, 0, 0, 122, 213, 0, 214, 0, 123,
	124, 1104, 216, 0, 0, 125, 0, 0, 126, 217,
	218, 219, 0, 220, 0, 0, 127, 0, 128, 129,
	0, 0, 221, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 222, 143, 223, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 0, 147, 0,
	225, 148, 149, 0, 226, 150, 227, 0, 151, 152,
	153, 228, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 229, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 0, 168, 169, 0, 170, 231,
	232, 171, 0, 172, 173, 175, 233, 174, 234, 0,
	176, 0, 177, 178, 0, 235, 236, 237, 0, 0,
	179, 238, 239, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 240, 241,
	90, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 93, 94, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 195, 196, 197, 198,
	98, 199, 200, 0, 99, 201, 202, 100, 0, 0,
	203, 204, 205, 0, 206, 0, 0, 0, 101, 102,
	103, 0, 104, 0, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 110, 111, 207,
	112, 208, 209, 0, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 210, 117, 211, 0,
	0, 0, 118, 119, 212, 0, 120, 0, 121, 0,
	0, 0, 0, 122, 213, 0, 214, 0, 123, 124,
	705, 216, 0, 0, 125, 0, 0, 126, 217, 218,
	219, 0, 220, 0, 0, 127, 0, 128, 129, 0,
	0, 221, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 222, 143, 223, 144, 145, 0,
	0, 0, 0, 0, 146, 224, 0, 147, 0, 225,
	148, 149, 0, 226, 150, 227, 0, 151, 152, 153,
	228, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	0, 161, 162, 229, 163, 0, 253, 164, 165, 0,
	230, 166, 167, 0, 168, 169, 0, 170, 231, 232,
	171, 0, 172, 173, 175, 233, 174, 234, 0, 176,
	0, 177, 178, 0, 235, 236, 237, 0, 0, 179,
	238, 239, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 240, 241, 90,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 93, 94, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 195, 196, 197, 198, 98,
	199, 200, 0, 99, 201, 202, 100, 0, 0, 203,
	204, 205, 0, 206, 0, 0, 0, 101, 102, 103,
	0, 104, 0, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 110, 111, 207, 112,
	208, 209, 0, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 210, 117, 211, 0, 0,
	0, 118, 119, 212, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 213, 0, 214, 0, 123, 124, 215,
	216, 0, 0, 125, 0, 0, 126, 217, 218, 219,
	0, 220, 0, 0, 127, 0, 128, 129, 0, 0,
	221, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 222, 143, 223, 144, 145, 0, 0,
	0, 0, 0, 146, 224, 0, 147, 0, 225, 148,
	149, 0, 226, 150, 227, 0, 151, 152, 153, 228,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 229, 163, 0, 88, 164, 165, 0, 230,
	166, 167, 0, 168, 169, 0, 170, 231, 232, 171,
	0, 172, 173, 175, 233, 174, 234, 0, 176, 0,
	177, 178, 0, 235, 236, 237, 0, 0, 179, 238,
	239, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 240, 241, 90, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	93, 94, 0, 95, 0, 0, 0, 0, 0, 542,
	0, 0, 96, 97, 195, 196, 197, 198, 98, 199,
	200, 0, 99, 201, 202, 100, 0, 0, 203, 204,
	205, 0, 206, 0, 0, 0, 101, 102, 103, 0,
	104, 0, 105, 0, 0, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 110, 111, 207, 112, 208,
	209, 0, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 210, 117, 211, 0, 0, 0,
	118, 119, 212, 0, 120, 0, 121, 0, 0, 0,
	0, 122, 213, 0, 214, 0, 123, 124, 215, 216,
	0, 0, 125, 0, 0, 126, 217, 218, 219, 0,
	220, 0, 0, 127, 0, 128, 129, 0, 0, 221,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 222, 143, 223, 144, 145, 0, 0, 0,
	0, 0, 146, 224, 0, 147, 0, 225, 148, 149,
	0, 226, 150, 227, 0, 151, 152, 153, 228, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 229, 163, 0, 253, 164, 165, 0, 230, 166,
	167, 0, 0, 169, 0, 170, 231, 232, 171, 0,
	172, 173, 175, 233, 174, 234, 0, 176, 0, 177,
	178, 0, 235, 236, 237, 0, 0, 179, 238, 239,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 240, 241, 90, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 93,
	94, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 195, 196, 197, 198, 98, 199, 200,
	0, 99, 201, 202, 100, 0, 0, 203, 204, 205,
	0, 206, 0, 0, 0, 101, 102, 103, 0, 104,
	0, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 110, 111, 207, 112, 208, 209,
	0, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 210, 117, 211, 0, 0, 0, 118,
	119, 212, 0, 120, 0, 121, 0, 0, 0, 0,
	122, 213, 0, 214, 0, 123, 124, 397, 216, 0,
	0, 125, 0, 0, 126, 217, 218, 219, 0, 220,
	0, 0, 127, 0, 128, 129, 0, 0, 221, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 222, 143, 223, 144, 145, 0, 0, 0, 0,
	0, 146, 224, 0, 147, 0, 225, 148, 149, 0,
	226, 150, 227, 0, 151, 152, 153, 228, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 0, 161, 162,
	229, 163, 0, 253, 164, 165, 0, 230, 166, 167,
	0, 168, 169, 0, 170, 231, 232, 171, 0, 172,
	173, 175, 233, 174, 234, 0, 176, 0, 177, 178,
	0, 235, 236, 237, 0, 0, 179, 238, 239, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 240, 241, 90, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 93, 94,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 195, 196, 197, 198, 98, 199, 200, 0,
	99, 201, 202, 100, 0, 0, 203, 204, 205, 0,
	206, 0, 0, 0, 101, 102, 103, 0, 104, 0,
	105, 0, 0, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 110, 111, 207, 112, 208, 209, 0,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 210, 117, 211, 0, 0, 0, 118, 119,
	212, 0, 120, 0, 121, 0, 0, 0, 0, 122,
	213, 0, 214, 0, 123, 124, 394, 216, 0, 0,
	125, 0, 0, 126, 217, 218, 219, 0, 220, 0,
	0, 127, 0, 128, 129, 0, 0, 221, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	222, 143, 223, 144, 145, 0, 0, 0, 0, 0,
	146, 224, 0, 147, 0, 225, 148, 149, 0, 226,
	150, 227, 0, 151, 152, 153, 228, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 0, 161, 162, 229,
	163, 0, 253, 164, 165, 0, 230, 166, 167, 0,
	168, 169, 0, 170, 231, 232, 171, 0, 172, 173,
	175, 233, 174, 234, 0, 176, 0, 177, 178, 0,
	235, 236, 237, 0, 0, 179, 238, 239, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 240, 241, 90, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 93, 94, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 195, 196, 197, 198, 98, 199, 200, 0, 99,
	201, 202, 100, 0, 0, 203, 204, 357, 0, 206,
	0, 0, 0, 101, 102, 103, 0, 104, 0, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 110, 111, 207, 112, 208, 209, 0, 0,
	113, 0, 0, 0, 114, 115, 0, 116, 0, 0,
	0, 210, 117, 211, 0, 0, 0, 118, 119, 212,
	0, 120, 0, 121, 0, 0, 0, 0, 122, 213,
	0, 214, 0, 123, 124, 215, 216, 0, 0, 125,
	0, 0, 126, 217, 218, 219, 0, 220, 0, 0,
	127, 0, 128, 129, 0, 0, 221, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	250, 0, 138, 139, 142, 140, 0, 141, 0, 222,
	143, 223, 144, 145, 0, 0, 0, 0, 0, 146,
	224, 0, 147, 0, 225, 148, 149, 0, 226, 150,
	227, 0, 151, 152, 153, 228, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 229, 163,
	0, 253, 164, 165, 0, 230, 166, 167, 0, 168,
	169, 0, 170, 231, 232, 171, 0, 172, 173, 175,
	233, 174, 234, 0, 176, 0, 177, 178, 0, 249,
	236, 237, 0, 0, 245, 238, 239, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 240, 241, 90, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 93, 94, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	195, 196, 197, 198, 98, 199, 200, 0, 99, 201,
	202, 100, 0, 0, 203, 204, 205, 0, 206, 0,
	0, 0, 101, 102, 103, 0, 104, 0, 105, 0,
	0, 106, 107, 0, 0, 0, 0, 0, 0, 108,
	109, 110, 111, 207, 112, 208, 209, 0, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	210, 117, 211, 0, 0, 0, 118, 119, 212, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 213, 0,
	214, 0, 123, 124, 215, 216, 0, 0, 125, 0,
	0, 126, 217, 218, 219, 0, 220, 0, 0, 127,
	0, 128, 129, 0, 0, 221, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 250,
	0, 138, 139, 142, 140, 0, 141, 0, 222, 143,
	223, 144, 145, 0, 0, 0, 0, 0, 146, 224,
	0, 147, 0, 225, 148, 149, 0, 226, 150, 227,
	0, 151, 152, 153, 228, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 0, 161, 162, 229, 163, 0,
	253, 164, 165, 0, 230, 166, 167, 0, 168, 169,
	0, 170, 231, 232, 171, 0, 172, 173, 175, 233,
	174, 234, 0, 176, 0, 177, 178, 0, 249, 236,
	237, 0, 0, 245, 238, 239, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 240, 241, 90, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 93, 94, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 195,
	196, 197, 198, 98, 199, 200, 0, 99, 201, 202,
	100, 0, 0, 203, 204, 205, 0, 206, 0, 0,
	0, 101, 102, 103, 0, 104, 0, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	110, 111, 207, 112, 208, 209, 0, 0, 113, 0,
	0, 0, 114, 115, 0, 116, 0, 0, 0, 210,
	117, 211, 0, 0, 0, 118, 119, 212, 0, 120,
	0, 121, 0, 0, 0, 0, 122, 213, 0, 214,
	0, 123, 124, 328, 216, 0, 0, 125, 0, 0,
	126, 217, 218, 219, 0, 220, 0, 0, 127, 0,
	128, 129, 0, 0, 221, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 222, 143, 223,
	144, 145, 0, 0, 0, 0, 0, 146, 224, 0,
	147, 0, 225, 148, 149, 0, 226, 150, 227, 0,
	151, 152, 153, 228, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 0, 161, 162, 229, 163, 0, 253,
	164, 165, 0, 230, 166, 167, 0, 168, 169, 0,
	170, 231, 232, 171, 0, 172, 173, 175, 233, 174,
	234, 0, 176, 0, 177, 178, 0, 235, 236, 237,
	0, 0, 179, 238, 239, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	240, 241, 90, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 93, 94, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 195, 196,
	197, 198, 98, 199, 200, 0, 99, 201, 202, 100,
	0, 0, 203, 204, 205, 0, 206, 0, 0, 0,
	101, 102, 103, 0, 104, 0, 105, 0, 0, 106,
	107, 0, 0, 0, 0, 0, 0, 108, 109, 110,
	111, 207, 112, 208, 209, 0, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 210, 117,
	211, 0, 0, 0, 118, 119, 212, 0, 120, 0,
	121, 0, 0, 0, 0, 122, 213, 0, 214, 0,
	123, 124, 325, 216, 0, 0, 125, 0, 0, 126,
	217, 218, 219, 0, 220, 0, 0, 127, 0, 128,
	129, 0, 0, 221, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 222, 143, 223, 144,
	145, 0, 0, 0, 0, 0, 146, 224, 0, 147,
	0, 225, 148, 149, 0, 226, 150, 227, 0, 151,
	152, 153, 228, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 229, 163, 0, 253, 164,
	165, 0, 230, 166, 167, 0, 168, 169, 0, 170,
	231, 232, 171, 0, 172, 173, 175, 233, 174, 234,
	0, 176, 0, 177, 178, 0, 235, 236, 237, 0,
	0, 179, 238, 239, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 240,
	241, 90, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 93, 94, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 195, 196, 197,
	198, 98, 199, 200, 0, 99, 201, 202, 100, 0,
	0, 203, 204, 205, 0, 206, 0, 0, 0, 101,
	102, 103, 0, 104, 0, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 110, 111,
	207, 112, 208, 209, 0, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 210, 117, 211,
	0, 0, 0, 118, 119, 212, 0, 120, 0, 121,
	0, 0, 0, 0, 122, 213, 0, 214, 0, 123,
	124, 323, 216, 0, 0, 125, 0, 0, 126, 217,
	218, 219, 0, 220, 0, 0, 127, 0, 128, 129,
	0, 0, 221, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 222, 143, 223, 144, 145,
	0, 0, 0, 0, 0, 146, 224, 0, 147, 0,
	225, 148, 149, 0, 226, 150, 227, 0, 151, 152,
	153, 228, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 229, 163, 0, 253, 164, 165,
	0, 230, 166, 167, 0, 168, 169, 0, 170, 231,
	232, 171, 0, 172, 173, 175, 233, 174, 234, 0,
	176, 0, 177, 178, 0, 235, 236, 237, 0, 0,
	179, 238, 239, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 240, 241,
	90, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 93, 94, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 195, 196, 197, 198,
	98, 199, 200, 0, 99, 201, 202, 100, 0, 0,
	203, 204, 205, 0, 206, 0, 0, 0, 101, 102,
	103, 0, 104, 0, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 110, 111, 207,
	112, 208, 209, 0, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 210, 117, 211, 0,
	0, 0, 118, 119, 212, 0, 120, 0, 121, 0,
	0, 0, 0, 122, 213, 0, 214, 0, 123, 124,
	315, 216, 0, 0, 125, 0, 0, 126, 217, 218,
	219, 0, 220, 0, 0, 127, 0, 128, 129, 0,
	0, 221, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 222, 143, 223, 144, 145, 0,
	0, 0, 0, 0, 146, 224, 0, 147, 0, 225,
	148, 149, 0, 226, 150, 227, 0, 151, 152, 153,
	228, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	0, 161, 162, 229, 163, 0, 253, 164, 165, 0,
	230, 166, 167, 0, 168, 169, 0, 170, 231, 232,
	171, 0, 172, 173, 175, 233, 174, 234, 0, 176,
	0, 177, 178, 0, 235, 236, 237, 0, 0, 179,
	238, 239, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 240, 241, 90,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 93, 94, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 195, 196, 197, 198, 98,
	199, 200, 0, 99, 201, 202, 100, 0, 0, 203,
	204, 205, 0, 206, 0, 0, 0, 101, 102, 103,
	0, 104, 0, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 110, 111, 207, 112,
	208, 209, 0, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 210, 117, 211, 0, 0,
	0, 118, 119, 212, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 213, 0, 214, 0, 123, 124, 215,
	216, 0, 0, 125, 0, 0, 126, 217, 218, 219,
	0, 220, 0, 0, 127, 0, 128, 129, 0, 0,
	221, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 222, 143, 223, 144, 145, 0, 0,
	0, 0, 0, 146, 224, 0, 147, 0, 225, 148,
	149, 0, 226, 150, 227, 0, 151, 152, 153, 228,
	295, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 229, 163, 0, 253, 164, 165, 0, 230,
	166, 167, 0, 168, 169, 0, 170, 231, 232, 171,
	0, 172, 173, 175, 233, 174, 234, 0, 176, 0,
	177, 178, 0, 235, 236, 237, 0, 0, 179, 238,
	239, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 240, 241, 90, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	93, 94, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 195, 196, 197, 198, 98, 199,
	200, 0, 99, 201, 202, 100, 0, 0, 203, 204,
	205, 0, 206, 0, 0, 0, 101, 102, 103, 0,
	104, 0, 105, 0, 0, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 110, 111, 207, 112, 208,
	209, 0, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 210, 117, 211, 0, 0, 0,
	118, 119, 212, 0, 120, 0, 121, 0, 0, 0,
	0, 122, 213, 0, 214, 0, 123, 124, 215, 216,
	0, 0, 125, 0, 0, 126, 217, 218, 219, 0,
	220, 0, 0, 127, 0, 128, 129, 0, 0, 221,
	0, 130, 0, 0, 243, 0, 0, 132, 0, 133,
	134, 135, 136, 250, 0, 138, 139, 142, 140, 0,
	141, 0, 222, 143, 223, 144, 145, 0, 0, 0,
	0, 0, 146, 224, 0, 147, 0, 225, 148, 149,
	0, 226, 150, 227, 0, 151, 152, 153, 228, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 229, 163, 0, 253, 164, 165, 0, 230, 166,
	244, 0, 168, 169, 0, 170, 231, 232, 171, 0,
	172, 173, 175, 233, 174, 234, 0, 176, 0, 177,
	178, 0, 249, 236, 237, 0, 0, 245, 238, 239,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 240, 241, 90, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 93,
	94, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 195, 196, 197, 198, 98, 199, 200,
	0, 99, 201, 202, 100, 0, 0, 203, 204, 205,
	0, 206, 0, 0, 0, 101, 102, 103, 0, 104,
	0, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 110, 111, 207, 112, 208, 209,
	0, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 210, 117, 211, 0, 0, 0, 118,
	119, 212, 0, 120, 0, 121, 0, 0, 0, 0,
	122, 213, 0, 214, 0, 123, 124, 215, 216, 0,
	0, 125, 0, 0, 126, 217, 218, 219, 0, 220,
	0, 0, 127, 0, 128, 129, 0, 0, 221, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 222, 143, 223, 144, 145, 0, 0, 0, 0,
	0, 146, 224, 0, 147, 0, 225, 148, 0, 0,
	226, 150, 227, 0, 151, 0, 153, 228, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 0, 161, 162,
	229, 0, 0, 253, 164, 165, 0, 230, 166, 167,
	0, 168, 169, 0, 170, 231, 232, 171, 0, 172,
	173, 175, 233, 174, 234, 0, 176, 0, 177, 178,
	0, 235, 236, 237, 0, 0, 179, 238, 239, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 240, 241, 731, 190, 750, 751,
	752, 0, 191, 192, 193, 194, 0, 0, 753, 0,
	0, 0, 0, 0, 733, 0, 759, 0, 0, 731,
	0, 750, 751, 752, 0, 0, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 732, 0, 733, 0, 759,
	0, 747, 731, 0, 750, 751, 752, 0, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 732, 0,
	733, 0, 759, 0, 747, 0, 731, 0, 750, 751,
	752, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 732, 0, 0, 733, 738, 759, 747, 0, 731,
	0, 750, 751, 752, 0, 0, 0, 0, 0, 0,
	0, 753, 760, 0, 0, 732, 0, 733, 738, 759,
	0, 747, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 760, 0, 0, 732, 0,
	748, 738, 0, 0, 747, 0, 0, 758, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 755, 760, 0,
	0, 0, 754, 748, 0, 738, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 0, 760, 0, 0, 754, 748, 0, 738, 0,
	0, 0, 0, 0, 758, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 760, 757, 0, 754, 0,
	748, 0, 0, 0, 0, 0, 0, 758, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 755, 0, 757,
	0, 0, 754, 748, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 0, 754, 0, 0, 0, 756,
	0, 0, 744, 745, 746, 749, 743, 740, 741, 742,
	734, 735, 736, 737, 739, 0, 757, 0, 0, 0,
	1677, 0, 756, 0, 0, 744, 745, 746, 749, 743,
	740, 741, 742, 734, 735, 736, 737, 739, 0, 757,
	0, 0, 0, 1676, 0, 756, 0, 0, 744, 745,
	746, 0, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 0, 0, 0, 0, 0, 1657, 0, 0, 756,
	0, 0, 744, 745, 746, 0, 743, 740, 741, 742,
	734, 735, 736, 737, 739, 0, 0, 0, 0, 0,
	1636, 0, 756, 0, 0, 744, 745, 746, 0, 743,
	740, 741, 742, 734, 735, 736, 737, 739, 731, 0,
	750, 751, 752, 1631, 0, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 0, 0, 733, 0, 759, 0,
	0, 731, 0, 750, 751, 752, 0, 0, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 732, 0, 733,
	0, 759, 0, 747, 731, 0, 750, 751, 752, 0,
	0, 0, 0, 0, 0, 0, 753, 0, 0, 0,
	732, 0, 733, 0, 759, 0, 747, 0, 731, 0,
	750, 751, 752, 0, 0, 0, 0, 0, 0, 0,
	753, 0, 0, 732, 0, 0, 733, 738, 759, 747,
	0, 731, 0, 750, 751, 752, 0, 0, 0, 0,
	0, 0, 0, 753, 760, 0, 0, 732, 0, 733,
	738, 759, 0, 747, 0, 0, 758, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 760, 0, 0,
	732, 0, 748, 738, 0, 0, 747, 0, 0, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 755,
	760, 0, 0, 0, 754, 748, 0, 738, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 755, 0, 760, 0, 0, 754, 748, 0,
	738, 0, 0, 0, 0, 0, 758, 749, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 760, 757, 0,
	754, 0, 748, 0, 0, 0, 0, 0, 0, 758,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 755,
	0, 757, 0, 0, 754, 748, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 0, 0, 754, 0, 0,
	0, 756, 0, 0, 744, 745, 746, 749, 743, 740,
	741, 742, 734, 735, 736, 737, 739, 0, 757, 0,
	0, 0, 1627, 0, 756, 0, 0, 744, 745, 746,
	749, 743, 740, 741, 742, 734, 735, 736, 737, 739,
	0, 757, 0, 0, 0, 1563, 0, 756, 0, 0,
	744, 745, 746, 0, 743, 740, 741, 742, 734, 735,
	736, 737, 739, 0, 0, 0, 0, 0, 1562, 0,
	0, 756, 0, 0, 744, 745, 746, 0, 743, 740,
	741, 742, 734, 735, 736, 737, 739, 0, 0, 0,
	0, 0, 1468, 0, 756, 0, 0, 744, 745, 746,
	0, 743, 740, 741, 742, 734, 735, 736, 737, 739,
	731, 0, 750, 751, 752, 1405, 0, 0, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 0, 733, 0,
	759, 0, 0, 731, 0, 750, 751, 752, 0, 0,
	0, 0, 0, 0, 0, 753, 0, 0, 0, 732,
	0, 733, 0, 759, 0, 747, 731, 0, 750, 751,
	752, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 732, 0, 733, 0, 759, 0, 747, 0,
	731, 0, 750, 751, 752, 0, 0, 0, 0, 0,
	0, 0, 753, 0, 0, 732, 0, 0, 733, 738,
	759, 747, 0, 731, 0, 750, 751, 752, 0, 0,
	0, 0, 0, 0, 0, 753, 760, 0, 0, 732,
	0, 733, 738, 759, 0, 747, 0, 0, 758, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 755, 760,
	0, 0, 732, 0, 748, 738, 0, 0, 747, 0,
	0, 758, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 755, 760, 0, 0, 0, 754, 748, 0, 738,
	1741, 0, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 760, 0, 0, 754,
	748, 0, 738, 0, 1278, 0, 0, 1277, 758, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 755, 760,
	757, 0, 754, 0, 748, 0, 0, 0, 0, 0,
	0, 758, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 755, 0, 757, 0, 0, 754, 748, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 0, 1740, 0,
	0, 0, 0, 0, 0, 0, 757, 0, 0, 754,
	0, 0, 0, 756, 0, 0, 744, 745, 746, 749,
	743, 740, 741, 742, 734, 735, 736, 737, 739, 0,
	757, 0, 0, 0, 1380, 0, 756, 0, 0, 744,
	745, 746, 749, 743, 740, 741, 742, 734, 735, 736,
	737, 739, 0, 757, 0, 0, 0, 1017, 0, 756,
	0, 0, 744, 745, 746, 0, 743, 740, 741, 742,
	734, 735, 736, 737, 739, 0, 0, 0, 1452, 0,
	0, 0, 0, 756, 0, 0, 744, 745, 746, 0,
	743, 740, 741, 742, 734, 735, 736, 737, 739, 0,
	0, 0, 0, 0, 0, 0, 756, 0, 0, 744,
	745, 746, 0, 743, 740, 741, 742, 734, 735, 736,
	737, 739, 731, 0, 750, 751, 752, 0, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 919, 762,
	733, 0, 759, 0, 0, 731, 0, 750, 751, 752,
	0, 0, 0, 0, 0, 0, 0, 753, 0, 0,
	761, 732, 0, 733, 0, 759, 0, 747, 731, 0,
	750, 751, 752, 0, 0, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 732, 0, 733, 0, 759, 0,
	747, 0, 920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 738, 0, 747, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 760, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 760, 0, 0, 0, 0, 748, 738, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 755, 760, 0, 0, 0, 754, 748,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 0, 0, 0,
	0, 754, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 754, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	0, 0, 731, 0, 750, 751, 752, 749, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 757, 0,
	733, 0, 759, 0, 0, 756, 0, 0, 744, 745,
	746, 0, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 732, 0, 0, 0, 0, 0, 747, 756, 0,
	0, 744, 745, 746, 0, 743, 740, 741, 742, 734,
	735, 736, 737, 739, 0, 0, 0, 0, 0, 0,
	0, 756, 0, 0, 744, 745, 746, 0, 743, 740,
	741, 742, 734, 735, 736, 737, 739, 0, 0, 0,
	0, 738, 731, 0, 750, 751, 752, 0, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 760, 0,
	733, 0, 759, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 0, 731, 0, 750, 751, 752, 0, 0,
	755, 732, 0, 0, 0, 753, 748, 747, 1279, 0,
	0, 733, 0, 759, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 731, 0, 750, 751, 752, 0, 0, 0,
	0, 738, 0, 0, 753, 0, 1284, 0, 0, 0,
	733, 749, 759, 0, 0, 0, 0, 0, 760, 0,
	0, 0, 757, 0, 0, 0, 0, 0, 0, 0,
	758, 732, 738, 0, 0, 0, 0, 747, 0, 1399,
	755, 0, 0, 0, 0, 0, 748, 0, 0, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 755, 0, 0, 0, 756, 0, 748, 744, 745,
	746, 738, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 0, 0, 0, 0, 0, 0, 0, 760, 754,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 757, 0, 0, 0, 0, 0, 0, 0,
	755, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1245, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 744, 745,
	746, 0, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 756, 0, 0, 744,
	745, 746, 0, 743, 740, 741, 742, 734, 735, 736,
	737, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 750, 751, 752, 0, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 1240, 0, 0,
	733, 0, 759, 0, 0, 756, 0, 0, 744, 745,
	746, 0, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 732, 731, 0, 750, 751, 752, 747, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 0,
	733, 0, 759, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 750, 751, 752, 0, 0, 0,
	0, 732, 0, 0, 753, 0, 0, 747, 0, 0,
	733, 738, 759, 1247, 0, 1264, 1265, 1266, 0, 0,
	0, 0, 0, 0, 0, 1375, 0, 0, 760, 0,
	0, 732, 0, 0, 0, 0, 0, 747, 0, 0,
	758, 0, 0, 731, 0, 750, 751, 752, 0, 0,
	755, 738, 0, 0, 0, 0, 748, 0, 1261, 0,
	0, 733, 0, 759, 0, 0, 0, 0, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	758, 738, 732, 1247, 0, 1264, 1265, 1266, 747, 0,
	755, 0, 0, 0, 0, 1374, 748, 0, 760, 0,
	0, 0, 1252, 0, 0, 0, 0, 0, 0, 0,
	758, 749, 0, 0, 0, 0, 0, 0, 754, 0,
	755, 0, 757, 0, 0, 0, 748, 0, 1261, 0,
	0, 1267, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1262, 0, 760,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 755, 1252, 0, 0, 756, 0, 748, 744, 745,
	746, 749, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 0, 757, 0, 1247, 0, 1264, 1265, 1266, 0,
	0, 1267, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 1262, 744, 745,
	746, 0, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 0, 749, 0, 0, 0, 0, 0, 0, 1261,
	0, 0, 0, 757, 0, 756, 0, 0, 744, 745,
	746, 0, 743, 740, 741, 742, 734, 735, 736, 737,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	1259, 1260, 1263, 1257, 1254, 1255, 1256, 1248, 1249, 1250,
	1251, 1253, 0, 1252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 756, 0, 0, 744,
	745, 746, 0, 743, 740, 741, 742, 734, 735, 736,
	737, 739, 1267, 950, 945, 966, 939, 958, 957, 0,
	0, 941, 940, 0, 0, 0, 968, 967, 1262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	1259, 1260, 0, 1257, 1254, 1255, 1256, 1248, 1249, 1250,
	1251, 1253, 0, 0, 0, 963, 0, 955, 954, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	952, 0, 0, 1263, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 946, 947, 948, 0, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	1258, 1259, 1260, 0, 1257, 1254, 1255, 1256, 1248, 1249,
	1250, 1251, 1253, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 0, 949, 944, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 942, 0,
	0, 964, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969,
}
var sqlPact = [...]int{

	2788, -1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 689, -1000, -1000, -1000, 672, 688, 831, 1132, 1132,
	15365, -1000, -1000, 18104, 2129, 404, 411, 404, 404, 398,
	15365, 529, 557, 111, -1000, 727, 29, 17855, 14120, 1205,
	18, 13373, 302, 2788, 13871, 14120, 17606, 1065, 990, 988,
	13373, 17357, 17108, 16859, -1000, 9036, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 526, 857, -1000, 15, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 847, -1000, 14120, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16610, 16361, 776, -1000, -1000, 493, 350,
	1219, -1000, 30, -1000, -1000, -1000, 1064, -1000, 843, 1063,
	1062, 1061, 1060, 349, 854, -1000, 525, 776, -1000, 776,
	-1000, -1000, -1000, 504, 15365, -1000, 13373, -1000, 16112, 996,
	15863, -1000, 727, -1000, -1000, -1000, 870, 1199, 1199, 1199,
	1217, 115, 109, 111, 2, 14120, -1000, 305, 2, 6435,
	6435, -1000, -1000, 302, -1000, 116, 11620, 32, -1000, 6957,
	-1000, 775, 1118, 711, 668, 1117, -115, 13373, 14120, 14120,
	561, 15614, -1000, 1116, 118, 1114, -1000, 110, 1112, -1000,
	-15, -1000, -1000, -1000, -1000, -1000, -1000, 302, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13622, 11879, 1674, 11879, -1000, -1000, 1265, -1000, -1000,
	12, 10, 961, 953, 9557, 9297, 1160, 1723, -1000, -1000,
	-1000, 23, 4084, 14120, 1077, 11879, 14120, 14120, 14120, -1000,
	14120, -1000, 960, -1000, 14120, -1000, 8, 5, -1000, 15365,
	-1000, 119, -1000, 300, 917, 15116, 1123, 911, -1000, 870,
	-1000, 850, 952, 7477, 8257, 111, -1000, -1000, 111, 111,
	8257, -1000, -1000, 14120, 2, 1257, 14120, 108, -1000, 19705,
	-1000, -1000, 8257, 8257, 8257, 8257, 8257, 749, -1000, -1000,
	-1000, 4867, -1000, -1000, 32, 298, 162, -1000, -1000, 294,
	32, -1000, -1000, -1000, -1000, 289, 1370, 393, -1000, -1000,
	-1000, 8257, 354, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1076, 287, 283, -1000, -1000, -1000, -1000, 275,
	272, 267, 264, 257, 256, 246, 244, 243, 239, 238,
	228, 227, 741, -1000, 368, -1000, -1000, 368, 368, -1000,
	214, 214, 218, -1000, -1000, -1000, 214, -1000, -1000, -1000,
	340, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 226, 108,
	-1000, -1000, -1000, 14120, 32, -1000, -1000, -1000, 8257, 3823,
	-19, -1000, 20352, -1000, -31, 925, -1000, 12875, 1191, 1176,
	1175, 13373, 503, 501, 14120, 14120, 361, 375, 1250, 375,
	11102, -1000, 14120, 14120, -1000, 14120, -1000, -1000, 14120, -1000,
	14120, 14120, 440, 12377, 682, 1109, 499, -14, 12128, 14120,
	-1000, 3, -1000, -1000, 1059, 399, 725, 983, 888, -1000,
	-1000, -1000, -1000, -4, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1317, -1000, -1000, -1000, -1000, 1344,
	-4, -1000, -1000, -1000, -1000, -1000, 1368, -1000, -1000, -1000,
	-1000, 4084, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14120,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 725, 983, -1000,
	-1000, 13373, 12626, 1108, 842, 907, -1000, -1000, 330, 1107,
	-1000, -1000, -1000, -1000, 20352, -1000, 20352, 663, 995, -1000,
	995, -9, -1000, 19682, -1000, 225, -21, -1000, 361, 6435,
	10843, 20682, 14120, 520, 8257, 8257, 8257, 8257, 8257, 8257,
	8257, 8257, 8257, 8257, 8257, 8257, 8257, 8257, 8257, 8257,
	8257, 8257, 8257, 8257, 8257, 8257, 849, 481, 1314, 740,
	210, 4084, -1000, 1291, 1291, 1291, 20433, 20433, 194, 1,
	19343, -13, 32, -1000, -1000, 6175, 5913, 32, 4343, -1000,
	632, 1339, 365, 20352, 1083, 1020, 224, 105, 104, 8257,
	723, 8257, 8517, 8257, 8257, 5129, 8257, 8257, 8257, 8257,
	8257, 8257, -1000, 223, -1000, -1000, -1000, -1000, 1337, -1000,
	-1000, 1335, -1000, 518, 515, 1334, 361, 103, -1000, 2521,
	-1000, -1000, 6957, -1000, 682, 14120, 14120, 14120, -1000, -1000,
	903, 14867, -1000, 20682, 14120, -1000, 220, 219, 969, 968,
	14120, 14120, 14618, 14369, 14120, 739, 14120, 14120, 641, -1000,
	608, 8257, 813, -1000, 10325, 372, 14120, 622, 85, -1000,
	-1000, -1000, 328, 14120, -1000, -1000, -1000, 118, -1000, 110,
	-1000, -1000, 13373, 14120, 12128, -14, -16, -1000, -1000, 14120,
	983, -1000, -1000, -1000, 581, -1000, 683, -1000, 9817, -1000,
	-1000, -1000, 632, -1000, -33, -1000, -1000, -1000, -1000, 100,
	-17, -1000, -1000, -1000, -1000, -1000, 14120, 265, 14120, 14120,
	14120, 1105, 1366, 14120, -1000, -1000, -1000, 8257, -1000, -1000,
	-1000, 29, 14120, -1000, 1013, -1000, -29, 1634, -131, 13124,
	-1000, 10066, -1000, 1249, -1000, -1000, -1000, -1000, 88, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 218, 741, 214, 214, 214, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 340, -1000, 368, 368, 368, -1000,
	-1000, -1000, 347, 809, 809, 1248, 1248, 1248, 1248, 419,
	419, 626, 1697, 160, 160, 160, 1144, 754, 754, 160,
	160, 160, 20433, 20382, 719, 8257, 477, 736, 210, 8257,
	-1000, 1332, -1000, -1000, -1000, 1054, 208, 8517, 8517, -1000,
	-1000, -1000, 4867, -1000, -1000, 198, 8257, -1000, 8257, -25,
	-27, -1000, 20352, -1000, -35, -1000, -1000, -3, 8257, 8257,
	8257, 96, -1000, 458, -1000, 453, 447, 434, -1000, 191,
	91, 536, -1000, 8257, 766, 189, 188, 8257, -1000, -1000,
	20312, 83, 1039, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	80, 20082, 79, 2578, -1000, 8517, 8517, 8517, 4867, 187,
	76, 19413, -102, 20033, 7217, 7217, 7217, 74, 20002, 8257,
	-102, 2894, 2871, 2848, -36, -37, -41, 1326, -46, 73,
	346, 341, 70, 1013, -1000, -1000, 8257, -1000, -1000, -1000,
	431, 430, 1099, -1000, 902, -1000, 604, 8257, 14120, 183,
	181, 687, -1000, 1097, 747, 1093, 747, -1000, -31, 589,
	-1000, -1000, 429, -1000, 6435, 20352, -1000, 610, 1188, -51,
	-1000, -1000, -1000, 6435, 361, 11102, 6957, -56, -1000, -1000,
	682, -33, -1000, -33, -1000, -1000, -1000, -1000, -1000, -1000,
	14120, -1000, 12626, 179, 14120, 171, 165, 161, 14120, -1000,
	1123, -1000, 67, -1000, -1000, -1000, -1000, -1000, 1010, 1216,
	10843, 978, 973, 10843, 1100, 790, 790, 790, -1000, 13124,
	3549, -1000, -1000, 14120, 157, 10584, 64, 1634, 310, 309,
	-1000, 1322, 8257, 719, 8257, 8517, 8517, -1000, 719, -1000,
	-1000, -1000, -1000, 1036, 145, 8257, 20682, 20473, 20403, -57,
	5651, -48, 19320, 8257, -1000, -1000, 162, -1000, 63, 6697,
	-1000, 19728, 4, 4, -1000, 933, 694, 637, 574, 1307,
	1358, 1103, -1000, 8257, 19912, -1000, 11361, 363, 800, 19051,
	20682, -1000, 8257, -1000, 1035, 8257, -1000, 20682, 8517, 8517,
	8517, 8517, 8517, 8517, 8517, 8517, 8517, 8517, 8517, 8517,
	8517, 8517, 8517, 8517, 8517, 8517, 8517, 955, 8517, 1289,
	1289, 1289, -50, 5389, -1000, 1069, 1035, 8257, 8257, 20682,
	62, 61, 57, -1000, 8257, -102, 8257, 8257, 8257, -1000,
	-1000, -1000, 55, -1000, 1305, -1000, -1000, -1000, -1000, 1010,
	19366, 14120, 14120, 14120, 1092, 2096, -1000, 19028, -64, 14120,
	14120, -1000, 975, 986, 389, 14120, -1000, 14120, -1000, 14120,
	14120, 14120, 14120, -58, 6435, 180, 29, 14120, -58, 608,
	-1000, -1000, 325, -1000, -1000, 8777, 144, 14120, 12626, 8777,
	840, -1000, -1000, 357, 8257, 8257, 1634, 10843, 10843, 1753,
	962, 10843, -1000, -1000, -1000, -1000, 136, -1000, 981, 142,
	14120, 13124, 444, 1302, 54, 1258, 719, 2368, 443, 8257,
	20682, 212, -66, -1000, 8257, 8257, -1000, -68, -1000, 8257,
	-1000, 20352, -1000, 1355, 8257, 52, 50, 49, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48, -1000, -1000, 20352, 8257,
	-1000, -1000, 18353, 8257, 47, -1000, 46, 20352, 1069, 20352,
	-1000, 606, 606, 1289, 1289, 1289, 1289, 871, 871, 678,
	1884, 1682, 1682, 1682, 989, 463, 463, 1682, 1682, 1682,
	1034, 957, 138, 20584, 8257, -70, -1000, -1000, -1000, 20352,
	20352, 45, -1000, -1000, -1000, -102, 2552, 19004, 18981, -1000,
	43, 357, -1000, -1000, -1000, -1000, 14120, -1000, 14120, -1000,
	14120, 890, -1000, -1000, 963, 133, 8517, 14120, -1000, 715,
	-74, -76, 882, -1000, 868, 8257, -1000, 20682, 747, 747,
	-1000, 426, 422, -1000, -58, 1131, 14120, 1174, -1000, -1000,
	-1000, 132, -80, -1000, 215, 1200, 8257, -1000, -1000, 126,
	8777, -81, -1000, -1000, 42, -82, 14120, -1000, 14120, 20352,
	-102, -1000, 1753, -1000, 125, 8257, 10843, -1000, -1000, 861,
	-142, -1000, 134, -1000, 14120, -87, -1000, -1000, 307, 213,
	-1000, 8257, 8257, 212, -89, -1000, 20682, 719, 719, -1000,
	18958, -1000, 19728, -1000, -1000, -1000, -1000, 20352, 693, -1000,
	18689, -1000, -1000, -1000, 8517, 1033, 124, 20682, 18666, -1000,
	-1000, 8257, -1000, -1000, -1000, -1000, -1000, 1347, -1000, -1000,
	-1000, 8257, 20584, 121, -1000, 120, -1000, -1000, -1000, 664,
	-1000, -1000, 20352, 1201, -1000, -1000, 14120, 14120, 478, -91,
	14120, -1000, -1000, 4605, 715, 8777, 1189, 32, 14120, 1189,
	18642, 4343, -101, -1000, 14120, -1000, 715, 117, -100, -1000,
	1247, -1000, 14120, 20352, -1000, 531, 981, -1000, 4084, -103,
	-1000, -1000, -1000, 719, 719, -1000, -1000, -1000, 41, 800,
	1214, -1000, 673, 8517, 20682, -105, -1000, 18619, -1000, 18596,
	939, 14120, 14120, 14120, 377, 14120, -1000, -1000, 547, -1000,
	361, -1000, -1000, -1000, -1000, -1000, -1000, 1200, -3, 715,
	-1000, -1000, 8777, 14120, 86, -107, 514, -1000, -1000, -1000,
	-1000, 667, 8257, 673, -112, -1000, -1000, -1000, 807, 680,
	40, -118, 33, -1000, 8257, -1000, 11102, -1000, 1189, 39,
	-1000, -119, -1000, -1000, -1000, 1352, 37, 7997, 7997, -102,
	-1000, -1000, 839, 822, 551, -1000, -1000, -1000, -1000, -1000,
	939, 14120, 20352, -93, -1000, -1000, 715, -1000, -1000, -1000,
	-1000, 3253, 824, 583, 19390, -1000, -1000, 1139, -1000, 381,
	846, 846, 807, -134, -1000, -1000, 1261, -1000, -1000, -1000,
	-1000, -1000, -1000, 1276, -1000, -1000, 974, -1000, -1000, -1000,
	7737, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1649, 1641, 1251, 126, 124, 1640, 1638, 1635, 97,
	121, 116, 127, 1634, 95, 1633, 1630, 1629, 1625, 42,
	1624, 1622, 1616, 1609, 1608, 94, 37, 155, 2043, 147,
	1607, 1606, 1604, 14, 104, 73, 1602, 58, 68, 91,
	115, 1012, 71, 1601, 1600, 135, 32, 16, 1593, 98,
	141, 117, 118, 1597, 1596, 1594, 43, 1592, 1590, 1586,
	1585, 59, 17, 1584, 18, 1582, 26, 1581, 1580, 100,
	1579, 102, 111, 24, 129, 10, 1576, 67, 11, 74,
	1573, 35, 1569, 36, 82, 130, 1567, 44, 156, 69,
	28, 60, 1566, 1562, 1559, 1554, 85, 81, 50, 1549,
	1543, 76, 1539, 134, 132, 1536, 1532, 133, 1529, 1524,
	1522, 641, 1521, 1518, 592, 3, 46, 72, 7, 110,
	109, 23, 1516, 20, 1515, 700, 798, 752, 1514, 40,
	51, 79, 45, 54, 25, 1510, 107, 1508, 1506, 1505,
	1500, 1488, 77, 1486, 75, 136, 38, 65, 90, 21,
	22, 29, 86, 106, 142, 108, 1484, 1483, 114, 1482,
	33, 1481, 1480, 888, 87, 1479, 1478, 1477, 871, 833,
	744, 99, 1474, 1473, 594, 294, 1472, 1467, 80, 1466,
	1465, 139, 1464, 138, 13, 1463, 112, 1462, 96, 1458,
	0, 53, 47, 1434, 128, 78, 1433, 1432, 1431, 1427,
	27, 2, 8, 5, 6, 4, 30, 19, 1423, 1412,
	131, 92, 1411, 143, 1410, 1409, 39, 1406, 1405, 15,
	1404, 12, 1401, 9, 1, 1399, 137, 1398, 101, 1385,
	1270, 1384, 140, 1383, 1380, 1315, 83,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 12, 12, 12, 159, 159, 158, 13,
	18, 226, 226, 226, 230, 230, 231, 231, 232, 232,
	232, 232, 232, 232, 232, 228, 228, 21, 21, 21,
	21, 111, 111, 113, 113, 113, 113, 40, 110, 110,
	110, 110, 112, 112, 112, 112, 183, 181, 181, 188,
	188, 188, 53, 53, 53, 53, 53, 54, 54, 54,
	180, 180, 180, 180, 189, 189, 189, 189, 189, 189,
	55, 55, 55, 187, 187, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 182,
	182, 227, 227, 229, 229, 8, 8, 56, 56, 57,
	57, 117, 117, 117, 117, 116, 198, 198, 199, 199,
	199, 200, 200, 200, 200, 200, 200, 200, 196, 196,
	197, 194, 194, 195, 195, 195, 195, 233, 233, 115,
	115, 60, 60, 203, 203, 203, 203, 201, 201, 201,
	201, 201, 204, 202, 205, 205, 205, 205, 205, 145,
	145, 145, 24, 7, 7, 100, 100, 64, 64, 149,
	149, 149, 65, 65, 150, 47, 47, 33, 33, 33,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 101,
	101, 102, 102, 16, 20, 23, 23, 23, 23, 23,
	235, 235, 44, 44, 44, 44, 45, 45, 114, 114,
	114, 114, 114, 39, 6, 6, 38, 38, 14, 14,
	14, 14, 14, 50, 50, 107, 107, 107, 109, 109,
	108, 108, 108, 87, 87, 25, 78, 78, 79, 79,
	156, 80, 80, 19, 19, 28, 28, 26, 26, 26,
	26, 26, 26, 27, 27, 29, 29, 29, 29, 29,
	29, 29, 211, 211, 211, 213, 213, 210, 15, 15,
	15, 15, 212, 212, 234, 234, 88, 88, 88, 59,
	58, 58, 62, 62, 61, 63, 63, 148, 85, 85,
	85, 85, 103, 104, 104, 105, 105, 106, 106, 84,
	84, 132, 132, 30, 30, 69, 69, 70, 70, 123,
	123, 124, 124, 122, 122, 122, 151, 151, 151, 151,
	152, 152, 152, 152, 152, 152, 146, 146, 146, 146,
	147, 147, 157, 157, 91, 91, 91, 91, 89, 89,
	90, 90, 153, 153, 153, 153, 86, 86, 154, 154,
	154, 118, 118, 160, 160, 160, 68, 68, 68, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 162, 162, 162, 162, 164, 164, 164, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 165, 165, 172, 172, 173, 173, 174, 175,
	166, 166, 167, 167, 168, 169, 176, 176, 176, 176,
	178, 178, 170, 170, 170, 170, 170, 171, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 98, 98, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 206, 206, 206,
	206, 206, 206, 206, 208, 208, 209, 209, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 214, 214, 215, 215, 216, 216, 217,
	217, 219, 220, 220, 220, 221, 225, 225, 218, 218,
	222, 222, 222, 223, 223, 224, 224, 224, 224, 224,
	136, 136, 136, 137, 137, 138, 75, 75, 134, 134,
	133, 133, 133, 135, 135, 92, 177, 177, 177, 177,
	177, 177, 177, 93, 93, 99, 94, 94, 95, 95,
	95, 95, 95, 95, 129, 130, 96, 96, 96, 131,
	131, 139, 143, 143, 142, 141, 141, 140, 140, 121,
	121, 121, 121, 120, 119, 81, 81, 236, 236, 144,
	144, 82, 82, 83, 77, 77, 155, 155, 155, 155,
	71, 71, 52, 52, 72, 72, 48, 48, 51, 49,
	49, 49, 49, 66, 66, 67, 67, 46, 46, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	179, 179, 179, 41, 41, 41, 42, 42, 43, 43,
	185, 185, 185, 186, 186, 186, 186, 184, 184, 184,
	184, 184, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 6,
	3, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 4, 2, 4,
	4, 4, 4, 3, 3, 4, 3, 2, 4, 2,
	0, 2, 0, 2, 0, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 2, 0, 3, 1,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	5, 3, 1, 4, 5, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 10, 13, 1, 0, 1, 3, 3,
	3, 5, 1, 3, 1, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 4, 7, 3, 0, 6, 6,
	8, 5, 7, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 0, 8, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 4, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 4, 5, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	2, 2, 1, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -212, 84, 91, 106, 193,
	200, -26, -28, 208, 209, 29, 217, 53, 87, 195,
	190, 237, 59, -211, -29, -27, 283, 258, 264, 203,
	-30, 224, 251, 286, 224, 71, 117, 79, 121, 245,
	244, 71, 117, 224, -12, 283, -19, -5, -10, -4,
	-14, -25, -9, -11, 19, -230, 18, -231, -232, 59,
	84, 106, 203, 121, 79, 244, -230, -45, 200, -41,
	4, -190, -192, 16, 17, 19, 28, 29, 34, 38,
	41, 52, 53, 54, 56, 58, 61, 62, 69, 70,
	71, 72, 74, 79, 83, 84, 86, 91, 96, 97,
	100, 102, 107, 112, 113, 118, 121, 129, 131, 132,
	137, 140, 143, 145, 146, 147, 148, 149, 151, 152,
	154, 156, 153, 159, 161, 162, 168, 171, 174, 175,
	178, 181, 182, 183, 185, 186, 190, 188, 189, 191,
	193, 195, 196, 198, 201, 202, 205, 206, 208, 209,
	211, 214, 216, 217, 220, 218, 223, 225, 226, 233,
	237, 238, 239, 240, 243, 244, 245, 248, 249, 250,
	254, 259, 260, 261, 262, 30, 31, 32, 33, 35,
	36, 39, 40, 44, 45, 46, 48, 73, 75, 76,
	90, 92, 98, 108, 110, 114, 115, 122, 123, 124,
	126, 135, 158, 160, 169, 173, 177, 179, 184, 197,
	204, 212, 213, 219, 221, 228, 229, 230, 234, 235,
	251, 252, -111, 140, 206, 233, -112, -110, -183, 228,
	149, -73, -41, 200, 4, 71, 52, 72, 107, 117,
	118, 132, 225, 228, 233, 18, 59, -235, 233, 233,
	-235, -235, -44, 233, 231, -45, -234, 224, 224, -100,
	71, 242, -27, -29, -28, -61, -62, 241, 125, 89,
	167, -26, -28, -211, -213, 185, -210, -41, -213, -58,
	-59, 18, 81, 287, -153, -48, 165, -41, -83, 283,
	-3, -153, 114, -41, -51, 114, -48, 104, 127, 127,
	-154, -153, -41, 114, -52, 114, -51, -74, 114, -73,
	-159, -158, -186, 4, -190, -192, -191, 251, 50, 60,
	105, 120, 128, 130, 136, 138, 150, 170, 172, 194,
	210, 224, 164, 287, 164, -41, -111, 46, -111, -113,
	-39, -40, 129, 181, 231, 268, 104, 262, -55, 5,
	77, -76, 285, 104, -227, 164, 104, 104, 104, -182,
	104, 262, 129, 181, 224, -114, -39, -40, -114, 231,
	-45, -86, -153, -73, 114, 117, -41, 114, -61, -62,
	-85, -103, -104, 139, 163, -88, 18, 81, -88, -88,
	38, 284, 284, 287, -213, -67, 283, -77, -155, -125,
	276, -127, 274, 275, 280, 155, 263, -136, -48, -128,
	9, 283, -139, -208, -28, 90, 24, -137, -138, 197,
	-41, 7, 8, 5, 6, -46, -162, -171, 236, 93,
	157, 42, -206, -207, 4, -190, -185, -163, -173, -167,
	-170, 126, 50, 64, 67, 65, 68, 207, 246, 43,
	92, 173, 177, 221, 234, 235, 114, 158, 115, 48,
	108, 135, 83, 31, 33, 35, 36, 44, 45, 73,
	75, 76, 98, 122, 123, 124, 160, 184, 212, 219,
	229, 230, 252, -191, -174, -175, -168, -169, -176, -77,
	-83, 276, -48, 283, -81, -121, -120, -119, 281, 285,
	-82, -144, -125, 77, -35, 188, -34, 17, 19, 84,
	249, 90, 188, 188, 90, 288, -154, -50, -48, -50,
	208, -41, 25, 90, -37, 287, 41, 191, 90, -37,
	287, 90, 284, 287, -153, 114, -226, -72, 224, 71,
	-49, -41, 276, -232, -226, 25, 287, 287, 137, -54,
	143, 154, 112, -181, 77, -188, -180, -145, 9, 236,
	93, 164, -187, 8, 275, -179, -186, 5, 7, 274,
	-181, 77, 62, -189, 5, 4, -171, -145, 77, 140,
	126, 285, -184, 4, -190, -192, -191, -193, 18, 20,
	21, 22, 23, 24, 25, 26, 27, 37, 42, 43,
	47, 49, 51, 57, 59, 63, 64, 65, 66, 67,
	68, 77, 78, 80, 81, 82, 85, 87, 89, 93,
	94, 95, 101, 103, 104, 106, 109, 111, 116, 117,
	119, 125, 127, 133, 134, 139, 141, 142, 155, 157,
	163, 164, 165, 166, 167, 176, 180, 187, 192, 203,
	207, 215, 222, 224, 227, 231, 232, 236, 241, 242,
	246, 247, 253, 255, 256, 257, 258, -183, -229, 101,
	-226, -183, -183, -183, -183, 137, -183, 287, 287, -45,
	-37, 287, 283, 155, -42, 114, -41, -38, 86, 155,
	-85, -104, -103, -105, -125, 18, -125, -127, -27, -27,
	-27, -63, -148, -125, -210, 25, -66, -41, -69, 287,
	104, 10, 49, 28, 274, 275, 276, 277, 99, 278,
	271, 272, 273, 270, 266, 267, 268, 55, 144, 199,
	12, 13, 14, 22, 166, 138, 263, 210, 128, 30,
	116, 25, 4, -125, -125, -125, -125, -125, 172, -28,
	-125, -75, -81, -28, -133, 281, 283, -81, 283, 5,
	5, 283, -140, -125, -214, 259, 101, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 179, -178, 254, -178, -178, -164, 283, -164,
	-165, 283, -164, 260, 264, 283, -69, -48, -121, -125,
	-184, 276, 287, 284, 287, 231, -101, 57, 51, -116,
	114, 51, -194, -41, 57, -195, 47, 242, 180, 103,
	-101, 57, -101, 57, 57, -153, 231, 231, -51, -41,
	-118, 256, -107, -19, 283, 77, 25, -107, -78, -79,
	-156, -80, -48, 283, -41, -41, -51, -52, -73, -74,
	-12, -158, 90, 231, 287, -72, -66, -120, -119, 104,
	233, -40, -39, -53, 183, 214, 189, 205, 287, 8,
	7, 7, 5, -184, -228, -41, -40, -39, -153, -56,
	-57, -117, -116, -196, -197, -194, 117, 242, 94, 90,
	164, 155, 268, 90, -106, 197, 198, 287, -33, 26,
	80, 283, 287, 284, -118, -155, -70, -151, -153, -28,
	-152, 283, -160, -161, -163, -172, -166, -170, -171, 34,
	40, 39, 226, 204, 213, 32, 122, 123, 124, 212,
	31, 184, 98, 83, 76, 75, 160, 36, 35, -174,
	-175, -168, -169, 73, 229, 230, 33, 45, 44, 252,
	219, -73, 228, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, 138, 210, 30, 116, 231,
	157, 155, 236, 93, 243, 81, 161, -236, 222, 27,
	-131, -28, 283, -184, -136, 197, 283, 284, 287, -75,
	-135, 282, -125, -133, -75, 284, 284, -75, 253, 18,
	81, 276, -97, 261, 147, 74, 113, 146, -98, 202,
	7, -143, -142, 255, -215, 96, 109, 283, 284, 284,
	-125, -92, -177, 4, 261, 147, 74, 113, 146, 202,
	-93, -125, -94, -126, -127, 274, 275, 280, 283, 197,
	-95, -125, -75, -125, 37, 134, 232, -96, -125, 104,
	-75, -125, -125, -125, -75, -75, -75, 283, 7, 7,
	228, 228, 7, -118, 284, 282, 291, -144, -34, -48,
	-41, -41, 155, -116, 114, -160, -41, 283, 283, 131,
	131, -41, -41, 114, -41, 114, -41, -41, -35, 188,
	-41, -41, 188, -87, 192, -125, -87, -109, 164, -71,
	-48, 251, -41, 192, -69, 287, 268, -71, -37, -37,
	-153, -228, -49, -228, -39, 240, 54, 183, -188, -97,
	287, 284, 287, -42, 117, -42, -73, -48, 90, 5,
	-41, -148, -15, -19, -14, -25, -9, -41, -84, 109,
	287, 60, -91, 130, 150, 105, 136, 194, 120, -122,
	288, -147, -146, 25, -41, -28, -152, -151, -68, 24,
	-97, 283, 262, -125, 231, -236, 222, -131, -125, 157,
	236, 93, 243, 81, 161, 104, 283, -126, -126, -75,
	283, -75, -125, 287, 282, 282, 287, 284, -62, 287,
	-61, -125, -75, -75, 284, 231, 231, 231, 231, 283,
	284, -141, -142, 85, -125, -220, 171, 283, 283, -125,
	25, 284, 104, 284, -99, 176, 284, 10, 274, 275,
	276, 277, 99, 278, 271, 272, 273, 270, 266, 267,
	268, 55, 144, 199, 12, 13, 14, 128, 116, -126,
	-126, -126, -75, 283, 284, -129, -130, 104, 101, 25,
	-96, -96, -96, 284, 104, -75, 287, 287, 287, 284,
	284, 284, 7, 284, 287, 284, 262, 262, 284, -84,
	-125, 231, 231, 90, 155, -198, -195, -125, -66, 283,
	283, -32, 84, 208, -102, 90, -37, 90, -37, 231,
	-101, 57, 231, -77, 192, 56, 284, 287, -77, -118,
	-79, -144, 284, -41, -117, 283, -42, 283, 283, 283,
	-41, -38, 284, -132, 111, 38, -151, 130, 130, -151,
	-91, 130, -89, 170, -89, -89, -147, -184, 289, -41,
	283, 284, 281, 281, 7, -125, -125, -126, -126, 104,
	283, -125, -134, -160, 22, 22, 284, -75, 284, 287,
	284, -125, -133, 284, 253, -62, -62, -62, 147, 113,
	146, -98, 146, -98, -98, 7, 5, 87, -125, 227,
	-221, -41, 283, 256, -61, 284, -160, -125, -129, -125,
	-160, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	81, 155, 161, -126, 287, -75, 284, -130, -129, -125,
	-125, -160, 284, 284, 284, -75, -125, -125, -125, 284,
	7, -132, 282, -41, -41, -116, 90, -199, 57, -200,
	49, 155, 157, 242, 180, 47, 77, 187, 284, 284,
	-66, -66, 155, 77, 155, 77, 70, 238, -41, -41,
	-48, -41, -41, -41, -77, -108, 283, 164, -19, -48,
	-87, 268, -64, -149, -41, -209, 283, -206, -207, -46,
	283, -65, -150, -41, -56, -64, 164, -216, 257, -125,
	-75, -151, -151, -90, 247, 164, 130, -151, -157, 265,
	-124, -123, 102, 153, 283, -66, -146, 282, 7, 7,
	284, 22, 22, -125, -134, 284, 287, -125, -125, 284,
	-125, 5, -125, 284, 284, 284, 284, -125, -225, -41,
	-125, 284, 284, -130, 104, 81, 161, 283, -125, 284,
	284, 287, 284, 284, 284, -216, -116, -41, -73, 157,
	131, 283, -126, -48, -115, -233, 58, 220, 284, 284,
	157, 157, -125, -160, -37, -37, 231, 231, 82, -66,
	57, -83, -28, 283, 284, 287, -47, -81, 49, -47,
	-125, 283, -64, 284, 287, 284, 284, -48, -217, -219,
	-41, -90, 283, -125, -151, 161, 287, 290, 268, -66,
	284, 282, 282, -125, -125, 284, -160, 284, -62, -218,
	175, 284, -126, 104, 283, -134, 284, -125, -200, -125,
	-43, 283, 283, 187, -36, 49, -41, -41, 244, 156,
	284, -41, -115, -149, -33, -73, -33, 284, -75, 284,
	-150, -115, 283, 287, 25, -66, 223, -123, -184, 284,
	284, -62, 38, -126, -134, 284, 284, 284, -203, 145,
	-41, -66, -48, -31, 247, -73, 208, -118, -47, -62,
	-115, -64, -219, -221, 284, 228, -222, 182, 198, -75,
	284, -201, -204, -202, 164, 105, 174, 211, 284, 284,
	-60, 283, -125, -78, -33, 284, 284, 5, 284, -223,
	-224, 30, 239, 62, -125, -223, -202, 164, -204, 164,
	244, 79, -203, -66, -118, -115, -224, 178, 100, 197,
	178, 100, -205, 152, 191, 41, 208, -205, -201, 284,
	22, 16, 157, 77, -224,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 333, 0, 0,
	0, 303, -2, 0, 0, 261, 0, 261, 261, 265,
	0, 335, 226, 332, -2, 343, 0, 0, 0, 341,
	317, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	72, 73, 74, 75, 0, 0, 84, 85, 86, 88,
	89, 90, 91, 92, 93, 94, 0, 254, 843, 267,
	753, 754, 755, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 97, 810, 847, 859, 102, 112, 0, 915,
	-2, 116, 62, 843, 145, 146, 0, 148, 162, 0,
	0, 0, 160, 0, 0, 157, 0, 272, 260, 272,
	257, 258, 259, 262, 0, 253, 0, 334, 0, 0,
	0, 225, -2, 313, 314, -2, 0, 338, 338, 338,
	0, 0, 314, 0, 322, 833, 325, 736, 323, 0,
	0, 340, 339, 0, 318, 402, 0, 726, 363, 0,
	2, 0, 895, 0, 0, 895, 0, 0, 0, 0,
	0, 408, 54, 895, 45, 895, 722, 45, 895, 60,
	0, 76, 78, 763, 764, 765, 766, 920, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 0, 0, 0, 0, 266, 98, 885, 100, 101,
	103, 104, 0, 0, 0, 0, 0, 0, 115, 140,
	141, 63, 0, 0, 164, 0, 0, 0, 0, 153,
	0, 154, 0, 156, 0, 255, 268, 269, 256, 0,
	264, 45, 406, 0, 895, 757, 277, 895, -2, 0,
	309, 350, 351, 0, 0, 0, 336, 337, 0, 0,
	0, 305, 306, 0, 324, 0, 0, 366, 714, 718,
	719, 494, 0, 0, 0, 0, 0, 0, 575, 576,
	577, 0, 579, 580, 581, 890, 0, 585, 586, 909,
	726, 739, 740, 741, 742, 0, 0, 0, 747, 748,
	749, 698, 624, 595, -2, -2, 737, 432, 433, 434,
	435, -2, 922, 599, 601, 603, 604, 605, 606, 0,
	891, 905, 906, 914, 918, 919, 895, 902, 896, 886,
	893, 901, 793, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 762, 456, 457, 462, 463, 465, 366,
	364, 403, 404, 0, 727, 705, 699, 700, 0, 0,
	0, 711, 709, 710, 22, 250, 24, 0, 250, 250,
	0, 0, 0, 0, 0, 0, 412, 0, 283, 0,
	0, 409, 0, 0, 56, 0, 43, 44, 0, 58,
	0, 0, 333, 0, 0, 895, 0, 81, 0, 789,
	724, 729, 732, 87, 0, 0, 0, 0, 0, 107,
	127, 128, 129, 108, 110, 117, 119, 120, 121, 130,
	131, 132, 133, 219, 0, 221, 143, 144, 750, 0,
	109, 111, 113, 114, 134, 135, 0, 137, 138, 139,
	477, 0, 64, 767, 768, 769, 770, 771, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 147, 149, 0,
	161, 150, 151, 152, 159, 155, 158, 0, 0, 263,
	222, 0, 168, 0, 0, 895, 756, 274, 0, 0,
	312, 348, 349, 352, 355, 356, 353, 494, 319, 320,
	321, 344, 345, 239, 326, 0, 0, 733, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 717, 498, 499, 500, 522, 523, 0, -2,
	656, 0, 582, 583, 584, 0, 0, -2, 0, 744,
	491, 0, 0, 697, 626, 0, 0, 0, 0, 0,
	0, 0, 677, 683, 0, 0, 0, 0, 0, 0,
	0, 0, 446, 459, 470, 467, 466, 448, 0, 447,
	445, 0, 449, 0, 0, 0, 412, 0, 706, 0,
	703, 704, 0, 713, 0, 0, 0, 0, 249, 26,
	895, 0, 36, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 728,
	294, 0, 294, 285, 0, 0, 0, 281, 366, 296,
	298, 299, 0, 0, 410, 55, 723, 45, 61, 45,
	67, 77, 0, 0, 0, 82, 83, 730, 731, 0,
	0, 105, 106, 273, 0, 124, 0, 126, 0, 220,
	752, 751, 491, 65, 163, 95, 270, 271, 407, 0,
	167, 169, 171, 172, 173, 174, 757, 0, 757, 0,
	0, 0, 0, 0, 354, 357, 358, 0, 347, 237,
	238, 333, 0, 735, 360, 715, 365, 367, 375, 391,
	378, 0, 495, 418, 419, 420, 421, 422, 491, 425,
	426, 427, 428, 429, 430, 431, 439, 440, 441, 442,
	443, 444, 453, 0, 438, 438, 438, 450, 451, 454,
	455, 460, 461, 472, 473, 475, 471, 471, 471, 468,
	469, 496, 0, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, -2, -2, -2, 514, 515, 516, -2,
	-2, -2, 520, 521, -2, 0, 0, 708, 0, 0,
	528, 0, 531, 533, 535, 0, 0, 0, 0, 707,
	545, 689, 0, 716, 530, 0, 0, 578, 0, 0,
	0, 662, 656, 663, 0, -2, 587, 343, 0, 0,
	0, 0, 745, 478, 479, 480, 481, 482, 483, 492,
	0, 696, 692, 0, 634, 0, 0, 0, 600, 602,
	0, 0, 0, 666, 667, 668, 669, 670, 671, 672,
	0, 0, 0, 0, 547, 0, 0, 0, 0, 909,
	0, 656, 682, 0, 0, 0, 0, 0, 656, 0,
	688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 405, 701, 0, 712, 25, 241,
	0, 0, 0, 28, 895, 177, 0, 0, 0, 0,
	0, 252, 37, 895, 45, 895, 45, 38, 23, 250,
	240, 243, 0, 53, 0, 411, 278, 279, 0, 0,
	720, 287, 284, 0, 412, 0, 0, 0, 57, 59,
	0, 79, 725, 80, 99, 122, 123, 125, 118, 136,
	0, 165, 0, 0, 757, 0, 0, 0, 0, 276,
	277, 346, 0, 328, 329, 330, 331, 734, 362, 0,
	0, 0, 0, 0, 0, 399, 399, 399, 397, 391,
	0, 377, 390, 0, 389, -2, 378, 0, 413, 415,
	423, 0, 0, -2, 0, 0, 0, 546, -2, 529,
	532, 534, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 0, 660, 661, 0, -2, 0, 0,
	342, 343, 343, 343, 593, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 0, 594, 0, 0, 0, 0,
	0, 608, 0, 609, 0, 0, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 551, 0, 0, 611, 680, 681, 0, 0, 0,
	0, 0, 0, 616, 0, 687, 0, 0, 0, 620,
	621, 622, 0, 436, 0, 452, 474, 476, 464, 362,
	0, 0, 0, 0, 0, 175, 191, 0, 0, 0,
	0, 30, 0, 0, 0, 0, 34, 0, 40, 0,
	0, 0, 0, 293, 0, 292, 0, 0, 282, 294,
	297, 300, 0, 96, 170, 0, 0, 0, 168, 0,
	0, 275, 327, 628, 0, 0, 368, 0, 0, 0,
	0, 0, 394, 398, 395, 396, 393, 373, 0, 387,
	0, 380, 0, 0, 0, 497, -2, 0, 0, 0,
	0, -2, 0, 658, 0, 0, 690, 0, 651, 0,
	-2, 657, 664, 588, 0, 0, 0, 0, 484, 485,
	486, 487, 488, 489, 490, 0, 746, 691, 695, 0,
	632, 633, 637, 0, 0, 598, 0, 665, 674, 675,
	548, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, -2, -2, -2, 565, 566, 567, -2, -2, -2,
	0, 0, 0, 676, 0, 0, 654, 678, 679, 684,
	685, 0, 613, 614, 615, 686, 0, 0, 0, 458,
	0, 628, 702, 245, 247, 27, 0, 176, 0, 179,
	0, 0, 182, 183, 0, 0, 0, 0, 193, 200,
	0, 0, 0, 42, 0, 0, 251, 0, 45, 45,
	242, 0, 0, 244, 280, 0, 0, 0, 286, 721,
	295, 0, 0, 227, 236, 236, 0, 596, 597, 0,
	0, 0, 232, 234, 0, 0, 0, 315, 0, 361,
	359, 381, 0, 383, 0, 0, 0, 385, 376, 0,
	0, 371, 0, 370, 0, 0, 379, 416, 0, 0,
	424, 0, 0, -2, 0, 539, 0, -2, -2, 650,
	657, 743, 343, 589, 591, 592, 493, 694, 639, 636,
	0, 623, 607, 673, 0, 0, 0, 0, 657, 653,
	612, 0, 618, 619, 437, 316, 29, 0, 180, 181,
	184, 0, 186, 759, 194, 0, 197, 198, 195, 0,
	31, 32, 41, 47, 33, 39, 0, 0, 0, 0,
	0, 301, 302, 0, 200, 0, 239, 738, 0, 239,
	0, 0, 0, 190, 0, 166, 200, 0, 627, 629,
	0, 382, 0, 401, 384, 0, 0, 374, 0, 0,
	388, 417, 414, -2, -2, 540, 659, 652, 0, 343,
	0, 625, -2, 0, 0, 0, 655, 0, 178, 0,
	206, 0, 0, 0, 49, 0, 246, 248, 0, 289,
	412, 291, 188, 228, 229, 235, 230, 236, 343, 200,
	233, 223, 0, 0, 0, 0, 0, 372, 369, 386,
	590, 642, 0, -2, 0, 573, 617, 185, 211, 0,
	0, 0, 202, 35, 0, 46, 0, 290, 239, 0,
	189, 0, 630, 631, 400, 0, 0, 0, 0, 638,
	574, 187, 207, 208, 0, 203, 204, 205, 758, 199,
	206, 0, 48, 412, 231, 588, 200, 392, 635, 640,
	643, -2, 862, 786, 0, 641, 209, 0, 210, 0,
	0, 0, 211, 0, 288, 224, 0, 645, 646, 647,
	648, 649, 212, 0, 215, 216, 0, 213, 196, 201,
	0, 214, 217, 218, 644,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 272, 3, 278, 273, 3,
	283, 284, 276, 274, 287, 275, 285, 277, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 291, 286,
	266, 268, 267, 3, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 281, 3, 282, 271, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 289, 270, 290, 280,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 269, 57609, 279,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:686
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:692
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:734
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:802
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:811
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:857
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:861
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{ /* SKIP DOC */
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			unimplemented()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1147
		{
			unimplemented()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = Low
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = Normal
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = High
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			unimplemented()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			unimplemented()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1260
		{
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1342
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = []string(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{ /* unimplemented */
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			unimplemented()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1542
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = []string(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = []string(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1581
		{
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1588
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1592
		{
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1595
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1598
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1601
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			unimplemented()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1604
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1605
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = true
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = false
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1681
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1701
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Ascending
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = Descending
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = true
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = false
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1768
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1810
		{
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.str = ""
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.str = ""
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1905
		{
			unimplementedWithIssue(6637)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1912
		{
			unimplementedWithIssue(6637)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1954
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			unimplemented()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = []string(nil)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2205
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			unimplemented()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			unimplemented()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2213
		{
			unimplemented()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
			unimplemented()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2226
		{
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2229
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2230
		{
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = false
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = false
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = true
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2254
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2353
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2404
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.str = astFullJoin
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.str = astLeftJoin
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.str = astRightJoin
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.str = astInnerJoin
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2599
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2689
		{
			unimplementedWithIssue(2115)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2690
		{
			unimplementedWithIssue(2115)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			unimplementedWithIssue(2115)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2694
		{
			unimplementedWithIssue(2115)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2703
		{
			unimplemented()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2759
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = nil
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2876
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2903
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2943
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2980
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2987
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3019
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3402
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3403
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3440
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3444
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3485
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3529
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3530
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3533
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3534
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3539
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3549
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3551
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3555
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3567
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3571
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3581
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3584
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3593
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3594
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3595
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3922
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4114
		{
			unimplemented()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = DNull
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.str = ""
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
