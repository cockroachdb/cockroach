// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:36

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:259
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FORCE_INDEX = 57440
const FOREIGN = 57441
const FROM = 57442
const FULL = 57443
const GRANT = 57444
const GRANTS = 57445
const GREATEST = 57446
const GROUP = 57447
const GROUPING = 57448
const HAVING = 57449
const HIGH = 57450
const HOUR = 57451
const IF = 57452
const IFNULL = 57453
const IN = 57454
const INDEX = 57455
const INDEXES = 57456
const INITIALLY = 57457
const INNER = 57458
const INSERT = 57459
const INT = 57460
const INT64 = 57461
const INTEGER = 57462
const INTERSECT = 57463
const INTERVAL = 57464
const INTO = 57465
const IS = 57466
const ISOLATION = 57467
const JOIN = 57468
const KEY = 57469
const KEYS = 57470
const LATERAL = 57471
const LEADING = 57472
const LEAST = 57473
const LEFT = 57474
const LEVEL = 57475
const LIKE = 57476
const LIMIT = 57477
const LOCAL = 57478
const LOCALTIME = 57479
const LOCALTIMESTAMP = 57480
const LOW = 57481
const LSHIFT = 57482
const MATCH = 57483
const MINUTE = 57484
const MONTH = 57485
const NAME = 57486
const NAMES = 57487
const NATURAL = 57488
const NEXT = 57489
const NO = 57490
const NO_INDEX_JOIN = 57491
const NORMAL = 57492
const NOT = 57493
const NOTHING = 57494
const NULL = 57495
const NULLIF = 57496
const NULLS = 57497
const NUMERIC = 57498
const OF = 57499
const OFF = 57500
const OFFSET = 57501
const ON = 57502
const ONLY = 57503
const OR = 57504
const ORDER = 57505
const ORDINALITY = 57506
const OUT = 57507
const OUTER = 57508
const OVER = 57509
const OVERLAPS = 57510
const OVERLAY = 57511
const PARTIAL = 57512
const PARTITION = 57513
const PLACING = 57514
const POSITION = 57515
const PRECEDING = 57516
const PRECISION = 57517
const PRIMARY = 57518
const PRIORITY = 57519
const RANGE = 57520
const READ = 57521
const REAL = 57522
const RECURSIVE = 57523
const REF = 57524
const REFERENCES = 57525
const RENAME = 57526
const REPEATABLE = 57527
const RELEASE = 57528
const RESTRICT = 57529
const RETURNING = 57530
const REVOKE = 57531
const RIGHT = 57532
const ROLLBACK = 57533
const ROLLUP = 57534
const ROW = 57535
const ROWS = 57536
const RSHIFT = 57537
const SAVEPOINT = 57538
const SEARCH = 57539
const SECOND = 57540
const SELECT = 57541
const SERIALIZABLE = 57542
const SESSION = 57543
const SESSION_USER = 57544
const SET = 57545
const SHOW = 57546
const SIMILAR = 57547
const SIMPLE = 57548
const SMALLINT = 57549
const SNAPSHOT = 57550
const SOME = 57551
const SQL = 57552
const START = 57553
const STRICT = 57554
const STRING = 57555
const STORING = 57556
const SUBSTRING = 57557
const SYMMETRIC = 57558
const TABLE = 57559
const TABLES = 57560
const TEXT = 57561
const THEN = 57562
const TIME = 57563
const TIMESTAMP = 57564
const TIMESTAMPTZ = 57565
const TO = 57566
const TRAILING = 57567
const TRANSACTION = 57568
const TREAT = 57569
const TRIM = 57570
const TRUE = 57571
const TRUNCATE = 57572
const TYPE = 57573
const UNBOUNDED = 57574
const UNCOMMITTED = 57575
const UNION = 57576
const UNIQUE = 57577
const UNKNOWN = 57578
const UPDATE = 57579
const USER = 57580
const USING = 57581
const VALID = 57582
const VALIDATE = 57583
const VALUE = 57584
const VALUES = 57585
const VARCHAR = 57586
const VARIADIC = 57587
const VARYING = 57588
const WHEN = 57589
const WHERE = 57590
const WINDOW = 57591
const WITH = 57592
const WITHIN = 57593
const WITHOUT = 57594
const YEAR = 57595
const ZONE = 57596
const NOT_LA = 57597
const WITH_LA = 57598
const POSTFIXOP = 57599
const UMINUS = 57600

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4221

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	277, 21,
	-2, 318,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 289,
	160, 289,
	188, 289,
	275, 289,
	277, 289,
	-2, 299,
	-1, 44,
	1, 292,
	160, 292,
	188, 292,
	275, 292,
	277, 292,
	-2, 298,
	-1, 53,
	1, 21,
	277, 21,
	-2, 318,
	-1, 238,
	1, 138,
	277, 138,
	-2, 789,
	-1, 269,
	135, 328,
	159, 328,
	-2, 295,
	-1, 272,
	135, 327,
	159, 327,
	-2, 293,
	-1, 382,
	135, 327,
	159, 327,
	-2, 296,
	-1, 438,
	274, 734,
	-2, 729,
	-1, 439,
	274, 735,
	-2, 730,
	-1, 445,
	6, 455,
	274, 455,
	-2, 870,
	-1, 467,
	6, 424,
	-2, 847,
	-1, 468,
	6, 451,
	274, 451,
	-2, 848,
	-1, 469,
	6, 432,
	-2, 849,
	-1, 470,
	6, 431,
	-2, 850,
	-1, 471,
	6, 451,
	274, 451,
	-2, 853,
	-1, 472,
	6, 451,
	274, 451,
	-2, 854,
	-1, 473,
	6, 452,
	-2, 857,
	-1, 474,
	6, 419,
	-2, 858,
	-1, 475,
	6, 419,
	-2, 859,
	-1, 476,
	6, 434,
	-2, 862,
	-1, 477,
	6, 420,
	-2, 867,
	-1, 478,
	6, 421,
	-2, 868,
	-1, 479,
	6, 422,
	-2, 869,
	-1, 480,
	6, 419,
	-2, 873,
	-1, 481,
	6, 425,
	-2, 878,
	-1, 482,
	6, 423,
	-2, 880,
	-1, 483,
	6, 453,
	-2, 884,
	-1, 484,
	6, 454,
	-2, 885,
	-1, 485,
	6, 449,
	274, 449,
	-2, 889,
	-1, 743,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	234, 299,
	-2, 557,
	-1, 751,
	274, 714,
	-2, 703,
	-1, 946,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 488,
	-1, 947,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 489,
	-1, 948,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 490,
	-1, 952,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 494,
	-1, 953,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 495,
	-1, 954,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 496,
	-1, 957,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 501,
	-1, 988,
	168, 627,
	-2, 630,
	-1, 1140,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	234, 299,
	-2, 376,
	-1, 1148,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 502,
	-1, 1153,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 503,
	-1, 1172,
	168, 626,
	-2, 629,
	-1, 1315,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 504,
	-1, 1320,
	124, 0,
	-2, 514,
	-1, 1329,
	168, 628,
	-2, 631,
	-1, 1369,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 538,
	-1, 1370,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 539,
	-1, 1371,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 540,
	-1, 1375,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 544,
	-1, 1376,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 545,
	-1, 1377,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 546,
	-1, 1475,
	124, 0,
	-2, 515,
	-1, 1479,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 518,
	-1, 1480,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 520,
	-1, 1562,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 519,
	-1, 1563,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 521,
	-1, 1571,
	124, 0,
	-2, 547,
	-1, 1610,
	124, 0,
	-2, 548,
	-1, 1655,
	30, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 846,
}

const sqlNprod = 981
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20042

var sqlAct = [...]int{

	985, 1654, 1675, 1637, 1615, 1638, 1516, 1639, 1653, 829,
	885, 1349, 1579, 1549, 273, 1463, 1538, 86, 437, 436,
	429, 1440, 1321, 1439, 581, 701, 1457, 822, 498, 1407,
	295, 1451, 1230, 239, 746, 1229, 526, 1137, 869, 278,
	31, 14, 486, 1175, 1292, 872, 748, 1084, 871, 1301,
	1136, 681, 830, 504, 894, 401, 1127, 798, 807, 1005,
	1123, 1040, 973, 777, 970, 1001, 781, 31, 995, 65,
	897, 697, 280, 43, 539, 20, 10, 554, 6, 1089,
	507, 370, 321, 703, 509, 864, 895, 1043, 411, 272,
	499, 500, 402, 31, 565, 536, 315, 283, 44, 317,
	43, 63, 371, 67, 66, 313, 68, 322, 312, 310,
	385, 81, 386, 535, 874, 384, 45, 236, 556, 552,
	281, 72, 1555, 823, 528, 1556, 43, 827, 528, 277,
	998, 1651, 306, 1645, 1537, 1168, 889, 1322, 291, 277,
	1644, 298, 270, 889, 1636, 1631, 307, 1478, 889, 1601,
	412, 1612, 262, 1094, 1478, 1606, 1135, 1170, 889, 318,
	269, 1598, 1171, 705, 1537, 301, 999, 1589, 1564, 285,
	1537, 1478, 1559, 49, 1546, 889, 706, 1537, 724, 725,
	726, 1536, 1521, 1520, 1537, 889, 889, 1501, 727, 1481,
	1168, 51, 1168, 704, 708, 1477, 733, 518, 1478, 1000,
	997, 1417, 292, 1325, 889, 292, 1168, 303, 1283, 706,
	292, 1279, 303, 1278, 707, 1247, 1279, 52, 1248, 1245,
	721, 705, 1168, 1244, 47, 1243, 1168, 708, 1168, 1172,
	48, 1169, 1168, 1382, 890, 795, 1168, 889, 794, 533,
	1328, 49, 534, 1107, 1174, 1540, 796, 707, 46, 1125,
	49, 1109, 389, 889, 1168, 1002, 844, 531, 981, 51,
	501, 884, 858, 396, 502, 397, 502, 675, 51, 674,
	546, 529, 545, 338, 290, 529, 501, 431, 734, 53,
	502, 580, 357, 1652, 383, 52, 1650, 403, 403, 1607,
	732, 1545, 47, 1506, 52, 1502, 1494, 505, 48, 377,
	729, 47, 49, 1493, 1488, 1487, 722, 48, 1486, 1485,
	996, 1472, 1434, 382, 1397, 345, 64, 1111, 1392, 1391,
	51, 493, 1390, 1332, 1310, 826, 1580, 1202, 728, 497,
	1291, 1146, 978, 1250, 1249, 1237, 346, 1228, 1351, 722,
	1201, 1094, 1198, 492, 1196, 488, 52, 1185, 1179, 1108,
	376, 1055, 1012, 1011, 396, 395, 1600, 1581, 1557, 1573,
	1552, 723, 527, 1543, 1535, 1513, 678, 321, 321, 754,
	1499, 731, 1466, 374, 1447, 584, 1470, 46, 1319, 270,
	1309, 1289, 1288, 1286, 1262, 1261, 1227, 1193, 689, 691,
	1192, 307, 322, 322, 723, 698, 1184, 269, 1165, 704,
	585, 1161, 1202, 398, 1218, 1219, 1220, 737, 738, 739,
	740, 741, 677, 979, 292, 975, 744, 782, 785, 1069,
	1068, 730, 1050, 718, 719, 720, 1433, 717, 714, 715,
	716, 709, 710, 711, 712, 713, 757, 519, 1010, 1056,
	749, 888, 1202, 787, 495, 775, 1215, 774, 1057, 773,
	772, 771, 770, 543, 769, 292, 521, 1216, 768, 751,
	542, 714, 715, 716, 709, 710, 711, 712, 713, 501,
	569, 576, 767, 502, 668, 766, 665, 487, 1069, 669,
	670, 671, 765, 672, 764, 676, 1215, 706, 270, 763,
	762, 270, 270, 706, 761, 699, 752, 687, 686, 685,
	750, 46, 791, 745, 1222, 708, 693, 679, 296, 694,
	695, 708, 1217, 400, 1561, 1560, 1221, 1312, 1311, 494,
	584, 1438, 1095, 1147, 1202, 707, 790, 792, 392, 393,
	1202, 707, 1216, 366, 352, 779, 780, 369, 759, 444,
	1452, 823, 783, 351, 1352, 585, 1188, 786, 1006, 778,
	706, 1091, 321, 1621, 1425, 1202, 801, 1664, 1588, 439,
	31, 261, 825, 260, 846, 839, 315, 850, 708, 812,
	814, 255, 1216, 31, 57, 65, 788, 322, 1211, 1208,
	1209, 1210, 1203, 1204, 1205, 1206, 1207, 1217, 707, 800,
	85, 256, 936, 85, 721, 1273, 490, 1665, 584, 1529,
	85, 817, 1528, 1274, 489, 863, 43, 85, 85, 67,
	66, 85, 68, 58, 85, 85, 85, 722, 1254, 85,
	85, 85, 85, 585, 320, 804, 820, 1217, 852, 318,
	575, 847, 848, 845, 842, 841, 837, 755, 840, 441,
	838, 1469, 85, 1587, 1253, 706, 230, 789, 851, 1212,
	1213, 1214, 1183, 1211, 1208, 1209, 1210, 1203, 1204, 1205,
	1206, 1207, 1182, 708, 1181, 292, 1103, 349, 303, 800,
	267, 1180, 723, 833, 1149, 799, 962, 843, 303, 819,
	722, 303, 818, 707, 373, 1216, 264, 1623, 510, 522,
	511, 972, 1002, 1211, 1208, 1209, 1210, 1203, 1204, 1205,
	1206, 1207, 350, 1672, 60, 403, 808, 972, 1264, 1006,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 891, 1518, 59, 405, 723, 528, 1678, 1085, 1633,
	1217, 935, 709, 710, 711, 712, 713, 61, 709, 710,
	711, 712, 713, 584, 512, 1634, 1664, 867, 1083, 811,
	976, 706, 1341, 1271, 1013, 868, 1024, 516, 1034, 1036,
	1041, 1044, 1045, 1046, 1026, 790, 515, 866, 585, 708,
	790, 1205, 1206, 1207, 1582, 1203, 1204, 1205, 1206, 1207,
	998, 85, 85, 1104, 372, 505, 986, 892, 276, 707,
	1641, 717, 714, 715, 716, 709, 710, 711, 712, 713,
	1203, 1204, 1205, 1206, 1207, 55, 1054, 265, 1002, 348,
	510, 85, 511, 85, 1086, 85, 999, 85, 1265, 292,
	347, 977, 275, 882, 883, 268, 810, 982, 987, 1569,
	990, 776, 85, 797, 899, 1676, 1102, 742, 1058, 1064,
	1202, 62, 1191, 85, 367, 1035, 292, 1302, 56, 1000,
	997, 1047, 1048, 1049, 85, 85, 1671, 85, 388, 1642,
	277, 1016, 1640, 1663, 277, 1097, 321, 1158, 341, 343,
	1151, 1059, 348, 529, 1677, 698, 512, 854, 1156, 1519,
	1661, 722, 510, 856, 511, 809, 971, 85, 1079, 85,
	1679, 322, 711, 712, 713, 1643, 368, 1450, 857, 320,
	320, 1112, 513, 1093, 1096, 1002, 855, 583, 85, 1099,
	85, 85, 85, 85, 1088, 85, 878, 1110, 31, 1098,
	1118, 1106, 1101, 85, 360, 1100, 1105, 339, 1413, 85,
	1019, 337, 1338, 1066, 1670, 274, 723, 387, 1060, 1202,
	1154, 1378, 1523, 1142, 1159, 1522, 1116, 85, 512, 1148,
	85, 43, 54, 1153, 1120, 1119, 1511, 1121, 1414, 1141,
	996, 388, 1424, 1421, 1145, 1339, 1020, 1090, 1497, 1423,
	1216, 1256, 1167, 1685, 905, 1090, 783, 1080, 786, 1063,
	879, 1464, 1176, 684, 680, 1337, 780, 779, 1616, 551,
	387, 673, 547, 1512, 1071, 1173, 1070, 1189, 1460, 1021,
	1018, 1194, 717, 714, 715, 716, 709, 710, 711, 712,
	713, 1297, 1379, 305, 1152, 1150, 1155, 1296, 1380, 1113,
	549, 1002, 744, 1157, 347, 1217, 275, 379, 1041, 1041,
	1041, 550, 1465, 1409, 513, 1410, 1124, 1293, 1420, 292,
	960, 1009, 925, 70, 1422, 1498, 85, 1572, 1252, 508,
	1684, 1496, 583, 1164, 1187, 1022, 1231, 1166, 1412, 1259,
	85, 1318, 1197, 1160, 85, 1415, 849, 85, 85, 1216,
	1177, 1178, 85, 905, 85, 85, 403, 85, 365, 1126,
	85, 85, 85, 73, 320, 1260, 505, 85, 85, 1234,
	1235, 1236, 1208, 1209, 1210, 1203, 1204, 1205, 1206, 1207,
	363, 362, 1268, 78, 1270, 1251, 513, 361, 74, 1226,
	1017, 1280, 358, 692, 304, 1232, 1258, 1411, 760, 667,
	1239, 1130, 961, 1008, 1217, 1276, 1404, 75, 1272, 1269,
	583, 1275, 1130, 1267, 968, 1255, 1133, 1281, 1314, 1282,
	1315, 925, 77, 584, 958, 966, 1128, 1133, 1285, 1114,
	1306, 1320, 1131, 1287, 880, 877, 532, 1300, 530, 1330,
	525, 517, 514, 1131, 1346, 1330, 1129, 1530, 585, 1665,
	1295, 1303, 1304, 1298, 924, 1305, 1299, 886, 390, 1347,
	1459, 1334, 1335, 1336, 288, 571, 800, 1532, 1356, 816,
	1277, 1358, 815, 1210, 1203, 1204, 1205, 1206, 1207, 1609,
	800, 1540, 354, 706, 3, 964, 813, 963, 1331, 1584,
	1132, 969, 1294, 394, 69, 959, 706, 85, 1144, 424,
	1602, 1132, 1387, 1388, 76, 1357, 828, 1353, 85, 85,
	887, 1394, 1395, 1396, 708, 833, 904, 1340, 1342, 1343,
	391, 707, 700, 1326, 80, 73, 289, 544, 1682, 254,
	83, 1683, 1385, 240, 707, 85, 1386, 85, 297, 1458,
	83, 1202, 79, 706, 1126, 78, 292, 284, 284, 292,
	74, 294, 355, 924, 294, 300, 294, 1418, 1419, 294,
	308, 294, 240, 965, 1453, 583, 1399, 257, 258, 75,
	967, 1403, 1471, 927, 1398, 1445, 1444, 1446, 1445, 1444,
	1446, 926, 340, 1449, 77, 1383, 1130, 1344, 31, 1475,
	1435, 1313, 1246, 1053, 1479, 1480, 1393, 1448, 1437, 1482,
	1052, 1133, 1051, 1355, 1484, 1467, 859, 1003, 861, 860,
	1359, 1128, 1476, 1483, 1345, 904, 901, 1131, 1468, 1489,
	862, 1455, 1456, 1492, 753, 1461, 263, 85, 85, 85,
	1517, 1129, 71, 85, 666, 359, 85, 1490, 1632, 1190,
	1568, 1389, 85, 85, 85, 85, 85, 1548, 85, 85,
	1007, 758, 1454, 1500, 25, 1442, 85, 417, 85, 1405,
	1495, 1413, 1257, 1408, 85, 873, 76, 586, 572, 561,
	440, 1406, 927, 85, 85, 1132, 364, 555, 564, 85,
	926, 1015, 491, 442, 902, 443, 903, 784, 320, 430,
	900, 1414, 1428, 316, 1524, 831, 1004, 1186, 756, 416,
	1436, 1507, 422, 421, 79, 85, 983, 85, 85, 905,
	85, 413, 1510, 1462, 1542, 901, 1134, 292, 292, 85,
	1508, 292, 1445, 1444, 1446, 344, 85, 1531, 85, 1541,
	1553, 240, 240, 1526, 1527, 234, 1445, 1444, 1446, 1533,
	235, 1544, 1087, 905, 1562, 1563, 1539, 1432, 824, 881,
	905, 688, 1266, 1551, 266, 1199, 1033, 1025, 1023, 1014,
	375, 83, 1558, 294, 503, 240, 1409, 380, 1410, 1567,
	832, 1027, 356, 893, 1576, 1143, 399, 925, 696, 287,
	286, 905, 284, 870, 1578, 1554, 353, 548, 853, 520,
	259, 1412, 1574, 294, 1583, 1620, 1263, 50, 1415, 19,
	17, 16, 706, 15, 294, 294, 505, 523, 13, 1577,
	12, 925, 11, 1591, 18, 1117, 9, 8, 925, 1593,
	708, 7, 1595, 1599, 24, 23, 1445, 1444, 1446, 1592,
	22, 5, 4, 1525, 2, 1, 1515, 540, 790, 540,
	707, 1604, 0, 0, 1594, 584, 0, 0, 1603, 925,
	1411, 0, 1605, 1608, 0, 0, 0, 0, 240, 0,
	540, 240, 240, 240, 0, 240, 1611, 905, 0, 0,
	585, 1547, 0, 83, 0, 1627, 1617, 1618, 0, 683,
	0, 292, 1626, 1625, 1630, 1629, 1565, 1624, 1622, 1445,
	1444, 1446, 1647, 0, 1628, 0, 0, 284, 0, 85,
	702, 1597, 1646, 1648, 1658, 1658, 1649, 0, 0, 924,
	0, 0, 0, 1659, 0, 1662, 1660, 0, 0, 0,
	0, 1666, 0, 0, 85, 0, 1658, 1669, 1668, 0,
	0, 0, 722, 0, 0, 925, 0, 85, 1680, 85,
	1681, 85, 0, 924, 85, 0, 1667, 0, 0, 0,
	924, 0, 0, 1658, 1686, 85, 0, 0, 85, 0,
	0, 0, 0, 0, 85, 583, 0, 1635, 85, 0,
	85, 904, 0, 905, 0, 1027, 1027, 0, 0, 0,
	0, 924, 0, 0, 0, 0, 0, 723, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 0, 0, 1619, 0, 904, 0, 0, 0, 0,
	805, 0, 904, 0, 294, 1162, 1163, 294, 821, 0,
	0, 85, 294, 0, 835, 836, 905, 294, 927, 0,
	294, 240, 240, 1027, 1027, 1027, 926, 540, 702, 0,
	0, 925, 0, 904, 833, 0, 0, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 709, 710, 711,
	712, 713, 927, 0, 0, 0, 0, 924, 0, 927,
	926, 901, 0, 1223, 1224, 1225, 0, 926, 0, 0,
	0, 0, 0, 85, 85, 85, 0, 0, 0, 0,
	0, 85, 85, 0, 925, 0, 0, 85, 0, 85,
	927, 85, 85, 85, 85, 901, 0, 0, 926, 85,
	418, 32, 901, 0, 0, 925, 0, 0, 85, 0,
	0, 905, 0, 0, 0, 0, 85, 85, 0, 904,
	85, 0, 0, 0, 0, 0, 0, 0, 32, 85,
	85, 0, 0, 901, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 1027, 1027, 279, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 865, 0, 0,
	0, 0, 0, 924, 0, 279, 0, 0, 294, 805,
	0, 85, 0, 0, 0, 0, 927, 0, 0, 925,
	0, 0, 0, 0, 926, 1316, 1317, 0, 0, 574,
	562, 573, 0, 567, 0, 294, 0, 240, 1027, 1027,
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
	1027, 1027, 1027, 1027, 1027, 1027, 924, 1027, 0, 901,
	0, 0, 0, 0, 85, 904, 85, 0, 85, 0,
	0, 0, 0, 0, 0, 85, 0, 924, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 0, 1381, 0, 0,
	0, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 85, 0, 0, 0, 0, 0, 904, 0,
	85, 0, 927, 0, 0, 0, 85, 294, 1061, 1062,
	926, 0, 0, 805, 0, 0, 1067, 0, 0, 904,
	0, 0, 1072, 1073, 1075, 1077, 1078, 579, 1081, 1082,
	0, 924, 0, 0, 0, 0, 294, 0, 1092, 0,
	0, 578, 0, 0, 294, 901, 0, 0, 0, 0,
	0, 0, 0, 865, 540, 927, 0, 0, 0, 865,
	0, 0, 0, 926, 0, 0, 0, 0, 85, 85,
	0, 0, 85, 0, 0, 0, 927, 0, 0, 0,
	85, 0, 0, 0, 926, 683, 0, 240, 294, 0,
	1115, 0, 85, 904, 0, 0, 0, 583, 901, 1122,
	0, 271, 0, 0, 0, 0, 1139, 0, 294, 242,
	0, 0, 0, 706, 0, 724, 725, 726, 0, 901,
	85, 85, 85, 253, 85, 727, 0, 0, 0, 1027,
	0, 708, 0, 733, 0, 0, 0, 0, 0, 0,
	1202, 85, 1218, 1219, 1220, 0, 0, 0, 0, 0,
	927, 707, 1474, 0, 0, 0, 244, 721, 926, 0,
	0, 0, 706, 85, 724, 725, 726, 0, 0, 1514,
	568, 563, 0, 0, 727, 243, 245, 0, 0, 0,
	708, 0, 733, 0, 1215, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 0, 0, 0, 721, 0, 246, 0,
	271, 1027, 0, 271, 271, 734, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 0, 249, 0, 0, 743, 729, 0, 0,
	747, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 1571, 0, 0, 1221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 728, 0, 0, 0, 0,
	1216, 0, 0, 0, 0, 0, 732, 0, 0, 702,
	0, 0, 0, 0, 0, 0, 729, 1027, 0, 0,
	0, 0, 722, 0, 0, 0, 0, 0, 723, 0,
	0, 0, 0, 0, 294, 0, 0, 0, 731, 0,
	0, 0, 0, 0, 728, 0, 0, 1284, 0, 805,
	21, 683, 0, 250, 1290, 1217, 251, 1610, 0, 0,
	35, 252, 0, 0, 0, 294, 0, 0, 294, 0,
	0, 32, 0, 0, 1139, 0, 0, 723, 1308, 0,
	1139, 0, 0, 37, 32, 0, 0, 731, 730, 42,
	718, 719, 720, 0, 717, 714, 715, 716, 709, 710,
	711, 712, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 26, 0, 38, 1212, 1213, 1214,
	27, 1211, 1208, 1209, 1210, 1203, 1204, 1205, 1206, 1207,
	0, 1350, 0, 28, 0, 0, 0, 730, 0, 718,
	719, 720, 0, 717, 714, 715, 716, 709, 710, 711,
	712, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	1242, 0, 706, 0, 724, 725, 726, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	708, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1401, 1402, 805, 0, 0, 0, 0,
	707, 702, 702, 0, 0, 0, 721, 1426, 0, 1427,
	0, 294, 1429, 1430, 1431, 0, 0, 40, 0, 294,
	29, 0, 39, 0, 0, 0, 1441, 30, 805, 1441,
	49, 0, 0, 0, 33, 34, 294, 294, 0, 0,
	294, 0, 36, 0, 0, 0, 0, 0, 51, 702,
	1139, 706, 0, 724, 725, 726, 896, 0, 0, 0,
	0, 41, 0, 727, 734, 0, 0, 0, 0, 708,
	0, 733, 0, 0, 52, 0, 732, 0, 706, 0,
	0, 47, 0, 0, 0, 974, 729, 48, 0, 707,
	0, 1491, 722, 0, 0, 721, 708, 0, 733, 706,
	0, 724, 725, 726, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 707, 708, 0, 733,
	0, 0, 721, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 707, 0, 0,
	0, 0, 0, 721, 805, 0, 1509, 723, 240, 0,
	0, 0, 0, 734, 0, 294, 0, 731, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 729, 0, 279, 0, 0,
	734, 722, 0, 0, 0, 0, 0, 1441, 0, 0,
	294, 0, 1550, 0, 0, 0, 0, 0, 0, 0,
	294, 734, 729, 728, 0, 0, 702, 730, 722, 718,
	719, 720, 0, 717, 714, 715, 716, 709, 710, 711,
	712, 713, 0, 729, 0, 0, 0, 0, 0, 722,
	1241, 0, 0, 0, 0, 0, 723, 0, 0, 32,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 1140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 0, 0, 1585, 1586,
	0, 0, 1590, 731, 0, 0, 0, 1441, 0, 0,
	240, 0, 0, 0, 723, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 731, 0, 730, 0, 718, 719,
	720, 0, 717, 714, 715, 716, 709, 710, 711, 712,
	713, 0, 974, 0, 0, 0, 0, 0, 0, 1240,
	702, 702, 294, 730, 240, 0, 743, 0, 0, 717,
	714, 715, 716, 709, 710, 711, 712, 713, 0, 0,
	1441, 1550, 0, 0, 730, 0, 718, 719, 720, 0,
	717, 714, 715, 716, 709, 710, 711, 712, 713, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 743, 438, 426, 427, 428, 425, 414, 0,
	0, 0, 0, 0, 0, 87, 88, 992, 89, 0,
	0, 0, 0, 420, 0, 0, 0, 90, 91, 186,
	467, 468, 92, 469, 470, 0, 93, 191, 192, 94,
	435, 453, 471, 472, 195, 0, 463, 0, 446, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 325, 100,
	101, 0, 447, 449, 0, 448, 450, 102, 103, 104,
	105, 473, 106, 474, 475, 0, 0, 107, 0, 993,
	0, 466, 109, 0, 0, 0, 0, 419, 110, 454,
	433, 0, 111, 112, 476, 113, 896, 114, 0, 896,
	326, 0, 115, 464, 0, 204, 0, 116, 117, 460,
	462, 0, 0, 118, 0, 327, 119, 477, 478, 479,
	0, 445, 0, 328, 120, 329, 121, 122, 0, 0,
	465, 330, 123, 331, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 332, 131, 132, 135, 133,
	409, 134, 434, 461, 136, 480, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 333, 140, 334, 455, 141,
	142, 0, 456, 143, 217, 0, 144, 145, 146, 481,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 335,
	154, 155, 423, 156, 0, 241, 157, 158, 0, 159,
	160, 451, 161, 162, 336, 163, 482, 164, 0, 165,
	166, 168, 221, 167, 457, 0, 0, 169, 170, 0,
	223, 483, 484, 0, 0, 171, 458, 459, 432, 172,
	173, 174, 175, 0, 0, 176, 177, 452, 0, 178,
	179, 180, 228, 485, 991, 181, 0, 0, 0, 32,
	182, 183, 184, 185, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 407, 994, 896, 896, 0,
	408, 896, 0, 415, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 0, 0, 87, 88, 587, 89,
	588, 589, 590, 591, 592, 593, 594, 595, 90, 91,
	186, 187, 188, 92, 189, 190, 596, 93, 191, 192,
	94, 597, 598, 193, 194, 195, 599, 196, 600, 324,
	601, 95, 96, 97, 0, 98, 602, 99, 603, 325,
	100, 101, 604, 605, 606, 607, 608, 609, 102, 103,
	104, 105, 197, 106, 198, 199, 610, 611, 107, 612,
	613, 614, 108, 109, 615, 616, 743, 617, 200, 110,
	201, 618, 619, 111, 112, 202, 113, 620, 114, 621,
	622, 326, 623, 115, 203, 624, 204, 625, 116, 117,
	205, 206, 626, 627, 118, 628, 327, 119, 207, 208,
	209, 629, 210, 630, 328, 120, 329, 121, 122, 631,
	632, 211, 330, 123, 331, 633, 124, 634, 635, 125,
	0, 126, 127, 128, 129, 130, 332, 131, 132, 135,
	133, 636, 134, 637, 212, 136, 213, 137, 138, 638,
	639, 640, 641, 642, 139, 214, 333, 140, 334, 215,
	141, 142, 643, 216, 143, 217, 644, 144, 145, 146,
	218, 147, 148, 645, 150, 151, 149, 152, 646, 153,
	335, 154, 155, 219, 156, 0, 241, 157, 158, 647,
	159, 160, 648, 161, 162, 336, 163, 220, 164, 649,
	165, 166, 168, 221, 167, 222, 650, 651, 169, 170,
	652, 223, 224, 225, 653, 654, 171, 226, 227, 655,
	172, 173, 174, 175, 656, 657, 176, 177, 658, 659,
	178, 179, 180, 228, 229, 660, 181, 661, 662, 663,
	664, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 87, 88, 587, 89, 588, 589, 590, 591, 592,
	593, 594, 595, 90, 91, 186, 187, 188, 92, 189,
	190, 596, 93, 191, 192, 94, 597, 598, 193, 194,
	195, 599, 196, 600, 324, 601, 95, 96, 97, 0,
	98, 602, 99, 603, 325, 100, 101, 604, 605, 606,
	607, 608, 609, 102, 103, 104, 105, 197, 106, 198,
	199, 610, 611, 107, 612, 613, 614, 108, 109, 615,
	616, 0, 617, 200, 110, 201, 618, 619, 111, 112,
	202, 113, 620, 114, 621, 622, 326, 623, 115, 203,
	624, 204, 625, 116, 117, 205, 206, 626, 627, 118,
	628, 327, 119, 207, 208, 209, 629, 210, 630, 328,
	120, 329, 121, 122, 631, 632, 211, 330, 123, 331,
	633, 124, 634, 635, 125, 0, 126, 127, 128, 129,
	130, 332, 131, 132, 135, 133, 636, 134, 637, 212,
	136, 213, 137, 138, 638, 639, 640, 641, 642, 139,
	214, 333, 140, 334, 215, 141, 142, 643, 216, 143,
	217, 644, 144, 145, 146, 218, 147, 148, 645, 150,
	151, 149, 152, 646, 153, 335, 154, 155, 219, 156,
	0, 241, 157, 158, 647, 159, 160, 648, 161, 162,
	336, 163, 220, 164, 649, 165, 166, 168, 221, 167,
	222, 650, 651, 169, 170, 652, 223, 224, 225, 653,
	654, 171, 226, 227, 655, 172, 173, 174, 175, 656,
	657, 176, 177, 658, 659, 178, 179, 180, 228, 229,
	660, 181, 661, 662, 663, 664, 182, 183, 184, 185,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 793, 87, 88, 587, 89, 588, 589, 590,
	591, 592, 593, 594, 595, 90, 91, 186, 187, 188,
	92, 189, 190, 596, 93, 191, 192, 94, 597, 598,
	193, 194, 195, 599, 196, 600, 324, 601, 95, 96,
	97, 0, 98, 602, 99, 603, 325, 100, 101, 604,
	605, 606, 607, 608, 609, 102, 103, 104, 105, 197,
	106, 198, 199, 610, 611, 107, 612, 613, 614, 108,
	109, 615, 616, 0, 617, 200, 110, 201, 618, 619,
	111, 112, 202, 113, 620, 114, 621, 622, 326, 623,
	115, 203, 624, 204, 625, 116, 117, 205, 206, 626,
	627, 118, 628, 327, 119, 207, 208, 209, 629, 210,
	630, 328, 120, 329, 121, 122, 631, 632, 211, 330,
	123, 331, 633, 124, 634, 635, 125, 0, 126, 127,
	128, 129, 130, 332, 131, 132, 135, 133, 636, 134,
	637, 212, 136, 213, 137, 138, 638, 639, 640, 641,
	642, 139, 214, 333, 140, 334, 215, 141, 142, 643,
	216, 143, 217, 644, 144, 145, 146, 218, 147, 148,
	645, 150, 151, 149, 152, 646, 153, 335, 154, 155,
	219, 156, 0, 241, 157, 158, 647, 159, 160, 648,
	161, 162, 336, 163, 220, 164, 649, 165, 166, 168,
	221, 167, 222, 650, 651, 169, 170, 652, 223, 224,
	225, 653, 654, 171, 226, 227, 655, 172, 173, 174,
	175, 656, 657, 176, 177, 658, 659, 178, 179, 180,
	228, 229, 660, 181, 661, 662, 663, 664, 182, 183,
	184, 185, 438, 426, 427, 428, 425, 414, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 0, 420, 0, 0, 0, 90, 91, 186, 467,
	468, 92, 469, 470, 0, 93, 191, 192, 94, 435,
	453, 471, 472, 195, 0, 463, 0, 446, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 325, 100, 101,
	0, 447, 449, 0, 448, 450, 102, 103, 104, 105,
	473, 106, 474, 475, 506, 0, 107, 0, 0, 0,
	466, 109, 0, 0, 0, 0, 419, 110, 454, 433,
	0, 111, 112, 476, 113, 0, 114, 0, 0, 326,
	0, 115, 464, 0, 204, 0, 116, 117, 460, 462,
	0, 0, 118, 0, 327, 119, 477, 478, 479, 0,
	445, 0, 328, 120, 329, 121, 122, 0, 0, 465,
	330, 123, 331, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 332, 131, 132, 135, 133, 409,
	134, 434, 461, 136, 480, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 333, 140, 334, 455, 141, 142,
	0, 456, 143, 217, 0, 144, 145, 146, 481, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 335, 154,
	155, 423, 156, 0, 241, 157, 158, 49, 159, 160,
	451, 161, 162, 336, 163, 482, 164, 0, 165, 166,
	168, 221, 167, 457, 0, 51, 169, 170, 0, 223,
	483, 484, 0, 0, 171, 458, 459, 432, 172, 173,
	174, 175, 0, 0, 176, 177, 452, 0, 178, 179,
	180, 323, 485, 0, 181, 0, 0, 0, 47, 182,
	183, 184, 185, 410, 48, 438, 426, 427, 428, 425,
	414, 0, 0, 406, 407, 0, 0, 87, 88, 408,
	89, 0, 415, 0, 0, 420, 0, 0, 0, 90,
	91, 186, 467, 468, 92, 469, 470, 0, 93, 191,
	192, 94, 435, 453, 471, 472, 195, 0, 463, 0,
	446, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	325, 100, 101, 0, 447, 449, 0, 448, 450, 102,
	103, 104, 105, 473, 106, 474, 475, 0, 0, 107,
	0, 0, 0, 466, 109, 0, 0, 0, 0, 419,
	110, 454, 433, 0, 111, 112, 476, 113, 0, 114,
	0, 0, 326, 0, 115, 464, 0, 204, 0, 116,
	117, 460, 462, 0, 0, 118, 0, 327, 119, 477,
	478, 479, 0, 445, 0, 328, 120, 329, 121, 122,
	0, 0, 465, 330, 123, 331, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 332, 131, 132,
	135, 133, 409, 134, 434, 461, 136, 480, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 333, 140, 334,
	455, 141, 142, 0, 456, 143, 217, 0, 144, 145,
	146, 481, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 335, 154, 155, 423, 156, 0, 241, 157, 158,
	49, 159, 160, 451, 161, 162, 336, 163, 482, 164,
	0, 165, 166, 168, 221, 167, 457, 0, 51, 169,
	170, 0, 223, 483, 484, 0, 0, 171, 458, 459,
	432, 172, 173, 174, 175, 0, 0, 176, 177, 452,
	0, 178, 179, 180, 323, 485, 0, 181, 0, 0,
	0, 47, 182, 183, 184, 185, 410, 48, 438, 426,
	427, 428, 425, 414, 0, 0, 406, 407, 0, 0,
	87, 88, 408, 89, 0, 415, 0, 0, 420, 0,
	0, 0, 90, 91, 186, 467, 468, 92, 469, 470,
	1037, 93, 191, 192, 94, 435, 453, 471, 472, 195,
	0, 463, 0, 446, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 325, 100, 101, 0, 447, 449, 0,
	448, 450, 102, 103, 104, 105, 473, 106, 474, 475,
	0, 0, 107, 0, 0, 0, 466, 109, 0, 0,
	0, 0, 419, 110, 454, 433, 0, 111, 112, 476,
	113, 0, 114, 0, 1042, 326, 0, 115, 464, 0,
	204, 0, 116, 117, 460, 462, 0, 0, 118, 0,
	327, 119, 477, 478, 479, 0, 445, 0, 328, 120,
	329, 121, 122, 0, 1038, 465, 330, 123, 331, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	332, 131, 132, 135, 133, 409, 134, 434, 461, 136,
	480, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	333, 140, 334, 455, 141, 142, 0, 456, 143, 217,
	0, 144, 145, 146, 481, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 335, 154, 155, 423, 156, 0,
	241, 157, 158, 0, 159, 160, 451, 161, 162, 336,
	163, 482, 164, 0, 165, 166, 168, 221, 167, 457,
	0, 0, 169, 170, 0, 223, 483, 484, 0, 1039,
	171, 458, 459, 432, 172, 173, 174, 175, 0, 0,
	176, 177, 452, 0, 178, 179, 180, 228, 485, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 410,
	0, 438, 426, 427, 428, 425, 414, 0, 0, 406,
	407, 0, 0, 87, 88, 408, 89, 0, 415, 0,
	0, 420, 0, 0, 0, 90, 91, 186, 467, 468,
	92, 469, 470, 0, 93, 191, 192, 94, 435, 453,
	471, 472, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 325, 100, 101, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 473,
	106, 474, 475, 0, 0, 107, 0, 0, 0, 466,
	109, 0, 0, 0, 0, 419, 110, 454, 433, 0,
	111, 112, 476, 113, 0, 114, 0, 0, 326, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 327, 119, 477, 478, 479, 0, 445,
	0, 328, 120, 329, 121, 122, 0, 0, 465, 330,
	123, 331, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 332, 131, 132, 135, 133, 409, 134,
	434, 461, 136, 480, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 333, 140, 334, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 481, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 335, 154, 155,
	423, 156, 0, 241, 157, 158, 0, 159, 160, 451,
	161, 162, 336, 163, 482, 164, 0, 165, 166, 168,
	221, 167, 457, 0, 0, 169, 170, 0, 223, 483,
	484, 0, 0, 171, 458, 459, 432, 172, 173, 174,
	175, 0, 0, 176, 177, 452, 0, 178, 179, 180,
	228, 485, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 410, 0, 438, 426, 427, 428, 425, 414,
	0, 0, 406, 407, 0, 0, 87, 88, 408, 89,
	0, 415, 1384, 0, 420, 0, 0, 0, 90, 91,
	186, 467, 468, 92, 469, 470, 0, 93, 191, 192,
	94, 435, 453, 471, 472, 195, 0, 463, 0, 446,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 325,
	100, 101, 0, 447, 449, 0, 448, 450, 102, 103,
	104, 105, 473, 106, 474, 475, 0, 0, 107, 0,
	0, 0, 466, 109, 0, 0, 0, 0, 419, 110,
	454, 433, 0, 111, 112, 476, 113, 0, 114, 0,
	0, 326, 0, 115, 464, 0, 204, 0, 116, 117,
	460, 462, 0, 0, 118, 0, 327, 119, 477, 478,
	479, 0, 445, 0, 328, 120, 329, 121, 122, 0,
	0, 465, 330, 123, 331, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 332, 131, 132, 135,
	133, 409, 134, 434, 461, 136, 480, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 333, 140, 334, 455,
	141, 142, 0, 456, 143, 217, 0, 144, 145, 146,
	481, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	335, 154, 155, 423, 156, 0, 241, 157, 158, 0,
	159, 160, 451, 161, 162, 336, 163, 482, 164, 0,
	165, 166, 168, 221, 167, 457, 0, 0, 169, 170,
	0, 223, 483, 484, 0, 0, 171, 458, 459, 432,
	172, 173, 174, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 228, 485, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 410, 0, 438, 426, 427,
	428, 425, 414, 0, 0, 406, 407, 0, 0, 87,
	88, 408, 89, 0, 415, 1327, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 325, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 326, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 327,
	119, 477, 478, 479, 0, 445, 0, 328, 120, 329,
	121, 122, 0, 0, 465, 330, 123, 331, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 333,
	140, 334, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 335, 154, 155, 423, 156, 0, 241,
	157, 158, 0, 159, 160, 451, 161, 162, 336, 163,
	482, 164, 0, 165, 166, 168, 221, 167, 457, 0,
	0, 169, 170, 0, 223, 483, 484, 0, 0, 171,
	458, 459, 432, 172, 173, 174, 175, 0, 0, 176,
	177, 452, 0, 178, 179, 180, 228, 485, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 410, 0,
	438, 426, 427, 428, 425, 414, 0, 0, 406, 407,
	0, 0, 87, 88, 408, 89, 0, 415, 988, 0,
	420, 0, 0, 0, 90, 91, 186, 467, 468, 92,
	469, 470, 0, 93, 191, 192, 94, 435, 453, 471,
	472, 195, 0, 463, 0, 446, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 325, 100, 101, 0, 447,
	449, 0, 448, 450, 102, 103, 104, 105, 473, 106,
	474, 475, 0, 0, 107, 0, 0, 0, 466, 109,
	0, 0, 0, 0, 419, 110, 454, 433, 0, 111,
	112, 476, 113, 0, 114, 0, 0, 326, 0, 115,
	464, 0, 204, 0, 116, 117, 460, 462, 0, 0,
	118, 0, 327, 119, 477, 478, 479, 0, 445, 0,
	328, 120, 329, 121, 122, 0, 0, 465, 330, 123,
	331, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 409, 134, 434,
	461, 136, 480, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 333, 140, 334, 455, 141, 142, 0, 456,
	143, 217, 0, 144, 145, 146, 481, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 335, 154, 155, 423,
	156, 0, 241, 157, 158, 0, 159, 160, 451, 161,
	162, 336, 163, 482, 164, 0, 165, 166, 168, 221,
	167, 457, 0, 0, 169, 170, 0, 223, 483, 484,
	0, 0, 171, 458, 459, 432, 172, 173, 174, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 228,
	485, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 407, 0, 0, 0, 0, 408, 749, 984,
	415, 438, 426, 427, 428, 425, 414, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 420, 0, 0, 0, 90, 91, 186, 467, 468,
	92, 469, 470, 0, 93, 191, 192, 94, 435, 453,
	471, 472, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 325, 100, 101, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 473,
	106, 474, 475, 0, 0, 107, 0, 0, 0, 466,
	109, 0, 0, 0, 0, 419, 110, 454, 433, 0,
	111, 112, 476, 113, 0, 114, 0, 0, 326, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 327, 119, 477, 478, 479, 0, 445,
	0, 328, 120, 329, 121, 122, 0, 0, 465, 330,
	123, 331, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 332, 131, 132, 135, 133, 409, 134,
	434, 461, 136, 480, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 333, 140, 334, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 481, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 335, 154, 155,
	423, 156, 0, 241, 157, 158, 0, 159, 160, 451,
	161, 162, 336, 163, 482, 164, 0, 165, 166, 168,
	221, 167, 457, 0, 0, 169, 170, 0, 223, 483,
	484, 0, 0, 171, 458, 459, 432, 172, 173, 174,
	175, 0, 0, 176, 177, 452, 0, 178, 179, 180,
	228, 485, 1333, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 410, 0, 438, 426, 427, 428, 425, 414,
	0, 0, 406, 407, 0, 0, 87, 88, 408, 89,
	0, 415, 0, 0, 420, 0, 0, 0, 90, 91,
	186, 467, 468, 92, 469, 470, 0, 93, 191, 192,
	94, 435, 453, 471, 472, 195, 0, 463, 0, 446,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 325,
	100, 101, 0, 447, 449, 0, 448, 450, 102, 103,
	104, 105, 473, 106, 474, 475, 506, 0, 107, 0,
	0, 0, 466, 109, 0, 0, 0, 0, 419, 110,
	454, 433, 0, 111, 112, 476, 113, 0, 114, 0,
	0, 326, 0, 115, 464, 0, 204, 0, 116, 117,
	460, 462, 0, 0, 118, 0, 327, 119, 477, 478,
	479, 0, 445, 0, 328, 120, 329, 121, 122, 0,
	0, 465, 330, 123, 331, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 332, 131, 132, 135,
	133, 409, 134, 434, 461, 136, 480, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 333, 140, 334, 455,
	141, 142, 0, 456, 143, 217, 0, 144, 145, 146,
	481, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	335, 154, 155, 423, 156, 0, 241, 157, 158, 0,
	159, 160, 451, 161, 162, 336, 163, 482, 164, 0,
	165, 166, 168, 221, 167, 457, 0, 0, 169, 170,
	0, 223, 483, 484, 0, 0, 171, 458, 459, 432,
	172, 173, 174, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 228, 485, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 410, 0, 438, 426, 427,
	428, 425, 414, 0, 0, 406, 407, 0, 0, 87,
	88, 408, 89, 0, 415, 0, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 325, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 326, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 327,
	119, 477, 478, 479, 0, 445, 0, 328, 120, 329,
	121, 122, 0, 0, 465, 330, 123, 331, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 333,
	140, 334, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 335, 154, 155, 423, 156, 0, 241,
	157, 158, 0, 159, 160, 451, 161, 162, 336, 163,
	482, 164, 0, 165, 166, 168, 221, 167, 457, 0,
	0, 169, 170, 0, 223, 483, 484, 0, 0, 171,
	458, 459, 432, 172, 173, 174, 175, 0, 0, 176,
	177, 452, 0, 178, 179, 180, 228, 485, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 410, 0,
	438, 426, 427, 428, 425, 414, 0, 0, 406, 407,
	404, 0, 87, 88, 408, 89, 0, 415, 0, 0,
	420, 0, 0, 0, 90, 91, 186, 467, 468, 92,
	469, 470, 0, 93, 191, 192, 94, 435, 453, 471,
	472, 195, 0, 463, 0, 446, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 325, 100, 101, 0, 447,
	449, 0, 448, 450, 102, 103, 104, 105, 473, 106,
	474, 475, 0, 0, 107, 0, 0, 0, 466, 109,
	0, 0, 0, 0, 419, 110, 454, 433, 0, 111,
	112, 476, 113, 0, 114, 0, 1042, 326, 0, 115,
	464, 0, 204, 0, 116, 117, 460, 462, 0, 0,
	118, 0, 327, 119, 477, 478, 479, 0, 445, 0,
	328, 120, 329, 121, 122, 0, 0, 465, 330, 123,
	331, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 409, 134, 434,
	461, 136, 480, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 333, 140, 334, 455, 141, 142, 0, 456,
	143, 217, 0, 144, 145, 146, 481, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 335, 154, 155, 423,
	156, 0, 241, 157, 158, 0, 159, 160, 451, 161,
	162, 336, 163, 482, 164, 0, 165, 166, 168, 221,
	167, 457, 0, 0, 169, 170, 0, 223, 483, 484,
	0, 0, 171, 458, 459, 432, 172, 173, 174, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 228,
	485, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 407, 0, 0, 0, 0, 408, 0, 0,
	415, 438, 426, 427, 428, 425, 414, 0, 0, 0,
	0, 0, 0, 87, 88, 690, 89, 0, 0, 0,
	0, 420, 0, 0, 0, 90, 91, 186, 467, 468,
	92, 469, 470, 0, 93, 191, 192, 94, 435, 453,
	471, 472, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 325, 100, 101, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 473,
	106, 474, 475, 0, 0, 107, 0, 0, 0, 466,
	109, 0, 0, 0, 0, 419, 110, 454, 433, 0,
	111, 112, 476, 113, 0, 114, 0, 0, 326, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 327, 119, 477, 478, 479, 0, 445,
	0, 328, 120, 329, 121, 122, 0, 0, 465, 330,
	123, 331, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 332, 131, 132, 135, 133, 409, 134,
	434, 461, 136, 480, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 333, 140, 334, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 481, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 335, 154, 155,
	423, 156, 0, 241, 157, 158, 0, 159, 160, 451,
	161, 162, 336, 163, 482, 164, 0, 165, 166, 168,
	221, 167, 457, 0, 0, 169, 170, 0, 223, 483,
	484, 0, 0, 171, 458, 459, 432, 172, 173, 174,
	175, 0, 0, 176, 177, 452, 0, 178, 179, 180,
	228, 485, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 410, 0, 438, 426, 427, 428, 425, 414,
	0, 0, 406, 407, 0, 0, 87, 88, 408, 89,
	0, 415, 0, 0, 420, 0, 0, 0, 90, 91,
	186, 467, 468, 92, 469, 470, 0, 93, 191, 192,
	94, 435, 453, 471, 472, 195, 0, 463, 0, 446,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 325,
	100, 1657, 0, 447, 449, 0, 448, 450, 102, 103,
	104, 105, 473, 106, 474, 475, 0, 0, 107, 0,
	0, 0, 466, 109, 0, 0, 0, 0, 419, 110,
	454, 433, 0, 111, 112, 476, 113, 0, 114, 0,
	0, 326, 0, 115, 464, 0, 204, 0, 116, 117,
	460, 462, 0, 0, 118, 0, 327, 119, 477, 478,
	479, 0, 445, 0, 328, 120, 329, 121, 122, 0,
	0, 465, 330, 123, 331, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 332, 131, 132, 135,
	133, 409, 134, 434, 461, 136, 480, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 333, 140, 334, 455,
	141, 142, 0, 456, 143, 217, 0, 144, 145, 146,
	481, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	335, 154, 155, 423, 156, 0, 241, 157, 158, 0,
	159, 160, 451, 161, 162, 336, 163, 482, 164, 0,
	165, 166, 168, 221, 167, 457, 0, 0, 169, 170,
	0, 223, 483, 484, 0, 0, 171, 458, 459, 432,
	172, 173, 1656, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 228, 485, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 410, 0, 438, 426, 427,
	428, 425, 414, 0, 0, 406, 407, 0, 0, 87,
	88, 408, 89, 0, 415, 0, 0, 420, 0, 0,
	0, 90, 91, 1655, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 325, 100, 1657, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 326, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 327,
	119, 477, 478, 479, 0, 445, 0, 328, 120, 329,
	121, 122, 0, 0, 465, 330, 123, 331, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 333,
	140, 334, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 335, 154, 155, 423, 156, 0, 241,
	157, 158, 0, 159, 160, 451, 161, 162, 336, 163,
	482, 164, 0, 165, 166, 168, 221, 167, 457, 0,
	0, 169, 170, 0, 223, 483, 484, 0, 0, 171,
	458, 459, 432, 172, 173, 1656, 175, 0, 0, 176,
	177, 452, 0, 178, 179, 180, 228, 485, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 410, 0,
	438, 426, 427, 428, 425, 414, 0, 0, 406, 407,
	0, 0, 87, 88, 408, 89, 0, 415, 0, 0,
	420, 0, 0, 0, 90, 91, 186, 467, 468, 92,
	469, 470, 0, 93, 191, 192, 94, 435, 453, 471,
	472, 195, 0, 463, 0, 446, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 325, 100, 101, 0, 447,
	449, 0, 448, 450, 102, 103, 104, 105, 473, 106,
	474, 475, 0, 0, 107, 0, 0, 0, 466, 109,
	0, 0, 0, 0, 419, 110, 454, 433, 0, 111,
	112, 476, 113, 0, 114, 0, 0, 326, 0, 115,
	464, 0, 204, 0, 116, 117, 460, 462, 0, 0,
	118, 0, 327, 119, 477, 478, 479, 0, 445, 0,
	328, 120, 329, 121, 122, 0, 0, 465, 330, 123,
	331, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 409, 134, 434,
	461, 136, 480, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 333, 140, 334, 455, 141, 142, 0, 456,
	143, 217, 0, 144, 145, 146, 481, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 335, 154, 155, 423,
	156, 0, 241, 157, 158, 0, 159, 160, 451, 161,
	162, 336, 163, 482, 164, 0, 165, 166, 168, 221,
	167, 457, 0, 0, 169, 170, 0, 223, 483, 484,
	0, 0, 171, 458, 459, 432, 172, 173, 174, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 228,
	485, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 438, 426, 427, 428, 425, 414, 0,
	0, 406, 407, 0, 0, 87, 88, 408, 89, 0,
	415, 0, 0, 420, 0, 0, 0, 90, 91, 186,
	467, 468, 92, 469, 470, 0, 93, 191, 192, 94,
	435, 453, 471, 472, 195, 0, 463, 0, 446, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 325, 100,
	101, 0, 447, 449, 0, 448, 450, 102, 103, 104,
	105, 473, 106, 474, 475, 0, 0, 107, 0, 0,
	0, 466, 109, 0, 0, 0, 0, 419, 110, 454,
	433, 0, 111, 112, 476, 113, 0, 114, 0, 0,
	326, 0, 115, 464, 0, 204, 0, 116, 117, 460,
	462, 0, 0, 118, 0, 327, 119, 477, 478, 479,
	0, 445, 0, 328, 120, 329, 121, 122, 0, 0,
	465, 330, 123, 331, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 332, 131, 132, 135, 133,
	0, 134, 434, 461, 136, 480, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 333, 140, 334, 455, 141,
	142, 0, 456, 143, 217, 0, 144, 145, 146, 481,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 335,
	154, 155, 1032, 156, 0, 241, 157, 158, 0, 159,
	160, 451, 161, 162, 336, 163, 482, 164, 0, 165,
	166, 168, 221, 167, 457, 0, 0, 169, 170, 0,
	223, 483, 484, 0, 0, 171, 458, 459, 432, 172,
	173, 174, 175, 0, 0, 176, 177, 452, 0, 178,
	179, 180, 228, 485, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 438, 426, 427, 428, 425, 414,
	0, 0, 0, 0, 1028, 1029, 87, 88, 0, 89,
	1030, 0, 0, 1031, 420, 0, 0, 0, 90, 91,
	0, 467, 468, 92, 469, 470, 0, 93, 191, 192,
	94, 435, 453, 471, 472, 195, 0, 463, 0, 446,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 325,
	100, 1657, 0, 447, 449, 0, 448, 450, 102, 103,
	104, 105, 473, 106, 474, 475, 0, 0, 107, 0,
	0, 0, 466, 109, 0, 0, 0, 0, 419, 110,
	454, 433, 0, 111, 112, 476, 113, 0, 114, 0,
	0, 326, 0, 115, 464, 0, 204, 0, 116, 117,
	460, 462, 0, 0, 118, 0, 327, 119, 477, 478,
	479, 0, 445, 0, 0, 120, 329, 121, 122, 0,
	0, 465, 330, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 332, 131, 132, 135,
	133, 409, 134, 434, 461, 136, 480, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 333, 140, 334, 455,
	141, 142, 0, 456, 143, 217, 0, 144, 145, 146,
	481, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	335, 154, 155, 423, 156, 0, 241, 157, 158, 0,
	159, 160, 451, 161, 162, 0, 163, 482, 164, 0,
	165, 166, 168, 221, 167, 457, 0, 0, 169, 170,
	0, 223, 483, 484, 0, 0, 171, 458, 459, 432,
	172, 173, 1656, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 228, 485, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 407, 87, 88, 0,
	89, 408, 0, 0, 415, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 453, 193, 194, 195, 0, 463, 0,
	446, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	325, 100, 101, 0, 447, 449, 0, 448, 450, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 454, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 326, 0, 115, 464, 0, 204, 0, 116,
	117, 460, 462, 0, 0, 118, 0, 327, 119, 207,
	208, 209, 0, 210, 0, 328, 120, 329, 121, 122,
	0, 0, 465, 330, 123, 331, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 332, 131, 132,
	135, 133, 0, 134, 0, 461, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 333, 140, 334,
	455, 141, 142, 0, 456, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 335, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 451, 161, 162, 336, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 457, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 458, 459,
	0, 172, 173, 174, 175, 0, 0, 176, 177, 452,
	0, 178, 179, 180, 228, 229, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 1443, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 324, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 325, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 326, 0, 115, 203, 0, 204, 0,
	116, 117, 205, 206, 0, 0, 118, 0, 327, 119,
	207, 208, 209, 0, 210, 0, 328, 120, 329, 121,
	122, 0, 0, 211, 330, 123, 331, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 332, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 333, 140,
	334, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 335, 154, 155, 219, 156, 0, 241, 157,
	158, 49, 159, 160, 0, 161, 162, 336, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 51,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 323, 229, 0, 181, 0,
	0, 0, 47, 182, 183, 184, 185, 0, 48, 319,
	562, 566, 0, 567, 557, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 46, 0, 0, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 324, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 325, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 570, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 559, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 326, 0, 115, 203,
	0, 204, 0, 116, 117, 205, 206, 0, 0, 118,
	0, 327, 119, 207, 208, 209, 0, 210, 0, 328,
	120, 329, 121, 122, 0, 0, 211, 330, 123, 331,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 332, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 560, 0, 0, 0, 139,
	214, 333, 140, 334, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 335, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 161, 162,
	336, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 558, 172, 173, 174, 175, 0,
	0, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	319, 562, 566, 0, 567, 557, 0, 0, 0, 0,
	568, 563, 87, 88, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 324, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 325, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 553, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 559, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 326, 0, 115,
	203, 0, 204, 0, 116, 117, 205, 206, 0, 0,
	118, 0, 327, 119, 207, 208, 209, 0, 210, 0,
	328, 120, 329, 121, 122, 0, 0, 211, 330, 123,
	331, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 560, 0, 0, 0,
	139, 214, 333, 140, 334, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 335, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 336, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 558, 172, 173, 174, 175,
	0, 0, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 319, 562, 566, 0, 567, 557, 0, 0, 0,
	0, 568, 563, 87, 88, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 324, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 325, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 559, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 326, 0,
	115, 203, 0, 204, 0, 116, 117, 205, 206, 0,
	0, 118, 0, 327, 119, 207, 208, 209, 0, 210,
	0, 328, 120, 329, 121, 122, 0, 0, 211, 330,
	123, 331, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 332, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 560, 0, 0,
	0, 139, 214, 333, 140, 334, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 335, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 336, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 558, 172, 173, 174,
	175, 0, 0, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 84, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 0, 568, 563, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 0, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 293,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 241, 157, 158, 49, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 51, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 0, 0, 178, 179,
	180, 323, 229, 0, 181, 0, 0, 0, 47, 182,
	183, 184, 185, 84, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 898, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 49, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 51, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 0, 176, 177, 0, 0, 178,
	179, 180, 323, 229, 0, 181, 0, 0, 0, 47,
	182, 183, 184, 185, 84, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 46, 0, 1138, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	205, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 396, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 293, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 0, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 898, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 205, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 834, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 0, 172, 173, 174, 175, 0, 0, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 1351, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 205, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 0,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 496, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 538, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 205, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 537, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	84, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 87, 88, 0, 89, 182, 183, 184, 185,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 541, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 205, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 319, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 87, 88, 0, 89, 182, 183, 184,
	185, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 541, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 324, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 325, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 326, 0,
	115, 203, 0, 204, 0, 116, 117, 205, 206, 0,
	0, 118, 0, 327, 119, 207, 208, 209, 0, 210,
	0, 328, 120, 329, 121, 122, 0, 0, 211, 330,
	123, 331, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 332, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 333, 140, 334, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 335, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 336, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 84, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 87, 88, 0, 89, 182, 183,
	184, 185, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 808, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 806, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 811, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 875, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 810, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 876, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 84, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 808, 196, 0, 0, 803,
	95, 96, 97, 0, 98, 806, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 811, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 802,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 810, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 0, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 809, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 84, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 0, 1138, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	205, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 84, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 0, 181, 87, 88, 0,
	89, 182, 183, 184, 185, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 293, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 84, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 87, 88,
	0, 89, 182, 183, 184, 185, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 299, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 293, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 0, 172, 173, 174, 175, 0, 84, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	87, 88, 0, 89, 182, 183, 184, 185, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 1076, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 84,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 0,
	181, 87, 88, 0, 89, 182, 183, 184, 185, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 1074, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	84, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 87, 88, 0, 89, 182, 183, 184, 185,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 1065, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 84, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 87, 88, 0, 89, 182, 183, 184,
	185, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 0, 0,
	115, 203, 0, 204, 0, 116, 117, 682, 206, 0,
	0, 118, 0, 0, 119, 207, 208, 209, 0, 210,
	0, 0, 120, 0, 121, 122, 0, 0, 211, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 0, 140, 0, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 0, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 84, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 87, 88, 0, 89, 182, 183,
	184, 185, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 0, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 82, 157, 158, 0, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 84, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 0, 181, 87, 88, 0, 89, 182,
	183, 184, 185, 0, 524, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 0, 159,
	160, 0, 0, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 84, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 0, 181, 87, 88, 0, 89,
	182, 183, 184, 185, 0, 0, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	381, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 84, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 0, 181, 87, 88, 0,
	89, 182, 183, 184, 185, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 378, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 84, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 87, 88,
	0, 89, 182, 183, 184, 185, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 342, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 205, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 238, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 237, 224, 225, 0, 0, 233, 226,
	227, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 238, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 237, 224, 225, 0, 0, 233,
	226, 227, 0, 172, 173, 174, 175, 0, 84, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	87, 88, 0, 89, 182, 183, 184, 185, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 314, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 84,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 0,
	181, 87, 88, 0, 89, 182, 183, 184, 185, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 311, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	84, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 87, 88, 0, 89, 182, 183, 184, 185,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 309, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 84, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 87, 88, 0, 89, 182, 183, 184,
	185, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 0, 0,
	115, 203, 0, 204, 0, 116, 117, 302, 206, 0,
	0, 118, 0, 0, 119, 207, 208, 209, 0, 210,
	0, 0, 120, 0, 121, 122, 0, 0, 211, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 0, 140, 0, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 0, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 84, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 87, 88, 0, 89, 182, 183,
	184, 185, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 0, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 282,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 84, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 0, 181, 87, 88, 0, 89, 182,
	183, 184, 185, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 231, 0, 0, 125, 0,
	126, 127, 128, 129, 238, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 0, 159,
	232, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	237, 224, 225, 0, 0, 233, 226, 227, 0, 172,
	173, 174, 175, 0, 84, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 0, 181, 87, 88, 0, 89,
	182, 183, 184, 185, 0, 0, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	205, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 0, 0, 216, 143, 217, 0, 144, 0, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 0, 0, 241, 157, 158, 0,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 706, 181, 724, 725, 726,
	0, 182, 183, 184, 185, 0, 0, 727, 0, 0,
	0, 0, 0, 708, 706, 733, 724, 725, 726, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 0, 708, 707, 733, 0, 0, 0, 0, 721,
	0, 706, 0, 724, 725, 726, 0, 0, 0, 0,
	0, 0, 707, 727, 0, 0, 0, 0, 721, 708,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 729,
	0, 0, 0, 0, 0, 722, 0, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	0, 0, 0, 734, 722, 0, 0, 728, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 728, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 728, 0, 0, 0, 0, 0, 723,
	0, 706, 0, 724, 725, 726, 0, 0, 0, 731,
	0, 0, 0, 727, 0, 0, 0, 0, 0, 708,
	0, 733, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 707,
	730, 0, 718, 719, 720, 721, 717, 714, 715, 716,
	709, 710, 711, 712, 713, 0, 0, 0, 0, 730,
	1614, 718, 719, 720, 0, 717, 714, 715, 716, 709,
	710, 711, 712, 713, 0, 0, 0, 0, 0, 1613,
	0, 0, 0, 0, 0, 0, 730, 0, 718, 719,
	720, 0, 717, 714, 715, 716, 709, 710, 711, 712,
	713, 0, 0, 734, 0, 0, 1596, 0, 0, 0,
	706, 0, 724, 725, 726, 732, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 729, 0, 0, 708, 0,
	733, 722, 0, 0, 0, 0, 0, 706, 0, 724,
	725, 726, 0, 0, 0, 0, 0, 0, 707, 727,
	0, 0, 0, 728, 721, 708, 0, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 707, 0, 0, 0, 0,
	0, 721, 0, 0, 0, 706, 723, 724, 725, 726,
	0, 0, 0, 0, 0, 0, 731, 727, 0, 0,
	0, 0, 0, 708, 0, 733, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 707, 732, 0, 0, 0, 0, 721,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 734,
	722, 0, 0, 0, 0, 0, 730, 0, 718, 719,
	720, 732, 717, 714, 715, 716, 709, 710, 711, 712,
	713, 729, 728, 0, 0, 0, 1575, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 728,
	0, 0, 0, 0, 1202, 723, 1218, 1219, 1220, 732,
	0, 0, 0, 0, 0, 731, 1473, 0, 0, 729,
	0, 0, 0, 0, 0, 722, 0, 0, 0, 0,
	0, 0, 723, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 0, 728, 1215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 730, 0, 718, 719, 720,
	0, 717, 714, 715, 716, 709, 710, 711, 712, 713,
	723, 0, 0, 0, 0, 1570, 0, 0, 0, 0,
	731, 0, 730, 0, 718, 719, 720, 0, 717, 714,
	715, 716, 709, 710, 711, 712, 713, 0, 0, 0,
	0, 0, 1566, 0, 0, 0, 0, 706, 1221, 724,
	725, 726, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 0, 0, 1216, 708, 0, 733, 0, 0,
	730, 0, 718, 719, 720, 0, 717, 714, 715, 716,
	709, 710, 711, 712, 713, 707, 0, 0, 0, 0,
	1505, 721, 706, 0, 724, 725, 726, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	708, 0, 733, 0, 0, 0, 0, 0, 0, 1217,
	0, 0, 706, 0, 724, 725, 726, 0, 0, 0,
	707, 0, 0, 0, 727, 0, 721, 0, 0, 0,
	708, 0, 733, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	707, 732, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 729, 0, 0, 0, 0, 0, 722, 0, 0,
	0, 1212, 1213, 1214, 0, 1211, 1208, 1209, 1210, 1203,
	1204, 1205, 1206, 1207, 734, 0, 0, 0, 0, 728,
	0, 1202, 0, 1218, 1219, 1220, 732, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 729, 0, 0, 0,
	0, 0, 722, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 723, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 731, 0, 728, 1215, 729, 0, 0, 0,
	0, 0, 722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 723, 1202, 0,
	1218, 1219, 1220, 0, 0, 0, 0, 731, 0, 0,
	1323, 0, 730, 0, 718, 719, 720, 0, 717, 714,
	715, 716, 709, 710, 711, 712, 713, 723, 0, 0,
	0, 0, 1504, 0, 0, 1221, 706, 731, 724, 725,
	726, 0, 1215, 0, 0, 0, 0, 0, 727, 0,
	0, 1216, 0, 0, 708, 0, 733, 730, 0, 718,
	719, 720, 0, 717, 714, 715, 716, 709, 710, 711,
	712, 713, 0, 0, 707, 0, 0, 1416, 0, 0,
	721, 0, 0, 0, 0, 0, 0, 730, 0, 718,
	719, 720, 0, 717, 714, 715, 716, 709, 710, 711,
	712, 713, 0, 0, 0, 0, 1217, 1354, 0, 0,
	0, 706, 1221, 724, 725, 726, 0, 0, 0, 0,
	0, 0, 0, 727, 0, 0, 0, 0, 1216, 708,
	0, 733, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 707,
	732, 0, 0, 0, 0, 721, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 0, 722, 0, 1212, 1213,
	1214, 0, 1211, 1208, 1209, 1210, 1203, 1204, 1205, 1206,
	1207, 0, 0, 1217, 0, 0, 0, 0, 728, 0,
	0, 0, 0, 0, 0, 0, 706, 0, 724, 725,
	726, 0, 0, 0, 0, 0, 0, 0, 727, 0,
	0, 0, 0, 734, 708, 0, 733, 0, 0, 0,
	0, 723, 0, 0, 0, 732, 0, 0, 0, 0,
	0, 731, 0, 0, 707, 729, 0, 0, 0, 0,
	721, 722, 0, 0, 0, 1212, 1213, 1214, 0, 1211,
	1208, 1209, 1210, 1203, 1204, 1205, 1206, 1207, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1202, 0, 1218, 1219, 1220,
	0, 730, 0, 718, 719, 720, 0, 717, 714, 715,
	716, 709, 710, 711, 712, 713, 723, 0, 734, 0,
	0, 1329, 0, 0, 0, 0, 731, 0, 0, 706,
	732, 724, 725, 726, 0, 0, 0, 0, 0, 1215,
	729, 727, 0, 0, 0, 0, 722, 708, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 707, 728, 0,
	0, 0, 0, 721, 0, 0, 730, 0, 718, 719,
	720, 0, 717, 714, 715, 716, 709, 710, 711, 712,
	713, 0, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 723, 0, 0, 706, 0, 724, 725, 726, 1221,
	0, 731, 0, 0, 0, 1674, 727, 0, 0, 0,
	0, 0, 708, 0, 733, 1216, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 732, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 722,
	0, 730, 0, 718, 719, 720, 0, 717, 714, 715,
	716, 709, 710, 711, 712, 713, 0, 0, 0, 1400,
	1217, 728, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1232, 0, 1673, 1231, 706, 0, 724, 725, 726,
	0, 0, 0, 0, 0, 0, 734, 727, 0, 0,
	0, 886, 0, 708, 723, 733, 0, 0, 732, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 729, 0,
	0, 0, 0, 707, 722, 0, 0, 0, 0, 721,
	0, 0, 1212, 1213, 1214, 0, 1211, 1208, 1209, 1210,
	1203, 1204, 1205, 1206, 1207, 0, 728, 0, 0, 0,
	0, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 718, 719, 720, 0,
	717, 714, 715, 716, 709, 710, 711, 712, 713, 723,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 0, 0, 0, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 730,
	0, 718, 719, 720, 0, 717, 714, 715, 716, 709,
	710, 711, 712, 713, 0, 736, 0, 0, 0, 0,
	0, 706, 0, 724, 725, 726, 0, 0, 0, 0,
	723, 0, 0, 727, 0, 0, 735, 0, 0, 708,
	731, 733, 706, 0, 724, 725, 726, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 707,
	708, 0, 733, 0, 0, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	730, 0, 718, 719, 720, 0, 717, 714, 715, 716,
	709, 710, 711, 712, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	706, 0, 724, 725, 726, 732, 0, 0, 0, 0,
	0, 0, 727, 0, 734, 729, 0, 0, 708, 0,
	733, 722, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 707, 0,
	0, 0, 722, 728, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 706, 0,
	724, 725, 726, 0, 0, 0, 0, 723, 0, 0,
	727, 0, 734, 0, 0, 0, 708, 731, 733, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 707, 0, 0, 0,
	722, 0, 721, 0, 0, 0, 730, 0, 718, 719,
	720, 0, 717, 714, 715, 716, 709, 710, 711, 712,
	713, 0, 728, 0, 0, 0, 0, 730, 0, 718,
	719, 720, 0, 717, 714, 715, 716, 709, 710, 711,
	712, 713, 0, 0, 0, 0, 0, 0, 1238, 706,
	0, 724, 725, 726, 0, 723, 0, 0, 0, 0,
	734, 727, 0, 0, 1233, 731, 0, 708, 0, 733,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 729, 0, 0, 0, 0, 707, 722, 0,
	0, 0, 0, 721, 706, 0, 724, 725, 726, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	728, 0, 708, 0, 733, 730, 0, 718, 719, 720,
	0, 717, 714, 715, 716, 709, 710, 711, 712, 713,
	0, 0, 707, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 723, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 728, 0, 730, 0, 718, 719, 720, 732, 717,
	714, 715, 716, 709, 710, 711, 712, 713, 729, 0,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 728, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 1200, 724, 725, 726,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	1195, 0, 0, 708, 0, 733, 0, 0, 0, 723,
	1202, 0, 1218, 1219, 1220, 0, 0, 0, 0, 731,
	0, 0, 0, 707, 730, 0, 718, 719, 720, 721,
	717, 714, 715, 716, 709, 710, 711, 712, 713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 718, 719, 720, 0, 717, 714, 715, 716, 709,
	710, 711, 712, 713, 0, 0, 0, 734, 0, 0,
	0, 0, 0, 0, 706, 0, 724, 725, 726, 732,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 729,
	0, 0, 708, 0, 733, 722, 0, 0, 0, 0,
	0, 706, 0, 724, 725, 726, 0, 0, 0, 0,
	0, 0, 707, 727, 0, 0, 0, 728, 721, 708,
	1216, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 706,
	723, 724, 725, 726, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 708, 0, 733,
	0, 0, 0, 0, 0, 1217, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 707, 732, 0,
	0, 0, 0, 721, 0, 0, 0, 0, 729, 0,
	0, 0, 0, 734, 722, 0, 0, 0, 0, 0,
	730, 0, 718, 719, 720, 732, 717, 714, 715, 716,
	709, 710, 711, 712, 713, 729, 728, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 0, 1212, 1213, 1214,
	0, 1211, 1208, 1209, 1210, 1203, 1204, 1205, 1206, 1207,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 732, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 722,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 718, 719, 720, 0, 717, 714, 715, 716, 709,
	710, 711, 712, 713, 723, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 730, 0, 718, 719,
	720, 0, 717, 714, 715, 716, 709, 710, 711, 712,
	713, 0, 0, 0, 0, 0, 0, 0, 915, 931,
	906, 923, 922, 0, 0, 908, 907, 0, 0, 0,
	933, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 718, 719, 720, 0,
	717, 714, 715, 716, 709, 710, 711, 712, 713, 928,
	0, 920, 919, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 911, 912, 913, 0, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 914, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 909, 0, 0, 929,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934,
}
var sqlPact = [...]int{

	2321, -1000, 2, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 745, -1000, -1000, -1000, 496, 634, 42, 1035, 1035,
	14418, -1000, -1000, 16959, 2125, 345, 365, 345, 345, 337,
	14418, 469, 600, 103, -1000, 711, -26, 16728, 13263, 1176,
	-4, 12801, 234, 2321, 13032, 13263, 16497, 1024, 900, 12801,
	16266, 16035, 15804, -1000, 8642, -1000, -1000, -1000, -1000, 781,
	-1000, -5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	777, -1000, 13263, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15573, 15342, 705, -1000, -1000, 443, 280, 1206, -1000,
	6, -1000, -1000, -1000, 1022, -1000, 774, 1017, 1011, 1010,
	988, 279, 729, -1000, 705, -1000, 705, -1000, -1000, -1000,
	460, 14418, -1000, 12801, -1000, 15111, 924, 14880, -1000, 711,
	-1000, -1000, -1000, 812, 1170, 1170, 1170, 1186, 80, 79,
	103, -13, 13263, -1000, 239, -13, 6353, 6353, -1000, -1000,
	234, -1000, 252, 11144, 4, -1000, 6100, -1000, 875, 1084,
	592, 583, 1083, -82, 12801, 13263, 486, 14649, -1000, 1082,
	84, 1080, -1000, -21, 1078, -1000, -36, -1000, -1000, -1000,
	-1000, -1000, -1000, 234, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11395, 1197, 11395,
	-1000, -1000, 1232, -1000, -1000, -6, -8, 869, 891, 9146,
	8895, 1134, 1925, -1000, -1000, -1000, 5, 3807, 13263, 1032,
	11395, 13263, 13263, 13263, -1000, 13263, -1000, 868, -1000, -1000,
	-9, -11, -1000, 14418, -1000, 88, -1000, 233, 843, 14187,
	-1000, 842, -1000, 812, -1000, 709, 865, 6877, 7636, 103,
	-1000, -1000, 103, 103, 7636, -1000, -1000, 13263, -13, 1227,
	13263, 121, -1000, 18921, -1000, -1000, 7636, 7636, 7636, 7636,
	7636, 679, -1000, -1000, -1000, 4311, -1000, -1000, 4, 227,
	168, -1000, -1000, 226, 4, -1000, -1000, -1000, -1000, 222,
	1348, 363, -1000, -1000, -1000, 7636, 287, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1031, 220, 216, -1000,
	-1000, -1000, -1000, 215, 210, 208, 201, 198, 184, 180,
	178, 177, 176, 175, 173, 171, 666, -1000, 303, -1000,
	-1000, 303, 303, -1000, 143, 143, 144, -1000, -1000, -1000,
	143, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 169, 121, -1000, -1000, -1000, 13263, 4, -1000, -1000,
	-1000, 7636, 3555, -40, -1000, 19524, -1000, -32, 619, -1000,
	12329, 1160, 1146, 1143, 12801, 458, 455, 13263, 13263, 293,
	51, 1211, 10642, -1000, 13263, 13263, -1000, 13263, -1000, -1000,
	13263, 13263, 13263, -26, 11857, 453, -22, 11626, 13263, -1000,
	-10, -1000, -1000, 976, 341, 642, 909, 708, -1000, -1000,
	-1000, -1000, -16, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1331, -1000, -1000, -1000, -1000, 1330, -16,
	-1000, -1000, -1000, -1000, -1000, 1344, -1000, -1000, -1000, -1000,
	3807, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13263, -1000, -1000,
	-1000, -1000, -1000, -1000, 642, 909, -1000, -1000, 12801, 12088,
	1077, 766, 839, -1000, 1076, -1000, -1000, -1000, -1000, 19524,
	-1000, 19524, 640, 915, -1000, 915, -17, -1000, 18745, -1000,
	167, -41, -1000, 293, 6353, 10391, 19797, 13263, 371, 7636,
	7636, 7636, 7636, 7636, 7636, 7636, 7636, 7636, 7636, 7636,
	7636, 7636, 7636, 7636, 7636, 7636, 7636, 7636, 7636, 7636,
	1020, 452, 1064, 680, 141, 3807, -1000, 1263, 1263, 1263,
	19599, 19599, 139, -12, 18381, -20, 4, -1000, -1000, 5576,
	5323, 4, 2869, -1000, 717, 1329, 301, 19524, 1040, 946,
	164, 78, 77, 7636, 867, 7636, 7889, 7636, 7636, 4564,
	7636, 7636, 7636, 7636, 7636, 7636, -1000, 148, -1000, -1000,
	-1000, -1000, 1324, -1000, -1000, 1322, -1000, 1315, 293, 76,
	-1000, 166, -1000, -1000, 6100, -1000, 671, 13263, 13263, 13263,
	-1000, -1000, 838, 13956, -1000, 19797, 13263, -1000, 146, 145,
	879, 877, 13263, 13263, 13725, 13494, 13263, 803, 13263, 13263,
	574, -1000, 550, 7636, 764, -1000, 9889, 308, 13263, 63,
	-1000, -1000, -1000, 263, 13263, -1000, -1000, -1000, 84, -1000,
	-21, -1000, -1000, 13263, 11626, -22, -25, -1000, -1000, 13263,
	909, -1000, -1000, -1000, 613, -1000, 614, -1000, 9397, -1000,
	-1000, -1000, 717, -1000, -35, -1000, -1000, -1000, -1000, 74,
	-27, -1000, -1000, -1000, -1000, 13263, 204, 13263, 13263, 1071,
	13263, -1000, -1000, -1000, 7636, -1000, -1000, -1000, -26, 13263,
	-1000, 941, -1000, -29, 1215, -123, 12570, -1000, 9638, -1000,
	1204, -1000, -1000, -1000, -1000, 57, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 144, 666, 143,
	143, 143, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 303, 303, 303, -1000, -1000, 269, 635, 635, 1216,
	1216, 1216, 1522, 1522, 477, 199, 2558, 2558, 2558, 751,
	483, 483, 2558, 2558, 2558, 19599, 19551, 540, 7636, 450,
	664, 141, 7636, -1000, 797, -1000, -1000, -1000, 973, 127,
	7889, 7889, -1000, -1000, -1000, 4311, -1000, -1000, 124, 7636,
	-1000, 7636, -42, -116, -1000, 19524, -1000, -46, -1000, -1000,
	-34, 7636, 7636, 7636, 73, -1000, 447, -1000, 440, 438,
	428, -1000, 122, 72, 462, -1000, 7636, 685, 116, 113,
	7636, -1000, -1000, 19415, 69, 972, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 67, 19254, 65, 392, -1000, 7889, 7889,
	7889, 4311, 112, 62, 18654, -143, 19209, 6606, 6606, 6606,
	60, 19118, 7636, -143, 2531, 2442, 2172, -50, -52, -56,
	1314, -60, 59, 58, 941, -1000, -1000, 7636, -1000, -1000,
	-1000, 420, 394, 1057, -1000, 830, -1000, 660, 7636, 13263,
	111, 110, 625, -1000, 1055, 696, 1051, 696, -1000, -32,
	539, -1000, -1000, 379, -1000, 6353, 19524, 550, 1145, -62,
	-1000, -1000, -1000, 293, 10642, 6100, -67, -1000, -35, -1000,
	-35, -1000, -1000, -1000, -1000, -1000, -1000, 13263, -1000, 12088,
	109, 13263, 108, 107, 13263, -1000, -1000, 55, -1000, -1000,
	-1000, -1000, -1000, 940, 1185, 10391, 901, 895, 10391, 1041,
	691, 691, 691, -1000, 12570, 3290, -1000, -1000, 13263, 106,
	10140, 49, 1215, 246, 245, -1000, 1313, 7636, 540, 7636,
	7889, 7889, -1000, 540, -1000, -1000, -1000, -1000, 971, 104,
	7636, 19797, 18268, 18191, -72, 5070, -38, 18306, 7636, -1000,
	-1000, 168, -1000, 48, 5847, -1000, 18942, -24, -24, -1000,
	852, 833, 620, 494, 1309, 1338, 1089, -1000, 7636, 19030,
	-1000, 10893, 296, 707, 18112, 19797, -1000, 7636, -1000, 966,
	7636, -1000, 19797, 7889, 7889, 7889, 7889, 7889, 7889, 7889,
	7889, 7889, 7889, 7889, 7889, 7889, 7889, 7889, 7889, 7889,
	7889, 871, 7889, 1261, 1261, 1261, -45, 4817, -1000, 1028,
	966, 7636, 7636, 19797, 47, 44, 43, -1000, 7636, -143,
	7636, 7636, 7636, -1000, -1000, -1000, 39, -1000, 1296, -1000,
	-1000, 940, 18466, 13263, 13263, 13263, 1048, 1345, -1000, 18082,
	-74, 13263, 13263, -1000, 897, 903, 323, 13263, -1000, 13263,
	-1000, 13263, 13263, 13263, 13263, -85, -1000, 152, -26, 13263,
	550, -1000, -1000, 262, -1000, -1000, 8391, 100, 12088, 8391,
	747, -1000, 291, 7636, 7636, 1215, 10391, 10391, 1030, 882,
	10391, -1000, -1000, -1000, -1000, -1000, -1000, 893, 98, 13263,
	12570, 368, 1294, 36, 1203, 540, 17924, 2150, 7636, 19797,
	2579, -80, -1000, 7636, 7636, -1000, -86, -1000, 7636, -1000,
	19524, -1000, 1337, 7636, 34, 33, 30, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 29, -1000, -1000, 19524, 7636, -1000,
	-1000, 17190, 7636, 28, -1000, 21, 19524, 1028, 19524, -1000,
	514, 514, 1261, 1261, 1261, 939, 939, 545, 840, 432,
	432, 432, 317, 520, 520, 432, 432, 432, 961, 898,
	96, 18545, 7636, -88, -1000, -1000, -1000, 19524, 19524, 20,
	-1000, -1000, -1000, -143, 2123, 18037, 17815, -1000, 18, 291,
	-1000, -1000, -1000, -1000, 13263, -1000, 13263, -1000, 13263, 813,
	-1000, -1000, 876, 91, 7889, 13263, -1000, 675, -92, -93,
	802, -1000, 799, 7636, -1000, 19797, 696, 696, -1000, 378,
	375, -1000, 1096, 8391, 1141, -1000, -1000, -1000, 90, -94,
	-1000, 197, 1163, 7636, -1000, -1000, 89, 8391, 16, -101,
	13263, -1000, 13263, 19524, -143, -1000, 1030, -1000, 86, 7636,
	10391, -1000, -156, -1000, 99, -1000, 13263, -103, -1000, -1000,
	242, 241, -1000, 7636, 7636, 2579, -107, -1000, 19797, 540,
	540, -1000, 17767, -1000, 18942, -1000, -1000, -1000, -1000, 19524,
	668, -1000, 17740, -1000, -1000, -1000, 7889, 957, 85, 19797,
	17631, -1000, -1000, 7636, -1000, -1000, -1000, -1000, -1000, 892,
	-1000, -1000, -1000, 7636, 18545, 52, -1000, 83, -1000, -1000,
	-1000, 601, -1000, -1000, 19524, 1171, -1000, -1000, 13263, 13263,
	406, -108, 13263, -1000, -1000, 4058, 675, 8391, 1161, 4,
	13263, 1161, 17471, 2869, -114, -1000, 675, 82, -129, -1000,
	1205, -1000, 13263, 19524, -1000, 893, -1000, 3807, -120, -1000,
	-1000, -1000, 540, 540, -1000, -1000, -1000, 14, 707, 1172,
	-1000, 19440, 7889, 19797, -124, -1000, 17444, -1000, 17425, 857,
	13263, 13263, 13263, 314, 13263, -1000, -1000, 484, -1000, 293,
	-1000, -1000, -1000, -1000, -1000, -1000, 1163, -34, 675, -1000,
	8391, 13263, 64, -130, -1000, -1000, -1000, -1000, 561, 7636,
	19440, -131, -1000, -1000, -1000, 712, 699, -135, -142, 52,
	-1000, 7636, -1000, 10642, -1000, 1161, 11, -1000, -144, -1000,
	-1000, -1000, 8, 7383, 7383, -143, -1000, -1000, 730, 713,
	519, -1000, -1000, -1000, -1000, -1000, 857, 19524, -125, -1000,
	-1000, 675, -1000, -1000, -1000, 8140, 770, 510, 18579, -1000,
	-1000, 1101, -1000, 320, 697, 697, 712, -1000, -1000, 1236,
	-1000, -1000, -1000, -1000, -1000, -1000, 1245, -1000, -1000, 907,
	-1000, -1000, 7130, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1565, 1564, 1214, 1562, 1561, 1560, 1555, 1554, 78,
	1551, 1547, 101, 1546, 76, 1545, 1544, 1542, 1540, 41,
	1538, 1533, 1531, 1530, 1529, 75, 39, 116, 1840, 98,
	1527, 1526, 1525, 10, 84, 80, 1524, 36, 81, 102,
	1229, 51, 1520, 111, 20, 16, 150, 74, 1519, 108,
	109, 1518, 1517, 1516, 38, 1513, 1510, 1509, 12, 43,
	14, 1508, 23, 25, 1506, 1505, 83, 1503, 79, 95,
	33, 105, 87, 1502, 55, 9, 52, 1500, 34, 1494,
	30, 60, 115, 1490, 47, 252, 49, 26, 56, 1489,
	1488, 1487, 1486, 61, 68, 65, 1485, 1484, 57, 1482,
	110, 112, 1481, 1479, 1478, 1477, 1472, 1470, 646, 1465,
	1455, 537, 6, 45, 48, 27, 91, 90, 28, 1446,
	15, 1443, 0, 774, 734, 1441, 35, 32, 62, 44,
	46, 22, 1436, 88, 1433, 1432, 1429, 1428, 1427, 59,
	1426, 53, 118, 37, 50, 71, 21, 54, 70, 86,
	132, 92, 1425, 99, 1423, 137, 1420, 1419, 639, 66,
	1417, 1416, 1415, 604, 596, 539, 277, 1414, 1413, 477,
	345, 1412, 1411, 63, 1408, 1407, 119, 1406, 117, 24,
	1400, 94, 1399, 77, 1398, 559, 42, 17, 1397, 114,
	58, 1395, 1392, 1389, 29, 3, 7, 4, 5, 2,
	19, 18, 1387, 1385, 97, 72, 1384, 120, 1381, 1380,
	31, 1377, 1370, 13, 1369, 11, 1368, 8, 1, 1367,
	113, 1365, 85, 1364, 1224, 1362, 121, 1360, 1356, 1259,
	64,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 31, 31, 37, 37, 37, 36, 36, 32, 32,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	71, 71, 70, 70, 73, 73, 11, 11, 12, 12,
	12, 12, 154, 154, 153, 13, 18, 220, 220, 220,
	224, 224, 225, 225, 226, 226, 226, 226, 226, 226,
	226, 222, 222, 21, 21, 21, 21, 108, 108, 110,
	110, 110, 110, 39, 107, 107, 107, 107, 109, 109,
	109, 109, 178, 176, 176, 183, 183, 183, 51, 51,
	51, 51, 51, 52, 52, 52, 175, 175, 175, 175,
	184, 184, 184, 184, 184, 184, 53, 53, 53, 182,
	182, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 177, 177, 221, 221, 223, 223,
	8, 8, 54, 54, 55, 55, 114, 114, 114, 113,
	192, 192, 193, 193, 193, 194, 194, 194, 194, 194,
	194, 194, 191, 191, 189, 189, 190, 190, 190, 190,
	227, 227, 112, 112, 58, 58, 197, 197, 197, 197,
	195, 195, 195, 195, 195, 198, 196, 199, 199, 199,
	199, 199, 142, 142, 142, 24, 7, 7, 97, 97,
	62, 62, 146, 146, 146, 45, 45, 33, 33, 33,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 98,
	98, 99, 99, 16, 20, 23, 23, 23, 23, 23,
	229, 229, 42, 42, 42, 42, 43, 43, 111, 111,
	111, 111, 111, 38, 6, 6, 14, 48, 48, 104,
	104, 104, 106, 106, 106, 105, 105, 105, 84, 84,
	25, 75, 75, 76, 76, 152, 77, 77, 19, 19,
	28, 28, 26, 26, 26, 26, 26, 26, 27, 27,
	29, 29, 29, 29, 29, 29, 29, 205, 205, 205,
	207, 207, 204, 15, 15, 15, 15, 206, 206, 228,
	228, 85, 85, 85, 57, 56, 56, 60, 60, 59,
	61, 61, 145, 82, 82, 82, 82, 100, 101, 101,
	102, 102, 103, 103, 81, 81, 129, 129, 30, 30,
	66, 66, 67, 67, 120, 120, 121, 121, 119, 119,
	119, 147, 147, 147, 147, 148, 148, 148, 148, 148,
	148, 143, 143, 143, 143, 144, 144, 88, 88, 88,
	88, 86, 86, 87, 87, 149, 149, 149, 149, 83,
	83, 150, 150, 150, 115, 115, 155, 155, 155, 65,
	65, 65, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 157, 157, 157, 157, 159, 159, 159,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 160, 160, 167, 167, 168, 168, 169,
	170, 161, 161, 162, 162, 163, 164, 171, 171, 171,
	173, 173, 165, 165, 165, 166, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	95, 95, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 200, 200, 200, 200, 200, 200, 200,
	202, 202, 203, 203, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 208,
	208, 209, 209, 210, 210, 211, 211, 213, 214, 214,
	214, 215, 219, 219, 212, 212, 216, 216, 216, 217,
	217, 218, 218, 218, 218, 218, 133, 133, 133, 134,
	134, 135, 72, 72, 131, 131, 130, 130, 130, 132,
	132, 89, 172, 172, 172, 172, 172, 172, 172, 90,
	90, 96, 91, 91, 92, 92, 92, 92, 92, 92,
	126, 127, 93, 93, 93, 128, 128, 136, 140, 140,
	139, 138, 138, 137, 137, 118, 118, 118, 118, 117,
	116, 78, 78, 230, 230, 141, 141, 79, 79, 80,
	74, 74, 151, 151, 151, 151, 68, 68, 50, 50,
	69, 69, 46, 46, 49, 47, 47, 47, 47, 63,
	63, 64, 64, 44, 44, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 174, 174, 174, 40,
	40, 40, 41, 41, 180, 180, 180, 181, 181, 181,
	181, 179, 179, 179, 179, 179, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 2, 0, 2, 0, 2, 0,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 3,
	2, 0, 3, 1, 2, 2, 1, 1, 2, 4,
	2, 5, 6, 7, 3, 1, 4, 5, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 10, 13, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 3, 6, 7, 1, 3, 1,
	4, 2, 8, 5, 0, 4, 3, 0, 2, 0,
	8, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	2, 0, 1, 3, 3, 1, 1, 3, 2, 4,
	0, 3, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 4, 5, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 1, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 2, 2, 1, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 3, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -206, 83, 89, 102, 189,
	196, -26, -28, 203, 204, 29, 211, 52, 85, 191,
	186, 230, 58, -205, -29, -27, 274, 250, 256, 199,
	-30, 217, 243, 277, 217, 70, 113, 78, 117, 237,
	70, 113, 217, -12, 274, -19, -14, -25, -9, -224,
	18, -225, -226, 58, 83, 102, 199, 117, 78, 237,
	-224, -43, 196, -40, 4, -185, -187, 16, 17, 19,
	28, 29, 33, 37, 40, 51, 52, 53, 55, 57,
	60, 61, 68, 69, 70, 71, 73, 78, 82, 83,
	89, 93, 94, 96, 98, 103, 108, 109, 114, 117,
	125, 127, 128, 133, 136, 139, 141, 142, 143, 144,
	145, 147, 148, 150, 152, 149, 155, 157, 158, 164,
	167, 170, 171, 174, 177, 178, 179, 181, 182, 186,
	184, 185, 187, 189, 191, 192, 194, 197, 198, 200,
	201, 203, 204, 206, 208, 210, 211, 214, 212, 218,
	219, 226, 230, 231, 232, 233, 236, 237, 240, 241,
	242, 246, 251, 252, 253, 254, 30, 31, 32, 34,
	35, 38, 39, 43, 44, 45, 47, 72, 74, 75,
	88, 90, 95, 104, 106, 110, 111, 118, 119, 120,
	122, 131, 154, 156, 165, 169, 173, 175, 180, 193,
	207, 213, 215, 221, 222, 223, 227, 228, 243, 244,
	-108, 136, 201, 226, -109, -107, -178, 221, 145, -70,
	-40, 196, 4, 70, 51, 71, 103, 113, 114, 128,
	218, 221, 226, 18, -229, 226, 226, -229, -229, -42,
	226, 224, -43, -228, 217, 217, -97, 70, 235, -27,
	-29, -28, -59, -60, 234, 121, 87, 163, -26, -28,
	-205, -207, 181, -204, -40, -207, -56, -57, 18, 80,
	278, -149, -46, 161, -40, -80, 274, -3, -149, 110,
	-40, -49, 110, -46, 100, 123, -150, -149, -40, 110,
	-50, 110, -49, -71, 110, -70, -154, -153, -181, 4,
	-185, -187, -186, 243, 49, 59, 101, 116, 124, 126,
	132, 134, 146, 166, 168, 190, 205, 160, 278, 160,
	-40, -108, 45, -108, -110, -38, -39, 125, 177, 224,
	259, 100, 254, -53, 6, 76, -73, 276, 100, -221,
	160, 100, 100, 100, -177, 100, 254, 125, 177, -111,
	-38, -39, -111, 224, -43, -83, -149, -70, 110, 113,
	-40, 110, -59, -60, -82, -100, -101, 135, 159, -85,
	18, 80, -85, -85, 37, 275, 275, 278, -207, -64,
	274, -74, -151, -122, 267, -124, 265, 266, 271, 151,
	255, -133, -46, -125, 9, 274, -136, -202, -28, 88,
	24, -134, -135, 193, -40, 8, 5, 6, 7, -44,
	-157, -166, 229, 91, 153, 41, -200, -201, 4, -185,
	-180, -158, -168, -162, -165, 122, 49, 63, 66, 64,
	67, 202, 238, 42, 90, 169, 173, 215, 227, 228,
	110, 154, 111, 47, 104, 131, 82, 31, 32, 34,
	35, 43, 44, 72, 74, 75, 95, 118, 119, 120,
	156, 180, 207, 222, 223, 244, -186, -169, -170, -163,
	-164, -171, -74, -80, 267, -46, 274, -78, -118, -117,
	-116, 272, 276, -79, -141, -122, 76, -35, 184, -34,
	17, 19, 83, 241, 88, 184, 184, 88, 279, -150,
	-48, -46, 203, -40, 25, 88, -37, 278, 40, 187,
	88, 278, 88, 275, 278, -220, -69, 217, 70, -47,
	-40, 267, -226, -220, 25, 278, 278, 133, -52, 139,
	150, 108, -176, 76, -183, -175, -142, 9, 229, 91,
	160, -182, 5, 266, -174, -181, 6, 8, 265, -176,
	76, 61, -184, 6, 4, -166, -142, 76, 136, 122,
	276, -179, 4, -185, -187, -186, -188, 18, 20, 21,
	22, 23, 24, 25, 26, 27, 36, 41, 42, 46,
	48, 50, 56, 58, 62, 63, 64, 65, 66, 67,
	76, 77, 79, 80, 81, 84, 85, 87, 91, 92,
	97, 99, 100, 102, 105, 107, 112, 113, 115, 121,
	123, 129, 130, 135, 137, 138, 151, 153, 159, 160,
	161, 162, 163, 172, 176, 183, 188, 199, 202, 209,
	216, 217, 220, 224, 225, 229, 234, 235, 238, 239,
	245, 247, 248, 249, 250, -178, -223, 97, -220, -178,
	-178, -178, -178, 133, 278, 278, -43, -37, 278, 274,
	151, -41, 110, -40, 151, -82, -101, -100, -102, -122,
	18, -122, -124, -27, -27, -27, -61, -145, -122, -204,
	25, -63, -40, -66, 278, 100, 10, 48, 28, 265,
	266, 267, 268, 269, 262, 263, 264, 261, 257, 258,
	259, 54, 140, 195, 12, 13, 14, 22, 162, 134,
	255, 205, 124, 30, 112, 25, 4, -122, -122, -122,
	-122, -122, 168, -28, -122, -72, -78, -28, -130, 272,
	274, -78, 274, 6, 6, 274, -137, -122, -208, 251,
	97, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 175, -173, 246, -173,
	-173, -159, 274, -159, -160, 274, -159, 274, -66, -46,
	-118, -122, -179, 267, 278, 275, 278, 224, -98, 56,
	50, -113, 110, 50, -189, -40, 56, -190, 46, 235,
	176, 99, -98, 56, -98, 56, 56, -149, 224, 224,
	-49, -40, -115, 248, -104, -19, 274, 76, 25, -75,
	-76, -152, -77, -46, 274, -40, -40, -49, -50, -70,
	-71, -12, -153, 224, 278, -69, -63, -117, -116, 100,
	226, -39, -38, -51, 179, 208, 185, 200, 278, 5,
	8, 8, 6, -179, -222, -40, -39, -38, -149, -54,
	-55, -114, -113, -191, -189, 113, 235, 88, 160, 151,
	88, -103, 193, 194, 278, -33, 26, 79, 274, 278,
	275, -115, -151, -67, -147, -149, -28, -148, 274, -155,
	-156, -158, -167, -161, -165, -166, 33, 39, 38, 219,
	213, 118, 119, 120, 207, 31, 180, 95, 82, 75,
	74, 156, 35, 34, -169, -170, -163, -164, 72, 222,
	223, 32, 44, 43, 244, -70, 221, -122, -122, -122,
	-122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
	-122, -122, -122, -122, -122, -122, -122, -122, 134, 205,
	30, 112, 224, 153, 151, 229, 91, 236, 80, 157,
	-230, 216, 27, -128, -28, 274, -179, -133, 193, 274,
	275, 278, -72, -132, 273, -122, -130, -72, 275, 275,
	-72, 245, 18, 80, 267, -94, 253, 143, 73, 109,
	142, -95, 198, 8, -140, -139, 247, -209, 93, 105,
	274, 275, 275, -122, -89, -172, 4, 253, 143, 73,
	109, 142, 198, -90, -122, -91, -123, -124, 265, 266,
	271, 274, 193, -92, -122, -72, -122, 36, 130, 225,
	-93, -122, 100, -72, -122, -122, -122, -72, -72, -72,
	274, 8, 8, 8, -115, 275, 273, 282, -141, -34,
	-46, -40, -40, 151, -113, 110, -155, -40, 274, 274,
	127, 127, -40, -40, 110, -40, 110, -40, -40, -35,
	184, -40, -40, 184, -84, 188, -122, -106, 160, -68,
	-46, 243, -40, -66, 278, 259, -68, -37, -222, -47,
	-222, -38, 233, 53, 179, -183, -94, 278, 275, 278,
	-41, 113, -70, -46, 88, -40, -145, -15, -19, -14,
	-25, -9, -40, -81, 105, 278, 59, -88, 126, 146,
	101, 132, 190, 116, -119, 279, -144, -143, 25, -40,
	-28, -148, -147, -65, 24, -94, 274, 254, -122, 224,
	-230, 216, -128, -122, 153, 229, 91, 236, 80, 157,
	100, 274, -123, -123, -72, 274, -72, -122, 278, 273,
	273, 278, 275, -60, 278, -59, -122, -72, -72, 275,
	224, 224, 224, 224, 274, 275, -138, -139, 84, -122,
	-214, 167, 274, 274, -122, 25, 275, 100, 275, -96,
	172, 275, 10, 265, 266, 267, 268, 269, 262, 263,
	264, 261, 257, 258, 259, 54, 140, 195, 12, 13,
	14, 124, 112, -123, -123, -123, -72, 274, 275, -126,
	-127, 100, 97, 25, -93, -93, -93, 275, 100, -72,
	278, 278, 278, 275, 275, 275, 8, 275, 278, 275,
	275, -81, -122, 224, 224, 88, 151, -192, -190, -122,
	-63, 274, 274, -31, 83, 203, -99, 88, -37, 88,
	-37, 224, -98, 56, 224, -74, -84, 55, 275, 278,
	-115, -76, -141, 275, -40, -114, 274, -41, 274, 274,
	-40, 275, -129, 107, 37, -147, 126, 126, -147, -88,
	126, -86, 166, -86, -86, -144, -179, 280, -40, 274,
	275, 272, 272, 8, -122, -122, -123, -123, 100, 274,
	-122, -131, -155, 22, 22, 275, -72, 275, 278, 275,
	-122, -130, 275, 245, -60, -60, -60, 143, 109, 142,
	-95, 142, -95, -95, 8, 6, 85, -122, 220, -215,
	-40, 274, 248, -59, 275, -155, -122, -126, -122, -155,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, 80, 151,
	157, -123, 278, -72, 275, -127, -126, -122, -122, -155,
	275, 275, 275, -72, -122, -122, -122, 275, 8, -129,
	273, -40, -40, -113, 88, -193, 56, -194, 48, 151,
	153, 235, 176, 46, 76, 183, 275, 275, -63, -63,
	151, 76, 151, 76, 69, 231, -40, -40, -46, -40,
	-40, -40, -105, 274, 160, -19, -46, -84, 259, -62,
	-146, -40, -203, 274, -200, -201, -44, 274, -54, -62,
	160, -210, 249, -122, -72, -147, -147, -87, 239, 160,
	126, -147, -121, -120, 98, 149, 274, -63, -143, 273,
	8, 8, 275, 22, 22, -122, -131, 275, 278, -122,
	-122, 275, -122, 6, -122, 275, 275, 275, 275, -122,
	-219, -40, -122, 275, 275, -127, 100, 80, 157, 274,
	-122, 275, 275, 278, 275, 275, 275, -210, -113, -40,
	-70, 153, 127, 274, -123, -46, -112, -227, 57, 214,
	275, 275, 153, 153, -122, -155, -37, -37, 224, 224,
	81, -62, 56, -80, -28, 274, 275, 278, -45, -78,
	48, -45, -122, 274, -62, 275, 275, -46, -211, -213,
	-40, -87, 274, -122, -147, 278, 281, 259, -63, 275,
	273, 273, -122, -122, 275, -155, 275, -60, -212, 171,
	275, -123, 100, 274, -131, 275, -122, -194, -122, -58,
	274, 274, 183, -36, 48, -40, -40, 237, 152, 275,
	-40, -112, -146, -33, -70, -33, 275, -72, 275, -112,
	274, 278, 25, -63, -120, -179, 275, 275, -60, 37,
	-123, -131, 275, 275, 275, -197, 141, -63, -63, -46,
	-32, 239, -70, 203, -115, -45, -60, -112, -62, -213,
	-215, 275, -216, 178, 194, -72, 275, -195, -198, -196,
	160, 101, 170, 206, 275, 275, -58, -122, -75, -33,
	275, 275, 275, -217, -218, 30, 232, 61, -122, -217,
	-196, 160, -198, 160, 237, 78, -197, -115, -112, -218,
	174, 96, 193, 174, 96, -199, 148, 187, 40, 203,
	-199, -195, 22, 16, 153, 76, -218,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 318, 0, 0,
	0, 288, -2, 0, 0, 251, 0, 251, 251, 255,
	0, 320, 219, 317, -2, 328, 0, 0, 0, 326,
	302, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 68, 69, 70, 71, 0,
	80, 81, 82, 84, 85, 86, 87, 88, 89, 90,
	0, 244, 816, 257, 729, 730, 731, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	93, 783, 820, 831, 98, 108, 0, 883, -2, 112,
	62, 816, 141, 142, 0, 144, 157, 0, 0, 0,
	155, 0, 0, 153, 262, 250, 262, 247, 248, 249,
	252, 0, 243, 0, 319, 0, 0, 0, 218, -2,
	298, 299, -2, 0, 323, 323, 323, 0, 0, 299,
	0, 307, 806, 310, 712, 308, 0, 0, 325, 324,
	0, 303, 385, 0, 702, 348, 0, 2, 0, 865,
	0, 0, 865, 0, 0, 0, 0, 391, 54, 865,
	45, 865, 698, 58, 865, 60, 0, 72, 74, 737,
	738, 739, 740, 888, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 0, 0, 0,
	256, 94, 855, 96, 97, 99, 100, 0, 0, 0,
	0, 0, 0, 111, 136, 137, 63, 0, 0, 159,
	0, 0, 0, 0, 149, 0, 150, 0, 152, 245,
	258, 259, 246, 0, 254, 45, 389, 0, 865, 733,
	264, 865, -2, 0, 294, 335, 336, 0, 0, 0,
	321, 322, 0, 0, 0, 290, 291, 0, 309, 0,
	0, 351, 690, 694, 695, 472, 0, 0, 0, 0,
	0, 0, 551, 552, 553, 0, 555, 556, 557, 860,
	0, 561, 562, 879, 702, 715, 716, 717, 718, 0,
	0, 0, 723, 724, 725, 674, 600, 571, -2, -2,
	713, 413, 414, 415, 416, -2, 890, 575, 577, 579,
	580, 581, 582, 0, 861, 875, 876, 882, 886, 887,
	865, 872, 866, 856, 863, 871, 767, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 736, 437, 438, 443,
	444, 446, 351, 349, 386, 387, 0, 703, 681, 675,
	676, 0, 0, 0, 687, 685, 686, 22, 240, 24,
	0, 240, 240, 0, 0, 0, 0, 0, 0, 395,
	0, 267, 0, 392, 0, 0, 56, 0, 43, 44,
	0, 0, 0, 318, 0, 0, 77, 0, 763, 700,
	705, 708, 83, 0, 0, 0, 0, 0, 103, 123,
	124, 125, 104, 106, 113, 115, 116, 117, 126, 127,
	128, 129, 212, 0, 214, 139, 140, 726, 0, 105,
	107, 109, 110, 130, 131, 0, 133, 134, 135, 455,
	0, 64, 741, 742, 743, 744, 745, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 143, 145, 0, 156, 146,
	147, 148, 154, 151, 0, 0, 253, 215, 0, 163,
	0, 0, 865, 732, 0, 297, 333, 334, 337, 340,
	341, 338, 472, 304, 305, 306, 329, 330, 229, 311,
	0, 0, 709, 395, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 693, 476, 477, 478,
	499, 500, 0, -2, 632, 0, 558, 559, 560, 0,
	0, -2, 0, 720, 469, 0, 0, 673, 602, 0,
	0, 0, 0, 0, 0, 0, 653, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 427, 440, 450, 448,
	447, 429, 0, 428, 426, 0, 430, 0, 395, 0,
	682, 0, 679, 680, 0, 689, 0, 0, 0, 0,
	239, 26, 865, 0, 36, 0, 0, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 704, 279, 0, 274, 269, 0, 0, 0, 351,
	281, 283, 284, 0, 0, 393, 55, 699, 45, 61,
	59, 67, 73, 0, 0, 78, 79, 706, 707, 0,
	0, 101, 102, 263, 0, 120, 0, 122, 0, 213,
	728, 727, 469, 65, 158, 91, 260, 261, 390, 0,
	162, 164, 166, 167, 168, 733, 0, 0, 0, 0,
	0, 339, 342, 343, 0, 332, 227, 228, 318, 0,
	711, 345, 691, 350, 352, 360, 376, 363, 0, 473,
	401, 402, 403, 404, 405, 469, 408, 409, 410, 411,
	412, 420, 421, 422, 423, 424, 425, 434, 0, 419,
	419, 419, 431, 432, 435, 436, 441, 442, 452, 453,
	454, 451, 451, 451, 449, 474, 0, 479, 480, 481,
	482, 483, 484, 485, 486, 487, -2, -2, -2, 491,
	492, 493, -2, -2, -2, 497, 498, -2, 0, 0,
	684, 0, 0, 505, 0, 508, 510, 512, 0, 0,
	0, 0, 683, 522, 665, 0, 692, 507, 0, 0,
	554, 0, 0, 0, 638, 632, 639, 0, -2, 563,
	328, 0, 0, 0, 0, 721, 456, 457, 458, 459,
	460, 461, 470, 0, 672, 668, 0, 610, 0, 0,
	0, 576, 578, 0, 0, 0, 642, 643, 644, 645,
	646, 647, 648, 0, 0, 0, 0, 524, 0, 0,
	0, 0, 879, 0, 632, 658, 0, 0, 0, 0,
	0, 632, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 388, 677, 0, 688, 25,
	231, 0, 0, 0, 28, 865, 171, 0, 0, 0,
	0, 0, 242, 37, 865, 45, 865, 45, 38, 23,
	240, 230, 233, 0, 53, 0, 394, 279, 0, 0,
	696, 271, 268, 395, 0, 0, 0, 57, 75, 701,
	76, 95, 118, 119, 121, 114, 132, 0, 160, 0,
	0, 733, 0, 0, 0, 265, 331, 0, 313, 314,
	315, 316, 710, 347, 0, 0, 0, 0, 0, 0,
	382, 382, 382, 380, 376, 0, 362, 375, 0, 374,
	-2, 363, 0, 396, 398, 406, 0, 0, -2, 0,
	0, 0, 523, -2, 506, 509, 511, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 636,
	637, 0, -2, 0, 0, 327, 328, 328, 328, 569,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	570, 0, 0, 0, 0, 0, 584, 0, 585, 0,
	0, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 528, 0, 0, 587, 656,
	657, 0, 0, 0, 0, 0, 0, 592, 0, 663,
	0, 0, 0, 596, 597, 598, 0, 417, 0, 433,
	445, 347, 0, 0, 0, 0, 0, 169, 184, 0,
	0, 0, 0, 30, 0, 0, 0, 0, 34, 0,
	40, 0, 0, 0, 0, 278, 266, 277, 0, 0,
	279, 282, 285, 0, 92, 165, 0, 0, 163, 0,
	0, 312, 604, 0, 0, 353, 0, 0, 0, 0,
	0, 377, 381, 378, 379, 361, 358, 0, 372, 0,
	365, 0, 0, 0, 475, -2, 0, 0, 0, 0,
	-2, 0, 634, 0, 0, 666, 0, 627, 0, -2,
	633, 640, 564, 0, 0, 0, 0, 462, 463, 464,
	465, 466, 467, 468, 0, 722, 667, 671, 0, 608,
	609, 613, 0, 0, 574, 0, 641, 650, 651, 525,
	529, 530, 531, 532, 533, 534, 535, 536, 537, -2,
	-2, -2, 541, 542, 543, -2, -2, -2, 0, 0,
	0, 652, 0, 0, 630, 654, 655, 660, 661, 0,
	589, 590, 591, 662, 0, 0, 0, 439, 0, 604,
	678, 235, 237, 27, 0, 170, 0, 173, 0, 0,
	176, 177, 0, 0, 0, 0, 186, 193, 0, 0,
	0, 42, 0, 0, 241, 0, 45, 45, 232, 0,
	0, 234, 0, 0, 0, 270, 697, 280, 0, 0,
	220, 226, 226, 0, 572, 573, 0, 0, 0, 0,
	0, 300, 0, 346, 344, 366, 0, 368, 0, 0,
	0, 370, 0, 356, 0, 355, 0, 0, 364, 399,
	0, 0, 407, 0, 0, -2, 0, 516, 0, -2,
	-2, 626, 633, 719, 328, 565, 567, 568, 471, 670,
	615, 612, 0, 599, 583, 649, 0, 0, 0, 0,
	633, 629, 588, 0, 594, 595, 418, 301, 29, 0,
	174, 175, 178, 0, 180, 195, 187, 0, 190, 191,
	188, 0, 31, 32, 41, 47, 33, 39, 0, 0,
	0, 0, 0, 286, 287, 0, 193, 0, 229, 714,
	0, 229, 0, 0, 0, 161, 193, 0, 603, 605,
	0, 367, 0, 384, 369, 0, 359, 0, 0, 373,
	400, 397, -2, -2, 517, 635, 628, 0, 328, 0,
	601, -2, 0, 0, 0, 631, 0, 172, 0, 199,
	0, 0, 0, 49, 0, 236, 238, 0, 273, 395,
	276, 182, 221, 222, 225, 223, 226, 328, 193, 216,
	0, 0, 0, 0, 357, 354, 371, 566, 618, 0,
	-2, 0, 549, 593, 179, 204, 0, 0, 0, 195,
	35, 0, 46, 0, 275, 229, 0, 183, 0, 606,
	607, 383, 0, 0, 0, 614, 550, 181, 200, 201,
	0, 196, 197, 198, 194, 192, 199, 48, 395, 224,
	564, 193, 611, 616, 619, -2, 834, 760, 0, 617,
	202, 0, 203, 0, 0, 0, 204, 272, 217, 0,
	621, 622, 623, 624, 625, 205, 0, 208, 209, 0,
	206, 189, 0, 207, 210, 211, 620,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 263, 3, 269, 264, 3,
	274, 275, 267, 265, 278, 266, 276, 268, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 282, 277,
	257, 259, 258, 3, 279, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 272, 3, 273, 262, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 280, 261, 281, 271,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 260,
}
var sqlTok3 = [...]int{
	57600, 270, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:647
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:653
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:659
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:679
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:689
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:695
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:699
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:716
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:721
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:726
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:731
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:735
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:737
		{
			unimplemented()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:739
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:752
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:761
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:774
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:775
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:780
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:783
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:784
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:787
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:788
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &DropIndex{IndexList: sqlDollar[3].union.tableWithIdxList(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &DropIndex{IndexList: sqlDollar[5].union.tableWithIdxList(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = DBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = DBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1180
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = []string(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1369
		{
			unimplemented()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1371
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1382
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1439
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = []string(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = []string(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1478
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1489
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = true
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = false
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = Ascending
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = Descending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = true
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = false
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1692
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.str = ""
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.str = ""
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1799
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1801
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			unimplemented()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			unimplemented()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2045
		{
			unimplemented()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2052
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2065
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = true
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = false
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = true
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2093
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2243
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2334
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.str = astFullJoin
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.str = astLeftJoin
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.str = astRightJoin
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.str = astInnerJoin
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2512
		{
			unimplemented()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			unimplemented()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			unimplemented()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2517
		{
			unimplemented()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2526
		{
			unimplemented()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = IntVal{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2708
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &DateType{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
			unimplemented()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			unimplemented()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2744
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2748
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2775
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3151
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3152
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3193
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3211
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3278
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3279
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3282
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3283
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3288
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3291
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3298
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3300
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3304
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3320
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3330
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3334
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3671
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3827
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3863
		{
			unimplemented()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = DBool(true)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = DBool(false)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = DNull
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
