// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:315
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VIEW = 57612
const VARYING = 57613
const WHEN = 57614
const WHERE = 57615
const WINDOW = 57616
const WITH = 57617
const WITHIN = 57618
const WITHOUT = 57619
const YEAR = 57620
const ZONE = 57621
const NOT_LA = 57622
const WITH_LA = 57623
const AS_LA = 57624
const POSTFIXOP = 57625
const UMINUS = 57626

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4813

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	303, 26,
	-2, 370,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	1, 345,
	176, 345,
	206, 345,
	301, 345,
	303, 345,
	-2, 355,
	-1, 56,
	1, 348,
	176, 348,
	206, 348,
	301, 348,
	303, 348,
	-2, 354,
	-1, 65,
	1, 26,
	303, 26,
	-2, 370,
	-1, 283,
	1, 170,
	303, 170,
	-2, 868,
	-1, 317,
	151, 380,
	175, 380,
	-2, 351,
	-1, 320,
	151, 379,
	175, 379,
	-2, 349,
	-1, 453,
	151, 379,
	175, 379,
	-2, 352,
	-1, 509,
	300, 807,
	-2, 800,
	-1, 510,
	300, 808,
	-2, 801,
	-1, 516,
	5, 515,
	300, 515,
	-2, 958,
	-1, 539,
	5, 481,
	-2, 933,
	-1, 540,
	5, 509,
	300, 509,
	-2, 935,
	-1, 541,
	5, 489,
	-2, 936,
	-1, 542,
	5, 488,
	-2, 937,
	-1, 543,
	5, 509,
	300, 509,
	-2, 940,
	-1, 544,
	5, 509,
	300, 509,
	-2, 941,
	-1, 545,
	5, 510,
	-2, 944,
	-1, 546,
	5, 475,
	-2, 945,
	-1, 547,
	5, 475,
	-2, 946,
	-1, 548,
	5, 491,
	-2, 949,
	-1, 549,
	5, 476,
	-2, 954,
	-1, 550,
	5, 477,
	-2, 955,
	-1, 551,
	5, 478,
	-2, 956,
	-1, 552,
	5, 479,
	-2, 957,
	-1, 553,
	5, 475,
	-2, 961,
	-1, 554,
	5, 482,
	-2, 966,
	-1, 555,
	5, 480,
	-2, 969,
	-1, 556,
	5, 507,
	300, 507,
	-2, 971,
	-1, 557,
	5, 511,
	-2, 974,
	-1, 558,
	5, 513,
	-2, 975,
	-1, 559,
	5, 506,
	300, 506,
	-2, 979,
	-1, 889,
	97, 355,
	137, 355,
	151, 355,
	175, 355,
	179, 355,
	257, 355,
	-2, 627,
	-1, 897,
	300, 785,
	-2, 774,
	-1, 1095,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 550,
	-1, 1096,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 551,
	-1, 1097,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 552,
	-1, 1101,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 556,
	-1, 1102,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 557,
	-1, 1103,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 558,
	-1, 1106,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 563,
	-1, 1112,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 565,
	-1, 1115,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 570,
	-1, 1116,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 571,
	-1, 1117,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 572,
	-1, 1142,
	184, 698,
	-2, 701,
	-1, 1311,
	97, 355,
	137, 355,
	151, 355,
	175, 355,
	179, 355,
	257, 355,
	-2, 428,
	-1, 1315,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 564,
	-1, 1316,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 566,
	-1, 1321,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 567,
	-1, 1339,
	184, 697,
	-2, 700,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 568,
	-1, 1506,
	140, 0,
	-2, 582,
	-1, 1514,
	184, 699,
	-2, 702,
	-1, 1548,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 608,
	-1, 1549,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 609,
	-1, 1550,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 610,
	-1, 1554,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 614,
	-1, 1555,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 615,
	-1, 1556,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 616,
	-1, 1660,
	140, 0,
	-2, 583,
	-1, 1663,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 586,
	-1, 1664,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 588,
	-1, 1750,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 587,
	-1, 1751,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 589,
	-1, 1758,
	140, 0,
	-2, 617,
	-1, 1803,
	140, 0,
	-2, 618,
	-1, 1855,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 932,
}

const sqlNprod = 1074
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24435

var sqlAct = [...]int{

	510, 1854, 1835, 974, 1877, 1836, 1703, 1837, 1853, 1809,
	1468, 1067, 982, 816, 1525, 1726, 595, 1652, 1625, 840,
	508, 1738, 1646, 355, 507, 321, 284, 1626, 72, 73,
	1076, 500, 1585, 818, 342, 892, 1639, 72, 72, 72,
	1395, 1308, 72, 42, 705, 72, 1342, 1480, 1048, 1045,
	894, 1238, 1490, 72, 1394, 1307, 1298, 1014, 1047, 572,
	72, 72, 821, 1152, 72, 472, 1075, 72, 72, 72,
	1292, 575, 943, 18, 983, 952, 1128, 1079, 1188, 1125,
	25, 560, 1007, 328, 55, 14, 7, 769, 998, 440,
	577, 482, 591, 1040, 753, 836, 473, 441, 356, 357,
	750, 780, 326, 690, 320, 1077, 354, 376, 370, 245,
	367, 924, 369, 842, 9, 8, 250, 928, 6, 55,
	4, 249, 251, 331, 243, 1051, 976, 456, 271, 56,
	771, 455, 457, 749, 57, 767, 262, 363, 1745, 683,
	329, 1746, 975, 281, 692, 692, 692, 325, 1011, 55,
	252, 247, 1306, 325, 246, 1191, 248, 1869, 1851, 1843,
	1071, 1725, 1071, 1833, 1828, 1805, 1004, 1071, 1004, 339,
	587, 1799, 345, 1249, 1071, 1789, 1779, 1337, 1725, 1071,
	348, 309, 1338, 1752, 460, 318, 1004, 1017, 1749, 1012,
	317, 1071, 1735, 1733, 1724, 1725, 1071, 1725, 706, 1708,
	1707, 333, 1071, 1071, 1685, 1665, 61, 1017, 1017, 845,
	846, 1793, 865, 866, 867, 875, 876, 877, 1662, 1612,
	1611, 1004, 1017, 1017, 1597, 1013, 1010, 1071, 1510, 63,
	1454, 1017, 848, 971, 879, 843, 1295, 845, 846, 72,
	72, 72, 72, 72, 1448, 379, 1412, 971, 1410, 1413,
	1561, 1017, 1336, 847, 1365, 1366, 64, 1017, 72, 862,
	848, 1250, 1409, 502, 59, 1017, 1513, 1276, 372, 372,
	60, 844, 1341, 72, 380, 1296, 72, 72, 1017, 1408,
	941, 847, 1017, 1015, 1278, 1071, 1019, 862, 326, 58,
	1136, 1339, 1284, 1072, 1017, 1071, 1071, 1295, 1026, 1016,
	1066, 1017, 1017, 693, 693, 693, 1034, 853, 1728, 72,
	468, 72, 1003, 72, 72, 1004, 72, 809, 970, 940,
	483, 971, 939, 808, 872, 880, 381, 845, 846, 700,
	358, 72, 701, 467, 359, 853, 439, 761, 760, 447,
	449, 405, 72, 454, 364, 1009, 377, 338, 69, 870,
	848, 373, 1371, 358, 72, 863, 65, 359, 359, 794,
	598, 72, 72, 72, 453, 72, 425, 1008, 413, 1852,
	61, 847, 1849, 567, 1842, 1800, 414, 1734, 593, 1690,
	1686, 1678, 1677, 863, 340, 1676, 1671, 347, 350, 599,
	1670, 1669, 1623, 63, 1576, 1571, 1570, 1569, 72, 1617,
	1381, 566, 696, 691, 812, 72, 1516, 72, 1499, 1479,
	1458, 1417, 864, 1414, 1402, 1475, 446, 1393, 379, 379,
	64, 1364, 979, 873, 1361, 853, 598, 72, 1359, 72,
	72, 72, 72, 72, 72, 72, 1347, 444, 1346, 72,
	864, 600, 795, 1280, 72, 1277, 1205, 380, 380, 900,
	1159, 72, 1249, 58, 1133, 599, 1158, 1382, 318, 814,
	467, 466, 843, 317, 352, 817, 364, 1527, 1819, 72,
	1792, 469, 72, 1771, 695, 1769, 1760, 698, 1742, 871,
	1731, 1722, 859, 860, 861, 1700, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 1683, 874, 1655, 682, 381,
	381, 562, 685, 702, 1633, 1505, 1498, 600, 463, 464,
	1476, 1473, 1471, 1428, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 1616, 874, 1427, 1392, 1622, 1456, 1355,
	326, 897, 1373, 1374, 1375, 1367, 1368, 1369, 1370, 1372,
	757, 1354, 756, 1134, 568, 1333, 1329, 1365, 1366, 811,
	1130, 791, 358, 1265, 784, 61, 359, 747, 1230, 340,
	1229, 350, 799, 1217, 1216, 1198, 1157, 759, 1070, 929,
	796, 72, 810, 800, 801, 802, 803, 804, 63, 72,
	845, 846, 807, 72, 932, 826, 824, 72, 72, 825,
	318, 936, 838, 318, 318, 832, 1365, 1366, 833, 834,
	845, 846, 922, 848, 921, 64, 920, 476, 849, 850,
	851, 852, 854, 59, 874, 1217, 919, 895, 918, 60,
	917, 916, 915, 914, 847, 913, 912, 946, 911, 1365,
	1366, 340, 910, 909, 908, 907, 898, 896, 978, 58,
	442, 343, 891, 471, 847, 1371, 411, 845, 846, 401,
	399, 353, 957, 959, 1621, 926, 927, 1259, 1258, 1747,
	845, 846, 569, 712, 419, 930, 1620, 583, 561, 1251,
	848, 933, 1061, 934, 592, 1640, 1416, 935, 1415, 1314,
	937, 340, 684, 684, 790, 1474, 435, 72, 962, 72,
	72, 847, 72, 1381, 1371, 72, 420, 72, 72, 966,
	72, 905, 379, 975, 949, 1528, 1350, 1153, 274, 925,
	1245, 578, 1815, 579, 1865, 1778, 1866, 1605, 340, 845,
	846, 1025, 302, 992, 372, 303, 372, 1371, 1716, 813,
	568, 380, 308, 1715, 307, 1442, 1420, 1419, 1317, 1264,
	324, 1263, 848, 315, 901, 853, 1262, 1261, 1113, 1018,
	1382, 968, 72, 72, 1272, 515, 965, 977, 443, 977,
	1740, 789, 788, 847, 782, 777, 1202, 1201, 1084, 578,
	438, 579, 1021, 397, 245, 311, 1443, 1643, 999, 1234,
	323, 250, 580, 381, 55, 1001, 249, 251, 55, 589,
	1000, 1002, 1015, 863, 239, 598, 945, 1839, 417, 72,
	1705, 1817, 1439, 377, 990, 991, 993, 1777, 994, 996,
	1127, 1039, 981, 72, 72, 252, 247, 853, 72, 246,
	1455, 248, 325, 953, 599, 995, 686, 1375, 1367, 1368,
	1369, 1370, 1372, 945, 1127, 585, 418, 1058, 1463, 944,
	580, 792, 1174, 1430, 240, 72, 1073, 930, 72, 933,
	864, 1028, 1020, 1022, 1023, 927, 926, 1874, 1027, 1830,
	1243, 1011, 578, 584, 579, 863, 1239, 874, 1064, 1065,
	1840, 1232, 1885, 1297, 1083, 1831, 600, 1367, 1368, 1369,
	1370, 1372, 598, 956, 1446, 1153, 1772, 874, 1055, 1865,
	1239, 938, 845, 846, 1247, 741, 1015, 1273, 1131, 1043,
	322, 735, 1012, 340, 588, 312, 1042, 350, 1841, 793,
	416, 599, 1369, 1370, 1372, 848, 593, 1460, 1044, 235,
	1301, 593, 864, 316, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 580, 874, 313, 847, 1304, 1013, 1010,
	1074, 1204, 692, 72, 72, 72, 1140, 874, 1299, 72,
	1228, 1271, 72, 1461, 1302, 581, 241, 1326, 72, 72,
	72, 72, 72, 600, 236, 955, 72, 68, 1300, 72,
	1324, 1706, 72, 1431, 923, 1756, 1880, 1365, 1366, 72,
	1132, 72, 1648, 1149, 408, 410, 242, 1437, 72, 1723,
	853, 888, 415, 436, 1353, 1491, 1015, 1212, 72, 1206,
	849, 850, 851, 852, 854, 1838, 874, 986, 1873, 325,
	1864, 1015, 350, 581, 1303, 350, 1319, 67, 1862, 72,
	72, 1638, 326, 1059, 942, 72, 458, 1380, 1241, 954,
	1164, 1886, 1207, 428, 1227, 379, 406, 1322, 404, 459,
	1126, 1327, 1484, 576, 1081, 1082, 416, 437, 783, 778,
	459, 1137, 1141, 72, 1144, 72, 1110, 72, 1009, 1710,
	72, 1709, 1698, 72, 380, 1766, 1810, 831, 734, 1647,
	1183, 1244, 72, 1422, 1211, 1371, 1195, 1196, 1197, 72,
	1252, 72, 1681, 1282, 1060, 564, 1279, 1891, 1281, 458,
	1872, 563, 238, 237, 1878, 1253, 823, 1254, 1255, 1601,
	495, 693, 815, 1256, 512, 1557, 581, 1167, 1459, 712,
	712, 1313, 1267, 1123, 1268, 1270, 381, 806, 1269, 1030,
	1323, 1275, 1274, 1381, 326, 1032, 1121, 1325, 70, 66,
	762, 1283, 1699, 340, 1219, 1879, 1649, 254, 255, 256,
	1653, 1033, 273, 260, 999, 285, 1108, 1111, 1168, 1214,
	1031, 1001, 1881, 273, 55, 711, 1000, 1002, 1312, 1290,
	332, 332, 1289, 1218, 70, 340, 1682, 70, 70, 351,
	1340, 1107, 1890, 1486, 326, 851, 852, 854, 1301, 874,
	1382, 263, 1600, 1558, 1169, 1166, 766, 263, 1320, 1559,
	1318, 1119, 1485, 1118, 1654, 1304, 415, 1124, 362, 361,
	323, 253, 268, 1257, 1604, 450, 1489, 264, 268, 1469,
	1624, 1603, 1302, 264, 712, 1349, 1481, 1293, 72, 1696,
	764, 1156, 1759, 326, 1680, 1396, 1504, 1360, 1397, 1834,
	265, 765, 1328, 1235, 906, 1024, 265, 1426, 969, 1697,
	1807, 434, 1170, 433, 54, 1109, 432, 267, 431, 430,
	72, 72, 1450, 267, 1376, 1373, 1374, 1375, 1367, 1368,
	1369, 1370, 1372, 1208, 1399, 1400, 1401, 429, 712, 1297,
	34, 426, 1303, 360, 798, 1418, 1120, 72, 35, 72,
	1155, 72, 1582, 1122, 1435, 1433, 1332, 72, 1421, 1286,
	1334, 1424, 1236, 1062, 1602, 1056, 72, 997, 699, 592,
	72, 1438, 1344, 1345, 1165, 1445, 72, 598, 592, 697,
	72, 1453, 72, 1449, 1472, 694, 1301, 1452, 340, 689,
	1462, 1464, 1465, 1495, 1451, 586, 1483, 1434, 1227, 1436,
	1487, 582, 266, 1304, 1593, 1391, 599, 1470, 266, 70,
	365, 70, 285, 285, 1299, 1522, 1404, 735, 735, 822,
	1302, 1478, 1717, 1866, 72, 1492, 1493, 1488, 402, 461,
	336, 1494, 1068, 786, 1300, 422, 1594, 3, 1719, 1518,
	1519, 1520, 945, 407, 1507, 269, 285, 285, 960, 961,
	1285, 269, 1447, 1728, 945, 1440, 1441, 1774, 600, 1515,
	958, 1802, 1482, 465, 964, 61, 259, 963, 1794, 1057,
	980, 340, 1529, 839, 758, 301, 704, 1006, 1888, 273,
	1303, 70, 1889, 285, 285, 1577, 451, 1534, 63, 1069,
	72, 72, 72, 1365, 1366, 1466, 462, 337, 72, 72,
	1457, 332, 1411, 344, 72, 1564, 72, 270, 72, 72,
	72, 1260, 70, 72, 423, 64, 1203, 1598, 1599, 1589,
	1565, 1590, 735, 59, 70, 304, 305, 845, 846, 60,
	1200, 70, 70, 70, 1199, 687, 1578, 1036, 1035, 1150,
	1581, 1037, 1795, 1667, 72, 72, 1592, 1521, 58, 1287,
	1038, 899, 310, 1595, 1704, 737, 72, 72, 261, 1511,
	72, 736, 1631, 1634, 797, 1637, 1630, 1631, 70, 72,
	72, 1630, 1619, 1632, 708, 754, 735, 754, 1632, 427,
	1829, 1673, 1614, 1352, 734, 734, 1644, 1645, 1656, 1737,
	1650, 1175, 1618, 1755, 1635, 1154, 904, 285, 72, 754,
	285, 285, 285, 285, 285, 805, 33, 1628, 488, 285,
	1591, 1657, 1583, 1423, 273, 1050, 1049, 601, 1562, 1636,
	1661, 820, 787, 776, 511, 770, 1531, 1532, 779, 1572,
	1163, 565, 513, 709, 1536, 1537, 514, 710, 931, 332,
	986, 340, 841, 501, 707, 1679, 375, 1294, 984, 1151,
	1348, 902, 487, 72, 493, 72, 492, 72, 72, 1138,
	398, 484, 1651, 712, 1305, 45, 72, 1568, 412, 279,
	280, 711, 711, 1242, 1615, 1063, 827, 1432, 314, 1362,
	400, 1181, 1173, 1694, 1171, 1691, 340, 72, 1162, 734,
	340, 712, 712, 445, 571, 845, 846, 985, 424, 712,
	712, 1692, 1248, 1005, 470, 835, 1718, 335, 1642, 72,
	334, 72, 1046, 421, 1729, 763, 1029, 306, 848, 1768,
	72, 1884, 1732, 1773, 1631, 1720, 72, 1429, 1630, 1814,
	62, 24, 712, 1727, 22, 1632, 21, 20, 1741, 847,
	19, 70, 17, 734, 16, 1748, 15, 23, 13, 950,
	1744, 12, 11, 70, 10, 32, 31, 70, 967, 30,
	29, 28, 5, 2, 1754, 1, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	1713, 1714, 0, 0, 1770, 0, 72, 72, 1365, 1366,
	72, 0, 0, 853, 72, 0, 1764, 0, 1761, 72,
	1765, 1782, 0, 1175, 1175, 0, 0, 0, 1784, 0,
	0, 1786, 1791, 72, 0, 1790, 1631, 0, 598, 0,
	1630, 593, 0, 1783, 0, 1785, 0, 1632, 1608, 0,
	711, 0, 1796, 1797, 1798, 0, 326, 0, 0, 712,
	72, 863, 72, 72, 0, 72, 0, 599, 0, 0,
	0, 1801, 0, 1818, 1175, 1175, 1175, 70, 748, 988,
	989, 1812, 70, 1820, 72, 70, 1823, 285, 285, 0,
	285, 1816, 1824, 1821, 1712, 1804, 340, 340, 0, 1827,
	340, 1825, 0, 1631, 1822, 1826, 1371, 1630, 72, 0,
	72, 0, 0, 0, 1632, 0, 0, 1844, 864, 600,
	1846, 735, 0, 1848, 1850, 72, 0, 0, 0, 1847,
	1859, 0, 0, 1863, 1861, 0, 0, 0, 0, 0,
	1868, 0, 754, 841, 1867, 0, 0, 1871, 1870, 735,
	735, 0, 0, 0, 1381, 0, 0, 735, 735, 712,
	1883, 1882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1887, 0, 0, 0, 0, 0, 1788, 0, 0,
	1892, 0, 0, 0, 0, 0, 0, 0, 0, 1041,
	735, 0, 0, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 70, 950, 0, 1702, 0, 841, 0,
	0, 1382, 0, 0, 0, 0, 1175, 1175, 0, 0,
	0, 737, 737, 0, 0, 0, 0, 736, 736, 0,
	0, 0, 0, 0, 0, 70, 0, 712, 285, 0,
	708, 708, 0, 0, 0, 0, 0, 0, 1832, 1736,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 1331,
	340, 0, 0, 0, 0, 1175, 1175, 1175, 1175, 1175,
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
	1175, 1175, 1175, 1175, 0, 1175, 0, 0, 734, 1367,
	1368, 1369, 1370, 1372, 0, 0, 0, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1388,
	1389, 1390, 0, 0, 712, 0, 734, 734, 0, 0,
	845, 846, 0, 0, 734, 734, 737, 0, 0, 0,
	0, 0, 736, 70, 1209, 1210, 0, 0, 0, 950,
	0, 0, 1215, 848, 1593, 708, 1586, 0, 1220, 1221,
	1223, 1225, 1226, 0, 1584, 0, 1231, 734, 1588, 1233,
	0, 0, 70, 0, 847, 0, 0, 0, 0, 70,
	0, 1246, 0, 0, 0, 711, 1594, 0, 70, 0,
	737, 1365, 1366, 1813, 0, 0, 736, 0, 70, 0,
	0, 0, 0, 0, 0, 1587, 0, 735, 0, 708,
	0, 0, 0, 711, 711, 0, 0, 0, 0, 1041,
	754, 711, 711, 474, 474, 1041, 0, 0, 853, 0,
	0, 0, 573, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 0,
	0, 0, 0, 820, 711, 820, 0, 285, 0, 0,
	70, 1502, 1503, 1288, 0, 0, 0, 0, 0, 1589,
	0, 1590, 1291, 0, 734, 0, 863, 0, 0, 1310,
	0, 70, 0, 0, 0, 735, 0, 0, 0, 1371,
	0, 0, 0, 0, 0, 0, 1592, 0, 0, 0,
	0, 0, 1175, 1595, 0, 0, 0, 0, 0, 0,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 0,
	1560, 0, 0, 864, 0, 0, 0, 1381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 830, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	1591, 711, 735, 0, 0, 0, 883, 884, 885, 886,
	887, 0, 0, 0, 734, 890, 0, 0, 0, 0,
	1365, 1366, 0, 1383, 1384, 1385, 0, 0, 1175, 0,
	0, 0, 0, 0, 1382, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	857, 849, 850, 851, 852, 854, 0, 874, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1365, 1366, 0, 1383, 1384, 1385, 0, 0,
	70, 70, 734, 0, 0, 0, 0, 0, 1659, 0,
	0, 711, 0, 0, 0, 0, 0, 1175, 1376, 1373,
	1374, 1375, 1367, 1368, 1369, 1370, 1372, 1467, 1371, 950,
	0, 820, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 1380, 0, 0, 0, 70, 0, 0, 0,
	70, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	1497, 0, 1310, 0, 0, 737, 0, 0, 253, 0,
	0, 736, 0, 489, 43, 0, 1381, 0, 0, 734,
	0, 0, 0, 0, 708, 0, 0, 1701, 0, 711,
	1371, 0, 0, 737, 737, 0, 0, 0, 0, 736,
	736, 737, 737, 0, 1526, 0, 0, 736, 736, 43,
	0, 54, 708, 708, 0, 0, 0, 0, 0, 0,
	708, 708, 1386, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 327, 1382, 737, 0, 0, 34, 1381, 43,
	736, 0, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	1579, 1580, 950, 1758, 0, 0, 0, 0, 841, 841,
	0, 0, 0, 0, 1606, 0, 1607, 0, 70, 1609,
	1610, 0, 0, 1613, 0, 1382, 0, 0, 0, 0,
	0, 0, 0, 1377, 1378, 1379, 0, 1376, 1373, 1374,
	1375, 1367, 1368, 1369, 1370, 1372, 0, 0, 0, 0,
	0, 0, 1627, 0, 841, 950, 0, 1627, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 70, 0, 0,
	70, 737, 0, 0, 0, 0, 0, 736, 0, 841,
	1310, 0, 1803, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 61, 0, 0, 1377, 1378, 1379, 0, 1376,
	1373, 1374, 1375, 1367, 1368, 1369, 1370, 1372, 1674, 0,
	0, 0, 474, 0, 0, 63, 0, 0, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	0, 1112, 64, 1114, 1115, 1116, 1117, 0, 327, 0,
	59, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 950, 0, 1693, 0, 285, 1695, 0,
	0, 737, 0, 0, 0, 244, 70, 736, 1160, 1161,
	0, 1172, 0, 1182, 1184, 1189, 1192, 1193, 1194, 0,
	708, 0, 0, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 0,
	0, 0, 0, 0, 1627, 0, 0, 0, 0, 70,
	0, 1739, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 319, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 1237, 0, 1240, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 708, 0,
	0, 0, 0, 0, 0, 0, 0, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 1266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1775, 1776, 0, 0,
	1780, 0, 0, 0, 1781, 0, 1627, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	0, 0, 0, 841, 0, 0, 737, 0, 0, 0,
	47, 0, 736, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 0,
	1811, 0, 841, 70, 49, 285, 0, 0, 0, 0,
	27, 0, 54, 0, 319, 0, 0, 319, 319, 0,
	0, 0, 0, 1627, 1739, 0, 1315, 1316, 0, 0,
	0, 38, 1321, 0, 0, 0, 0, 0, 34, 0,
	889, 50, 0, 0, 893, 37, 35, 0, 70, 0,
	841, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 39, 0, 0, 1343, 1860, 0, 0, 0, 0,
	0, 0, 1351, 0, 845, 846, 1356, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 848, 890, 879,
	0, 0, 0, 0, 1189, 1189, 1189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 40, 0, 51, 0, 0, 474, 0,
	41, 0, 0, 61, 0, 0, 474, 0, 44, 46,
	573, 0, 853, 0, 0, 0, 1365, 1366, 48, 1383,
	1384, 1385, 0, 0, 0, 0, 63, 0, 0, 872,
	880, 0, 1658, 0, 845, 846, 0, 0, 0, 53,
	875, 876, 877, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 870, 0, 0, 848, 0, 879,
	863, 59, 0, 0, 0, 0, 1380, 60, 0, 0,
	0, 0, 0, 1500, 0, 0, 1501, 43, 847, 43,
	0, 0, 869, 0, 862, 0, 58, 1506, 0, 0,
	0, 0, 0, 0, 43, 0, 0, 0, 43, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 1523,
	0, 0, 0, 0, 1371, 0, 0, 864, 0, 1533,
	0, 0, 1535, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1386, 0, 0, 872,
	880, 0, 0, 0, 0, 1566, 1567, 0, 0, 0,
	0, 0, 1381, 0, 1573, 1574, 1575, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 972, 0, 474, 0, 0, 43, 0,
	845, 846, 973, 865, 866, 867, 875, 876, 877, 1382,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 848, 0, 879, 0, 864, 1078, 0,
	1641, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	862, 0, 0, 1660, 0, 0, 0, 1663, 1664, 0,
	0, 0, 1666, 0, 1129, 0, 1668, 0, 0, 0,
	0, 0, 0, 1672, 0, 0, 0, 1675, 0, 1377,
	1378, 1379, 0, 1376, 1373, 1374, 1375, 1367, 1368, 1369,
	1370, 1372, 0, 0, 871, 0, 0, 0, 853, 0,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	1684, 874, 0, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 1711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 869, 1365,
	1366, 0, 1383, 1384, 1385, 0, 0, 0, 1730, 0,
	0, 286, 0, 0, 0, 1509, 0, 0, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 1743, 0, 299,
	0, 0, 0, 864, 868, 0, 0, 1750, 1751, 0,
	0, 848, 0, 879, 873, 0, 0, 0, 0, 1380,
	0, 0, 845, 846, 0, 865, 866, 867, 875, 876,
	877, 0, 847, 0, 288, 0, 1763, 0, 862, 293,
	294, 43, 0, 300, 0, 848, 0, 879, 0, 1767,
	0, 0, 0, 0, 43, 287, 289, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 847, 1371, 0, 0,
	871, 573, 862, 859, 860, 861, 0, 858, 855, 856,
	857, 849, 850, 851, 852, 854, 853, 874, 0, 0,
	0, 0, 0, 290, 1687, 1129, 0, 0, 0, 1386,
	0, 0, 0, 872, 880, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 889, 1381, 0, 0, 878, 0,
	853, 295, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 863, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 870, 889, 1845, 0, 0, 0, 863, 0,
	0, 0, 1382, 0, 0, 0, 0, 0, 0, 1858,
	1858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 1858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 296, 0,
	0, 297, 0, 0, 0, 864, 298, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 873, 1858, 0, 0,
	0, 0, 1377, 1378, 1379, 0, 1376, 1373, 1374, 1375,
	1367, 1368, 1369, 1370, 1372, 0, 0, 0, 871, 0,
	0, 859, 860, 861, 0, 858, 855, 856, 857, 849,
	850, 851, 852, 854, 0, 874, 0, 0, 0, 1078,
	0, 0, 1407, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 871, 0, 0, 859, 860, 861, 0, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 0, 874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 498, 499, 496, 497, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 525, 491, 0,
	0, 0, 77, 78, 0, 539, 189, 540, 79, 541,
	542, 0, 80, 193, 194, 81, 506, 524, 543, 544,
	197, 0, 535, 0, 517, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 384, 89, 1857, 0,
	518, 520, 0, 519, 521, 91, 92, 93, 94, 545,
	95, 546, 547, 0, 96, 0, 97, 0, 0, 0,
	538, 99, 0, 100, 0, 0, 0, 490, 101, 102,
	526, 504, 0, 0, 103, 104, 548, 0, 105, 0,
	106, 0, 43, 385, 0, 107, 536, 0, 206, 0,
	108, 109, 532, 534, 0, 0, 112, 0, 110, 0,
	386, 111, 549, 550, 551, 552, 0, 516, 0, 43,
	113, 389, 114, 115, 0, 0, 537, 390, 116, 1078,
	1078, 117, 0, 1078, 118, 0, 119, 120, 121, 122,
	123, 392, 124, 125, 128, 126, 480, 127, 505, 533,
	129, 553, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 393, 133, 394, 527, 134, 135, 136, 0, 528,
	137, 220, 138, 0, 139, 140, 141, 554, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 395, 149, 150,
	494, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	522, 157, 158, 0, 159, 555, 225, 160, 0, 166,
	161, 162, 163, 165, 556, 164, 529, 0, 167, 0,
	168, 169, 0, 228, 557, 558, 0, 0, 170, 530,
	531, 503, 171, 172, 1856, 174, 0, 0, 175, 176,
	177, 523, 0, 178, 179, 180, 233, 559, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 1721, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 479, 0, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 602, 76,
	603, 604, 605, 606, 186, 607, 608, 609, 610, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 611, 80,
	193, 194, 81, 612, 613, 195, 196, 197, 614, 198,
	615, 383, 616, 82, 83, 84, 889, 85, 617, 86,
	87, 88, 618, 384, 89, 90, 619, 620, 621, 622,
	623, 624, 91, 92, 93, 94, 199, 95, 200, 201,
	625, 96, 626, 97, 627, 628, 629, 98, 99, 630,
	100, 631, 0, 632, 202, 101, 102, 203, 633, 634,
	635, 103, 104, 204, 0, 105, 636, 106, 637, 638,
	385, 639, 107, 205, 640, 206, 641, 108, 109, 207,
	208, 387, 642, 112, 643, 110, 644, 386, 111, 209,
	210, 211, 212, 645, 213, 646, 388, 113, 389, 114,
	115, 647, 648, 214, 390, 116, 391, 649, 117, 650,
	651, 118, 0, 119, 120, 121, 122, 123, 392, 124,
	125, 128, 126, 652, 127, 653, 215, 129, 216, 130,
	131, 654, 655, 656, 657, 658, 132, 217, 393, 133,
	394, 218, 134, 135, 136, 659, 219, 137, 220, 138,
	660, 139, 140, 141, 221, 142, 143, 661, 145, 146,
	144, 147, 662, 148, 395, 149, 150, 222, 151, 0,
	152, 153, 154, 663, 223, 155, 156, 664, 157, 158,
	396, 159, 224, 225, 160, 665, 166, 161, 162, 163,
	165, 226, 164, 227, 666, 167, 667, 168, 169, 668,
	228, 229, 230, 669, 670, 170, 231, 232, 671, 171,
	172, 173, 174, 672, 673, 175, 176, 177, 674, 675,
	178, 179, 180, 233, 234, 676, 677, 181, 678, 679,
	680, 681, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 74, 75, 602, 76, 603, 604, 605,
	606, 186, 607, 608, 609, 610, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 611, 80, 193, 194, 81,
	612, 613, 195, 196, 197, 614, 198, 615, 383, 616,
	82, 83, 84, 0, 85, 617, 86, 87, 88, 618,
	384, 89, 90, 619, 620, 621, 622, 623, 624, 91,
	92, 93, 94, 199, 95, 200, 201, 625, 96, 626,
	97, 627, 628, 629, 98, 99, 630, 100, 631, 0,
	632, 202, 101, 102, 203, 633, 634, 635, 103, 104,
	204, 0, 105, 636, 106, 637, 638, 385, 639, 107,
	205, 640, 206, 641, 108, 109, 207, 208, 387, 642,
	112, 643, 110, 644, 386, 111, 209, 210, 211, 212,
	645, 213, 646, 388, 113, 389, 114, 115, 647, 648,
	214, 390, 116, 391, 649, 117, 650, 651, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	652, 127, 653, 215, 129, 216, 130, 131, 654, 655,
	656, 657, 658, 132, 217, 393, 133, 394, 218, 134,
	135, 136, 659, 219, 137, 220, 138, 660, 139, 140,
	141, 221, 142, 143, 661, 145, 146, 144, 147, 662,
	148, 395, 149, 150, 222, 151, 0, 152, 153, 154,
	663, 223, 155, 156, 664, 157, 158, 396, 159, 224,
	225, 160, 665, 166, 161, 162, 163, 165, 226, 164,
	227, 666, 167, 667, 168, 169, 668, 228, 229, 230,
	669, 670, 170, 231, 232, 671, 171, 172, 173, 174,
	672, 673, 175, 176, 177, 674, 675, 178, 179, 180,
	233, 234, 676, 677, 181, 678, 679, 680, 681, 182,
	183, 184, 185, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 74,
	75, 602, 76, 603, 604, 605, 606, 186, 607, 608,
	609, 610, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 611, 80, 193, 194, 81, 612, 613, 195, 196,
	197, 614, 198, 615, 383, 616, 82, 83, 84, 0,
	85, 617, 86, 87, 88, 618, 384, 89, 90, 619,
	620, 621, 622, 623, 624, 91, 92, 93, 94, 199,
	95, 200, 201, 625, 96, 626, 97, 627, 628, 629,
	98, 99, 630, 100, 631, 0, 632, 202, 101, 102,
	203, 633, 634, 635, 103, 104, 204, 0, 105, 636,
	106, 637, 638, 385, 639, 107, 205, 640, 206, 641,
	108, 109, 207, 208, 387, 642, 112, 643, 110, 644,
	386, 111, 209, 210, 211, 212, 645, 213, 646, 388,
	113, 389, 114, 115, 647, 648, 214, 390, 116, 391,
	649, 117, 650, 651, 118, 0, 119, 120, 121, 122,
	123, 392, 124, 125, 128, 126, 652, 127, 653, 215,
	129, 216, 130, 131, 654, 655, 656, 657, 658, 132,
	217, 393, 133, 394, 218, 134, 135, 136, 659, 219,
	137, 220, 138, 660, 139, 140, 141, 221, 142, 143,
	661, 145, 146, 144, 147, 662, 148, 395, 149, 150,
	222, 151, 0, 152, 153, 154, 663, 223, 155, 156,
	664, 157, 158, 396, 159, 224, 225, 160, 665, 166,
	161, 162, 163, 165, 226, 164, 227, 666, 167, 667,
	168, 169, 668, 228, 229, 230, 669, 670, 170, 231,
	232, 671, 171, 172, 173, 174, 672, 673, 175, 176,
	177, 674, 675, 178, 179, 180, 233, 234, 676, 677,
	181, 678, 679, 680, 681, 182, 183, 184, 185, 509,
	498, 499, 496, 497, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 1146, 76, 0,
	0, 0, 0, 525, 491, 0, 0, 0, 77, 78,
	187, 539, 189, 540, 79, 541, 542, 0, 80, 193,
	194, 81, 506, 524, 543, 544, 197, 0, 535, 0,
	517, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 384, 89, 90, 0, 518, 520, 0, 519,
	521, 91, 92, 93, 94, 545, 95, 546, 547, 0,
	96, 0, 97, 0, 1147, 0, 538, 99, 0, 100,
	0, 0, 0, 490, 101, 102, 526, 504, 0, 0,
	103, 104, 548, 0, 105, 0, 106, 0, 0, 385,
	0, 107, 536, 0, 206, 0, 108, 109, 532, 534,
	387, 0, 112, 0, 110, 0, 386, 111, 549, 550,
	551, 552, 0, 516, 0, 388, 113, 389, 114, 115,
	0, 0, 537, 390, 116, 391, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 392, 124, 125,
	128, 126, 480, 127, 505, 533, 129, 553, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 393, 133, 394,
	527, 134, 135, 136, 0, 528, 137, 220, 138, 0,
	139, 140, 141, 554, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 395, 149, 150, 494, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 522, 157, 158, 396,
	159, 555, 225, 160, 0, 166, 161, 162, 163, 165,
	556, 164, 529, 0, 167, 0, 168, 169, 0, 228,
	557, 558, 0, 0, 170, 530, 531, 503, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 523, 0, 178,
	179, 180, 233, 559, 1145, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 477, 478, 1148, 0,
	0, 0, 479, 0, 0, 486, 1143, 509, 498, 499,
	496, 497, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 525, 491, 0, 0, 0, 77, 78, 187, 539,
	189, 540, 79, 541, 542, 0, 80, 193, 194, 81,
	506, 524, 543, 544, 197, 0, 535, 0, 517, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 90, 0, 518, 520, 0, 519, 521, 91,
	92, 93, 94, 545, 95, 546, 547, 574, 96, 0,
	97, 0, 0, 0, 538, 99, 0, 100, 0, 0,
	0, 490, 101, 102, 526, 504, 0, 0, 103, 104,
	548, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	536, 0, 206, 0, 108, 109, 532, 534, 387, 0,
	112, 0, 110, 0, 386, 111, 549, 550, 551, 552,
	0, 516, 0, 388, 113, 389, 114, 115, 0, 0,
	537, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	480, 127, 505, 533, 129, 553, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 393, 133, 394, 527, 134,
	135, 136, 0, 528, 137, 220, 138, 0, 139, 140,
	141, 554, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 494, 151, 0, 152, 153, 154,
	61, 223, 155, 156, 522, 157, 158, 396, 159, 555,
	225, 160, 0, 166, 161, 162, 163, 165, 556, 164,
	529, 0, 167, 63, 168, 169, 0, 228, 557, 558,
	0, 0, 170, 530, 531, 503, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 523, 0, 178, 179, 180,
	382, 559, 0, 0, 181, 0, 0, 0, 59, 182,
	183, 184, 185, 481, 60, 509, 498, 499, 496, 497,
	485, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	479, 74, 75, 486, 76, 0, 0, 0, 0, 525,
	491, 0, 0, 0, 77, 78, 187, 539, 189, 540,
	79, 541, 542, 0, 80, 193, 194, 81, 506, 524,
	543, 544, 197, 0, 535, 0, 517, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 384, 89,
	90, 0, 518, 520, 0, 519, 521, 91, 92, 93,
	94, 545, 95, 546, 547, 0, 96, 0, 97, 0,
	0, 0, 538, 99, 0, 100, 0, 0, 0, 490,
	101, 102, 526, 504, 0, 0, 103, 104, 548, 0,
	105, 0, 106, 0, 0, 385, 0, 107, 536, 0,
	206, 0, 108, 109, 532, 534, 387, 0, 112, 0,
	110, 0, 386, 111, 549, 550, 551, 552, 0, 516,
	0, 388, 113, 389, 114, 115, 0, 0, 537, 390,
	116, 391, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 480, 127,
	505, 533, 129, 553, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 393, 133, 394, 527, 134, 135, 136,
	0, 528, 137, 220, 138, 0, 139, 140, 141, 554,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 395,
	149, 150, 494, 151, 0, 152, 153, 154, 61, 223,
	155, 156, 522, 157, 158, 396, 159, 555, 225, 160,
	0, 166, 161, 162, 163, 165, 556, 164, 529, 0,
	167, 63, 168, 169, 0, 228, 557, 558, 0, 0,
	170, 530, 531, 503, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 523, 0, 178, 179, 180, 382, 559,
	0, 0, 181, 0, 0, 0, 59, 182, 183, 184,
	185, 481, 60, 509, 498, 499, 496, 497, 485, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 479, 74,
	75, 486, 76, 0, 0, 0, 0, 525, 491, 0,
	0, 0, 77, 78, 187, 539, 189, 540, 79, 541,
	542, 1185, 80, 193, 194, 81, 506, 524, 543, 544,
	197, 0, 535, 0, 517, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 384, 89, 90, 0,
	518, 520, 0, 519, 521, 91, 92, 93, 94, 545,
	95, 546, 547, 0, 96, 0, 97, 0, 0, 0,
	538, 99, 0, 100, 0, 0, 0, 490, 101, 102,
	526, 504, 0, 0, 103, 104, 548, 0, 105, 0,
	106, 0, 1190, 385, 0, 107, 536, 0, 206, 0,
	108, 109, 532, 534, 387, 0, 112, 0, 110, 0,
	386, 111, 549, 550, 551, 552, 0, 516, 0, 388,
	113, 389, 114, 115, 0, 1186, 537, 390, 116, 391,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 392, 124, 125, 128, 126, 480, 127, 505, 533,
	129, 553, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 393, 133, 394, 527, 134, 135, 136, 0, 528,
	137, 220, 138, 0, 139, 140, 141, 554, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 395, 149, 150,
	494, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	522, 157, 158, 396, 159, 555, 225, 160, 0, 166,
	161, 162, 163, 165, 556, 164, 529, 0, 167, 0,
	168, 169, 0, 228, 557, 558, 0, 1187, 170, 530,
	531, 503, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 523, 0, 178, 179, 180, 233, 559, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 481,
	0, 509, 498, 499, 496, 497, 485, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 479, 74, 75, 486,
	76, 0, 0, 0, 0, 525, 491, 0, 0, 0,
	77, 78, 187, 539, 189, 540, 79, 541, 542, 0,
	80, 193, 194, 81, 506, 524, 543, 544, 197, 0,
	535, 0, 517, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 384, 89, 90, 0, 518, 520,
	0, 519, 521, 91, 92, 93, 94, 545, 95, 546,
	547, 0, 96, 0, 97, 0, 0, 0, 538, 99,
	0, 100, 0, 0, 0, 490, 101, 102, 526, 504,
	0, 0, 103, 104, 548, 0, 105, 0, 106, 0,
	0, 385, 0, 107, 536, 0, 206, 0, 108, 109,
	532, 534, 387, 0, 112, 0, 110, 0, 386, 111,
	549, 550, 551, 552, 0, 516, 0, 388, 113, 389,
	114, 115, 0, 0, 537, 390, 116, 391, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 392,
	124, 125, 128, 126, 480, 127, 505, 533, 129, 553,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 393,
	133, 394, 527, 134, 135, 136, 0, 528, 137, 220,
	138, 0, 139, 140, 141, 554, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 395, 149, 150, 494, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 522, 157,
	158, 396, 159, 555, 225, 160, 0, 166, 161, 162,
	163, 165, 556, 164, 529, 0, 167, 0, 168, 169,
	0, 228, 557, 558, 0, 0, 170, 530, 531, 503,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 523,
	0, 178, 179, 180, 233, 559, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 479, 0, 0, 486, 1563, 509,
	498, 499, 496, 497, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 525, 491, 0, 0, 0, 77, 78,
	187, 539, 189, 540, 79, 541, 542, 0, 80, 193,
	194, 81, 506, 524, 543, 544, 197, 0, 535, 0,
	517, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 384, 89, 90, 0, 518, 520, 0, 519,
	521, 91, 92, 93, 94, 545, 95, 546, 547, 0,
	96, 0, 97, 0, 0, 0, 538, 99, 0, 100,
	0, 0, 0, 490, 101, 102, 526, 504, 0, 0,
	103, 104, 548, 0, 105, 0, 106, 0, 0, 385,
	0, 107, 536, 0, 206, 0, 108, 109, 532, 534,
	387, 0, 112, 0, 110, 0, 386, 111, 549, 550,
	551, 552, 0, 516, 0, 388, 113, 389, 114, 115,
	0, 0, 537, 390, 116, 391, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 392, 124, 125,
	128, 126, 480, 127, 505, 533, 129, 553, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 393, 133, 394,
	527, 134, 135, 136, 0, 528, 137, 220, 138, 0,
	139, 140, 141, 554, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 395, 149, 150, 494, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 522, 157, 158, 396,
	159, 555, 225, 160, 0, 166, 161, 162, 163, 165,
	556, 164, 529, 0, 167, 0, 168, 169, 0, 228,
	557, 558, 0, 0, 170, 530, 531, 503, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 523, 0, 178,
	179, 180, 233, 559, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 479, 0, 0, 486, 1512, 509, 498, 499,
	496, 497, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 525, 491, 0, 0, 0, 77, 78, 187, 539,
	189, 540, 79, 541, 542, 0, 80, 193, 194, 81,
	506, 524, 543, 544, 197, 0, 535, 0, 517, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 90, 0, 518, 520, 0, 519, 521, 91,
	92, 93, 94, 545, 95, 546, 547, 0, 96, 0,
	97, 0, 0, 0, 538, 99, 0, 100, 0, 0,
	0, 490, 101, 102, 526, 504, 0, 0, 103, 104,
	548, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	536, 0, 206, 0, 108, 109, 532, 534, 387, 0,
	112, 0, 110, 0, 386, 111, 549, 550, 551, 552,
	0, 516, 0, 388, 113, 389, 114, 115, 0, 0,
	537, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	480, 127, 505, 533, 129, 553, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 393, 133, 394, 527, 134,
	135, 136, 0, 528, 137, 220, 138, 0, 139, 140,
	141, 554, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 494, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 522, 157, 158, 396, 159, 555,
	225, 160, 0, 166, 161, 162, 163, 165, 556, 164,
	529, 0, 167, 0, 168, 169, 0, 228, 557, 558,
	0, 0, 170, 530, 531, 503, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 523, 0, 178, 179, 180,
	233, 559, 0, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	479, 0, 0, 486, 1142, 509, 498, 499, 496, 497,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 525,
	491, 0, 0, 0, 77, 78, 187, 539, 189, 540,
	79, 541, 542, 0, 80, 193, 194, 81, 506, 524,
	543, 544, 197, 0, 535, 0, 517, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 384, 89,
	90, 0, 518, 520, 0, 519, 521, 91, 92, 93,
	94, 545, 95, 546, 547, 0, 96, 0, 97, 0,
	0, 0, 538, 99, 0, 100, 0, 0, 0, 490,
	101, 102, 526, 504, 0, 0, 103, 104, 548, 0,
	105, 0, 106, 0, 0, 385, 0, 107, 536, 0,
	206, 0, 108, 109, 532, 534, 387, 0, 112, 0,
	110, 0, 386, 111, 549, 550, 551, 552, 0, 516,
	0, 388, 113, 389, 114, 115, 0, 0, 537, 390,
	116, 391, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 480, 127,
	505, 533, 129, 553, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 393, 133, 394, 527, 134, 135, 136,
	0, 528, 137, 220, 138, 0, 139, 140, 141, 554,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 395,
	149, 150, 494, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 522, 157, 158, 396, 159, 555, 225, 160,
	0, 166, 161, 162, 163, 165, 556, 164, 529, 0,
	167, 0, 168, 169, 0, 228, 557, 558, 0, 0,
	170, 530, 531, 503, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 523, 0, 178, 179, 180, 233, 559,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 481, 0, 0, 0, 0, 509, 498, 499, 496,
	497, 485, 477, 478, 0, 0, 0, 0, 479, 895,
	1139, 486, 74, 75, 0, 76, 0, 0, 0, 0,
	525, 491, 0, 0, 0, 77, 78, 187, 539, 189,
	540, 79, 541, 542, 0, 80, 193, 194, 81, 506,
	524, 543, 544, 197, 0, 535, 0, 517, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 384,
	89, 90, 0, 518, 520, 0, 519, 521, 91, 92,
	93, 94, 545, 95, 546, 547, 0, 96, 0, 97,
	0, 0, 0, 538, 99, 0, 100, 0, 0, 0,
	490, 101, 102, 526, 504, 0, 0, 103, 104, 548,
	0, 105, 0, 106, 0, 0, 385, 0, 107, 536,
	0, 206, 0, 108, 109, 532, 534, 387, 0, 112,
	0, 110, 0, 386, 111, 549, 550, 551, 552, 0,
	516, 0, 388, 113, 389, 114, 115, 0, 0, 537,
	390, 116, 391, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 392, 124, 125, 128, 126, 480,
	127, 505, 533, 129, 553, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 393, 133, 394, 527, 134, 135,
	136, 0, 528, 137, 220, 138, 0, 139, 140, 141,
	554, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	395, 149, 150, 494, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 522, 157, 158, 396, 159, 555, 225,
	160, 0, 166, 161, 162, 163, 165, 556, 164, 529,
	0, 167, 0, 168, 169, 0, 228, 557, 558, 0,
	0, 170, 530, 531, 503, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 523, 0, 178, 179, 180, 233,
	559, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 481, 0, 509, 498, 499, 496, 497, 485,
	0, 0, 0, 477, 478, 475, 0, 0, 0, 479,
	74, 75, 486, 76, 0, 0, 0, 0, 525, 491,
	0, 0, 0, 77, 78, 187, 539, 189, 540, 79,
	541, 542, 0, 80, 193, 194, 81, 506, 524, 543,
	544, 197, 0, 535, 0, 517, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 384, 89, 90,
	0, 518, 520, 0, 519, 521, 91, 92, 93, 94,
	545, 95, 546, 547, 0, 96, 0, 97, 0, 0,
	0, 538, 99, 0, 100, 0, 0, 0, 490, 101,
	102, 526, 504, 0, 0, 103, 104, 548, 0, 105,
	0, 106, 0, 0, 385, 0, 107, 536, 0, 206,
	0, 108, 109, 532, 534, 387, 0, 112, 0, 110,
	0, 386, 111, 549, 550, 551, 552, 0, 516, 0,
	388, 113, 389, 114, 115, 0, 0, 537, 390, 116,
	391, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 392, 124, 125, 128, 126, 480, 127, 505,
	533, 129, 553, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 393, 133, 394, 527, 134, 135, 136, 0,
	528, 137, 220, 138, 0, 139, 140, 141, 554, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 395, 149,
	150, 494, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 522, 157, 158, 396, 159, 555, 225, 160, 0,
	166, 161, 162, 163, 165, 556, 164, 529, 0, 167,
	0, 168, 169, 0, 228, 557, 558, 0, 0, 170,
	530, 531, 503, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 523, 0, 178, 179, 180, 233, 559, 1517,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	481, 0, 509, 498, 499, 496, 497, 485, 0, 0,
	0, 477, 478, 0, 0, 0, 0, 479, 74, 75,
	486, 76, 0, 0, 0, 0, 525, 491, 0, 0,
	0, 77, 78, 187, 539, 189, 540, 79, 541, 542,
	0, 80, 193, 194, 81, 506, 524, 543, 544, 197,
	0, 535, 0, 517, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 384, 89, 90, 0, 518,
	520, 0, 519, 521, 91, 92, 93, 94, 545, 95,
	546, 547, 574, 96, 0, 97, 0, 0, 0, 538,
	99, 0, 100, 0, 0, 0, 490, 101, 102, 526,
	504, 0, 0, 103, 104, 548, 0, 105, 0, 106,
	0, 0, 385, 0, 107, 536, 0, 206, 0, 108,
	109, 532, 534, 387, 0, 112, 0, 110, 0, 386,
	111, 549, 550, 551, 552, 0, 516, 0, 388, 113,
	389, 114, 115, 0, 0, 537, 390, 116, 391, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	392, 124, 125, 128, 126, 480, 127, 505, 533, 129,
	553, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	393, 133, 394, 527, 134, 135, 136, 0, 528, 137,
	220, 138, 0, 139, 140, 141, 554, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 395, 149, 150, 494,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 522,
	157, 158, 396, 159, 555, 225, 160, 0, 166, 161,
	162, 163, 165, 556, 164, 529, 0, 167, 0, 168,
	169, 0, 228, 557, 558, 0, 0, 170, 530, 531,
	503, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	523, 0, 178, 179, 180, 233, 559, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 481, 0,
	509, 498, 499, 496, 497, 485, 0, 0, 0, 477,
	478, 0, 0, 0, 0, 479, 74, 75, 486, 76,
	0, 0, 0, 0, 525, 491, 0, 0, 0, 77,
	78, 187, 539, 189, 540, 79, 541, 542, 0, 80,
	193, 194, 81, 506, 524, 543, 544, 197, 0, 535,
	0, 517, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 384, 89, 90, 0, 518, 520, 0,
	519, 521, 91, 92, 93, 94, 545, 95, 546, 547,
	0, 96, 0, 97, 0, 0, 0, 538, 99, 0,
	100, 0, 0, 0, 490, 101, 102, 526, 504, 0,
	0, 103, 104, 548, 0, 105, 0, 106, 0, 1190,
	385, 0, 107, 536, 0, 206, 0, 108, 109, 532,
	534, 387, 0, 112, 0, 110, 0, 386, 111, 549,
	550, 551, 552, 0, 516, 0, 388, 113, 389, 114,
	115, 0, 0, 537, 390, 116, 391, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 392, 124,
	125, 128, 126, 480, 127, 505, 533, 129, 553, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 393, 133,
	394, 527, 134, 135, 136, 0, 528, 137, 220, 138,
	0, 139, 140, 141, 554, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 395, 149, 150, 494, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 522, 157, 158,
	396, 159, 555, 225, 160, 0, 166, 161, 162, 163,
	165, 556, 164, 529, 0, 167, 0, 168, 169, 0,
	228, 557, 558, 0, 0, 170, 530, 531, 503, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 523, 0,
	178, 179, 180, 233, 559, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 481, 0, 0, 0,
	0, 509, 498, 499, 496, 497, 485, 477, 478, 0,
	0, 0, 0, 479, 0, 0, 486, 74, 75, 829,
	76, 0, 0, 0, 0, 525, 491, 0, 0, 0,
	77, 78, 187, 539, 189, 540, 79, 541, 542, 0,
	80, 193, 194, 81, 506, 524, 543, 544, 197, 0,
	535, 0, 517, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 384, 89, 90, 0, 518, 520,
	0, 519, 521, 91, 92, 93, 94, 545, 95, 546,
	547, 0, 96, 0, 97, 0, 0, 0, 538, 99,
	0, 100, 0, 0, 0, 490, 101, 102, 526, 504,
	0, 0, 103, 104, 548, 0, 105, 0, 106, 0,
	0, 385, 0, 107, 536, 0, 206, 0, 108, 109,
	532, 534, 387, 0, 112, 0, 110, 0, 386, 111,
	549, 550, 551, 552, 0, 516, 0, 388, 113, 389,
	114, 115, 0, 0, 537, 390, 116, 391, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 392,
	124, 125, 128, 126, 480, 127, 505, 533, 129, 553,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 393,
	133, 394, 527, 134, 135, 136, 0, 528, 137, 220,
	138, 0, 139, 140, 141, 554, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 395, 149, 150, 494, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 522, 157,
	158, 396, 159, 555, 225, 160, 0, 166, 161, 162,
	163, 165, 556, 164, 529, 0, 167, 0, 168, 169,
	0, 228, 557, 558, 0, 0, 170, 530, 531, 503,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 523,
	0, 178, 179, 180, 233, 559, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 481, 0, 509,
	498, 499, 496, 497, 485, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 479, 74, 75, 486, 76, 0,
	0, 0, 0, 525, 491, 0, 0, 0, 77, 78,
	187, 539, 189, 540, 79, 541, 542, 0, 80, 193,
	194, 81, 506, 524, 543, 544, 197, 0, 535, 0,
	517, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 384, 89, 1857, 0, 518, 520, 0, 519,
	521, 91, 92, 93, 94, 545, 95, 546, 547, 0,
	96, 0, 97, 0, 0, 0, 538, 99, 0, 100,
	0, 0, 0, 490, 101, 102, 526, 504, 0, 0,
	103, 104, 548, 0, 105, 0, 106, 0, 0, 385,
	0, 107, 536, 0, 206, 0, 108, 109, 532, 534,
	387, 0, 112, 0, 110, 0, 386, 111, 549, 550,
	551, 552, 0, 516, 0, 388, 113, 389, 114, 115,
	0, 0, 537, 390, 116, 391, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 392, 124, 125,
	128, 126, 480, 127, 505, 533, 129, 553, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 393, 133, 394,
	527, 134, 135, 136, 0, 528, 137, 220, 138, 0,
	139, 140, 141, 554, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 395, 149, 150, 494, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 522, 157, 158, 396,
	159, 555, 225, 160, 0, 166, 161, 162, 163, 165,
	556, 164, 529, 0, 167, 0, 168, 169, 0, 228,
	557, 558, 0, 0, 170, 530, 531, 503, 171, 172,
	1856, 174, 0, 0, 175, 176, 177, 523, 0, 178,
	179, 180, 233, 559, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 481, 0, 509, 498, 499,
	496, 497, 485, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 479, 74, 75, 486, 76, 0, 0, 0,
	0, 525, 491, 0, 0, 0, 77, 78, 1855, 539,
	189, 540, 79, 541, 542, 0, 80, 193, 194, 81,
	506, 524, 543, 544, 197, 0, 535, 0, 517, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 1857, 0, 518, 520, 0, 519, 521, 91,
	92, 93, 94, 545, 95, 546, 547, 0, 96, 0,
	97, 0, 0, 0, 538, 99, 0, 100, 0, 0,
	0, 490, 101, 102, 526, 504, 0, 0, 103, 104,
	548, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	536, 0, 206, 0, 108, 109, 532, 534, 387, 0,
	112, 0, 110, 0, 386, 111, 549, 550, 551, 552,
	0, 516, 0, 388, 113, 389, 114, 115, 0, 0,
	537, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	480, 127, 505, 533, 129, 553, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 393, 133, 394, 527, 134,
	135, 136, 0, 528, 137, 220, 138, 0, 139, 140,
	141, 554, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 494, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 522, 157, 158, 396, 159, 555,
	225, 160, 0, 166, 161, 162, 163, 165, 556, 164,
	529, 0, 167, 0, 168, 169, 0, 228, 557, 558,
	0, 0, 170, 530, 531, 503, 171, 172, 1856, 174,
	0, 0, 175, 176, 177, 523, 0, 178, 179, 180,
	233, 559, 0, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 481, 0, 509, 498, 499, 496, 497,
	485, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	479, 74, 75, 486, 76, 0, 0, 0, 0, 525,
	491, 0, 0, 0, 77, 78, 187, 539, 189, 540,
	79, 541, 542, 0, 80, 193, 194, 81, 506, 524,
	543, 544, 197, 0, 535, 0, 517, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 384, 89,
	90, 0, 518, 520, 0, 519, 521, 91, 92, 93,
	94, 545, 95, 546, 547, 0, 96, 0, 97, 0,
	0, 0, 538, 99, 0, 100, 0, 0, 0, 490,
	101, 102, 526, 504, 0, 0, 103, 104, 548, 0,
	105, 0, 106, 0, 0, 385, 0, 107, 536, 0,
	206, 0, 108, 109, 532, 534, 387, 0, 112, 0,
	110, 0, 386, 111, 549, 550, 551, 552, 0, 516,
	0, 388, 113, 389, 114, 115, 0, 0, 537, 390,
	116, 391, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 480, 127,
	505, 533, 129, 553, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 393, 133, 394, 527, 134, 135, 136,
	0, 528, 137, 220, 138, 0, 139, 140, 141, 554,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 395,
	149, 150, 494, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 522, 157, 158, 396, 159, 555, 225, 160,
	0, 166, 161, 162, 163, 165, 556, 164, 529, 0,
	167, 0, 168, 169, 0, 228, 557, 558, 0, 0,
	170, 530, 531, 503, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 523, 0, 178, 179, 180, 233, 559,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 481, 0, 509, 498, 499, 496, 497, 485, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 479, 74,
	75, 486, 76, 0, 0, 0, 0, 525, 491, 0,
	0, 0, 77, 78, 187, 539, 189, 540, 79, 541,
	542, 0, 80, 193, 194, 81, 506, 524, 543, 544,
	197, 0, 535, 0, 517, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 384, 89, 90, 0,
	518, 520, 0, 519, 521, 91, 92, 93, 94, 545,
	95, 546, 547, 0, 96, 0, 97, 0, 0, 0,
	538, 99, 0, 100, 0, 0, 0, 490, 101, 102,
	526, 504, 0, 0, 103, 104, 548, 0, 105, 0,
	106, 0, 0, 385, 0, 107, 536, 0, 206, 0,
	108, 109, 532, 534, 387, 0, 112, 0, 110, 0,
	386, 111, 549, 550, 551, 552, 0, 516, 0, 388,
	113, 389, 114, 115, 0, 0, 537, 390, 116, 391,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 392, 124, 125, 128, 126, 0, 127, 505, 533,
	129, 553, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 393, 133, 394, 527, 134, 135, 136, 0, 528,
	137, 220, 138, 0, 139, 140, 141, 554, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 395, 149, 150,
	1180, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	522, 157, 158, 396, 159, 555, 225, 160, 0, 166,
	161, 162, 163, 165, 556, 164, 529, 0, 167, 0,
	168, 169, 0, 228, 557, 558, 0, 0, 170, 530,
	531, 503, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 523, 0, 178, 179, 180, 233, 559, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	1176, 1177, 0, 0, 0, 0, 1178, 74, 75, 1179,
	76, 0, 0, 0, 0, 525, 0, 0, 0, 0,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 524, 195, 196, 197, 0,
	535, 0, 517, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 384, 89, 90, 0, 518, 520,
	0, 519, 521, 91, 92, 93, 94, 199, 95, 200,
	201, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 526, 0,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 385, 0, 107, 536, 0, 206, 0, 108, 109,
	532, 534, 387, 0, 112, 0, 110, 0, 386, 111,
	209, 210, 211, 212, 0, 213, 0, 388, 113, 389,
	114, 115, 0, 0, 537, 390, 116, 391, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 392,
	124, 125, 128, 126, 0, 127, 0, 533, 129, 216,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 393,
	133, 394, 527, 134, 135, 136, 0, 528, 137, 220,
	138, 0, 139, 140, 141, 221, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 395, 149, 150, 222, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 522, 157,
	158, 396, 159, 224, 225, 160, 0, 166, 161, 162,
	163, 165, 226, 164, 529, 0, 167, 0, 168, 169,
	0, 228, 229, 230, 0, 0, 170, 530, 531, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 523,
	0, 178, 179, 180, 233, 234, 0, 0, 181, 378,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 1629, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	383, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 384, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 385,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	387, 0, 112, 0, 110, 0, 386, 111, 209, 210,
	211, 212, 0, 213, 0, 388, 113, 389, 114, 115,
	0, 0, 214, 390, 116, 391, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 392, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 393, 133, 394,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 395, 149, 150, 222, 151, 0, 152,
	153, 154, 61, 223, 155, 156, 0, 157, 158, 396,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 63, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 382, 234, 0, 0, 181, 0, 0, 0,
	59, 182, 183, 184, 185, 0, 60, 378, 781, 0,
	782, 777, 772, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 58, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 383, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 785, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 774, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 387, 0,
	112, 0, 110, 0, 386, 111, 209, 210, 211, 212,
	0, 213, 0, 388, 113, 389, 114, 115, 0, 0,
	214, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 775,
	0, 0, 0, 132, 217, 393, 133, 394, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 396, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 773, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 378, 781, 181, 782, 777, 772, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 783, 778, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 383, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 384, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 768, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	774, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 385, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 387, 0, 112, 0, 110, 0, 386,
	111, 209, 210, 211, 212, 0, 213, 0, 388, 113,
	389, 114, 115, 0, 0, 214, 390, 116, 391, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	392, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 775, 0, 0, 0, 132, 217,
	393, 133, 394, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 395, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 396, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	773, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 378, 781, 181,
	782, 777, 772, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 783,
	778, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 383, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 774, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 387, 0,
	112, 0, 110, 0, 386, 111, 209, 210, 211, 212,
	0, 213, 0, 388, 113, 389, 114, 115, 0, 0,
	214, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 775,
	0, 0, 0, 132, 217, 393, 133, 394, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 396, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 773, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 783, 778, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 341, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 61, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 63, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 382, 234, 0, 0, 181,
	71, 0, 0, 59, 182, 183, 184, 185, 0, 60,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 1080, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 61, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 63, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 382, 234, 0, 0, 181, 71, 0,
	0, 59, 182, 183, 184, 185, 0, 60, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 1309, 0, 58, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 0, 0, 181, 0, 71, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 467, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	341, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 0, 0, 181, 71, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 1080, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	0, 0, 181, 0, 71, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 590, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 0,
	0, 181, 71, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	987, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 0, 0, 181,
	71, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 1527, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 0, 0, 181, 71, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 570, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 752, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 751, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 0, 71, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 755, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 0,
	378, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 755, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 383, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 384, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	385, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 387, 0, 112, 0, 110, 0, 386, 111, 209,
	210, 211, 212, 0, 213, 0, 388, 113, 389, 114,
	115, 0, 0, 214, 390, 116, 391, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 392, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 393, 133,
	394, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 395, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	396, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 953, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 951, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 1054, 0, 103, 104, 204, 0,
	105, 0, 106, 956, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 1052,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 955, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 1053,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 953, 198,
	0, 0, 948, 82, 83, 84, 0, 85, 951, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 956, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 947,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	955, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 954, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 1309, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 341, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 703, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 341, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 403, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 346, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 341, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 258, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 257,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 1224,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 1222, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 1213,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 819, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	272, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 688, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 0, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 452,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 448, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 409, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 283, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	282, 229, 230, 0, 0, 278, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 283, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 282, 229, 230, 0, 0,
	278, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 374,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 371, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 368,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 366, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 349,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	330, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 275, 0,
	0, 118, 0, 119, 120, 121, 122, 283, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 277, 151, 0,
	152, 153, 154, 0, 223, 155, 276, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	282, 229, 230, 0, 0, 278, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 0,
	0, 219, 137, 220, 138, 0, 139, 0, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 0, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 848, 0, 879, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 847, 0, 0, 0, 0,
	848, 862, 879, 0, 0, 0, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 847, 868, 0, 0, 0, 0, 862, 0, 848,
	0, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	847, 0, 0, 0, 0, 0, 862, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 872, 880, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 869,
	0, 872, 880, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 870, 0, 0, 0,
	0, 0, 863, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 0,
	0, 0, 0, 0, 0, 1406, 0, 871, 0, 0,
	859, 860, 861, 0, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 0, 874, 0, 0, 0, 0, 1365,
	1366, 1405, 1383, 1384, 1385, 0, 871, 0, 0, 859,
	860, 861, 0, 858, 855, 856, 857, 849, 850, 851,
	852, 854, 0, 874, 0, 0, 0, 0, 845, 846,
	1358, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 1380,
	0, 848, 0, 879, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 847, 0, 0, 0, 0, 848, 862, 879,
	0, 0, 0, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 1371, 847, 868,
	0, 0, 0, 0, 862, 0, 848, 0, 879, 0,
	0, 0, 0, 0, 0, 1387, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 847, 0, 1386,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 880, 1381, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 872,
	880, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 869, 0, 872, 880,
	863, 0, 1382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 870, 0, 0, 0, 0, 0, 863,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 1377, 1378, 1379, 0, 1376, 1373, 1374, 1375,
	1367, 1368, 1369, 1370, 1372, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 871, 0,
	0, 859, 860, 861, 0, 858, 855, 856, 857, 849,
	850, 851, 852, 854, 0, 874, 0, 0, 0, 1808,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 1365, 1366, 1806, 1383, 1384, 1385, 0,
	0, 0, 0, 871, 0, 0, 859, 860, 861, 1508,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 0,
	874, 0, 845, 846, 1787, 865, 866, 867, 875, 876,
	877, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 1380, 0, 848, 0, 879, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 847, 0, 0, 0,
	0, 848, 862, 879, 0, 0, 0, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	0, 1371, 847, 868, 0, 0, 0, 0, 862, 0,
	848, 0, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 847, 0, 1386, 0, 0, 0, 862, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 880, 1381,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 870, 872, 880, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	869, 0, 872, 880, 863, 0, 1382, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 869, 870, 0, 0,
	0, 0, 0, 863, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 1377, 1378, 1379, 0,
	1376, 1373, 1374, 1375, 1367, 1368, 1369, 1370, 1372, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 871, 0, 0, 859, 860, 861, 0, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 0, 874,
	0, 0, 0, 1762, 0, 0, 0, 0, 871, 0,
	0, 859, 860, 861, 0, 858, 855, 856, 857, 849,
	850, 851, 852, 854, 0, 874, 0, 1365, 1366, 1757,
	1383, 1384, 1385, 0, 0, 0, 0, 871, 0, 0,
	859, 860, 861, 0, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 0, 874, 0, 845, 846, 1753, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 1380, 0, 848,
	0, 879, 845, 846, 0, 865, 866, 867, 875, 876,
	877, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	847, 0, 0, 0, 0, 848, 862, 879, 0, 0,
	0, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 1371, 847, 868, 0, 0,
	0, 0, 862, 0, 848, 0, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 847, 0, 1386, 0, 0,
	0, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 880, 1381, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 870, 872, 880, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 869, 0, 872, 880, 863, 0,
	1382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 870, 0, 0, 0, 0, 0, 863, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	1377, 1378, 1379, 0, 1376, 1373, 1374, 1375, 1367, 1368,
	1369, 1370, 1372, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 871, 0, 0, 859,
	860, 861, 0, 858, 855, 856, 857, 849, 850, 851,
	852, 854, 0, 874, 0, 0, 0, 1689, 0, 0,
	0, 0, 871, 0, 0, 859, 860, 861, 0, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 0, 874,
	0, 0, 0, 1688, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 0,
	845, 846, 1596, 865, 866, 867, 875, 876, 877, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 848, 0, 879, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 847, 0, 0, 0, 0, 848,
	862, 879, 0, 0, 0, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 0, 0,
	847, 868, 0, 0, 0, 0, 862, 0, 848, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 847,
	0, 0, 0, 0, 0, 862, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	870, 872, 880, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 869, 0,
	872, 880, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 870, 0, 0, 0, 0,
	0, 863, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 869, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	871, 0, 0, 859, 860, 861, 0, 858, 855, 856,
	857, 849, 850, 851, 852, 854, 0, 874, 0, 0,
	0, 1530, 0, 0, 0, 0, 871, 0, 0, 859,
	860, 861, 0, 858, 855, 856, 857, 849, 850, 851,
	852, 854, 0, 874, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 0, 845, 846, 1135, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 848, 0, 879,
	845, 846, 0, 865, 866, 867, 875, 876, 877, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 847, 0,
	0, 0, 0, 848, 862, 879, 0, 0, 0, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 847, 868, 0, 0, 0, 0,
	862, 0, 848, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 847, 0, 0, 0, 0, 0, 862,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 853, 1876,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 872, 880, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 853, 0, 1397,
	878, 0, 1396, 0, 0, 0, 0, 0, 0, 0,
	870, 0, 869, 0, 872, 880, 863, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 870,
	0, 0, 0, 0, 0, 863, 0, 864, 0, 0,
	0, 1875, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 725, 719, 742, 713, 733, 732, 869, 0, 715,
	714, 0, 0, 864, 744, 743, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 738, 0, 730, 729, 0,
	0, 0, 0, 873, 871, 0, 728, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 727, 1444, 0, 0, 0, 0, 0, 0,
	871, 0, 0, 859, 860, 861, 0, 858, 855, 856,
	857, 849, 850, 851, 852, 854, 0, 874, 720, 721,
	722, 723, 0, 741, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 731, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 882, 1068, 0,
	848, 0, 879, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 726, 0, 0, 0, 0, 0, 868,
	0, 847, 0, 881, 0, 0, 848, 862, 879, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	0, 724, 718, 0, 0, 0, 0, 847, 0, 0,
	746, 0, 0, 862, 0, 1069, 0, 716, 0, 0,
	739, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 872, 880,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 869, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 864, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 848, 873, 879, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 847, 0, 0,
	0, 0, 848, 862, 879, 0, 0, 871, 0, 0,
	859, 860, 861, 0, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 847, 874, 0, 0, 0, 0, 862,
	0, 0, 0, 871, 0, 0, 859, 860, 861, 0,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 0,
	874, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 872, 880, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 869, 325, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 864, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 848, 873, 879, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 0, 0,
	0, 868, 1524, 847, 0, 1398, 0, 0, 848, 862,
	879, 0, 0, 871, 0, 0, 859, 860, 861, 0,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 847,
	874, 0, 0, 0, 0, 862, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 853, 0, 0,
	0, 0, 1403, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 880, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	872, 880, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 869, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 864, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 848, 873,
	879, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 847,
	0, 1357, 0, 0, 848, 862, 879, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 847, 874, 0, 0, 0,
	0, 862, 0, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 872, 880, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 869, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 1363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 864, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 848, 873, 879, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 847, 0, 0, 0, 0,
	848, 862, 879, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 847, 874, 0, 0, 0, 0, 862, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 872, 880, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 869,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	859, 860, 861, 0, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 0, 874,
}
var sqlPact = [...]int{

	2816, -1000, 53, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 889, 16141, -1000, -1000,
	-1000, -1000, -1000, 832, 716, 2395, 16141, 16141, 15876, 1121,
	1121, 17466, -1000, -1000, 20646, -1000, 3417, 473, 476, 473,
	473, 485, 17466, 535, 665, 153, -1000, 643, -11, 20381,
	16141, 1338, 43, 14816, 341, 2816, 15611, 20116, 16141, 351,
	55, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1160, 1060, 1059, 14816, 19851,
	19586, 19321, 19056, -1000, 10005, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 533, 350, 349, -1000, 15346, -1000, 862,
	-1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	860, -1000, 16141, -1000, -1000, 18791, 18526, 346, 851, -1000,
	-1000, 551, 417, 1360, -1000, 64, -1000, -1000, 1158, -1000,
	857, 1154, 1136, 1135, 1133, 1130, 1128, 407, 852, -1000,
	530, 851, -1000, 851, -1000, -1000, -1000, 511, 17466, -1000,
	14816, -1000, 18261, 16141, 1077, 17996, -1000, 643, -1000, -1000,
	-1000, 875, 1337, 1337, 1337, 1350, 160, 159, 153, 6,
	16141, -1000, 343, 6, 7232, 7232, -1000, -1000, 341, -1000,
	251, 12956, -1000, 7788, -1000, 841, 1233, 437, 633, 1227,
	-135, 702, 556, 12151, 55, -1000, -1000, -1000, 9181, 4373,
	14816, 16141, 16141, 604, 17731, -1000, 1221, 99, 1217, -1000,
	98, 1211, -1000, 98, 1200, 28, -1000, -1000, -1000, -1000,
	-1000, -1000, 341, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15081, 1376, 23095,
	-1000, 9181, -1000, -1000, 13224, 1115, 13224, -1000, -1000, 1374,
	-1000, 9181, -1000, 34, 33, 981, 1065, 10548, 10283, 1294,
	757, -1000, -1000, -1000, 57, 4649, 16141, 1164, 13224, 16141,
	16141, 16141, 16141, 16141, 16141, -1000, 968, -1000, 16141, -1000,
	19, 13, -1000, 17466, -1000, 100, -1000, 429, 935, 165,
	17201, 1255, 929, -1000, 875, -1000, 864, 938, 8347, 9181,
	153, -1000, -1000, 153, 153, 9181, -1000, -1000, 16141, 6,
	1373, 16141, 158, -1000, 23273, -1000, -1000, 9181, 9181, 9181,
	9181, 9181, 807, -1000, -1000, -1000, 5501, -1000, -1000, 55,
	339, 319, -1000, -1000, 337, 55, -1000, -1000, -1000, -1000,
	336, 1476, 444, -1000, -1000, -1000, 9181, 425, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1124, 335, 334,
	-1000, -1000, -1000, -1000, 333, 332, 328, 326, 325, 323,
	322, 321, 320, 318, 316, 306, 304, 302, 782, -1000,
	438, -1000, -1000, 438, 438, -1000, 269, 269, 284, -1000,
	-1000, -1000, -1000, 269, -1000, -1000, -1000, 396, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 291, 158, -1000, -1000, -1000,
	16141, 18, -1000, 24111, -1000, -24, 777, -1000, 14286, 1328,
	1316, 1317, 14816, 1364, 1361, 509, 16141, 16141, 504, -1000,
	1125, 17, -1000, -1000, 2934, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 430, 338, 1370, 338, 12420, -1000, 16141, 16141,
	-1000, 16141, -1000, -1000, 16141, -1000, 16141, 16141, -1000, 16141,
	1178, 13756, 690, 1199, -11, 11, -1000, 1378, -1000, -1000,
	-1000, -1000, 67, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 284, 782, 269,
	269, 269, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 396,
	-1000, -1000, 438, 438, 438, -1000, -1000, -2, 24111, 502,
	-18, 13490, 16141, -1000, 56, -1000, -1000, 1122, 472, -3,
	715, 1055, 922, -1000, -1000, -1000, -1000, 2, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1460, -1000,
	-1000, -1000, -1000, 1464, 2, -1000, -1000, -1000, -1000, -1000,
	1475, -1000, -1000, -1000, 4649, -1000, -1000, -1000, 16141, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 715, 1055,
	-1000, -1000, 14816, 14021, -11, 1197, 1369, 16141, 847, 917,
	-1000, -1000, 387, 1195, -1000, -1000, -1000, -1000, 24111, -1000,
	24111, 657, 1063, -1000, 1063, -4, -1000, 23247, -1000, 268,
	-8, -1000, 430, 7232, 11883, 23095, 23095, 16141, 524, 9181,
	9181, 9181, 9181, 9181, 9181, 9181, 9181, 9181, 9181, 9181,
	9181, 9181, 9181, 9181, 9181, 9181, 9181, 9181, 9181, 9181,
	9181, 1021, 9181, 501, 9181, 9181, 9181, 9181, 1024, 802,
	250, 4649, -1000, 650, 650, 650, 3452, 3452, 243, 32,
	22615, -14, 55, -1000, -1000, 6951, 6653, 55, 4925, -1000,
	780, 1462, 435, 24111, 1175, 1103, 266, 155, 149, 9181,
	9181, 1026, 9181, 9459, 9181, 9181, 5779, 9181, 9181, 9181,
	9181, 9181, 9181, -1000, 265, -1000, -1000, -1000, -1000, 1457,
	-1000, -1000, 1453, -1000, 523, 522, 1439, 430, 145, 7788,
	-1000, 690, 16141, 16141, 16141, -1000, -1000, 907, 16936, -1000,
	23095, 16141, -1000, 264, 263, 1020, 991, 16141, 16141, 16671,
	16406, 16141, 748, 260, 258, 16141, 669, -1000, 16141, 546,
	1120, 16141, -1000, 9181, 660, 9181, 684, -1000, 11346, 443,
	16141, 688, 148, -1000, -1000, -1000, 384, 16141, -1000, -1000,
	-1000, 99, -1000, 98, 98, -1000, -1000, 14816, -1000, -1000,
	-1000, -1000, -1000, -1000, 23095, 360, 359, -1000, 1434, 500,
	-1000, 499, 494, 492, -1000, 253, -1000, 9181, 16141, 13490,
	-18, -19, -1000, -1000, 16141, 1055, -1000, -1000, -1000, -1000,
	695, -1000, 700, -1000, 10813, -1000, -1000, -1000, 780, -1000,
	-37, -1000, -1000, -1000, -1000, 144, -20, -1000, -1000, -1000,
	-1000, -1000, 16141, 315, 16141, -1000, 16141, -11, -9, 16141,
	1191, 1474, 16141, -1000, -1000, -1000, 9181, -1000, -1000, -1000,
	-11, 16141, -1000, 1099, -1000, -7, 1202, -153, 14551, -1000,
	11078, -1000, -1000, -1000, 400, 882, 882, 570, 570, 570,
	570, 2020, 2020, 709, 1615, 3054, 3054, 3054, 637, 317,
	317, 3054, 3054, 3054, 3452, 24137, 227, 9181, 9181, 491,
	778, 250, 227, 9181, 1447, 227, 227, 227, -1000, 868,
	-1000, -1000, -1000, 1119, 246, 9459, 9459, -1000, -1000, -1000,
	5501, -1000, -1000, 245, 9181, -1000, 9181, -47, -122, -1000,
	-1000, -10, -1000, -1000, -32, 9181, 9181, 9181, 137, -1000,
	135, 613, -1000, 9181, 811, 241, 229, 9181, -1000, -1000,
	23921, 21236, 127, 1114, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 123, 23895, 120, 21499, -1000, 9459, 9459, 9459, 5501,
	226, 116, 22959, -117, 23705, 8066, 8066, 8066, 113, 23679,
	9181, -117, 21207, 21181, 3418, -22, -39, -53, 1425, -55,
	112, 399, 397, 110, 1099, -1000, -1000, -1000, -1000, 490,
	489, 1190, -1000, 906, -1000, 771, 9181, 16141, 225, 213,
	751, -1000, 1187, 896, 1186, 896, -1000, -24, 740, 9181,
	9181, -1000, 488, -1000, -1000, 543, -1000, 22904, -1000, 7232,
	24111, -1000, 678, 1321, -57, -1000, -1000, 7232, 430, 12420,
	11883, 7788, -71, -1000, -1000, -1000, 690, -1000, 521, 1423,
	109, 949, 795, 680, 576, 1418, 24111, -37, -1000, -37,
	-1000, -1000, -1000, -1000, -1000, -1000, 16141, 1082, 14021, 212,
	16141, 211, 385, -1000, -1000, 210, 16141, -1000, 1255, -1000,
	108, -1000, 1096, 1349, -1000, 11883, 869, 1050, 1031, 11883,
	1064, 813, 813, 813, -1000, 14551, 4086, -1000, -1000, 16141,
	206, 11614, 107, 1202, 9181, 227, 227, 9181, 9459, 9459,
	-1000, 227, -1000, -1000, -1000, -1000, 1113, 205, 9181, 23095,
	21843, 3399, -73, 6355, -38, 22586, -1000, -1000, 319, -1000,
	105, 7510, -1000, 23463, -26, -26, -1000, 1472, 1250, -1000,
	9181, 23489, -1000, 12688, 432, 830, 22560, 23095, 23095, -1000,
	9181, -1000, 1112, 9181, -1000, 23095, 23095, 9459, 9459, 9459,
	9459, 9459, 9459, 9459, 9459, 9459, 9459, 9459, 9459, 9459,
	9459, 9459, 9459, 9459, 9459, 9459, 1016, 9459, 1413, 1413,
	1413, -54, 6057, -1000, 1118, 1112, 9181, 9181, 23095, 96,
	95, 94, -1000, 9181, -117, 9181, 9181, 9181, -1000, -1000,
	-1000, 93, -1000, 1408, -1000, -1000, -1000, -1000, 1096, 16141,
	16141, 16141, 1184, 2002, -1000, 22271, -77, 16141, 16141, -1000,
	1015, 1127, 463, 16141, -1000, 16141, -1000, 16141, 16141, 16141,
	-81, -82, 16141, -1000, -1000, -69, 7232, 223, -11, -69,
	660, -1000, -68, -1000, 381, -1000, 355, 228, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 91, -1000, -1000, 1084,
	-1000, 9737, 204, 16141, 14021, -11, 9737, 845, -1000, -1000,
	401, 9181, 9181, 1202, 538, 11883, 11883, 806, 994, 11883,
	-1000, -1000, -1000, -1000, -1000, -1000, 1029, 197, 16141, 14551,
	590, 227, 3036, 2332, 9181, 23095, 199, -83, 9181, 9181,
	-1000, -96, -1000, 9181, -1000, -1000, 1468, 9181, 90, 89,
	85, -1000, -1000, 24111, 9181, -1000, -1000, 20911, 9181, 84,
	-1000, 81, 80, 24111, 1118, 24111, -1000, -1000, 619, 619,
	1413, 1413, 1413, 1413, 537, 537, 1708, 244, 967, 967,
	967, 2081, 586, 586, 967, 967, 967, 1111, 993, 195,
	22187, 9181, -97, -1000, -1000, -1000, 24111, 24111, 79, -1000,
	-1000, -1000, -117, 3230, 22242, 22216, -1000, 78, 401, -1000,
	-1000, -1000, 16141, -1000, 16141, -1000, 16141, 16141, 1116, 893,
	-1000, -1000, 989, 185, 9459, 16141, -1000, 735, -101, -102,
	892, -1000, 890, 9181, -1000, 23095, 896, 896, -1000, 486,
	481, -1000, -1000, -1000, -69, 1262, 16141, 1306, -1000, -1000,
	181, -1000, -1000, -1000, 803, -107, -1000, 254, 1329, 9181,
	-1000, -1000, 180, 9737, -108, 76, -1000, -109, 16141, -1000,
	16141, 24111, -117, 516, -1000, 806, -1000, 178, 9181, 11883,
	-1000, -166, -1000, 374, -1000, 16141, -113, -1000, 9181, 9181,
	199, -118, -1000, 227, 227, -1000, 21927, -1000, 23463, -1000,
	-1000, -1000, 24111, 787, -1000, 21898, -1000, -1000, -1000, -1000,
	9459, 1109, 176, 23095, 21872, -1000, -1000, 9181, -1000, -1000,
	-1000, -1000, -1000, 1282, -1000, -1000, 16141, 898, -1000, -1000,
	9181, 22187, 175, 1082, 173, -1000, -1000, -1000, 685, -1000,
	-1000, 24111, 1333, -1000, -1000, 16141, 16141, 547, -125, 16141,
	-1000, -1000, 5223, 16141, 735, 9737, 1331, 55, 16141, 1331,
	21583, 4925, -126, -1000, 1082, 735, 170, -93, -1000, 1368,
	1467, -1000, 16141, 24111, -1000, 1029, -1000, 4649, -130, -1000,
	227, 227, -1000, -1000, 74, 830, 1348, -1000, 2270, 9459,
	23095, -136, -1000, 21554, -1000, -1000, 1142, 21528, 909, 16141,
	-1000, 16141, 16141, 449, 16141, -1000, -1000, 579, -1000, 430,
	-1000, 168, 1082, -1000, -1000, -1000, -1000, 1329, -32, 735,
	-1000, 1082, 9737, 16141, 167, -1000, -137, -1000, -1000, -1000,
	-1000, 663, 9181, 2270, -138, -1000, -1000, 1126, -1000, 829,
	683, 73, -142, 165, -1000, 9181, -1000, 12420, -1000, 16141,
	-1000, 1331, 71, 1082, -1000, -143, -1000, -1000, -1000, 68,
	8903, 8903, -117, -1000, 16141, -1000, 842, 834, 629, -1000,
	-1000, -1000, -1000, -1000, 909, 24111, -131, -144, -1000, -1000,
	-1000, 735, -1000, -1000, -1000, 3759, 899, 646, 22930, -1000,
	-1000, -1000, 1266, -1000, 454, 930, 930, 829, -1000, 826,
	1082, 1382, -1000, -1000, -1000, -1000, -1000, -1000, 1392, -1000,
	-1000, 1003, -1000, -1000, -1000, -1000, -1000, -1000, 8625, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1695, 1693, 1367, 120, 1692, 118, 1691, 1690, 1689,
	1686, 1685, 86, 115, 114, 124, 1684, 88, 1682, 1681,
	1678, 85, 1677, 1676, 1674, 73, 1672, 1670, 1667, 1666,
	1664, 1661, 80, 43, 134, 2423, 129, 1660, 1659, 1657,
	11, 90, 71, 1653, 103, 1651, 62, 89, 97, 1100,
	33, 1649, 1647, 128, 31, 15, 320, 94, 139, 112,
	110, 1646, 1645, 1643, 49, 1642, 10, 1640, 1637, 13,
	46, 25, 1635, 18, 19, 1634, 1633, 113, 1632, 66,
	92, 100, 26, 108, 155, 1628, 65, 12, 74, 1627,
	35, 1624, 34, 70, 131, 1623, 51, 184, 52, 22,
	56, 1618, 1614, 1612, 1611, 78, 1610, 82, 57, 1609,
	1608, 72, 1607, 127, 132, 1606, 1605, 126, 1604, 1603,
	1600, 708, 1599, 1598, 336, 1595, 6, 48, 58, 3,
	99, 98, 23, 1594, 17, 1592, 1788, 842, 607, 1591,
	54, 40, 76, 47, 50, 44, 1590, 1589, 91, 1586,
	1584, 1582, 1581, 1580, 63, 1579, 59, 130, 41, 55,
	95, 27, 30, 77, 105, 137, 96, 1578, 1577, 107,
	1576, 198, 1574, 1573, 1104, 117, 1568, 1567, 1566, 1091,
	1085, 755, 263, 1563, 1562, 668, 501, 1561, 1560, 111,
	1558, 1555, 135, 143, 16, 1554, 101, 1553, 87, 1552,
	0, 81, 29, 1547, 125, 75, 1546, 1545, 1543, 1542,
	32, 2, 7, 9, 5, 4, 24, 20, 1538, 1537,
	123, 83, 1536, 140, 1526, 1525, 1523, 36, 1519, 21,
	1513, 14, 1511, 1510, 8, 1, 133, 1509, 93, 1494,
	1396, 1488, 136, 1484, 1482, 1405, 79,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 42,
	42, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 39, 39, 44, 44,
	44, 43, 43, 38, 38, 5, 5, 5, 6, 6,
	6, 6, 6, 12, 13, 13, 13, 13, 13, 13,
	13, 13, 83, 83, 82, 82, 85, 85, 14, 14,
	15, 15, 15, 15, 15, 15, 15, 15, 170, 170,
	169, 16, 146, 146, 17, 17, 17, 17, 18, 106,
	106, 19, 19, 19, 19, 20, 24, 236, 236, 236,
	240, 240, 241, 241, 242, 242, 242, 242, 242, 242,
	242, 238, 238, 27, 27, 27, 27, 27, 125, 121,
	121, 123, 123, 123, 123, 48, 120, 120, 120, 120,
	122, 122, 122, 122, 193, 192, 192, 198, 198, 198,
	61, 61, 61, 61, 61, 62, 62, 62, 191, 191,
	191, 191, 199, 199, 199, 199, 199, 199, 63, 63,
	63, 197, 197, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	237, 237, 239, 239, 29, 29, 9, 9, 10, 10,
	64, 64, 65, 65, 128, 128, 128, 128, 66, 66,
	45, 45, 45, 127, 208, 208, 209, 209, 209, 209,
	209, 209, 210, 210, 210, 210, 210, 210, 210, 206,
	206, 207, 204, 204, 205, 205, 205, 205, 243, 243,
	126, 126, 69, 69, 213, 213, 213, 213, 211, 211,
	211, 211, 211, 214, 212, 215, 215, 215, 215, 215,
	157, 157, 157, 31, 11, 8, 8, 110, 110, 73,
	73, 161, 161, 161, 55, 55, 40, 40, 40, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 111, 111,
	112, 112, 22, 26, 30, 30, 30, 30, 30, 245,
	245, 52, 52, 52, 52, 53, 53, 124, 124, 124,
	124, 124, 47, 7, 7, 46, 46, 21, 21, 21,
	21, 21, 58, 58, 117, 117, 117, 119, 119, 118,
	118, 118, 96, 96, 32, 78, 78, 87, 87, 88,
	88, 167, 89, 89, 25, 25, 35, 35, 33, 33,
	33, 33, 33, 33, 34, 34, 36, 36, 36, 36,
	36, 36, 36, 221, 221, 221, 223, 223, 220, 222,
	222, 244, 244, 97, 97, 97, 68, 67, 67, 71,
	71, 70, 72, 72, 160, 94, 94, 94, 94, 113,
	114, 114, 115, 115, 116, 116, 93, 93, 143, 143,
	37, 37, 77, 77, 79, 79, 134, 134, 135, 135,
	133, 133, 133, 162, 162, 162, 162, 163, 163, 163,
	163, 163, 163, 158, 158, 158, 158, 159, 159, 168,
	168, 100, 100, 100, 100, 98, 98, 99, 99, 164,
	164, 164, 164, 95, 95, 165, 165, 165, 129, 129,
	171, 171, 171, 76, 76, 76, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 173,
	173, 173, 173, 175, 175, 175, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	176, 176, 183, 183, 184, 184, 185, 186, 177, 177,
	178, 178, 179, 180, 187, 187, 187, 187, 189, 189,
	181, 181, 181, 181, 181, 182, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	108, 108, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 216, 216, 216, 216, 216, 216, 216,
	218, 218, 219, 219, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	224, 224, 225, 225, 227, 227, 228, 228, 229, 230,
	230, 230, 231, 232, 232, 226, 226, 233, 233, 233,
	234, 234, 235, 235, 235, 235, 235, 148, 148, 148,
	149, 149, 150, 84, 84, 145, 145, 144, 144, 144,
	147, 147, 101, 188, 188, 188, 188, 188, 188, 188,
	102, 102, 109, 103, 103, 104, 104, 104, 104, 104,
	104, 140, 141, 105, 105, 105, 142, 142, 151, 155,
	155, 154, 153, 153, 152, 152, 132, 132, 132, 132,
	131, 130, 90, 90, 246, 246, 156, 156, 91, 91,
	92, 86, 86, 166, 166, 166, 166, 80, 80, 60,
	60, 81, 81, 56, 56, 59, 57, 57, 57, 57,
	74, 74, 75, 75, 54, 54, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 190, 190, 190,
	49, 49, 49, 50, 50, 51, 51, 195, 195, 195,
	196, 196, 196, 196, 194, 194, 194, 194, 194, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 2, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 4, 6, 7, 1, 1,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	4, 6, 1, 3, 1, 2, 2, 3, 2, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 5, 3, 0, 1, 1, 1, 1, 3, 3,
	0, 2, 3, 2, 3, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 2, 4, 4, 4,
	4, 4, 4, 4, 2, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 8, 8, 7, 10, 5, 8,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 4, 7, 3, 0, 6, 6, 8,
	5, 7, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -18, -19, -20, -21, -23, -24, -26, -25, -27,
	-28, -29, -30, -22, -31, -32, 23, 64, -7, -8,
	-9, -10, -11, -222, 92, 100, 193, 99, 85, 115,
	207, 214, -33, -35, 222, -125, 223, 34, 232, 58,
	95, 209, 204, 253, 66, -221, -36, -34, 300, 275,
	281, 217, -37, 240, 267, 303, 240, 128, 78, -56,
	-49, 4, -200, -202, 20, 21, 23, 33, 34, 39,
	43, 46, 57, 58, 59, 61, 63, 64, 65, 68,
	69, 76, 77, 78, 79, 81, 85, 87, 91, 92,
	94, 99, 100, 105, 106, 109, 111, 116, 121, 122,
	129, 132, 127, 141, 143, 144, 149, 152, 155, 157,
	158, 159, 160, 161, 163, 164, 166, 168, 165, 171,
	173, 174, 180, 183, 186, 187, 188, 191, 193, 195,
	196, 197, 199, 200, 204, 202, 203, 205, 207, 209,
	210, 212, 214, 215, 216, 219, 220, 222, 223, 225,
	228, 231, 232, 233, 236, 234, 230, 239, 241, 242,
	249, 253, 254, 255, 256, 259, 260, 261, 264, 265,
	266, 271, 276, 277, 278, 279, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 107, 117, 119, 123, 124, 133,
	134, 135, 136, 138, 147, 170, 172, 181, 185, 190,
	192, 198, 211, 218, 226, 227, 235, 237, 244, 245,
	246, 250, 251, 267, 268, 87, 132, 261, 260, 78,
	128, 240, 270, -15, 300, -25, -6, -13, -4, -21,
	-32, -12, -14, 23, -49, -49, -49, 193, 22, -240,
	22, -241, -242, 66, 92, 115, 217, 132, 87, 260,
	-240, -53, 214, -49, -121, 152, 220, 211, 249, -122,
	-120, -193, 244, 161, -82, -49, 4, 78, 57, 79,
	116, 128, 129, 62, 63, 144, 241, 244, 249, 22,
	66, -245, 249, 249, -245, -245, -52, 249, 247, -53,
	-244, 240, 240, 270, -110, 78, 258, -34, -36, -35,
	-70, -71, 257, 137, 97, 179, -33, -35, -221, -223,
	199, -220, -49, -223, -67, -68, 22, 89, 304, -164,
	-56, 177, -92, 300, -3, -164, 123, -56, -59, 123,
	-56, -49, 113, 300, -90, -132, -131, -130, 298, 302,
	113, 139, 139, -165, -164, -49, 123, -60, 123, -59,
	-83, 123, -82, -83, 123, -170, -169, -196, 4, -200,
	-202, -201, 267, 55, 67, 114, 131, 125, 140, 142,
	148, 150, 162, 182, 184, 208, 224, 240, -146, 300,
	-106, 300, -49, 22, 176, 304, 176, -49, -121, 51,
	-121, 300, -123, -47, -48, 141, 195, 247, 285, 113,
	279, -63, 5, 84, -85, 302, 113, -237, 176, 113,
	113, 113, 113, 113, 113, 279, 141, 195, 240, -124,
	-47, -48, -124, 247, -53, -95, -164, -82, 123, -82,
	128, -49, 123, -70, -71, -94, -113, -114, 151, 175,
	-97, 22, 89, -97, -97, 43, 301, 301, 304, -223,
	-75, 300, -86, -166, -136, 293, -138, 291, 292, 297,
	167, 280, -148, -56, -139, 9, 300, -151, -218, -35,
	98, 29, -149, -150, 211, -49, 7, 8, 5, 6,
	-54, -173, -182, 252, 102, 169, 47, -216, -217, 4,
	-200, -195, -174, -184, -178, -181, 138, 55, 71, 74,
	72, 75, 221, 262, 48, 28, 101, 185, 190, 237,
	250, 251, 123, 170, 124, 53, 117, 147, 91, 36,
	38, 40, 41, 49, 50, 80, 82, 83, 107, 133,
	134, 135, 136, 172, 198, 226, 235, 245, 246, 268,
	-201, -185, -186, -179, -180, -187, -86, -92, 293, -56,
	300, -91, -156, -136, 84, -42, 202, -41, 21, 23,
	92, 265, 98, 230, 230, 202, 98, 305, 202, 233,
	301, -80, -56, -132, -136, -194, 293, 4, -200, -202,
	-201, -203, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 42, 47, 48, 52, 54, 56, 62, 66, 70,
	71, 72, 73, 74, 75, 84, 86, 88, 89, 90,
	93, 95, 97, 102, 103, 104, 110, 112, 113, 115,
	118, 120, 126, 128, 130, 137, 139, 145, 146, 151,
	153, 154, 167, 169, 175, 176, 177, 178, 179, 189,
	194, 201, 206, 217, 221, 229, 238, 240, 243, 247,
	248, 252, 257, 258, 262, 263, 269, 270, 272, 273,
	274, 275, -165, -58, -56, -58, 222, -49, 30, 98,
	-44, 304, 46, 205, 98, -44, 304, 98, -44, 98,
	301, 304, -164, 123, 30, -145, -171, -172, -174, -183,
	-177, -181, -182, 39, 45, 44, 242, 218, 227, 37,
	133, 134, 135, 136, 226, 36, 198, 107, 91, 83,
	82, 172, 41, 40, -185, -186, -179, -180, 80, 245,
	246, 138, 38, 50, 49, 268, 235, -84, -136, -236,
	-81, 240, 78, -57, -49, 293, -242, -236, 30, -84,
	304, 304, 149, -62, 155, 166, 121, -192, 84, -198,
	-191, -157, 9, 252, 102, 176, -197, 8, 292, -190,
	-196, 5, 7, 291, -192, 84, 69, -199, 5, 4,
	-182, -157, 84, 152, 302, -194, -193, -239, 110, -236,
	-193, -193, -193, -193, -193, -49, 149, -193, 304, 304,
	-53, -44, 304, 300, 30, 167, -69, 300, -50, 123,
	-49, -46, 94, 167, -94, -114, -113, -115, -136, 22,
	-136, -138, -34, -34, -34, -72, -160, -136, -220, 30,
	-74, -49, -77, 304, 113, 10, 11, 54, 33, 291,
	292, 293, 294, 108, 295, 288, 289, 290, 287, 283,
	284, 285, 60, 156, 213, 13, 14, 15, 26, 178,
	150, 280, 125, 224, 297, 16, 17, 18, 140, 35,
	126, 30, 4, -136, -136, -136, -136, -136, 184, -35,
	-136, -84, -90, -35, -144, 298, 300, -90, 300, 5,
	5, 300, -152, -136, -224, 276, 110, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 192, -189, 271, -189, -189, -175, 300,
	-175, -176, 300, -175, 277, 281, 300, -77, -56, 304,
	301, 304, 247, -111, 62, 56, -127, 123, 56, -204,
	-49, 62, -205, 52, 258, 194, 112, -111, 62, -111,
	62, 62, -164, 33, 33, 247, -59, -49, 247, 113,
	301, 304, 299, 308, -129, 273, -117, -25, 300, 84,
	30, -117, -87, -88, -167, -89, -56, 300, -49, -49,
	-59, -60, -82, -83, -83, -15, -169, 98, -17, -25,
	-21, -32, -12, 301, 304, -76, 29, -107, 300, 278,
	159, 81, 122, 158, -108, 216, 301, 304, 247, 304,
	-81, -74, -131, -130, 113, 249, 301, -48, -47, -61,
	197, 228, 203, 219, 304, 8, 7, 7, 5, -194,
	-238, -49, -48, -47, -164, -64, -65, -128, -127, -206,
	-207, -204, 128, 258, 103, -25, 98, 30, -74, 176,
	167, 285, 98, -116, 211, 212, 304, -40, 31, 88,
	300, 304, 301, -129, -166, -79, -162, -164, -35, -163,
	300, -171, -171, -82, 244, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, 150, 125, 224,
	35, 126, -136, 247, -136, -136, -136, -136, 169, 167,
	252, 102, 259, 89, 173, -246, 238, 32, -142, -35,
	300, -194, -148, 211, 300, 301, 304, -84, -147, 299,
	-144, -84, 301, 301, -84, 269, 22, 89, 293, -107,
	7, -155, -154, 272, -225, 105, 118, 300, 301, 301,
	-136, -136, -101, -188, 4, 278, 159, 81, 122, 158,
	216, -102, -136, -103, -137, -138, 291, 292, 297, 300,
	211, -104, -136, -84, -136, 42, 146, 248, -105, -136,
	113, -84, -136, -136, -136, -84, -84, -84, 300, 7,
	7, 244, 244, 7, -129, 301, -156, -41, -56, -49,
	-49, 167, -127, 123, -171, -49, 300, 300, 143, 143,
	-49, -49, 123, -49, 123, -49, -49, -42, 202, 300,
	300, -49, 202, -49, 233, 113, -56, -136, -96, 206,
	-136, -96, -119, 176, -80, 267, -49, 206, -78, 304,
	113, 285, -80, -44, -44, -44, -164, -171, 298, 298,
	7, 247, 247, 247, 247, 300, -136, -238, -57, -238,
	-47, 256, 59, 197, -198, -107, 304, 301, 304, -50,
	128, -50, -82, -25, 301, -56, 98, 5, -49, -160,
	-17, -49, -93, 118, -168, 304, 282, 67, -100, 142,
	162, 114, 148, 208, 131, -133, 305, -159, -158, 30,
	-49, -35, -163, -162, 279, -136, -136, 247, -246, 238,
	-142, -136, 169, 252, 102, 259, 89, 173, 113, 300,
	-137, -137, -84, 300, -84, -136, 299, 299, 304, 301,
	-71, 304, -70, -136, -84, -84, 301, 301, -153, -154,
	93, -136, -230, 183, 300, 300, -136, 30, 304, 301,
	113, 301, -109, 189, 301, 10, 11, 291, 292, 293,
	294, 108, 295, 288, 289, 290, 287, 283, 284, 285,
	60, 156, 213, 13, 14, 15, 140, 126, -137, -137,
	-137, -84, 300, 301, -140, -141, 113, 110, 30, -105,
	-105, -105, 301, 113, -84, 304, 304, 304, 301, 301,
	301, 7, 301, 304, 301, 279, 279, 301, -93, 247,
	247, 98, 167, -208, -205, -136, -74, 300, 300, -39,
	92, 222, -112, 98, -44, 98, -44, 247, -111, 62,
	-84, -84, 247, 233, 299, -86, 206, 61, 301, -86,
	-129, -88, -79, -156, 301, 299, 7, 7, 301, 159,
	122, 158, -108, 158, -108, -108, 7, -49, -66, 127,
	-128, 300, -50, 300, 300, 30, 300, -49, -46, 301,
	-143, 120, 43, -162, 173, 142, 142, -162, -100, 142,
	-98, 182, -98, -98, -159, -194, 306, -49, 300, 301,
	-136, -136, -137, -137, 113, 300, -136, -145, 26, 26,
	301, -84, 301, 304, 301, -144, 301, 269, -71, -71,
	-71, 5, 95, -136, 243, -231, -49, 300, 273, -70,
	301, -171, -171, -136, -140, -136, -171, -171, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, 89, 167, 173,
	-137, 304, -84, 301, -141, -140, -136, -136, -171, 301,
	301, 301, -84, -136, -136, -136, 301, 7, -143, -49,
	-49, -127, 98, -209, 62, -210, 54, 103, 66, 167,
	169, 258, 194, 52, 84, 201, 301, 301, -74, -74,
	167, 84, 167, 84, 77, 254, -49, -49, -56, -49,
	-49, 301, 301, -49, -86, -118, 300, 176, -25, -96,
	285, 299, 299, 301, 126, -73, -161, -49, -219, 300,
	-216, -217, -54, 300, -74, -64, -25, -73, 176, -227,
	274, -136, -84, 239, -162, -162, -99, 263, 176, 142,
	-162, -135, -134, 111, 165, 300, -74, -158, 26, 26,
	-136, -145, 301, -136, -136, 301, -136, 5, -136, 301,
	301, 301, -136, -232, -49, -136, 301, 301, 301, -141,
	113, 89, 173, 300, -136, 301, 301, 304, 301, 301,
	301, -227, -127, -49, -82, -49, 103, 123, 169, 143,
	300, -137, -56, -126, -243, 65, 236, 301, 301, 169,
	169, -136, -171, -44, -44, 247, 247, 90, -74, 62,
	-92, -35, 300, 186, 301, 304, -55, -90, 54, -55,
	-136, 300, -73, 301, 301, 301, -56, -228, -229, -49,
	244, -99, 300, -136, -162, 304, 307, 285, -74, 301,
	-136, -136, 301, 301, -71, -226, 188, 301, -137, 113,
	300, -145, 301, -136, -210, -50, 167, -136, -51, 300,
	-66, 300, 201, -43, 54, -49, -49, 260, 168, 301,
	-49, -49, -126, -161, -40, -82, -40, 301, -84, 301,
	-66, -126, 300, 304, 30, 5, -74, -134, -194, 301,
	301, -71, 43, -137, -145, 301, 301, 98, 301, -213,
	157, -49, -74, -56, -38, 263, -82, 222, -129, 300,
	-66, -55, -71, -126, -66, -73, -229, -231, 301, -233,
	196, 212, -84, 301, 103, -211, -214, -212, 176, 114,
	187, 225, 301, 301, -69, -136, -87, -74, -40, 301,
	-66, 301, 301, -234, -235, 35, 255, 69, -136, -234,
	-49, -212, 176, -214, 176, 260, 87, -213, -129, 301,
	-126, -235, 191, 109, 211, 191, 109, -215, 164, 205,
	46, 222, -215, -211, -45, 46, 205, -66, 26, 20,
	169, 84, -235,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 58, 59,
	60, 61, 62, 0, 0, 370, 0, 0, 0, 0,
	0, 0, 344, -2, 0, 127, 0, 300, 0, 300,
	300, 304, 0, 372, 268, 369, -2, 380, 0, 0,
	0, 378, 358, 0, 0, -2, 0, 0, 0, 0,
	773, 800, 801, 802, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 80, 81, 82, 83, 84,
	85, 86, 87, 0, 93, 100, 101, 883, 103, 0,
	110, 111, 112, 114, 115, 116, 117, 118, 119, 120,
	0, 293, 897, 306, 123, 862, 901, 967, 915, 130,
	140, 0, 973, -2, 144, 74, 173, 174, 0, 176,
	191, 0, 0, 0, 0, 0, 184, 0, 0, 188,
	0, 311, 299, 311, 296, 297, 298, 301, 0, 292,
	0, 371, 0, 0, 0, 0, 267, -2, 354, 355,
	-2, 0, 375, 375, 375, 0, 0, 355, 0, 363,
	887, 366, 783, 364, 0, 0, 377, 376, 0, 359,
	439, 0, 400, 0, 2, 0, 952, 439, 0, 952,
	0, 0, 0, 0, 774, 752, 746, 747, 0, 0,
	0, 0, 0, 0, 445, 64, 952, 50, 952, 769,
	50, 952, 72, 50, 952, 0, 88, 90, 810, 811,
	812, 813, 978, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 0, 0, 0,
	98, 0, 102, 104, 0, 0, 0, 305, 124, 942,
	126, 0, 129, 131, 132, 0, 0, 0, 0, 0,
	0, 143, 168, 169, 75, 0, 0, 193, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 187, 0, 294,
	307, 308, 295, 0, 303, 50, 443, 0, 952, 243,
	804, 316, 952, -2, 0, 350, 387, 388, 0, 0,
	0, 373, 374, 0, 0, 0, 346, 347, 0, 365,
	0, 0, 403, 761, 765, 766, 532, 0, 0, 0,
	0, 0, 0, 621, 622, 623, 0, 625, 626, 627,
	947, 0, 631, 632, 967, 773, 786, 787, 788, 789,
	0, 0, 0, 794, 795, 796, 745, 671, 641, -2,
	-2, 784, 469, 470, 471, 472, -2, 980, 645, 647,
	649, 650, 651, 652, 0, 931, 948, 963, 964, 972,
	976, 977, 952, 960, 953, 943, 950, 959, 843, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	809, 494, 495, 500, 501, 503, 403, 401, 440, 441,
	0, 0, 758, 756, 757, 27, 289, 29, 0, 289,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 767, 753, 0, 750, 751, 814, 815, 816,
	817, 818, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 449, 0, 322, 0, 0, 446, 0, 0,
	66, 0, 48, 49, 0, 68, 0, 0, 70, 0,
	370, 0, 0, 952, 370, 0, 705, 455, 456, 457,
	458, 459, 529, 462, 463, 464, 465, 466, 467, 468,
	476, 477, 478, 479, 480, 481, 482, 491, 0, 475,
	475, 475, 488, 489, 492, 493, 498, 499, 510, 511,
	513, 515, 509, 509, 509, 506, 507, 0, 703, 0,
	107, 0, 838, 771, 776, 777, 113, 0, 0, 0,
	0, 0, 0, 135, 155, 156, 157, 136, 138, 145,
	147, 148, 149, 158, 159, 160, 161, 260, 0, 262,
	171, 172, 797, 0, 137, 139, 141, 142, 162, 163,
	0, 165, 166, 167, 0, 76, 175, 177, 0, 190,
	178, 179, 180, 181, 182, 183, 186, 189, 0, 0,
	302, 263, 0, 201, 0, 0, 0, 0, 0, 952,
	803, 313, 0, 0, 353, 385, 386, 389, 392, 393,
	390, 532, 360, 361, 362, 381, 382, 278, 367, 0,
	0, 780, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 755,
	0, 0, 764, 537, 538, 539, 561, 562, 0, -2,
	703, 0, 628, 629, 630, 0, 0, -2, 0, 791,
	529, 0, 0, 744, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 730, 0, 0, 0, 0, 0,
	0, 0, 0, 484, 497, 508, 505, 504, 486, 0,
	485, 483, 0, 487, 0, 0, 0, 449, 0, 0,
	760, 0, 0, 0, 0, 288, 31, 952, 0, 41,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 775, 0, 0,
	0, 0, 748, 0, 333, 0, 333, 324, 0, 0,
	0, 320, 336, 337, 339, 340, 0, 0, 447, 65,
	770, 50, 73, 50, 50, 79, 89, 0, 91, 94,
	95, 96, 97, 92, 0, 450, 452, 460, 0, 516,
	517, 518, 519, 520, 521, 530, 99, 0, 0, 0,
	108, 109, 778, 779, 0, 0, 128, 133, 134, 312,
	0, 152, 0, 154, 0, 261, 799, 798, 529, 77,
	192, 121, 309, 310, 444, 0, 200, 202, 204, 205,
	206, 207, 804, 0, 804, 198, 0, 0, 0, 0,
	0, 0, 0, 391, 394, 395, 0, 384, 276, 277,
	370, 0, 782, 397, 762, 430, 404, 412, 428, 415,
	0, 533, 534, 535, 0, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, -2, -2, -2, 553, 554,
	555, -2, -2, -2, 559, 560, -2, 0, 0, 0,
	755, 0, -2, 0, 569, -2, -2, -2, 573, 0,
	576, 578, 580, 0, 0, 0, 0, 754, 590, 736,
	0, 763, 575, 0, 0, 624, 0, 0, 0, 709,
	710, 0, -2, 633, 380, 0, 0, 0, 0, 792,
	0, 743, 739, 0, 681, 0, 0, 0, 646, 648,
	0, 0, 0, 0, 713, 714, 715, 716, 717, 718,
	719, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	967, 0, 703, 729, 0, 0, 0, 0, 0, 703,
	0, 735, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 397, 442, 759, 30, 280, 0,
	0, 0, 33, 952, 215, 0, 0, 0, 0, 0,
	291, 42, 952, 50, 952, 50, 43, 28, 289, 0,
	0, 282, 0, 279, 56, 0, 768, 0, 63, 0,
	448, 317, 318, 0, 0, 326, 323, 0, 449, 0,
	0, 0, 0, 67, 69, 71, 0, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 105, 772, 106,
	125, 150, 151, 153, 146, 164, 0, 209, 0, 0,
	804, 0, 0, 264, 242, 0, 0, 315, 316, 383,
	0, 781, 399, 0, 402, 0, 0, 0, 0, 0,
	0, 436, 436, 436, 434, 428, 0, 414, 427, 0,
	426, -2, 415, 0, 0, -2, -2, 0, 0, 0,
	591, -2, 574, 577, 579, 581, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 704, 707, 708, 0, -2,
	0, 0, 379, 380, 380, 380, 639, 0, 0, 740,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 655,
	0, 656, 0, 0, 657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 596,
	597, 0, 0, 658, 727, 728, 0, 0, 0, 0,
	0, 0, 663, 0, 734, 0, 0, 0, 667, 668,
	669, 0, 473, 0, 490, 512, 514, 502, 399, 0,
	0, 0, 0, 213, 232, 0, 0, 0, 0, 35,
	0, 0, 0, 0, 39, 0, 45, 0, 0, 0,
	0, 0, 0, 57, 749, 332, 0, 331, 0, 321,
	333, 338, 335, 341, 0, 453, 0, 0, 461, 522,
	523, 524, 525, 526, 527, 528, 0, 122, 196, 0,
	203, 0, 0, 0, 201, 0, 0, 0, 314, 368,
	675, 0, 0, 405, 0, 0, 0, 0, 0, 0,
	431, 435, 432, 433, 413, 410, 0, 424, 0, 417,
	536, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	737, 0, 698, 0, -2, 711, 634, 0, 0, 0,
	0, 793, 738, 742, 0, 679, 680, 684, 0, 0,
	644, 0, 0, 712, 721, 722, 593, 594, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, -2, -2,
	-2, 611, 612, 613, -2, -2, -2, 0, 0, 0,
	723, 0, 0, 701, 725, 726, 731, 732, 0, 660,
	661, 662, 733, 0, 0, 0, 496, 0, 675, 284,
	286, 32, 0, 214, 0, 217, 0, 0, 0, 0,
	223, 224, 0, 0, 0, 0, 234, 241, 0, 0,
	0, 47, 0, 0, 290, 0, 50, 50, 281, 0,
	0, 194, 195, 283, 319, 0, 0, 0, 325, 334,
	0, 454, 451, 531, 0, 0, 269, 275, 275, 0,
	642, 643, 0, 0, 0, 0, 199, 0, 0, 356,
	0, 398, 396, 0, 418, 0, 420, 0, 0, 0,
	422, 0, 408, 0, 407, 0, 0, 416, 0, 0,
	-2, 0, 584, -2, -2, 697, 704, 790, 380, 635,
	637, 638, 741, 686, 683, 0, 670, 653, 654, 720,
	0, 0, 0, 0, 704, 700, 659, 0, 665, 666,
	474, 357, 34, 0, 218, 219, 804, 0, 222, 225,
	0, 227, 806, 209, 0, 238, 239, 236, 0, 36,
	37, 46, 52, 38, 44, 0, 0, 0, 0, 0,
	342, 343, 0, 0, 241, 0, 278, 785, 0, 278,
	0, 0, 0, 231, 209, 241, 0, 674, 676, 0,
	0, 419, 0, 438, 421, 0, 411, 0, 0, 425,
	-2, -2, 585, 699, 0, 380, 0, 672, -2, 0,
	0, 0, 702, 0, 216, 220, 0, 0, 247, 0,
	235, 0, 0, 54, 0, 285, 287, 0, 328, 449,
	330, 0, 209, 270, 271, 274, 272, 275, 380, 241,
	197, 209, 0, 0, 0, 429, 0, 409, 406, 423,
	636, 689, 0, -2, 0, 619, 664, 0, 226, 252,
	0, 0, 0, 243, 40, 0, 51, 0, 329, 0,
	229, 278, 0, 209, 265, 0, 677, 678, 437, 0,
	0, 0, 685, 620, 0, 228, 248, 249, 0, 244,
	245, 246, 805, 240, 247, 53, 449, 0, 273, 634,
	230, 241, 682, 687, 690, -2, 918, 835, 0, 688,
	221, 250, 0, 251, 0, 0, 0, 252, 327, 212,
	209, 0, 692, 693, 694, 695, 696, 253, 0, 256,
	257, 0, 254, 237, 208, 210, 211, 266, 0, 255,
	258, 259, 691,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 289, 3, 295, 290, 3,
	300, 301, 293, 291, 304, 292, 302, 294, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 308, 303,
	283, 285, 284, 3, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 298, 3, 299, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 306, 287, 307, 297,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 286, 57626, 296, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:723
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:729
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:735
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:826
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:844
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			unimplementedWithIssue(2473)
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:899
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			unimplemented()
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:903
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1029
		{ /* SKIP DOC */
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{ /* SKIP DOC */
		}
	case 128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			unimplemented()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			unimplemented()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = Low
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = Normal
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = High
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			unimplemented()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			unimplemented()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1410
		{
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = DropDefault
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1802
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1804
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1815
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1818
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &CreateView{
				Name:     sqlDollar[3].union.normalizableTableName(),
				ToCols:   sqlDollar[4].union.nameList(),
				AsSource: sqlDollar[6].union.slct(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = true
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = false
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1919
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1922
		{
			unimplemented()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1923
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = Ascending
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = Descending
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = true
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = false
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1990
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2033
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.str = ""
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.str = ""
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2127
		{
			unimplementedWithIssue(6637)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2134
		{
			unimplementedWithIssue(6637)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2176
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			unimplemented()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2205
		{
			unimplementedWithIssue(7841)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2206
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2438
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2442
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2445
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2446
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2450
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = true
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = false
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = false
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = true
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2474
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2512
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2532
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &From{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.str = astFullJoin
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.str = astLeftJoin
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.str = astRightJoin
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.str = astInnerJoin
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2819
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			unimplementedWithIssue(2115)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2910
		{
			unimplementedWithIssue(2115)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			unimplementedWithIssue(2115)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2914
		{
			unimplementedWithIssue(2115)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2923
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2979
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = nil
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3100
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3172
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3207
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3252
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3663
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3664
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3687
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3707
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3752
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3796
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3797
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3800
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3801
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = Window(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.str = ""
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			unimplemented()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3890
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3893
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3894
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3901
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3902
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3904
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4233
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4389
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4425
		{
			unimplemented()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = DNull
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
