// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Radu Berinde (radu@cockroachlabs.com)
//
// Data structures and basic infrastructure for distributed SQL APIs. See
// docs/RFCS/distributed_sql.md.
// All the concepts here are "physical plan" concepts.

syntax = "proto2";
package cockroach.sql.distsql;
option go_package = "distsql";

import "cockroach/roachpb/data.proto";
import "cockroach/roachpb/errors.proto";
import "cockroach/sql/sqlbase/structured.proto";
import "cockroach/sql/sqlbase/encoded_datum.proto";
import "gogoproto/gogo.proto";

message Expression {
  // TODO(radu): TBD how this will be used
  optional string version = 1 [(gogoproto.nullable) = false];

  // SQL expressions are passed as a string, with Placeholders ($1, $2 ..) used for
  // "input" variables.
  optional string expr = 2 [(gogoproto.nullable) = false];
}

// Ordering defines an order - specifically a list of column indices and
// directions. See sqlbase.ColumnOrdering.
message Ordering {
  message Column {
    // The direction of the desired ordering for a column.
    enum Direction {
      ASC = 0;
      DESC = 1;
    }
    optional uint32 col_idx = 1 [(gogoproto.nullable) = false];
    optional Direction direction = 2 [(gogoproto.nullable) = false];
  }
  repeated Column columns = 1 [(gogoproto.nullable) = false];
}

// A mailbox is where a stream "crosses" hosts - it is an endpoint of a local
// stream which receives data from or sends to a remote host.
message MailboxSpec {
  // If set, we are in a special "simple flow" mode. In this mode, we return
  // results directly as part of the RPC call that set up the flow. This saves
  // overhead (extra RPCs) compared to the normal mode where the RPC just sets
  // up the flow. In this mode there are no remote endpoints so this must be the
  // only mailbox in that flow.
  optional bool simple_response = 1 [(gogoproto.nullable) = false];

  // The ID used to refer to this mailbox in a StreamHeader.
  optional int32 stream_id = 2 [(gogoproto.nullable) = false,
                                (gogoproto.customname) = "StreamID",
                                (gogoproto.casttype) = "StreamID"];

  // Serving address for the target host, used for outgoing mailboxes.
  optional string target_addr = 3 [(gogoproto.nullable) = false];
}

// StreamEndpointSpec describes one of the endpoints (input or output) of a physical
// stream.
message StreamEndpointSpec {
  // If set, both ends of the stream are part of the flow on this machine. There
  // will be a corresponding endpoint with the same local stream ID. Can only be
  // set if mailbox is not set.
  optional int32 local_stream_id = 1 [(gogoproto.nullable) = false,
                                      (gogoproto.customname) = "LocalStreamID",
                                      (gogoproto.casttype) = "LocalStreamID"];
  // If set, the stream crosses flows; the endpoint is a mailbox.
  optional MailboxSpec mailbox = 2;
}

// InputSyncSpec is the specification for an input synchronizer; it decides how
// to interleave rows from multiple input streams.
message InputSyncSpec {
  enum Type {
    // Rows from the input streams are interleaved arbitrarily.
    UNORDERED = 0;
    // The input streams are guaranteed to be ordered according to the column
    // ordering field; rows from the streams are interleaved to preserve that
    // ordering.
    ORDERED = 1;
  }
  optional Type type = 1 [(gogoproto.nullable) = false];
  optional Ordering ordering = 2 [(gogoproto.nullable) = false];
  repeated StreamEndpointSpec streams = 3 [(gogoproto.nullable) = false];
}

// OutputRouterSpec is the specification for the output router of a processor;
// it decides how to send results to multiple output streams.
message OutputRouterSpec {
  enum Type {
    // Each row is sent to all output streams (also used if there is a
    // single output stream).
    MIRROR = 0;
    // Each row is sent to one stream, chosen by hashing certain columns of
    // the row (specified by the hash_columns field).
    BY_HASH = 1;
    // Each row is sent to one stream, chosen according to preset boundaries
    // for the values of certain columns of the row. TODO(radu): an extra
    // optional structure below for the range details.
    BY_RANGE = 2;
  }
  optional Type type = 1 [(gogoproto.nullable) = false];
  repeated StreamEndpointSpec streams = 2 [(gogoproto.nullable) = false];

  // Only used for the BY_HASH type; these are the indexes of the columns we are
  // hashing.
  repeated uint32 hash_columns = 3;
}

message DatumInfo {
  optional sqlbase.DatumEncoding encoding = 1 [(gogoproto.nullable) = false];
  optional sqlbase.ColumnType.Kind type = 2 [(gogoproto.nullable) = false];
}

// StreamHeader is a message that is sent once at the beginning of a stream.
message StreamHeader {
  optional bytes flow_id = 1 [(gogoproto.nullable) = false,
                              (gogoproto.customname) = "FlowID",
                              (gogoproto.customtype) = "FlowID"];

  optional int32 stream_id = 2 [(gogoproto.nullable) = false,
                                (gogoproto.customname) = "StreamID",
                                (gogoproto.casttype) = "StreamID"];

  // There is one DatumInfo for each element in a row.
  repeated DatumInfo info = 3 [(gogoproto.nullable) = false];
}

// StreamData is a message that can be sent multiple times as part of a stream.
message StreamData {
  // Encodes one or more data rows. Each datum is encoded according to the
  // corresponding DatumInfo.
  optional bytes raw_bytes = 1;
}

// StreamTrailer is a message that is sent once at the end of a stream.
message StreamTrailer {
  optional roachpb.Error error = 1;
}

message StreamMessage {
  // Header is present in the first message.
  optional StreamHeader header = 1;
  // Data is present in all messages except possibly the first and last.
  optional StreamData data = 2 [(gogoproto.nullable) = false];
  // Trailer is present in the last message.
  optional StreamTrailer trailer = 3;
}
