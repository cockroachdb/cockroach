// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Radu Berinde (radu@cockroachlabs.com)
//
// Data structures for distributed SQL APIs. See docs/RFCS/distributed_sql.md.
// All the concepts here are "physical plan" concepts.

syntax = "proto2";
package cockroach.sql.distsql;
option go_package = "distsql";

import "cockroach/roachpb/data.proto";
import "cockroach/sql/sqlbase/structured.proto";
import weak "gogoproto/gogo.proto";

message Expression {
  // TODO(radu): TBD how this will be used
  optional string version = 1 [(gogoproto.nullable) = false];

  // SQL expressions are passed as a string, with ValArgs ($0, $1, ..) used for
  // "input" variables.
  optional string expr = 2 [(gogoproto.nullable) = false];
}

message TableReaderSpan {
  // TODO(radu): the dist_sql APIs should be agnostic to how we map tables to
  // KVs. The span should be described as starting and ending lists of values
  // for a prefix of the index columns, along with inclusive/exclusive flags.
  optional roachpb.Span span = 1 [(gogoproto.nullable) = false];
  // TODO(radu): support the single-key optimization (span.count)
}

// TableReaderSpec is the specification for a table reader. A table reader
// performs KV operations to retrieve rows for a table and outputs the desired
// columns of the rows that pass a filter expression.
message TableReaderSpec {
  optional sqlbase.TableDescriptor table = 1 [(gogoproto.nullable) = false];
  // If 0, we use the primary index. If non-zero, we use the index_idx-th index,
  // i.e. table.indexes[index_idx-1]
  optional uint32 index_idx = 2 [(gogoproto.nullable) = false];
  optional bool reverse = 3 [(gogoproto.nullable) = false];
  repeated TableReaderSpan spans = 4 [(gogoproto.nullable) = false];

  // The filter expression references the columns in the table (table.columns)
  // via $0, $1, etc. If a secondary index is used, the columns that are not
  // available as part of the index cannot be referenced.
  optional Expression filter = 5 [(gogoproto.nullable) = false];

  // The table reader will only produce values for these columns, referenced by
  // their indices in table.columns.
  repeated uint32 output_columns = 6 [packed = true];
}


// StreamEndpointSpec describes one of the endpoints (input or output) of a physical
// stream.
message StreamEndpointSpec {
  enum Type {
    // The ending is part of the same flow.
    LOCAL = 0;
    // The stream crosses flows; the ending is a mailbox.
    REMOTE = 1;
    // This is a special mode used for simple flows with few expected
    // results. In this "sync RPC" mode, we accumulate results and return
    // them as part of the RPC call that set up the flow. This saves
    // overhead (extra RPCs) compared to the normal "async" mode where the
    // RPC just sets up the flow. There can be at most one such endpoint in
    // one flow, and such a flow cannot have any REMOTE endpoints (i.e. all
    // other endpoints must be LOCAL).
    RPC_SYNC_RESP = 2;
  }
  optional Type type = 1 [(gogoproto.nullable) = false];

  // For the LOCAL type, this is the ID of the corresponding endpoint within
  // the same flow. For the REMOTE type, this is the ID of a mailbox.
  optional int32 id = 2 [(gogoproto.nullable) = false,
                         (gogoproto.customname) = "ID"];
}

// OutputRouterSpec is the specification for the output router of a processor;
// it decides how to send results to multiple output streams.
message OutputRouterSpec {
  enum Type {
    // Each row is sent to all output streams (also used if there is a
    // single output stream).
    MIRROR = 0;
    // Each row is sent to one stream, chosen by hashing certain columns of
    // the row. TODO(radu): an extra optional structure below for the hashing
    // details.
    BY_HASH = 1;
    // Each row is sent to one stream, chosen according to preset boundaries
    // for the values of certain columns of the row. TODO(radu): an extra
    // optional structure below for the range details.
    BY_RANGE = 2;
  }
  optional Type type = 1 [(gogoproto.nullable) = false];
  repeated StreamEndpointSpec streams = 2 [(gogoproto.nullable) = false];
}

message ProcessorCoreUnion {
  option (gogoproto.onlyone) = true;

  optional TableReaderSpec tableReader = 1;
  // TODO(radu): other "processor core" types will go here.
}

message ProcessorSpec {
  optional ProcessorCoreUnion core = 1 [(gogoproto.nullable) = false];

  // In most cases, there is one output.
  repeated OutputRouterSpec output = 2 [(gogoproto.nullable) = false];
}

// FlowSpec describes a "flow" which is a subgraph of a distributed SQL
// computation consisting of processors and streams.
message FlowSpec {
  repeated ProcessorSpec processors = 1 [(gogoproto.nullable) = false];
  // TODO(radu): mailbox specs will go here.
}
