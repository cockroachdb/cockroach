// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Vivek Menezes (vivek@cockroachlabs.com)

syntax = "proto2";
package cockroach.sql.driver;
option go_package = "driver";

import weak "gogoproto/gogo.proto";

message Datum {
  // Timestamp represents an absolute timestamp devoid of time-zone.
  message Timestamp {
    // The time in seconds since, January 1, 1970 UTC (Unix time).
    optional int64 sec = 1 [(gogoproto.nullable) = false];
    // nsec specifies a non-negative nanosecond offset within sec.
    // It must be in the range [0, 999999999].
    optional uint32 nsec = 2 [(gogoproto.nullable) = false];
  }

  // Using explicit proto types provides convenient access when using json. If
  // we used a Kind+Bytes approach the json interface would involve base64
  // encoded data.
  oneof payload {
    bool bool_val = 1;
    int64 int_val = 2;
    double float_val = 3;
    bytes bytes_val = 4;
    string string_val = 5;
    int64 date_val = 6;
    Timestamp time_val = 7;
    int64 interval_val = 8;
    string decimal_val = 9;
  }

  // TODO(pmattis): How to add end-to-end checksumming? Just adding a checksum
  // field here is insufficient because we won't be storing the data above
  // directly in the database.
}

// An SQL request to cockroach. A transaction can consist of multiple
// requests.
message Request {
  // User is the originating user.
  optional string user = 1 [(gogoproto.nullable) = false];
  // Session settings that were returned in the last response that
  // contained them, being reflected back to the server.
  optional bytes session = 2;
  // SQL statement(s) to be serially executed by the server. Multiple
  // statements are passed as a single string separated by semicolons.
  optional string sql = 3 [(gogoproto.nullable) = false];
  // Parameters referred to in the above SQL statement(s) using "?".
  repeated Datum params = 4 [(gogoproto.nullable) = false];
}

message Response {
  // Result corresponds to the execution of a single SQL statement.
  message Result {
    // DDL is an empty message that is used in Result's oneof. Its
    // presence indicates that the operation was a DDL statement.
    message DDL {}

    // Rows encapsulates the result of an operation that returns rows.
    message Rows {
      // A Row is a collection of values representing a row in a result.
      message Row {
        repeated Datum values = 1 [(gogoproto.nullable) = false];
      }

      // A Column contains the name and type of a SQL "cell".
      message Column {
        optional string name = 1 [(gogoproto.nullable) = false];
        optional Datum typ = 2 [(gogoproto.nullable) = false];
      }

      // The names and types of the columns returned in the result set
      // in the order specified in the SQL statement. The number of
      // columns will equal the number of values in each Row.
      repeated Column columns = 1;
      // The rows in the result set.
      repeated Row rows = 2 [(gogoproto.nullable) = false];
    }

    // Error is non-nil if an error occurred while executing the statement.
    optional string error = 1;

    oneof union {
      DDL ddl = 2 [(gogoproto.customname) = "DDL"];
      uint32 rows_affected = 3;
      Rows rows = 4;
    }
  }

  // Setting that should be reflected back in all subsequent requests.
  // When not set, future requests should continue to use existing settings.
  optional bytes session = 1;
  // The list of results. There is one result object per SQL statement in the
  // request.
  repeated Result results = 2 [(gogoproto.nullable) = false];
}
