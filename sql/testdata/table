statement ok
SET DATABASE = ""

statement error no database specified
CREATE TABLE a (id INT PRIMARY KEY)

statement error empty table name
CREATE TABLE test."" (id INT PRIMARY KEY)

statement ok
CREATE TABLE test.a (id INT PRIMARY KEY)

statement error table "a" already exists
CREATE TABLE test.a (id INT PRIMARY KEY)

statement ok
SET DATABASE = test

statement error empty table name
CREATE TABLE "" (id INT PRIMARY KEY)

statement error table "a" already exists
CREATE TABLE a (id INT PRIMARY KEY)

statement error duplicate column name: "id"
CREATE TABLE b (id INT PRIMARY KEY, id INT)

statement error multiple primary keys for table "b" are not allowed
CREATE TABLE b (id INT PRIMARY KEY, id2 INT PRIMARY KEY)

statement ok
CREATE TABLE IF NOT EXISTS a (id INT PRIMARY KEY)

query T colnames
SHOW TABLES FROM test
----
Table
a

statement ok
CREATE TABLE b (id INT PRIMARY KEY)

statement ok
CREATE TABLE c (
  id INT PRIMARY KEY,
  foo INT,
  bar INT,
  INDEX c_foo_idx (foo),
  INDEX (foo),
  INDEX c_foo_bar_idx (foo ASC, bar DESC),
  UNIQUE (bar)
)

query TTBITTB colnames
SHOW INDEXES FROM c
----
Table Name           Unique Seq Column Direction  Storing
c     primary        true   1   id     ASC        false
c     c_foo_idx      false  1   foo    ASC        false
c     c_foo_idx1     false  1   foo    ASC        false
c     c_foo_bar_idx  false  1   foo    ASC        false
c     c_foo_bar_idx  false  2   bar    DESC       false
c     c_bar_key      true   1   bar    ASC        false

# primary keys can never be null

statement ok
CREATE TABLE d (
  id    INT PRIMARY KEY NULL
)

query TTBT colnames
SHOW COLUMNS FROM d
----
Field Type   Null  Default
id    INT    false  NULL

statement ok
CREATE TABLE e (
  id    INT NULL PRIMARY KEY
)

query TTBT colnames
SHOW COLUMNS FROM e
----
Field Type   Null  Default
id    INT    false  NULL

statement ok
CREATE TABLE f (
  a INT,
  b INT,
  c INT,
  PRIMARY KEY (a, b, c)
)

query TTBT colnames
SHOW COLUMNS FROM f
----
Field Type   Null  Default
a     INT   false  NULL
b     INT   false  NULL
c     INT   false  NULL

query T
SHOW TABLES FROM test
----
a
b
c
d
e
f

statement ok
SET DATABASE = ""

query error no database specified
SHOW COLUMNS FROM users

query error database "foo" does not exist
SHOW COLUMNS FROM foo.users

query error table "test.users" does not exist
SHOW COLUMNS FROM test.users

query error no database specified
SHOW INDEXES FROM users

query error database "foo" does not exist
SHOW INDEXES FROM foo.users

query error table "test.users" does not exist
SHOW INDEXES FROM test.users

statement ok
CREATE TABLE test.users (
  id        INT PRIMARY KEY,
  name      VARCHAR NOT NULL,
  title     VARCHAR,
  nickname  STRING CHECK (LENGTH(nickname) < 10),
  username  STRING(10),
  email     VARCHAR(100) NULL,
  INDEX foo (name),
  CHECK (LENGTH(nickname) < LENGTH(name)),
  UNIQUE INDEX bar (id, name)
)

query TTBT colnames
SHOW COLUMNS FROM test.users
----
Field       Type        Null    Default
id          INT         false   NULL
name        STRING      false   NULL
title       STRING      true    NULL
nickname    STRING      true    NULL
username    STRING(10)  true    NULL
email       STRING(100) true    NULL

query TTBITTB colnames
SHOW INDEXES FROM test.users
----
Table Name    Unique Seq Column Direction Storing
users primary true   1   id     ASC       false
users foo     false  1   name   ASC       false
users bar     true   1   id     ASC       false
users bar     true   2   name   ASC       false

statement error invalid NUMERIC precision 0
CREATE TABLE test.d (x DECIMAL(0, 2))

statement error NUMERIC scale 4 must be between 0 and precision 2
CREATE TABLE test.d (x DECIMAL(2, 4))

query TT
SHOW CREATE TABLE test.users
----
test.users CREATE TABLE "test.users"
(
  id        INT NOT NULL,
  name      STRING NOT NULL,
  title     STRING NULL,
  nickname  STRING NULL,
  username  STRING(10) NULL,
  email     STRING(100)  NULL,
  CONSTRAINT "primary" PRIMARY KEY (id),
  INDEX foo (name),
  UNIQUE INDEX bar (id, name),
  FAMILY "primary" (id, name),
  FAMILY fam_1_title (title),
  FAMILY fam_2_nickname (nickname),
  FAMILY fam_3_username_email (username, email),
  CHECK (LENGTH(nickname) < LENGTH(name)),
  CHECK (LENGTH(nickname) < 10)
)

statement ok
CREATE TABLE test.named_constraints (
  id        INT CONSTRAINT pk PRIMARY KEY,
  name      VARCHAR CONSTRAINT notnull NOT NULL,
  title     VARCHAR  CONSTRAINT def DEFAULT 'VP of Something',
  nickname  STRING CONSTRAINT ck1 CHECK (LENGTH(nickname) < 10),
  username  STRING(10) CONSTRAINT nl NULL,
  email     VARCHAR(100) CONSTRAINT uq UNIQUE,
  INDEX foo (name),
  CONSTRAINT uq2 UNIQUE (username),
  CONSTRAINT ck2 CHECK (LENGTH(nickname) < LENGTH(name)),
  UNIQUE INDEX bar (id, name)
)

query TT
SHOW CREATE TABLE test.named_constraints
----
test.named_constraints  CREATE TABLE "test.named_constraints" (
                        id INT NOT NULL,
                        name STRING CONSTRAINT notnull NOT NULL,
                        title STRING NULL CONSTRAINT def DEFAULT 'VP of Something',
                        nickname STRING NULL,
                        username STRING(10) CONSTRAINT nl NULL,
                        email STRING(100) NULL,
                        CONSTRAINT pk PRIMARY KEY (id),
                        UNIQUE INDEX uq (email),
                        INDEX foo (name),
                        UNIQUE INDEX uq2 (username),
                        UNIQUE INDEX bar (id, name),
                        FAMILY "primary" (id, name),
                        FAMILY fam_1_title (title),
                        FAMILY fam_2_nickname (nickname),
                        FAMILY fam_3_username_email (username, email),
                        CONSTRAINT ck2 CHECK (LENGTH(nickname) < LENGTH(name)),
                        CONSTRAINT ck1 CHECK (LENGTH(nickname) < 10)
                        )

query TTTTT colnames
SHOW CONSTRAINTS FROM test.named_constraints
----
Table              Name     Type         Column(s)   Details
named_constraints  bar      UNIQUE       [id name]   NULL
named_constraints  ck1      CHECK        NULL        LENGTH(nickname) < 10
named_constraints  ck2      CHECK        NULL        LENGTH(nickname) < LENGTH(name)
named_constraints  def      DEFAULT      title       'VP of Something'
named_constraints  nl       NULL         username    NULL
named_constraints  notnull  NOT NULL     name        NULL
named_constraints  pk       PRIMARY KEY  [id]        NULL
named_constraints  uq       UNIQUE       [email]     NULL
named_constraints  uq2      UNIQUE       [username]  NULL

statement error duplicate constraint name: "pk"
CREATE TABLE test.dupe_named_constraints (
  id        INT CONSTRAINT pk PRIMARY KEY,
  title     VARCHAR CONSTRAINT def DEFAULT 'blah',
  name      VARCHAR CONSTRAINT pk NOT NULL
)

statement error duplicate constraint name: "def"
CREATE TABLE test.dupe_named_constraints (
  id        INT CONSTRAINT pk PRIMARY KEY,
  title     VARCHAR CONSTRAINT def DEFAULT 'blah',
  name      VARCHAR CONSTRAINT def NOT NULL
)

statement error duplicate constraint name: "def"
CREATE TABLE test.dupe_named_constraints (
  id        INT CONSTRAINT pk PRIMARY KEY,
  title     VARCHAR CONSTRAINT def DEFAULT 'blah',
  name      VARCHAR CONSTRAINT def CHECK (1>1)
)

statement error duplicate constraint name: "def"
CREATE TABLE test.dupe_named_constraints (
  id        INT CONSTRAINT pk PRIMARY KEY,
  title     VARCHAR CONSTRAINT def DEFAULT 'blah',
  name      VARCHAR CONSTRAINT def UNIQUE
)


statement error duplicate constraint name: "def"
CREATE TABLE test.dupe_named_constraints (
  id        INT CONSTRAINT pk PRIMARY KEY,
  title     VARCHAR CONSTRAINT def DEFAULT 'blah',
  name      VARCHAR CONSTRAINT def REFERENCES test.named_constraints (username),
  INDEX (name)
)

statement ok
CREATE TABLE test.alltypes (
  a BOOL,
  b INT,
  c INT64,
  d INTEGER,
  e SMALLINT,
  f BIGINT,
  g SERIAL,
  h SMALLSERIAL,
  i BIGSERIAL,
  j BIT,
  k BIT(12),
  l CHAR,
  m CHAR(12),
  n VARCHAR,
  o VARCHAR(12),
  p REAL,
  q FLOAT,
  r DOUBLE PRECISION,
  s DEC,
  t DEC(1),
  u DEC(2,1),
  v DECIMAL,
  w DECIMAL(1),
  x DECIMAL(2,1),
  y NUMERIC,
  z NUMERIC(1),
  aa NUMERIC(2,1),
  ab DATE,
  ac TIMESTAMP,
  ad TIMESTAMP WITH TIME ZONE,
  ae STRING,
  af STRING(12),
  ag TEXT,
  ai BLOB,
  ak BYTES,
  am BYTEA,
  ao INTERVAL
  )

query TTBT colnames
SHOW COLUMNS FROM test.alltypes
----
Field       Type        Null    Default
a      BOOL                      true   NULL
b      INT                       true   NULL
c      INT                       true   NULL
d      INT                       true   NULL
e      INT                       true   NULL
f      INT                       true   NULL
g      INT                       true   unique_rowid()
h      INT                       true   unique_rowid()
i      INT                       true   unique_rowid()
j      BIT(1)                    true   NULL
k      BIT(12)                   true   NULL
l      STRING                    true   NULL
m      STRING(12)                true   NULL
n      STRING                    true   NULL
o      STRING(12)                true   NULL
p      FLOAT                     true   NULL
q      FLOAT                     true   NULL
r      FLOAT                     true   NULL
s      DECIMAL                   true   NULL
t      DECIMAL(1)                true   NULL
u      DECIMAL(2,1)              true   NULL
v      DECIMAL                   true   NULL
w      DECIMAL(1)                true   NULL
x      DECIMAL(2,1)              true   NULL
y      DECIMAL                   true   NULL
z      DECIMAL(1)                true   NULL
aa     DECIMAL(2,1)              true   NULL
ab     DATE                      true   NULL
ac     TIMESTAMP                 true   NULL
ad     TIMESTAMP WITH TIME ZONE  true   NULL
ae     STRING                    true   NULL
af     STRING(12)                true   NULL
ag     STRING                    true   NULL
ai     BYTES                     true   NULL
ak     BYTES                     true   NULL
am     BYTES                     true   NULL
ao     INTERVAL                  true   NULL
rowid  INT                       false  unique_rowid()

statement ok
CREATE DATABASE IF NOT EXISTS smtng;

statement ok
CREATE TABLE IF NOT EXISTS smtng.something (
ID SERIAL PRIMARY KEY
);

statement ok
ALTER TABLE smtng.something ADD COLUMN IF NOT EXISTS OWNER_ID INT;

statement ok
ALTER TABLE smtng.something ADD COLUMN IF NOT EXISTS MODEL_ID INT;

statement ok
ALTER TABLE smtng.something ADD COLUMN IF NOT EXISTS NAME STRING;

statement ok
CREATE DATABASE IF NOT EXISTS smtng;

statement ok
CREATE TABLE IF NOT EXISTS smtng.something (
ID SERIAL PRIMARY KEY
);

statement ok
ALTER TABLE smtng.something ADD COLUMN IF NOT EXISTS OWNER_ID INT;

statement ok
ALTER TABLE smtng.something ADD COLUMN IF NOT EXISTS MODEL_ID INT;

statement ok
ALTER TABLE smtng.something ADD COLUMN IF NOT EXISTS NAME STRING;
