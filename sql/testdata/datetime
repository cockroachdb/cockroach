statement ok
CREATE TABLE t (
  a TIMESTAMP PRIMARY KEY,
  b DATE,
  c INTERVAL,
  UNIQUE (b),
  UNIQUE (c)
)

# TODO(vivek) replace timestamp/date/interval type casting in this file.
statement ok
INSERT INTO t VALUES
  ('2015-08-30 03:34:45.34567'::timestamp, '2015-08-30'::date, '34h2s'::interval),
  ('2015-08-25 04:45:45.53453'::timestamp, '2015-08-25'::date, '2h45m2s234ms'::interval),
  ('2015-08-29 23:10:09.98763'::timestamp, '2015-08-29'::date, '234h45m2s234ms'::interval)

query TTT
SELECT * FROM t WHERE a = '2015-08-25 05:45:45.53453+01:00'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC   2015-08-25   2h45m2.234s

query ITTB
EXPLAIN (DEBUG) SELECT * FROM t WHERE a = '2015-08-25 06:45:45.53453+02:00'::timestamp
----
0 /t/primary/2015-08-25 04:45:45.53453+00:00   NULL        NULL
0 /t/primary/2015-08-25 04:45:45.53453+00:00/b 2015-08-25  NULL
0 /t/primary/2015-08-25 04:45:45.53453+00:00/c 2h45m2.234s true

query ITTB
EXPLAIN (DEBUG) SELECT b FROM t WHERE b < '2015-08-29'::date
----
0 /t/t_b_key/2015-08-25 /2015-08-25 04:45:45.53453+00:00 true

query ITTB
EXPLAIN (DEBUG) SELECT c FROM t WHERE c < '234h45m2s234ms'::interval
----
0 /t/t_c_key/2h45m2.234s /2015-08-25 04:45:45.53453+00:00 true
1 /t/t_c_key/34h0m2s     /2015-08-30 03:34:45.34567+00:00 true

# insert duplicate value with different time zone offset
statement error duplicate key value \(a\)=\(2015-08-30 03:34:45\.34567\+00:00\) violates unique constraint "primary"
INSERT INTO t VALUES
  ('2015-08-29 20:34:45.34567-07:00'::timestamp, '2015-08-31'::date, '35h2s'::interval)

# Check that time/date/interval representations outside of the index are okay.
statement ok
CREATE TABLE u (
  a BIGINT PRIMARY KEY,
  b TIMESTAMP,
  c DATE,
  d INTERVAL
)

# TODO(vivek) replace type casting in this file.
statement ok
INSERT INTO u VALUES
  (123, '2015-08-30 03:34:45.34567'::timestamp, '2015-08-30'::date, '34h2s'::interval),
  (234, '2015-08-25 04:45:45.53453'::timestamp, '2015-08-25'::date, '2h45m2s234ms'::interval),
  (456, '2015-08-29 23:10:09.98763'::timestamp, '2015-08-29'::date, '234h45m2s234ms'::interval)

query TTTT
SELECT * FROM u WHERE a = 234
----
234 2015-08-25 04:45:45.53453 +0000 UTC   2015-08-25   2h45m2.234s

query TTT
SELECT MAX(b), MAX(c), MAX(d) FROM u
----
2015-08-30 03:34:45.34567 +0000 UTC 2015-08-30 234h45m2.234s

query TTT
SELECT MIN(b), MIN(c), MIN(d) FROM u
----
2015-08-25 04:45:45.53453 +0000 UTC 2015-08-25 2h45m2.234s

query BB
SELECT now() < now() + '1m'::interval, now() <= now() + '1m'::interval
----
true true

query BB
SELECT now() + '1m'::interval > now(), now() + '1m'::interval >= now()
----
true true

# TIMESTAMP/DATE builtins.

query T
SELECT age(timestamp '2001-04-10 22:06:45', timestamp '1957-06-13')
----
384190h6m45s

query B
SELECT age(timestamp '1957-06-13') - age(now(), timestamp '1957-06-13') < interval '10s'
----
true

query B
SELECT now() - timestamp '2015-06-13' > interval '100h'
----
true

query B
SELECT now() - current_date()::timestamp < interval '24h10s'
----
true

query B
SELECT current_date - current_date() = 0
----
true

query B
SELECT now() - current_timestamp() = interval '0s'
----
true

query B
SELECT now() - current_timestamp = interval '0s'
----
true

query B
SELECT now() - statement_timestamp() = interval '0s'
----
true

query B
SELECT clock_timestamp() - statement_timestamp() < interval '10s'
----
true

query B
SELECT now() - transaction_timestamp() = interval '0s'
----
true

statement ok
BEGIN TRANSACTION

statement ok
CREATE TABLE kv (
  k CHAR PRIMARY KEY,
  v TIMESTAMP
)

statement ok
INSERT INTO kv (k,v) VALUES ('a', transaction_timestamp())

query I
SELECT k FROM kv
----
a

query I
SELECT k FROM kv where v = transaction_timestamp()
----
a

statement ok
COMMIT TRANSACTION

# Test that the transaction_timestamp can differ from the current_timestamp.
# Check that the transaction_timestamp changes with each transaction.
# We use, SELECT * FROM kv, to insert delays of more than a nonsecond.
statement ok
BEGIN;
INSERT INTO kv (k,v) VALUES ('b', transaction_timestamp());
SELECT * FROM kv;
INSERT INTO kv (k,v) VALUES ('c', transaction_timestamp());
SELECT * FROM kv;
INSERT INTO kv (k,v) VALUES ('d', current_timestamp());
SELECT * FROM KV;
COMMIT;
BEGIN;
SELECT * FROM KV;
INSERT INTO kv (k,v) VALUES ('e', transaction_timestamp());
COMMIT;

query I
SELECT COUNT(DISTINCT v) FROM kv
----
4

query T
SELECT extract(year from timestamp '2001-04-10 12:04:59')
----
2001

query T
SELECT extract(quarter from timestamp '2001-04-10 12:04:59')
----
2

query T
SELECT extract(month from timestamp '2001-04-10 12:04:59')
----
4

query T
SELECT extract(week from timestamp '2001-04-10 12:04:59')
----
15

query T
SELECT extract(day from timestamp '2001-04-10 12:04:59')
----
10

query T
SELECT extract(dayofweek from timestamp '2001-04-10 12:04:59')
----
2

query T
SELECT extract(dow from timestamp '2001-04-12 12:04:59')
----
4

query T
SELECT extract(dayofyear from timestamp '2001-04-10 12:04:59')
----
100

query T
SELECT extract(doy from timestamp '2001-04-12 12:04:59')
----
102

query T
SELECT extract(epoch from timestamp '2001-04-10 12:04:59')
----
986904299

query T
SELECT extract(hour from timestamp '2001-04-10 12:04:59')
----
12

query T
SELECT extract(minute from timestamp '2001-04-10 12:04:59')
----
4

query T
SELECT extract(second from timestamp '2001-04-10 12:04:59.234')
----
59

query T
SELECT extract(millisecond from timestamp '2001-04-10 12:04:59.234567')
----
234

query T
SELECT extract(microsecond from timestamp '2001-04-10 12:04:59.34565423')
----
345654

query T
SELECT extract(nanosecond from timestamp '2001-04-10 12:04:59.34565423')
----
345654230

query error extract: unsupported timespan: nansecond
SELECT extract(nansecond from timestamp '2001-04-10 12:04:59.34565423')

# Test SET TIME ZONE

# default time zone of UTC
query T
SELECT '2015-08-25 05:45:45.53453'::timestamp
----
2015-08-25 05:45:45.53453 +0000 UTC

statement ok
SET TIME ZONE 'Europe/Rome'

query T
SELECT '2015-08-25 05:45:45.53453 CET'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC

statement ok
SET TIME ZONE "America/New_York"

query T
SELECT '2015-08-24 23:45:45.53453 EST'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC

query T
SELECT '2015-08-24 23:45:45.53453 EDT'::timestamp
----
2015-08-25 03:45:45.53453 +0000 UTC

# PST is not interpreted properly.
query T
SELECT '2015-08-24 23:45:45.53453 PST'::timestamp
----
2015-08-24 23:45:45.53453 +0000 UTC

# A missing time zome is interpretted in the same way as EDT
query T
SELECT '2015-08-24 23:45:45.53453'::timestamp
----
2015-08-25 03:45:45.53453 +0000 UTC

statement error cannot find foobar.*
SET TIME ZONE 'foobar'

statement ok
SET TIME ZONE INTERVAL '-7h'

query T
SELECT '2015-08-24 21:45:45.53453'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC

# Check that casting from a timestamp to a date and vice versa
# uses the time zone.
query T
SELECT b::date FROM u WHERE a = 123
----
2015-08-29

query T
SELECT c::timestamp FROM u WHERE a = 123
----
2015-08-30 07:00:00 +0000 UTC

statement ok
SET TIME ZONE -7

query T
SELECT '2015-08-24 21:45:45.53453'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC

statement ok
SET TIME ZONE -7.5

query T
SELECT '2015-08-24 21:15:45.53453'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC

query T
SELECT '2015-08-24 21:15:45.53453'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC

statement ok
SET TIME ZONE LOCAL

query T
SELECT '2015-08-25 04:45:45.53453'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC

statement ok
SET TIME ZONE DEFAULT

query T
SELECT '2015-08-25 04:45:45.53453'::timestamp
----
2015-08-25 04:45:45.53453 +0000 UTC

# reset for what follows.
statement ok
SET TIME ZONE 'UTC'
