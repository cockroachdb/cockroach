# This example session documents that a SERIALIZABLE transaction gets poisoned
# when it revisits a Range on which one of its intents has had its timestamp
# pushed, and that a SNAPSHOT transaction can proceed and commit with its new
# timestamp.

statement ok
CREATE TABLE t (id INT PRIMARY KEY)

statement ok
INSERT INTO t VALUES (1)

statement ok
GRANT ALL ON t TO testuser

# The following command causes priority values to be hardcoded. Without this,
# the probabilistic generation of priority values results in occasional priority
# inversion.
fix-txn-priorities

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE, PRIORITY LOW

statement ok
INSERT INTO t VALUES (2)

# Switch users and push the above insert to a higher timestamp.
user testuser

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE, PRIORITY HIGH

# This pushes the intent.
query I
SELECT * FROM t
----
1

statement ok
COMMIT

# Switch back and observe that we can't go back and read our data - we've been
# poisoned.
user root

query error retry txn
SELECT * FROM t

statement ok
ROLLBACK

# The same type of session for a SNAPSHOT transaction shouldn't be poisoned.
statement ok
BEGIN TRANSACTION ISOLATION LEVEL SNAPSHOT, PRIORITY LOW

statement ok
INSERT INTO t VALUES (2)

user testuser

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE, PRIORITY HIGH

# This pushes the intent.
query I
SELECT * FROM t
----
1

statement ok
COMMIT

user root

query I
SELECT * FROM t
----
1
2

statement ok
COMMIT
