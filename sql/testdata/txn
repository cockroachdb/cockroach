# Transaction involving schema changes.
statement ok
BEGIN TRANSACTION

statement ok
CREATE TABLE kv (
  k CHAR PRIMARY KEY,
  v CHAR
)

statement ok
INSERT INTO kv (k,v) VALUES ('a', 'b')

query TT
SELECT * FROM kv
----
a b

statement ok
COMMIT TRANSACTION

# A transaction to update kv.

statement ok
BEGIN TRANSACTION

statement ok
UPDATE kv SET v = 'c' WHERE k in ('a')

query TT
SELECT * FROM kv
----
a c

statement ok
COMMIT TRANSACTION

query TT
SELECT * FROM kv
----
a c

# Rollback a transaction before committing.

statement ok
BEGIN TRANSACTION

statement ok
UPDATE kv SET v = 'b' WHERE k in ('a')

query TT
SELECT * FROM kv
----
a b

statement ok
ROLLBACK TRANSACTION

query TT
SELECT * FROM kv
----
a c

# Statement execution should not depend on request boundaries.

statement ok
BEGIN TRANSACTION; UPDATE kv SET v = 'b' WHERE k in ('a')

query TT
SELECT * FROM kv
----
a b

query TT
SELECT * FROM kv; COMMIT; BEGIN; UPDATE kv SET v = 'd' WHERE k in ('a'); SELECT * FROM kv
----
a d

statement ok
UPDATE kv SET v = 'c' WHERE k in ('a'); COMMIT

query TT
SELECT * FROM kv
----
a c

# Abort transaction with a syntax error, and ignore statements until the end of the transaction block

statement ok
BEGIN

query error syntax error at or near ","
SELECT COUNT(*, 1) FROM kv

statement error current transaction is aborted, commands ignored until end of transaction block
UPDATE kv SET v = 'b' WHERE k in ('a')

statement ok
ROLLBACK

query TT
SELECT * FROM kv
----
a c

# Abort transaction with a problematic statment, and ignore statements until the end of the transaction block

statement ok
BEGIN

statement error duplicate key value \(k\)=\('a'\) violates unique constraint "primary"
INSERT INTO kv VALUES('a', 'c')

statement error current transaction is aborted, commands ignored until end of transaction block
UPDATE kv SET v = 'b' WHERE k in ('a')

statement ok
COMMIT

query TT
SELECT * FROM kv
----
a c

# BEGIN in the middle of a transaction is an error.

statement ok
BEGIN TRANSACTION

statement ok
UPDATE kv SET v = 'b' WHERE k in ('a')

statement error there is already a transaction in progress
BEGIN TRANSACTION

statment error current transaction is aborted, commands ignored until end of transaction block
SELECT * FROM kv
----

statement ok
ROLLBACK TRANSACTION

# An empty transaction is allowed.

statement ok
BEGIN; COMMIT

# COMMIT/ROLLBACK without a transaction are errors.

statement error there is no transaction in progress
COMMIT TRANSACTION

statement error there is no transaction in progress
ROLLBACK TRANSACTION

# Set isolation level without a transaction is an error.

statement error there is no transaction in progress
SET TRANSACTION ISOLATION LEVEL SNAPSHOT

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SNAPSHOT; COMMIT

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE; COMMIT

statement ok
BEGIN TRANSACTION; SET TRANSACTION ISOLATION LEVEL SNAPSHOT; COMMIT

statement ok
BEGIN TRANSACTION; SET TRANSACTION ISOLATION LEVEL SERIALIZABLE; COMMIT

# It is an error to change the isolation level of a running transaction.

statement ok
BEGIN TRANSACTION

statement ok
UPDATE kv SET v = 'b' WHERE k in ('a')

statement error cannot change the isolation level of a running transaction
SET TRANSACTION ISOLATION LEVEL SNAPSHOT

statement ok
ROLLBACK

# Transactions default to serializable.

statement ok
BEGIN TRANSACTION

query T
SHOW TRANSACTION ISOLATION LEVEL
----
SERIALIZABLE

statement ok
SET TRANSACTION ISOLATION LEVEL SNAPSHOT

query T
SHOW TRANSACTION ISOLATION LEVEL
----
SNAPSHOT

statement ok
COMMIT

# We can explicitly start a transaction in snapshot isolation.

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SNAPSHOT

query T
SHOW TRANSACTION ISOLATION LEVEL
----
SNAPSHOT

statement ok
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

query T
SHOW TRANSACTION ISOLATION LEVEL
----
SERIALIZABLE

statement ok
COMMIT
