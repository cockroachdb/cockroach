statement ok
CREATE TABLE kv (
  k INT PRIMARY KEY,
  v INT,
  w INT,
  s STRING
)

statement OK
INSERT INTO kv VALUES
(1, 2, 3, 'a'),
(3, 4, 5, 'a'),
(5, NULL, NULL, NULL),
(6, 2, 3, 'b'),
(7, 2, 2, 'b'),
(8, 4, 2, 'A')

query error column "k" must appear in the GROUP BY clause or be used in an aggregate function
SELECT COUNT(*), k FROM kv

query II rowsort
SELECT COUNT(*), k FROM kv GROUP BY k
----
1 1
1 3
1 5
1 6
1 7
1 8

query II rowsort
SELECT COUNT(*), k+v FROM kv GROUP BY k+v
----
1 12
1 3
1 7
1 8
1 9
1 NULL


query IT rowsort
SELECT COUNT(*), UPPER(s) FROM kv GROUP BY UPPER(s)
----
1 NULL
2 B
3 A

query IT rowsort
SELECT COUNT(*), UPPER(s) FROM kv GROUP BY s
----
1 A
1 NULL
2 A
2 B

query IT rowsort
SELECT COUNT(*), UPPER(kv.s) FROM kv GROUP BY s
----
1 A
1 NULL
2 A
2 B

query IT rowsort
SELECT COUNT(*), UPPER(s) FROM kv GROUP BY kv.s
----
1 A
1 NULL
2 A
2 B


query error column "s" must appear in the GROUP BY clause or be used in an aggregate function
SELECT COUNT(*), s FROM kv GROUP BY UPPER(s)

query error column "v" must appear in the GROUP BY clause or be used in an aggregate function
SELECT COUNT(*), k+v FROM kv GROUP BY k

query error column "v" must appear in the GROUP BY clause or be used in an aggregate function
SELECT COUNT(*), v/(k+v) FROM kv GROUP BY k+v

query IIR rowsort
SELECT COUNT(*), k+v, floor(v/(k+v)) FROM kv WHERE k+v > 8 GROUP BY v, k+v
----
1 12 0
1 9 0

query TIIIR rowsort
SELECT UPPER(s), COUNT(*), SUM(v), SUM(w), AVG(v+w) as avg FROM kv GROUP BY UPPER(s)
----
A     3  10    10    6.666666666666667
B     2  4     5     4.5
NULL  1  NULL  NULL  NULL

query II rowsort
SELECT count(kv.k) AS count_1, kv.v + kv.w AS lx FROM kv GROUP BY kv.v + kv.w
----
1  4
1  6
1  9
1  NULL
2  5

query error syntax error at or near ","
SELECT COUNT(*, 1) FROM kv

query error unknown signature for COUNT: COUNT\(int, int\)
SELECT COUNT(k, v) FROM kv

query error unimplemented ORDER BY with GROUP BY/aggregation
SELECT COUNT(k) FROM kv ORDER BY v

query IIII colnames
SELECT COUNT(*), COUNT(kv.*), COUNT(k), COUNT(kv.v) FROM kv
----
COUNT(*) COUNT(kv.*) COUNT(k) COUNT(kv.v)
6        6           6        5

query III
SELECT COUNT(DISTINCT k), COUNT(DISTINCT v), COUNT(DISTINCT (v)) FROM kv
----
6 2 2

query TIII rowsort
SELECT UPPER(s), COUNT(DISTINCT k), COUNT(DISTINCT v), COUNT(DISTINCT (v)) FROM kv GROUP BY UPPER(s)
----
A    3 2 2
B    2 1 1
NULL 1 0 0


query I
SELECT COUNT((k, v)) FROM kv
----
6

query I
SELECT COUNT(DISTINCT (k, v)) FROM kv
----
6

query I
SELECT COUNT(DISTINCT (k, (v))) FROM kv
----
6

query I
SELECT COUNT((k, v)) FROM kv LIMIT 1
----
6

query I
SELECT COUNT((k, v)) FROM kv OFFSET 1
----

query I
SELECT COUNT(k)+COUNT(kv.v) FROM kv
----
11

query IIII
SELECT MIN(k), MAX(k), MIN(v), MAX(v) FROM kv
----
1 8 2 4

query IIII
SELECT MIN(k), MAX(k), MIN(v), MAX(v) FROM kv WHERE k > 8
----
NULL NULL NULL NULL

query RRII
SELECT AVG(k), AVG(v), SUM(k), SUM(v) FROM kv
----
5 2.8 30 14

query RRII
SELECT AVG(DISTINCT k), AVG(DISTINCT v), SUM(DISTINCT k), SUM(DISTINCT v) FROM kv
----
5 3 30 6

query R
SELECT AVG(k) * 2.0 + MAX(v)::float FROM kv
----
14

query ITT
EXPLAIN SELECT COUNT(k) FROM kv
----
0 group COUNT(k)
1 scan  kv@primary

statement ok
CREATE TABLE abc (
  a CHAR PRIMARY KEY,
  b FLOAT,
  c BOOLEAN
)

statement ok
INSERT INTO abc VALUES ('one', 1.5, true), ('two', 2.0, false)

query TRB
SELECT MIN(a), MIN(b), MIN(c) FROM abc
----
one 1.5 false

query TRB
SELECT MAX(a), MAX(b), MAX(c) FROM abc
----
two 2 true

query RR
SELECT AVG(b), SUM(b) FROM abc
----
1.75 3.5

query error unknown signature for AVG: AVG\(string\)
SELECT AVG(a) FROM abc

query error unknown signature for AVG: AVG\(bool\)
SELECT AVG(c) FROM abc

query error unknown signature for AVG: AVG\(tuple\)
SELECT AVG((a,c)) FROM abc

query error unknown signature for SUM: SUM\(string\)
SELECT SUM(a) FROM abc

query error unknown signature for SUM: SUM\(bool\)
SELECT SUM(c) FROM abc

query error unknown signature for SUM: SUM\(tuple\)
SELECT SUM((a,c)) FROM abc

statement ok
CREATE TABLE xyz (
  x INT PRIMARY KEY,
  y INT,
  z INT,
  INDEX xy (x, y),
  INDEX zyx (z, y, x)
)

statement ok
INSERT INTO xyz VALUES (1, 2, 3), (4, 5, 6), (7, NULL, 8)

query I
SELECT MIN(x) FROM xyz
----
1

query ITT
EXPLAIN SELECT MIN(x) FROM xyz
----
0 group MIN(x)
1 scan  xyz@xy 1:-

query I
SELECT MAX(x) FROM xyz
----
7

query ITT
EXPLAIN SELECT MAX(x) FROM xyz
----
0 group    MAX(x)
1 revscan  xyz@xy 1:-

query I
SELECT MIN(y) FROM xyz WHERE x = 1
----
2

query ITT
EXPLAIN SELECT MIN(y) FROM xyz WHERE x = 1
----
0 group MIN(y)
1 scan  xyz@xy 1:/1/#-/2

query I
SELECT MAX(y) FROM xyz WHERE x = 1
----
2

query ITT
EXPLAIN SELECT MAX(y) FROM xyz WHERE x = 1
----
0 group   MAX(y)
1 revscan xyz@xy 1:/1/#-/2

query I
SELECT MIN(y) FROM xyz WHERE x = 7
----
NULL

query ITT
EXPLAIN SELECT MIN(y) FROM xyz WHERE x = 7
----
0 group MIN(y)
1 scan  xyz@xy 1:/7/#-/8

query I
SELECT MAX(y) FROM xyz WHERE x = 7
----
NULL

query ITT
EXPLAIN SELECT MAX(y) FROM xyz WHERE x = 7
----
0 group   MAX(y)
1 revscan xyz@xy 1:/7/#-/8

query I
SELECT MIN(x) FROM xyz WHERE (y, z) = (2, 3)
----
1

query ITT
EXPLAIN SELECT MIN(x) FROM xyz WHERE (y, z) = (2, 3)
----
0 group MIN(x)
1 scan  xyz@zyx 1:/3/2/#-/3/3

query I
SELECT MAX(x) FROM xyz WHERE (z, y) = (3, 2)
----
1

query ITT
EXPLAIN SELECT MAX(x) FROM xyz WHERE (z, y) = (3, 2)
----
0 group   MAX(x)
1 revscan xyz@zyx 1:/3/2/#-/3/3
