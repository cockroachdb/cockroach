statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c BOOLEAN
)

statement ok
INSERT INTO t VALUES (1, 9, true), (2, 8, false), (3, 7, NULL)

query B
SELECT c FROM t ORDER BY c
----
NULL
false
true

query B
SELECT c FROM t ORDER BY c DESC
----
true
false
NULL

query II
SELECT a, b FROM t ORDER BY b
----
3 7
2 8
1 9

query ITT
EXPLAIN SELECT a, b FROM t ORDER BY b
----
0 sort +b
1 scan t@primary -

query II
SELECT a, b FROM t ORDER BY b DESC
----
1 9
2 8
3 7

query ITT
EXPLAIN SELECT a, b FROM t ORDER BY b DESC
----
0 sort -b
1 scan t@primary -

query I
SELECT a FROM t ORDER BY 1 DESC
----
3
2
1

query II
SELECT a AS foo, b FROM t ORDER BY foo DESC
----
3 7
2 8
1 9

query II
SELECT a AS "foo.bar", b FROM t ORDER BY "foo.bar" DESC
----
3 7
2 8
1 9

query II
SELECT a AS foo, b FROM t ORDER BY a DESC
----
3 7
2 8
1 9

query I
SELECT b FROM t ORDER BY a DESC
----
7
8
9

query ITT
EXPLAIN SELECT b FROM t ORDER BY a DESC
----
0 nosort -a
1 revscan t@primary -

statement ok
INSERT INTO t VALUES (4, 7), (5, 7)

query II
SELECT a, b FROM t WHERE b = 7 ORDER BY b, a
----
3 7
4 7
5 7

query II
SELECT a, b FROM t ORDER BY b, a DESC
----
5 7
4 7
3 7
2 8
1 9

query III
SELECT a, b, a+b AS ab FROM t WHERE b = 7 ORDER BY ab DESC, a
----
5 7 12
4 7 11
3 7 10

query I
SELECT a FROM t ORDER BY a+b DESC, a
----
5
4
1
2
3

query I
SELECT a FROM t ORDER BY (((a)))
----
1
2
3
4
5

query error incompatible value types bool, int
SELECT CASE a WHEN 1 THEN b ELSE c END as val FROM t ORDER BY val

query error invalid ORDER BY index: 0 not in range \[1, 3\]
SELECT * FROM t ORDER BY 0

query error invalid ORDER BY: true
SELECT * FROM t ORDER BY true

query error qualified name "t.foo" not found
SELECT * FROM t ORDER BY foo

query error qualified name "a.b" not found
SELECT a FROM t ORDER BY a.b

statement ok
CREATE TABLE abc (
  a INT,
  b INT,
  c INT,
  d CHAR,
  PRIMARY KEY (a, b, c),
  UNIQUE INDEX bc (b, c),
  INDEX ba (b, a)
)

statement ok
INSERT INTO abc VALUES (1, 2, 3, 'one'), (4, 5, 6, 'Two')

query T
SELECT d FROM abc ORDER BY LOWER(d)
----
one
Two

query ITTB
EXPLAIN (DEBUG) SELECT * FROM abc ORDER BY a
----
0 /abc/primary/1/2/3   NULL  NULL
0 /abc/primary/1/2/3/d 'one' true
1 /abc/primary/4/5/6   NULL  NULL
1 /abc/primary/4/5/6/d 'Two' true

query ITT
EXPLAIN SELECT * FROM abc ORDER BY a
----
0 scan abc@primary -

query ITTB
EXPLAIN (DEBUG) SELECT a, b FROM abc ORDER BY b, a
----
0 /abc/ba/2/1/3 NULL true
1 /abc/ba/5/4/6 NULL true

query ITT
EXPLAIN SELECT a, b FROM abc ORDER BY b, a
----
0 scan abc@ba -

query ITTB
EXPLAIN (DEBUG) SELECT b, c FROM abc ORDER BY b, c
----
0 /abc/bc/2/3 /1 true
1 /abc/bc/5/6 /4 true

query ITTB
EXPLAIN (DEBUG) SELECT a, b, c FROM abc ORDER BY b
----
0 /abc/bc/2/3 /1 true
1 /abc/bc/5/6 /4 true

query ITTB
EXPLAIN (DEBUG) SELECT a FROM abc ORDER BY a DESC
----
0 /abc/primary/4/5/6/d 'Two' NULL
0 /abc/primary/4/5/6   NULL  true
1 /abc/primary/1/2/3/d 'one' NULL
1 /abc/primary/1/2/3   NULL  true

query ITT
EXPLAIN SELECT a FROM abc ORDER BY a DESC
----
0 revscan abc@primary -

query I
SELECT a FROM abc ORDER BY a DESC
----
4
1

query I
SELECT a FROM abc ORDER BY a DESC LIMIT 1
----
4

query I
SELECT a FROM abc ORDER BY a DESC OFFSET 1
----
1

query ITT
EXPLAIN SELECT c FROM abc WHERE b = 2 ORDER BY c
----
0 scan abc@bc /2-/3

query ITT
EXPLAIN SELECT c FROM abc WHERE b = 2 ORDER BY c DESC
----
0 revscan abc@bc /2-/3

statement ok
CREATE TABLE bar (id INT PRIMARY KEY, baz STRING, UNIQUE INDEX i_bar (baz));

statement ok
INSERT INTO bar VALUES (0, NULL), (1, NULL);

query IT
SELECT * FROM bar ORDER BY baz, id;
----
0 NULL
1 NULL
