statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  d INT,
  INDEX b (b),
  UNIQUE INDEX c (c),
  FAMILY (a),
  FAMILY (b),
  FAMILY (c),
  FAMILY (d)
)

statement ok
INSERT INTO t VALUES (1, 2, 3, 4), (5, 6, 7, 8)

query ITT
EXPLAIN SELECT * FROM t WHERE b = 2
----
0 index-join
1 scan       t@b /2-/3
1 scan       t@primary

query ITTT
EXPLAIN (DEBUG) SELECT * FROM t WHERE b = 2
----
0 /t/b/2/1       NULL PARTIAL
0 /t/primary/1   NULL PARTIAL
0 /t/primary/1/b 2    PARTIAL
0 /t/primary/1/c 3    PARTIAL
0 /t/primary/1/d 4    ROW

query IIII
SELECT * FROM t WHERE b = 2
----
1 2 3 4

query ITT
EXPLAIN SELECT * FROM t WHERE c = 6
----
0 index-join
1 scan       t@c /6-/7
1 scan       t@primary

query ITTT
EXPLAIN (DEBUG) SELECT * FROM t WHERE c = 7
----
0 /t/c/7         /5   PARTIAL
0 /t/primary/5   NULL PARTIAL
0 /t/primary/5/b 6    PARTIAL
0 /t/primary/5/c 7    PARTIAL
0 /t/primary/5/d 8    ROW

query IIII
SELECT * FROM t WHERE c = 7
----
5 6 7 8

query IIII
SELECT * FROM t WHERE c > 0 ORDER BY c DESC
----
5 6 7 8
1 2 3 4

query ITT
EXPLAIN SELECT * FROM t WHERE c > 0 ORDER BY c DESC
----
0 index-join
1 revscan    t@c /1-
1 scan       t@primary

query ITT
EXPLAIN SELECT * FROM t WHERE c > 0 ORDER BY c
----
0 index-join
1 scan       t@c /1-
1 scan       t@primary

query IIII
SELECT * FROM t WHERE c > 0 AND d = 8
----
5 6 7 8

query ITT
EXPLAIN SELECT * FROM t WHERE c > 0 AND d = 8
----
0 index-join
1 scan       t@c /1-
1 scan       t@primary

# The following testcases verify that when we have a small limit, we prefer an
# order-matching index.

query ITT
EXPLAIN SELECT * FROM t ORDER BY c
----
0 sort       +c
1 scan       t@primary -

query ITT
EXPLAIN SELECT * FROM t ORDER BY c LIMIT 5
----
0 limit      count: 5
1 index-join
2 scan       t@c - (max 5 rows)
2 scan       t@primary

query ITT
EXPLAIN SELECT * FROM t ORDER BY c OFFSET 5
----
0 limit      offset: 5
1 sort       +c
2 scan       t@primary -

query ITT
EXPLAIN SELECT * FROM t ORDER BY c LIMIT 5 OFFSET 5
----
0 limit      count: 5, offset: 5
1 index-join
2 scan       t@c - (max 10 rows)
2 scan       t@primary

query ITT
EXPLAIN SELECT * FROM t ORDER BY c LIMIT 1000000
----
0 limit      count: 1000000
1 sort       +c (top 1000000)
2 scan       t@primary -
