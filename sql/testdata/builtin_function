query error unknown function: foo.bar
SELECT foo.bar()

query error unknown function: defaults
SELECT defaults()

query II colnames
SELECT LENGTH('roach7'), LENGTH(b'roach77')
----
LENGTH('roach7') LENGTH(b'roach77')
6                7

query II
SELECT LENGTH('Hello, 世界'), LENGTH(b'Hello, 世界')
----
9 13

statement error unknown signature for LENGTH: LENGTH\(int\)
SELECT LENGTH(23)

query T colnames
SELECT UPPER('roacH7')
----
UPPER('roacH7')
ROACH7

statement error unknown signature for UPPER: UPPER\(float\)
SELECT UPPER(2.2)

query T colnames
SELECT LOWER('RoacH7')
----
LOWER('RoacH7')
roach7

statement error unknown signature for LOWER: LOWER\(int\)
SELECT LOWER(32)

# Multiplying by zero so the result is deterministic.
query R
SELECT RANDOM() * 0.0
----
0

# Concatenating 'empty' because the empty string doesn't work in these tests.
query T
SELECT CONCAT() || 'empty'
----
empty

query T
SELECT CONCAT('RoacH', NULL)
----
RoacH

statement error CONCAT: argument type unsupported: bool
SELECT CONCAT('RoacH', false, 64.532, TRUE)
----

query T
SELECT SUBSTR('RoacH', 2, 3)
----
oac

query T
SELECT SUBSTRING('RoacH', 2, 3)
----
oac

query T
SELECT SUBSTRING('RoacH' from 2 for 3)
----
oac

query T
SELECT SUBSTRING('RoacH' for 3 from 2)
----
oac

query T
SELECT SUBSTR('RoacH', 2)
----
oacH

query T
SELECT SUBSTRING('RoacH' from 2)
----
oacH

query T
SELECT SUBSTR('RoacH', -2)
----
RoacH

query T
SELECT SUBSTR('RoacH', -2, 4)
----
R

query T
SELECT SUBSTR('12345', 2, 77)
----
2345

query T
SELECT SUBSTR('12345', -2, 77)
----
12345

statement error SUBSTR: negative substring length -1 not allowed
SELECT SUBSTR('12345', 2, -1)

query T
SELECT SUBSTRING('12345' for 3)
----
123

query T
SELECT SUBSTRING('foobar' from 'o.b')
----
oob

query T
SELECT SUBSTRING('f(oabaroob' from '\(o(.)b')
----
a

query T
SELECT SUBSTRING('f(oabaroob' from '+(o(.)b' for '+')
----
a

query error SUBSTRING: error parsing regexp: missing closing \): `\\\\\(o\(.\)b`
SELECT SUBSTRING('f(oabaroob' from '\(o(.)b' for '+')

query error unknown signature for SUBSTRING: SUBSTRING()
SELECT SUBSTRING()

query T
SELECT CONCAT_WS(',', 'abcde', NULL)
----
abcde

query T
SELECT CONCAT_WS(',', 'abcde', '2')
----
abcde,2

statement error CONCAT_WS: argument type unsupported: int
SELECT CONCAT_WS(',', 'abcde', 2, NULL, 22)
----

query T
SELECT split_part('abc~@~def~@~ghi', '~@~', 2)
----
def

query T
SELECT repeat('Pg', 4)
----
PgPgPgPg

query T
SELECT repeat('Pg', -1) || 'empty'
----
empty

query T
SELECT ascii('x')
----
120

query T
select ascii('禅');
----
31109

query error ascii: the input string must not be empty
select ascii('');

query T
SELECT md5('abc')
----
900150983cd24fb0d6963f7d28e17f72

query T
SELECT sha1('abc')
----
a9993e364706816aba3e25717850c26c9cd0d89d

query T
SELECT sha256('abc')
----
ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad

query T
SELECT to_hex(2147483647)
----
7fffffff

query I
SELECT strpos('high', 'a')
----
0

query I
SELECT strpos('high', 'ig')
----
2

query I
SELECT strpos('💩high', 'ig')
----
3

query T
SELECT btrim('xyxtrimyyx', 'xy')
----
trim

query T
SELECT 'a' || btrim('    postgres    ') || 'b'
----
apostgresb

query T
SELECT ltrim('zzzytrimxyz', 'xyz')
----
trimxyz

query T
SELECT ltrim('   trimxyz')
----
trimxyz

query T
SELECT rtrim('xyzzzzytrimxyz', 'xyz')
----
xyzzzzytrim

query T
SELECT 'a' || rtrim(' zzzytrimxyz   ')
----
a zzzytrimxyz

query T
SELECT reverse('abcde')
----
edcba

query T
SELECT replace('abcdefabcdef', 'cd', 'XX')
----
abXXefabXXef

query T
SELECT replace(initcap('hi THOMAS'), ' ', '')
----
HiThomas

query T
SELECT initcap('THOMAS')
----
Thomas

query T
SELECT left('💩abcde'::bytes, 2)
----
[240 159]

query T
SELECT right('abcde💩'::bytes, 2)
----
[146 169]

query T
SELECT left('💩abcde', 2)
----
💩a

query T
SELECT right('abcde💩', 2)
----
e💩

query T
SELECT abs(-1.2), abs(1.2), abs(-0.0), abs(0), abs(1)
----
1.2 1.2 0 0 1

query error abs: abs of min integer value \(-9223372036854775808\) not defined
SELECT abs(-9223372036854775808)

query T
SELECT abs(-9223372036854775807)
----
9223372036854775807

query T
SELECT abs(sin(pi())) < 1e-12
----
true

query T
SELECT acos(-0.5), acos(0.5)
----
2.0943951023931957 1.0471975511965976

query T
SELECT asin(-0.5), asin(0.5), asin(1.5)
----
-0.5235987755982989 0.5235987755982989 NaN

query T
SELECT atan(-0.5), atan(0.5)
----
-0.4636476090008061 0.4636476090008061

query T
SELECT atan2(-10.0, 5.0), atan2(10.0, 5.0)
----
-1.1071487177940904 1.1071487177940904

query T
SELECT ceil(-0.5), ceil(0.5), ceiling(0.5)
----
-0 1 1

query T
SELECT cos(-0.5), cos(0.5)
----
0.8775825618903728 0.8775825618903728

query T
SELECT degrees(-0.5), degrees(0.5)
----
-28.64788975654116 28.64788975654116

query T
SELECT div(-1.0, 2.0), div(1.0, 2.0), div(1.0, 0.0)
----
-0.5 0.5 +Inf

query T
SELECT exp(-1.0), exp(1.0)
----
0.36787944117144233 2.718281828459045

query T
SELECT floor(-1.5), floor(1.5)
----
-2 1

query T
SELECT ln(-2.0), ln(2.0)
----
NaN 0.6931471805599453

query T
SELECT log(10.0)
----
1

query T
SELECT mod(5.0, 2.0), mod(1.0, 0.0), mod(5, 2)
----
1 NaN 1

# mod returns the same results as PostgreSQL 9.4.4
# in tests below (except for the error message).

query error mod: zero modulus
SELECT mod(5, 0)

query T
SELECT mod(-100, -8), mod(-100, 8)
----
-4 -4

query T
SELECT mod(-9223372036854775808, 3)
----
-2

query T
SELECT mod(-9223372036854775808, -1)
----
0

qery T
SELECT mod(9223372036854775807, -1)
----
0

qery T
SELECT mod(9223372036854775807, -2)
----
1

qery T
SELECT mod(9223372036854775807, 1)
----
0

qery T
SELECT mod(9223372036854775807, 2)
----
1

qery T
SELECT mod(9223372036854775807, 4)
----
3

query T
SELECT pi()
----
3.141592653589793

query T
SELECT pow(-3.0, 2.0), pow(3.0, 2.0)
----
9 9

query T
SELECT radians(-45.0), radians(45.0)
----
-0.7853981633974483 0.7853981633974483

# Our implementation of round is not fully Postgres-compatible because we do
# not allow negative numbers of digits.

query error round: number of digits must be greater than 0
SELECT round(41.2, -1)

query T
SELECT round(4.2, 0), round(4.2, 50)
----
4 4.2

query T
SELECT round(1e-308, 324)
----
1e-308

# round to nearest even
query T
SELECT round(-2.5, 0), round(-1.5, 0), round(1.5, 0), round(2.5, 0)
----
-2 -2 2 2

query T
SELECT round(-2.5), round(-1.5), round(-0.0), round(0.0), round(1.5), round(2.5)
----
-2 -2 -0 0 2 2

# Test rounding to 14 digits, because the logic test itself
# formats floats rounded to 15 digits behind the decimal point.

query T
SELECT round(-2.123456789, 5), round(2.123456789, 5), round(2.12345678901234567890, 14)
----
-2.12346 2.12346 2.12345678901235

query T
SELECT round(-1.7976931348623157e+308, 1), round(1.7976931348623157e+308, 1)
----
-1.7976931348623157e+308 1.7976931348623157e+308

query T
SELECT sign(-2), sign(0), sign(2)
----
-1 0 1

query T
SELECT sign(-2.0), sign(-0.0), sign(0.0), sign(2.0)
----
-1 0 0 1

query T
SELECT sin(-1.0), sin(0.0), sin(1.0)
----
-0.8414709848078965 0 0.8414709848078965

query T
SELECT sqrt(-1.0), sqrt(4.0)
----
NaN 2

query T
SELECT cbrt(-1.0), cbrt(27.0)
----
-1 3

query T
SELECT tan(-5.0), tan(0.0), tan(5.0)
----
3.3805150062465854 0 -3.3805150062465854

query T
SELECT trunc(-0.0), trunc(0.0), trunc(1.9)
----
-0 0 1

query T
SELECT translate('Techonthenet.com', 'e.to', '456')
----
T4chn6h4n465cm

query T
SELECT translate('12345', '143', 'ax')
----
a2x5

query T
SELECT translate('12345', 'abc', 'ax')
----
12345

query T
SELECT translate('a‰ÒÁ', 'aÒ', '∏p')
----
∏‰pÁ

query T
SELECT regexp_extract('foobar', 'o.b')
----
oob

query T
SELECT regexp_extract('foobar', 'o(.)b')
----
o

query T
SELECT regexp_extract('foobar', '(o(.)b)')
----
oob

query T
SELECT regexp_extract('foabaroob', 'o(.)b')
----
a

query T
SELECT regexp_extract('foobar', 'o.x')
----
NULL

query T
SELECT regexp_replace('foobarbaz', 'b..', 'X')
----
fooXbaz

query T
SELECT regexp_replace('foobarbaz', 'b..', 'X', 'g')
----
fooXX

query T
SELECT regexp_replace('foobarbaz', 'b(..)', E'X\\1Y', 'g')
----
fooXarYXazY

query T
SELECT regexp_replace('foobarbaz', 'b(.)(.)', E'X\\2\\1\\3Y', 'g')
----
fooXraYXzaY

query T
SELECT regexp_replace(E'fooBa\nrbaz', 'b(..)', E'X\\&Y', 'gi')
----
fooXBa
YrXbazY

query T
SELECT regexp_replace(E'fooBa\nrbaz', 'b(..)', E'X\\&Y', 'gmi')
----
fooBa
rXbazY

query T
SELECT regexp_replace(E'fooBar\nbaz', 'b(..)$', E'X\\&Y', 'gpi')
----
fooBar
XbazY

query T
SELECT regexp_replace(E'fooBar\nbaz', 'b(..)$', E'X\\&Y', 'gwi')
----
fooXBarY
XbazY

query T
SELECT regexp_replace('foobarbaz', 'nope', 'NO')
----
foobarbaz

query error regexp_replace: invalid regexp flag: 'z'
SELECT regexp_replace(E'fooBar\nbaz', 'b(..)$', E'X\\&Y', 'z')

query B
SELECT experimental_unique_bytes() < experimental_unique_bytes(), length(experimental_unique_bytes())
----
true 9

query B
SELECT experimental_unique_int() < experimental_unique_int()
----
true

query B
SELECT experimental_uuid_v4() != experimental_uuid_v4(), length(experimental_uuid_v4())
----
true 16

query error syntax error at or near.*
SELECT GREATEST()

query error syntax error at or near.*
SELECT LEAST()

query T
SELECT GREATEST(4, 5, 7, 1, 2)
----
7

query T
SELECT LEAST(4, 5, 7, 1, 2)
----
1

query T
SELECT GREATEST(4, NULL, 7, 1, 2)
----
7

query T
SELECT GREATEST(NULL, NULL, 7, NULL, 2)
----
7

query T
SELECT GREATEST(NULL, NULL, NULL, NULL, 2)
----
2

query T
SELECT GREATEST(2, NULL, NULL, NULL, NULL)
----
2

query T
SELECT LEAST(4, NULL, 7, 1, 2)
----
1

query T
SELECT GREATEST(NULL, NULL, NULL)
----
NULL

query T
SELECT LEAST(NULL, NULL, NULL)
----
NULL

query error GREATEST: unsupported comparison operator: <int> < <string>
SELECT GREATEST(2, '4')

query error LEAST: unsupported comparison operator: <string> < <int>
SELECT LEAST(2, '4')

query T
SELECT GREATEST('foo', 'bar', 'foobar')
----
foobar

query T
SELECT LEAST('foo', 'bar', 'foobar')
----
bar

query error GREATEST: unsupported comparison operator: <int> < <float>
SELECT GREATEST(1, 1.2)
