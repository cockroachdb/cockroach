# Verify pg_catalog database handles mutation statements correctly.

query error user root does not have DROP privilege on database pg_catalog
ALTER DATABASE pg_catalog RENAME TO not_pg_catalog

statement error user root does not have CREATE privilege on database pg_catalog
CREATE TABLE pg_catalog.t (x INT)

query error user root does not have DROP privilege on database pg_catalog
DROP DATABASE pg_catalog


# Verify other databases can't be called "pg_catalog".

statement ok
CREATE DATABASE other_db

statement error the new database name "pg_catalog" already exists
ALTER DATABASE other_db RENAME TO pg_catalog

statement error database "pg_catalog" already exists
CREATE DATABASE pg_catalog

statement ok
DROP DATABASE other_db


# Verify pg_catalog can be used like a normal database.

statement ok
SET DATABASE = pg_catalog

statement ok
SET DATABASE = test


# Verify pg_catalog handles reflection correctly.

query T
SHOW TABLES FROM pg_catalog
----
pg_namespace
pg_tables

query TT colnames
SHOW CREATE TABLE pg_catalog.pg_namespace
----
Table                  CreateTable
pg_catalog.pg_namespace  CREATE TABLE "pg_catalog.pg_namespace" (
                           oid INT NULL,
                           nspname STRING NOT NULL DEFAULT '',
                           nspowner INT NULL,
                           aclitem STRING NULL
                       )

query TTBT colnames
SHOW COLUMNS FROM pg_catalog.pg_namespace
----
Field     Type    Null  Default
oid       INT     true   NULL
nspname   STRING  false  ''
nspowner  INT     true   NULL
aclitem   STRING  true   NULL

query TTTTTTT colnames
SHOW INDEXES FROM pg_catalog.pg_namespace
----
Table  Name  Unique  Seq  Column  Direction  Storing

query TTTTT colnames
SHOW CONSTRAINTS FROM pg_catalog.pg_namespace
----
Table         Name     Type  Column(s)  Details
pg_namespace  PRIMARY  KEY   NULL         NULL

query TTT colnames
SHOW GRANTS ON pg_catalog.pg_namespace
----
Table  User  Privileges


# Verify selecting from pg_catalog.

statement ok
CREATE DATABASE constraint_db

statement ok
CREATE TABLE constraint_db.t1 (
  p FLOAT PRIMARY KEY,
  a INT UNIQUE,
  b INT,
  c INT DEFAULT 12,
  UNIQUE INDEX index_key(b, c)
)

statement ok
CREATE TABLE constraint_db.t2 (
    t1_ID INT,
    CONSTRAINT fk FOREIGN KEY (t1_ID) REFERENCES constraint_db.t1(a),
    INDEX (t1_ID)
)

statement ok
CREATE TABLE constraint_db.t3 (
    a INT,
    b INT CHECK (b > 11),
    c STRING DEFAULT 'FOO',
    CONSTRAINT fk FOREIGN KEY (a, b) REFERENCES constraint_db.t1(b, c),
    INDEX (a, b)
)

## pg_catalog.pg_namespace

query ITIT colnames
SELECT * FROM pg_catalog.pg_namespace
----
oid         nspname             nspowner  aclitem
3061586988  constraint_db       NULL      NULL
3816276882  information_schema  NULL      NULL
3178318485  pg_catalog          NULL      NULL
1793492844  system              NULL      NULL
2091240128  test                NULL      NULL

## pg_catalog.pg_tables

query TTTTBBBB colnames
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'constraint_db'
----
schemaname     tablename  tableowner  tablespace  hasindexes  hasrules  hastriggers  rowsecurity
constraint_db  t1         NULL        NULL        true        false     false        false
constraint_db  t2         NULL        NULL        true        false     false        false
constraint_db  t3         NULL        NULL        true        false     false        false

query TB colnames
SELECT tablename, hasindexes FROM pg_catalog.pg_tables WHERE schemaname = 'information_schema' AND tablename LIKE '%table%'
----
tablename          hasindexes
table_constraints  false
table_privileges   false
tables             false
