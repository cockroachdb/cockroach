// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Daniel Harrison (daniel.harrison@gmail.com)

syntax = "proto3";
package cockroach.sql.sqlbase;
option go_package = "sqlbase";

import "cockroach/sql/sqlbase/structured.proto";
import "cockroach/util/hlc/timestamp.proto";
import weak "gogoproto/gogo.proto";

// BackupRangeDescriptor represents a file that contains the diff for a key
// range between two timestamps.
message BackupRangeDescriptor {
  // TODO(dan): While this is feature is experimental, this proto may change in
  // ways that are backward incompatible. Remove this note when it launches.

  // An empty path means the range is empty.
  string path = 1;
  bytes start_key = 2 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.Key"];
  bytes end_key = 3 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.Key"];
  util.hlc.Timestamp start_time = 4 [(gogoproto.nullable) = false];
}

// BackupDescriptor represents a consistent snapshot of ranges.
//
// Each range snapshot includes a path to data that is a diff of the data in
// that key range between a start and end timestamp. The end timestamp of all
// ranges in a backup is the same, but the start may vary (to allow individual
// tables to be backed up on different schedules).
message BackupDescriptor {
  // TODO(dan): While this is feature is experimental, this proto may change in
  // ways that are backward incompatible. Remove this note when it launches.

  util.hlc.Timestamp end_time = 1 [(gogoproto.nullable) = false];
  repeated BackupRangeDescriptor ranges = 2 [(gogoproto.nullable) = false];
  repeated Descriptor sql = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "SQL"];

  // TODO(dan): Consider also including total file size and per-range data and
  // file size.
  int64 data_size = 4;
}
