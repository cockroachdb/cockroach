// Code generated by protoc-gen-gogo.
// source: cockroach/sql/sqlbase/backup.proto
// DO NOT EDIT!

/*
	Package sqlbase is a generated protocol buffer package.

	It is generated from these files:
		cockroach/sql/sqlbase/backup.proto
		cockroach/sql/sqlbase/encoded_datum.proto
		cockroach/sql/sqlbase/privilege.proto
		cockroach/sql/sqlbase/structured.proto

	It has these top-level messages:
		BackupRangeDescriptor
		BackupDescriptor
		UserPrivileges
		PrivilegeDescriptor
		ColumnType
		ForeignKeyReference
		ColumnDescriptor
		ColumnFamilyDescriptor
		InterleaveDescriptor
		IndexDescriptor
		DescriptorMutation
		TableDescriptor
		DatabaseDescriptor
		Descriptor
*/
package sqlbase

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import cockroach_util_hlc "github.com/cockroachdb/cockroach/util/hlc"

// skipping weak import gogoproto "github.com/cockroachdb/gogoproto"

import github_com_cockroachdb_cockroach_roachpb "github.com/cockroachdb/cockroach/roachpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// BackupRangeDescriptor represents a file that contains the diff for a key
// range between two timestamps.
type BackupRangeDescriptor struct {
	// An empty path means the range is empty.
	Path      string                                       `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	StartKey  github_com_cockroachdb_cockroach_roachpb.Key `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3,casttype=github.com/cockroachdb/cockroach/roachpb.Key" json:"start_key,omitempty"`
	EndKey    github_com_cockroachdb_cockroach_roachpb.Key `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3,casttype=github.com/cockroachdb/cockroach/roachpb.Key" json:"end_key,omitempty"`
	StartTime cockroach_util_hlc.Timestamp                 `protobuf:"bytes,4,opt,name=start_time,json=startTime" json:"start_time"`
}

func (m *BackupRangeDescriptor) Reset()                    { *m = BackupRangeDescriptor{} }
func (m *BackupRangeDescriptor) String() string            { return proto.CompactTextString(m) }
func (*BackupRangeDescriptor) ProtoMessage()               {}
func (*BackupRangeDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorBackup, []int{0} }

// BackupDescriptor represents a consistent snapshot of ranges.
//
// Each range snapshot includes a path to data that is a diff of the data in
// that key range between a start and end timestamp. The end timestamp of all
// ranges in a backup is the same, but the start may vary (to allow individual
// tables to be backed up on different schedules).
type BackupDescriptor struct {
	EndTime cockroach_util_hlc.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime" json:"end_time"`
	Ranges  []BackupRangeDescriptor      `protobuf:"bytes,2,rep,name=ranges" json:"ranges"`
	SQL     []Descriptor                 `protobuf:"bytes,3,rep,name=sql" json:"sql"`
}

func (m *BackupDescriptor) Reset()                    { *m = BackupDescriptor{} }
func (m *BackupDescriptor) String() string            { return proto.CompactTextString(m) }
func (*BackupDescriptor) ProtoMessage()               {}
func (*BackupDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorBackup, []int{1} }

func init() {
	proto.RegisterType((*BackupRangeDescriptor)(nil), "cockroach.sql.sqlbase.BackupRangeDescriptor")
	proto.RegisterType((*BackupDescriptor)(nil), "cockroach.sql.sqlbase.BackupDescriptor")
}
func (m *BackupRangeDescriptor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BackupRangeDescriptor) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBackup(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	if len(m.StartKey) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBackup(data, i, uint64(len(m.StartKey)))
		i += copy(data[i:], m.StartKey)
	}
	if len(m.EndKey) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBackup(data, i, uint64(len(m.EndKey)))
		i += copy(data[i:], m.EndKey)
	}
	data[i] = 0x22
	i++
	i = encodeVarintBackup(data, i, uint64(m.StartTime.Size()))
	n1, err := m.StartTime.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *BackupDescriptor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BackupDescriptor) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintBackup(data, i, uint64(m.EndTime.Size()))
	n2, err := m.EndTime.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Ranges) > 0 {
		for _, msg := range m.Ranges {
			data[i] = 0x12
			i++
			i = encodeVarintBackup(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SQL) > 0 {
		for _, msg := range m.SQL {
			data[i] = 0x1a
			i++
			i = encodeVarintBackup(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Backup(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Backup(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBackup(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *BackupRangeDescriptor) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	l = m.StartTime.Size()
	n += 1 + l + sovBackup(uint64(l))
	return n
}

func (m *BackupDescriptor) Size() (n int) {
	var l int
	_ = l
	l = m.EndTime.Size()
	n += 1 + l + sovBackup(uint64(l))
	if len(m.Ranges) > 0 {
		for _, e := range m.Ranges {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	if len(m.SQL) > 0 {
		for _, e := range m.SQL {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	return n
}

func sovBackup(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBackup(x uint64) (n int) {
	return sovBackup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BackupRangeDescriptor) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupRangeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupRangeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], data[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], data[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartTime.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupDescriptor) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndTime.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = append(m.Ranges, BackupRangeDescriptor{})
			if err := m.Ranges[len(m.Ranges)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQL = append(m.SQL, Descriptor{})
			if err := m.SQL[len(m.SQL)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBackup(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBackup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBackup(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBackup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBackup   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cockroach/sql/sqlbase/backup.proto", fileDescriptorBackup) }

var fileDescriptorBackup = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0x3f, 0x6b, 0xe3, 0x30,
	0x18, 0xc6, 0x23, 0x3b, 0xe4, 0x8f, 0x72, 0xc3, 0x61, 0x2e, 0x60, 0x02, 0xe7, 0x38, 0x19, 0x0e,
	0x0f, 0x41, 0x3e, 0x72, 0xfb, 0x71, 0x98, 0x5b, 0xee, 0xd2, 0x0e, 0x75, 0x3b, 0x94, 0x2e, 0xc5,
	0x96, 0x85, 0x6d, 0xe2, 0x44, 0x8e, 0x24, 0x0f, 0xf9, 0x08, 0xdd, 0xfa, 0xb1, 0x32, 0x76, 0xec,
	0x14, 0x52, 0xf7, 0x5b, 0x74, 0x2a, 0x92, 0xdd, 0x24, 0x43, 0x0a, 0xa5, 0x83, 0xcd, 0xcb, 0x8b,
	0x9e, 0x9f, 0x9e, 0xf7, 0x79, 0x05, 0xc7, 0x98, 0xe2, 0x39, 0xa3, 0x01, 0x4e, 0x5c, 0xbe, 0xca,
	0xe4, 0x17, 0x06, 0x9c, 0xb8, 0x61, 0x80, 0xe7, 0x45, 0x8e, 0x72, 0x46, 0x05, 0x35, 0xfa, 0xfb,
	0x33, 0x88, 0xaf, 0x32, 0x54, 0x9f, 0x19, 0xfc, 0x38, 0x2d, 0xe5, 0x82, 0x15, 0x58, 0x14, 0x8c,
	0x44, 0x95, 0x7c, 0x70, 0x74, 0x45, 0x21, 0xd2, 0xcc, 0x4d, 0x32, 0xec, 0x8a, 0x74, 0x41, 0xb8,
	0x08, 0x16, 0xf5, 0x15, 0x83, 0x6f, 0x31, 0x8d, 0xa9, 0x2a, 0x5d, 0x59, 0x55, 0xdd, 0xf1, 0x9d,
	0x06, 0xfb, 0x9e, 0x72, 0xe2, 0x07, 0xcb, 0x98, 0xfc, 0x25, 0x1c, 0xb3, 0x34, 0x17, 0x94, 0x19,
	0x06, 0x6c, 0xe6, 0x81, 0x48, 0x4c, 0x60, 0x03, 0xa7, 0xeb, 0xab, 0xda, 0x38, 0x87, 0x5d, 0x2e,
	0x02, 0x26, 0x6e, 0xe7, 0x64, 0x6d, 0x6a, 0x36, 0x70, 0xbe, 0x78, 0x3f, 0x5f, 0xb6, 0xc3, 0x49,
	0x9c, 0x8a, 0xa4, 0x08, 0x11, 0xa6, 0x0b, 0x77, 0xef, 0x24, 0x0a, 0x0f, 0xb5, 0xab, 0xfe, 0x79,
	0x88, 0x66, 0x64, 0xed, 0x77, 0x14, 0x62, 0x46, 0xd6, 0xc6, 0x3f, 0xd8, 0x26, 0xcb, 0x48, 0xc1,
	0xf4, 0x4f, 0xc2, 0x5a, 0x64, 0x19, 0x49, 0x94, 0x07, 0x61, 0xe5, 0x4c, 0x8e, 0x6d, 0x36, 0x6d,
	0xe0, 0xf4, 0xa6, 0xdf, 0xd1, 0x21, 0x55, 0x19, 0x0b, 0x4a, 0x32, 0x8c, 0xae, 0xde, 0x62, 0xf1,
	0x9a, 0x9b, 0xed, 0xb0, 0xe1, 0x57, 0x03, 0xc9, 0xee, 0x78, 0x07, 0xe0, 0xd7, 0x2a, 0x8b, 0xa3,
	0x18, 0x7e, 0xc3, 0x8e, 0xf4, 0xa8, 0xb0, 0xe0, 0xe3, 0x58, 0x39, 0x98, 0xec, 0x19, 0xff, 0x61,
	0x8b, 0xc9, 0x64, 0xb9, 0xa9, 0xd9, 0xba, 0xd3, 0x9b, 0x4e, 0xd0, 0xc9, 0x55, 0xa3, 0x93, 0x4b,
	0xa8, 0x61, 0x35, 0xc1, 0xf8, 0x03, 0x75, 0xbe, 0xca, 0x4c, 0x5d, 0x81, 0x46, 0xef, 0x80, 0x8e,
	0xd4, 0x3d, 0xa9, 0x2e, 0xb7, 0x43, 0xfd, 0xf2, 0xe2, 0xcc, 0x97, 0x52, 0x6f, 0xb4, 0x79, 0xb2,
	0x1a, 0x9b, 0xd2, 0x02, 0x0f, 0xa5, 0x05, 0x1e, 0x4b, 0x0b, 0xec, 0x4a, 0x0b, 0xdc, 0x3f, 0x5b,
	0x8d, 0x9b, 0x76, 0xad, 0xbf, 0xd6, 0xc2, 0x96, 0x7a, 0x1a, 0xbf, 0x5e, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xed, 0x15, 0x5a, 0x03, 0xb9, 0x02, 0x00, 0x00,
}
