# Load the components that lets us use cmake/make in third party deps.
load("@rules_foreign_cc//foreign_cc:cmake.bzl", "cmake")
load("@rules_foreign_cc//foreign_cc:configure.bzl", "configure_make")

# TODO(irfansharif): All the cmake cache entries below were cargo-culted from
# the Makefile. We may need to programatically set them depending on the
# machine bazel is being run on. For now the only tested variant are Macbooks.

# Define the build target for libjemalloc.
configure_make(
    name = "libjemalloc",
    autoconf = True,
    configure_env_vars = {
        "AR": "",
    },
    configure_in_place = True,
    configure_options = [
        "--enable-prof",
    ],
    lib_source = "@jemalloc//:all",
    make_commands = [
        "make build_lib_static",
        "mkdir -p libjemalloc/lib",
        "cp lib/libjemalloc.a libjemalloc/lib",
        "cp -r include libjemalloc",
    ],
    out_static_libs = ["libjemalloc.a"],
    visibility = ["//visibility:public"],
)

# Define the build target for libproj.
cmake(
    name = "libproj",
    cache_entries = {
        "CMAKE_BUILD_TYPE": "Release",
        "BUILD_LIBPROJ_SHARED": "OFF",
    },
    # As of this writing (2021-05-05), foreign_cc
    # only knows about windows, darwin and linux.
    cmake_options = select({
        "@io_bazel_rules_go//go/platform:windows": ["-GNinja"],
        "//conditions:default": ["-GUnix Makefiles"],
    }),
    lib_source = "@proj//:all",
    out_static_libs = ["libproj.a"],
    visibility = ["//visibility:public"],
)

# Define the targets for libgeos.
cmake(
    name = "libgeos",
    cache_entries = {
        "CMAKE_BUILD_TYPE": "Release",
        "CMAKE_C_FLAGS": "-fPIC",
        "CMAKE_CXX_FLAGS": "-fPIC",
    },
    # As of this writing (2021-05-05), foreign_cc
    # only knows about windows, darwin and linux.
    cmake_options = select({
        "@io_bazel_rules_go//go/platform:windows": ["-GNinja"],
        "//conditions:default": ["-GUnix Makefiles"],
    }),
    lib_source = "@geos//:all",
    make_commands = [
        "mkdir -p libgeos/lib",
        "make --no-print-directory geos_c",
    ] + select({
        "@io_bazel_rules_go//go/platform:darwin": [
            "cp -L $BUILD_TMPDIR/lib/libgeos.dylib libgeos/lib",
            "cp -L $BUILD_TMPDIR/lib/libgeos_c.dylib libgeos/lib",
            # TODO(#bazel): install_name_tool is also required here for release.
        ],
        "@io_bazel_rules_go//go/platform:windows": [
            # NOTE: Windows ends up in bin/ on the BUILD_TMPDIR.
            "cp -L $BUILD_TMPDIR/bin/libgeos.dll libgeos/lib",
            "cp -L $BUILD_TMPDIR/bin/libgeos_c.dll libgeos/lib",
        ],
        "//conditions:default": [
            "cp -L $BUILD_TMPDIR/lib/libgeos.so libgeos/lib",
            "cp -L $BUILD_TMPDIR/lib/libgeos_c.so libgeos/lib",
            # TODO(#bazel): patchelf is also required here for release.
        ],
    }),
    out_shared_libs = select({
        "@io_bazel_rules_go//go/platform:darwin": [
            "libgeos_c.dylib",
            "libgeos.dylib",
        ],
        "@io_bazel_rules_go//go/platform:windows": [
            "libgeos_c.dll",
            "libgeos.dll",
        ],
        "//conditions:default": [
            "libgeos_c.so",
            "libgeos.so",
        ],
    }),
    visibility = ["//visibility:public"],
)

# Define the build target for libroach.
#
# Bazel also expects the library archive and the include headers to be placed
# in a certain path, so we fix it all up accordingly within make_commands.
cmake(
    name = "libroach",
    cache_entries = {
        "CMAKE_TARGET_MESSAGES": "OFF",
        "CMAKE_BUILD_TYPE": "Release",
    },
    # As of this writing (2021-05-05), foreign_cc
    # only knows about windows, darwin and linux.
    cmake_options = select({
        "@io_bazel_rules_go//go/platform:windows": ["-GNinja"],
        "//conditions:default": ["-GUnix Makefiles"],
    }),
    lib_source = "@libroach//:all",
    make_commands = [
        "make roach",
        "mkdir -p libroach/lib",
        "cp libroach.a libroach/lib/libroach.a",
        "cp -r $EXT_BUILD_ROOT/external/libroach/include libroach",
    ],
    out_static_libs = ["libroach.a"],
    tools_deps = [
        "@libroach//:all",
    ],
    visibility = ["//visibility:public"],
    deps = [],
)

# Define the build target for kerberos.
#
# TODO(irfansharif): Kerboros is not used for anything other than Linux.
# The following has not been tested as yet.
configure_make(
    name = "libkrb5",
    autoreconf = True,
    configure_command = "src/configure",
    configure_env_vars = {
        "CPFLAGS": "",
        "CXXFLAGS": "",
    },
    configure_options = [
        "--enable-static",
        "--disable-shared",
    ] + select({
        "//conditions:default": ["AR=/usr/bin/ar"],
    }),
    lib_source = "@krb5//:all",
    make_commands = [
        "make",
        "mkdir -p libkrb5/lib",
        "cp libkrb5/libgssapi_krb5.a libkrb5/lib",
    ],
    out_static_libs = ["libgssapi_krb5.a"],
    visibility = ["//visibility:public"],
)

# This is extremely stupid and unnecessary, but in certain cases to depend on
# the output of a `cmake` target, we need to launder through a filegroup:
# https://github.com/bazelbuild/rules_foreign_cc/issues/619#issuecomment-844473637
# This is apparently a bug. In the meantime, people can depend on the :*_files
# targets rather than :libgeos where it matters.
filegroup(
    name = "libgeos_files",
    srcs = [":libgeos"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "libroach_files",
    srcs = [":libroach"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "libproj_files",
    srcs = [":libproj"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "libedit_files",
    srcs = ["@com_github_knz_go_libedit//unix:edit"],
    visibility = ["//visibility:public"],
)
