# Load the components that lets us use cmake/make in third party deps.
load("@rules_foreign_cc//foreign_cc:cmake.bzl", "cmake")
load("@rules_foreign_cc//foreign_cc:configure.bzl", "configure_make")

# Define the build target for libjemalloc.
configure_make(
    name = "libjemalloc",
    autoconf = True,
    configure_in_place = True,
    configure_options = [
        "--enable-prof",
    ] + select({
        "@io_bazel_rules_go//go/platform:windows": ["--host=x86_64-w64-mingw32"],
        "@io_bazel_rules_go//go/platform:darwin": ["--host=x86_64-apple-darwin19"],
        "@io_bazel_rules_go//go/platform:linux_arm64": ["--host=aarch64-unknown-linux-gnu"],
        "//conditions:default": [],
    }),
    env = select({
        "//build/toolchains:dev": {"AR": ""},
        "//conditions:default": {},
    }),
    lib_source = "@jemalloc//:all",
    out_static_libs = select({
        "@io_bazel_rules_go//go/platform:windows": ["jemalloc.lib"],
        "//conditions:default": ["libjemalloc.a"],
    }),
    targets = [
        "build_lib_static",
        "install_lib",
        "install_include",
    ],
    visibility = ["//visibility:public"],
)

# Define the build target for libproj.
cmake(
    name = "libproj",
    cache_entries = select({
        # TODO(ricky): The repetition here is dumb, but I don't know a cleaner
        # way to do it?
        # https://github.com/bazelbuild/bazel/issues/12457 would help.
        "@io_bazel_rules_go//go/platform:windows": {
            "BUILD_LIBPROJ_SHARED": "OFF",
            "CMAKE_BUILD_TYPE": "Release",
            "CMAKE_SYSTEM_NAME": "Generic",
        },
        "@io_bazel_rules_go//go/platform:darwin": {
            "BUILD_LIBPROJ_SHARED": "OFF",
            "CMAKE_BUILD_TYPE": "Release",
            "CMAKE_SYSTEM_NAME": "Generic",
        },
        "//conditions:default": {
            "BUILD_LIBPROJ_SHARED": "OFF",
            "CMAKE_BUILD_TYPE": "Release",
        },
    }),
    generate_args = ["-GUnix Makefiles"],
    lib_source = "@proj//:all",
    out_static_libs = ["libproj.a"],
    visibility = ["//visibility:public"],
)

# Define the targets for libgeos.
cmake(
    name = "libgeos",
    cache_entries = select({
        "@io_bazel_rules_go//go/platform:windows": {
            "CMAKE_BUILD_TYPE": "Release",
            "CMAKE_C_FLAGS": "-fPIC",
            "CMAKE_CXX_FLAGS": "-fPIC",
            "CMAKE_SYSTEM_NAME": "Windows",
        },
        "@io_bazel_rules_go//go/platform:darwin": {
            "CMAKE_BUILD_TYPE": "Release",
            "CMAKE_C_FLAGS": "-fPIC",
            "CMAKE_CXX_FLAGS": "-fPIC",
            "CMAKE_SYSTEM_NAME": "Darwin",
        },
        "//conditions:default": {
            "CMAKE_BUILD_TYPE": "Release",
            "CMAKE_C_FLAGS": "-fPIC",
            "CMAKE_CXX_FLAGS": "-fPIC",
        },
    }),
    data = select({
        "//build/toolchains:is_cross_macos": [
            "@toolchain_cross_x86_64-apple-darwin19//:bin/x86_64-apple-darwin19-install_name_tool",
            "@toolchain_cross_x86_64-apple-darwin19//:bin/x86_64-apple-darwin19-otool",
        ],
        "//conditions:default": [],
    }),
    env = select({
        "//build/toolchains:is_cross_macos": {
            "CMAKE_INSTALL_NAME_TOOL": "$(execpath @toolchain_cross_x86_64-apple-darwin19//:bin/x86_64-apple-darwin19-install_name_tool)",
            "OTOOL": "$(execpath @toolchain_cross_x86_64-apple-darwin19//:bin/x86_64-apple-darwin19-otool)",
        },
        "//conditions:default": {},
    }),
    generate_args = ["-GUnix Makefiles"],
    lib_source = "@geos//:all",
    out_lib_dir = select({
        "@io_bazel_rules_go//go/platform:windows": "bin",
        "//conditions:default": "lib",
    }),
    out_shared_libs = select({
        "@io_bazel_rules_go//go/platform:darwin": [
            "libgeos_c.dylib",
            "libgeos.dylib",
        ],
        "@io_bazel_rules_go//go/platform:windows": [
            "libgeos_c.dll",
            "libgeos.dll",
        ],
        "//conditions:default": [
            "libgeos_c.so",
            "libgeos.so",
        ],
    }),
    postfix_script = "mkdir -p libgeos/lib\n" + select({
        "//build/toolchains:is_cross_macos": (
            "cp -L lib/libgeos.3.8.1.dylib $INSTALLDIR/lib/libgeos.dylib\n" +
            "PREFIX=$($OTOOL -D $INSTALLDIR/lib/libgeos_c.dylib | tail -n1 | rev | cut -d/ -f2- | rev)\n" +
            "$CMAKE_INSTALL_NAME_TOOL -id @rpath/libgeos.3.8.1.dylib $INSTALLDIR/lib/libgeos.dylib\n" +
            "$CMAKE_INSTALL_NAME_TOOL -id @rpath/libgeos_c.1.dylib $INSTALLDIR/lib/libgeos_c.dylib\n" +
            "$CMAKE_INSTALL_NAME_TOOL -change $PREFIX/libgeos.3.8.1.dylib @rpath/libgeos.3.8.1.dylib $INSTALLDIR/lib/libgeos_c.dylib\n"
        ),
        "@io_bazel_rules_go//go/platform:darwin": "cp -L lib/libgeos.3.8.1.dylib $INSTALLDIR/lib/libgeos.dylib",
        "@io_bazel_rules_go//go/platform:windows": "",
        "//build/toolchains:is_cross_linux": (
            "cp -L lib/libgeos.so.3.8.1 $INSTALLDIR/lib/libgeos.so\n" +
            "patchelf --set-rpath /usr/local/lib/cockroach/ $INSTALLDIR/lib/libgeos_c.so\n" +
            "patchelf --set-soname libgeos.so $INSTALLDIR/lib/libgeos.so\n" +
            "patchelf --replace-needed libgeos.so.3.8.1 libgeos.so $INSTALLDIR/lib/libgeos_c.so\n"
        ),
        "//conditions:default": "cp -L lib/libgeos.so.3.8.1 $INSTALLDIR/lib/libgeos.so",
    }),
    targets = ["geos_c"],
    visibility = ["//visibility:public"],
)

# Define the build target for kerberos.
configure_make(
    name = "libkrb5",
    autoreconf = True,
    autoreconf_directory = "src",
    autoreconf_options = [
        "-Wno-obsolete",
    ],
    configure_command = "src/configure",
    configure_in_place = True,
    configure_options = [
        "--enable-static",
        "--disable-shared",
    ],
    # We specify -fcommon to get around duplicate definition errors in recent gcc.
    copts = ["-fcommon"],
    data = [":autom4te"],
    env = {
        "AUTOM4TE": "$(execpath :autom4te)",
    },
    lib_source = "@krb5//:all",
    out_static_libs = [
        "libgssapi_krb5.a",
        "libkrb5.a",
        "libkrb5support.a",
        "libk5crypto.a",
        "libcom_err.a",
    ],
    postfix_script = ("""mkdir -p libkrb5/lib
cp lib/libcom_err.a libkrb5/lib
cp lib/libgssapi_krb5.a libkrb5/lib
cp lib/libkrb5.a libkrb5/lib
cp lib/libkrb5support.a libkrb5/lib
cp lib/libk5crypto.a libkrb5/lib
mkdir -p libkrb5/include/gssapi
cp include/gssapi/gssapi.h libkrb5/include/gssapi"""),
    visibility = ["//visibility:public"],
)

# This is extremely stupid and unnecessary, but in certain cases to depend on
# the output of a `cmake` target, we need to launder through a filegroup:
# https://github.com/bazelbuild/rules_foreign_cc/issues/619#issuecomment-844473637
# This is apparently a bug. In the meantime, people can depend on the :*_files
# targets rather than :libgeos where it matters.
filegroup(
    name = "libgeos_files",
    srcs = [":libgeos"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "libproj_files",
    srcs = [":libproj"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "libedit_files",
    srcs = ["@com_github_knz_go_libedit//unix:edit"],
    visibility = ["//visibility:public"],
)
