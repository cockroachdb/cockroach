// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccl/storageccl/engineccl/enginepbccl/key_registry.proto

#include "ccl/storageccl/engineccl/enginepbccl/key_registry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataKeysRegistry_DataKeysEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataKeysRegistry_StoreKeysEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SecretKey;
}  // namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto
namespace cockroach {
namespace ccl {
namespace storageccl {
namespace engineccl {
namespace enginepbccl {
class DataKeysRegistry_StoreKeysEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataKeysRegistry_StoreKeysEntry_DoNotUse>
      _instance;
} _DataKeysRegistry_StoreKeysEntry_DoNotUse_default_instance_;
class DataKeysRegistry_DataKeysEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataKeysRegistry_DataKeysEntry_DoNotUse>
      _instance;
} _DataKeysRegistry_DataKeysEntry_DoNotUse_default_instance_;
class DataKeysRegistryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataKeysRegistry>
      _instance;
} _DataKeysRegistry_default_instance_;
class KeyInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyInfo>
      _instance;
} _KeyInfo_default_instance_;
class SecretKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecretKey>
      _instance;
} _SecretKey_default_instance_;
class EncryptionSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncryptionSettings>
      _instance;
} _EncryptionSettings_default_instance_;
}  // namespace enginepbccl
}  // namespace engineccl
}  // namespace storageccl
}  // namespace ccl
}  // namespace cockroach
namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto {
static void InitDefaultsDataKeysRegistry_StoreKeysEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::ccl::storageccl::engineccl::enginepbccl::_DataKeysRegistry_StoreKeysEntry_DoNotUse_default_instance_;
    new (ptr) ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_StoreKeysEntry_DoNotUse();
  }
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_StoreKeysEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataKeysRegistry_StoreKeysEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataKeysRegistry_StoreKeysEntry_DoNotUse}, {
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_KeyInfo.base,}};

static void InitDefaultsDataKeysRegistry_DataKeysEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::ccl::storageccl::engineccl::enginepbccl::_DataKeysRegistry_DataKeysEntry_DoNotUse_default_instance_;
    new (ptr) ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_DataKeysEntry_DoNotUse();
  }
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_DataKeysEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataKeysRegistry_DataKeysEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataKeysRegistry_DataKeysEntry_DoNotUse}, {
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_SecretKey.base,}};

static void InitDefaultsDataKeysRegistry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::ccl::storageccl::engineccl::enginepbccl::_DataKeysRegistry_default_instance_;
    new (ptr) ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DataKeysRegistry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDataKeysRegistry}, {
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_DataKeysRegistry_StoreKeysEntry_DoNotUse.base,
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_DataKeysRegistry_DataKeysEntry_DoNotUse.base,}};

static void InitDefaultsKeyInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::ccl::storageccl::engineccl::enginepbccl::_KeyInfo_default_instance_;
    new (ptr) ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyInfo}, {}};

static void InitDefaultsSecretKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::ccl::storageccl::engineccl::enginepbccl::_SecretKey_default_instance_;
    new (ptr) ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SecretKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSecretKey}, {
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_KeyInfo.base,}};

static void InitDefaultsEncryptionSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::ccl::storageccl::engineccl::enginepbccl::_EncryptionSettings_default_instance_;
    new (ptr) ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncryptionSettings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncryptionSettings}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DataKeysRegistry_StoreKeysEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataKeysRegistry_DataKeysEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataKeysRegistry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecretKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncryptionSettings.base);
}

}  // namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto
namespace cockroach {
namespace ccl {
namespace storageccl {
namespace engineccl {
namespace enginepbccl {
bool EncryptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

DataKeysRegistry_StoreKeysEntry_DoNotUse::DataKeysRegistry_StoreKeysEntry_DoNotUse() {}
DataKeysRegistry_StoreKeysEntry_DoNotUse::DataKeysRegistry_StoreKeysEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void DataKeysRegistry_StoreKeysEntry_DoNotUse::MergeFrom(const DataKeysRegistry_StoreKeysEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

DataKeysRegistry_DataKeysEntry_DoNotUse::DataKeysRegistry_DataKeysEntry_DoNotUse() {}
DataKeysRegistry_DataKeysEntry_DoNotUse::DataKeysRegistry_DataKeysEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void DataKeysRegistry_DataKeysEntry_DoNotUse::MergeFrom(const DataKeysRegistry_DataKeysEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void DataKeysRegistry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataKeysRegistry::kStoreKeysFieldNumber;
const int DataKeysRegistry::kDataKeysFieldNumber;
const int DataKeysRegistry::kActiveStoreKeyIdFieldNumber;
const int DataKeysRegistry::kActiveDataKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataKeysRegistry::DataKeysRegistry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_DataKeysRegistry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
}
DataKeysRegistry::DataKeysRegistry(const DataKeysRegistry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_keys_.MergeFrom(from.store_keys_);
  data_keys_.MergeFrom(from.data_keys_);
  active_store_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.active_store_key_id().size() > 0) {
    active_store_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.active_store_key_id_);
  }
  active_data_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.active_data_key_id().size() > 0) {
    active_data_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.active_data_key_id_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
}

void DataKeysRegistry::SharedCtor() {
  active_store_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_data_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataKeysRegistry::~DataKeysRegistry() {
  // @@protoc_insertion_point(destructor:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  SharedDtor();
}

void DataKeysRegistry::SharedDtor() {
  active_store_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_data_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataKeysRegistry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataKeysRegistry& DataKeysRegistry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_DataKeysRegistry.base);
  return *internal_default_instance();
}


void DataKeysRegistry::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_keys_.Clear();
  data_keys_.Clear();
  active_store_key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_data_key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DataKeysRegistry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo> store_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DataKeysRegistry_StoreKeysEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              DataKeysRegistry_StoreKeysEntry_DoNotUse,
              ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo > > parser(&store_keys_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry.StoreKeysEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey> data_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DataKeysRegistry_DataKeysEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              DataKeysRegistry_DataKeysEntry_DoNotUse,
              ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey > > parser(&data_keys_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry.DataKeysEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string active_store_key_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_active_store_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->active_store_key_id().data(), static_cast<int>(this->active_store_key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry.active_store_key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string active_data_key_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_active_data_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->active_data_key_id().data(), static_cast<int>(this->active_data_key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry.active_data_key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  return false;
#undef DO_
}

void DataKeysRegistry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo> store_keys = 1;
  if (!this->store_keys().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry.StoreKeysEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->store_keys().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->store_keys().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo >::const_iterator
          it = this->store_keys().begin();
          it != this->store_keys().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DataKeysRegistry_StoreKeysEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(store_keys_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<DataKeysRegistry_StoreKeysEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo >::const_iterator
          it = this->store_keys().begin();
          it != this->store_keys().end(); ++it) {
        entry.reset(store_keys_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey> data_keys = 2;
  if (!this->data_keys().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry.DataKeysEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->data_keys().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->data_keys().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey >::const_iterator
          it = this->data_keys().begin();
          it != this->data_keys().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DataKeysRegistry_DataKeysEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_keys_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<DataKeysRegistry_DataKeysEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey >::const_iterator
          it = this->data_keys().begin();
          it != this->data_keys().end(); ++it) {
        entry.reset(data_keys_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string active_store_key_id = 3;
  if (this->active_store_key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->active_store_key_id().data(), static_cast<int>(this->active_store_key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry.active_store_key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->active_store_key_id(), output);
  }

  // string active_data_key_id = 4;
  if (this->active_data_key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->active_data_key_id().data(), static_cast<int>(this->active_data_key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry.active_data_key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->active_data_key_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
}

size_t DataKeysRegistry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<string, .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo> store_keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->store_keys_size());
  {
    ::std::unique_ptr<DataKeysRegistry_StoreKeysEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo >::const_iterator
        it = this->store_keys().begin();
        it != this->store_keys().end(); ++it) {
      entry.reset(store_keys_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey> data_keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_keys_size());
  {
    ::std::unique_ptr<DataKeysRegistry_DataKeysEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey >::const_iterator
        it = this->data_keys().begin();
        it != this->data_keys().end(); ++it) {
      entry.reset(data_keys_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string active_store_key_id = 3;
  if (this->active_store_key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->active_store_key_id());
  }

  // string active_data_key_id = 4;
  if (this->active_data_key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->active_data_key_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataKeysRegistry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataKeysRegistry*>(&from));
}

void DataKeysRegistry::MergeFrom(const DataKeysRegistry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_keys_.MergeFrom(from.store_keys_);
  data_keys_.MergeFrom(from.data_keys_);
  if (from.active_store_key_id().size() > 0) {

    active_store_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.active_store_key_id_);
  }
  if (from.active_data_key_id().size() > 0) {

    active_data_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.active_data_key_id_);
  }
}

void DataKeysRegistry::CopyFrom(const DataKeysRegistry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataKeysRegistry::IsInitialized() const {
  return true;
}

void DataKeysRegistry::Swap(DataKeysRegistry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataKeysRegistry::InternalSwap(DataKeysRegistry* other) {
  using std::swap;
  store_keys_.Swap(&other->store_keys_);
  data_keys_.Swap(&other->data_keys_);
  active_store_key_id_.Swap(&other->active_store_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  active_data_key_id_.Swap(&other->active_data_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DataKeysRegistry::GetTypeName() const {
  return "cockroach.ccl.storageccl.engineccl.enginepbccl.DataKeysRegistry";
}


// ===================================================================

void KeyInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyInfo::kEncryptionTypeFieldNumber;
const int KeyInfo::kKeyIdFieldNumber;
const int KeyInfo::kCreationTimeFieldNumber;
const int KeyInfo::kSourceFieldNumber;
const int KeyInfo::kWasExposedFieldNumber;
const int KeyInfo::kParentKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyInfo::KeyInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_KeyInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
}
KeyInfo::KeyInfo(const KeyInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key_id().size() > 0) {
    key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  parent_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent_key_id().size() > 0) {
    parent_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_key_id_);
  }
  ::memcpy(&creation_time_, &from.creation_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&was_exposed_) -
    reinterpret_cast<char*>(&creation_time_)) + sizeof(was_exposed_));
  // @@protoc_insertion_point(copy_constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
}

void KeyInfo::SharedCtor() {
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creation_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_exposed_) -
      reinterpret_cast<char*>(&creation_time_)) + sizeof(was_exposed_));
}

KeyInfo::~KeyInfo() {
  // @@protoc_insertion_point(destructor:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  SharedDtor();
}

void KeyInfo::SharedDtor() {
  key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyInfo& KeyInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_KeyInfo.base);
  return *internal_default_instance();
}


void KeyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creation_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_exposed_) -
      reinterpret_cast<char*>(&creation_time_)) + sizeof(was_exposed_));
  _internal_metadata_.Clear();
}

bool KeyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionType encryption_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encryption_type(static_cast< ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key_id().data(), static_cast<int>(this->key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo.key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 creation_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_exposed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_exposed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parent_key_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent_key_id().data(), static_cast<int>(this->parent_key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo.parent_key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  return false;
#undef DO_
}

void KeyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionType encryption_type = 1;
  if (this->encryption_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encryption_type(), output);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), static_cast<int>(this->key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo.key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key_id(), output);
  }

  // int64 creation_time = 3;
  if (this->creation_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->creation_time(), output);
  }

  // string source = 4;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source(), output);
  }

  // bool was_exposed = 5;
  if (this->was_exposed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->was_exposed(), output);
  }

  // string parent_key_id = 6;
  if (this->parent_key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_key_id().data(), static_cast<int>(this->parent_key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo.parent_key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->parent_key_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
}

size_t KeyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_id());
  }

  // string source = 4;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string parent_key_id = 6;
  if (this->parent_key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_key_id());
  }

  // int64 creation_time = 3;
  if (this->creation_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->creation_time());
  }

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionType encryption_type = 1;
  if (this->encryption_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encryption_type());
  }

  // bool was_exposed = 5;
  if (this->was_exposed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyInfo*>(&from));
}

void KeyInfo::MergeFrom(const KeyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_id().size() > 0) {

    key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.parent_key_id().size() > 0) {

    parent_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_key_id_);
  }
  if (from.creation_time() != 0) {
    set_creation_time(from.creation_time());
  }
  if (from.encryption_type() != 0) {
    set_encryption_type(from.encryption_type());
  }
  if (from.was_exposed() != 0) {
    set_was_exposed(from.was_exposed());
  }
}

void KeyInfo::CopyFrom(const KeyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyInfo::IsInitialized() const {
  return true;
}

void KeyInfo::Swap(KeyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyInfo::InternalSwap(KeyInfo* other) {
  using std::swap;
  key_id_.Swap(&other->key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_key_id_.Swap(&other->parent_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(creation_time_, other->creation_time_);
  swap(encryption_type_, other->encryption_type_);
  swap(was_exposed_, other->was_exposed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string KeyInfo::GetTypeName() const {
  return "cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo";
}


// ===================================================================

void SecretKey::InitAsDefaultInstance() {
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::_SecretKey_default_instance_._instance.get_mutable()->info_ = const_cast< ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo*>(
      ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecretKey::kInfoFieldNumber;
const int SecretKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecretKey::SecretKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_SecretKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
}
SecretKey::SecretKey(const SecretKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_info()) {
    info_ = new ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
}

void SecretKey::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
}

SecretKey::~SecretKey() {
  // @@protoc_insertion_point(destructor:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  SharedDtor();
}

void SecretKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void SecretKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecretKey& SecretKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_SecretKey.base);
  return *internal_default_instance();
}


void SecretKey::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool SecretKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  return false;
#undef DO_
}

void SecretKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_info(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
}

size_t SecretKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecretKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SecretKey*>(&from));
}

void SecretKey::MergeFrom(const SecretKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_info()) {
    mutable_info()->::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo::MergeFrom(from.info());
  }
}

void SecretKey::CopyFrom(const SecretKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecretKey::IsInitialized() const {
  return true;
}

void SecretKey::Swap(SecretKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecretKey::InternalSwap(SecretKey* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SecretKey::GetTypeName() const {
  return "cockroach.ccl.storageccl.engineccl.enginepbccl.SecretKey";
}


// ===================================================================

void EncryptionSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptionSettings::kEncryptionTypeFieldNumber;
const int EncryptionSettings::kKeyIdFieldNumber;
const int EncryptionSettings::kNonceFieldNumber;
const int EncryptionSettings::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptionSettings::EncryptionSettings()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_EncryptionSettings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
}
EncryptionSettings::EncryptionSettings(const EncryptionSettings& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key_id().size() > 0) {
    key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nonce().size() > 0) {
    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  ::memcpy(&encryption_type_, &from.encryption_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&counter_) -
    reinterpret_cast<char*>(&encryption_type_)) + sizeof(counter_));
  // @@protoc_insertion_point(copy_constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
}

void EncryptionSettings::SharedCtor() {
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryption_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counter_) -
      reinterpret_cast<char*>(&encryption_type_)) + sizeof(counter_));
}

EncryptionSettings::~EncryptionSettings() {
  // @@protoc_insertion_point(destructor:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  SharedDtor();
}

void EncryptionSettings::SharedDtor() {
  key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncryptionSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptionSettings& EncryptionSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_EncryptionSettings.base);
  return *internal_default_instance();
}


void EncryptionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryption_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counter_) -
      reinterpret_cast<char*>(&encryption_type_)) + sizeof(counter_));
  _internal_metadata_.Clear();
}

bool EncryptionSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionType encryption_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encryption_type(static_cast< ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key_id().data(), static_cast<int>(this->key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings.key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nonce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 counter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  return false;
#undef DO_
}

void EncryptionSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionType encryption_type = 1;
  if (this->encryption_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encryption_type(), output);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), static_cast<int>(this->key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings.key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key_id(), output);
  }

  // bytes nonce = 3;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nonce(), output);
  }

  // uint32 counter = 4;
  if (this->counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->counter(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
}

size_t EncryptionSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_id());
  }

  // bytes nonce = 3;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nonce());
  }

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionType encryption_type = 1;
  if (this->encryption_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encryption_type());
  }

  // uint32 counter = 4;
  if (this->counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->counter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncryptionSettings*>(&from));
}

void EncryptionSettings::MergeFrom(const EncryptionSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_id().size() > 0) {

    key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.encryption_type() != 0) {
    set_encryption_type(from.encryption_type());
  }
  if (from.counter() != 0) {
    set_counter(from.counter());
  }
}

void EncryptionSettings::CopyFrom(const EncryptionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionSettings::IsInitialized() const {
  return true;
}

void EncryptionSettings::Swap(EncryptionSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptionSettings::InternalSwap(EncryptionSettings* other) {
  using std::swap;
  key_id_.Swap(&other->key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nonce_.Swap(&other->nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encryption_type_, other->encryption_type_);
  swap(counter_, other->counter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EncryptionSettings::GetTypeName() const {
  return "cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionSettings";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enginepbccl
}  // namespace engineccl
}  // namespace storageccl
}  // namespace ccl
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_StoreKeysEntry_DoNotUse* Arena::CreateMaybeMessage< ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_StoreKeysEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_StoreKeysEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_DataKeysEntry_DoNotUse* Arena::CreateMaybeMessage< ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_DataKeysEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry_DataKeysEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry* Arena::CreateMaybeMessage< ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::ccl::storageccl::engineccl::enginepbccl::DataKeysRegistry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* Arena::CreateMaybeMessage< ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey* Arena::CreateMaybeMessage< ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::ccl::storageccl::engineccl::enginepbccl::SecretKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionSettings* Arena::CreateMaybeMessage< ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionSettings >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionSettings >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
