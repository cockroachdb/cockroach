// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccl/storageccl/engineccl/enginepbccl/stats.proto

#include "ccl/storageccl/engineccl/enginepbccl/stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyInfo;
}  // namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto
namespace cockroach {
namespace ccl {
namespace storageccl {
namespace engineccl {
namespace enginepbccl {
class EncryptionStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncryptionStatus>
      _instance;
} _EncryptionStatus_default_instance_;
}  // namespace enginepbccl
}  // namespace engineccl
}  // namespace storageccl
}  // namespace ccl
}  // namespace cockroach
namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto {
static void InitDefaultsEncryptionStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::ccl::storageccl::engineccl::enginepbccl::_EncryptionStatus_default_instance_;
    new (ptr) ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EncryptionStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEncryptionStatus}, {
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fkey_5fregistry_2eproto::scc_info_KeyInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EncryptionStatus.base);
}

}  // namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto
namespace cockroach {
namespace ccl {
namespace storageccl {
namespace engineccl {
namespace enginepbccl {

// ===================================================================

void EncryptionStatus::InitAsDefaultInstance() {
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::_EncryptionStatus_default_instance_._instance.get_mutable()->active_store_key_ = const_cast< ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo*>(
      ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo::internal_default_instance());
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::_EncryptionStatus_default_instance_._instance.get_mutable()->active_data_key_ = const_cast< ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo*>(
      ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo::internal_default_instance());
}
void EncryptionStatus::clear_active_store_key() {
  if (GetArenaNoVirtual() == NULL && active_store_key_ != NULL) {
    delete active_store_key_;
  }
  active_store_key_ = NULL;
}
void EncryptionStatus::clear_active_data_key() {
  if (GetArenaNoVirtual() == NULL && active_data_key_ != NULL) {
    delete active_data_key_;
  }
  active_data_key_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptionStatus::kActiveStoreKeyFieldNumber;
const int EncryptionStatus::kActiveDataKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptionStatus::EncryptionStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto::scc_info_EncryptionStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
}
EncryptionStatus::EncryptionStatus(const EncryptionStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_active_store_key()) {
    active_store_key_ = new ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo(*from.active_store_key_);
  } else {
    active_store_key_ = NULL;
  }
  if (from.has_active_data_key()) {
    active_data_key_ = new ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo(*from.active_data_key_);
  } else {
    active_data_key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
}

void EncryptionStatus::SharedCtor() {
  ::memset(&active_store_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_data_key_) -
      reinterpret_cast<char*>(&active_store_key_)) + sizeof(active_data_key_));
}

EncryptionStatus::~EncryptionStatus() {
  // @@protoc_insertion_point(destructor:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  SharedDtor();
}

void EncryptionStatus::SharedDtor() {
  if (this != internal_default_instance()) delete active_store_key_;
  if (this != internal_default_instance()) delete active_data_key_;
}

void EncryptionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptionStatus& EncryptionStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto::scc_info_EncryptionStatus.base);
  return *internal_default_instance();
}


void EncryptionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && active_store_key_ != NULL) {
    delete active_store_key_;
  }
  active_store_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && active_data_key_ != NULL) {
    delete active_data_key_;
  }
  active_data_key_ = NULL;
  _internal_metadata_.Clear();
}

bool EncryptionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_store_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_store_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_data_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_data_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  return false;
#undef DO_
}

void EncryptionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_store_key = 1;
  if (this->has_active_store_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_active_store_key(), output);
  }

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_data_key = 2;
  if (this->has_active_data_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_active_data_key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
}

size_t EncryptionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_store_key = 1;
  if (this->has_active_store_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *active_store_key_);
  }

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_data_key = 2;
  if (this->has_active_data_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *active_data_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncryptionStatus*>(&from));
}

void EncryptionStatus::MergeFrom(const EncryptionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_active_store_key()) {
    mutable_active_store_key()->::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo::MergeFrom(from.active_store_key());
  }
  if (from.has_active_data_key()) {
    mutable_active_data_key()->::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo::MergeFrom(from.active_data_key());
  }
}

void EncryptionStatus::CopyFrom(const EncryptionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionStatus::IsInitialized() const {
  return true;
}

void EncryptionStatus::Swap(EncryptionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptionStatus::InternalSwap(EncryptionStatus* other) {
  using std::swap;
  swap(active_store_key_, other->active_store_key_);
  swap(active_data_key_, other->active_data_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EncryptionStatus::GetTypeName() const {
  return "cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enginepbccl
}  // namespace engineccl
}  // namespace storageccl
}  // namespace ccl
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionStatus* Arena::CreateMaybeMessage< ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionStatus >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::ccl::storageccl::engineccl::enginepbccl::EncryptionStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
