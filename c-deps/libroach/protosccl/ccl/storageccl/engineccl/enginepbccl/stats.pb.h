// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccl/storageccl/engineccl/enginepbccl/stats.proto

#ifndef PROTOBUF_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto__INCLUDED
#define PROTOBUF_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ccl/storageccl/engineccl/enginepbccl/key_registry.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsEncryptionStatusImpl();
void InitDefaultsEncryptionStatus();
inline void InitDefaults() {
  InitDefaultsEncryptionStatus();
}
}  // namespace protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto
namespace cockroach {
namespace ccl {
namespace storageccl {
namespace engineccl {
namespace enginepbccl {
class EncryptionStatus;
class EncryptionStatusDefaultTypeInternal;
extern EncryptionStatusDefaultTypeInternal _EncryptionStatus_default_instance_;
}  // namespace enginepbccl
}  // namespace engineccl
}  // namespace storageccl
}  // namespace ccl
}  // namespace cockroach
namespace cockroach {
namespace ccl {
namespace storageccl {
namespace engineccl {
namespace enginepbccl {

// ===================================================================

class EncryptionStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus) */ {
 public:
  EncryptionStatus();
  virtual ~EncryptionStatus();

  EncryptionStatus(const EncryptionStatus& from);

  inline EncryptionStatus& operator=(const EncryptionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncryptionStatus(EncryptionStatus&& from) noexcept
    : EncryptionStatus() {
    *this = ::std::move(from);
  }

  inline EncryptionStatus& operator=(EncryptionStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const EncryptionStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptionStatus* internal_default_instance() {
    return reinterpret_cast<const EncryptionStatus*>(
               &_EncryptionStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EncryptionStatus* other);
  friend void swap(EncryptionStatus& a, EncryptionStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncryptionStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  EncryptionStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const EncryptionStatus& from);
  void MergeFrom(const EncryptionStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptionStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_store_key = 1;
  bool has_active_store_key() const;
  void clear_active_store_key();
  static const int kActiveStoreKeyFieldNumber = 1;
  const ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo& active_store_key() const;
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* release_active_store_key();
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* mutable_active_store_key();
  void set_allocated_active_store_key(::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* active_store_key);

  // .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_data_key = 2;
  bool has_active_data_key() const;
  void clear_active_data_key();
  static const int kActiveDataKeyFieldNumber = 2;
  const ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo& active_data_key() const;
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* release_active_data_key();
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* mutable_active_data_key();
  void set_allocated_active_data_key(::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* active_data_key);

  // @@protoc_insertion_point(class_scope:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* active_store_key_;
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* active_data_key_;
  mutable int _cached_size_;
  friend struct ::protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto::TableStruct;
  friend void ::protobuf_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto::InitDefaultsEncryptionStatusImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptionStatus

// .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_store_key = 1;
inline bool EncryptionStatus::has_active_store_key() const {
  return this != internal_default_instance() && active_store_key_ != NULL;
}
inline const ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo& EncryptionStatus::active_store_key() const {
  const ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* p = active_store_key_;
  // @@protoc_insertion_point(field_get:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus.active_store_key)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo*>(
      &::cockroach::ccl::storageccl::engineccl::enginepbccl::_KeyInfo_default_instance_);
}
inline ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* EncryptionStatus::release_active_store_key() {
  // @@protoc_insertion_point(field_release:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus.active_store_key)
  
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* temp = active_store_key_;
  active_store_key_ = NULL;
  return temp;
}
inline ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* EncryptionStatus::mutable_active_store_key() {
  
  if (active_store_key_ == NULL) {
    active_store_key_ = new ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus.active_store_key)
  return active_store_key_;
}
inline void EncryptionStatus::set_allocated_active_store_key(::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* active_store_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(active_store_key_);
  }
  if (active_store_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      active_store_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, active_store_key, submessage_arena);
    }
    
  } else {
    
  }
  active_store_key_ = active_store_key;
  // @@protoc_insertion_point(field_set_allocated:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus.active_store_key)
}

// .cockroach.ccl.storageccl.engineccl.enginepbccl.KeyInfo active_data_key = 2;
inline bool EncryptionStatus::has_active_data_key() const {
  return this != internal_default_instance() && active_data_key_ != NULL;
}
inline const ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo& EncryptionStatus::active_data_key() const {
  const ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* p = active_data_key_;
  // @@protoc_insertion_point(field_get:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus.active_data_key)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo*>(
      &::cockroach::ccl::storageccl::engineccl::enginepbccl::_KeyInfo_default_instance_);
}
inline ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* EncryptionStatus::release_active_data_key() {
  // @@protoc_insertion_point(field_release:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus.active_data_key)
  
  ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* temp = active_data_key_;
  active_data_key_ = NULL;
  return temp;
}
inline ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* EncryptionStatus::mutable_active_data_key() {
  
  if (active_data_key_ == NULL) {
    active_data_key_ = new ::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus.active_data_key)
  return active_data_key_;
}
inline void EncryptionStatus::set_allocated_active_data_key(::cockroach::ccl::storageccl::engineccl::enginepbccl::KeyInfo* active_data_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(active_data_key_);
  }
  if (active_data_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      active_data_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, active_data_key, submessage_arena);
    }
    
  } else {
    
  }
  active_data_key_ = active_data_key;
  // @@protoc_insertion_point(field_set_allocated:cockroach.ccl.storageccl.engineccl.enginepbccl.EncryptionStatus.active_data_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace enginepbccl
}  // namespace engineccl
}  // namespace storageccl
}  // namespace ccl
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ccl_2fstorageccl_2fengineccl_2fenginepbccl_2fstats_2eproto__INCLUDED
