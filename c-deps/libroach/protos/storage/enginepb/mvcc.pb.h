// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage/enginepb/mvcc.proto

#ifndef PROTOBUF_INCLUDED_storage_2fenginepb_2fmvcc_2eproto
#define PROTOBUF_INCLUDED_storage_2fenginepb_2fmvcc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "storage/enginepb/mvcc3.pb.h"
#include "util/hlc/legacy_timestamp.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fenginepb_2fmvcc_2eproto 

namespace protobuf_storage_2fenginepb_2fmvcc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_storage_2fenginepb_2fmvcc_2eproto
namespace cockroach {
namespace storage {
namespace enginepb {
class MVCCMetadata;
class MVCCMetadataDefaultTypeInternal;
extern MVCCMetadataDefaultTypeInternal _MVCCMetadata_default_instance_;
class MVCCMetadataSubsetForMergeSerialization;
class MVCCMetadataSubsetForMergeSerializationDefaultTypeInternal;
extern MVCCMetadataSubsetForMergeSerializationDefaultTypeInternal _MVCCMetadataSubsetForMergeSerialization_default_instance_;
class MVCCMetadata_SequencedIntent;
class MVCCMetadata_SequencedIntentDefaultTypeInternal;
extern MVCCMetadata_SequencedIntentDefaultTypeInternal _MVCCMetadata_SequencedIntent_default_instance_;
class MVCCStats;
class MVCCStatsDefaultTypeInternal;
extern MVCCStatsDefaultTypeInternal _MVCCStats_default_instance_;
}  // namespace enginepb
}  // namespace storage
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> ::cockroach::storage::enginepb::MVCCMetadata* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCMetadata>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCMetadataSubsetForMergeSerialization* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCMetadataSubsetForMergeSerialization>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCStats* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCStats>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cockroach {
namespace storage {
namespace enginepb {

// ===================================================================

class MVCCMetadata_SequencedIntent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent) */ {
 public:
  MVCCMetadata_SequencedIntent();
  virtual ~MVCCMetadata_SequencedIntent();

  MVCCMetadata_SequencedIntent(const MVCCMetadata_SequencedIntent& from);

  inline MVCCMetadata_SequencedIntent& operator=(const MVCCMetadata_SequencedIntent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCMetadata_SequencedIntent(MVCCMetadata_SequencedIntent&& from) noexcept
    : MVCCMetadata_SequencedIntent() {
    *this = ::std::move(from);
  }

  inline MVCCMetadata_SequencedIntent& operator=(MVCCMetadata_SequencedIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MVCCMetadata_SequencedIntent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCMetadata_SequencedIntent* internal_default_instance() {
    return reinterpret_cast<const MVCCMetadata_SequencedIntent*>(
               &_MVCCMetadata_SequencedIntent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MVCCMetadata_SequencedIntent* other);
  friend void swap(MVCCMetadata_SequencedIntent& a, MVCCMetadata_SequencedIntent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCMetadata_SequencedIntent* New() const final {
    return CreateMaybeMessage<MVCCMetadata_SequencedIntent>(NULL);
  }

  MVCCMetadata_SequencedIntent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCMetadata_SequencedIntent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCMetadata_SequencedIntent& from);
  void MergeFrom(const MVCCMetadata_SequencedIntent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCMetadata_SequencedIntent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent)
 private:
  void set_has_sequence();
  void clear_has_sequence();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 sequence_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCMetadata : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCMetadata) */ {
 public:
  MVCCMetadata();
  virtual ~MVCCMetadata();

  MVCCMetadata(const MVCCMetadata& from);

  inline MVCCMetadata& operator=(const MVCCMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCMetadata(MVCCMetadata&& from) noexcept
    : MVCCMetadata() {
    *this = ::std::move(from);
  }

  inline MVCCMetadata& operator=(MVCCMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MVCCMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCMetadata* internal_default_instance() {
    return reinterpret_cast<const MVCCMetadata*>(
               &_MVCCMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MVCCMetadata* other);
  friend void swap(MVCCMetadata& a, MVCCMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCMetadata* New() const final {
    return CreateMaybeMessage<MVCCMetadata>(NULL);
  }

  MVCCMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCMetadata& from);
  void MergeFrom(const MVCCMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MVCCMetadata_SequencedIntent SequencedIntent;

  // accessors -------------------------------------------------------

  int intent_history_size() const;
  void clear_intent_history();
  static const int kIntentHistoryFieldNumber = 8;
  ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent* mutable_intent_history(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent >*
      mutable_intent_history();
  const ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent& intent_history(int index) const;
  ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent* add_intent_history();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent >&
      intent_history() const;

  // optional bytes raw_bytes = 6;
  bool has_raw_bytes() const;
  void clear_raw_bytes();
  static const int kRawBytesFieldNumber = 6;
  const ::std::string& raw_bytes() const;
  void set_raw_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_bytes(::std::string&& value);
  #endif
  void set_raw_bytes(const char* value);
  void set_raw_bytes(const void* value, size_t size);
  ::std::string* mutable_raw_bytes();
  ::std::string* release_raw_bytes();
  void set_allocated_raw_bytes(::std::string* raw_bytes);

  // optional .cockroach.storage.enginepb.TxnMeta txn = 1;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  private:
  const ::cockroach::storage::enginepb::TxnMeta& _internal_txn() const;
  public:
  const ::cockroach::storage::enginepb::TxnMeta& txn() const;
  ::cockroach::storage::enginepb::TxnMeta* release_txn();
  ::cockroach::storage::enginepb::TxnMeta* mutable_txn();
  void set_allocated_txn(::cockroach::storage::enginepb::TxnMeta* txn);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::cockroach::util::hlc::LegacyTimestamp& _internal_timestamp() const;
  public:
  const ::cockroach::util::hlc::LegacyTimestamp& timestamp() const;
  ::cockroach::util::hlc::LegacyTimestamp* release_timestamp();
  ::cockroach::util::hlc::LegacyTimestamp* mutable_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::LegacyTimestamp* timestamp);

  // optional .cockroach.util.hlc.LegacyTimestamp merge_timestamp = 7;
  bool has_merge_timestamp() const;
  void clear_merge_timestamp();
  static const int kMergeTimestampFieldNumber = 7;
  private:
  const ::cockroach::util::hlc::LegacyTimestamp& _internal_merge_timestamp() const;
  public:
  const ::cockroach::util::hlc::LegacyTimestamp& merge_timestamp() const;
  ::cockroach::util::hlc::LegacyTimestamp* release_merge_timestamp();
  ::cockroach::util::hlc::LegacyTimestamp* mutable_merge_timestamp();
  void set_allocated_merge_timestamp(::cockroach::util::hlc::LegacyTimestamp* merge_timestamp);

  bool has_key_bytes() const;
  void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 4;
  ::google::protobuf::int64 key_bytes() const;
  void set_key_bytes(::google::protobuf::int64 value);

  bool has_val_bytes() const;
  void clear_val_bytes();
  static const int kValBytesFieldNumber = 5;
  ::google::protobuf::int64 val_bytes() const;
  void set_val_bytes(::google::protobuf::int64 value);

  bool has_deleted() const;
  void clear_deleted();
  static const int kDeletedFieldNumber = 3;
  bool deleted() const;
  void set_deleted(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCMetadata)
 private:
  void set_has_txn();
  void clear_has_txn();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_deleted();
  void clear_has_deleted();
  void set_has_key_bytes();
  void clear_has_key_bytes();
  void set_has_val_bytes();
  void clear_has_val_bytes();
  void set_has_raw_bytes();
  void clear_has_raw_bytes();
  void set_has_merge_timestamp();
  void clear_has_merge_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent > intent_history_;
  ::google::protobuf::internal::ArenaStringPtr raw_bytes_;
  ::cockroach::storage::enginepb::TxnMeta* txn_;
  ::cockroach::util::hlc::LegacyTimestamp* timestamp_;
  ::cockroach::util::hlc::LegacyTimestamp* merge_timestamp_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 val_bytes_;
  bool deleted_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCMetadataSubsetForMergeSerialization : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization) */ {
 public:
  MVCCMetadataSubsetForMergeSerialization();
  virtual ~MVCCMetadataSubsetForMergeSerialization();

  MVCCMetadataSubsetForMergeSerialization(const MVCCMetadataSubsetForMergeSerialization& from);

  inline MVCCMetadataSubsetForMergeSerialization& operator=(const MVCCMetadataSubsetForMergeSerialization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCMetadataSubsetForMergeSerialization(MVCCMetadataSubsetForMergeSerialization&& from) noexcept
    : MVCCMetadataSubsetForMergeSerialization() {
    *this = ::std::move(from);
  }

  inline MVCCMetadataSubsetForMergeSerialization& operator=(MVCCMetadataSubsetForMergeSerialization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MVCCMetadataSubsetForMergeSerialization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCMetadataSubsetForMergeSerialization* internal_default_instance() {
    return reinterpret_cast<const MVCCMetadataSubsetForMergeSerialization*>(
               &_MVCCMetadataSubsetForMergeSerialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MVCCMetadataSubsetForMergeSerialization* other);
  friend void swap(MVCCMetadataSubsetForMergeSerialization& a, MVCCMetadataSubsetForMergeSerialization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCMetadataSubsetForMergeSerialization* New() const final {
    return CreateMaybeMessage<MVCCMetadataSubsetForMergeSerialization>(NULL);
  }

  MVCCMetadataSubsetForMergeSerialization* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCMetadataSubsetForMergeSerialization>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCMetadataSubsetForMergeSerialization& from);
  void MergeFrom(const MVCCMetadataSubsetForMergeSerialization& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCMetadataSubsetForMergeSerialization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes raw_bytes = 6;
  bool has_raw_bytes() const;
  void clear_raw_bytes();
  static const int kRawBytesFieldNumber = 6;
  const ::std::string& raw_bytes() const;
  void set_raw_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_bytes(::std::string&& value);
  #endif
  void set_raw_bytes(const char* value);
  void set_raw_bytes(const void* value, size_t size);
  ::std::string* mutable_raw_bytes();
  ::std::string* release_raw_bytes();
  void set_allocated_raw_bytes(::std::string* raw_bytes);

  // optional .cockroach.util.hlc.LegacyTimestamp merge_timestamp = 7;
  bool has_merge_timestamp() const;
  void clear_merge_timestamp();
  static const int kMergeTimestampFieldNumber = 7;
  private:
  const ::cockroach::util::hlc::LegacyTimestamp& _internal_merge_timestamp() const;
  public:
  const ::cockroach::util::hlc::LegacyTimestamp& merge_timestamp() const;
  ::cockroach::util::hlc::LegacyTimestamp* release_merge_timestamp();
  ::cockroach::util::hlc::LegacyTimestamp* mutable_merge_timestamp();
  void set_allocated_merge_timestamp(::cockroach::util::hlc::LegacyTimestamp* merge_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization)
 private:
  void set_has_raw_bytes();
  void clear_has_raw_bytes();
  void set_has_merge_timestamp();
  void clear_has_merge_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr raw_bytes_;
  ::cockroach::util::hlc::LegacyTimestamp* merge_timestamp_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCStats : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCStats) */ {
 public:
  MVCCStats();
  virtual ~MVCCStats();

  MVCCStats(const MVCCStats& from);

  inline MVCCStats& operator=(const MVCCStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCStats(MVCCStats&& from) noexcept
    : MVCCStats() {
    *this = ::std::move(from);
  }

  inline MVCCStats& operator=(MVCCStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MVCCStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCStats* internal_default_instance() {
    return reinterpret_cast<const MVCCStats*>(
               &_MVCCStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MVCCStats* other);
  friend void swap(MVCCStats& a, MVCCStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCStats* New() const final {
    return CreateMaybeMessage<MVCCStats>(NULL);
  }

  MVCCStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCStats& from);
  void MergeFrom(const MVCCStats& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_last_update_nanos() const;
  void clear_last_update_nanos();
  static const int kLastUpdateNanosFieldNumber = 1;
  ::google::protobuf::int64 last_update_nanos() const;
  void set_last_update_nanos(::google::protobuf::int64 value);

  bool has_intent_age() const;
  void clear_intent_age();
  static const int kIntentAgeFieldNumber = 2;
  ::google::protobuf::int64 intent_age() const;
  void set_intent_age(::google::protobuf::int64 value);

  bool has_gc_bytes_age() const;
  void clear_gc_bytes_age();
  static const int kGcBytesAgeFieldNumber = 3;
  ::google::protobuf::int64 gc_bytes_age() const;
  void set_gc_bytes_age(::google::protobuf::int64 value);

  bool has_live_bytes() const;
  void clear_live_bytes();
  static const int kLiveBytesFieldNumber = 4;
  ::google::protobuf::int64 live_bytes() const;
  void set_live_bytes(::google::protobuf::int64 value);

  bool has_live_count() const;
  void clear_live_count();
  static const int kLiveCountFieldNumber = 5;
  ::google::protobuf::int64 live_count() const;
  void set_live_count(::google::protobuf::int64 value);

  bool has_key_bytes() const;
  void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 6;
  ::google::protobuf::int64 key_bytes() const;
  void set_key_bytes(::google::protobuf::int64 value);

  bool has_key_count() const;
  void clear_key_count();
  static const int kKeyCountFieldNumber = 7;
  ::google::protobuf::int64 key_count() const;
  void set_key_count(::google::protobuf::int64 value);

  bool has_val_bytes() const;
  void clear_val_bytes();
  static const int kValBytesFieldNumber = 8;
  ::google::protobuf::int64 val_bytes() const;
  void set_val_bytes(::google::protobuf::int64 value);

  bool has_val_count() const;
  void clear_val_count();
  static const int kValCountFieldNumber = 9;
  ::google::protobuf::int64 val_count() const;
  void set_val_count(::google::protobuf::int64 value);

  bool has_intent_bytes() const;
  void clear_intent_bytes();
  static const int kIntentBytesFieldNumber = 10;
  ::google::protobuf::int64 intent_bytes() const;
  void set_intent_bytes(::google::protobuf::int64 value);

  bool has_intent_count() const;
  void clear_intent_count();
  static const int kIntentCountFieldNumber = 11;
  ::google::protobuf::int64 intent_count() const;
  void set_intent_count(::google::protobuf::int64 value);

  bool has_sys_bytes() const;
  void clear_sys_bytes();
  static const int kSysBytesFieldNumber = 12;
  ::google::protobuf::int64 sys_bytes() const;
  void set_sys_bytes(::google::protobuf::int64 value);

  bool has_sys_count() const;
  void clear_sys_count();
  static const int kSysCountFieldNumber = 13;
  ::google::protobuf::int64 sys_count() const;
  void set_sys_count(::google::protobuf::int64 value);

  bool has_contains_estimates() const;
  void clear_contains_estimates();
  static const int kContainsEstimatesFieldNumber = 14;
  ::google::protobuf::int64 contains_estimates() const;
  void set_contains_estimates(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCStats)
 private:
  void set_has_contains_estimates();
  void clear_has_contains_estimates();
  void set_has_last_update_nanos();
  void clear_has_last_update_nanos();
  void set_has_intent_age();
  void clear_has_intent_age();
  void set_has_gc_bytes_age();
  void clear_has_gc_bytes_age();
  void set_has_live_bytes();
  void clear_has_live_bytes();
  void set_has_live_count();
  void clear_has_live_count();
  void set_has_key_bytes();
  void clear_has_key_bytes();
  void set_has_key_count();
  void clear_has_key_count();
  void set_has_val_bytes();
  void clear_has_val_bytes();
  void set_has_val_count();
  void clear_has_val_count();
  void set_has_intent_bytes();
  void clear_has_intent_bytes();
  void set_has_intent_count();
  void clear_has_intent_count();
  void set_has_sys_bytes();
  void clear_has_sys_bytes();
  void set_has_sys_count();
  void clear_has_sys_count();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 last_update_nanos_;
  ::google::protobuf::int64 intent_age_;
  ::google::protobuf::int64 gc_bytes_age_;
  ::google::protobuf::int64 live_bytes_;
  ::google::protobuf::int64 live_count_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 key_count_;
  ::google::protobuf::int64 val_bytes_;
  ::google::protobuf::int64 val_count_;
  ::google::protobuf::int64 intent_bytes_;
  ::google::protobuf::int64 intent_count_;
  ::google::protobuf::int64 sys_bytes_;
  ::google::protobuf::int64 sys_count_;
  ::google::protobuf::int64 contains_estimates_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MVCCMetadata_SequencedIntent

inline bool MVCCMetadata_SequencedIntent::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCMetadata_SequencedIntent::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCMetadata_SequencedIntent::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCMetadata_SequencedIntent::clear_sequence() {
  sequence_ = 0;
  clear_has_sequence();
}
inline ::google::protobuf::int32 MVCCMetadata_SequencedIntent::sequence() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.sequence)
  return sequence_;
}
inline void MVCCMetadata_SequencedIntent::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.sequence)
}

// optional bytes value = 2;
inline bool MVCCMetadata_SequencedIntent::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCMetadata_SequencedIntent::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCMetadata_SequencedIntent::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCMetadata_SequencedIntent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& MVCCMetadata_SequencedIntent::value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.value)
  return value_.GetNoArena();
}
inline void MVCCMetadata_SequencedIntent::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.value)
}
#if LANG_CXX11
inline void MVCCMetadata_SequencedIntent::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.value)
}
#endif
inline void MVCCMetadata_SequencedIntent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.value)
}
inline void MVCCMetadata_SequencedIntent::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.value)
}
inline ::std::string* MVCCMetadata_SequencedIntent::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCMetadata_SequencedIntent::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCMetadata_SequencedIntent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCMetadata.SequencedIntent.value)
}

// -------------------------------------------------------------------

// MVCCMetadata

// optional .cockroach.storage.enginepb.TxnMeta txn = 1;
inline bool MVCCMetadata::has_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCMetadata::set_has_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCMetadata::clear_has_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cockroach::storage::enginepb::TxnMeta& MVCCMetadata::_internal_txn() const {
  return *txn_;
}
inline const ::cockroach::storage::enginepb::TxnMeta& MVCCMetadata::txn() const {
  const ::cockroach::storage::enginepb::TxnMeta* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::enginepb::TxnMeta*>(
      &::cockroach::storage::enginepb::_TxnMeta_default_instance_);
}
inline ::cockroach::storage::enginepb::TxnMeta* MVCCMetadata::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCMetadata.txn)
  clear_has_txn();
  ::cockroach::storage::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::cockroach::storage::enginepb::TxnMeta* MVCCMetadata::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::enginepb::TxnMeta>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCMetadata.txn)
  return txn_;
}
inline void MVCCMetadata::set_allocated_txn(::cockroach::storage::enginepb::TxnMeta* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    set_has_txn();
  } else {
    clear_has_txn();
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCMetadata.txn)
}

inline bool MVCCMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVCCMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVCCMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::cockroach::util::hlc::LegacyTimestamp& MVCCMetadata::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::cockroach::util::hlc::LegacyTimestamp& MVCCMetadata::timestamp() const {
  const ::cockroach::util::hlc::LegacyTimestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::LegacyTimestamp*>(
      &::cockroach::util::hlc::_LegacyTimestamp_default_instance_);
}
inline ::cockroach::util::hlc::LegacyTimestamp* MVCCMetadata::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCMetadata.timestamp)
  clear_has_timestamp();
  ::cockroach::util::hlc::LegacyTimestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::LegacyTimestamp* MVCCMetadata::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::LegacyTimestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCMetadata.timestamp)
  return timestamp_;
}
inline void MVCCMetadata::set_allocated_timestamp(::cockroach::util::hlc::LegacyTimestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCMetadata.timestamp)
}

inline bool MVCCMetadata::has_deleted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MVCCMetadata::set_has_deleted() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MVCCMetadata::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MVCCMetadata::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool MVCCMetadata::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.deleted)
  return deleted_;
}
inline void MVCCMetadata::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCMetadata.deleted)
}

inline bool MVCCMetadata::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MVCCMetadata::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MVCCMetadata::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MVCCMetadata::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
inline ::google::protobuf::int64 MVCCMetadata::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.key_bytes)
  return key_bytes_;
}
inline void MVCCMetadata::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCMetadata.key_bytes)
}

inline bool MVCCMetadata::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MVCCMetadata::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MVCCMetadata::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MVCCMetadata::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
inline ::google::protobuf::int64 MVCCMetadata::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.val_bytes)
  return val_bytes_;
}
inline void MVCCMetadata::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCMetadata.val_bytes)
}

// optional bytes raw_bytes = 6;
inline bool MVCCMetadata::has_raw_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCMetadata::set_has_raw_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCMetadata::clear_has_raw_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCMetadata::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_bytes();
}
inline const ::std::string& MVCCMetadata::raw_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.raw_bytes)
  return raw_bytes_.GetNoArena();
}
inline void MVCCMetadata::set_raw_bytes(const ::std::string& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCMetadata.raw_bytes)
}
#if LANG_CXX11
inline void MVCCMetadata::set_raw_bytes(::std::string&& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCMetadata.raw_bytes)
}
#endif
inline void MVCCMetadata::set_raw_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCMetadata.raw_bytes)
}
inline void MVCCMetadata::set_raw_bytes(const void* value, size_t size) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCMetadata.raw_bytes)
}
inline ::std::string* MVCCMetadata::mutable_raw_bytes() {
  set_has_raw_bytes();
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCMetadata.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCMetadata::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCMetadata.raw_bytes)
  if (!has_raw_bytes()) {
    return NULL;
  }
  clear_has_raw_bytes();
  return raw_bytes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCMetadata::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    set_has_raw_bytes();
  } else {
    clear_has_raw_bytes();
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCMetadata.raw_bytes)
}

inline int MVCCMetadata::intent_history_size() const {
  return intent_history_.size();
}
inline void MVCCMetadata::clear_intent_history() {
  intent_history_.Clear();
}
inline ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent* MVCCMetadata::mutable_intent_history(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCMetadata.intent_history)
  return intent_history_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent >*
MVCCMetadata::mutable_intent_history() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.storage.enginepb.MVCCMetadata.intent_history)
  return &intent_history_;
}
inline const ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent& MVCCMetadata::intent_history(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.intent_history)
  return intent_history_.Get(index);
}
inline ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent* MVCCMetadata::add_intent_history() {
  // @@protoc_insertion_point(field_add:cockroach.storage.enginepb.MVCCMetadata.intent_history)
  return intent_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::storage::enginepb::MVCCMetadata_SequencedIntent >&
MVCCMetadata::intent_history() const {
  // @@protoc_insertion_point(field_list:cockroach.storage.enginepb.MVCCMetadata.intent_history)
  return intent_history_;
}

// optional .cockroach.util.hlc.LegacyTimestamp merge_timestamp = 7;
inline bool MVCCMetadata::has_merge_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MVCCMetadata::set_has_merge_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MVCCMetadata::clear_has_merge_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::cockroach::util::hlc::LegacyTimestamp& MVCCMetadata::_internal_merge_timestamp() const {
  return *merge_timestamp_;
}
inline const ::cockroach::util::hlc::LegacyTimestamp& MVCCMetadata::merge_timestamp() const {
  const ::cockroach::util::hlc::LegacyTimestamp* p = merge_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadata.merge_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::LegacyTimestamp*>(
      &::cockroach::util::hlc::_LegacyTimestamp_default_instance_);
}
inline ::cockroach::util::hlc::LegacyTimestamp* MVCCMetadata::release_merge_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCMetadata.merge_timestamp)
  clear_has_merge_timestamp();
  ::cockroach::util::hlc::LegacyTimestamp* temp = merge_timestamp_;
  merge_timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::LegacyTimestamp* MVCCMetadata::mutable_merge_timestamp() {
  set_has_merge_timestamp();
  if (merge_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::LegacyTimestamp>(GetArenaNoVirtual());
    merge_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCMetadata.merge_timestamp)
  return merge_timestamp_;
}
inline void MVCCMetadata::set_allocated_merge_timestamp(::cockroach::util::hlc::LegacyTimestamp* merge_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(merge_timestamp_);
  }
  if (merge_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      merge_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, merge_timestamp, submessage_arena);
    }
    set_has_merge_timestamp();
  } else {
    clear_has_merge_timestamp();
  }
  merge_timestamp_ = merge_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCMetadata.merge_timestamp)
}

// -------------------------------------------------------------------

// MVCCMetadataSubsetForMergeSerialization

// optional bytes raw_bytes = 6;
inline bool MVCCMetadataSubsetForMergeSerialization::has_raw_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCMetadataSubsetForMergeSerialization::set_has_raw_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCMetadataSubsetForMergeSerialization::clear_has_raw_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCMetadataSubsetForMergeSerialization::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_bytes();
}
inline const ::std::string& MVCCMetadataSubsetForMergeSerialization::raw_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.raw_bytes)
  return raw_bytes_.GetNoArena();
}
inline void MVCCMetadataSubsetForMergeSerialization::set_raw_bytes(const ::std::string& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.raw_bytes)
}
#if LANG_CXX11
inline void MVCCMetadataSubsetForMergeSerialization::set_raw_bytes(::std::string&& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.raw_bytes)
}
#endif
inline void MVCCMetadataSubsetForMergeSerialization::set_raw_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.raw_bytes)
}
inline void MVCCMetadataSubsetForMergeSerialization::set_raw_bytes(const void* value, size_t size) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.raw_bytes)
}
inline ::std::string* MVCCMetadataSubsetForMergeSerialization::mutable_raw_bytes() {
  set_has_raw_bytes();
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCMetadataSubsetForMergeSerialization::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.raw_bytes)
  if (!has_raw_bytes()) {
    return NULL;
  }
  clear_has_raw_bytes();
  return raw_bytes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCMetadataSubsetForMergeSerialization::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    set_has_raw_bytes();
  } else {
    clear_has_raw_bytes();
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.raw_bytes)
}

// optional .cockroach.util.hlc.LegacyTimestamp merge_timestamp = 7;
inline bool MVCCMetadataSubsetForMergeSerialization::has_merge_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCMetadataSubsetForMergeSerialization::set_has_merge_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCMetadataSubsetForMergeSerialization::clear_has_merge_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cockroach::util::hlc::LegacyTimestamp& MVCCMetadataSubsetForMergeSerialization::_internal_merge_timestamp() const {
  return *merge_timestamp_;
}
inline const ::cockroach::util::hlc::LegacyTimestamp& MVCCMetadataSubsetForMergeSerialization::merge_timestamp() const {
  const ::cockroach::util::hlc::LegacyTimestamp* p = merge_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.merge_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::LegacyTimestamp*>(
      &::cockroach::util::hlc::_LegacyTimestamp_default_instance_);
}
inline ::cockroach::util::hlc::LegacyTimestamp* MVCCMetadataSubsetForMergeSerialization::release_merge_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.merge_timestamp)
  clear_has_merge_timestamp();
  ::cockroach::util::hlc::LegacyTimestamp* temp = merge_timestamp_;
  merge_timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::LegacyTimestamp* MVCCMetadataSubsetForMergeSerialization::mutable_merge_timestamp() {
  set_has_merge_timestamp();
  if (merge_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::LegacyTimestamp>(GetArenaNoVirtual());
    merge_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.merge_timestamp)
  return merge_timestamp_;
}
inline void MVCCMetadataSubsetForMergeSerialization::set_allocated_merge_timestamp(::cockroach::util::hlc::LegacyTimestamp* merge_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(merge_timestamp_);
  }
  if (merge_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      merge_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, merge_timestamp, submessage_arena);
    }
    set_has_merge_timestamp();
  } else {
    clear_has_merge_timestamp();
  }
  merge_timestamp_ = merge_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCMetadataSubsetForMergeSerialization.merge_timestamp)
}

// -------------------------------------------------------------------

// MVCCStats

inline bool MVCCStats::has_contains_estimates() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MVCCStats::set_has_contains_estimates() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MVCCStats::clear_has_contains_estimates() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MVCCStats::clear_contains_estimates() {
  contains_estimates_ = GOOGLE_LONGLONG(0);
  clear_has_contains_estimates();
}
inline ::google::protobuf::int64 MVCCStats::contains_estimates() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.contains_estimates)
  return contains_estimates_;
}
inline void MVCCStats::set_contains_estimates(::google::protobuf::int64 value) {
  set_has_contains_estimates();
  contains_estimates_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.contains_estimates)
}

inline bool MVCCStats::has_last_update_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCStats::set_has_last_update_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCStats::clear_has_last_update_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCStats::clear_last_update_nanos() {
  last_update_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_nanos();
}
inline ::google::protobuf::int64 MVCCStats::last_update_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.last_update_nanos)
  return last_update_nanos_;
}
inline void MVCCStats::set_last_update_nanos(::google::protobuf::int64 value) {
  set_has_last_update_nanos();
  last_update_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.last_update_nanos)
}

inline bool MVCCStats::has_intent_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCStats::set_has_intent_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCStats::clear_has_intent_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCStats::clear_intent_age() {
  intent_age_ = GOOGLE_LONGLONG(0);
  clear_has_intent_age();
}
inline ::google::protobuf::int64 MVCCStats::intent_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.intent_age)
  return intent_age_;
}
inline void MVCCStats::set_intent_age(::google::protobuf::int64 value) {
  set_has_intent_age();
  intent_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.intent_age)
}

inline bool MVCCStats::has_gc_bytes_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVCCStats::set_has_gc_bytes_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVCCStats::clear_has_gc_bytes_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVCCStats::clear_gc_bytes_age() {
  gc_bytes_age_ = GOOGLE_LONGLONG(0);
  clear_has_gc_bytes_age();
}
inline ::google::protobuf::int64 MVCCStats::gc_bytes_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.gc_bytes_age)
  return gc_bytes_age_;
}
inline void MVCCStats::set_gc_bytes_age(::google::protobuf::int64 value) {
  set_has_gc_bytes_age();
  gc_bytes_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.gc_bytes_age)
}

inline bool MVCCStats::has_live_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MVCCStats::set_has_live_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MVCCStats::clear_has_live_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MVCCStats::clear_live_bytes() {
  live_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_live_bytes();
}
inline ::google::protobuf::int64 MVCCStats::live_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.live_bytes)
  return live_bytes_;
}
inline void MVCCStats::set_live_bytes(::google::protobuf::int64 value) {
  set_has_live_bytes();
  live_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.live_bytes)
}

inline bool MVCCStats::has_live_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MVCCStats::set_has_live_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MVCCStats::clear_has_live_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MVCCStats::clear_live_count() {
  live_count_ = GOOGLE_LONGLONG(0);
  clear_has_live_count();
}
inline ::google::protobuf::int64 MVCCStats::live_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.live_count)
  return live_count_;
}
inline void MVCCStats::set_live_count(::google::protobuf::int64 value) {
  set_has_live_count();
  live_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.live_count)
}

inline bool MVCCStats::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MVCCStats::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MVCCStats::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MVCCStats::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
inline ::google::protobuf::int64 MVCCStats::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.key_bytes)
  return key_bytes_;
}
inline void MVCCStats::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.key_bytes)
}

inline bool MVCCStats::has_key_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MVCCStats::set_has_key_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MVCCStats::clear_has_key_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MVCCStats::clear_key_count() {
  key_count_ = GOOGLE_LONGLONG(0);
  clear_has_key_count();
}
inline ::google::protobuf::int64 MVCCStats::key_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.key_count)
  return key_count_;
}
inline void MVCCStats::set_key_count(::google::protobuf::int64 value) {
  set_has_key_count();
  key_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.key_count)
}

inline bool MVCCStats::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MVCCStats::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MVCCStats::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MVCCStats::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
inline ::google::protobuf::int64 MVCCStats::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.val_bytes)
  return val_bytes_;
}
inline void MVCCStats::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.val_bytes)
}

inline bool MVCCStats::has_val_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MVCCStats::set_has_val_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MVCCStats::clear_has_val_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MVCCStats::clear_val_count() {
  val_count_ = GOOGLE_LONGLONG(0);
  clear_has_val_count();
}
inline ::google::protobuf::int64 MVCCStats::val_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.val_count)
  return val_count_;
}
inline void MVCCStats::set_val_count(::google::protobuf::int64 value) {
  set_has_val_count();
  val_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.val_count)
}

inline bool MVCCStats::has_intent_bytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MVCCStats::set_has_intent_bytes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MVCCStats::clear_has_intent_bytes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MVCCStats::clear_intent_bytes() {
  intent_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_intent_bytes();
}
inline ::google::protobuf::int64 MVCCStats::intent_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.intent_bytes)
  return intent_bytes_;
}
inline void MVCCStats::set_intent_bytes(::google::protobuf::int64 value) {
  set_has_intent_bytes();
  intent_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.intent_bytes)
}

inline bool MVCCStats::has_intent_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MVCCStats::set_has_intent_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MVCCStats::clear_has_intent_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MVCCStats::clear_intent_count() {
  intent_count_ = GOOGLE_LONGLONG(0);
  clear_has_intent_count();
}
inline ::google::protobuf::int64 MVCCStats::intent_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.intent_count)
  return intent_count_;
}
inline void MVCCStats::set_intent_count(::google::protobuf::int64 value) {
  set_has_intent_count();
  intent_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.intent_count)
}

inline bool MVCCStats::has_sys_bytes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MVCCStats::set_has_sys_bytes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MVCCStats::clear_has_sys_bytes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MVCCStats::clear_sys_bytes() {
  sys_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_sys_bytes();
}
inline ::google::protobuf::int64 MVCCStats::sys_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.sys_bytes)
  return sys_bytes_;
}
inline void MVCCStats::set_sys_bytes(::google::protobuf::int64 value) {
  set_has_sys_bytes();
  sys_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.sys_bytes)
}

inline bool MVCCStats::has_sys_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MVCCStats::set_has_sys_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MVCCStats::clear_has_sys_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MVCCStats::clear_sys_count() {
  sys_count_ = GOOGLE_LONGLONG(0);
  clear_has_sys_count();
}
inline ::google::protobuf::int64 MVCCStats::sys_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStats.sys_count)
  return sys_count_;
}
inline void MVCCStats::set_sys_count(::google::protobuf::int64 value) {
  set_has_sys_count();
  sys_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStats.sys_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enginepb
}  // namespace storage
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_storage_2fenginepb_2fmvcc_2eproto
