// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage/enginepb/mvcc3.proto

#ifndef PROTOBUF_INCLUDED_storage_2fenginepb_2fmvcc3_2eproto
#define PROTOBUF_INCLUDED_storage_2fenginepb_2fmvcc3_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "util/hlc/timestamp.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fenginepb_2fmvcc3_2eproto 

namespace protobuf_storage_2fenginepb_2fmvcc3_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_storage_2fenginepb_2fmvcc3_2eproto
namespace cockroach {
namespace storage {
namespace enginepb {
class IgnoredSeqNumRange;
class IgnoredSeqNumRangeDefaultTypeInternal;
extern IgnoredSeqNumRangeDefaultTypeInternal _IgnoredSeqNumRange_default_instance_;
class MVCCAbortIntentOp;
class MVCCAbortIntentOpDefaultTypeInternal;
extern MVCCAbortIntentOpDefaultTypeInternal _MVCCAbortIntentOp_default_instance_;
class MVCCAbortTxnOp;
class MVCCAbortTxnOpDefaultTypeInternal;
extern MVCCAbortTxnOpDefaultTypeInternal _MVCCAbortTxnOp_default_instance_;
class MVCCCommitIntentOp;
class MVCCCommitIntentOpDefaultTypeInternal;
extern MVCCCommitIntentOpDefaultTypeInternal _MVCCCommitIntentOp_default_instance_;
class MVCCLogicalOp;
class MVCCLogicalOpDefaultTypeInternal;
extern MVCCLogicalOpDefaultTypeInternal _MVCCLogicalOp_default_instance_;
class MVCCPersistentStats;
class MVCCPersistentStatsDefaultTypeInternal;
extern MVCCPersistentStatsDefaultTypeInternal _MVCCPersistentStats_default_instance_;
class MVCCStatsDelta;
class MVCCStatsDeltaDefaultTypeInternal;
extern MVCCStatsDeltaDefaultTypeInternal _MVCCStatsDelta_default_instance_;
class MVCCUpdateIntentOp;
class MVCCUpdateIntentOpDefaultTypeInternal;
extern MVCCUpdateIntentOpDefaultTypeInternal _MVCCUpdateIntentOp_default_instance_;
class MVCCWriteIntentOp;
class MVCCWriteIntentOpDefaultTypeInternal;
extern MVCCWriteIntentOpDefaultTypeInternal _MVCCWriteIntentOp_default_instance_;
class MVCCWriteValueOp;
class MVCCWriteValueOpDefaultTypeInternal;
extern MVCCWriteValueOpDefaultTypeInternal _MVCCWriteValueOp_default_instance_;
class RangeAppliedState;
class RangeAppliedStateDefaultTypeInternal;
extern RangeAppliedStateDefaultTypeInternal _RangeAppliedState_default_instance_;
class TxnMeta;
class TxnMetaDefaultTypeInternal;
extern TxnMetaDefaultTypeInternal _TxnMeta_default_instance_;
}  // namespace enginepb
}  // namespace storage
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> ::cockroach::storage::enginepb::IgnoredSeqNumRange* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::IgnoredSeqNumRange>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCAbortIntentOp* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCAbortIntentOp>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCAbortTxnOp* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCAbortTxnOp>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCCommitIntentOp* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCCommitIntentOp>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCLogicalOp* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCLogicalOp>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCPersistentStats* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCPersistentStats>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCStatsDelta* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCStatsDelta>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCUpdateIntentOp* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCUpdateIntentOp>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCWriteIntentOp* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCWriteIntentOp>(Arena*);
template<> ::cockroach::storage::enginepb::MVCCWriteValueOp* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::MVCCWriteValueOp>(Arena*);
template<> ::cockroach::storage::enginepb::RangeAppliedState* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::RangeAppliedState>(Arena*);
template<> ::cockroach::storage::enginepb::TxnMeta* Arena::CreateMaybeMessage<::cockroach::storage::enginepb::TxnMeta>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cockroach {
namespace storage {
namespace enginepb {

// ===================================================================

class TxnMeta : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.TxnMeta) */ {
 public:
  TxnMeta();
  virtual ~TxnMeta();

  TxnMeta(const TxnMeta& from);

  inline TxnMeta& operator=(const TxnMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnMeta(TxnMeta&& from) noexcept
    : TxnMeta() {
    *this = ::std::move(from);
  }

  inline TxnMeta& operator=(TxnMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TxnMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxnMeta* internal_default_instance() {
    return reinterpret_cast<const TxnMeta*>(
               &_TxnMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TxnMeta* other);
  friend void swap(TxnMeta& a, TxnMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnMeta* New() const final {
    return CreateMaybeMessage<TxnMeta>(NULL);
  }

  TxnMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxnMeta>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TxnMeta& from);
  void MergeFrom(const TxnMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TxnMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // bytes key = 3;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  bool has_write_timestamp() const;
  void clear_write_timestamp();
  static const int kWriteTimestampFieldNumber = 5;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_write_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& write_timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_write_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_write_timestamp();
  void set_allocated_write_timestamp(::cockroach::util::hlc::Timestamp* write_timestamp);

  bool has_min_timestamp() const;
  void clear_min_timestamp();
  static const int kMinTimestampFieldNumber = 9;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_min_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& min_timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_min_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_min_timestamp();
  void set_allocated_min_timestamp(::cockroach::util::hlc::Timestamp* min_timestamp);

  void clear_epoch();
  static const int kEpochFieldNumber = 4;
  ::google::protobuf::int32 epoch() const;
  void set_epoch(::google::protobuf::int32 value);

  void clear_priority();
  static const int kPriorityFieldNumber = 6;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  void clear_sequence();
  static const int kSequenceFieldNumber = 7;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.TxnMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::cockroach::util::hlc::Timestamp* write_timestamp_;
  ::cockroach::util::hlc::Timestamp* min_timestamp_;
  ::google::protobuf::int32 epoch_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int32 sequence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IgnoredSeqNumRange : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.IgnoredSeqNumRange) */ {
 public:
  IgnoredSeqNumRange();
  virtual ~IgnoredSeqNumRange();

  IgnoredSeqNumRange(const IgnoredSeqNumRange& from);

  inline IgnoredSeqNumRange& operator=(const IgnoredSeqNumRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IgnoredSeqNumRange(IgnoredSeqNumRange&& from) noexcept
    : IgnoredSeqNumRange() {
    *this = ::std::move(from);
  }

  inline IgnoredSeqNumRange& operator=(IgnoredSeqNumRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IgnoredSeqNumRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IgnoredSeqNumRange* internal_default_instance() {
    return reinterpret_cast<const IgnoredSeqNumRange*>(
               &_IgnoredSeqNumRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IgnoredSeqNumRange* other);
  friend void swap(IgnoredSeqNumRange& a, IgnoredSeqNumRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IgnoredSeqNumRange* New() const final {
    return CreateMaybeMessage<IgnoredSeqNumRange>(NULL);
  }

  IgnoredSeqNumRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IgnoredSeqNumRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IgnoredSeqNumRange& from);
  void MergeFrom(const IgnoredSeqNumRange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IgnoredSeqNumRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.IgnoredSeqNumRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCStatsDelta : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCStatsDelta) */ {
 public:
  MVCCStatsDelta();
  virtual ~MVCCStatsDelta();

  MVCCStatsDelta(const MVCCStatsDelta& from);

  inline MVCCStatsDelta& operator=(const MVCCStatsDelta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCStatsDelta(MVCCStatsDelta&& from) noexcept
    : MVCCStatsDelta() {
    *this = ::std::move(from);
  }

  inline MVCCStatsDelta& operator=(MVCCStatsDelta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCStatsDelta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCStatsDelta* internal_default_instance() {
    return reinterpret_cast<const MVCCStatsDelta*>(
               &_MVCCStatsDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MVCCStatsDelta* other);
  friend void swap(MVCCStatsDelta& a, MVCCStatsDelta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCStatsDelta* New() const final {
    return CreateMaybeMessage<MVCCStatsDelta>(NULL);
  }

  MVCCStatsDelta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCStatsDelta>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCStatsDelta& from);
  void MergeFrom(const MVCCStatsDelta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCStatsDelta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed64 last_update_nanos = 1;
  void clear_last_update_nanos();
  static const int kLastUpdateNanosFieldNumber = 1;
  ::google::protobuf::int64 last_update_nanos() const;
  void set_last_update_nanos(::google::protobuf::int64 value);

  // sfixed64 intent_age = 2;
  void clear_intent_age();
  static const int kIntentAgeFieldNumber = 2;
  ::google::protobuf::int64 intent_age() const;
  void set_intent_age(::google::protobuf::int64 value);

  void clear_gc_bytes_age();
  static const int kGcBytesAgeFieldNumber = 3;
  ::google::protobuf::int64 gc_bytes_age() const;
  void set_gc_bytes_age(::google::protobuf::int64 value);

  // sint64 live_bytes = 4;
  void clear_live_bytes();
  static const int kLiveBytesFieldNumber = 4;
  ::google::protobuf::int64 live_bytes() const;
  void set_live_bytes(::google::protobuf::int64 value);

  // sint64 live_count = 5;
  void clear_live_count();
  static const int kLiveCountFieldNumber = 5;
  ::google::protobuf::int64 live_count() const;
  void set_live_count(::google::protobuf::int64 value);

  // sint64 key_bytes = 6;
  void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 6;
  ::google::protobuf::int64 key_bytes() const;
  void set_key_bytes(::google::protobuf::int64 value);

  // sint64 key_count = 7;
  void clear_key_count();
  static const int kKeyCountFieldNumber = 7;
  ::google::protobuf::int64 key_count() const;
  void set_key_count(::google::protobuf::int64 value);

  // sint64 val_bytes = 8;
  void clear_val_bytes();
  static const int kValBytesFieldNumber = 8;
  ::google::protobuf::int64 val_bytes() const;
  void set_val_bytes(::google::protobuf::int64 value);

  // sint64 val_count = 9;
  void clear_val_count();
  static const int kValCountFieldNumber = 9;
  ::google::protobuf::int64 val_count() const;
  void set_val_count(::google::protobuf::int64 value);

  // sint64 intent_bytes = 10;
  void clear_intent_bytes();
  static const int kIntentBytesFieldNumber = 10;
  ::google::protobuf::int64 intent_bytes() const;
  void set_intent_bytes(::google::protobuf::int64 value);

  // sint64 intent_count = 11;
  void clear_intent_count();
  static const int kIntentCountFieldNumber = 11;
  ::google::protobuf::int64 intent_count() const;
  void set_intent_count(::google::protobuf::int64 value);

  // sint64 sys_bytes = 12;
  void clear_sys_bytes();
  static const int kSysBytesFieldNumber = 12;
  ::google::protobuf::int64 sys_bytes() const;
  void set_sys_bytes(::google::protobuf::int64 value);

  // sint64 sys_count = 13;
  void clear_sys_count();
  static const int kSysCountFieldNumber = 13;
  ::google::protobuf::int64 sys_count() const;
  void set_sys_count(::google::protobuf::int64 value);

  // int64 contains_estimates = 14;
  void clear_contains_estimates();
  static const int kContainsEstimatesFieldNumber = 14;
  ::google::protobuf::int64 contains_estimates() const;
  void set_contains_estimates(::google::protobuf::int64 value);

  // sint64 abort_span_bytes = 15;
  void clear_abort_span_bytes();
  static const int kAbortSpanBytesFieldNumber = 15;
  ::google::protobuf::int64 abort_span_bytes() const;
  void set_abort_span_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCStatsDelta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 last_update_nanos_;
  ::google::protobuf::int64 intent_age_;
  ::google::protobuf::int64 gc_bytes_age_;
  ::google::protobuf::int64 live_bytes_;
  ::google::protobuf::int64 live_count_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 key_count_;
  ::google::protobuf::int64 val_bytes_;
  ::google::protobuf::int64 val_count_;
  ::google::protobuf::int64 intent_bytes_;
  ::google::protobuf::int64 intent_count_;
  ::google::protobuf::int64 sys_bytes_;
  ::google::protobuf::int64 sys_count_;
  ::google::protobuf::int64 contains_estimates_;
  ::google::protobuf::int64 abort_span_bytes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCPersistentStats : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCPersistentStats) */ {
 public:
  MVCCPersistentStats();
  virtual ~MVCCPersistentStats();

  MVCCPersistentStats(const MVCCPersistentStats& from);

  inline MVCCPersistentStats& operator=(const MVCCPersistentStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCPersistentStats(MVCCPersistentStats&& from) noexcept
    : MVCCPersistentStats() {
    *this = ::std::move(from);
  }

  inline MVCCPersistentStats& operator=(MVCCPersistentStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCPersistentStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCPersistentStats* internal_default_instance() {
    return reinterpret_cast<const MVCCPersistentStats*>(
               &_MVCCPersistentStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MVCCPersistentStats* other);
  friend void swap(MVCCPersistentStats& a, MVCCPersistentStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCPersistentStats* New() const final {
    return CreateMaybeMessage<MVCCPersistentStats>(NULL);
  }

  MVCCPersistentStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCPersistentStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCPersistentStats& from);
  void MergeFrom(const MVCCPersistentStats& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCPersistentStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed64 last_update_nanos = 1;
  void clear_last_update_nanos();
  static const int kLastUpdateNanosFieldNumber = 1;
  ::google::protobuf::int64 last_update_nanos() const;
  void set_last_update_nanos(::google::protobuf::int64 value);

  // sfixed64 intent_age = 2;
  void clear_intent_age();
  static const int kIntentAgeFieldNumber = 2;
  ::google::protobuf::int64 intent_age() const;
  void set_intent_age(::google::protobuf::int64 value);

  void clear_gc_bytes_age();
  static const int kGcBytesAgeFieldNumber = 3;
  ::google::protobuf::int64 gc_bytes_age() const;
  void set_gc_bytes_age(::google::protobuf::int64 value);

  // int64 live_bytes = 4;
  void clear_live_bytes();
  static const int kLiveBytesFieldNumber = 4;
  ::google::protobuf::int64 live_bytes() const;
  void set_live_bytes(::google::protobuf::int64 value);

  // int64 live_count = 5;
  void clear_live_count();
  static const int kLiveCountFieldNumber = 5;
  ::google::protobuf::int64 live_count() const;
  void set_live_count(::google::protobuf::int64 value);

  // int64 key_bytes = 6;
  void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 6;
  ::google::protobuf::int64 key_bytes() const;
  void set_key_bytes(::google::protobuf::int64 value);

  // int64 key_count = 7;
  void clear_key_count();
  static const int kKeyCountFieldNumber = 7;
  ::google::protobuf::int64 key_count() const;
  void set_key_count(::google::protobuf::int64 value);

  // int64 val_bytes = 8;
  void clear_val_bytes();
  static const int kValBytesFieldNumber = 8;
  ::google::protobuf::int64 val_bytes() const;
  void set_val_bytes(::google::protobuf::int64 value);

  // int64 val_count = 9;
  void clear_val_count();
  static const int kValCountFieldNumber = 9;
  ::google::protobuf::int64 val_count() const;
  void set_val_count(::google::protobuf::int64 value);

  // int64 intent_bytes = 10;
  void clear_intent_bytes();
  static const int kIntentBytesFieldNumber = 10;
  ::google::protobuf::int64 intent_bytes() const;
  void set_intent_bytes(::google::protobuf::int64 value);

  // int64 intent_count = 11;
  void clear_intent_count();
  static const int kIntentCountFieldNumber = 11;
  ::google::protobuf::int64 intent_count() const;
  void set_intent_count(::google::protobuf::int64 value);

  // int64 sys_bytes = 12;
  void clear_sys_bytes();
  static const int kSysBytesFieldNumber = 12;
  ::google::protobuf::int64 sys_bytes() const;
  void set_sys_bytes(::google::protobuf::int64 value);

  // int64 sys_count = 13;
  void clear_sys_count();
  static const int kSysCountFieldNumber = 13;
  ::google::protobuf::int64 sys_count() const;
  void set_sys_count(::google::protobuf::int64 value);

  // int64 contains_estimates = 14;
  void clear_contains_estimates();
  static const int kContainsEstimatesFieldNumber = 14;
  ::google::protobuf::int64 contains_estimates() const;
  void set_contains_estimates(::google::protobuf::int64 value);

  // int64 abort_span_bytes = 15;
  void clear_abort_span_bytes();
  static const int kAbortSpanBytesFieldNumber = 15;
  ::google::protobuf::int64 abort_span_bytes() const;
  void set_abort_span_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCPersistentStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 last_update_nanos_;
  ::google::protobuf::int64 intent_age_;
  ::google::protobuf::int64 gc_bytes_age_;
  ::google::protobuf::int64 live_bytes_;
  ::google::protobuf::int64 live_count_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 key_count_;
  ::google::protobuf::int64 val_bytes_;
  ::google::protobuf::int64 val_count_;
  ::google::protobuf::int64 intent_bytes_;
  ::google::protobuf::int64 intent_count_;
  ::google::protobuf::int64 sys_bytes_;
  ::google::protobuf::int64 sys_count_;
  ::google::protobuf::int64 contains_estimates_;
  ::google::protobuf::int64 abort_span_bytes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeAppliedState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.RangeAppliedState) */ {
 public:
  RangeAppliedState();
  virtual ~RangeAppliedState();

  RangeAppliedState(const RangeAppliedState& from);

  inline RangeAppliedState& operator=(const RangeAppliedState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeAppliedState(RangeAppliedState&& from) noexcept
    : RangeAppliedState() {
    *this = ::std::move(from);
  }

  inline RangeAppliedState& operator=(RangeAppliedState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeAppliedState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeAppliedState* internal_default_instance() {
    return reinterpret_cast<const RangeAppliedState*>(
               &_RangeAppliedState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RangeAppliedState* other);
  friend void swap(RangeAppliedState& a, RangeAppliedState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeAppliedState* New() const final {
    return CreateMaybeMessage<RangeAppliedState>(NULL);
  }

  RangeAppliedState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeAppliedState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeAppliedState& from);
  void MergeFrom(const RangeAppliedState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeAppliedState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_range_stats() const;
  void clear_range_stats();
  static const int kRangeStatsFieldNumber = 3;
  private:
  const ::cockroach::storage::enginepb::MVCCPersistentStats& _internal_range_stats() const;
  public:
  const ::cockroach::storage::enginepb::MVCCPersistentStats& range_stats() const;
  ::cockroach::storage::enginepb::MVCCPersistentStats* release_range_stats();
  ::cockroach::storage::enginepb::MVCCPersistentStats* mutable_range_stats();
  void set_allocated_range_stats(::cockroach::storage::enginepb::MVCCPersistentStats* range_stats);

  // uint64 raft_applied_index = 1;
  void clear_raft_applied_index();
  static const int kRaftAppliedIndexFieldNumber = 1;
  ::google::protobuf::uint64 raft_applied_index() const;
  void set_raft_applied_index(::google::protobuf::uint64 value);

  // uint64 lease_applied_index = 2;
  void clear_lease_applied_index();
  static const int kLeaseAppliedIndexFieldNumber = 2;
  ::google::protobuf::uint64 lease_applied_index() const;
  void set_lease_applied_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.RangeAppliedState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::storage::enginepb::MVCCPersistentStats* range_stats_;
  ::google::protobuf::uint64 raft_applied_index_;
  ::google::protobuf::uint64 lease_applied_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCWriteValueOp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCWriteValueOp) */ {
 public:
  MVCCWriteValueOp();
  virtual ~MVCCWriteValueOp();

  MVCCWriteValueOp(const MVCCWriteValueOp& from);

  inline MVCCWriteValueOp& operator=(const MVCCWriteValueOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCWriteValueOp(MVCCWriteValueOp&& from) noexcept
    : MVCCWriteValueOp() {
    *this = ::std::move(from);
  }

  inline MVCCWriteValueOp& operator=(MVCCWriteValueOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCWriteValueOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCWriteValueOp* internal_default_instance() {
    return reinterpret_cast<const MVCCWriteValueOp*>(
               &_MVCCWriteValueOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MVCCWriteValueOp* other);
  friend void swap(MVCCWriteValueOp& a, MVCCWriteValueOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCWriteValueOp* New() const final {
    return CreateMaybeMessage<MVCCWriteValueOp>(NULL);
  }

  MVCCWriteValueOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCWriteValueOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCWriteValueOp& from);
  void MergeFrom(const MVCCWriteValueOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCWriteValueOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bytes prev_value = 4;
  void clear_prev_value();
  static const int kPrevValueFieldNumber = 4;
  const ::std::string& prev_value() const;
  void set_prev_value(const ::std::string& value);
  #if LANG_CXX11
  void set_prev_value(::std::string&& value);
  #endif
  void set_prev_value(const char* value);
  void set_prev_value(const void* value, size_t size);
  ::std::string* mutable_prev_value();
  ::std::string* release_prev_value();
  void set_allocated_prev_value(::std::string* prev_value);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCWriteValueOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr prev_value_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCWriteIntentOp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCWriteIntentOp) */ {
 public:
  MVCCWriteIntentOp();
  virtual ~MVCCWriteIntentOp();

  MVCCWriteIntentOp(const MVCCWriteIntentOp& from);

  inline MVCCWriteIntentOp& operator=(const MVCCWriteIntentOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCWriteIntentOp(MVCCWriteIntentOp&& from) noexcept
    : MVCCWriteIntentOp() {
    *this = ::std::move(from);
  }

  inline MVCCWriteIntentOp& operator=(MVCCWriteIntentOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCWriteIntentOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCWriteIntentOp* internal_default_instance() {
    return reinterpret_cast<const MVCCWriteIntentOp*>(
               &_MVCCWriteIntentOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MVCCWriteIntentOp* other);
  friend void swap(MVCCWriteIntentOp& a, MVCCWriteIntentOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCWriteIntentOp* New() const final {
    return CreateMaybeMessage<MVCCWriteIntentOp>(NULL);
  }

  MVCCWriteIntentOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCWriteIntentOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCWriteIntentOp& from);
  void MergeFrom(const MVCCWriteIntentOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCWriteIntentOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const void* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes txn_key = 2;
  void clear_txn_key();
  static const int kTxnKeyFieldNumber = 2;
  const ::std::string& txn_key() const;
  void set_txn_key(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_key(::std::string&& value);
  #endif
  void set_txn_key(const char* value);
  void set_txn_key(const void* value, size_t size);
  ::std::string* mutable_txn_key();
  ::std::string* release_txn_key();
  void set_allocated_txn_key(::std::string* txn_key);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  bool has_txn_min_timestamp() const;
  void clear_txn_min_timestamp();
  static const int kTxnMinTimestampFieldNumber = 4;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_txn_min_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& txn_min_timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_txn_min_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_txn_min_timestamp();
  void set_allocated_txn_min_timestamp(::cockroach::util::hlc::Timestamp* txn_min_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCWriteIntentOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr txn_key_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  ::cockroach::util::hlc::Timestamp* txn_min_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCUpdateIntentOp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCUpdateIntentOp) */ {
 public:
  MVCCUpdateIntentOp();
  virtual ~MVCCUpdateIntentOp();

  MVCCUpdateIntentOp(const MVCCUpdateIntentOp& from);

  inline MVCCUpdateIntentOp& operator=(const MVCCUpdateIntentOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCUpdateIntentOp(MVCCUpdateIntentOp&& from) noexcept
    : MVCCUpdateIntentOp() {
    *this = ::std::move(from);
  }

  inline MVCCUpdateIntentOp& operator=(MVCCUpdateIntentOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCUpdateIntentOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCUpdateIntentOp* internal_default_instance() {
    return reinterpret_cast<const MVCCUpdateIntentOp*>(
               &_MVCCUpdateIntentOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MVCCUpdateIntentOp* other);
  friend void swap(MVCCUpdateIntentOp& a, MVCCUpdateIntentOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCUpdateIntentOp* New() const final {
    return CreateMaybeMessage<MVCCUpdateIntentOp>(NULL);
  }

  MVCCUpdateIntentOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCUpdateIntentOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCUpdateIntentOp& from);
  void MergeFrom(const MVCCUpdateIntentOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCUpdateIntentOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const void* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCUpdateIntentOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCCommitIntentOp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCCommitIntentOp) */ {
 public:
  MVCCCommitIntentOp();
  virtual ~MVCCCommitIntentOp();

  MVCCCommitIntentOp(const MVCCCommitIntentOp& from);

  inline MVCCCommitIntentOp& operator=(const MVCCCommitIntentOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCCommitIntentOp(MVCCCommitIntentOp&& from) noexcept
    : MVCCCommitIntentOp() {
    *this = ::std::move(from);
  }

  inline MVCCCommitIntentOp& operator=(MVCCCommitIntentOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCCommitIntentOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCCommitIntentOp* internal_default_instance() {
    return reinterpret_cast<const MVCCCommitIntentOp*>(
               &_MVCCCommitIntentOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MVCCCommitIntentOp* other);
  friend void swap(MVCCCommitIntentOp& a, MVCCCommitIntentOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCCommitIntentOp* New() const final {
    return CreateMaybeMessage<MVCCCommitIntentOp>(NULL);
  }

  MVCCCommitIntentOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCCommitIntentOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCCommitIntentOp& from);
  void MergeFrom(const MVCCCommitIntentOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCCommitIntentOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const void* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bytes prev_value = 5;
  void clear_prev_value();
  static const int kPrevValueFieldNumber = 5;
  const ::std::string& prev_value() const;
  void set_prev_value(const ::std::string& value);
  #if LANG_CXX11
  void set_prev_value(::std::string&& value);
  #endif
  void set_prev_value(const char* value);
  void set_prev_value(const void* value, size_t size);
  ::std::string* mutable_prev_value();
  ::std::string* release_prev_value();
  void set_allocated_prev_value(::std::string* prev_value);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCCommitIntentOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr prev_value_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCAbortIntentOp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCAbortIntentOp) */ {
 public:
  MVCCAbortIntentOp();
  virtual ~MVCCAbortIntentOp();

  MVCCAbortIntentOp(const MVCCAbortIntentOp& from);

  inline MVCCAbortIntentOp& operator=(const MVCCAbortIntentOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCAbortIntentOp(MVCCAbortIntentOp&& from) noexcept
    : MVCCAbortIntentOp() {
    *this = ::std::move(from);
  }

  inline MVCCAbortIntentOp& operator=(MVCCAbortIntentOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCAbortIntentOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCAbortIntentOp* internal_default_instance() {
    return reinterpret_cast<const MVCCAbortIntentOp*>(
               &_MVCCAbortIntentOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MVCCAbortIntentOp* other);
  friend void swap(MVCCAbortIntentOp& a, MVCCAbortIntentOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCAbortIntentOp* New() const final {
    return CreateMaybeMessage<MVCCAbortIntentOp>(NULL);
  }

  MVCCAbortIntentOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCAbortIntentOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCAbortIntentOp& from);
  void MergeFrom(const MVCCAbortIntentOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCAbortIntentOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const void* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCAbortIntentOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCAbortTxnOp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCAbortTxnOp) */ {
 public:
  MVCCAbortTxnOp();
  virtual ~MVCCAbortTxnOp();

  MVCCAbortTxnOp(const MVCCAbortTxnOp& from);

  inline MVCCAbortTxnOp& operator=(const MVCCAbortTxnOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCAbortTxnOp(MVCCAbortTxnOp&& from) noexcept
    : MVCCAbortTxnOp() {
    *this = ::std::move(from);
  }

  inline MVCCAbortTxnOp& operator=(MVCCAbortTxnOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCAbortTxnOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCAbortTxnOp* internal_default_instance() {
    return reinterpret_cast<const MVCCAbortTxnOp*>(
               &_MVCCAbortTxnOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(MVCCAbortTxnOp* other);
  friend void swap(MVCCAbortTxnOp& a, MVCCAbortTxnOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCAbortTxnOp* New() const final {
    return CreateMaybeMessage<MVCCAbortTxnOp>(NULL);
  }

  MVCCAbortTxnOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCAbortTxnOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCAbortTxnOp& from);
  void MergeFrom(const MVCCAbortTxnOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCAbortTxnOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const void* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCAbortTxnOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCLogicalOp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.enginepb.MVCCLogicalOp) */ {
 public:
  MVCCLogicalOp();
  virtual ~MVCCLogicalOp();

  MVCCLogicalOp(const MVCCLogicalOp& from);

  inline MVCCLogicalOp& operator=(const MVCCLogicalOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVCCLogicalOp(MVCCLogicalOp&& from) noexcept
    : MVCCLogicalOp() {
    *this = ::std::move(from);
  }

  inline MVCCLogicalOp& operator=(MVCCLogicalOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MVCCLogicalOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVCCLogicalOp* internal_default_instance() {
    return reinterpret_cast<const MVCCLogicalOp*>(
               &_MVCCLogicalOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(MVCCLogicalOp* other);
  friend void swap(MVCCLogicalOp& a, MVCCLogicalOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVCCLogicalOp* New() const final {
    return CreateMaybeMessage<MVCCLogicalOp>(NULL);
  }

  MVCCLogicalOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVCCLogicalOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MVCCLogicalOp& from);
  void MergeFrom(const MVCCLogicalOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCLogicalOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cockroach.storage.enginepb.MVCCWriteValueOp write_value = 1;
  bool has_write_value() const;
  void clear_write_value();
  static const int kWriteValueFieldNumber = 1;
  private:
  const ::cockroach::storage::enginepb::MVCCWriteValueOp& _internal_write_value() const;
  public:
  const ::cockroach::storage::enginepb::MVCCWriteValueOp& write_value() const;
  ::cockroach::storage::enginepb::MVCCWriteValueOp* release_write_value();
  ::cockroach::storage::enginepb::MVCCWriteValueOp* mutable_write_value();
  void set_allocated_write_value(::cockroach::storage::enginepb::MVCCWriteValueOp* write_value);

  // .cockroach.storage.enginepb.MVCCWriteIntentOp write_intent = 2;
  bool has_write_intent() const;
  void clear_write_intent();
  static const int kWriteIntentFieldNumber = 2;
  private:
  const ::cockroach::storage::enginepb::MVCCWriteIntentOp& _internal_write_intent() const;
  public:
  const ::cockroach::storage::enginepb::MVCCWriteIntentOp& write_intent() const;
  ::cockroach::storage::enginepb::MVCCWriteIntentOp* release_write_intent();
  ::cockroach::storage::enginepb::MVCCWriteIntentOp* mutable_write_intent();
  void set_allocated_write_intent(::cockroach::storage::enginepb::MVCCWriteIntentOp* write_intent);

  // .cockroach.storage.enginepb.MVCCUpdateIntentOp update_intent = 3;
  bool has_update_intent() const;
  void clear_update_intent();
  static const int kUpdateIntentFieldNumber = 3;
  private:
  const ::cockroach::storage::enginepb::MVCCUpdateIntentOp& _internal_update_intent() const;
  public:
  const ::cockroach::storage::enginepb::MVCCUpdateIntentOp& update_intent() const;
  ::cockroach::storage::enginepb::MVCCUpdateIntentOp* release_update_intent();
  ::cockroach::storage::enginepb::MVCCUpdateIntentOp* mutable_update_intent();
  void set_allocated_update_intent(::cockroach::storage::enginepb::MVCCUpdateIntentOp* update_intent);

  // .cockroach.storage.enginepb.MVCCCommitIntentOp commit_intent = 4;
  bool has_commit_intent() const;
  void clear_commit_intent();
  static const int kCommitIntentFieldNumber = 4;
  private:
  const ::cockroach::storage::enginepb::MVCCCommitIntentOp& _internal_commit_intent() const;
  public:
  const ::cockroach::storage::enginepb::MVCCCommitIntentOp& commit_intent() const;
  ::cockroach::storage::enginepb::MVCCCommitIntentOp* release_commit_intent();
  ::cockroach::storage::enginepb::MVCCCommitIntentOp* mutable_commit_intent();
  void set_allocated_commit_intent(::cockroach::storage::enginepb::MVCCCommitIntentOp* commit_intent);

  // .cockroach.storage.enginepb.MVCCAbortIntentOp abort_intent = 5;
  bool has_abort_intent() const;
  void clear_abort_intent();
  static const int kAbortIntentFieldNumber = 5;
  private:
  const ::cockroach::storage::enginepb::MVCCAbortIntentOp& _internal_abort_intent() const;
  public:
  const ::cockroach::storage::enginepb::MVCCAbortIntentOp& abort_intent() const;
  ::cockroach::storage::enginepb::MVCCAbortIntentOp* release_abort_intent();
  ::cockroach::storage::enginepb::MVCCAbortIntentOp* mutable_abort_intent();
  void set_allocated_abort_intent(::cockroach::storage::enginepb::MVCCAbortIntentOp* abort_intent);

  // .cockroach.storage.enginepb.MVCCAbortTxnOp abort_txn = 6;
  bool has_abort_txn() const;
  void clear_abort_txn();
  static const int kAbortTxnFieldNumber = 6;
  private:
  const ::cockroach::storage::enginepb::MVCCAbortTxnOp& _internal_abort_txn() const;
  public:
  const ::cockroach::storage::enginepb::MVCCAbortTxnOp& abort_txn() const;
  ::cockroach::storage::enginepb::MVCCAbortTxnOp* release_abort_txn();
  ::cockroach::storage::enginepb::MVCCAbortTxnOp* mutable_abort_txn();
  void set_allocated_abort_txn(::cockroach::storage::enginepb::MVCCAbortTxnOp* abort_txn);

  // @@protoc_insertion_point(class_scope:cockroach.storage.enginepb.MVCCLogicalOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::storage::enginepb::MVCCWriteValueOp* write_value_;
  ::cockroach::storage::enginepb::MVCCWriteIntentOp* write_intent_;
  ::cockroach::storage::enginepb::MVCCUpdateIntentOp* update_intent_;
  ::cockroach::storage::enginepb::MVCCCommitIntentOp* commit_intent_;
  ::cockroach::storage::enginepb::MVCCAbortIntentOp* abort_intent_;
  ::cockroach::storage::enginepb::MVCCAbortTxnOp* abort_txn_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_storage_2fenginepb_2fmvcc3_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxnMeta

inline void TxnMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnMeta::id() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.TxnMeta.id)
  return id_.GetNoArena();
}
inline void TxnMeta::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.TxnMeta.id)
}
#if LANG_CXX11
inline void TxnMeta::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.TxnMeta.id)
}
#endif
inline void TxnMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.TxnMeta.id)
}
inline void TxnMeta::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.TxnMeta.id)
}
inline ::std::string* TxnMeta::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.TxnMeta.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnMeta::release_id() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.TxnMeta.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnMeta::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.TxnMeta.id)
}

// bytes key = 3;
inline void TxnMeta::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnMeta::key() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.TxnMeta.key)
  return key_.GetNoArena();
}
inline void TxnMeta::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.TxnMeta.key)
}
#if LANG_CXX11
inline void TxnMeta::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.TxnMeta.key)
}
#endif
inline void TxnMeta::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.TxnMeta.key)
}
inline void TxnMeta::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.TxnMeta.key)
}
inline ::std::string* TxnMeta::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.TxnMeta.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnMeta::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.TxnMeta.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnMeta::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.TxnMeta.key)
}

inline void TxnMeta::clear_epoch() {
  epoch_ = 0;
}
inline ::google::protobuf::int32 TxnMeta::epoch() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.TxnMeta.epoch)
  return epoch_;
}
inline void TxnMeta::set_epoch(::google::protobuf::int32 value) {
  
  epoch_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.TxnMeta.epoch)
}

inline bool TxnMeta::has_write_timestamp() const {
  return this != internal_default_instance() && write_timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& TxnMeta::_internal_write_timestamp() const {
  return *write_timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& TxnMeta::write_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = write_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.TxnMeta.write_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* TxnMeta::release_write_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.TxnMeta.write_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = write_timestamp_;
  write_timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* TxnMeta::mutable_write_timestamp() {
  
  if (write_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    write_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.TxnMeta.write_timestamp)
  return write_timestamp_;
}
inline void TxnMeta::set_allocated_write_timestamp(::cockroach::util::hlc::Timestamp* write_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(write_timestamp_);
  }
  if (write_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  write_timestamp_ = write_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.TxnMeta.write_timestamp)
}

inline bool TxnMeta::has_min_timestamp() const {
  return this != internal_default_instance() && min_timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& TxnMeta::_internal_min_timestamp() const {
  return *min_timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& TxnMeta::min_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = min_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.TxnMeta.min_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* TxnMeta::release_min_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.TxnMeta.min_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = min_timestamp_;
  min_timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* TxnMeta::mutable_min_timestamp() {
  
  if (min_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    min_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.TxnMeta.min_timestamp)
  return min_timestamp_;
}
inline void TxnMeta::set_allocated_min_timestamp(::cockroach::util::hlc::Timestamp* min_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_timestamp_);
  }
  if (min_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  min_timestamp_ = min_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.TxnMeta.min_timestamp)
}

inline void TxnMeta::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 TxnMeta::priority() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.TxnMeta.priority)
  return priority_;
}
inline void TxnMeta::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.TxnMeta.priority)
}

inline void TxnMeta::clear_sequence() {
  sequence_ = 0;
}
inline ::google::protobuf::int32 TxnMeta::sequence() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.TxnMeta.sequence)
  return sequence_;
}
inline void TxnMeta::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.TxnMeta.sequence)
}

// -------------------------------------------------------------------

// IgnoredSeqNumRange

inline void IgnoredSeqNumRange::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 IgnoredSeqNumRange::start() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.IgnoredSeqNumRange.start)
  return start_;
}
inline void IgnoredSeqNumRange::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.IgnoredSeqNumRange.start)
}

inline void IgnoredSeqNumRange::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 IgnoredSeqNumRange::end() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.IgnoredSeqNumRange.end)
  return end_;
}
inline void IgnoredSeqNumRange::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.IgnoredSeqNumRange.end)
}

// -------------------------------------------------------------------

// MVCCStatsDelta

// int64 contains_estimates = 14;
inline void MVCCStatsDelta::clear_contains_estimates() {
  contains_estimates_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::contains_estimates() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.contains_estimates)
  return contains_estimates_;
}
inline void MVCCStatsDelta::set_contains_estimates(::google::protobuf::int64 value) {
  
  contains_estimates_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.contains_estimates)
}

// sfixed64 last_update_nanos = 1;
inline void MVCCStatsDelta::clear_last_update_nanos() {
  last_update_nanos_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::last_update_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.last_update_nanos)
  return last_update_nanos_;
}
inline void MVCCStatsDelta::set_last_update_nanos(::google::protobuf::int64 value) {
  
  last_update_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.last_update_nanos)
}

// sfixed64 intent_age = 2;
inline void MVCCStatsDelta::clear_intent_age() {
  intent_age_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::intent_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.intent_age)
  return intent_age_;
}
inline void MVCCStatsDelta::set_intent_age(::google::protobuf::int64 value) {
  
  intent_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.intent_age)
}

inline void MVCCStatsDelta::clear_gc_bytes_age() {
  gc_bytes_age_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::gc_bytes_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.gc_bytes_age)
  return gc_bytes_age_;
}
inline void MVCCStatsDelta::set_gc_bytes_age(::google::protobuf::int64 value) {
  
  gc_bytes_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.gc_bytes_age)
}

// sint64 live_bytes = 4;
inline void MVCCStatsDelta::clear_live_bytes() {
  live_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::live_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.live_bytes)
  return live_bytes_;
}
inline void MVCCStatsDelta::set_live_bytes(::google::protobuf::int64 value) {
  
  live_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.live_bytes)
}

// sint64 live_count = 5;
inline void MVCCStatsDelta::clear_live_count() {
  live_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::live_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.live_count)
  return live_count_;
}
inline void MVCCStatsDelta::set_live_count(::google::protobuf::int64 value) {
  
  live_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.live_count)
}

// sint64 key_bytes = 6;
inline void MVCCStatsDelta::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.key_bytes)
  return key_bytes_;
}
inline void MVCCStatsDelta::set_key_bytes(::google::protobuf::int64 value) {
  
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.key_bytes)
}

// sint64 key_count = 7;
inline void MVCCStatsDelta::clear_key_count() {
  key_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::key_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.key_count)
  return key_count_;
}
inline void MVCCStatsDelta::set_key_count(::google::protobuf::int64 value) {
  
  key_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.key_count)
}

// sint64 val_bytes = 8;
inline void MVCCStatsDelta::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.val_bytes)
  return val_bytes_;
}
inline void MVCCStatsDelta::set_val_bytes(::google::protobuf::int64 value) {
  
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.val_bytes)
}

// sint64 val_count = 9;
inline void MVCCStatsDelta::clear_val_count() {
  val_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::val_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.val_count)
  return val_count_;
}
inline void MVCCStatsDelta::set_val_count(::google::protobuf::int64 value) {
  
  val_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.val_count)
}

// sint64 intent_bytes = 10;
inline void MVCCStatsDelta::clear_intent_bytes() {
  intent_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::intent_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.intent_bytes)
  return intent_bytes_;
}
inline void MVCCStatsDelta::set_intent_bytes(::google::protobuf::int64 value) {
  
  intent_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.intent_bytes)
}

// sint64 intent_count = 11;
inline void MVCCStatsDelta::clear_intent_count() {
  intent_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::intent_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.intent_count)
  return intent_count_;
}
inline void MVCCStatsDelta::set_intent_count(::google::protobuf::int64 value) {
  
  intent_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.intent_count)
}

// sint64 sys_bytes = 12;
inline void MVCCStatsDelta::clear_sys_bytes() {
  sys_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::sys_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.sys_bytes)
  return sys_bytes_;
}
inline void MVCCStatsDelta::set_sys_bytes(::google::protobuf::int64 value) {
  
  sys_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.sys_bytes)
}

// sint64 sys_count = 13;
inline void MVCCStatsDelta::clear_sys_count() {
  sys_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::sys_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.sys_count)
  return sys_count_;
}
inline void MVCCStatsDelta::set_sys_count(::google::protobuf::int64 value) {
  
  sys_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.sys_count)
}

// sint64 abort_span_bytes = 15;
inline void MVCCStatsDelta::clear_abort_span_bytes() {
  abort_span_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCStatsDelta::abort_span_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCStatsDelta.abort_span_bytes)
  return abort_span_bytes_;
}
inline void MVCCStatsDelta::set_abort_span_bytes(::google::protobuf::int64 value) {
  
  abort_span_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCStatsDelta.abort_span_bytes)
}

// -------------------------------------------------------------------

// MVCCPersistentStats

// int64 contains_estimates = 14;
inline void MVCCPersistentStats::clear_contains_estimates() {
  contains_estimates_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::contains_estimates() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.contains_estimates)
  return contains_estimates_;
}
inline void MVCCPersistentStats::set_contains_estimates(::google::protobuf::int64 value) {
  
  contains_estimates_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.contains_estimates)
}

// sfixed64 last_update_nanos = 1;
inline void MVCCPersistentStats::clear_last_update_nanos() {
  last_update_nanos_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::last_update_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.last_update_nanos)
  return last_update_nanos_;
}
inline void MVCCPersistentStats::set_last_update_nanos(::google::protobuf::int64 value) {
  
  last_update_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.last_update_nanos)
}

// sfixed64 intent_age = 2;
inline void MVCCPersistentStats::clear_intent_age() {
  intent_age_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::intent_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.intent_age)
  return intent_age_;
}
inline void MVCCPersistentStats::set_intent_age(::google::protobuf::int64 value) {
  
  intent_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.intent_age)
}

inline void MVCCPersistentStats::clear_gc_bytes_age() {
  gc_bytes_age_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::gc_bytes_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.gc_bytes_age)
  return gc_bytes_age_;
}
inline void MVCCPersistentStats::set_gc_bytes_age(::google::protobuf::int64 value) {
  
  gc_bytes_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.gc_bytes_age)
}

// int64 live_bytes = 4;
inline void MVCCPersistentStats::clear_live_bytes() {
  live_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::live_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.live_bytes)
  return live_bytes_;
}
inline void MVCCPersistentStats::set_live_bytes(::google::protobuf::int64 value) {
  
  live_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.live_bytes)
}

// int64 live_count = 5;
inline void MVCCPersistentStats::clear_live_count() {
  live_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::live_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.live_count)
  return live_count_;
}
inline void MVCCPersistentStats::set_live_count(::google::protobuf::int64 value) {
  
  live_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.live_count)
}

// int64 key_bytes = 6;
inline void MVCCPersistentStats::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.key_bytes)
  return key_bytes_;
}
inline void MVCCPersistentStats::set_key_bytes(::google::protobuf::int64 value) {
  
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.key_bytes)
}

// int64 key_count = 7;
inline void MVCCPersistentStats::clear_key_count() {
  key_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::key_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.key_count)
  return key_count_;
}
inline void MVCCPersistentStats::set_key_count(::google::protobuf::int64 value) {
  
  key_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.key_count)
}

// int64 val_bytes = 8;
inline void MVCCPersistentStats::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.val_bytes)
  return val_bytes_;
}
inline void MVCCPersistentStats::set_val_bytes(::google::protobuf::int64 value) {
  
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.val_bytes)
}

// int64 val_count = 9;
inline void MVCCPersistentStats::clear_val_count() {
  val_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::val_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.val_count)
  return val_count_;
}
inline void MVCCPersistentStats::set_val_count(::google::protobuf::int64 value) {
  
  val_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.val_count)
}

// int64 intent_bytes = 10;
inline void MVCCPersistentStats::clear_intent_bytes() {
  intent_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::intent_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.intent_bytes)
  return intent_bytes_;
}
inline void MVCCPersistentStats::set_intent_bytes(::google::protobuf::int64 value) {
  
  intent_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.intent_bytes)
}

// int64 intent_count = 11;
inline void MVCCPersistentStats::clear_intent_count() {
  intent_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::intent_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.intent_count)
  return intent_count_;
}
inline void MVCCPersistentStats::set_intent_count(::google::protobuf::int64 value) {
  
  intent_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.intent_count)
}

// int64 sys_bytes = 12;
inline void MVCCPersistentStats::clear_sys_bytes() {
  sys_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::sys_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.sys_bytes)
  return sys_bytes_;
}
inline void MVCCPersistentStats::set_sys_bytes(::google::protobuf::int64 value) {
  
  sys_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.sys_bytes)
}

// int64 sys_count = 13;
inline void MVCCPersistentStats::clear_sys_count() {
  sys_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::sys_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.sys_count)
  return sys_count_;
}
inline void MVCCPersistentStats::set_sys_count(::google::protobuf::int64 value) {
  
  sys_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.sys_count)
}

// int64 abort_span_bytes = 15;
inline void MVCCPersistentStats::clear_abort_span_bytes() {
  abort_span_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MVCCPersistentStats::abort_span_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCPersistentStats.abort_span_bytes)
  return abort_span_bytes_;
}
inline void MVCCPersistentStats::set_abort_span_bytes(::google::protobuf::int64 value) {
  
  abort_span_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCPersistentStats.abort_span_bytes)
}

// -------------------------------------------------------------------

// RangeAppliedState

// uint64 raft_applied_index = 1;
inline void RangeAppliedState::clear_raft_applied_index() {
  raft_applied_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeAppliedState::raft_applied_index() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.RangeAppliedState.raft_applied_index)
  return raft_applied_index_;
}
inline void RangeAppliedState::set_raft_applied_index(::google::protobuf::uint64 value) {
  
  raft_applied_index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.RangeAppliedState.raft_applied_index)
}

// uint64 lease_applied_index = 2;
inline void RangeAppliedState::clear_lease_applied_index() {
  lease_applied_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeAppliedState::lease_applied_index() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.RangeAppliedState.lease_applied_index)
  return lease_applied_index_;
}
inline void RangeAppliedState::set_lease_applied_index(::google::protobuf::uint64 value) {
  
  lease_applied_index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.RangeAppliedState.lease_applied_index)
}

inline bool RangeAppliedState::has_range_stats() const {
  return this != internal_default_instance() && range_stats_ != NULL;
}
inline void RangeAppliedState::clear_range_stats() {
  if (GetArenaNoVirtual() == NULL && range_stats_ != NULL) {
    delete range_stats_;
  }
  range_stats_ = NULL;
}
inline const ::cockroach::storage::enginepb::MVCCPersistentStats& RangeAppliedState::_internal_range_stats() const {
  return *range_stats_;
}
inline const ::cockroach::storage::enginepb::MVCCPersistentStats& RangeAppliedState::range_stats() const {
  const ::cockroach::storage::enginepb::MVCCPersistentStats* p = range_stats_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.RangeAppliedState.range_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::enginepb::MVCCPersistentStats*>(
      &::cockroach::storage::enginepb::_MVCCPersistentStats_default_instance_);
}
inline ::cockroach::storage::enginepb::MVCCPersistentStats* RangeAppliedState::release_range_stats() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.RangeAppliedState.range_stats)
  
  ::cockroach::storage::enginepb::MVCCPersistentStats* temp = range_stats_;
  range_stats_ = NULL;
  return temp;
}
inline ::cockroach::storage::enginepb::MVCCPersistentStats* RangeAppliedState::mutable_range_stats() {
  
  if (range_stats_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::enginepb::MVCCPersistentStats>(GetArenaNoVirtual());
    range_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.RangeAppliedState.range_stats)
  return range_stats_;
}
inline void RangeAppliedState::set_allocated_range_stats(::cockroach::storage::enginepb::MVCCPersistentStats* range_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete range_stats_;
  }
  if (range_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range_stats, submessage_arena);
    }
    
  } else {
    
  }
  range_stats_ = range_stats;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.RangeAppliedState.range_stats)
}

// -------------------------------------------------------------------

// MVCCWriteValueOp

// bytes key = 1;
inline void MVCCWriteValueOp::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCWriteValueOp::key() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCWriteValueOp.key)
  return key_.GetNoArena();
}
inline void MVCCWriteValueOp::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCWriteValueOp.key)
}
#if LANG_CXX11
inline void MVCCWriteValueOp::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCWriteValueOp.key)
}
#endif
inline void MVCCWriteValueOp::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCWriteValueOp.key)
}
inline void MVCCWriteValueOp::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCWriteValueOp.key)
}
inline ::std::string* MVCCWriteValueOp::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCWriteValueOp.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCWriteValueOp::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCWriteValueOp.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCWriteValueOp::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCWriteValueOp.key)
}

inline bool MVCCWriteValueOp::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCWriteValueOp::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCWriteValueOp::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCWriteValueOp.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* MVCCWriteValueOp::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCWriteValueOp.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* MVCCWriteValueOp::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCWriteValueOp.timestamp)
  return timestamp_;
}
inline void MVCCWriteValueOp::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCWriteValueOp.timestamp)
}

// bytes value = 3;
inline void MVCCWriteValueOp::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCWriteValueOp::value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCWriteValueOp.value)
  return value_.GetNoArena();
}
inline void MVCCWriteValueOp::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCWriteValueOp.value)
}
#if LANG_CXX11
inline void MVCCWriteValueOp::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCWriteValueOp.value)
}
#endif
inline void MVCCWriteValueOp::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCWriteValueOp.value)
}
inline void MVCCWriteValueOp::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCWriteValueOp.value)
}
inline ::std::string* MVCCWriteValueOp::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCWriteValueOp.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCWriteValueOp::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCWriteValueOp.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCWriteValueOp::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCWriteValueOp.value)
}

// bytes prev_value = 4;
inline void MVCCWriteValueOp::clear_prev_value() {
  prev_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCWriteValueOp::prev_value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCWriteValueOp.prev_value)
  return prev_value_.GetNoArena();
}
inline void MVCCWriteValueOp::set_prev_value(const ::std::string& value) {
  
  prev_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCWriteValueOp.prev_value)
}
#if LANG_CXX11
inline void MVCCWriteValueOp::set_prev_value(::std::string&& value) {
  
  prev_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCWriteValueOp.prev_value)
}
#endif
inline void MVCCWriteValueOp::set_prev_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prev_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCWriteValueOp.prev_value)
}
inline void MVCCWriteValueOp::set_prev_value(const void* value, size_t size) {
  
  prev_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCWriteValueOp.prev_value)
}
inline ::std::string* MVCCWriteValueOp::mutable_prev_value() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCWriteValueOp.prev_value)
  return prev_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCWriteValueOp::release_prev_value() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCWriteValueOp.prev_value)
  
  return prev_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCWriteValueOp::set_allocated_prev_value(::std::string* prev_value) {
  if (prev_value != NULL) {
    
  } else {
    
  }
  prev_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCWriteValueOp.prev_value)
}

// -------------------------------------------------------------------

// MVCCWriteIntentOp

inline void MVCCWriteIntentOp::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCWriteIntentOp::txn_id() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_id)
  return txn_id_.GetNoArena();
}
inline void MVCCWriteIntentOp::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_id)
}
#if LANG_CXX11
inline void MVCCWriteIntentOp::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_id)
}
#endif
inline void MVCCWriteIntentOp::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_id)
}
inline void MVCCWriteIntentOp::set_txn_id(const void* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_id)
}
inline ::std::string* MVCCWriteIntentOp::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCWriteIntentOp::release_txn_id() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCWriteIntentOp::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_id)
}

// bytes txn_key = 2;
inline void MVCCWriteIntentOp::clear_txn_key() {
  txn_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCWriteIntentOp::txn_key() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_key)
  return txn_key_.GetNoArena();
}
inline void MVCCWriteIntentOp::set_txn_key(const ::std::string& value) {
  
  txn_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_key)
}
#if LANG_CXX11
inline void MVCCWriteIntentOp::set_txn_key(::std::string&& value) {
  
  txn_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_key)
}
#endif
inline void MVCCWriteIntentOp::set_txn_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_key)
}
inline void MVCCWriteIntentOp::set_txn_key(const void* value, size_t size) {
  
  txn_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_key)
}
inline ::std::string* MVCCWriteIntentOp::mutable_txn_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_key)
  return txn_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCWriteIntentOp::release_txn_key() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_key)
  
  return txn_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCWriteIntentOp::set_allocated_txn_key(::std::string* txn_key) {
  if (txn_key != NULL) {
    
  } else {
    
  }
  txn_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_key)
}

inline bool MVCCWriteIntentOp::has_txn_min_timestamp() const {
  return this != internal_default_instance() && txn_min_timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCWriteIntentOp::_internal_txn_min_timestamp() const {
  return *txn_min_timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCWriteIntentOp::txn_min_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = txn_min_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_min_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* MVCCWriteIntentOp::release_txn_min_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_min_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = txn_min_timestamp_;
  txn_min_timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* MVCCWriteIntentOp::mutable_txn_min_timestamp() {
  
  if (txn_min_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    txn_min_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_min_timestamp)
  return txn_min_timestamp_;
}
inline void MVCCWriteIntentOp::set_allocated_txn_min_timestamp(::cockroach::util::hlc::Timestamp* txn_min_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_min_timestamp_);
  }
  if (txn_min_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn_min_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn_min_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  txn_min_timestamp_ = txn_min_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCWriteIntentOp.txn_min_timestamp)
}

inline bool MVCCWriteIntentOp::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCWriteIntentOp::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCWriteIntentOp::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCWriteIntentOp.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* MVCCWriteIntentOp::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCWriteIntentOp.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* MVCCWriteIntentOp::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCWriteIntentOp.timestamp)
  return timestamp_;
}
inline void MVCCWriteIntentOp::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCWriteIntentOp.timestamp)
}

// -------------------------------------------------------------------

// MVCCUpdateIntentOp

inline void MVCCUpdateIntentOp::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCUpdateIntentOp::txn_id() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCUpdateIntentOp.txn_id)
  return txn_id_.GetNoArena();
}
inline void MVCCUpdateIntentOp::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCUpdateIntentOp.txn_id)
}
#if LANG_CXX11
inline void MVCCUpdateIntentOp::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCUpdateIntentOp.txn_id)
}
#endif
inline void MVCCUpdateIntentOp::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCUpdateIntentOp.txn_id)
}
inline void MVCCUpdateIntentOp::set_txn_id(const void* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCUpdateIntentOp.txn_id)
}
inline ::std::string* MVCCUpdateIntentOp::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCUpdateIntentOp.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCUpdateIntentOp::release_txn_id() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCUpdateIntentOp.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCUpdateIntentOp::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCUpdateIntentOp.txn_id)
}

inline bool MVCCUpdateIntentOp::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCUpdateIntentOp::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCUpdateIntentOp::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCUpdateIntentOp.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* MVCCUpdateIntentOp::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCUpdateIntentOp.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* MVCCUpdateIntentOp::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCUpdateIntentOp.timestamp)
  return timestamp_;
}
inline void MVCCUpdateIntentOp::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCUpdateIntentOp.timestamp)
}

// -------------------------------------------------------------------

// MVCCCommitIntentOp

inline void MVCCCommitIntentOp::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCCommitIntentOp::txn_id() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCCommitIntentOp.txn_id)
  return txn_id_.GetNoArena();
}
inline void MVCCCommitIntentOp::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCCommitIntentOp.txn_id)
}
#if LANG_CXX11
inline void MVCCCommitIntentOp::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCCommitIntentOp.txn_id)
}
#endif
inline void MVCCCommitIntentOp::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCCommitIntentOp.txn_id)
}
inline void MVCCCommitIntentOp::set_txn_id(const void* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCCommitIntentOp.txn_id)
}
inline ::std::string* MVCCCommitIntentOp::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCCommitIntentOp.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCCommitIntentOp::release_txn_id() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCCommitIntentOp.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCCommitIntentOp::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCCommitIntentOp.txn_id)
}

// bytes key = 2;
inline void MVCCCommitIntentOp::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCCommitIntentOp::key() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCCommitIntentOp.key)
  return key_.GetNoArena();
}
inline void MVCCCommitIntentOp::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCCommitIntentOp.key)
}
#if LANG_CXX11
inline void MVCCCommitIntentOp::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCCommitIntentOp.key)
}
#endif
inline void MVCCCommitIntentOp::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCCommitIntentOp.key)
}
inline void MVCCCommitIntentOp::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCCommitIntentOp.key)
}
inline ::std::string* MVCCCommitIntentOp::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCCommitIntentOp.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCCommitIntentOp::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCCommitIntentOp.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCCommitIntentOp::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCCommitIntentOp.key)
}

inline bool MVCCCommitIntentOp::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCCommitIntentOp::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& MVCCCommitIntentOp::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCCommitIntentOp.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* MVCCCommitIntentOp::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCCommitIntentOp.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* MVCCCommitIntentOp::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCCommitIntentOp.timestamp)
  return timestamp_;
}
inline void MVCCCommitIntentOp::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCCommitIntentOp.timestamp)
}

// bytes value = 4;
inline void MVCCCommitIntentOp::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCCommitIntentOp::value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCCommitIntentOp.value)
  return value_.GetNoArena();
}
inline void MVCCCommitIntentOp::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCCommitIntentOp.value)
}
#if LANG_CXX11
inline void MVCCCommitIntentOp::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCCommitIntentOp.value)
}
#endif
inline void MVCCCommitIntentOp::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCCommitIntentOp.value)
}
inline void MVCCCommitIntentOp::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCCommitIntentOp.value)
}
inline ::std::string* MVCCCommitIntentOp::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCCommitIntentOp.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCCommitIntentOp::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCCommitIntentOp.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCCommitIntentOp::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCCommitIntentOp.value)
}

// bytes prev_value = 5;
inline void MVCCCommitIntentOp::clear_prev_value() {
  prev_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCCommitIntentOp::prev_value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCCommitIntentOp.prev_value)
  return prev_value_.GetNoArena();
}
inline void MVCCCommitIntentOp::set_prev_value(const ::std::string& value) {
  
  prev_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCCommitIntentOp.prev_value)
}
#if LANG_CXX11
inline void MVCCCommitIntentOp::set_prev_value(::std::string&& value) {
  
  prev_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCCommitIntentOp.prev_value)
}
#endif
inline void MVCCCommitIntentOp::set_prev_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prev_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCCommitIntentOp.prev_value)
}
inline void MVCCCommitIntentOp::set_prev_value(const void* value, size_t size) {
  
  prev_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCCommitIntentOp.prev_value)
}
inline ::std::string* MVCCCommitIntentOp::mutable_prev_value() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCCommitIntentOp.prev_value)
  return prev_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCCommitIntentOp::release_prev_value() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCCommitIntentOp.prev_value)
  
  return prev_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCCommitIntentOp::set_allocated_prev_value(::std::string* prev_value) {
  if (prev_value != NULL) {
    
  } else {
    
  }
  prev_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCCommitIntentOp.prev_value)
}

// -------------------------------------------------------------------

// MVCCAbortIntentOp

inline void MVCCAbortIntentOp::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCAbortIntentOp::txn_id() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCAbortIntentOp.txn_id)
  return txn_id_.GetNoArena();
}
inline void MVCCAbortIntentOp::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCAbortIntentOp.txn_id)
}
#if LANG_CXX11
inline void MVCCAbortIntentOp::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCAbortIntentOp.txn_id)
}
#endif
inline void MVCCAbortIntentOp::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCAbortIntentOp.txn_id)
}
inline void MVCCAbortIntentOp::set_txn_id(const void* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCAbortIntentOp.txn_id)
}
inline ::std::string* MVCCAbortIntentOp::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCAbortIntentOp.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCAbortIntentOp::release_txn_id() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCAbortIntentOp.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCAbortIntentOp::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCAbortIntentOp.txn_id)
}

// -------------------------------------------------------------------

// MVCCAbortTxnOp

inline void MVCCAbortTxnOp::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MVCCAbortTxnOp::txn_id() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCAbortTxnOp.txn_id)
  return txn_id_.GetNoArena();
}
inline void MVCCAbortTxnOp::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.enginepb.MVCCAbortTxnOp.txn_id)
}
#if LANG_CXX11
inline void MVCCAbortTxnOp::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.enginepb.MVCCAbortTxnOp.txn_id)
}
#endif
inline void MVCCAbortTxnOp::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.enginepb.MVCCAbortTxnOp.txn_id)
}
inline void MVCCAbortTxnOp::set_txn_id(const void* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.enginepb.MVCCAbortTxnOp.txn_id)
}
inline ::std::string* MVCCAbortTxnOp::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCAbortTxnOp.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCAbortTxnOp::release_txn_id() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCAbortTxnOp.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCAbortTxnOp::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCAbortTxnOp.txn_id)
}

// -------------------------------------------------------------------

// MVCCLogicalOp

// .cockroach.storage.enginepb.MVCCWriteValueOp write_value = 1;
inline bool MVCCLogicalOp::has_write_value() const {
  return this != internal_default_instance() && write_value_ != NULL;
}
inline void MVCCLogicalOp::clear_write_value() {
  if (GetArenaNoVirtual() == NULL && write_value_ != NULL) {
    delete write_value_;
  }
  write_value_ = NULL;
}
inline const ::cockroach::storage::enginepb::MVCCWriteValueOp& MVCCLogicalOp::_internal_write_value() const {
  return *write_value_;
}
inline const ::cockroach::storage::enginepb::MVCCWriteValueOp& MVCCLogicalOp::write_value() const {
  const ::cockroach::storage::enginepb::MVCCWriteValueOp* p = write_value_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCLogicalOp.write_value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::enginepb::MVCCWriteValueOp*>(
      &::cockroach::storage::enginepb::_MVCCWriteValueOp_default_instance_);
}
inline ::cockroach::storage::enginepb::MVCCWriteValueOp* MVCCLogicalOp::release_write_value() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCLogicalOp.write_value)
  
  ::cockroach::storage::enginepb::MVCCWriteValueOp* temp = write_value_;
  write_value_ = NULL;
  return temp;
}
inline ::cockroach::storage::enginepb::MVCCWriteValueOp* MVCCLogicalOp::mutable_write_value() {
  
  if (write_value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::enginepb::MVCCWriteValueOp>(GetArenaNoVirtual());
    write_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCLogicalOp.write_value)
  return write_value_;
}
inline void MVCCLogicalOp::set_allocated_write_value(::cockroach::storage::enginepb::MVCCWriteValueOp* write_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete write_value_;
  }
  if (write_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_value, submessage_arena);
    }
    
  } else {
    
  }
  write_value_ = write_value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCLogicalOp.write_value)
}

// .cockroach.storage.enginepb.MVCCWriteIntentOp write_intent = 2;
inline bool MVCCLogicalOp::has_write_intent() const {
  return this != internal_default_instance() && write_intent_ != NULL;
}
inline void MVCCLogicalOp::clear_write_intent() {
  if (GetArenaNoVirtual() == NULL && write_intent_ != NULL) {
    delete write_intent_;
  }
  write_intent_ = NULL;
}
inline const ::cockroach::storage::enginepb::MVCCWriteIntentOp& MVCCLogicalOp::_internal_write_intent() const {
  return *write_intent_;
}
inline const ::cockroach::storage::enginepb::MVCCWriteIntentOp& MVCCLogicalOp::write_intent() const {
  const ::cockroach::storage::enginepb::MVCCWriteIntentOp* p = write_intent_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCLogicalOp.write_intent)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::enginepb::MVCCWriteIntentOp*>(
      &::cockroach::storage::enginepb::_MVCCWriteIntentOp_default_instance_);
}
inline ::cockroach::storage::enginepb::MVCCWriteIntentOp* MVCCLogicalOp::release_write_intent() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCLogicalOp.write_intent)
  
  ::cockroach::storage::enginepb::MVCCWriteIntentOp* temp = write_intent_;
  write_intent_ = NULL;
  return temp;
}
inline ::cockroach::storage::enginepb::MVCCWriteIntentOp* MVCCLogicalOp::mutable_write_intent() {
  
  if (write_intent_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::enginepb::MVCCWriteIntentOp>(GetArenaNoVirtual());
    write_intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCLogicalOp.write_intent)
  return write_intent_;
}
inline void MVCCLogicalOp::set_allocated_write_intent(::cockroach::storage::enginepb::MVCCWriteIntentOp* write_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete write_intent_;
  }
  if (write_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_intent, submessage_arena);
    }
    
  } else {
    
  }
  write_intent_ = write_intent;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCLogicalOp.write_intent)
}

// .cockroach.storage.enginepb.MVCCUpdateIntentOp update_intent = 3;
inline bool MVCCLogicalOp::has_update_intent() const {
  return this != internal_default_instance() && update_intent_ != NULL;
}
inline void MVCCLogicalOp::clear_update_intent() {
  if (GetArenaNoVirtual() == NULL && update_intent_ != NULL) {
    delete update_intent_;
  }
  update_intent_ = NULL;
}
inline const ::cockroach::storage::enginepb::MVCCUpdateIntentOp& MVCCLogicalOp::_internal_update_intent() const {
  return *update_intent_;
}
inline const ::cockroach::storage::enginepb::MVCCUpdateIntentOp& MVCCLogicalOp::update_intent() const {
  const ::cockroach::storage::enginepb::MVCCUpdateIntentOp* p = update_intent_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCLogicalOp.update_intent)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::enginepb::MVCCUpdateIntentOp*>(
      &::cockroach::storage::enginepb::_MVCCUpdateIntentOp_default_instance_);
}
inline ::cockroach::storage::enginepb::MVCCUpdateIntentOp* MVCCLogicalOp::release_update_intent() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCLogicalOp.update_intent)
  
  ::cockroach::storage::enginepb::MVCCUpdateIntentOp* temp = update_intent_;
  update_intent_ = NULL;
  return temp;
}
inline ::cockroach::storage::enginepb::MVCCUpdateIntentOp* MVCCLogicalOp::mutable_update_intent() {
  
  if (update_intent_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::enginepb::MVCCUpdateIntentOp>(GetArenaNoVirtual());
    update_intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCLogicalOp.update_intent)
  return update_intent_;
}
inline void MVCCLogicalOp::set_allocated_update_intent(::cockroach::storage::enginepb::MVCCUpdateIntentOp* update_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_intent_;
  }
  if (update_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_intent, submessage_arena);
    }
    
  } else {
    
  }
  update_intent_ = update_intent;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCLogicalOp.update_intent)
}

// .cockroach.storage.enginepb.MVCCCommitIntentOp commit_intent = 4;
inline bool MVCCLogicalOp::has_commit_intent() const {
  return this != internal_default_instance() && commit_intent_ != NULL;
}
inline void MVCCLogicalOp::clear_commit_intent() {
  if (GetArenaNoVirtual() == NULL && commit_intent_ != NULL) {
    delete commit_intent_;
  }
  commit_intent_ = NULL;
}
inline const ::cockroach::storage::enginepb::MVCCCommitIntentOp& MVCCLogicalOp::_internal_commit_intent() const {
  return *commit_intent_;
}
inline const ::cockroach::storage::enginepb::MVCCCommitIntentOp& MVCCLogicalOp::commit_intent() const {
  const ::cockroach::storage::enginepb::MVCCCommitIntentOp* p = commit_intent_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCLogicalOp.commit_intent)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::enginepb::MVCCCommitIntentOp*>(
      &::cockroach::storage::enginepb::_MVCCCommitIntentOp_default_instance_);
}
inline ::cockroach::storage::enginepb::MVCCCommitIntentOp* MVCCLogicalOp::release_commit_intent() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCLogicalOp.commit_intent)
  
  ::cockroach::storage::enginepb::MVCCCommitIntentOp* temp = commit_intent_;
  commit_intent_ = NULL;
  return temp;
}
inline ::cockroach::storage::enginepb::MVCCCommitIntentOp* MVCCLogicalOp::mutable_commit_intent() {
  
  if (commit_intent_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::enginepb::MVCCCommitIntentOp>(GetArenaNoVirtual());
    commit_intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCLogicalOp.commit_intent)
  return commit_intent_;
}
inline void MVCCLogicalOp::set_allocated_commit_intent(::cockroach::storage::enginepb::MVCCCommitIntentOp* commit_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commit_intent_;
  }
  if (commit_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      commit_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commit_intent, submessage_arena);
    }
    
  } else {
    
  }
  commit_intent_ = commit_intent;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCLogicalOp.commit_intent)
}

// .cockroach.storage.enginepb.MVCCAbortIntentOp abort_intent = 5;
inline bool MVCCLogicalOp::has_abort_intent() const {
  return this != internal_default_instance() && abort_intent_ != NULL;
}
inline void MVCCLogicalOp::clear_abort_intent() {
  if (GetArenaNoVirtual() == NULL && abort_intent_ != NULL) {
    delete abort_intent_;
  }
  abort_intent_ = NULL;
}
inline const ::cockroach::storage::enginepb::MVCCAbortIntentOp& MVCCLogicalOp::_internal_abort_intent() const {
  return *abort_intent_;
}
inline const ::cockroach::storage::enginepb::MVCCAbortIntentOp& MVCCLogicalOp::abort_intent() const {
  const ::cockroach::storage::enginepb::MVCCAbortIntentOp* p = abort_intent_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCLogicalOp.abort_intent)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::enginepb::MVCCAbortIntentOp*>(
      &::cockroach::storage::enginepb::_MVCCAbortIntentOp_default_instance_);
}
inline ::cockroach::storage::enginepb::MVCCAbortIntentOp* MVCCLogicalOp::release_abort_intent() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCLogicalOp.abort_intent)
  
  ::cockroach::storage::enginepb::MVCCAbortIntentOp* temp = abort_intent_;
  abort_intent_ = NULL;
  return temp;
}
inline ::cockroach::storage::enginepb::MVCCAbortIntentOp* MVCCLogicalOp::mutable_abort_intent() {
  
  if (abort_intent_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::enginepb::MVCCAbortIntentOp>(GetArenaNoVirtual());
    abort_intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCLogicalOp.abort_intent)
  return abort_intent_;
}
inline void MVCCLogicalOp::set_allocated_abort_intent(::cockroach::storage::enginepb::MVCCAbortIntentOp* abort_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete abort_intent_;
  }
  if (abort_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      abort_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, abort_intent, submessage_arena);
    }
    
  } else {
    
  }
  abort_intent_ = abort_intent;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCLogicalOp.abort_intent)
}

// .cockroach.storage.enginepb.MVCCAbortTxnOp abort_txn = 6;
inline bool MVCCLogicalOp::has_abort_txn() const {
  return this != internal_default_instance() && abort_txn_ != NULL;
}
inline void MVCCLogicalOp::clear_abort_txn() {
  if (GetArenaNoVirtual() == NULL && abort_txn_ != NULL) {
    delete abort_txn_;
  }
  abort_txn_ = NULL;
}
inline const ::cockroach::storage::enginepb::MVCCAbortTxnOp& MVCCLogicalOp::_internal_abort_txn() const {
  return *abort_txn_;
}
inline const ::cockroach::storage::enginepb::MVCCAbortTxnOp& MVCCLogicalOp::abort_txn() const {
  const ::cockroach::storage::enginepb::MVCCAbortTxnOp* p = abort_txn_;
  // @@protoc_insertion_point(field_get:cockroach.storage.enginepb.MVCCLogicalOp.abort_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::enginepb::MVCCAbortTxnOp*>(
      &::cockroach::storage::enginepb::_MVCCAbortTxnOp_default_instance_);
}
inline ::cockroach::storage::enginepb::MVCCAbortTxnOp* MVCCLogicalOp::release_abort_txn() {
  // @@protoc_insertion_point(field_release:cockroach.storage.enginepb.MVCCLogicalOp.abort_txn)
  
  ::cockroach::storage::enginepb::MVCCAbortTxnOp* temp = abort_txn_;
  abort_txn_ = NULL;
  return temp;
}
inline ::cockroach::storage::enginepb::MVCCAbortTxnOp* MVCCLogicalOp::mutable_abort_txn() {
  
  if (abort_txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::enginepb::MVCCAbortTxnOp>(GetArenaNoVirtual());
    abort_txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.enginepb.MVCCLogicalOp.abort_txn)
  return abort_txn_;
}
inline void MVCCLogicalOp::set_allocated_abort_txn(::cockroach::storage::enginepb::MVCCAbortTxnOp* abort_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete abort_txn_;
  }
  if (abort_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      abort_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, abort_txn, submessage_arena);
    }
    
  } else {
    
  }
  abort_txn_ = abort_txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.enginepb.MVCCLogicalOp.abort_txn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enginepb
}  // namespace storage
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_storage_2fenginepb_2fmvcc3_2eproto
