// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage/engine/enginepb/file_registry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storage/engine/enginepb/file_registry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace storage {
namespace engine {
namespace enginepb {
class RegistryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Registry>
     _instance;
} _Registry_default_instance_;
class FileEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FileEntry>
     _instance;
} _FileEntry_default_instance_;

namespace protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Registry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Registry_default_instance_);_FileEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FileEntry_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto

bool RegistryVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Registry::kVersionFieldNumber;
const int Registry::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Registry::Registry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.storage.engine.enginepb.Registry)
}
Registry::Registry(const Registry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      files_(from.files_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cockroach.storage.engine.enginepb.Registry)
}

void Registry::SharedCtor() {
  version_ = 0;
  _cached_size_ = 0;
}

Registry::~Registry() {
  // @@protoc_insertion_point(destructor:cockroach.storage.engine.enginepb.Registry)
  SharedDtor();
}

void Registry::SharedDtor() {
}

void Registry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Registry& Registry::default_instance() {
  protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Registry* Registry::New(::google::protobuf::Arena* arena) const {
  Registry* n = new Registry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Registry::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.storage.engine.enginepb.Registry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  version_ = 0;
  _internal_metadata_.Clear();
}

bool Registry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.storage.engine.enginepb.Registry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.storage.engine.enginepb.RegistryVersion version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_version(static_cast< ::cockroach::storage::engine::enginepb::RegistryVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cockroach.storage.engine.enginepb.FileEntry files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.storage.engine.enginepb.Registry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.storage.engine.enginepb.Registry)
  return false;
#undef DO_
}

void Registry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.storage.engine.enginepb.Registry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.storage.engine.enginepb.RegistryVersion version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->version(), output);
  }

  // repeated .cockroach.storage.engine.enginepb.FileEntry files = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->files(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.storage.engine.enginepb.Registry)
}

size_t Registry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.storage.engine.enginepb.Registry)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .cockroach.storage.engine.enginepb.FileEntry files = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->files(static_cast<int>(i)));
    }
  }

  // .cockroach.storage.engine.enginepb.RegistryVersion version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Registry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Registry*>(&from));
}

void Registry::MergeFrom(const Registry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.storage.engine.enginepb.Registry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Registry::CopyFrom(const Registry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.storage.engine.enginepb.Registry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Registry::IsInitialized() const {
  return true;
}

void Registry::Swap(Registry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Registry::InternalSwap(Registry* other) {
  using std::swap;
  files_.InternalSwap(&other->files_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Registry::GetTypeName() const {
  return "cockroach.storage.engine.enginepb.Registry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Registry

// .cockroach.storage.engine.enginepb.RegistryVersion version = 1;
void Registry::clear_version() {
  version_ = 0;
}
::cockroach::storage::engine::enginepb::RegistryVersion Registry::version() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.Registry.version)
  return static_cast< ::cockroach::storage::engine::enginepb::RegistryVersion >(version_);
}
void Registry::set_version(::cockroach::storage::engine::enginepb::RegistryVersion value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.Registry.version)
}

// repeated .cockroach.storage.engine.enginepb.FileEntry files = 2;
int Registry::files_size() const {
  return files_.size();
}
void Registry::clear_files() {
  files_.Clear();
}
const ::cockroach::storage::engine::enginepb::FileEntry& Registry::files(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.Registry.files)
  return files_.Get(index);
}
::cockroach::storage::engine::enginepb::FileEntry* Registry::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.Registry.files)
  return files_.Mutable(index);
}
::cockroach::storage::engine::enginepb::FileEntry* Registry::add_files() {
  // @@protoc_insertion_point(field_add:cockroach.storage.engine.enginepb.Registry.files)
  return files_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::storage::engine::enginepb::FileEntry >*
Registry::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.storage.engine.enginepb.Registry.files)
  return &files_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::storage::engine::enginepb::FileEntry >&
Registry::files() const {
  // @@protoc_insertion_point(field_list:cockroach.storage.engine.enginepb.Registry.files)
  return files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileEntry::kFilenameFieldNumber;
const int FileEntry::kEnvLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileEntry::FileEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.storage.engine.enginepb.FileEntry)
}
FileEntry::FileEntry(const FileEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  env_level_ = from.env_level_;
  // @@protoc_insertion_point(copy_constructor:cockroach.storage.engine.enginepb.FileEntry)
}

void FileEntry::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  env_level_ = 0;
  _cached_size_ = 0;
}

FileEntry::~FileEntry() {
  // @@protoc_insertion_point(destructor:cockroach.storage.engine.enginepb.FileEntry)
  SharedDtor();
}

void FileEntry::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileEntry& FileEntry::default_instance() {
  protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileEntry* FileEntry::New(::google::protobuf::Arena* arena) const {
  FileEntry* n = new FileEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.storage.engine.enginepb.FileEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  env_level_ = 0;
  _internal_metadata_.Clear();
}

bool FileEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.storage.engine.enginepb.FileEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.storage.engine.enginepb.FileEntry.Filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 env_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &env_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.storage.engine.enginepb.FileEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.storage.engine.enginepb.FileEntry)
  return false;
#undef DO_
}

void FileEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.storage.engine.enginepb.FileEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.storage.engine.enginepb.FileEntry.Filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // int32 env_level = 2;
  if (this->env_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->env_level(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.storage.engine.enginepb.FileEntry)
}

size_t FileEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.storage.engine.enginepb.FileEntry)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string Filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // int32 env_level = 2;
  if (this->env_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->env_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileEntry*>(&from));
}

void FileEntry::MergeFrom(const FileEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.storage.engine.enginepb.FileEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.env_level() != 0) {
    set_env_level(from.env_level());
  }
}

void FileEntry::CopyFrom(const FileEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.storage.engine.enginepb.FileEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileEntry::IsInitialized() const {
  return true;
}

void FileEntry::Swap(FileEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileEntry::InternalSwap(FileEntry* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  swap(env_level_, other->env_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string FileEntry::GetTypeName() const {
  return "cockroach.storage.engine.enginepb.FileEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileEntry

// string Filename = 1;
void FileEntry::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileEntry::filename() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.FileEntry.Filename)
  return filename_.GetNoArena();
}
void FileEntry::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.FileEntry.Filename)
}
#if LANG_CXX11
void FileEntry::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.engine.enginepb.FileEntry.Filename)
}
#endif
void FileEntry::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.engine.enginepb.FileEntry.Filename)
}
void FileEntry::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.engine.enginepb.FileEntry.Filename)
}
::std::string* FileEntry::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.FileEntry.Filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileEntry::release_filename() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.FileEntry.Filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileEntry::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.FileEntry.Filename)
}

// int32 env_level = 2;
void FileEntry::clear_env_level() {
  env_level_ = 0;
}
::google::protobuf::int32 FileEntry::env_level() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.FileEntry.env_level)
  return env_level_;
}
void FileEntry::set_env_level(::google::protobuf::int32 value) {
  
  env_level_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.FileEntry.env_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace enginepb
}  // namespace engine
}  // namespace storage
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
