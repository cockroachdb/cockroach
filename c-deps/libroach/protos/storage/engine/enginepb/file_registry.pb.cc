// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage/engine/enginepb/file_registry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storage/engine/enginepb/file_registry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace storage {
namespace engine {
namespace enginepb {
class FileRegistry_FilesEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FileRegistry::FileRegistry_FilesEntry>
     _instance;
} _FileRegistry_FilesEntry_default_instance_;
class FileRegistryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FileRegistry>
     _instance;
} _FileRegistry_default_instance_;
class FileEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FileEntry>
     _instance;
} _FileEntry_default_instance_;

namespace protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FileRegistry_FilesEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FileRegistry_FilesEntry_default_instance_);_FileRegistry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FileRegistry_default_instance_);_FileEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FileEntry_default_instance_);_FileRegistry_FilesEntry_default_instance_._instance.get_mutable()->set_default_instance(_FileRegistry_FilesEntry_default_instance_._instance.get_mutable());
  _FileRegistry_FilesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto

bool RegistryVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

bool EnvType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRegistry::kVersionFieldNumber;
const int FileRegistry::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRegistry::FileRegistry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.storage.engine.enginepb.FileRegistry)
}
FileRegistry::FileRegistry(const FileRegistry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  files_.MergeFrom(from.files_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cockroach.storage.engine.enginepb.FileRegistry)
}

void FileRegistry::SharedCtor() {
  version_ = 0;
  _cached_size_ = 0;
}

FileRegistry::~FileRegistry() {
  // @@protoc_insertion_point(destructor:cockroach.storage.engine.enginepb.FileRegistry)
  SharedDtor();
}

void FileRegistry::SharedDtor() {
}

void FileRegistry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileRegistry& FileRegistry::default_instance() {
  protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileRegistry* FileRegistry::New(::google::protobuf::Arena* arena) const {
  FileRegistry* n = new FileRegistry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileRegistry::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.storage.engine.enginepb.FileRegistry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  version_ = 0;
  _internal_metadata_.Clear();
}

bool FileRegistry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.storage.engine.enginepb.FileRegistry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.storage.engine.enginepb.RegistryVersion version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_version(static_cast< ::cockroach::storage::engine::enginepb::RegistryVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .cockroach.storage.engine.enginepb.FileEntry> files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          FileRegistry_FilesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              FileRegistry_FilesEntry,
              ::std::string, ::cockroach::storage::engine::enginepb::FileEntry,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::cockroach::storage::engine::enginepb::FileEntry > > parser(&files_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.storage.engine.enginepb.FileRegistry.FilesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.storage.engine.enginepb.FileRegistry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.storage.engine.enginepb.FileRegistry)
  return false;
#undef DO_
}

void FileRegistry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.storage.engine.enginepb.FileRegistry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.storage.engine.enginepb.RegistryVersion version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->version(), output);
  }

  // map<string, .cockroach.storage.engine.enginepb.FileEntry> files = 2;
  if (!this->files().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::cockroach::storage::engine::enginepb::FileEntry >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.storage.engine.enginepb.FileRegistry.FilesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->files().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->files().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::cockroach::storage::engine::enginepb::FileEntry >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::cockroach::storage::engine::enginepb::FileEntry >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FileRegistry_FilesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(files_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FileRegistry_FilesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::cockroach::storage::engine::enginepb::FileEntry >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it) {
        entry.reset(files_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.storage.engine.enginepb.FileRegistry)
}

size_t FileRegistry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.storage.engine.enginepb.FileRegistry)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<string, .cockroach.storage.engine.enginepb.FileEntry> files = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->files_size());
  {
    ::google::protobuf::scoped_ptr<FileRegistry_FilesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::cockroach::storage::engine::enginepb::FileEntry >::const_iterator
        it = this->files().begin();
        it != this->files().end(); ++it) {
      entry.reset(files_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .cockroach.storage.engine.enginepb.RegistryVersion version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileRegistry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileRegistry*>(&from));
}

void FileRegistry::MergeFrom(const FileRegistry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.storage.engine.enginepb.FileRegistry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void FileRegistry::CopyFrom(const FileRegistry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.storage.engine.enginepb.FileRegistry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRegistry::IsInitialized() const {
  return true;
}

void FileRegistry::Swap(FileRegistry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRegistry::InternalSwap(FileRegistry* other) {
  using std::swap;
  files_.Swap(&other->files_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string FileRegistry::GetTypeName() const {
  return "cockroach.storage.engine.enginepb.FileRegistry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileRegistry

// .cockroach.storage.engine.enginepb.RegistryVersion version = 1;
void FileRegistry::clear_version() {
  version_ = 0;
}
::cockroach::storage::engine::enginepb::RegistryVersion FileRegistry::version() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.FileRegistry.version)
  return static_cast< ::cockroach::storage::engine::enginepb::RegistryVersion >(version_);
}
void FileRegistry::set_version(::cockroach::storage::engine::enginepb::RegistryVersion value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.FileRegistry.version)
}

// map<string, .cockroach.storage.engine.enginepb.FileEntry> files = 2;
int FileRegistry::files_size() const {
  return files_.size();
}
void FileRegistry::clear_files() {
  files_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::cockroach::storage::engine::enginepb::FileEntry >&
FileRegistry::files() const {
  // @@protoc_insertion_point(field_map:cockroach.storage.engine.enginepb.FileRegistry.files)
  return files_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::cockroach::storage::engine::enginepb::FileEntry >*
FileRegistry::mutable_files() {
  // @@protoc_insertion_point(field_mutable_map:cockroach.storage.engine.enginepb.FileRegistry.files)
  return files_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileEntry::kEnvTypeFieldNumber;
const int FileEntry::kEncryptionSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileEntry::FileEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.storage.engine.enginepb.FileEntry)
}
FileEntry::FileEntry(const FileEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encryption_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encryption_settings().size() > 0) {
    encryption_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_settings_);
  }
  env_type_ = from.env_type_;
  // @@protoc_insertion_point(copy_constructor:cockroach.storage.engine.enginepb.FileEntry)
}

void FileEntry::SharedCtor() {
  encryption_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  env_type_ = 0;
  _cached_size_ = 0;
}

FileEntry::~FileEntry() {
  // @@protoc_insertion_point(destructor:cockroach.storage.engine.enginepb.FileEntry)
  SharedDtor();
}

void FileEntry::SharedDtor() {
  encryption_settings_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileEntry& FileEntry::default_instance() {
  protobuf_storage_2fengine_2fenginepb_2ffile_5fregistry_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileEntry* FileEntry::New(::google::protobuf::Arena* arena) const {
  FileEntry* n = new FileEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.storage.engine.enginepb.FileEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encryption_settings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  env_type_ = 0;
  _internal_metadata_.Clear();
}

bool FileEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.storage.engine.enginepb.FileEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.storage.engine.enginepb.EnvType env_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_env_type(static_cast< ::cockroach::storage::engine::enginepb::EnvType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes encryption_settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.storage.engine.enginepb.FileEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.storage.engine.enginepb.FileEntry)
  return false;
#undef DO_
}

void FileEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.storage.engine.enginepb.FileEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.storage.engine.enginepb.EnvType env_type = 1;
  if (this->env_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->env_type(), output);
  }

  // bytes encryption_settings = 2;
  if (this->encryption_settings().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encryption_settings(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.storage.engine.enginepb.FileEntry)
}

size_t FileEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.storage.engine.enginepb.FileEntry)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes encryption_settings = 2;
  if (this->encryption_settings().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryption_settings());
  }

  // .cockroach.storage.engine.enginepb.EnvType env_type = 1;
  if (this->env_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->env_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileEntry*>(&from));
}

void FileEntry::MergeFrom(const FileEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.storage.engine.enginepb.FileEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encryption_settings().size() > 0) {

    encryption_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_settings_);
  }
  if (from.env_type() != 0) {
    set_env_type(from.env_type());
  }
}

void FileEntry::CopyFrom(const FileEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.storage.engine.enginepb.FileEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileEntry::IsInitialized() const {
  return true;
}

void FileEntry::Swap(FileEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileEntry::InternalSwap(FileEntry* other) {
  using std::swap;
  encryption_settings_.Swap(&other->encryption_settings_);
  swap(env_type_, other->env_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string FileEntry::GetTypeName() const {
  return "cockroach.storage.engine.enginepb.FileEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileEntry

// .cockroach.storage.engine.enginepb.EnvType env_type = 1;
void FileEntry::clear_env_type() {
  env_type_ = 0;
}
::cockroach::storage::engine::enginepb::EnvType FileEntry::env_type() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.FileEntry.env_type)
  return static_cast< ::cockroach::storage::engine::enginepb::EnvType >(env_type_);
}
void FileEntry::set_env_type(::cockroach::storage::engine::enginepb::EnvType value) {
  
  env_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.FileEntry.env_type)
}

// bytes encryption_settings = 2;
void FileEntry::clear_encryption_settings() {
  encryption_settings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileEntry::encryption_settings() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.FileEntry.encryption_settings)
  return encryption_settings_.GetNoArena();
}
void FileEntry::set_encryption_settings(const ::std::string& value) {
  
  encryption_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.FileEntry.encryption_settings)
}
#if LANG_CXX11
void FileEntry::set_encryption_settings(::std::string&& value) {
  
  encryption_settings_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.engine.enginepb.FileEntry.encryption_settings)
}
#endif
void FileEntry::set_encryption_settings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encryption_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.engine.enginepb.FileEntry.encryption_settings)
}
void FileEntry::set_encryption_settings(const void* value, size_t size) {
  
  encryption_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.engine.enginepb.FileEntry.encryption_settings)
}
::std::string* FileEntry::mutable_encryption_settings() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.FileEntry.encryption_settings)
  return encryption_settings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileEntry::release_encryption_settings() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.FileEntry.encryption_settings)
  
  return encryption_settings_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileEntry::set_allocated_encryption_settings(::std::string* encryption_settings) {
  if (encryption_settings != NULL) {
    
  } else {
    
  }
  encryption_settings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryption_settings);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.FileEntry.encryption_settings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace enginepb
}  // namespace engine
}  // namespace storage
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
