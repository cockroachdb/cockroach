// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util/unresolved_addr.proto

#include "util/unresolved_addr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace util {
class UnresolvedAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnresolvedAddr>
      _instance;
} _UnresolvedAddr_default_instance_;
}  // namespace util
}  // namespace cockroach
namespace protobuf_util_2funresolved_5faddr_2eproto {
static void InitDefaultsUnresolvedAddr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::_UnresolvedAddr_default_instance_;
    new (ptr) ::cockroach::util::UnresolvedAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::UnresolvedAddr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnresolvedAddr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnresolvedAddr}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UnresolvedAddr.base);
}

}  // namespace protobuf_util_2funresolved_5faddr_2eproto
namespace cockroach {
namespace util {

// ===================================================================

void UnresolvedAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnresolvedAddr::kNetworkFieldFieldNumber;
const int UnresolvedAddr::kAddressFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnresolvedAddr::UnresolvedAddr()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2funresolved_5faddr_2eproto::scc_info_UnresolvedAddr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.UnresolvedAddr)
}
UnresolvedAddr::UnresolvedAddr(const UnresolvedAddr& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_field()) {
    network_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_field_);
  }
  address_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_field()) {
    address_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_field_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.util.UnresolvedAddr)
}

void UnresolvedAddr::SharedCtor() {
  network_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnresolvedAddr::~UnresolvedAddr() {
  // @@protoc_insertion_point(destructor:cockroach.util.UnresolvedAddr)
  SharedDtor();
}

void UnresolvedAddr::SharedDtor() {
  network_field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnresolvedAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnresolvedAddr& UnresolvedAddr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2funresolved_5faddr_2eproto::scc_info_UnresolvedAddr.base);
  return *internal_default_instance();
}


void UnresolvedAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.UnresolvedAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      network_field_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      address_field_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnresolvedAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.UnresolvedAddr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.UnresolvedAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.UnresolvedAddr)
  return false;
#undef DO_
}

void UnresolvedAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.UnresolvedAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network_field(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address_field(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.UnresolvedAddr)
}

size_t UnresolvedAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.UnresolvedAddr)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_network_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_field());
    }

    if (has_address_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_field());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnresolvedAddr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnresolvedAddr*>(&from));
}

void UnresolvedAddr::MergeFrom(const UnresolvedAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.UnresolvedAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_network_field();
      network_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_field_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_address_field();
      address_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_field_);
    }
  }
}

void UnresolvedAddr::CopyFrom(const UnresolvedAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.UnresolvedAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnresolvedAddr::IsInitialized() const {
  return true;
}

void UnresolvedAddr::Swap(UnresolvedAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnresolvedAddr::InternalSwap(UnresolvedAddr* other) {
  using std::swap;
  network_field_.Swap(&other->network_field_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_field_.Swap(&other->address_field_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string UnresolvedAddr::GetTypeName() const {
  return "cockroach.util.UnresolvedAddr";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace util
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::UnresolvedAddr* Arena::CreateMaybeMessage< ::cockroach::util::UnresolvedAddr >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::UnresolvedAddr >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
