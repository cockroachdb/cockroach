// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util/log/log.proto

#ifndef PROTOBUF_INCLUDED_util_2flog_2flog_2eproto
#define PROTOBUF_INCLUDED_util_2flog_2flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_util_2flog_2flog_2eproto 

namespace protobuf_util_2flog_2flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_util_2flog_2flog_2eproto
namespace cockroach {
namespace util {
namespace log {
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class FileDetails;
class FileDetailsDefaultTypeInternal;
extern FileDetailsDefaultTypeInternal _FileDetails_default_instance_;
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
}  // namespace log
}  // namespace util
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> ::cockroach::util::log::Entry* Arena::CreateMaybeMessage<::cockroach::util::log::Entry>(Arena*);
template<> ::cockroach::util::log::FileDetails* Arena::CreateMaybeMessage<::cockroach::util::log::FileDetails>(Arena*);
template<> ::cockroach::util::log::FileInfo* Arena::CreateMaybeMessage<::cockroach::util::log::FileInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cockroach {
namespace util {
namespace log {

enum Severity {
  UNKNOWN = 0,
  INFO = 1,
  WARNING = 2,
  ERROR = 3,
  FATAL = 4,
  NONE = 5,
  DEFAULT = 6,
  Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Severity_IsValid(int value);
const Severity Severity_MIN = UNKNOWN;
const Severity Severity_MAX = DEFAULT;
const int Severity_ARRAYSIZE = Severity_MAX + 1;

// ===================================================================

class Entry : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.util.log.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(NULL);
  }

  Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file = 3;
  void clear_file();
  static const int kFileFieldNumber = 3;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string message = 5;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string tags = 7;
  void clear_tags();
  static const int kTagsFieldNumber = 7;
  const ::std::string& tags() const;
  void set_tags(const ::std::string& value);
  #if LANG_CXX11
  void set_tags(::std::string&& value);
  #endif
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  ::std::string* mutable_tags();
  ::std::string* release_tags();
  void set_allocated_tags(::std::string* tags);

  // int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // int64 line = 4;
  void clear_line();
  static const int kLineFieldNumber = 4;
  ::google::protobuf::int64 line() const;
  void set_line(::google::protobuf::int64 value);

  // .cockroach.util.log.Severity severity = 1;
  void clear_severity();
  static const int kSeverityFieldNumber = 1;
  ::cockroach::util::log::Severity severity() const;
  void set_severity(::cockroach::util::log::Severity value);

  // bool redactable = 9;
  void clear_redactable();
  static const int kRedactableFieldNumber = 9;
  bool redactable() const;
  void set_redactable(bool value);

  // int64 goroutine = 6;
  void clear_goroutine();
  static const int kGoroutineFieldNumber = 6;
  ::google::protobuf::int64 goroutine() const;
  void set_goroutine(::google::protobuf::int64 value);

  // uint64 counter = 8;
  void clear_counter();
  static const int kCounterFieldNumber = 8;
  ::google::protobuf::uint64 counter() const;
  void set_counter(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cockroach.util.log.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr tags_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 line_;
  int severity_;
  bool redactable_;
  ::google::protobuf::int64 goroutine_;
  ::google::protobuf::uint64 counter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_util_2flog_2flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileDetails : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.util.log.FileDetails) */ {
 public:
  FileDetails();
  virtual ~FileDetails();

  FileDetails(const FileDetails& from);

  inline FileDetails& operator=(const FileDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileDetails(FileDetails&& from) noexcept
    : FileDetails() {
    *this = ::std::move(from);
  }

  inline FileDetails& operator=(FileDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FileDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileDetails* internal_default_instance() {
    return reinterpret_cast<const FileDetails*>(
               &_FileDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileDetails* other);
  friend void swap(FileDetails& a, FileDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileDetails* New() const final {
    return CreateMaybeMessage<FileDetails>(NULL);
  }

  FileDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileDetails& from);
  void MergeFrom(const FileDetails& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string program = 1;
  void clear_program();
  static const int kProgramFieldNumber = 1;
  const ::std::string& program() const;
  void set_program(const ::std::string& value);
  #if LANG_CXX11
  void set_program(::std::string&& value);
  #endif
  void set_program(const char* value);
  void set_program(const char* value, size_t size);
  ::std::string* mutable_program();
  ::std::string* release_program();
  void set_allocated_program(::std::string* program);

  // string host = 2;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string user_name = 3;
  void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // int64 time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  void clear_pid();
  static const int kPidFieldNumber = 6;
  ::google::protobuf::int64 pid() const;
  void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.util.log.FileDetails)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr program_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_util_2flog_2flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.util.log.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileInfo* other);
  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(NULL);
  }

  FileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 4;
  private:
  const ::cockroach::util::log::FileDetails& _internal_details() const;
  public:
  const ::cockroach::util::log::FileDetails& details() const;
  ::cockroach::util::log::FileDetails* release_details();
  ::cockroach::util::log::FileDetails* mutable_details();
  void set_allocated_details(::cockroach::util::log::FileDetails* details);

  // int64 size_bytes = 2;
  void clear_size_bytes();
  static const int kSizeBytesFieldNumber = 2;
  ::google::protobuf::int64 size_bytes() const;
  void set_size_bytes(::google::protobuf::int64 value);

  // int64 mod_time_nanos = 3;
  void clear_mod_time_nanos();
  static const int kModTimeNanosFieldNumber = 3;
  ::google::protobuf::int64 mod_time_nanos() const;
  void set_mod_time_nanos(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.util.log.FileInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::cockroach::util::log::FileDetails* details_;
  ::google::protobuf::int64 size_bytes_;
  ::google::protobuf::int64 mod_time_nanos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_util_2flog_2flog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// .cockroach.util.log.Severity severity = 1;
inline void Entry::clear_severity() {
  severity_ = 0;
}
inline ::cockroach::util::log::Severity Entry::severity() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.severity)
  return static_cast< ::cockroach::util::log::Severity >(severity_);
}
inline void Entry::set_severity(::cockroach::util::log::Severity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.severity)
}

// int64 time = 2;
inline void Entry::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Entry::time() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.time)
  return time_;
}
inline void Entry::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.time)
}

// int64 goroutine = 6;
inline void Entry::clear_goroutine() {
  goroutine_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Entry::goroutine() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.goroutine)
  return goroutine_;
}
inline void Entry::set_goroutine(::google::protobuf::int64 value) {
  
  goroutine_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.goroutine)
}

// string file = 3;
inline void Entry::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::file() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.file)
  return file_.GetNoArena();
}
inline void Entry::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.file)
}
#if LANG_CXX11
inline void Entry::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.log.Entry.file)
}
#endif
inline void Entry::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.log.Entry.file)
}
inline void Entry::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.log.Entry.file)
}
inline ::std::string* Entry::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.log.Entry.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_file() {
  // @@protoc_insertion_point(field_release:cockroach.util.log.Entry.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.log.Entry.file)
}

// int64 line = 4;
inline void Entry::clear_line() {
  line_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Entry::line() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.line)
  return line_;
}
inline void Entry::set_line(::google::protobuf::int64 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.line)
}

// string message = 5;
inline void Entry::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::message() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.message)
  return message_.GetNoArena();
}
inline void Entry::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.message)
}
#if LANG_CXX11
inline void Entry::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.log.Entry.message)
}
#endif
inline void Entry::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.log.Entry.message)
}
inline void Entry::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.log.Entry.message)
}
inline ::std::string* Entry::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.log.Entry.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_message() {
  // @@protoc_insertion_point(field_release:cockroach.util.log.Entry.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.log.Entry.message)
}

// string tags = 7;
inline void Entry::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::tags() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.tags)
  return tags_.GetNoArena();
}
inline void Entry::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.tags)
}
#if LANG_CXX11
inline void Entry::set_tags(::std::string&& value) {
  
  tags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.log.Entry.tags)
}
#endif
inline void Entry::set_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.log.Entry.tags)
}
inline void Entry::set_tags(const char* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.log.Entry.tags)
}
inline ::std::string* Entry::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.log.Entry.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_tags() {
  // @@protoc_insertion_point(field_release:cockroach.util.log.Entry.tags)
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.log.Entry.tags)
}

// uint64 counter = 8;
inline void Entry::clear_counter() {
  counter_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Entry::counter() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.counter)
  return counter_;
}
inline void Entry::set_counter(::google::protobuf::uint64 value) {
  
  counter_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.counter)
}

// bool redactable = 9;
inline void Entry::clear_redactable() {
  redactable_ = false;
}
inline bool Entry::redactable() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.Entry.redactable)
  return redactable_;
}
inline void Entry::set_redactable(bool value) {
  
  redactable_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.Entry.redactable)
}

// -------------------------------------------------------------------

// FileDetails

// string program = 1;
inline void FileDetails::clear_program() {
  program_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDetails::program() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileDetails.program)
  return program_.GetNoArena();
}
inline void FileDetails::set_program(const ::std::string& value) {
  
  program_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.log.FileDetails.program)
}
#if LANG_CXX11
inline void FileDetails::set_program(::std::string&& value) {
  
  program_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.log.FileDetails.program)
}
#endif
inline void FileDetails::set_program(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  program_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.log.FileDetails.program)
}
inline void FileDetails::set_program(const char* value, size_t size) {
  
  program_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.log.FileDetails.program)
}
inline ::std::string* FileDetails::mutable_program() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.log.FileDetails.program)
  return program_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDetails::release_program() {
  // @@protoc_insertion_point(field_release:cockroach.util.log.FileDetails.program)
  
  return program_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_program(::std::string* program) {
  if (program != NULL) {
    
  } else {
    
  }
  program_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), program);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.log.FileDetails.program)
}

// string host = 2;
inline void FileDetails::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDetails::host() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileDetails.host)
  return host_.GetNoArena();
}
inline void FileDetails::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.log.FileDetails.host)
}
#if LANG_CXX11
inline void FileDetails::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.log.FileDetails.host)
}
#endif
inline void FileDetails::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.log.FileDetails.host)
}
inline void FileDetails::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.log.FileDetails.host)
}
inline ::std::string* FileDetails::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.log.FileDetails.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDetails::release_host() {
  // @@protoc_insertion_point(field_release:cockroach.util.log.FileDetails.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.log.FileDetails.host)
}

// string user_name = 3;
inline void FileDetails::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDetails::user_name() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileDetails.user_name)
  return user_name_.GetNoArena();
}
inline void FileDetails::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.log.FileDetails.user_name)
}
#if LANG_CXX11
inline void FileDetails::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.log.FileDetails.user_name)
}
#endif
inline void FileDetails::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.log.FileDetails.user_name)
}
inline void FileDetails::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.log.FileDetails.user_name)
}
inline ::std::string* FileDetails::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.log.FileDetails.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDetails::release_user_name() {
  // @@protoc_insertion_point(field_release:cockroach.util.log.FileDetails.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.log.FileDetails.user_name)
}

// int64 time = 5;
inline void FileDetails::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileDetails::time() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileDetails.time)
  return time_;
}
inline void FileDetails::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.FileDetails.time)
}

inline void FileDetails::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileDetails::pid() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileDetails.pid)
  return pid_;
}
inline void FileDetails::set_pid(::google::protobuf::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.FileDetails.pid)
}

// -------------------------------------------------------------------

// FileInfo

// string name = 1;
inline void FileInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileInfo::name() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileInfo.name)
  return name_.GetNoArena();
}
inline void FileInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.log.FileInfo.name)
}
#if LANG_CXX11
inline void FileInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.log.FileInfo.name)
}
#endif
inline void FileInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.log.FileInfo.name)
}
inline void FileInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.log.FileInfo.name)
}
inline ::std::string* FileInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.log.FileInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileInfo::release_name() {
  // @@protoc_insertion_point(field_release:cockroach.util.log.FileInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.log.FileInfo.name)
}

// int64 size_bytes = 2;
inline void FileInfo::clear_size_bytes() {
  size_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileInfo::size_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileInfo.size_bytes)
  return size_bytes_;
}
inline void FileInfo::set_size_bytes(::google::protobuf::int64 value) {
  
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.FileInfo.size_bytes)
}

// int64 mod_time_nanos = 3;
inline void FileInfo::clear_mod_time_nanos() {
  mod_time_nanos_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileInfo::mod_time_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileInfo.mod_time_nanos)
  return mod_time_nanos_;
}
inline void FileInfo::set_mod_time_nanos(::google::protobuf::int64 value) {
  
  mod_time_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.log.FileInfo.mod_time_nanos)
}

inline bool FileInfo::has_details() const {
  return this != internal_default_instance() && details_ != NULL;
}
inline void FileInfo::clear_details() {
  if (GetArenaNoVirtual() == NULL && details_ != NULL) {
    delete details_;
  }
  details_ = NULL;
}
inline const ::cockroach::util::log::FileDetails& FileInfo::_internal_details() const {
  return *details_;
}
inline const ::cockroach::util::log::FileDetails& FileInfo::details() const {
  const ::cockroach::util::log::FileDetails* p = details_;
  // @@protoc_insertion_point(field_get:cockroach.util.log.FileInfo.details)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::log::FileDetails*>(
      &::cockroach::util::log::_FileDetails_default_instance_);
}
inline ::cockroach::util::log::FileDetails* FileInfo::release_details() {
  // @@protoc_insertion_point(field_release:cockroach.util.log.FileInfo.details)
  
  ::cockroach::util::log::FileDetails* temp = details_;
  details_ = NULL;
  return temp;
}
inline ::cockroach::util::log::FileDetails* FileInfo::mutable_details() {
  
  if (details_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::log::FileDetails>(GetArenaNoVirtual());
    details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.util.log.FileInfo.details)
  return details_;
}
inline void FileInfo::set_allocated_details(::cockroach::util::log::FileDetails* details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete details_;
  }
  if (details) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.log.FileInfo.details)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace util
}  // namespace cockroach

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::util::log::Severity> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_util_2flog_2flog_2eproto
