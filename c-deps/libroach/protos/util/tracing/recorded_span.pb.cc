// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util/tracing/recorded_span.proto

#include "util/tracing/recorded_span.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fany_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any;
}  // namespace protobuf_google_2fprotobuf_2fany_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_util_2ftracing_2frecorded_5fspan_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ComponentActivity_CustomEventsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ComponentTraces_Event;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RecordedSpan_BaggageEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RecordedSpan_LogRecord_Field;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RecordedSpan_TagsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ComponentSamples;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ComponentSamples_Sample;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ComponentTraces_EventsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecordedSpan_LogRecord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RecordedSpan;
}  // namespace protobuf_util_2ftracing_2frecorded_5fspan_2eproto
namespace cockroach {
namespace util {
namespace tracing {
class RecordedSpan_BaggageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordedSpan_BaggageEntry_DoNotUse>
      _instance;
} _RecordedSpan_BaggageEntry_DoNotUse_default_instance_;
class RecordedSpan_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordedSpan_TagsEntry_DoNotUse>
      _instance;
} _RecordedSpan_TagsEntry_DoNotUse_default_instance_;
class RecordedSpan_LogRecord_FieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordedSpan_LogRecord_Field>
      _instance;
} _RecordedSpan_LogRecord_Field_default_instance_;
class RecordedSpan_LogRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordedSpan_LogRecord>
      _instance;
} _RecordedSpan_LogRecord_default_instance_;
class RecordedSpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordedSpan>
      _instance;
} _RecordedSpan_default_instance_;
class ComponentActivity_CustomEventsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComponentActivity_CustomEventsEntry_DoNotUse>
      _instance;
} _ComponentActivity_CustomEventsEntry_DoNotUse_default_instance_;
class ComponentActivityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComponentActivity>
      _instance;
} _ComponentActivity_default_instance_;
class ComponentSamples_SampleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComponentSamples_Sample>
      _instance;
} _ComponentSamples_Sample_default_instance_;
class ComponentSamplesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComponentSamples>
      _instance;
} _ComponentSamples_default_instance_;
class ComponentTraces_EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComponentTraces_Event>
      _instance;
} _ComponentTraces_Event_default_instance_;
class ComponentTraces_EventsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComponentTraces_EventsEntry_DoNotUse>
      _instance;
} _ComponentTraces_EventsEntry_DoNotUse_default_instance_;
class ComponentTracesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComponentTraces>
      _instance;
} _ComponentTraces_default_instance_;
}  // namespace tracing
}  // namespace util
}  // namespace cockroach
namespace protobuf_util_2ftracing_2frecorded_5fspan_2eproto {
static void InitDefaultsRecordedSpan_BaggageEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_RecordedSpan_BaggageEntry_DoNotUse_default_instance_;
    new (ptr) ::cockroach::util::tracing::RecordedSpan_BaggageEntry_DoNotUse();
  }
  ::cockroach::util::tracing::RecordedSpan_BaggageEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecordedSpan_BaggageEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecordedSpan_BaggageEntry_DoNotUse}, {}};

static void InitDefaultsRecordedSpan_TagsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_RecordedSpan_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::cockroach::util::tracing::RecordedSpan_TagsEntry_DoNotUse();
  }
  ::cockroach::util::tracing::RecordedSpan_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecordedSpan_TagsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecordedSpan_TagsEntry_DoNotUse}, {}};

static void InitDefaultsRecordedSpan_LogRecord_Field() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_RecordedSpan_LogRecord_Field_default_instance_;
    new (ptr) ::cockroach::util::tracing::RecordedSpan_LogRecord_Field();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::tracing::RecordedSpan_LogRecord_Field::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecordedSpan_LogRecord_Field =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecordedSpan_LogRecord_Field}, {}};

static void InitDefaultsRecordedSpan_LogRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_RecordedSpan_LogRecord_default_instance_;
    new (ptr) ::cockroach::util::tracing::RecordedSpan_LogRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::tracing::RecordedSpan_LogRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecordedSpan_LogRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecordedSpan_LogRecord}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan_LogRecord_Field.base,}};

static void InitDefaultsRecordedSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_RecordedSpan_default_instance_;
    new (ptr) ::cockroach::util::tracing::RecordedSpan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::tracing::RecordedSpan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_RecordedSpan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsRecordedSpan}, {
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan_BaggageEntry_DoNotUse.base,
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan_TagsEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan_LogRecord.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsComponentActivity_CustomEventsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_ComponentActivity_CustomEventsEntry_DoNotUse_default_instance_;
    new (ptr) ::cockroach::util::tracing::ComponentActivity_CustomEventsEntry_DoNotUse();
  }
  ::cockroach::util::tracing::ComponentActivity_CustomEventsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ComponentActivity_CustomEventsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsComponentActivity_CustomEventsEntry_DoNotUse}, {}};

static void InitDefaultsComponentActivity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_ComponentActivity_default_instance_;
    new (ptr) ::cockroach::util::tracing::ComponentActivity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::tracing::ComponentActivity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ComponentActivity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsComponentActivity}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentActivity_CustomEventsEntry_DoNotUse.base,}};

static void InitDefaultsComponentSamples_Sample() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_ComponentSamples_Sample_default_instance_;
    new (ptr) ::cockroach::util::tracing::ComponentSamples_Sample();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::tracing::ComponentSamples_Sample::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ComponentSamples_Sample =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsComponentSamples_Sample}, {
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan.base,}};

static void InitDefaultsComponentSamples() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_ComponentSamples_default_instance_;
    new (ptr) ::cockroach::util::tracing::ComponentSamples();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::tracing::ComponentSamples::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ComponentSamples =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsComponentSamples}, {
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentSamples_Sample.base,}};

static void InitDefaultsComponentTraces_Event() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_ComponentTraces_Event_default_instance_;
    new (ptr) ::cockroach::util::tracing::ComponentTraces_Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::tracing::ComponentTraces_Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ComponentTraces_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsComponentTraces_Event}, {}};

static void InitDefaultsComponentTraces_EventsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_ComponentTraces_EventsEntry_DoNotUse_default_instance_;
    new (ptr) ::cockroach::util::tracing::ComponentTraces_EventsEntry_DoNotUse();
  }
  ::cockroach::util::tracing::ComponentTraces_EventsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ComponentTraces_EventsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsComponentTraces_EventsEntry_DoNotUse}, {
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentTraces_Event.base,}};

static void InitDefaultsComponentTraces() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::util::tracing::_ComponentTraces_default_instance_;
    new (ptr) ::cockroach::util::tracing::ComponentTraces();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::util::tracing::ComponentTraces::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ComponentTraces =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsComponentTraces}, {
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentSamples.base,
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentTraces_EventsEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RecordedSpan_BaggageEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordedSpan_TagsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordedSpan_LogRecord_Field.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordedSpan_LogRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordedSpan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComponentActivity_CustomEventsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComponentActivity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComponentSamples_Sample.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComponentSamples.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComponentTraces_Event.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComponentTraces_EventsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComponentTraces.base);
}

}  // namespace protobuf_util_2ftracing_2frecorded_5fspan_2eproto
namespace cockroach {
namespace util {
namespace tracing {

// ===================================================================

RecordedSpan_BaggageEntry_DoNotUse::RecordedSpan_BaggageEntry_DoNotUse() {}
RecordedSpan_BaggageEntry_DoNotUse::RecordedSpan_BaggageEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RecordedSpan_BaggageEntry_DoNotUse::MergeFrom(const RecordedSpan_BaggageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

RecordedSpan_TagsEntry_DoNotUse::RecordedSpan_TagsEntry_DoNotUse() {}
RecordedSpan_TagsEntry_DoNotUse::RecordedSpan_TagsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RecordedSpan_TagsEntry_DoNotUse::MergeFrom(const RecordedSpan_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void RecordedSpan_LogRecord_Field::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordedSpan_LogRecord_Field::kKeyFieldNumber;
const int RecordedSpan_LogRecord_Field::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordedSpan_LogRecord_Field::RecordedSpan_LogRecord_Field()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan_LogRecord_Field.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
}
RecordedSpan_LogRecord_Field::RecordedSpan_LogRecord_Field(const RecordedSpan_LogRecord_Field& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
}

void RecordedSpan_LogRecord_Field::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RecordedSpan_LogRecord_Field::~RecordedSpan_LogRecord_Field() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  SharedDtor();
}

void RecordedSpan_LogRecord_Field::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecordedSpan_LogRecord_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordedSpan_LogRecord_Field& RecordedSpan_LogRecord_Field::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan_LogRecord_Field.base);
  return *internal_default_instance();
}


void RecordedSpan_LogRecord_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RecordedSpan_LogRecord_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.RecordedSpan.LogRecord.Field.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.RecordedSpan.LogRecord.Field.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  return false;
#undef DO_
}

void RecordedSpan_LogRecord_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.util.tracing.RecordedSpan.LogRecord.Field.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.util.tracing.RecordedSpan.LogRecord.Field.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
}

size_t RecordedSpan_LogRecord_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordedSpan_LogRecord_Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecordedSpan_LogRecord_Field*>(&from));
}

void RecordedSpan_LogRecord_Field::MergeFrom(const RecordedSpan_LogRecord_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RecordedSpan_LogRecord_Field::CopyFrom(const RecordedSpan_LogRecord_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.tracing.RecordedSpan.LogRecord.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordedSpan_LogRecord_Field::IsInitialized() const {
  return true;
}

void RecordedSpan_LogRecord_Field::Swap(RecordedSpan_LogRecord_Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordedSpan_LogRecord_Field::InternalSwap(RecordedSpan_LogRecord_Field* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RecordedSpan_LogRecord_Field::GetTypeName() const {
  return "cockroach.util.tracing.RecordedSpan.LogRecord.Field";
}


// ===================================================================

void RecordedSpan_LogRecord::InitAsDefaultInstance() {
  ::cockroach::util::tracing::_RecordedSpan_LogRecord_default_instance_._instance.get_mutable()->time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void RecordedSpan_LogRecord::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordedSpan_LogRecord::kTimeFieldNumber;
const int RecordedSpan_LogRecord::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordedSpan_LogRecord::RecordedSpan_LogRecord()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan_LogRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.RecordedSpan.LogRecord)
}
RecordedSpan_LogRecord::RecordedSpan_LogRecord(const RecordedSpan_LogRecord& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::google::protobuf::Timestamp(*from.time_);
  } else {
    time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.RecordedSpan.LogRecord)
}

void RecordedSpan_LogRecord::SharedCtor() {
  time_ = NULL;
}

RecordedSpan_LogRecord::~RecordedSpan_LogRecord() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.RecordedSpan.LogRecord)
  SharedDtor();
}

void RecordedSpan_LogRecord::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
}

void RecordedSpan_LogRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordedSpan_LogRecord& RecordedSpan_LogRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan_LogRecord.base);
  return *internal_default_instance();
}


void RecordedSpan_LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.tracing.RecordedSpan.LogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
  _internal_metadata_.Clear();
}

bool RecordedSpan_LogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.RecordedSpan.LogRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.RecordedSpan.LogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.RecordedSpan.LogRecord)
  return false;
#undef DO_
}

void RecordedSpan_LogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.RecordedSpan.LogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_time(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->fields(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.RecordedSpan.LogRecord)
}

size_t RecordedSpan_LogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.tracing.RecordedSpan.LogRecord)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordedSpan_LogRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecordedSpan_LogRecord*>(&from));
}

void RecordedSpan_LogRecord::MergeFrom(const RecordedSpan_LogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.tracing.RecordedSpan.LogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_time()) {
    mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
  }
}

void RecordedSpan_LogRecord::CopyFrom(const RecordedSpan_LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.tracing.RecordedSpan.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordedSpan_LogRecord::IsInitialized() const {
  return true;
}

void RecordedSpan_LogRecord::Swap(RecordedSpan_LogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordedSpan_LogRecord::InternalSwap(RecordedSpan_LogRecord* other) {
  using std::swap;
  CastToBase(&fields_)->InternalSwap(CastToBase(&other->fields_));
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RecordedSpan_LogRecord::GetTypeName() const {
  return "cockroach.util.tracing.RecordedSpan.LogRecord";
}


// ===================================================================

void RecordedSpan::InitAsDefaultInstance() {
  ::cockroach::util::tracing::_RecordedSpan_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::cockroach::util::tracing::_RecordedSpan_default_instance_._instance.get_mutable()->duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::cockroach::util::tracing::_RecordedSpan_default_instance_._instance.get_mutable()->stats_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void RecordedSpan::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void RecordedSpan::clear_duration() {
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
}
void RecordedSpan::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordedSpan::kTraceIdFieldNumber;
const int RecordedSpan::kSpanIdFieldNumber;
const int RecordedSpan::kParentSpanIdFieldNumber;
const int RecordedSpan::kOperationFieldNumber;
const int RecordedSpan::kBaggageFieldNumber;
const int RecordedSpan::kTagsFieldNumber;
const int RecordedSpan::kStartTimeFieldNumber;
const int RecordedSpan::kDurationFieldNumber;
const int RecordedSpan::kLogsFieldNumber;
const int RecordedSpan::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordedSpan::RecordedSpan()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.RecordedSpan)
}
RecordedSpan::RecordedSpan(const RecordedSpan& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  baggage_.MergeFrom(from.baggage_);
  tags_.MergeFrom(from.tags_);
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation().size() > 0) {
    operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_duration()) {
    duration_ = new ::google::protobuf::Duration(*from.duration_);
  } else {
    duration_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::google::protobuf::Any(*from.stats_);
  } else {
    stats_ = NULL;
  }
  ::memcpy(&trace_id_, &from.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_span_id_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(parent_span_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.RecordedSpan)
}

void RecordedSpan::SharedCtor() {
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_span_id_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(parent_span_id_));
}

RecordedSpan::~RecordedSpan() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.RecordedSpan)
  SharedDtor();
}

void RecordedSpan::SharedDtor() {
  operation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete stats_;
}

void RecordedSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordedSpan& RecordedSpan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan.base);
  return *internal_default_instance();
}


void RecordedSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.tracing.RecordedSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  baggage_.Clear();
  tags_.Clear();
  logs_.Clear();
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  ::memset(&trace_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_span_id_) -
      reinterpret_cast<char*>(&trace_id_)) + sizeof(parent_span_id_));
  _internal_metadata_.Clear();
}

bool RecordedSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.RecordedSpan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation().data(), static_cast<int>(this->operation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.RecordedSpan.operation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> baggage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          RecordedSpan_BaggageEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              RecordedSpan_BaggageEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&baggage_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.RecordedSpan.BaggageEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.RecordedSpan.BaggageEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> tags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          RecordedSpan_TagsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              RecordedSpan_TagsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&tags_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.RecordedSpan.TagsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.RecordedSpan.TagsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any stats = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.RecordedSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.RecordedSpan)
  return false;
#undef DO_
}

void RecordedSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.RecordedSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->trace_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trace_id(), output);
  }

  if (this->span_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->span_id(), output);
  }

  if (this->parent_span_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->parent_span_id(), output);
  }

  // string operation = 4;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), static_cast<int>(this->operation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.util.tracing.RecordedSpan.operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->operation(), output);
  }

  // map<string, string> baggage = 5;
  if (!this->baggage().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.util.tracing.RecordedSpan.BaggageEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.util.tracing.RecordedSpan.BaggageEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->baggage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->baggage().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->baggage().begin();
          it != this->baggage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RecordedSpan_BaggageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(baggage_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RecordedSpan_BaggageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->baggage().begin();
          it != this->baggage().end(); ++it) {
        entry.reset(baggage_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> tags = 6;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.util.tracing.RecordedSpan.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.util.tracing.RecordedSpan.TagsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RecordedSpan_TagsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RecordedSpan_TagsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_start_time(), output);
  }

  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_duration(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9,
      this->logs(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.Any stats = 10;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_stats(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.RecordedSpan)
}

size_t RecordedSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.tracing.RecordedSpan)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<string, string> baggage = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->baggage_size());
  {
    ::std::unique_ptr<RecordedSpan_BaggageEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->baggage().begin();
        it != this->baggage().end(); ++it) {
      entry.reset(baggage_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> tags = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  {
    ::std::unique_ptr<RecordedSpan_TagsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->tags().begin();
        it != this->tags().end(); ++it) {
      entry.reset(tags_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->logs(static_cast<int>(i)));
    }
  }

  // string operation = 4;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation());
  }

  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .google.protobuf.Any stats = 10;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  if (this->trace_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  if (this->span_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->span_id());
  }

  if (this->parent_span_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_span_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordedSpan::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecordedSpan*>(&from));
}

void RecordedSpan::MergeFrom(const RecordedSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.tracing.RecordedSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  baggage_.MergeFrom(from.baggage_);
  tags_.MergeFrom(from.tags_);
  logs_.MergeFrom(from.logs_);
  if (from.operation().size() > 0) {

    operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_duration()) {
    mutable_duration()->::google::protobuf::Duration::MergeFrom(from.duration());
  }
  if (from.has_stats()) {
    mutable_stats()->::google::protobuf::Any::MergeFrom(from.stats());
  }
  if (from.trace_id() != 0) {
    set_trace_id(from.trace_id());
  }
  if (from.span_id() != 0) {
    set_span_id(from.span_id());
  }
  if (from.parent_span_id() != 0) {
    set_parent_span_id(from.parent_span_id());
  }
}

void RecordedSpan::CopyFrom(const RecordedSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.tracing.RecordedSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordedSpan::IsInitialized() const {
  return true;
}

void RecordedSpan::Swap(RecordedSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordedSpan::InternalSwap(RecordedSpan* other) {
  using std::swap;
  baggage_.Swap(&other->baggage_);
  tags_.Swap(&other->tags_);
  CastToBase(&logs_)->InternalSwap(CastToBase(&other->logs_));
  operation_.Swap(&other->operation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(duration_, other->duration_);
  swap(stats_, other->stats_);
  swap(trace_id_, other->trace_id_);
  swap(span_id_, other->span_id_);
  swap(parent_span_id_, other->parent_span_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RecordedSpan::GetTypeName() const {
  return "cockroach.util.tracing.RecordedSpan";
}


// ===================================================================

ComponentActivity_CustomEventsEntry_DoNotUse::ComponentActivity_CustomEventsEntry_DoNotUse() {}
ComponentActivity_CustomEventsEntry_DoNotUse::ComponentActivity_CustomEventsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ComponentActivity_CustomEventsEntry_DoNotUse::MergeFrom(const ComponentActivity_CustomEventsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void ComponentActivity::InitAsDefaultInstance() {
  ::cockroach::util::tracing::_ComponentActivity_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void ComponentActivity::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentActivity::kSpanCountFieldNumber;
const int ComponentActivity::kEventCountFieldNumber;
const int ComponentActivity::kStuckCountFieldNumber;
const int ComponentActivity::kErrorsFieldNumber;
const int ComponentActivity::kTimestampFieldNumber;
const int ComponentActivity::kCustomEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentActivity::ComponentActivity()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentActivity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.ComponentActivity)
}
ComponentActivity::ComponentActivity(const ComponentActivity& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_events_.MergeFrom(from.custom_events_);
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&span_count_, &from.span_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&span_count_)) + sizeof(errors_));
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.ComponentActivity)
}

void ComponentActivity::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(errors_));
}

ComponentActivity::~ComponentActivity() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.ComponentActivity)
  SharedDtor();
}

void ComponentActivity::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void ComponentActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentActivity& ComponentActivity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentActivity.base);
  return *internal_default_instance();
}


void ComponentActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.tracing.ComponentActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_events_.Clear();
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  ::memset(&span_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_) -
      reinterpret_cast<char*>(&span_count_)) + sizeof(errors_));
  _internal_metadata_.Clear();
}

bool ComponentActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.ComponentActivity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 span_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 event_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 stuck_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stuck_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 errors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> custom_events = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          ComponentActivity_CustomEventsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              ComponentActivity_CustomEventsEntry_DoNotUse,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&custom_events_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.ComponentActivity.CustomEventsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.ComponentActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.ComponentActivity)
  return false;
#undef DO_
}

void ComponentActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.ComponentActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 span_count = 1;
  if (this->span_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->span_count(), output);
  }

  // int64 event_count = 2;
  if (this->event_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->event_count(), output);
  }

  // int64 stuck_count = 3;
  if (this->stuck_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->stuck_count(), output);
  }

  // int64 errors = 4;
  if (this->errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->errors(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_timestamp(), output);
  }

  // map<string, int64> custom_events = 6;
  if (!this->custom_events().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.util.tracing.ComponentActivity.CustomEventsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->custom_events().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->custom_events().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->custom_events().begin();
          it != this->custom_events().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ComponentActivity_CustomEventsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_events_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ComponentActivity_CustomEventsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->custom_events().begin();
          it != this->custom_events().end(); ++it) {
        entry.reset(custom_events_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.ComponentActivity)
}

size_t ComponentActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.tracing.ComponentActivity)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<string, int64> custom_events = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->custom_events_size());
  {
    ::std::unique_ptr<ComponentActivity_CustomEventsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->custom_events().begin();
        it != this->custom_events().end(); ++it) {
      entry.reset(custom_events_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int64 span_count = 1;
  if (this->span_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->span_count());
  }

  // int64 event_count = 2;
  if (this->event_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->event_count());
  }

  // int64 stuck_count = 3;
  if (this->stuck_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stuck_count());
  }

  // int64 errors = 4;
  if (this->errors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->errors());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentActivity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComponentActivity*>(&from));
}

void ComponentActivity::MergeFrom(const ComponentActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.tracing.ComponentActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_events_.MergeFrom(from.custom_events_);
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.span_count() != 0) {
    set_span_count(from.span_count());
  }
  if (from.event_count() != 0) {
    set_event_count(from.event_count());
  }
  if (from.stuck_count() != 0) {
    set_stuck_count(from.stuck_count());
  }
  if (from.errors() != 0) {
    set_errors(from.errors());
  }
}

void ComponentActivity::CopyFrom(const ComponentActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.tracing.ComponentActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentActivity::IsInitialized() const {
  return true;
}

void ComponentActivity::Swap(ComponentActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentActivity::InternalSwap(ComponentActivity* other) {
  using std::swap;
  custom_events_.Swap(&other->custom_events_);
  swap(timestamp_, other->timestamp_);
  swap(span_count_, other->span_count_);
  swap(event_count_, other->event_count_);
  swap(stuck_count_, other->stuck_count_);
  swap(errors_, other->errors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ComponentActivity::GetTypeName() const {
  return "cockroach.util.tracing.ComponentActivity";
}


// ===================================================================

void ComponentSamples_Sample::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentSamples_Sample::kErrorFieldNumber;
const int ComponentSamples_Sample::kPendingFieldNumber;
const int ComponentSamples_Sample::kStuckFieldNumber;
const int ComponentSamples_Sample::kSpansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentSamples_Sample::ComponentSamples_Sample()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentSamples_Sample.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.ComponentSamples.Sample)
}
ComponentSamples_Sample::ComponentSamples_Sample(const ComponentSamples_Sample& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      spans_(from.spans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&pending_, &from.pending_,
    static_cast<size_t>(reinterpret_cast<char*>(&stuck_) -
    reinterpret_cast<char*>(&pending_)) + sizeof(stuck_));
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.ComponentSamples.Sample)
}

void ComponentSamples_Sample::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stuck_) -
      reinterpret_cast<char*>(&pending_)) + sizeof(stuck_));
}

ComponentSamples_Sample::~ComponentSamples_Sample() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.ComponentSamples.Sample)
  SharedDtor();
}

void ComponentSamples_Sample::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ComponentSamples_Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentSamples_Sample& ComponentSamples_Sample::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentSamples_Sample.base);
  return *internal_default_instance();
}


void ComponentSamples_Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.tracing.ComponentSamples.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stuck_) -
      reinterpret_cast<char*>(&pending_)) + sizeof(stuck_));
  _internal_metadata_.Clear();
}

bool ComponentSamples_Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.ComponentSamples.Sample)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.ComponentSamples.Sample.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pending = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stuck = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stuck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.ComponentSamples.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.ComponentSamples.Sample)
  return false;
#undef DO_
}

void ComponentSamples_Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.ComponentSamples.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.util.tracing.ComponentSamples.Sample.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // bool pending = 2;
  if (this->pending() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pending(), output);
  }

  // bool stuck = 3;
  if (this->stuck() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stuck(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->spans(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.ComponentSamples.Sample)
}

size_t ComponentSamples_Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.tracing.ComponentSamples.Sample)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spans(static_cast<int>(i)));
    }
  }

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // bool pending = 2;
  if (this->pending() != 0) {
    total_size += 1 + 1;
  }

  // bool stuck = 3;
  if (this->stuck() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentSamples_Sample::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComponentSamples_Sample*>(&from));
}

void ComponentSamples_Sample::MergeFrom(const ComponentSamples_Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.tracing.ComponentSamples.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.pending() != 0) {
    set_pending(from.pending());
  }
  if (from.stuck() != 0) {
    set_stuck(from.stuck());
  }
}

void ComponentSamples_Sample::CopyFrom(const ComponentSamples_Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.tracing.ComponentSamples.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentSamples_Sample::IsInitialized() const {
  return true;
}

void ComponentSamples_Sample::Swap(ComponentSamples_Sample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentSamples_Sample::InternalSwap(ComponentSamples_Sample* other) {
  using std::swap;
  CastToBase(&spans_)->InternalSwap(CastToBase(&other->spans_));
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pending_, other->pending_);
  swap(stuck_, other->stuck_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ComponentSamples_Sample::GetTypeName() const {
  return "cockroach.util.tracing.ComponentSamples.Sample";
}


// ===================================================================

void ComponentSamples::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentSamples::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentSamples::ComponentSamples()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentSamples.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.ComponentSamples)
}
ComponentSamples::ComponentSamples(const ComponentSamples& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.ComponentSamples)
}

void ComponentSamples::SharedCtor() {
}

ComponentSamples::~ComponentSamples() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.ComponentSamples)
  SharedDtor();
}

void ComponentSamples::SharedDtor() {
}

void ComponentSamples::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentSamples& ComponentSamples::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentSamples.base);
  return *internal_default_instance();
}


void ComponentSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.tracing.ComponentSamples)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  _internal_metadata_.Clear();
}

bool ComponentSamples::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.ComponentSamples)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.ComponentSamples)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.ComponentSamples)
  return false;
#undef DO_
}

void ComponentSamples::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.ComponentSamples)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->samples(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.ComponentSamples)
}

size_t ComponentSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.tracing.ComponentSamples)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->samples_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->samples(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentSamples::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComponentSamples*>(&from));
}

void ComponentSamples::MergeFrom(const ComponentSamples& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.tracing.ComponentSamples)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
}

void ComponentSamples::CopyFrom(const ComponentSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.tracing.ComponentSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentSamples::IsInitialized() const {
  return true;
}

void ComponentSamples::Swap(ComponentSamples* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentSamples::InternalSwap(ComponentSamples* other) {
  using std::swap;
  CastToBase(&samples_)->InternalSwap(CastToBase(&other->samples_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ComponentSamples::GetTypeName() const {
  return "cockroach.util.tracing.ComponentSamples";
}


// ===================================================================

void ComponentTraces_Event::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentTraces_Event::kCountFieldNumber;
const int ComponentTraces_Event::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentTraces_Event::ComponentTraces_Event()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentTraces_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.ComponentTraces.Event)
}
ComponentTraces_Event::ComponentTraces_Event(const ComponentTraces_Event& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.ComponentTraces.Event)
}

void ComponentTraces_Event::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_LONGLONG(0);
}

ComponentTraces_Event::~ComponentTraces_Event() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.ComponentTraces.Event)
  SharedDtor();
}

void ComponentTraces_Event::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ComponentTraces_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentTraces_Event& ComponentTraces_Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentTraces_Event.base);
  return *internal_default_instance();
}


void ComponentTraces_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.tracing.ComponentTraces.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ComponentTraces_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.ComponentTraces.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.ComponentTraces.Event.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.ComponentTraces.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.ComponentTraces.Event)
  return false;
#undef DO_
}

void ComponentTraces_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.ComponentTraces.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.util.tracing.ComponentTraces.Event.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.ComponentTraces.Event)
}

size_t ComponentTraces_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.tracing.ComponentTraces.Event)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentTraces_Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComponentTraces_Event*>(&from));
}

void ComponentTraces_Event::MergeFrom(const ComponentTraces_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.tracing.ComponentTraces.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ComponentTraces_Event::CopyFrom(const ComponentTraces_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.tracing.ComponentTraces.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentTraces_Event::IsInitialized() const {
  return true;
}

void ComponentTraces_Event::Swap(ComponentTraces_Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentTraces_Event::InternalSwap(ComponentTraces_Event* other) {
  using std::swap;
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ComponentTraces_Event::GetTypeName() const {
  return "cockroach.util.tracing.ComponentTraces.Event";
}


// ===================================================================

ComponentTraces_EventsEntry_DoNotUse::ComponentTraces_EventsEntry_DoNotUse() {}
ComponentTraces_EventsEntry_DoNotUse::ComponentTraces_EventsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ComponentTraces_EventsEntry_DoNotUse::MergeFrom(const ComponentTraces_EventsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void ComponentTraces::InitAsDefaultInstance() {
  ::cockroach::util::tracing::_ComponentTraces_default_instance_._instance.get_mutable()->samples_ = const_cast< ::cockroach::util::tracing::ComponentSamples*>(
      ::cockroach::util::tracing::ComponentSamples::internal_default_instance());
  ::cockroach::util::tracing::_ComponentTraces_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void ComponentTraces::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentTraces::kSamplesFieldNumber;
const int ComponentTraces::kEventsFieldNumber;
const int ComponentTraces::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentTraces::ComponentTraces()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentTraces.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.ComponentTraces)
}
ComponentTraces::ComponentTraces(const ComponentTraces& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  events_.MergeFrom(from.events_);
  if (from.has_samples()) {
    samples_ = new ::cockroach::util::tracing::ComponentSamples(*from.samples_);
  } else {
    samples_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.ComponentTraces)
}

void ComponentTraces::SharedCtor() {
  ::memset(&samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&samples_)) + sizeof(timestamp_));
}

ComponentTraces::~ComponentTraces() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.ComponentTraces)
  SharedDtor();
}

void ComponentTraces::SharedDtor() {
  if (this != internal_default_instance()) delete samples_;
  if (this != internal_default_instance()) delete timestamp_;
}

void ComponentTraces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentTraces& ComponentTraces::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_ComponentTraces.base);
  return *internal_default_instance();
}


void ComponentTraces::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.tracing.ComponentTraces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  if (GetArenaNoVirtual() == NULL && samples_ != NULL) {
    delete samples_;
  }
  samples_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool ComponentTraces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.ComponentTraces)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .cockroach.util.tracing.ComponentTraces.Event> events = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ComponentTraces_EventsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              ComponentTraces_EventsEntry_DoNotUse,
              ::std::string, ::cockroach::util::tracing::ComponentTraces_Event,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::cockroach::util::tracing::ComponentTraces_Event > > parser(&events_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.ComponentTraces.EventsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.ComponentTraces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.ComponentTraces)
  return false;
#undef DO_
}

void ComponentTraces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.ComponentTraces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_samples(), output);
  }

  // map<string, .cockroach.util.tracing.ComponentTraces.Event> events = 2;
  if (!this->events().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::cockroach::util::tracing::ComponentTraces_Event >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.util.tracing.ComponentTraces.EventsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->events().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->events().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::cockroach::util::tracing::ComponentTraces_Event >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::cockroach::util::tracing::ComponentTraces_Event >::const_iterator
          it = this->events().begin();
          it != this->events().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ComponentTraces_EventsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(events_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ComponentTraces_EventsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::cockroach::util::tracing::ComponentTraces_Event >::const_iterator
          it = this->events().begin();
          it != this->events().end(); ++it) {
        entry.reset(events_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.ComponentTraces)
}

size_t ComponentTraces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.tracing.ComponentTraces)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<string, .cockroach.util.tracing.ComponentTraces.Event> events = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->events_size());
  {
    ::std::unique_ptr<ComponentTraces_EventsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::cockroach::util::tracing::ComponentTraces_Event >::const_iterator
        it = this->events().begin();
        it != this->events().end(); ++it) {
      entry.reset(events_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (this->has_samples()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *samples_);
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentTraces::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComponentTraces*>(&from));
}

void ComponentTraces::MergeFrom(const ComponentTraces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.tracing.ComponentTraces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.has_samples()) {
    mutable_samples()->::cockroach::util::tracing::ComponentSamples::MergeFrom(from.samples());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void ComponentTraces::CopyFrom(const ComponentTraces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.tracing.ComponentTraces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentTraces::IsInitialized() const {
  return true;
}

void ComponentTraces::Swap(ComponentTraces* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentTraces::InternalSwap(ComponentTraces* other) {
  using std::swap;
  events_.Swap(&other->events_);
  swap(samples_, other->samples_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ComponentTraces::GetTypeName() const {
  return "cockroach.util.tracing.ComponentTraces";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tracing
}  // namespace util
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::RecordedSpan_BaggageEntry_DoNotUse* Arena::CreateMaybeMessage< ::cockroach::util::tracing::RecordedSpan_BaggageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::RecordedSpan_BaggageEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::RecordedSpan_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::cockroach::util::tracing::RecordedSpan_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::RecordedSpan_TagsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::RecordedSpan_LogRecord_Field* Arena::CreateMaybeMessage< ::cockroach::util::tracing::RecordedSpan_LogRecord_Field >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::RecordedSpan_LogRecord_Field >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::RecordedSpan_LogRecord* Arena::CreateMaybeMessage< ::cockroach::util::tracing::RecordedSpan_LogRecord >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::RecordedSpan_LogRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::RecordedSpan* Arena::CreateMaybeMessage< ::cockroach::util::tracing::RecordedSpan >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::RecordedSpan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::ComponentActivity_CustomEventsEntry_DoNotUse* Arena::CreateMaybeMessage< ::cockroach::util::tracing::ComponentActivity_CustomEventsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::ComponentActivity_CustomEventsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::ComponentActivity* Arena::CreateMaybeMessage< ::cockroach::util::tracing::ComponentActivity >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::ComponentActivity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::ComponentSamples_Sample* Arena::CreateMaybeMessage< ::cockroach::util::tracing::ComponentSamples_Sample >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::ComponentSamples_Sample >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::ComponentSamples* Arena::CreateMaybeMessage< ::cockroach::util::tracing::ComponentSamples >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::ComponentSamples >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::ComponentTraces_Event* Arena::CreateMaybeMessage< ::cockroach::util::tracing::ComponentTraces_Event >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::ComponentTraces_Event >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::ComponentTraces_EventsEntry_DoNotUse* Arena::CreateMaybeMessage< ::cockroach::util::tracing::ComponentTraces_EventsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::ComponentTraces_EventsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::util::tracing::ComponentTraces* Arena::CreateMaybeMessage< ::cockroach::util::tracing::ComponentTraces >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::util::tracing::ComponentTraces >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
