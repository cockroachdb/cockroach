// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/pkg/roachpb/metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/pkg/roachpb/metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {
class AttributesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Attributes> {
} _Attributes_default_instance_;
class ReplicationTargetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReplicationTarget> {
} _ReplicationTarget_default_instance_;
class ReplicaDescriptorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReplicaDescriptor> {
} _ReplicaDescriptor_default_instance_;
class ReplicaIdentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReplicaIdent> {
} _ReplicaIdent_default_instance_;
class RangeDescriptorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RangeDescriptor> {
} _RangeDescriptor_default_instance_;
class StoreCapacityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StoreCapacity> {
} _StoreCapacity_default_instance_;
class NodeDescriptorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeDescriptor> {
} _NodeDescriptor_default_instance_;
class StoreDescriptorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StoreDescriptor> {
} _StoreDescriptor_default_instance_;
class StoreDeadReplicasDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StoreDeadReplicas> {
} _StoreDeadReplicas_default_instance_;
class LocalityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Locality> {
} _Locality_default_instance_;
class TierDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Tier> {
} _Tier_default_instance_;
class VersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Version> {
} _Version_default_instance_;

namespace protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Attributes_default_instance_.Shutdown();
  _ReplicationTarget_default_instance_.Shutdown();
  _ReplicaDescriptor_default_instance_.Shutdown();
  _ReplicaIdent_default_instance_.Shutdown();
  _RangeDescriptor_default_instance_.Shutdown();
  _StoreCapacity_default_instance_.Shutdown();
  _NodeDescriptor_default_instance_.Shutdown();
  _StoreDescriptor_default_instance_.Shutdown();
  _StoreDeadReplicas_default_instance_.Shutdown();
  _Locality_default_instance_.Shutdown();
  _Tier_default_instance_.Shutdown();
  _Version_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cockroach::util::protobuf_cockroach_2fpkg_2futil_2funresolved_5faddr_2eproto::InitDefaults();
  _Attributes_default_instance_.DefaultConstruct();
  _ReplicationTarget_default_instance_.DefaultConstruct();
  _ReplicaDescriptor_default_instance_.DefaultConstruct();
  _ReplicaIdent_default_instance_.DefaultConstruct();
  _RangeDescriptor_default_instance_.DefaultConstruct();
  _StoreCapacity_default_instance_.DefaultConstruct();
  _NodeDescriptor_default_instance_.DefaultConstruct();
  _StoreDescriptor_default_instance_.DefaultConstruct();
  _StoreDeadReplicas_default_instance_.DefaultConstruct();
  _Locality_default_instance_.DefaultConstruct();
  _Tier_default_instance_.DefaultConstruct();
  _Version_default_instance_.DefaultConstruct();
  _ReplicaIdent_default_instance_.get_mutable()->replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
  _NodeDescriptor_default_instance_.get_mutable()->address_ = const_cast< ::cockroach::util::UnresolvedAddr*>(
      ::cockroach::util::UnresolvedAddr::internal_default_instance());
  _NodeDescriptor_default_instance_.get_mutable()->attrs_ = const_cast< ::cockroach::roachpb::Attributes*>(
      ::cockroach::roachpb::Attributes::internal_default_instance());
  _NodeDescriptor_default_instance_.get_mutable()->locality_ = const_cast< ::cockroach::roachpb::Locality*>(
      ::cockroach::roachpb::Locality::internal_default_instance());
  _NodeDescriptor_default_instance_.get_mutable()->server_version_ = const_cast< ::cockroach::roachpb::Version*>(
      ::cockroach::roachpb::Version::internal_default_instance());
  _StoreDescriptor_default_instance_.get_mutable()->attrs_ = const_cast< ::cockroach::roachpb::Attributes*>(
      ::cockroach::roachpb::Attributes::internal_default_instance());
  _StoreDescriptor_default_instance_.get_mutable()->node_ = const_cast< ::cockroach::roachpb::NodeDescriptor*>(
      ::cockroach::roachpb::NodeDescriptor::internal_default_instance());
  _StoreDescriptor_default_instance_.get_mutable()->capacity_ = const_cast< ::cockroach::roachpb::StoreCapacity*>(
      ::cockroach::roachpb::StoreCapacity::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::cockroach::util::protobuf_cockroach_2fpkg_2futil_2funresolved_5faddr_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attributes::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attributes::Attributes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Attributes)
}
Attributes::Attributes(const Attributes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attrs_(from.attrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Attributes)
}

void Attributes::SharedCtor() {
  _cached_size_ = 0;
}

Attributes::~Attributes() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Attributes)
  SharedDtor();
}

void Attributes::SharedDtor() {
}

void Attributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Attributes& Attributes::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Attributes* Attributes::New(::google::protobuf::Arena* arena) const {
  Attributes* n = new Attributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Attributes)
  attrs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Attributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Attributes)
  return false;
#undef DO_
}

void Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  for (int i = 0, n = this->attrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attrs(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Attributes)
}

size_t Attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Attributes)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attrs_size());
  for (int i = 0, n = this->attrs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attrs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attributes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Attributes*>(&from));
}

void Attributes::MergeFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
}

void Attributes::CopyFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attributes::IsInitialized() const {
  return true;
}

void Attributes::Swap(Attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attributes::InternalSwap(Attributes* other) {
  attrs_.InternalSwap(&other->attrs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Attributes::GetTypeName() const {
  return "cockroach.roachpb.Attributes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attributes

int Attributes::attrs_size() const {
  return attrs_.size();
}
void Attributes::clear_attrs() {
  attrs_.Clear();
}
const ::std::string& Attributes::attrs(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Attributes.attrs)
  return attrs_.Get(index);
}
::std::string* Attributes::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Attributes.attrs)
  return attrs_.Mutable(index);
}
void Attributes::set_attrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Attributes.attrs)
  attrs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Attributes::set_attrs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Attributes.attrs)
  attrs_.Mutable(index)->assign(std::move(value));
}
#endif
void Attributes::set_attrs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Attributes.attrs)
}
void Attributes::set_attrs(int index, const char* value, size_t size) {
  attrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Attributes.attrs)
}
::std::string* Attributes::add_attrs() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.Attributes.attrs)
  return attrs_.Add();
}
void Attributes::add_attrs(const ::std::string& value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Attributes.attrs)
}
#if LANG_CXX11
void Attributes::add_attrs(::std::string&& value) {
  attrs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Attributes.attrs)
}
#endif
void Attributes::add_attrs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.Attributes.attrs)
}
void Attributes::add_attrs(const char* value, size_t size) {
  attrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.Attributes.attrs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Attributes::attrs() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Attributes.attrs)
  return attrs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Attributes::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Attributes.attrs)
  return &attrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicationTarget::kNodeIdFieldNumber;
const int ReplicationTarget::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicationTarget::ReplicationTarget()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicationTarget)
}
ReplicationTarget::ReplicationTarget(const ReplicationTarget& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(store_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicationTarget)
}

void ReplicationTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(store_id_));
}

ReplicationTarget::~ReplicationTarget() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicationTarget)
  SharedDtor();
}

void ReplicationTarget::SharedDtor() {
}

void ReplicationTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReplicationTarget& ReplicationTarget::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplicationTarget* ReplicationTarget::New(::google::protobuf::Arena* arena) const {
  ReplicationTarget* n = new ReplicationTarget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicationTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReplicationTarget)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&node_id_, 0, reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&node_id_) + sizeof(store_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicationTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicationTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicationTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicationTarget)
  return false;
#undef DO_
}

void ReplicationTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicationTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicationTarget)
}

size_t ReplicationTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReplicationTarget)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicationTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicationTarget*>(&from));
}

void ReplicationTarget::MergeFrom(const ReplicationTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReplicationTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      store_id_ = from.store_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicationTarget::CopyFrom(const ReplicationTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReplicationTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationTarget::IsInitialized() const {
  return true;
}

void ReplicationTarget::Swap(ReplicationTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicationTarget::InternalSwap(ReplicationTarget* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(store_id_, other->store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReplicationTarget::GetTypeName() const {
  return "cockroach.roachpb.ReplicationTarget";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicationTarget

bool ReplicationTarget::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicationTarget::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicationTarget::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicationTarget::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
::google::protobuf::int32 ReplicationTarget::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicationTarget.node_id)
  return node_id_;
}
void ReplicationTarget::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicationTarget.node_id)
}

bool ReplicationTarget::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicationTarget::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicationTarget::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicationTarget::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
::google::protobuf::int32 ReplicationTarget::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicationTarget.store_id)
  return store_id_;
}
void ReplicationTarget::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicationTarget.store_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaDescriptor::kNodeIdFieldNumber;
const int ReplicaDescriptor::kStoreIdFieldNumber;
const int ReplicaDescriptor::kReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaDescriptor::ReplicaDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicaDescriptor)
}
ReplicaDescriptor::ReplicaDescriptor(const ReplicaDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(replica_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicaDescriptor)
}

void ReplicaDescriptor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(replica_id_));
}

ReplicaDescriptor::~ReplicaDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicaDescriptor)
  SharedDtor();
}

void ReplicaDescriptor::SharedDtor() {
}

void ReplicaDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReplicaDescriptor& ReplicaDescriptor::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplicaDescriptor* ReplicaDescriptor::New(::google::protobuf::Arena* arena) const {
  ReplicaDescriptor* n = new ReplicaDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicaDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReplicaDescriptor)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&node_id_, 0, reinterpret_cast<char*>(&replica_id_) -
      reinterpret_cast<char*>(&node_id_) + sizeof(replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicaDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicaDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicaDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicaDescriptor)
  return false;
#undef DO_
}

void ReplicaDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicaDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replica_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicaDescriptor)
}

size_t ReplicaDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReplicaDescriptor)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    if (has_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replica_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicaDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicaDescriptor*>(&from));
}

void ReplicaDescriptor::MergeFrom(const ReplicaDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReplicaDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      store_id_ = from.store_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      replica_id_ = from.replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicaDescriptor::CopyFrom(const ReplicaDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReplicaDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaDescriptor::IsInitialized() const {
  return true;
}

void ReplicaDescriptor::Swap(ReplicaDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaDescriptor::InternalSwap(ReplicaDescriptor* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(store_id_, other->store_id_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReplicaDescriptor::GetTypeName() const {
  return "cockroach.roachpb.ReplicaDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicaDescriptor

bool ReplicaDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicaDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicaDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicaDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
::google::protobuf::int32 ReplicaDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.node_id)
  return node_id_;
}
void ReplicaDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.node_id)
}

bool ReplicaDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicaDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicaDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicaDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
::google::protobuf::int32 ReplicaDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.store_id)
  return store_id_;
}
void ReplicaDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.store_id)
}

bool ReplicaDescriptor::has_replica_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReplicaDescriptor::set_has_replica_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReplicaDescriptor::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReplicaDescriptor::clear_replica_id() {
  replica_id_ = 0;
  clear_has_replica_id();
}
::google::protobuf::int32 ReplicaDescriptor::replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.replica_id)
  return replica_id_;
}
void ReplicaDescriptor::set_replica_id(::google::protobuf::int32 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.replica_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaIdent::kRangeIdFieldNumber;
const int ReplicaIdent::kReplicaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaIdent::ReplicaIdent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicaIdent)
}
ReplicaIdent::ReplicaIdent(const ReplicaIdent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_replica()) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicaIdent)
}

void ReplicaIdent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&replica_, 0, reinterpret_cast<char*>(&range_id_) -
    reinterpret_cast<char*>(&replica_) + sizeof(range_id_));
}

ReplicaIdent::~ReplicaIdent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicaIdent)
  SharedDtor();
}

void ReplicaIdent::SharedDtor() {
  if (this != internal_default_instance()) {
    delete replica_;
  }
}

void ReplicaIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReplicaIdent& ReplicaIdent::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplicaIdent* ReplicaIdent::New(::google::protobuf::Arena* arena) const {
  ReplicaIdent* n = new ReplicaIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicaIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReplicaIdent)
  if (has_replica()) {
    GOOGLE_DCHECK(replica_ != NULL);
    replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  }
  range_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicaIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicaIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_range_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicaIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicaIdent)
  return false;
#undef DO_
}

void ReplicaIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicaIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->replica_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicaIdent)
}

size_t ReplicaIdent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReplicaIdent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replica_);
    }

    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicaIdent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicaIdent*>(&from));
}

void ReplicaIdent::MergeFrom(const ReplicaIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReplicaIdent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
    if (cached_has_bits & 0x00000002u) {
      range_id_ = from.range_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicaIdent::CopyFrom(const ReplicaIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReplicaIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaIdent::IsInitialized() const {
  return true;
}

void ReplicaIdent::Swap(ReplicaIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaIdent::InternalSwap(ReplicaIdent* other) {
  std::swap(replica_, other->replica_);
  std::swap(range_id_, other->range_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReplicaIdent::GetTypeName() const {
  return "cockroach.roachpb.ReplicaIdent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicaIdent

bool ReplicaIdent::has_range_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicaIdent::set_has_range_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicaIdent::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicaIdent::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
::google::protobuf::int64 ReplicaIdent::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaIdent.range_id)
  return range_id_;
}
void ReplicaIdent::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaIdent.range_id)
}

bool ReplicaIdent::has_replica() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicaIdent::set_has_replica() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicaIdent::clear_has_replica() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicaIdent::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
const ::cockroach::roachpb::ReplicaDescriptor& ReplicaIdent::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaIdent.replica)
  return replica_ != NULL ? *replica_
                         : *::cockroach::roachpb::ReplicaDescriptor::internal_default_instance();
}
::cockroach::roachpb::ReplicaDescriptor* ReplicaIdent::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReplicaIdent.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* ReplicaIdent::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReplicaIdent.replica)
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void ReplicaIdent::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReplicaIdent.replica)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeDescriptor::kRangeIdFieldNumber;
const int RangeDescriptor::kStartKeyFieldNumber;
const int RangeDescriptor::kEndKeyFieldNumber;
const int RangeDescriptor::kReplicasFieldNumber;
const int RangeDescriptor::kNextReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeDescriptor::RangeDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeDescriptor)
}
RangeDescriptor::RangeDescriptor(const RangeDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_key()) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_end_key()) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  ::memcpy(&range_id_, &from.range_id_,
    reinterpret_cast<char*>(&next_replica_id_) -
    reinterpret_cast<char*>(&range_id_) + sizeof(next_replica_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeDescriptor)
}

void RangeDescriptor::SharedCtor() {
  _cached_size_ = 0;
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, reinterpret_cast<char*>(&next_replica_id_) -
    reinterpret_cast<char*>(&range_id_) + sizeof(next_replica_id_));
}

RangeDescriptor::~RangeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeDescriptor)
  SharedDtor();
}

void RangeDescriptor::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RangeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RangeDescriptor& RangeDescriptor::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeDescriptor* RangeDescriptor::New(::google::protobuf::Arena* arena) const {
  RangeDescriptor* n = new RangeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeDescriptor)
  replicas_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_start_key()) {
      GOOGLE_DCHECK(!start_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*start_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_end_key()) {
      GOOGLE_DCHECK(!end_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*end_key_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&range_id_, 0, reinterpret_cast<char*>(&next_replica_id_) -
      reinterpret_cast<char*>(&range_id_) + sizeof(next_replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RangeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_range_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_next_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeDescriptor)
  return false;
#undef DO_
}

void RangeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->replicas(i), output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->next_replica_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeDescriptor)
}

size_t RangeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeDescriptor)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  {
    unsigned int count = this->replicas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicas(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

    if (has_next_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_replica_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeDescriptor*>(&from));
}

void RangeDescriptor::MergeFrom(const RangeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      range_id_ = from.range_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      next_replica_id_ = from.next_replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RangeDescriptor::CopyFrom(const RangeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDescriptor::IsInitialized() const {
  return true;
}

void RangeDescriptor::Swap(RangeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeDescriptor::InternalSwap(RangeDescriptor* other) {
  replicas_.InternalSwap(&other->replicas_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  std::swap(range_id_, other->range_id_);
  std::swap(next_replica_id_, other->next_replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RangeDescriptor::GetTypeName() const {
  return "cockroach.roachpb.RangeDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeDescriptor

bool RangeDescriptor::has_range_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RangeDescriptor::set_has_range_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RangeDescriptor::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RangeDescriptor::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
::google::protobuf::int64 RangeDescriptor::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.range_id)
  return range_id_;
}
void RangeDescriptor::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.range_id)
}

bool RangeDescriptor::has_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeDescriptor::set_has_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeDescriptor::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeDescriptor::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
const ::std::string& RangeDescriptor::start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.GetNoArena();
}
void RangeDescriptor::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.start_key)
}
#if LANG_CXX11
void RangeDescriptor::set_start_key(::std::string&& value) {
  set_has_start_key();
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RangeDescriptor.start_key)
}
#endif
void RangeDescriptor::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.start_key)
}
void RangeDescriptor::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.start_key)
}
::std::string* RangeDescriptor::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeDescriptor::release_start_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeDescriptor.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeDescriptor::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.start_key)
}

bool RangeDescriptor::has_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RangeDescriptor::set_has_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
void RangeDescriptor::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void RangeDescriptor::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
const ::std::string& RangeDescriptor::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.GetNoArena();
}
void RangeDescriptor::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.end_key)
}
#if LANG_CXX11
void RangeDescriptor::set_end_key(::std::string&& value) {
  set_has_end_key();
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RangeDescriptor.end_key)
}
#endif
void RangeDescriptor::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.end_key)
}
void RangeDescriptor::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.end_key)
}
::std::string* RangeDescriptor::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeDescriptor::release_end_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeDescriptor.end_key)
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeDescriptor::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.end_key)
}

int RangeDescriptor::replicas_size() const {
  return replicas_.size();
}
void RangeDescriptor::clear_replicas() {
  replicas_.Clear();
}
const ::cockroach::roachpb::ReplicaDescriptor& RangeDescriptor::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Get(index);
}
::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Mutable(index);
}
::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
RangeDescriptor::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.RangeDescriptor.replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
RangeDescriptor::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_;
}

bool RangeDescriptor::has_next_replica_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RangeDescriptor::set_has_next_replica_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RangeDescriptor::clear_has_next_replica_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RangeDescriptor::clear_next_replica_id() {
  next_replica_id_ = 0;
  clear_has_next_replica_id();
}
::google::protobuf::int32 RangeDescriptor::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.next_replica_id)
  return next_replica_id_;
}
void RangeDescriptor::set_next_replica_id(::google::protobuf::int32 value) {
  set_has_next_replica_id();
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.next_replica_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreCapacity::kCapacityFieldNumber;
const int StoreCapacity::kAvailableFieldNumber;
const int StoreCapacity::kRangeCountFieldNumber;
const int StoreCapacity::kLeaseCountFieldNumber;
const int StoreCapacity::kWritesPerSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreCapacity::StoreCapacity()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreCapacity)
}
StoreCapacity::StoreCapacity(const StoreCapacity& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&capacity_, &from.capacity_,
    reinterpret_cast<char*>(&writes_per_second_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(writes_per_second_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreCapacity)
}

void StoreCapacity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&capacity_, 0, reinterpret_cast<char*>(&writes_per_second_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(writes_per_second_));
}

StoreCapacity::~StoreCapacity() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreCapacity)
  SharedDtor();
}

void StoreCapacity::SharedDtor() {
}

void StoreCapacity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreCapacity& StoreCapacity::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

StoreCapacity* StoreCapacity::New(::google::protobuf::Arena* arena) const {
  StoreCapacity* n = new StoreCapacity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreCapacity::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreCapacity)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&capacity_, 0, reinterpret_cast<char*>(&writes_per_second_) -
      reinterpret_cast<char*>(&capacity_) + sizeof(writes_per_second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StoreCapacity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreCapacity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_range_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lease_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lease_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_writes_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &writes_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreCapacity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreCapacity)
  return false;
#undef DO_
}

void StoreCapacity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreCapacity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->capacity(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->available(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range_count(), output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lease_count(), output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->writes_per_second(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreCapacity)
}

size_t StoreCapacity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreCapacity)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->capacity());
    }

    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->available());
    }

    if (has_range_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_count());
    }

    if (has_lease_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lease_count());
    }

    if (has_writes_per_second()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreCapacity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreCapacity*>(&from));
}

void StoreCapacity::MergeFrom(const StoreCapacity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreCapacity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      available_ = from.available_;
    }
    if (cached_has_bits & 0x00000004u) {
      range_count_ = from.range_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      lease_count_ = from.lease_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      writes_per_second_ = from.writes_per_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreCapacity::CopyFrom(const StoreCapacity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreCapacity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreCapacity::IsInitialized() const {
  return true;
}

void StoreCapacity::Swap(StoreCapacity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreCapacity::InternalSwap(StoreCapacity* other) {
  std::swap(capacity_, other->capacity_);
  std::swap(available_, other->available_);
  std::swap(range_count_, other->range_count_);
  std::swap(lease_count_, other->lease_count_);
  std::swap(writes_per_second_, other->writes_per_second_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StoreCapacity::GetTypeName() const {
  return "cockroach.roachpb.StoreCapacity";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreCapacity

bool StoreCapacity::has_capacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreCapacity::set_has_capacity() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreCapacity::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreCapacity::clear_capacity() {
  capacity_ = GOOGLE_LONGLONG(0);
  clear_has_capacity();
}
::google::protobuf::int64 StoreCapacity::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.capacity)
  return capacity_;
}
void StoreCapacity::set_capacity(::google::protobuf::int64 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.capacity)
}

bool StoreCapacity::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreCapacity::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreCapacity::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreCapacity::clear_available() {
  available_ = GOOGLE_LONGLONG(0);
  clear_has_available();
}
::google::protobuf::int64 StoreCapacity::available() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.available)
  return available_;
}
void StoreCapacity::set_available(::google::protobuf::int64 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.available)
}

bool StoreCapacity::has_range_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreCapacity::set_has_range_count() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreCapacity::clear_has_range_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreCapacity::clear_range_count() {
  range_count_ = 0;
  clear_has_range_count();
}
::google::protobuf::int32 StoreCapacity::range_count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.range_count)
  return range_count_;
}
void StoreCapacity::set_range_count(::google::protobuf::int32 value) {
  set_has_range_count();
  range_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.range_count)
}

bool StoreCapacity::has_lease_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StoreCapacity::set_has_lease_count() {
  _has_bits_[0] |= 0x00000008u;
}
void StoreCapacity::clear_has_lease_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void StoreCapacity::clear_lease_count() {
  lease_count_ = 0;
  clear_has_lease_count();
}
::google::protobuf::int32 StoreCapacity::lease_count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.lease_count)
  return lease_count_;
}
void StoreCapacity::set_lease_count(::google::protobuf::int32 value) {
  set_has_lease_count();
  lease_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.lease_count)
}

bool StoreCapacity::has_writes_per_second() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StoreCapacity::set_has_writes_per_second() {
  _has_bits_[0] |= 0x00000010u;
}
void StoreCapacity::clear_has_writes_per_second() {
  _has_bits_[0] &= ~0x00000010u;
}
void StoreCapacity::clear_writes_per_second() {
  writes_per_second_ = 0;
  clear_has_writes_per_second();
}
double StoreCapacity::writes_per_second() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.writes_per_second)
  return writes_per_second_;
}
void StoreCapacity::set_writes_per_second(double value) {
  set_has_writes_per_second();
  writes_per_second_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.writes_per_second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDescriptor::kNodeIdFieldNumber;
const int NodeDescriptor::kAddressFieldNumber;
const int NodeDescriptor::kAttrsFieldNumber;
const int NodeDescriptor::kLocalityFieldNumber;
const int NodeDescriptor::kServerVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDescriptor::NodeDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.NodeDescriptor)
}
NodeDescriptor::NodeDescriptor(const NodeDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_address()) {
    address_ = new ::cockroach::util::UnresolvedAddr(*from.address_);
  } else {
    address_ = NULL;
  }
  if (from.has_attrs()) {
    attrs_ = new ::cockroach::roachpb::Attributes(*from.attrs_);
  } else {
    attrs_ = NULL;
  }
  if (from.has_locality()) {
    locality_ = new ::cockroach::roachpb::Locality(*from.locality_);
  } else {
    locality_ = NULL;
  }
  if (from.has_server_version()) {
    server_version_ = new ::cockroach::roachpb::Version(*from.server_version_);
  } else {
    server_version_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.NodeDescriptor)
}

void NodeDescriptor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&address_, 0, reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&address_) + sizeof(node_id_));
}

NodeDescriptor::~NodeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.NodeDescriptor)
  SharedDtor();
}

void NodeDescriptor::SharedDtor() {
  if (this != internal_default_instance()) {
    delete address_;
  }
  if (this != internal_default_instance()) {
    delete attrs_;
  }
  if (this != internal_default_instance()) {
    delete locality_;
  }
  if (this != internal_default_instance()) {
    delete server_version_;
  }
}

void NodeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeDescriptor& NodeDescriptor::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeDescriptor* NodeDescriptor::New(::google::protobuf::Arena* arena) const {
  NodeDescriptor* n = new NodeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.NodeDescriptor)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_address()) {
      GOOGLE_DCHECK(address_ != NULL);
      address_->::cockroach::util::UnresolvedAddr::Clear();
    }
    if (has_attrs()) {
      GOOGLE_DCHECK(attrs_ != NULL);
      attrs_->::cockroach::roachpb::Attributes::Clear();
    }
    if (has_locality()) {
      GOOGLE_DCHECK(locality_ != NULL);
      locality_->::cockroach::roachpb::Locality::Clear();
    }
    if (has_server_version()) {
      GOOGLE_DCHECK(server_version_ != NULL);
      server_version_->::cockroach::roachpb::Version::Clear();
    }
  }
  node_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.NodeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.NodeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.NodeDescriptor)
  return false;
#undef DO_
}

void NodeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.NodeDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->address_, output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->attrs_, output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->locality_, output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->server_version_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.NodeDescriptor)
}

size_t NodeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.NodeDescriptor)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->address_);
    }

    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attrs_);
    }

    if (has_locality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->locality_);
    }

    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->server_version_);
    }

    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeDescriptor*>(&from));
}

void NodeDescriptor::MergeFrom(const NodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.NodeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_address()->::cockroach::util::UnresolvedAddr::MergeFrom(from.address());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_attrs()->::cockroach::roachpb::Attributes::MergeFrom(from.attrs());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_locality()->::cockroach::roachpb::Locality::MergeFrom(from.locality());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_server_version()->::cockroach::roachpb::Version::MergeFrom(from.server_version());
    }
    if (cached_has_bits & 0x00000010u) {
      node_id_ = from.node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeDescriptor::CopyFrom(const NodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.NodeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDescriptor::IsInitialized() const {
  return true;
}

void NodeDescriptor::Swap(NodeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDescriptor::InternalSwap(NodeDescriptor* other) {
  std::swap(address_, other->address_);
  std::swap(attrs_, other->attrs_);
  std::swap(locality_, other->locality_);
  std::swap(server_version_, other->server_version_);
  std::swap(node_id_, other->node_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NodeDescriptor::GetTypeName() const {
  return "cockroach.roachpb.NodeDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeDescriptor

bool NodeDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NodeDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000010u;
}
void NodeDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void NodeDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
::google::protobuf::int32 NodeDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.node_id)
  return node_id_;
}
void NodeDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NodeDescriptor.node_id)
}

bool NodeDescriptor::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeDescriptor::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeDescriptor::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeDescriptor::clear_address() {
  if (address_ != NULL) address_->::cockroach::util::UnresolvedAddr::Clear();
  clear_has_address();
}
const ::cockroach::util::UnresolvedAddr& NodeDescriptor::address() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.address)
  return address_ != NULL ? *address_
                         : *::cockroach::util::UnresolvedAddr::internal_default_instance();
}
::cockroach::util::UnresolvedAddr* NodeDescriptor::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::cockroach::util::UnresolvedAddr;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.address)
  return address_;
}
::cockroach::util::UnresolvedAddr* NodeDescriptor::release_address() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.address)
  clear_has_address();
  ::cockroach::util::UnresolvedAddr* temp = address_;
  address_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_address(::cockroach::util::UnresolvedAddr* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.address)
}

bool NodeDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
  clear_has_attrs();
}
const ::cockroach::roachpb::Attributes& NodeDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.attrs)
  return attrs_ != NULL ? *attrs_
                         : *::cockroach::roachpb::Attributes::internal_default_instance();
}
::cockroach::roachpb::Attributes* NodeDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::roachpb::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.attrs)
  return attrs_;
}
::cockroach::roachpb::Attributes* NodeDescriptor::release_attrs() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.attrs)
  clear_has_attrs();
  ::cockroach::roachpb::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_attrs(::cockroach::roachpb::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.attrs)
}

bool NodeDescriptor::has_locality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NodeDescriptor::set_has_locality() {
  _has_bits_[0] |= 0x00000004u;
}
void NodeDescriptor::clear_has_locality() {
  _has_bits_[0] &= ~0x00000004u;
}
void NodeDescriptor::clear_locality() {
  if (locality_ != NULL) locality_->::cockroach::roachpb::Locality::Clear();
  clear_has_locality();
}
const ::cockroach::roachpb::Locality& NodeDescriptor::locality() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.locality)
  return locality_ != NULL ? *locality_
                         : *::cockroach::roachpb::Locality::internal_default_instance();
}
::cockroach::roachpb::Locality* NodeDescriptor::mutable_locality() {
  set_has_locality();
  if (locality_ == NULL) {
    locality_ = new ::cockroach::roachpb::Locality;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.locality)
  return locality_;
}
::cockroach::roachpb::Locality* NodeDescriptor::release_locality() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.locality)
  clear_has_locality();
  ::cockroach::roachpb::Locality* temp = locality_;
  locality_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_locality(::cockroach::roachpb::Locality* locality) {
  delete locality_;
  locality_ = locality;
  if (locality) {
    set_has_locality();
  } else {
    clear_has_locality();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.locality)
}

bool NodeDescriptor::has_server_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NodeDescriptor::set_has_server_version() {
  _has_bits_[0] |= 0x00000008u;
}
void NodeDescriptor::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void NodeDescriptor::clear_server_version() {
  if (server_version_ != NULL) server_version_->::cockroach::roachpb::Version::Clear();
  clear_has_server_version();
}
const ::cockroach::roachpb::Version& NodeDescriptor::server_version() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.server_version)
  return server_version_ != NULL ? *server_version_
                         : *::cockroach::roachpb::Version::internal_default_instance();
}
::cockroach::roachpb::Version* NodeDescriptor::mutable_server_version() {
  set_has_server_version();
  if (server_version_ == NULL) {
    server_version_ = new ::cockroach::roachpb::Version;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.server_version)
  return server_version_;
}
::cockroach::roachpb::Version* NodeDescriptor::release_server_version() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.server_version)
  clear_has_server_version();
  ::cockroach::roachpb::Version* temp = server_version_;
  server_version_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_server_version(::cockroach::roachpb::Version* server_version) {
  delete server_version_;
  server_version_ = server_version;
  if (server_version) {
    set_has_server_version();
  } else {
    clear_has_server_version();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.server_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreDescriptor::kStoreIdFieldNumber;
const int StoreDescriptor::kAttrsFieldNumber;
const int StoreDescriptor::kNodeFieldNumber;
const int StoreDescriptor::kCapacityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreDescriptor::StoreDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreDescriptor)
}
StoreDescriptor::StoreDescriptor(const StoreDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attrs()) {
    attrs_ = new ::cockroach::roachpb::Attributes(*from.attrs_);
  } else {
    attrs_ = NULL;
  }
  if (from.has_node()) {
    node_ = new ::cockroach::roachpb::NodeDescriptor(*from.node_);
  } else {
    node_ = NULL;
  }
  if (from.has_capacity()) {
    capacity_ = new ::cockroach::roachpb::StoreCapacity(*from.capacity_);
  } else {
    capacity_ = NULL;
  }
  store_id_ = from.store_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreDescriptor)
}

void StoreDescriptor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&attrs_, 0, reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&attrs_) + sizeof(store_id_));
}

StoreDescriptor::~StoreDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreDescriptor)
  SharedDtor();
}

void StoreDescriptor::SharedDtor() {
  if (this != internal_default_instance()) {
    delete attrs_;
  }
  if (this != internal_default_instance()) {
    delete node_;
  }
  if (this != internal_default_instance()) {
    delete capacity_;
  }
}

void StoreDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreDescriptor& StoreDescriptor::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

StoreDescriptor* StoreDescriptor::New(::google::protobuf::Arena* arena) const {
  StoreDescriptor* n = new StoreDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreDescriptor)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_attrs()) {
      GOOGLE_DCHECK(attrs_ != NULL);
      attrs_->::cockroach::roachpb::Attributes::Clear();
    }
    if (has_node()) {
      GOOGLE_DCHECK(node_ != NULL);
      node_->::cockroach::roachpb::NodeDescriptor::Clear();
    }
    if (has_capacity()) {
      GOOGLE_DCHECK(capacity_ != NULL);
      capacity_->::cockroach::roachpb::StoreCapacity::Clear();
    }
  }
  store_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StoreDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capacity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreDescriptor)
  return false;
#undef DO_
}

void StoreDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->attrs_, output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->node_, output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->capacity_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreDescriptor)
}

size_t StoreDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreDescriptor)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attrs_);
    }

    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_);
    }

    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->capacity_);
    }

    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreDescriptor*>(&from));
}

void StoreDescriptor::MergeFrom(const StoreDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_attrs()->::cockroach::roachpb::Attributes::MergeFrom(from.attrs());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_node()->::cockroach::roachpb::NodeDescriptor::MergeFrom(from.node());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_capacity()->::cockroach::roachpb::StoreCapacity::MergeFrom(from.capacity());
    }
    if (cached_has_bits & 0x00000008u) {
      store_id_ = from.store_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreDescriptor::CopyFrom(const StoreDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDescriptor::IsInitialized() const {
  return true;
}

void StoreDescriptor::Swap(StoreDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreDescriptor::InternalSwap(StoreDescriptor* other) {
  std::swap(attrs_, other->attrs_);
  std::swap(node_, other->node_);
  std::swap(capacity_, other->capacity_);
  std::swap(store_id_, other->store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StoreDescriptor::GetTypeName() const {
  return "cockroach.roachpb.StoreDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreDescriptor

bool StoreDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StoreDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000008u;
}
void StoreDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void StoreDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
::google::protobuf::int32 StoreDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.store_id)
  return store_id_;
}
void StoreDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreDescriptor.store_id)
}

bool StoreDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
  clear_has_attrs();
}
const ::cockroach::roachpb::Attributes& StoreDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.attrs)
  return attrs_ != NULL ? *attrs_
                         : *::cockroach::roachpb::Attributes::internal_default_instance();
}
::cockroach::roachpb::Attributes* StoreDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::roachpb::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.attrs)
  return attrs_;
}
::cockroach::roachpb::Attributes* StoreDescriptor::release_attrs() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.attrs)
  clear_has_attrs();
  ::cockroach::roachpb::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_attrs(::cockroach::roachpb::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.attrs)
}

bool StoreDescriptor::has_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreDescriptor::set_has_node() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreDescriptor::clear_has_node() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreDescriptor::clear_node() {
  if (node_ != NULL) node_->::cockroach::roachpb::NodeDescriptor::Clear();
  clear_has_node();
}
const ::cockroach::roachpb::NodeDescriptor& StoreDescriptor::node() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.node)
  return node_ != NULL ? *node_
                         : *::cockroach::roachpb::NodeDescriptor::internal_default_instance();
}
::cockroach::roachpb::NodeDescriptor* StoreDescriptor::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    node_ = new ::cockroach::roachpb::NodeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.node)
  return node_;
}
::cockroach::roachpb::NodeDescriptor* StoreDescriptor::release_node() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.node)
  clear_has_node();
  ::cockroach::roachpb::NodeDescriptor* temp = node_;
  node_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_node(::cockroach::roachpb::NodeDescriptor* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.node)
}

bool StoreDescriptor::has_capacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreDescriptor::set_has_capacity() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreDescriptor::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreDescriptor::clear_capacity() {
  if (capacity_ != NULL) capacity_->::cockroach::roachpb::StoreCapacity::Clear();
  clear_has_capacity();
}
const ::cockroach::roachpb::StoreCapacity& StoreDescriptor::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.capacity)
  return capacity_ != NULL ? *capacity_
                         : *::cockroach::roachpb::StoreCapacity::internal_default_instance();
}
::cockroach::roachpb::StoreCapacity* StoreDescriptor::mutable_capacity() {
  set_has_capacity();
  if (capacity_ == NULL) {
    capacity_ = new ::cockroach::roachpb::StoreCapacity;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.capacity)
  return capacity_;
}
::cockroach::roachpb::StoreCapacity* StoreDescriptor::release_capacity() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.capacity)
  clear_has_capacity();
  ::cockroach::roachpb::StoreCapacity* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_capacity(::cockroach::roachpb::StoreCapacity* capacity) {
  delete capacity_;
  capacity_ = capacity;
  if (capacity) {
    set_has_capacity();
  } else {
    clear_has_capacity();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.capacity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreDeadReplicas::kStoreIdFieldNumber;
const int StoreDeadReplicas::kReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreDeadReplicas::StoreDeadReplicas()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreDeadReplicas)
}
StoreDeadReplicas::StoreDeadReplicas(const StoreDeadReplicas& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_id_ = from.store_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreDeadReplicas)
}

void StoreDeadReplicas::SharedCtor() {
  _cached_size_ = 0;
  store_id_ = 0;
}

StoreDeadReplicas::~StoreDeadReplicas() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreDeadReplicas)
  SharedDtor();
}

void StoreDeadReplicas::SharedDtor() {
}

void StoreDeadReplicas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreDeadReplicas& StoreDeadReplicas::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

StoreDeadReplicas* StoreDeadReplicas::New(::google::protobuf::Arena* arena) const {
  StoreDeadReplicas* n = new StoreDeadReplicas;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreDeadReplicas::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreDeadReplicas)
  replicas_.Clear();
  store_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StoreDeadReplicas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreDeadReplicas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreDeadReplicas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreDeadReplicas)
  return false;
#undef DO_
}

void StoreDeadReplicas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreDeadReplicas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->replicas(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreDeadReplicas)
}

size_t StoreDeadReplicas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreDeadReplicas)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  {
    unsigned int count = this->replicas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicas(i));
    }
  }

  if (has_store_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDeadReplicas::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreDeadReplicas*>(&from));
}

void StoreDeadReplicas::MergeFrom(const StoreDeadReplicas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreDeadReplicas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  if (from.has_store_id()) {
    set_store_id(from.store_id());
  }
}

void StoreDeadReplicas::CopyFrom(const StoreDeadReplicas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreDeadReplicas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDeadReplicas::IsInitialized() const {
  return true;
}

void StoreDeadReplicas::Swap(StoreDeadReplicas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreDeadReplicas::InternalSwap(StoreDeadReplicas* other) {
  replicas_.InternalSwap(&other->replicas_);
  std::swap(store_id_, other->store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StoreDeadReplicas::GetTypeName() const {
  return "cockroach.roachpb.StoreDeadReplicas";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreDeadReplicas

bool StoreDeadReplicas::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreDeadReplicas::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreDeadReplicas::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreDeadReplicas::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
::google::protobuf::int32 StoreDeadReplicas::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDeadReplicas.store_id)
  return store_id_;
}
void StoreDeadReplicas::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreDeadReplicas.store_id)
}

int StoreDeadReplicas::replicas_size() const {
  return replicas_.size();
}
void StoreDeadReplicas::clear_replicas() {
  replicas_.Clear();
}
const ::cockroach::roachpb::ReplicaIdent& StoreDeadReplicas::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Get(index);
}
::cockroach::roachpb::ReplicaIdent* StoreDeadReplicas::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Mutable(index);
}
::cockroach::roachpb::ReplicaIdent* StoreDeadReplicas::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent >*
StoreDeadReplicas::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.StoreDeadReplicas.replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent >&
StoreDeadReplicas::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Locality::kTiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Locality::Locality()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Locality)
}
Locality::Locality(const Locality& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tiers_(from.tiers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Locality)
}

void Locality::SharedCtor() {
  _cached_size_ = 0;
}

Locality::~Locality() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Locality)
  SharedDtor();
}

void Locality::SharedDtor() {
}

void Locality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Locality& Locality::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Locality* Locality::New(::google::protobuf::Arena* arena) const {
  Locality* n = new Locality;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Locality::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Locality)
  tiers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Locality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Locality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Locality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Locality)
  return false;
#undef DO_
}

void Locality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Locality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  for (unsigned int i = 0, n = this->tiers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tiers(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Locality)
}

size_t Locality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Locality)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  {
    unsigned int count = this->tiers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tiers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Locality::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Locality*>(&from));
}

void Locality::MergeFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Locality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiers_.MergeFrom(from.tiers_);
}

void Locality::CopyFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Locality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locality::IsInitialized() const {
  return true;
}

void Locality::Swap(Locality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Locality::InternalSwap(Locality* other) {
  tiers_.InternalSwap(&other->tiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Locality::GetTypeName() const {
  return "cockroach.roachpb.Locality";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Locality

int Locality::tiers_size() const {
  return tiers_.size();
}
void Locality::clear_tiers() {
  tiers_.Clear();
}
const ::cockroach::roachpb::Tier& Locality::tiers(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Locality.tiers)
  return tiers_.Get(index);
}
::cockroach::roachpb::Tier* Locality::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Locality.tiers)
  return tiers_.Mutable(index);
}
::cockroach::roachpb::Tier* Locality::add_tiers() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Locality.tiers)
  return tiers_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier >*
Locality::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Locality.tiers)
  return &tiers_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier >&
Locality::tiers() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Locality.tiers)
  return tiers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tier::kKeyFieldNumber;
const int Tier::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tier::Tier()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Tier)
}
Tier::Tier(const Tier& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Tier)
}

void Tier::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Tier::~Tier() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Tier)
  SharedDtor();
}

void Tier::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tier& Tier::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Tier* Tier::New(::google::protobuf::Arena* arena) const {
  Tier* n = new Tier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Tier)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Tier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Tier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Tier)
  return false;
#undef DO_
}

void Tier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Tier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Tier)
}

size_t Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Tier)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tier::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tier*>(&from));
}

void Tier::MergeFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void Tier::CopyFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tier::IsInitialized() const {
  return true;
}

void Tier::Swap(Tier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tier::InternalSwap(Tier* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Tier::GetTypeName() const {
  return "cockroach.roachpb.Tier";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tier

bool Tier::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Tier::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Tier::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Tier::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Tier::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Tier.key)
  return key_.GetNoArena();
}
void Tier::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Tier.key)
}
#if LANG_CXX11
void Tier::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.Tier.key)
}
#endif
void Tier::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Tier.key)
}
void Tier::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Tier.key)
}
::std::string* Tier::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Tier.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tier::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Tier.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tier::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Tier.key)
}

bool Tier::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Tier::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Tier::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Tier::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Tier::value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Tier.value)
  return value_.GetNoArena();
}
void Tier::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Tier.value)
}
#if LANG_CXX11
void Tier::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.Tier.value)
}
#endif
void Tier::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Tier.value)
}
void Tier::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Tier.value)
}
::std::string* Tier::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Tier.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tier::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Tier.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tier::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Tier.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kMajorFieldNumber;
const int Version::kMinorFieldNumber;
const int Version::kPatchFieldNumber;
const int Version::kUnstableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Version)
}
Version::Version(const Version& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    reinterpret_cast<char*>(&unstable_) -
    reinterpret_cast<char*>(&major_) + sizeof(unstable_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Version)
}

void Version::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&major_, 0, reinterpret_cast<char*>(&unstable_) -
    reinterpret_cast<char*>(&major_) + sizeof(unstable_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Version)
  SharedDtor();
}

void Version::SharedDtor() {
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Version& Version::default_instance() {
  protobuf_cockroach_2fpkg_2froachpb_2fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Version* Version::New(::google::protobuf::Arena* arena) const {
  Version* n = new Version;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Version)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&major_, 0, reinterpret_cast<char*>(&unstable_) -
      reinterpret_cast<char*>(&major_) + sizeof(unstable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_patch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_unstable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unstable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->patch(), output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unstable(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Version)
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Version)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major());
    }

    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor());
    }

    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patch());
    }

    if (has_unstable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unstable());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Version*>(&from));
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      major_ = from.major_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_ = from.minor_;
    }
    if (cached_has_bits & 0x00000004u) {
      patch_ = from.patch_;
    }
    if (cached_has_bits & 0x00000008u) {
      unstable_ = from.unstable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  std::swap(major_, other->major_);
  std::swap(minor_, other->minor_);
  std::swap(patch_, other->patch_);
  std::swap(unstable_, other->unstable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Version::GetTypeName() const {
  return "cockroach.roachpb.Version";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Version

bool Version::has_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Version::set_has_major() {
  _has_bits_[0] |= 0x00000001u;
}
void Version::clear_has_major() {
  _has_bits_[0] &= ~0x00000001u;
}
void Version::clear_major() {
  major_ = 0;
  clear_has_major();
}
::google::protobuf::int32 Version::major() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Version.major)
  return major_;
}
void Version::set_major(::google::protobuf::int32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Version.major)
}

bool Version::has_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Version::set_has_minor() {
  _has_bits_[0] |= 0x00000002u;
}
void Version::clear_has_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
void Version::clear_minor() {
  minor_ = 0;
  clear_has_minor();
}
::google::protobuf::int32 Version::minor() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Version.minor)
  return minor_;
}
void Version::set_minor(::google::protobuf::int32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Version.minor)
}

bool Version::has_patch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Version::set_has_patch() {
  _has_bits_[0] |= 0x00000004u;
}
void Version::clear_has_patch() {
  _has_bits_[0] &= ~0x00000004u;
}
void Version::clear_patch() {
  patch_ = 0;
  clear_has_patch();
}
::google::protobuf::int32 Version::patch() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Version.patch)
  return patch_;
}
void Version::set_patch(::google::protobuf::int32 value) {
  set_has_patch();
  patch_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Version.patch)
}

bool Version::has_unstable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Version::set_has_unstable() {
  _has_bits_[0] |= 0x00000008u;
}
void Version::clear_has_unstable() {
  _has_bits_[0] &= ~0x00000008u;
}
void Version::clear_unstable() {
  unstable_ = 0;
  clear_has_unstable();
}
::google::protobuf::int32 Version::unstable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Version.unstable)
  return unstable_;
}
void Version::set_unstable(::google::protobuf::int32 value) {
  set_has_unstable();
  unstable_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Version.unstable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
