// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/pkg/storage/engine/enginepb/mvcc.proto

#ifndef PROTOBUF_cockroach_2fpkg_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fpkg_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "cockroach/pkg/util/hlc/timestamp.pb.h"
// @@protoc_insertion_point(includes)
namespace cockroach {
namespace storage {
namespace engine {
namespace enginepb {
class MVCCMetadata;
class MVCCMetadataDefaultTypeInternal;
extern MVCCMetadataDefaultTypeInternal _MVCCMetadata_default_instance_;
class MVCCStats;
class MVCCStatsDefaultTypeInternal;
extern MVCCStatsDefaultTypeInternal _MVCCStats_default_instance_;
class TxnMeta;
class TxnMetaDefaultTypeInternal;
extern TxnMetaDefaultTypeInternal _TxnMeta_default_instance_;
}  // namespace enginepb
}  // namespace engine
}  // namespace storage
namespace util {
namespace hlc {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace hlc
}  // namespace util
}  // namespace cockroach

namespace cockroach {
namespace storage {
namespace engine {
namespace enginepb {

namespace protobuf_cockroach_2fpkg_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cockroach_2fpkg_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto

enum IsolationType {
  SERIALIZABLE = 0,
  SNAPSHOT = 1
};
bool IsolationType_IsValid(int value);
const IsolationType IsolationType_MIN = SERIALIZABLE;
const IsolationType IsolationType_MAX = SNAPSHOT;
const int IsolationType_ARRAYSIZE = IsolationType_MAX + 1;

// ===================================================================

class TxnMeta : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.engine.enginepb.TxnMeta) */ {
 public:
  TxnMeta();
  virtual ~TxnMeta();

  TxnMeta(const TxnMeta& from);

  inline TxnMeta& operator=(const TxnMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TxnMeta& default_instance();

  static inline const TxnMeta* internal_default_instance() {
    return reinterpret_cast<const TxnMeta*>(
               &_TxnMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TxnMeta* other);

  // implements Message ----------------------------------------------

  inline TxnMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TxnMeta& from);
  void MergeFrom(const TxnMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TxnMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes key = 3;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  bool has_isolation() const;
  void clear_isolation();
  static const int kIsolationFieldNumber = 2;
  ::cockroach::storage::engine::enginepb::IsolationType isolation() const;
  void set_isolation(::cockroach::storage::engine::enginepb::IsolationType value);

  bool has_epoch() const;
  void clear_epoch();
  static const int kEpochFieldNumber = 4;
  ::google::protobuf::uint32 epoch() const;
  void set_epoch(::google::protobuf::uint32 value);

  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 6;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 7;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  bool has_batch_index() const;
  void clear_batch_index();
  static const int kBatchIndexFieldNumber = 8;
  ::google::protobuf::int32 batch_index() const;
  void set_batch_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.engine.enginepb.TxnMeta)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_isolation();
  void clear_has_isolation();
  void set_has_key();
  void clear_has_key();
  void set_has_epoch();
  void clear_has_epoch();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_priority();
  void clear_has_priority();
  void set_has_sequence();
  void clear_has_sequence();
  void set_has_batch_index();
  void clear_has_batch_index();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  int isolation_;
  ::google::protobuf::uint32 epoch_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int32 sequence_;
  ::google::protobuf::int32 batch_index_;
  friend struct protobuf_cockroach_2fpkg_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCMetadata : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.engine.enginepb.MVCCMetadata) */ {
 public:
  MVCCMetadata();
  virtual ~MVCCMetadata();

  MVCCMetadata(const MVCCMetadata& from);

  inline MVCCMetadata& operator=(const MVCCMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MVCCMetadata& default_instance();

  static inline const MVCCMetadata* internal_default_instance() {
    return reinterpret_cast<const MVCCMetadata*>(
               &_MVCCMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MVCCMetadata* other);

  // implements Message ----------------------------------------------

  inline MVCCMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  MVCCMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MVCCMetadata& from);
  void MergeFrom(const MVCCMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes raw_bytes = 6;
  bool has_raw_bytes() const;
  void clear_raw_bytes();
  static const int kRawBytesFieldNumber = 6;
  const ::std::string& raw_bytes() const;
  void set_raw_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_bytes(::std::string&& value);
  #endif
  void set_raw_bytes(const char* value);
  void set_raw_bytes(const void* value, size_t size);
  ::std::string* mutable_raw_bytes();
  ::std::string* release_raw_bytes();
  void set_allocated_raw_bytes(::std::string* raw_bytes);

  // optional .cockroach.storage.engine.enginepb.TxnMeta txn = 1;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  const ::cockroach::storage::engine::enginepb::TxnMeta& txn() const;
  ::cockroach::storage::engine::enginepb::TxnMeta* mutable_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* release_txn();
  void set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  // optional .cockroach.util.hlc.Timestamp merge_timestamp = 7;
  bool has_merge_timestamp() const;
  void clear_merge_timestamp();
  static const int kMergeTimestampFieldNumber = 7;
  const ::cockroach::util::hlc::Timestamp& merge_timestamp() const;
  ::cockroach::util::hlc::Timestamp* mutable_merge_timestamp();
  ::cockroach::util::hlc::Timestamp* release_merge_timestamp();
  void set_allocated_merge_timestamp(::cockroach::util::hlc::Timestamp* merge_timestamp);

  bool has_key_bytes() const;
  void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 4;
  ::google::protobuf::int64 key_bytes() const;
  void set_key_bytes(::google::protobuf::int64 value);

  bool has_val_bytes() const;
  void clear_val_bytes();
  static const int kValBytesFieldNumber = 5;
  ::google::protobuf::int64 val_bytes() const;
  void set_val_bytes(::google::protobuf::int64 value);

  bool has_deleted() const;
  void clear_deleted();
  static const int kDeletedFieldNumber = 3;
  bool deleted() const;
  void set_deleted(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.engine.enginepb.MVCCMetadata)
 private:
  void set_has_txn();
  void clear_has_txn();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_deleted();
  void clear_has_deleted();
  void set_has_key_bytes();
  void clear_has_key_bytes();
  void set_has_val_bytes();
  void clear_has_val_bytes();
  void set_has_raw_bytes();
  void clear_has_raw_bytes();
  void set_has_merge_timestamp();
  void clear_has_merge_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr raw_bytes_;
  ::cockroach::storage::engine::enginepb::TxnMeta* txn_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  ::cockroach::util::hlc::Timestamp* merge_timestamp_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 val_bytes_;
  bool deleted_;
  friend struct protobuf_cockroach_2fpkg_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVCCStats : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.storage.engine.enginepb.MVCCStats) */ {
 public:
  MVCCStats();
  virtual ~MVCCStats();

  MVCCStats(const MVCCStats& from);

  inline MVCCStats& operator=(const MVCCStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MVCCStats& default_instance();

  static inline const MVCCStats* internal_default_instance() {
    return reinterpret_cast<const MVCCStats*>(
               &_MVCCStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MVCCStats* other);

  // implements Message ----------------------------------------------

  inline MVCCStats* New() const PROTOBUF_FINAL { return New(NULL); }

  MVCCStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MVCCStats& from);
  void MergeFrom(const MVCCStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_last_update_nanos() const;
  void clear_last_update_nanos();
  static const int kLastUpdateNanosFieldNumber = 1;
  ::google::protobuf::int64 last_update_nanos() const;
  void set_last_update_nanos(::google::protobuf::int64 value);

  bool has_intent_age() const;
  void clear_intent_age();
  static const int kIntentAgeFieldNumber = 2;
  ::google::protobuf::int64 intent_age() const;
  void set_intent_age(::google::protobuf::int64 value);

  bool has_gc_bytes_age() const;
  void clear_gc_bytes_age();
  static const int kGcBytesAgeFieldNumber = 3;
  ::google::protobuf::int64 gc_bytes_age() const;
  void set_gc_bytes_age(::google::protobuf::int64 value);

  bool has_live_bytes() const;
  void clear_live_bytes();
  static const int kLiveBytesFieldNumber = 4;
  ::google::protobuf::int64 live_bytes() const;
  void set_live_bytes(::google::protobuf::int64 value);

  bool has_live_count() const;
  void clear_live_count();
  static const int kLiveCountFieldNumber = 5;
  ::google::protobuf::int64 live_count() const;
  void set_live_count(::google::protobuf::int64 value);

  bool has_key_bytes() const;
  void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 6;
  ::google::protobuf::int64 key_bytes() const;
  void set_key_bytes(::google::protobuf::int64 value);

  bool has_key_count() const;
  void clear_key_count();
  static const int kKeyCountFieldNumber = 7;
  ::google::protobuf::int64 key_count() const;
  void set_key_count(::google::protobuf::int64 value);

  bool has_val_bytes() const;
  void clear_val_bytes();
  static const int kValBytesFieldNumber = 8;
  ::google::protobuf::int64 val_bytes() const;
  void set_val_bytes(::google::protobuf::int64 value);

  bool has_val_count() const;
  void clear_val_count();
  static const int kValCountFieldNumber = 9;
  ::google::protobuf::int64 val_count() const;
  void set_val_count(::google::protobuf::int64 value);

  bool has_intent_bytes() const;
  void clear_intent_bytes();
  static const int kIntentBytesFieldNumber = 10;
  ::google::protobuf::int64 intent_bytes() const;
  void set_intent_bytes(::google::protobuf::int64 value);

  bool has_intent_count() const;
  void clear_intent_count();
  static const int kIntentCountFieldNumber = 11;
  ::google::protobuf::int64 intent_count() const;
  void set_intent_count(::google::protobuf::int64 value);

  bool has_sys_bytes() const;
  void clear_sys_bytes();
  static const int kSysBytesFieldNumber = 12;
  ::google::protobuf::int64 sys_bytes() const;
  void set_sys_bytes(::google::protobuf::int64 value);

  bool has_sys_count() const;
  void clear_sys_count();
  static const int kSysCountFieldNumber = 13;
  ::google::protobuf::int64 sys_count() const;
  void set_sys_count(::google::protobuf::int64 value);

  bool has_contains_estimates() const;
  void clear_contains_estimates();
  static const int kContainsEstimatesFieldNumber = 14;
  bool contains_estimates() const;
  void set_contains_estimates(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.engine.enginepb.MVCCStats)
 private:
  void set_has_contains_estimates();
  void clear_has_contains_estimates();
  void set_has_last_update_nanos();
  void clear_has_last_update_nanos();
  void set_has_intent_age();
  void clear_has_intent_age();
  void set_has_gc_bytes_age();
  void clear_has_gc_bytes_age();
  void set_has_live_bytes();
  void clear_has_live_bytes();
  void set_has_live_count();
  void clear_has_live_count();
  void set_has_key_bytes();
  void clear_has_key_bytes();
  void set_has_key_count();
  void clear_has_key_count();
  void set_has_val_bytes();
  void clear_has_val_bytes();
  void set_has_val_count();
  void clear_has_val_count();
  void set_has_intent_bytes();
  void clear_has_intent_bytes();
  void set_has_intent_count();
  void clear_has_intent_count();
  void set_has_sys_bytes();
  void clear_has_sys_bytes();
  void set_has_sys_count();
  void clear_has_sys_count();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 last_update_nanos_;
  ::google::protobuf::int64 intent_age_;
  ::google::protobuf::int64 gc_bytes_age_;
  ::google::protobuf::int64 live_bytes_;
  ::google::protobuf::int64 live_count_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 key_count_;
  ::google::protobuf::int64 val_bytes_;
  ::google::protobuf::int64 val_count_;
  ::google::protobuf::int64 intent_bytes_;
  ::google::protobuf::int64 intent_count_;
  ::google::protobuf::int64 sys_bytes_;
  ::google::protobuf::int64 sys_count_;
  bool contains_estimates_;
  friend struct protobuf_cockroach_2fpkg_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnMeta

inline bool TxnMeta::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxnMeta::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxnMeta::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxnMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& TxnMeta::id() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.TxnMeta.id)
  return id_.GetNoArena();
}
inline void TxnMeta::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.TxnMeta.id)
}
#if LANG_CXX11
inline void TxnMeta::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.engine.enginepb.TxnMeta.id)
}
#endif
inline void TxnMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.engine.enginepb.TxnMeta.id)
}
inline void TxnMeta::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.engine.enginepb.TxnMeta.id)
}
inline ::std::string* TxnMeta::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.TxnMeta.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnMeta::release_id() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.TxnMeta.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnMeta::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.TxnMeta.id)
}

inline bool TxnMeta::has_isolation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxnMeta::set_has_isolation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxnMeta::clear_has_isolation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxnMeta::clear_isolation() {
  isolation_ = 0;
  clear_has_isolation();
}
inline ::cockroach::storage::engine::enginepb::IsolationType TxnMeta::isolation() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.TxnMeta.isolation)
  return static_cast< ::cockroach::storage::engine::enginepb::IsolationType >(isolation_);
}
inline void TxnMeta::set_isolation(::cockroach::storage::engine::enginepb::IsolationType value) {
  assert(::cockroach::storage::engine::enginepb::IsolationType_IsValid(value));
  set_has_isolation();
  isolation_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.TxnMeta.isolation)
}

// optional bytes key = 3;
inline bool TxnMeta::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxnMeta::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxnMeta::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxnMeta::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& TxnMeta::key() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.TxnMeta.key)
  return key_.GetNoArena();
}
inline void TxnMeta::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.TxnMeta.key)
}
#if LANG_CXX11
inline void TxnMeta::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.engine.enginepb.TxnMeta.key)
}
#endif
inline void TxnMeta::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.engine.enginepb.TxnMeta.key)
}
inline void TxnMeta::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.engine.enginepb.TxnMeta.key)
}
inline ::std::string* TxnMeta::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.TxnMeta.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnMeta::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.TxnMeta.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnMeta::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.TxnMeta.key)
}

inline bool TxnMeta::has_epoch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxnMeta::set_has_epoch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxnMeta::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxnMeta::clear_epoch() {
  epoch_ = 0u;
  clear_has_epoch();
}
inline ::google::protobuf::uint32 TxnMeta::epoch() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.TxnMeta.epoch)
  return epoch_;
}
inline void TxnMeta::set_epoch(::google::protobuf::uint32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.TxnMeta.epoch)
}

inline bool TxnMeta::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxnMeta::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxnMeta::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxnMeta::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::util::hlc::Timestamp& TxnMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.TxnMeta.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::cockroach::util::hlc::Timestamp::internal_default_instance();
}
inline ::cockroach::util::hlc::Timestamp* TxnMeta::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.TxnMeta.timestamp)
  return timestamp_;
}
inline ::cockroach::util::hlc::Timestamp* TxnMeta::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.TxnMeta.timestamp)
  clear_has_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void TxnMeta::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.TxnMeta.timestamp)
}

inline bool TxnMeta::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxnMeta::set_has_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxnMeta::clear_has_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxnMeta::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 TxnMeta::priority() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.TxnMeta.priority)
  return priority_;
}
inline void TxnMeta::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.TxnMeta.priority)
}

inline bool TxnMeta::has_sequence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxnMeta::set_has_sequence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxnMeta::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxnMeta::clear_sequence() {
  sequence_ = 0;
  clear_has_sequence();
}
inline ::google::protobuf::int32 TxnMeta::sequence() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.TxnMeta.sequence)
  return sequence_;
}
inline void TxnMeta::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.TxnMeta.sequence)
}

inline bool TxnMeta::has_batch_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxnMeta::set_has_batch_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxnMeta::clear_has_batch_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxnMeta::clear_batch_index() {
  batch_index_ = 0;
  clear_has_batch_index();
}
inline ::google::protobuf::int32 TxnMeta::batch_index() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.TxnMeta.batch_index)
  return batch_index_;
}
inline void TxnMeta::set_batch_index(::google::protobuf::int32 value) {
  set_has_batch_index();
  batch_index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.TxnMeta.batch_index)
}

// -------------------------------------------------------------------

// MVCCMetadata

// optional .cockroach.storage.engine.enginepb.TxnMeta txn = 1;
inline bool MVCCMetadata::has_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCMetadata::set_has_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCMetadata::clear_has_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCMetadata::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::storage::engine::enginepb::TxnMeta::Clear();
  clear_has_txn();
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& MVCCMetadata::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.txn)
  return txn_ != NULL ? *txn_
                         : *::cockroach::storage::engine::enginepb::TxnMeta::internal_default_instance();
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* MVCCMetadata::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::storage::engine::enginepb::TxnMeta;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.MVCCMetadata.txn)
  return txn_;
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* MVCCMetadata::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.MVCCMetadata.txn)
  clear_has_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.MVCCMetadata.txn)
}

inline bool MVCCMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVCCMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVCCMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVCCMetadata::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::util::hlc::Timestamp& MVCCMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::cockroach::util::hlc::Timestamp::internal_default_instance();
}
inline ::cockroach::util::hlc::Timestamp* MVCCMetadata::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.MVCCMetadata.timestamp)
  return timestamp_;
}
inline ::cockroach::util::hlc::Timestamp* MVCCMetadata::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.MVCCMetadata.timestamp)
  clear_has_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.MVCCMetadata.timestamp)
}

inline bool MVCCMetadata::has_deleted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MVCCMetadata::set_has_deleted() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MVCCMetadata::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MVCCMetadata::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool MVCCMetadata::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.deleted)
  return deleted_;
}
inline void MVCCMetadata::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCMetadata.deleted)
}

inline bool MVCCMetadata::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MVCCMetadata::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MVCCMetadata::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MVCCMetadata::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
inline ::google::protobuf::int64 MVCCMetadata::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.key_bytes)
  return key_bytes_;
}
inline void MVCCMetadata::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCMetadata.key_bytes)
}

inline bool MVCCMetadata::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MVCCMetadata::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MVCCMetadata::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MVCCMetadata::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
inline ::google::protobuf::int64 MVCCMetadata::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.val_bytes)
  return val_bytes_;
}
inline void MVCCMetadata::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCMetadata.val_bytes)
}

// optional bytes raw_bytes = 6;
inline bool MVCCMetadata::has_raw_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCMetadata::set_has_raw_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCMetadata::clear_has_raw_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCMetadata::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_bytes();
}
inline const ::std::string& MVCCMetadata::raw_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
  return raw_bytes_.GetNoArena();
}
inline void MVCCMetadata::set_raw_bytes(const ::std::string& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}
#if LANG_CXX11
inline void MVCCMetadata::set_raw_bytes(::std::string&& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}
#endif
inline void MVCCMetadata::set_raw_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}
inline void MVCCMetadata::set_raw_bytes(const void* value, size_t size) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}
inline ::std::string* MVCCMetadata::mutable_raw_bytes() {
  set_has_raw_bytes();
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVCCMetadata::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
  clear_has_raw_bytes();
  return raw_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVCCMetadata::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    set_has_raw_bytes();
  } else {
    clear_has_raw_bytes();
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}

// optional .cockroach.util.hlc.Timestamp merge_timestamp = 7;
inline bool MVCCMetadata::has_merge_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MVCCMetadata::set_has_merge_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MVCCMetadata::clear_has_merge_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MVCCMetadata::clear_merge_timestamp() {
  if (merge_timestamp_ != NULL) merge_timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_merge_timestamp();
}
inline const ::cockroach::util::hlc::Timestamp& MVCCMetadata::merge_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.merge_timestamp)
  return merge_timestamp_ != NULL ? *merge_timestamp_
                         : *::cockroach::util::hlc::Timestamp::internal_default_instance();
}
inline ::cockroach::util::hlc::Timestamp* MVCCMetadata::mutable_merge_timestamp() {
  set_has_merge_timestamp();
  if (merge_timestamp_ == NULL) {
    merge_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.MVCCMetadata.merge_timestamp)
  return merge_timestamp_;
}
inline ::cockroach::util::hlc::Timestamp* MVCCMetadata::release_merge_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.MVCCMetadata.merge_timestamp)
  clear_has_merge_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = merge_timestamp_;
  merge_timestamp_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_merge_timestamp(::cockroach::util::hlc::Timestamp* merge_timestamp) {
  delete merge_timestamp_;
  merge_timestamp_ = merge_timestamp;
  if (merge_timestamp) {
    set_has_merge_timestamp();
  } else {
    clear_has_merge_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.MVCCMetadata.merge_timestamp)
}

// -------------------------------------------------------------------

// MVCCStats

inline bool MVCCStats::has_contains_estimates() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MVCCStats::set_has_contains_estimates() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MVCCStats::clear_has_contains_estimates() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MVCCStats::clear_contains_estimates() {
  contains_estimates_ = false;
  clear_has_contains_estimates();
}
inline bool MVCCStats::contains_estimates() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.contains_estimates)
  return contains_estimates_;
}
inline void MVCCStats::set_contains_estimates(bool value) {
  set_has_contains_estimates();
  contains_estimates_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.contains_estimates)
}

inline bool MVCCStats::has_last_update_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCStats::set_has_last_update_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCStats::clear_has_last_update_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCStats::clear_last_update_nanos() {
  last_update_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_nanos();
}
inline ::google::protobuf::int64 MVCCStats::last_update_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.last_update_nanos)
  return last_update_nanos_;
}
inline void MVCCStats::set_last_update_nanos(::google::protobuf::int64 value) {
  set_has_last_update_nanos();
  last_update_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.last_update_nanos)
}

inline bool MVCCStats::has_intent_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCStats::set_has_intent_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCStats::clear_has_intent_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCStats::clear_intent_age() {
  intent_age_ = GOOGLE_LONGLONG(0);
  clear_has_intent_age();
}
inline ::google::protobuf::int64 MVCCStats::intent_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.intent_age)
  return intent_age_;
}
inline void MVCCStats::set_intent_age(::google::protobuf::int64 value) {
  set_has_intent_age();
  intent_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.intent_age)
}

inline bool MVCCStats::has_gc_bytes_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVCCStats::set_has_gc_bytes_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVCCStats::clear_has_gc_bytes_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVCCStats::clear_gc_bytes_age() {
  gc_bytes_age_ = GOOGLE_LONGLONG(0);
  clear_has_gc_bytes_age();
}
inline ::google::protobuf::int64 MVCCStats::gc_bytes_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.gc_bytes_age)
  return gc_bytes_age_;
}
inline void MVCCStats::set_gc_bytes_age(::google::protobuf::int64 value) {
  set_has_gc_bytes_age();
  gc_bytes_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.gc_bytes_age)
}

inline bool MVCCStats::has_live_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MVCCStats::set_has_live_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MVCCStats::clear_has_live_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MVCCStats::clear_live_bytes() {
  live_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_live_bytes();
}
inline ::google::protobuf::int64 MVCCStats::live_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.live_bytes)
  return live_bytes_;
}
inline void MVCCStats::set_live_bytes(::google::protobuf::int64 value) {
  set_has_live_bytes();
  live_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.live_bytes)
}

inline bool MVCCStats::has_live_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MVCCStats::set_has_live_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MVCCStats::clear_has_live_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MVCCStats::clear_live_count() {
  live_count_ = GOOGLE_LONGLONG(0);
  clear_has_live_count();
}
inline ::google::protobuf::int64 MVCCStats::live_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.live_count)
  return live_count_;
}
inline void MVCCStats::set_live_count(::google::protobuf::int64 value) {
  set_has_live_count();
  live_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.live_count)
}

inline bool MVCCStats::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MVCCStats::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MVCCStats::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MVCCStats::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
inline ::google::protobuf::int64 MVCCStats::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.key_bytes)
  return key_bytes_;
}
inline void MVCCStats::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.key_bytes)
}

inline bool MVCCStats::has_key_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MVCCStats::set_has_key_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MVCCStats::clear_has_key_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MVCCStats::clear_key_count() {
  key_count_ = GOOGLE_LONGLONG(0);
  clear_has_key_count();
}
inline ::google::protobuf::int64 MVCCStats::key_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.key_count)
  return key_count_;
}
inline void MVCCStats::set_key_count(::google::protobuf::int64 value) {
  set_has_key_count();
  key_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.key_count)
}

inline bool MVCCStats::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MVCCStats::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MVCCStats::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MVCCStats::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
inline ::google::protobuf::int64 MVCCStats::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.val_bytes)
  return val_bytes_;
}
inline void MVCCStats::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.val_bytes)
}

inline bool MVCCStats::has_val_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MVCCStats::set_has_val_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MVCCStats::clear_has_val_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MVCCStats::clear_val_count() {
  val_count_ = GOOGLE_LONGLONG(0);
  clear_has_val_count();
}
inline ::google::protobuf::int64 MVCCStats::val_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.val_count)
  return val_count_;
}
inline void MVCCStats::set_val_count(::google::protobuf::int64 value) {
  set_has_val_count();
  val_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.val_count)
}

inline bool MVCCStats::has_intent_bytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MVCCStats::set_has_intent_bytes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MVCCStats::clear_has_intent_bytes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MVCCStats::clear_intent_bytes() {
  intent_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_intent_bytes();
}
inline ::google::protobuf::int64 MVCCStats::intent_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.intent_bytes)
  return intent_bytes_;
}
inline void MVCCStats::set_intent_bytes(::google::protobuf::int64 value) {
  set_has_intent_bytes();
  intent_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.intent_bytes)
}

inline bool MVCCStats::has_intent_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MVCCStats::set_has_intent_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MVCCStats::clear_has_intent_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MVCCStats::clear_intent_count() {
  intent_count_ = GOOGLE_LONGLONG(0);
  clear_has_intent_count();
}
inline ::google::protobuf::int64 MVCCStats::intent_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.intent_count)
  return intent_count_;
}
inline void MVCCStats::set_intent_count(::google::protobuf::int64 value) {
  set_has_intent_count();
  intent_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.intent_count)
}

inline bool MVCCStats::has_sys_bytes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MVCCStats::set_has_sys_bytes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MVCCStats::clear_has_sys_bytes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MVCCStats::clear_sys_bytes() {
  sys_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_sys_bytes();
}
inline ::google::protobuf::int64 MVCCStats::sys_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.sys_bytes)
  return sys_bytes_;
}
inline void MVCCStats::set_sys_bytes(::google::protobuf::int64 value) {
  set_has_sys_bytes();
  sys_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.sys_bytes)
}

inline bool MVCCStats::has_sys_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MVCCStats::set_has_sys_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MVCCStats::clear_has_sys_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MVCCStats::clear_sys_count() {
  sys_count_ = GOOGLE_LONGLONG(0);
  clear_has_sys_count();
}
inline ::google::protobuf::int64 MVCCStats::sys_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.sys_count)
  return sys_count_;
}
inline void MVCCStats::set_sys_count(::google::protobuf::int64 value) {
  set_has_sys_count();
  sys_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.sys_count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace enginepb
}  // namespace engine
}  // namespace storage
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::storage::engine::enginepb::IsolationType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fpkg_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto__INCLUDED
