// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/pkg/util/unresolved_addr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/pkg/util/unresolved_addr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace util {
class UnresolvedAddrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnresolvedAddr> {
} _UnresolvedAddr_default_instance_;

namespace protobuf_cockroach_2fpkg_2futil_2funresolved_5faddr_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _UnresolvedAddr_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UnresolvedAddr_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_cockroach_2fpkg_2futil_2funresolved_5faddr_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnresolvedAddr::kNetworkFieldFieldNumber;
const int UnresolvedAddr::kAddressFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnresolvedAddr::UnresolvedAddr()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cockroach_2fpkg_2futil_2funresolved_5faddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.UnresolvedAddr)
}
UnresolvedAddr::UnresolvedAddr(const UnresolvedAddr& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_field()) {
    network_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_field_);
  }
  address_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_field()) {
    address_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_field_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.util.UnresolvedAddr)
}

void UnresolvedAddr::SharedCtor() {
  _cached_size_ = 0;
  network_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnresolvedAddr::~UnresolvedAddr() {
  // @@protoc_insertion_point(destructor:cockroach.util.UnresolvedAddr)
  SharedDtor();
}

void UnresolvedAddr::SharedDtor() {
  network_field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnresolvedAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnresolvedAddr& UnresolvedAddr::default_instance() {
  protobuf_cockroach_2fpkg_2futil_2funresolved_5faddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnresolvedAddr* UnresolvedAddr::New(::google::protobuf::Arena* arena) const {
  UnresolvedAddr* n = new UnresolvedAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnresolvedAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.UnresolvedAddr)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_network_field()) {
      GOOGLE_DCHECK(!network_field_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*network_field_.UnsafeRawStringPointer())->clear();
    }
    if (has_address_field()) {
      GOOGLE_DCHECK(!address_field_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_field_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnresolvedAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.UnresolvedAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.UnresolvedAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.UnresolvedAddr)
  return false;
#undef DO_
}

void UnresolvedAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.UnresolvedAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network_field(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address_field(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.UnresolvedAddr)
}

size_t UnresolvedAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.UnresolvedAddr)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_network_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_field());
    }

    if (has_address_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_field());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnresolvedAddr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnresolvedAddr*>(&from));
}

void UnresolvedAddr::MergeFrom(const UnresolvedAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.UnresolvedAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_network_field();
      network_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_field_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_address_field();
      address_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_field_);
    }
  }
}

void UnresolvedAddr::CopyFrom(const UnresolvedAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.UnresolvedAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnresolvedAddr::IsInitialized() const {
  return true;
}

void UnresolvedAddr::Swap(UnresolvedAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnresolvedAddr::InternalSwap(UnresolvedAddr* other) {
  network_field_.Swap(&other->network_field_);
  address_field_.Swap(&other->address_field_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UnresolvedAddr::GetTypeName() const {
  return "cockroach.util.UnresolvedAddr";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnresolvedAddr

bool UnresolvedAddr::has_network_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnresolvedAddr::set_has_network_field() {
  _has_bits_[0] |= 0x00000001u;
}
void UnresolvedAddr::clear_has_network_field() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnresolvedAddr::clear_network_field() {
  network_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network_field();
}
const ::std::string& UnresolvedAddr::network_field() const {
  // @@protoc_insertion_point(field_get:cockroach.util.UnresolvedAddr.network_field)
  return network_field_.GetNoArena();
}
void UnresolvedAddr::set_network_field(const ::std::string& value) {
  set_has_network_field();
  network_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.UnresolvedAddr.network_field)
}
#if LANG_CXX11
void UnresolvedAddr::set_network_field(::std::string&& value) {
  set_has_network_field();
  network_field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.UnresolvedAddr.network_field)
}
#endif
void UnresolvedAddr::set_network_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_network_field();
  network_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.UnresolvedAddr.network_field)
}
void UnresolvedAddr::set_network_field(const char* value, size_t size) {
  set_has_network_field();
  network_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.UnresolvedAddr.network_field)
}
::std::string* UnresolvedAddr::mutable_network_field() {
  set_has_network_field();
  // @@protoc_insertion_point(field_mutable:cockroach.util.UnresolvedAddr.network_field)
  return network_field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnresolvedAddr::release_network_field() {
  // @@protoc_insertion_point(field_release:cockroach.util.UnresolvedAddr.network_field)
  clear_has_network_field();
  return network_field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnresolvedAddr::set_allocated_network_field(::std::string* network_field) {
  if (network_field != NULL) {
    set_has_network_field();
  } else {
    clear_has_network_field();
  }
  network_field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_field);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.UnresolvedAddr.network_field)
}

bool UnresolvedAddr::has_address_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnresolvedAddr::set_has_address_field() {
  _has_bits_[0] |= 0x00000002u;
}
void UnresolvedAddr::clear_has_address_field() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnresolvedAddr::clear_address_field() {
  address_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address_field();
}
const ::std::string& UnresolvedAddr::address_field() const {
  // @@protoc_insertion_point(field_get:cockroach.util.UnresolvedAddr.address_field)
  return address_field_.GetNoArena();
}
void UnresolvedAddr::set_address_field(const ::std::string& value) {
  set_has_address_field();
  address_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.UnresolvedAddr.address_field)
}
#if LANG_CXX11
void UnresolvedAddr::set_address_field(::std::string&& value) {
  set_has_address_field();
  address_field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.util.UnresolvedAddr.address_field)
}
#endif
void UnresolvedAddr::set_address_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address_field();
  address_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.UnresolvedAddr.address_field)
}
void UnresolvedAddr::set_address_field(const char* value, size_t size) {
  set_has_address_field();
  address_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.UnresolvedAddr.address_field)
}
::std::string* UnresolvedAddr::mutable_address_field() {
  set_has_address_field();
  // @@protoc_insertion_point(field_mutable:cockroach.util.UnresolvedAddr.address_field)
  return address_field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnresolvedAddr::release_address_field() {
  // @@protoc_insertion_point(field_release:cockroach.util.UnresolvedAddr.address_field)
  clear_has_address_field();
  return address_field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnresolvedAddr::set_allocated_address_field(::std::string* address_field) {
  if (address_field != NULL) {
    set_has_address_field();
  } else {
    clear_has_address_field();
  }
  address_field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address_field);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.UnresolvedAddr.address_field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace util
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
