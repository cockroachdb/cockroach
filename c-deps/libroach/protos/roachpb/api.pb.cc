// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/api.proto

#include "roachpb/api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_roachpb_2fapi_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BulkOpSummary_EntryCountsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CheckConsistencyResponse_Result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_Azure;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_GCS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_Http;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_LocalFilePath;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_S3;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_Workload;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileEncryptionOptions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ImportRequest_TableRekey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddSSTableResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminMergeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminMergeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminRelocateRangeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminScatterRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminScatterResponse_Range;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminSplitResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminTransferLeaseRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminTransferLeaseResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminUnsplitRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdminUnsplitResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BulkOpSummary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClearRangeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClearRangeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ComputeChecksumResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConditionalPutResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeleteRangeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeleteRangeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeleteRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeleteResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExportRequest_StorageByLocalityKvEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GCRequest_GCKey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GCResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HeartbeatTxnResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImportRequest_File;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IncrementRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IncrementResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InitPutResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LeaseInfoRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MergeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PutResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_QueryIntentResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RangeFeedError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RangeFeedValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RangeStatsRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RecomputeStatsRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RefreshRangeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RefreshResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReplicationChange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RequestLeaseResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResolveIntentRangeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResolveIntentResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReverseScanRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RevertRangeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScanRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TruncateLogRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TruncateLogResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WriteBatchResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AddSSTableRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AdminChangeReplicasResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AdminRelocateRangeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AdminScatterResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AdminSplitRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AdminVerifyProtectedTimestampRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AdminVerifyProtectedTimestampResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CheckConsistencyRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CheckConsistencyResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ComputeChecksumRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalPutRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_EndTxnResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ExportResponse_File;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GetResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HeartbeatTxnRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ImportResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InitPutRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LeaseInfoResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MergeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PushTxnResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PutRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_QueryIntentRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_QueryTxnRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_QueryTxnResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RangeFeedCheckpoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RangeInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RangeStatsResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecomputeStatsResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecoverTxnRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecoverTxnResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RefreshRangeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RefreshRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ReverseScanResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RevertRangeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ScanResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SubsumeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TransferLeaseRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WriteBatchRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ExportResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GCRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RequestLeaseRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ResolveIntentRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ResponseHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SubsumeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<43> scc_info_ResponseUnion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<44> scc_info_RequestUnion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_AdminChangeReplicasRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_BatchResponse_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_PushTxnRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ResolveIntentRangeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_EndTxnRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ExportRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_ExternalStorage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_ImportRequest;
}  // namespace protobuf_roachpb_2fapi_2eproto
namespace protobuf_roachpb_2fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SequencedWrite;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Span;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_KeyValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Lease;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_InternalCommitTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Transaction;
}  // namespace protobuf_roachpb_2fdata_2eproto
namespace protobuf_roachpb_2ferrors_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<31> scc_info_AmbiguousResultError;
}  // namespace protobuf_roachpb_2ferrors_2eproto
namespace protobuf_roachpb_2fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaDescriptor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicationTarget;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RangeDescriptor;
}  // namespace protobuf_roachpb_2fmetadata_2eproto
namespace protobuf_storage_2fenginepb_2fmvcc3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fenginepb_2fmvcc3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IgnoredSeqNumRange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fenginepb_2fmvcc3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MVCCStatsDelta;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fenginepb_2fmvcc3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TxnMeta;
}  // namespace protobuf_storage_2fenginepb_2fmvcc3_2eproto
namespace protobuf_storage_2fenginepb_2fmvcc_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fenginepb_2fmvcc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MVCCStats;
}  // namespace protobuf_storage_2fenginepb_2fmvcc_2eproto
namespace protobuf_util_2fhlc_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2fhlc_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_util_2fhlc_2ftimestamp_2eproto
namespace protobuf_util_2ftracing_2frecorded_5fspan_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2ftracing_2frecorded_5fspan_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RecordedSpan;
}  // namespace protobuf_util_2ftracing_2frecorded_5fspan_2eproto
namespace cockroach {
namespace roachpb {
class RangeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeInfo>
      _instance;
} _RangeInfo_default_instance_;
class RequestHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestHeader>
      _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader>
      _instance;
} _ResponseHeader_default_instance_;
class GetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRequest>
      _instance;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetResponse>
      _instance;
} _GetResponse_default_instance_;
class PutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutRequest>
      _instance;
} _PutRequest_default_instance_;
class PutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutResponse>
      _instance;
} _PutResponse_default_instance_;
class ConditionalPutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalPutRequest>
      _instance;
} _ConditionalPutRequest_default_instance_;
class ConditionalPutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalPutResponse>
      _instance;
} _ConditionalPutResponse_default_instance_;
class InitPutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitPutRequest>
      _instance;
} _InitPutRequest_default_instance_;
class InitPutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitPutResponse>
      _instance;
} _InitPutResponse_default_instance_;
class IncrementRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IncrementRequest>
      _instance;
} _IncrementRequest_default_instance_;
class IncrementResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IncrementResponse>
      _instance;
} _IncrementResponse_default_instance_;
class DeleteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRequest>
      _instance;
} _DeleteRequest_default_instance_;
class DeleteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteResponse>
      _instance;
} _DeleteResponse_default_instance_;
class DeleteRangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeRequest>
      _instance;
} _DeleteRangeRequest_default_instance_;
class DeleteRangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeResponse>
      _instance;
} _DeleteRangeResponse_default_instance_;
class ClearRangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClearRangeRequest>
      _instance;
} _ClearRangeRequest_default_instance_;
class ClearRangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClearRangeResponse>
      _instance;
} _ClearRangeResponse_default_instance_;
class RevertRangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RevertRangeRequest>
      _instance;
} _RevertRangeRequest_default_instance_;
class RevertRangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RevertRangeResponse>
      _instance;
} _RevertRangeResponse_default_instance_;
class ScanRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScanRequest>
      _instance;
} _ScanRequest_default_instance_;
class ScanResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScanResponse>
      _instance;
} _ScanResponse_default_instance_;
class ReverseScanRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReverseScanRequest>
      _instance;
} _ReverseScanRequest_default_instance_;
class ReverseScanResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReverseScanResponse>
      _instance;
} _ReverseScanResponse_default_instance_;
class CheckConsistencyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckConsistencyRequest>
      _instance;
} _CheckConsistencyRequest_default_instance_;
class CheckConsistencyResponse_ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckConsistencyResponse_Result>
      _instance;
} _CheckConsistencyResponse_Result_default_instance_;
class CheckConsistencyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckConsistencyResponse>
      _instance;
} _CheckConsistencyResponse_default_instance_;
class RecomputeStatsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecomputeStatsRequest>
      _instance;
} _RecomputeStatsRequest_default_instance_;
class RecomputeStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecomputeStatsResponse>
      _instance;
} _RecomputeStatsResponse_default_instance_;
class EndTxnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndTxnRequest>
      _instance;
} _EndTxnRequest_default_instance_;
class EndTxnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndTxnResponse>
      _instance;
} _EndTxnResponse_default_instance_;
class AdminSplitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminSplitRequest>
      _instance;
} _AdminSplitRequest_default_instance_;
class AdminSplitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminSplitResponse>
      _instance;
} _AdminSplitResponse_default_instance_;
class AdminUnsplitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminUnsplitRequest>
      _instance;
} _AdminUnsplitRequest_default_instance_;
class AdminUnsplitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminUnsplitResponse>
      _instance;
} _AdminUnsplitResponse_default_instance_;
class AdminMergeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminMergeRequest>
      _instance;
} _AdminMergeRequest_default_instance_;
class AdminMergeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminMergeResponse>
      _instance;
} _AdminMergeResponse_default_instance_;
class AdminTransferLeaseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminTransferLeaseRequest>
      _instance;
} _AdminTransferLeaseRequest_default_instance_;
class AdminTransferLeaseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminTransferLeaseResponse>
      _instance;
} _AdminTransferLeaseResponse_default_instance_;
class ReplicationChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplicationChange>
      _instance;
} _ReplicationChange_default_instance_;
class AdminChangeReplicasRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminChangeReplicasRequest>
      _instance;
} _AdminChangeReplicasRequest_default_instance_;
class AdminChangeReplicasResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminChangeReplicasResponse>
      _instance;
} _AdminChangeReplicasResponse_default_instance_;
class AdminRelocateRangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminRelocateRangeRequest>
      _instance;
} _AdminRelocateRangeRequest_default_instance_;
class AdminRelocateRangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminRelocateRangeResponse>
      _instance;
} _AdminRelocateRangeResponse_default_instance_;
class HeartbeatTxnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatTxnRequest>
      _instance;
} _HeartbeatTxnRequest_default_instance_;
class HeartbeatTxnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatTxnResponse>
      _instance;
} _HeartbeatTxnResponse_default_instance_;
class GCRequest_GCKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GCRequest_GCKey>
      _instance;
} _GCRequest_GCKey_default_instance_;
class GCRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GCRequest>
      _instance;
} _GCRequest_default_instance_;
class GCResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GCResponse>
      _instance;
} _GCResponse_default_instance_;
class PushTxnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushTxnRequest>
      _instance;
} _PushTxnRequest_default_instance_;
class PushTxnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushTxnResponse>
      _instance;
} _PushTxnResponse_default_instance_;
class RecoverTxnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecoverTxnRequest>
      _instance;
} _RecoverTxnRequest_default_instance_;
class RecoverTxnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecoverTxnResponse>
      _instance;
} _RecoverTxnResponse_default_instance_;
class QueryTxnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryTxnRequest>
      _instance;
} _QueryTxnRequest_default_instance_;
class QueryTxnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryTxnResponse>
      _instance;
} _QueryTxnResponse_default_instance_;
class QueryIntentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryIntentRequest>
      _instance;
} _QueryIntentRequest_default_instance_;
class QueryIntentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryIntentResponse>
      _instance;
} _QueryIntentResponse_default_instance_;
class ResolveIntentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResolveIntentRequest>
      _instance;
} _ResolveIntentRequest_default_instance_;
class ResolveIntentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResolveIntentResponse>
      _instance;
} _ResolveIntentResponse_default_instance_;
class ResolveIntentRangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResolveIntentRangeRequest>
      _instance;
} _ResolveIntentRangeRequest_default_instance_;
class ResolveIntentRangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResolveIntentRangeResponse>
      _instance;
} _ResolveIntentRangeResponse_default_instance_;
class MergeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MergeRequest>
      _instance;
} _MergeRequest_default_instance_;
class MergeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MergeResponse>
      _instance;
} _MergeResponse_default_instance_;
class TruncateLogRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TruncateLogRequest>
      _instance;
} _TruncateLogRequest_default_instance_;
class TruncateLogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TruncateLogResponse>
      _instance;
} _TruncateLogResponse_default_instance_;
class RequestLeaseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestLeaseRequest>
      _instance;
} _RequestLeaseRequest_default_instance_;
class TransferLeaseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferLeaseRequest>
      _instance;
} _TransferLeaseRequest_default_instance_;
class LeaseInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaseInfoRequest>
      _instance;
} _LeaseInfoRequest_default_instance_;
class LeaseInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaseInfoResponse>
      _instance;
} _LeaseInfoResponse_default_instance_;
class RequestLeaseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestLeaseResponse>
      _instance;
} _RequestLeaseResponse_default_instance_;
class ComputeChecksumRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComputeChecksumRequest>
      _instance;
} _ComputeChecksumRequest_default_instance_;
class ComputeChecksumResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComputeChecksumResponse>
      _instance;
} _ComputeChecksumResponse_default_instance_;
class ExternalStorage_LocalFilePathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalStorage_LocalFilePath>
      _instance;
} _ExternalStorage_LocalFilePath_default_instance_;
class ExternalStorage_HttpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalStorage_Http>
      _instance;
} _ExternalStorage_Http_default_instance_;
class ExternalStorage_S3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalStorage_S3>
      _instance;
} _ExternalStorage_S3_default_instance_;
class ExternalStorage_GCSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalStorage_GCS>
      _instance;
} _ExternalStorage_GCS_default_instance_;
class ExternalStorage_AzureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalStorage_Azure>
      _instance;
} _ExternalStorage_Azure_default_instance_;
class ExternalStorage_WorkloadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalStorage_Workload>
      _instance;
} _ExternalStorage_Workload_default_instance_;
class ExternalStorageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalStorage>
      _instance;
} _ExternalStorage_default_instance_;
class WriteBatchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteBatchRequest>
      _instance;
} _WriteBatchRequest_default_instance_;
class WriteBatchResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteBatchResponse>
      _instance;
} _WriteBatchResponse_default_instance_;
class FileEncryptionOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileEncryptionOptions>
      _instance;
} _FileEncryptionOptions_default_instance_;
class ExportRequest_StorageByLocalityKvEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExportRequest_StorageByLocalityKvEntry_DoNotUse>
      _instance;
} _ExportRequest_StorageByLocalityKvEntry_DoNotUse_default_instance_;
class ExportRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExportRequest>
      _instance;
} _ExportRequest_default_instance_;
class BulkOpSummary_EntryCountsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BulkOpSummary_EntryCountsEntry_DoNotUse>
      _instance;
} _BulkOpSummary_EntryCountsEntry_DoNotUse_default_instance_;
class BulkOpSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BulkOpSummary>
      _instance;
} _BulkOpSummary_default_instance_;
class ExportResponse_FileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExportResponse_File>
      _instance;
} _ExportResponse_File_default_instance_;
class ExportResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExportResponse>
      _instance;
} _ExportResponse_default_instance_;
class ImportRequest_FileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImportRequest_File>
      _instance;
} _ImportRequest_File_default_instance_;
class ImportRequest_TableRekeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImportRequest_TableRekey>
      _instance;
} _ImportRequest_TableRekey_default_instance_;
class ImportRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImportRequest>
      _instance;
} _ImportRequest_default_instance_;
class ImportResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImportResponse>
      _instance;
} _ImportResponse_default_instance_;
class AdminScatterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminScatterRequest>
      _instance;
} _AdminScatterRequest_default_instance_;
class AdminScatterResponse_RangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminScatterResponse_Range>
      _instance;
} _AdminScatterResponse_Range_default_instance_;
class AdminScatterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminScatterResponse>
      _instance;
} _AdminScatterResponse_default_instance_;
class AdminVerifyProtectedTimestampRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminVerifyProtectedTimestampRequest>
      _instance;
} _AdminVerifyProtectedTimestampRequest_default_instance_;
class AdminVerifyProtectedTimestampResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminVerifyProtectedTimestampResponse>
      _instance;
} _AdminVerifyProtectedTimestampResponse_default_instance_;
class AddSSTableRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddSSTableRequest>
      _instance;
} _AddSSTableRequest_default_instance_;
class AddSSTableResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddSSTableResponse>
      _instance;
} _AddSSTableResponse_default_instance_;
class RefreshRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RefreshRequest>
      _instance;
} _RefreshRequest_default_instance_;
class RefreshResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RefreshResponse>
      _instance;
} _RefreshResponse_default_instance_;
class RefreshRangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RefreshRangeRequest>
      _instance;
} _RefreshRangeRequest_default_instance_;
class RefreshRangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RefreshRangeResponse>
      _instance;
} _RefreshRangeResponse_default_instance_;
class SubsumeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubsumeRequest>
      _instance;
} _SubsumeRequest_default_instance_;
class SubsumeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubsumeResponse>
      _instance;
} _SubsumeResponse_default_instance_;
class RangeStatsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeStatsRequest>
      _instance;
} _RangeStatsRequest_default_instance_;
class RangeStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeStatsResponse>
      _instance;
} _RangeStatsResponse_default_instance_;
class RequestUnionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestUnion>
      _instance;
  const ::cockroach::roachpb::GetRequest* get_;
  const ::cockroach::roachpb::PutRequest* put_;
  const ::cockroach::roachpb::ConditionalPutRequest* conditional_put_;
  const ::cockroach::roachpb::IncrementRequest* increment_;
  const ::cockroach::roachpb::DeleteRequest* delete__;
  const ::cockroach::roachpb::DeleteRangeRequest* delete_range_;
  const ::cockroach::roachpb::ClearRangeRequest* clear_range_;
  const ::cockroach::roachpb::RevertRangeRequest* revert_range_;
  const ::cockroach::roachpb::ScanRequest* scan_;
  const ::cockroach::roachpb::EndTxnRequest* end_txn_;
  const ::cockroach::roachpb::AdminSplitRequest* admin_split_;
  const ::cockroach::roachpb::AdminUnsplitRequest* admin_unsplit_;
  const ::cockroach::roachpb::AdminMergeRequest* admin_merge_;
  const ::cockroach::roachpb::AdminTransferLeaseRequest* admin_transfer_lease_;
  const ::cockroach::roachpb::AdminChangeReplicasRequest* admin_change_replicas_;
  const ::cockroach::roachpb::AdminRelocateRangeRequest* admin_relocate_range_;
  const ::cockroach::roachpb::HeartbeatTxnRequest* heartbeat_txn_;
  const ::cockroach::roachpb::GCRequest* gc_;
  const ::cockroach::roachpb::PushTxnRequest* push_txn_;
  const ::cockroach::roachpb::RecoverTxnRequest* recover_txn_;
  const ::cockroach::roachpb::ResolveIntentRequest* resolve_intent_;
  const ::cockroach::roachpb::ResolveIntentRangeRequest* resolve_intent_range_;
  const ::cockroach::roachpb::MergeRequest* merge_;
  const ::cockroach::roachpb::TruncateLogRequest* truncate_log_;
  const ::cockroach::roachpb::RequestLeaseRequest* request_lease_;
  const ::cockroach::roachpb::ReverseScanRequest* reverse_scan_;
  const ::cockroach::roachpb::ComputeChecksumRequest* compute_checksum_;
  const ::cockroach::roachpb::CheckConsistencyRequest* check_consistency_;
  const ::cockroach::roachpb::InitPutRequest* init_put_;
  const ::cockroach::roachpb::TransferLeaseRequest* transfer_lease_;
  const ::cockroach::roachpb::LeaseInfoRequest* lease_info_;
  const ::cockroach::roachpb::WriteBatchRequest* write_batch_;
  const ::cockroach::roachpb::ExportRequest* export__;
  const ::cockroach::roachpb::ImportRequest* import_;
  const ::cockroach::roachpb::QueryTxnRequest* query_txn_;
  const ::cockroach::roachpb::QueryIntentRequest* query_intent_;
  const ::cockroach::roachpb::AdminScatterRequest* admin_scatter_;
  const ::cockroach::roachpb::AddSSTableRequest* add_sstable_;
  const ::cockroach::roachpb::RecomputeStatsRequest* recompute_stats_;
  const ::cockroach::roachpb::RefreshRequest* refresh_;
  const ::cockroach::roachpb::RefreshRangeRequest* refresh_range_;
  const ::cockroach::roachpb::SubsumeRequest* subsume_;
  const ::cockroach::roachpb::RangeStatsRequest* range_stats_;
  const ::cockroach::roachpb::AdminVerifyProtectedTimestampRequest* admin_verify_protected_timestamp_;
} _RequestUnion_default_instance_;
class ResponseUnionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseUnion>
      _instance;
  const ::cockroach::roachpb::GetResponse* get_;
  const ::cockroach::roachpb::PutResponse* put_;
  const ::cockroach::roachpb::ConditionalPutResponse* conditional_put_;
  const ::cockroach::roachpb::IncrementResponse* increment_;
  const ::cockroach::roachpb::DeleteResponse* delete__;
  const ::cockroach::roachpb::DeleteRangeResponse* delete_range_;
  const ::cockroach::roachpb::ClearRangeResponse* clear_range_;
  const ::cockroach::roachpb::RevertRangeResponse* revert_range_;
  const ::cockroach::roachpb::ScanResponse* scan_;
  const ::cockroach::roachpb::EndTxnResponse* end_txn_;
  const ::cockroach::roachpb::AdminSplitResponse* admin_split_;
  const ::cockroach::roachpb::AdminUnsplitResponse* admin_unsplit_;
  const ::cockroach::roachpb::AdminMergeResponse* admin_merge_;
  const ::cockroach::roachpb::AdminTransferLeaseResponse* admin_transfer_lease_;
  const ::cockroach::roachpb::AdminChangeReplicasResponse* admin_change_replicas_;
  const ::cockroach::roachpb::AdminRelocateRangeResponse* admin_relocate_range_;
  const ::cockroach::roachpb::HeartbeatTxnResponse* heartbeat_txn_;
  const ::cockroach::roachpb::GCResponse* gc_;
  const ::cockroach::roachpb::PushTxnResponse* push_txn_;
  const ::cockroach::roachpb::RecoverTxnResponse* recover_txn_;
  const ::cockroach::roachpb::ResolveIntentResponse* resolve_intent_;
  const ::cockroach::roachpb::ResolveIntentRangeResponse* resolve_intent_range_;
  const ::cockroach::roachpb::MergeResponse* merge_;
  const ::cockroach::roachpb::TruncateLogResponse* truncate_log_;
  const ::cockroach::roachpb::RequestLeaseResponse* request_lease_;
  const ::cockroach::roachpb::ReverseScanResponse* reverse_scan_;
  const ::cockroach::roachpb::ComputeChecksumResponse* compute_checksum_;
  const ::cockroach::roachpb::CheckConsistencyResponse* check_consistency_;
  const ::cockroach::roachpb::InitPutResponse* init_put_;
  const ::cockroach::roachpb::LeaseInfoResponse* lease_info_;
  const ::cockroach::roachpb::WriteBatchResponse* write_batch_;
  const ::cockroach::roachpb::ExportResponse* export__;
  const ::cockroach::roachpb::ImportResponse* import_;
  const ::cockroach::roachpb::QueryTxnResponse* query_txn_;
  const ::cockroach::roachpb::QueryIntentResponse* query_intent_;
  const ::cockroach::roachpb::AdminScatterResponse* admin_scatter_;
  const ::cockroach::roachpb::AddSSTableResponse* add_sstable_;
  const ::cockroach::roachpb::RecomputeStatsResponse* recompute_stats_;
  const ::cockroach::roachpb::RefreshResponse* refresh_;
  const ::cockroach::roachpb::RefreshRangeResponse* refresh_range_;
  const ::cockroach::roachpb::SubsumeResponse* subsume_;
  const ::cockroach::roachpb::RangeStatsResponse* range_stats_;
  const ::cockroach::roachpb::AdminVerifyProtectedTimestampResponse* admin_verify_protected_timestamp_;
} _ResponseUnion_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class BatchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchRequest>
      _instance;
} _BatchRequest_default_instance_;
class BatchResponse_HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchResponse_Header>
      _instance;
} _BatchResponse_Header_default_instance_;
class BatchResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchResponse>
      _instance;
} _BatchResponse_default_instance_;
class RangeFeedRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeFeedRequest>
      _instance;
} _RangeFeedRequest_default_instance_;
class RangeFeedValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeFeedValue>
      _instance;
} _RangeFeedValue_default_instance_;
class RangeFeedCheckpointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeFeedCheckpoint>
      _instance;
} _RangeFeedCheckpoint_default_instance_;
class RangeFeedErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeFeedError>
      _instance;
} _RangeFeedError_default_instance_;
class RangeFeedEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeFeedEvent>
      _instance;
} _RangeFeedEvent_default_instance_;
}  // namespace roachpb
}  // namespace cockroach
namespace protobuf_roachpb_2fapi_2eproto {
static void InitDefaultsRangeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeInfo_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RangeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRangeInfo}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base,}};

static void InitDefaultsRequestHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RequestHeader_default_instance_;
    new (ptr) ::cockroach::roachpb::RequestHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RequestHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestHeader}, {}};

static void InitDefaultsResponseHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ResponseHeader_default_instance_;
    new (ptr) ::cockroach::roachpb::ResponseHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ResponseHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ResponseHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsResponseHeader}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeInfo.base,}};

static void InitDefaultsGetRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_GetRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::GetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::GetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsGetResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_GetResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::GetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::GetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsPutRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_PutRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::PutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::PutRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PutRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPutRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsPutResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_PutResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::PutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::PutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PutResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPutResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsConditionalPutRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ConditionalPutRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ConditionalPutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ConditionalPutRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalPutRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalPutRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsConditionalPutResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ConditionalPutResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ConditionalPutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ConditionalPutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConditionalPutResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConditionalPutResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsInitPutRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_InitPutRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::InitPutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::InitPutRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InitPutRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInitPutRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsInitPutResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_InitPutResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::InitPutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::InitPutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InitPutResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInitPutResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsIncrementRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_IncrementRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::IncrementRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::IncrementRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IncrementRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIncrementRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsIncrementResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_IncrementResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::IncrementResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::IncrementResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IncrementResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIncrementResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsDeleteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_DeleteRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::DeleteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::DeleteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeleteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeleteRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsDeleteResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_DeleteResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::DeleteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::DeleteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeleteResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeleteResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsDeleteRangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_DeleteRangeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::DeleteRangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::DeleteRangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeleteRangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeleteRangeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsDeleteRangeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_DeleteRangeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::DeleteRangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::DeleteRangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeleteRangeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeleteRangeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsClearRangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ClearRangeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ClearRangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ClearRangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClearRangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClearRangeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsClearRangeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ClearRangeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ClearRangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ClearRangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClearRangeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClearRangeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsRevertRangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RevertRangeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::RevertRangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RevertRangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RevertRangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRevertRangeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsRevertRangeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RevertRangeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::RevertRangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RevertRangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RevertRangeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRevertRangeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsScanRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ScanRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ScanRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ScanRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScanRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScanRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsScanResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ScanResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ScanResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ScanResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ScanResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsScanResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_KeyValue.base,}};

static void InitDefaultsReverseScanRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ReverseScanRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ReverseScanRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ReverseScanRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReverseScanRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReverseScanRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsReverseScanResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ReverseScanResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ReverseScanResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ReverseScanResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReverseScanResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReverseScanResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_KeyValue.base,}};

static void InitDefaultsCheckConsistencyRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_CheckConsistencyRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::CheckConsistencyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::CheckConsistencyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CheckConsistencyRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCheckConsistencyRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,}};

static void InitDefaultsCheckConsistencyResponse_Result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_CheckConsistencyResponse_Result_default_instance_;
    new (ptr) ::cockroach::roachpb::CheckConsistencyResponse_Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::CheckConsistencyResponse_Result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckConsistencyResponse_Result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckConsistencyResponse_Result}, {}};

static void InitDefaultsCheckConsistencyResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_CheckConsistencyResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::CheckConsistencyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::CheckConsistencyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CheckConsistencyResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCheckConsistencyResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyResponse_Result.base,}};

static void InitDefaultsRecomputeStatsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RecomputeStatsRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::RecomputeStatsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RecomputeStatsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RecomputeStatsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRecomputeStatsRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsRecomputeStatsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RecomputeStatsResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::RecomputeStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RecomputeStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecomputeStatsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecomputeStatsResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_MVCCStatsDelta.base,}};

static void InitDefaultsEndTxnRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_EndTxnRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::EndTxnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::EndTxnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_EndTxnRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsEndTxnRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_InternalCommitTrigger.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base,}};

static void InitDefaultsEndTxnResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_EndTxnResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::EndTxnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::EndTxnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EndTxnResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEndTxnResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsAdminSplitRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminSplitRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminSplitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminSplitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AdminSplitRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdminSplitRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsAdminSplitResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminSplitResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminSplitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminSplitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminSplitResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminSplitResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsAdminUnsplitRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminUnsplitRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminUnsplitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminUnsplitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminUnsplitRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminUnsplitRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsAdminUnsplitResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminUnsplitResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminUnsplitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminUnsplitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminUnsplitResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminUnsplitResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsAdminMergeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminMergeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminMergeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminMergeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminMergeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminMergeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsAdminMergeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminMergeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminMergeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminMergeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminMergeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminMergeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsAdminTransferLeaseRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminTransferLeaseRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminTransferLeaseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminTransferLeaseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminTransferLeaseRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminTransferLeaseRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsAdminTransferLeaseResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminTransferLeaseResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminTransferLeaseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminTransferLeaseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminTransferLeaseResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminTransferLeaseResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsReplicationChange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ReplicationChange_default_instance_;
    new (ptr) ::cockroach::roachpb::ReplicationChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ReplicationChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReplicationChange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReplicationChange}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicationTarget.base,}};

static void InitDefaultsAdminChangeReplicasRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminChangeReplicasRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminChangeReplicasRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminChangeReplicasRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_AdminChangeReplicasRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsAdminChangeReplicasRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicationTarget.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ReplicationChange.base,}};

static void InitDefaultsAdminChangeReplicasResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminChangeReplicasResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminChangeReplicasResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminChangeReplicasResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AdminChangeReplicasResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdminChangeReplicasResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,}};

static void InitDefaultsAdminRelocateRangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminRelocateRangeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminRelocateRangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminRelocateRangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AdminRelocateRangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdminRelocateRangeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicationTarget.base,}};

static void InitDefaultsAdminRelocateRangeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminRelocateRangeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminRelocateRangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminRelocateRangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminRelocateRangeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminRelocateRangeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsHeartbeatTxnRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_HeartbeatTxnRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::HeartbeatTxnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::HeartbeatTxnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HeartbeatTxnRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHeartbeatTxnRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsHeartbeatTxnResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_HeartbeatTxnResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::HeartbeatTxnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::HeartbeatTxnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HeartbeatTxnResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeartbeatTxnResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsGCRequest_GCKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_GCRequest_GCKey_default_instance_;
    new (ptr) ::cockroach::roachpb::GCRequest_GCKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::GCRequest_GCKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GCRequest_GCKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGCRequest_GCKey}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsGCRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_GCRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::GCRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::GCRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GCRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGCRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_GCRequest_GCKey.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsGCResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_GCResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::GCResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::GCResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GCResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGCResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsPushTxnRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_PushTxnRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::PushTxnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::PushTxnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_PushTxnRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPushTxnRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsPushTxnResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_PushTxnResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::PushTxnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::PushTxnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PushTxnResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPushTxnResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,}};

static void InitDefaultsRecoverTxnRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RecoverTxnRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::RecoverTxnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RecoverTxnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecoverTxnRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecoverTxnRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,}};

static void InitDefaultsRecoverTxnResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RecoverTxnResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::RecoverTxnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RecoverTxnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecoverTxnResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecoverTxnResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,}};

static void InitDefaultsQueryTxnRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_QueryTxnRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::QueryTxnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::QueryTxnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_QueryTxnRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsQueryTxnRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,}};

static void InitDefaultsQueryTxnResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_QueryTxnResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::QueryTxnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::QueryTxnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_QueryTxnResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsQueryTxnResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,}};

static void InitDefaultsQueryIntentRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_QueryIntentRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::QueryIntentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::QueryIntentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_QueryIntentRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsQueryIntentRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,}};

static void InitDefaultsQueryIntentResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_QueryIntentResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::QueryIntentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::QueryIntentResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QueryIntentResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQueryIntentResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsResolveIntentRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ResolveIntentRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ResolveIntentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ResolveIntentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ResolveIntentRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsResolveIntentRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_IgnoredSeqNumRange.base,}};

static void InitDefaultsResolveIntentResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ResolveIntentResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ResolveIntentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ResolveIntentResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResolveIntentResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResolveIntentResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsResolveIntentRangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ResolveIntentRangeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ResolveIntentRangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ResolveIntentRangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ResolveIntentRangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsResolveIntentRangeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_storage_2fenginepb_2fmvcc3_2eproto::scc_info_IgnoredSeqNumRange.base,}};

static void InitDefaultsResolveIntentRangeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ResolveIntentRangeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ResolveIntentRangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ResolveIntentRangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResolveIntentRangeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResolveIntentRangeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsMergeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_MergeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::MergeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::MergeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MergeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMergeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsMergeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_MergeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::MergeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::MergeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MergeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMergeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsTruncateLogRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TruncateLogRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::TruncateLogRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TruncateLogRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TruncateLogRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTruncateLogRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsTruncateLogResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TruncateLogResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::TruncateLogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TruncateLogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TruncateLogResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTruncateLogResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsRequestLeaseRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RequestLeaseRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::RequestLeaseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RequestLeaseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RequestLeaseRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRequestLeaseRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsTransferLeaseRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TransferLeaseRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::TransferLeaseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TransferLeaseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TransferLeaseRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTransferLeaseRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base,}};

static void InitDefaultsLeaseInfoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_LeaseInfoRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::LeaseInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::LeaseInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeaseInfoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeaseInfoRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsLeaseInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_LeaseInfoResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::LeaseInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::LeaseInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LeaseInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLeaseInfoResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base,}};

static void InitDefaultsRequestLeaseResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RequestLeaseResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::RequestLeaseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RequestLeaseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestLeaseResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestLeaseResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsComputeChecksumRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ComputeChecksumRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ComputeChecksumRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ComputeChecksumRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ComputeChecksumRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsComputeChecksumRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,}};

static void InitDefaultsComputeChecksumResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ComputeChecksumResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ComputeChecksumResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ComputeChecksumResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ComputeChecksumResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsComputeChecksumResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsExternalStorage_LocalFilePath() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExternalStorage_LocalFilePath_default_instance_;
    new (ptr) ::cockroach::roachpb::ExternalStorage_LocalFilePath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExternalStorage_LocalFilePath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_LocalFilePath =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExternalStorage_LocalFilePath}, {}};

static void InitDefaultsExternalStorage_Http() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExternalStorage_Http_default_instance_;
    new (ptr) ::cockroach::roachpb::ExternalStorage_Http();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExternalStorage_Http::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_Http =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExternalStorage_Http}, {}};

static void InitDefaultsExternalStorage_S3() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExternalStorage_S3_default_instance_;
    new (ptr) ::cockroach::roachpb::ExternalStorage_S3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExternalStorage_S3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_S3 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExternalStorage_S3}, {}};

static void InitDefaultsExternalStorage_GCS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExternalStorage_GCS_default_instance_;
    new (ptr) ::cockroach::roachpb::ExternalStorage_GCS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExternalStorage_GCS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_GCS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExternalStorage_GCS}, {}};

static void InitDefaultsExternalStorage_Azure() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExternalStorage_Azure_default_instance_;
    new (ptr) ::cockroach::roachpb::ExternalStorage_Azure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExternalStorage_Azure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_Azure =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExternalStorage_Azure}, {}};

static void InitDefaultsExternalStorage_Workload() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExternalStorage_Workload_default_instance_;
    new (ptr) ::cockroach::roachpb::ExternalStorage_Workload();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExternalStorage_Workload::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExternalStorage_Workload =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExternalStorage_Workload}, {}};

static void InitDefaultsExternalStorage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExternalStorage_default_instance_;
    new (ptr) ::cockroach::roachpb::ExternalStorage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExternalStorage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ExternalStorage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsExternalStorage}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_LocalFilePath.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Http.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_GCS.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_S3.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Azure.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Workload.base,}};

static void InitDefaultsWriteBatchRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_WriteBatchRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::WriteBatchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::WriteBatchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WriteBatchRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWriteBatchRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,}};

static void InitDefaultsWriteBatchResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_WriteBatchResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::WriteBatchResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::WriteBatchResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WriteBatchResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWriteBatchResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsFileEncryptionOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_FileEncryptionOptions_default_instance_;
    new (ptr) ::cockroach::roachpb::FileEncryptionOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::FileEncryptionOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileEncryptionOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileEncryptionOptions}, {}};

static void InitDefaultsExportRequest_StorageByLocalityKvEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExportRequest_StorageByLocalityKvEntry_DoNotUse_default_instance_;
    new (ptr) ::cockroach::roachpb::ExportRequest_StorageByLocalityKvEntry_DoNotUse();
  }
  ::cockroach::roachpb::ExportRequest_StorageByLocalityKvEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExportRequest_StorageByLocalityKvEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExportRequest_StorageByLocalityKvEntry_DoNotUse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage.base,}};

static void InitDefaultsExportRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExportRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ExportRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExportRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ExportRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsExportRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExportRequest_StorageByLocalityKvEntry_DoNotUse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_FileEncryptionOptions.base,}};

static void InitDefaultsBulkOpSummary_EntryCountsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_BulkOpSummary_EntryCountsEntry_DoNotUse_default_instance_;
    new (ptr) ::cockroach::roachpb::BulkOpSummary_EntryCountsEntry_DoNotUse();
  }
  ::cockroach::roachpb::BulkOpSummary_EntryCountsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BulkOpSummary_EntryCountsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBulkOpSummary_EntryCountsEntry_DoNotUse}, {}};

static void InitDefaultsBulkOpSummary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_BulkOpSummary_default_instance_;
    new (ptr) ::cockroach::roachpb::BulkOpSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::BulkOpSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BulkOpSummary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBulkOpSummary}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_BulkOpSummary_EntryCountsEntry_DoNotUse.base,}};

static void InitDefaultsExportResponse_File() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExportResponse_File_default_instance_;
    new (ptr) ::cockroach::roachpb::ExportResponse_File();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExportResponse_File::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ExportResponse_File =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsExportResponse_File}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_BulkOpSummary.base,}};

static void InitDefaultsExportResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ExportResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ExportResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ExportResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ExportResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsExportResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExportResponse_File.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsImportRequest_File() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ImportRequest_File_default_instance_;
    new (ptr) ::cockroach::roachpb::ImportRequest_File();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ImportRequest_File::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ImportRequest_File =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImportRequest_File}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage.base,}};

static void InitDefaultsImportRequest_TableRekey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ImportRequest_TableRekey_default_instance_;
    new (ptr) ::cockroach::roachpb::ImportRequest_TableRekey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ImportRequest_TableRekey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ImportRequest_TableRekey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImportRequest_TableRekey}, {}};

static void InitDefaultsImportRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ImportRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::ImportRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ImportRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ImportRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsImportRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest_File.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest_TableRekey.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_FileEncryptionOptions.base,}};

static void InitDefaultsImportResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ImportResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::ImportResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ImportResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ImportResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsImportResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_BulkOpSummary.base,}};

static void InitDefaultsAdminScatterRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminScatterRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminScatterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminScatterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminScatterRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminScatterRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsAdminScatterResponse_Range() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminScatterResponse_Range_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminScatterResponse_Range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminScatterResponse_Range::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdminScatterResponse_Range =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdminScatterResponse_Range}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,}};

static void InitDefaultsAdminScatterResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminScatterResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminScatterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminScatterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AdminScatterResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdminScatterResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterResponse_Range.base,}};

static void InitDefaultsAdminVerifyProtectedTimestampRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminVerifyProtectedTimestampRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminVerifyProtectedTimestampRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminVerifyProtectedTimestampRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AdminVerifyProtectedTimestampRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdminVerifyProtectedTimestampRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsAdminVerifyProtectedTimestampResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AdminVerifyProtectedTimestampResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AdminVerifyProtectedTimestampResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AdminVerifyProtectedTimestampResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AdminVerifyProtectedTimestampResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdminVerifyProtectedTimestampResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,}};

static void InitDefaultsAddSSTableRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AddSSTableRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::AddSSTableRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AddSSTableRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddSSTableRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddSSTableRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc_2eproto::scc_info_MVCCStats.base,}};

static void InitDefaultsAddSSTableResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AddSSTableResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::AddSSTableResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AddSSTableResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddSSTableResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddSSTableResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsRefreshRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RefreshRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::RefreshRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RefreshRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RefreshRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRefreshRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsRefreshResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RefreshResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::RefreshResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RefreshResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RefreshResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRefreshResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsRefreshRangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RefreshRangeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::RefreshRangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RefreshRangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RefreshRangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRefreshRangeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsRefreshRangeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RefreshRangeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::RefreshRangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RefreshRangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RefreshRangeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRefreshRangeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,}};

static void InitDefaultsSubsumeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_SubsumeRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::SubsumeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::SubsumeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SubsumeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSubsumeRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,}};

static void InitDefaultsSubsumeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_SubsumeResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::SubsumeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::SubsumeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SubsumeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSubsumeResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc_2eproto::scc_info_MVCCStats.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsRangeStatsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeStatsRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeStatsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeStatsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RangeStatsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRangeStatsRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base,}};

static void InitDefaultsRangeStatsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeStatsResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RangeStatsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRangeStatsResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base,
      &protobuf_storage_2fenginepb_2fmvcc_2eproto::scc_info_MVCCStats.base,}};

static void InitDefaultsRequestUnion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RequestUnion_default_instance_;
    new (ptr) ::cockroach::roachpb::RequestUnion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RequestUnion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<44> scc_info_RequestUnion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 44, InitDefaultsRequestUnion}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_GetRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_PutRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ConditionalPutRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_IncrementRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRangeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ClearRangeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RevertRangeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ScanRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_EndTxnRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminSplitRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminUnsplitRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminMergeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminTransferLeaseRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminChangeReplicasRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminRelocateRangeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_HeartbeatTxnRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_GCRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_PushTxnRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RecoverTxnRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRangeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_MergeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_TruncateLogRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestLeaseRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ReverseScanRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ComputeChecksumRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_InitPutRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_TransferLeaseRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_LeaseInfoRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_WriteBatchRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExportRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_QueryTxnRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_QueryIntentRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AddSSTableRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RecomputeStatsRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRangeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_SubsumeRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeStatsRequest.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminVerifyProtectedTimestampRequest.base,}};

static void InitDefaultsResponseUnion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ResponseUnion_default_instance_;
    new (ptr) ::cockroach::roachpb::ResponseUnion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ResponseUnion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<43> scc_info_ResponseUnion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 43, InitDefaultsResponseUnion}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_GetResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_PutResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ConditionalPutResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_IncrementResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_DeleteResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRangeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ClearRangeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RevertRangeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ScanResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_EndTxnResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminSplitResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminUnsplitResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminMergeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminTransferLeaseResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminChangeReplicasResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminRelocateRangeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_HeartbeatTxnResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_GCResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_PushTxnResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RecoverTxnResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRangeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_MergeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_TruncateLogResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestLeaseResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ReverseScanResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ComputeChecksumResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_InitPutResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_LeaseInfoResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_WriteBatchResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExportResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ImportResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_QueryTxnResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_QueryIntentResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AddSSTableResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RecomputeStatsResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RefreshResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRangeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_SubsumeResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeStatsResponse.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminVerifyProtectedTimestampResponse.base,}};

static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_Header_default_instance_;
    new (ptr) ::cockroach::roachpb::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsHeader}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,}};

static void InitDefaultsBatchRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_BatchRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::BatchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::BatchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BatchRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBatchRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_Header.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestUnion.base,}};

static void InitDefaultsBatchResponse_Header() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_BatchResponse_Header_default_instance_;
    new (ptr) ::cockroach::roachpb::BatchResponse_Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::BatchResponse_Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_BatchResponse_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsBatchResponse_Header}, {
      &protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,
      &protobuf_util_2ftracing_2frecorded_5fspan_2eproto::scc_info_RecordedSpan.base,}};

static void InitDefaultsBatchResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_BatchResponse_default_instance_;
    new (ptr) ::cockroach::roachpb::BatchResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::BatchResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BatchResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBatchResponse}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_BatchResponse_Header.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseUnion.base,}};

static void InitDefaultsRangeFeedRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeFeedRequest_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeFeedRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeFeedRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RangeFeedRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRangeFeedRequest}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_Header.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,}};

static void InitDefaultsRangeFeedValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeFeedValue_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeFeedValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeFeedValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RangeFeedValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRangeFeedValue}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsRangeFeedCheckpoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeFeedCheckpoint_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeFeedCheckpoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeFeedCheckpoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RangeFeedCheckpoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRangeFeedCheckpoint}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsRangeFeedError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeFeedError_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeFeedError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeFeedError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RangeFeedError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRangeFeedError}, {
      &protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base,}};

static void InitDefaultsRangeFeedEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeFeedEvent_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeFeedEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeFeedEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RangeFeedEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRangeFeedEvent}, {
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedValue.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedCheckpoint.base,
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedError.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RangeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalPutRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalPutResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitPutRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitPutResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IncrementRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IncrementResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRangeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClearRangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClearRangeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RevertRangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RevertRangeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScanRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScanResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReverseScanRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReverseScanResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckConsistencyRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckConsistencyResponse_Result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckConsistencyResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecomputeStatsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecomputeStatsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EndTxnRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EndTxnResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminSplitRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminSplitResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminUnsplitRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminUnsplitResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminMergeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminMergeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminTransferLeaseRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminTransferLeaseResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplicationChange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminChangeReplicasRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminChangeReplicasResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminRelocateRangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminRelocateRangeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartbeatTxnRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartbeatTxnResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GCRequest_GCKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GCRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GCResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PushTxnRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PushTxnResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecoverTxnRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecoverTxnResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryTxnRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryTxnResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryIntentRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryIntentResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResolveIntentRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResolveIntentResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResolveIntentRangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResolveIntentRangeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MergeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MergeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TruncateLogRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TruncateLogResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestLeaseRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferLeaseRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaseInfoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaseInfoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestLeaseResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComputeChecksumRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComputeChecksumResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalStorage_LocalFilePath.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalStorage_Http.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalStorage_S3.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalStorage_GCS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalStorage_Azure.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalStorage_Workload.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalStorage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteBatchRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteBatchResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileEncryptionOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExportRequest_StorageByLocalityKvEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExportRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BulkOpSummary_EntryCountsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BulkOpSummary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExportResponse_File.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExportResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImportRequest_File.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImportRequest_TableRekey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImportRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImportResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminScatterRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminScatterResponse_Range.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminScatterResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminVerifyProtectedTimestampRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminVerifyProtectedTimestampResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddSSTableRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddSSTableResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RefreshRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RefreshResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RefreshRangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RefreshRangeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubsumeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubsumeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeStatsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeStatsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestUnion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseUnion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchResponse_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeFeedRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeFeedValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeFeedCheckpoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeFeedError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeFeedEvent.base);
}

}  // namespace protobuf_roachpb_2fapi_2eproto
namespace cockroach {
namespace roachpb {
bool ResponseHeader_ResumeReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseHeader_ResumeReason ResponseHeader::RESUME_UNKNOWN;
const ResponseHeader_ResumeReason ResponseHeader::RESUME_KEY_LIMIT;
const ResponseHeader_ResumeReason ResponseHeader::ResumeReason_MIN;
const ResponseHeader_ResumeReason ResponseHeader::ResumeReason_MAX;
const int ResponseHeader::ResumeReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CheckConsistencyResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CheckConsistencyResponse_Status CheckConsistencyResponse::RANGE_INDETERMINATE;
const CheckConsistencyResponse_Status CheckConsistencyResponse::RANGE_INCONSISTENT;
const CheckConsistencyResponse_Status CheckConsistencyResponse::RANGE_CONSISTENT;
const CheckConsistencyResponse_Status CheckConsistencyResponse::RANGE_CONSISTENT_STATS_ESTIMATED;
const CheckConsistencyResponse_Status CheckConsistencyResponse::RANGE_CONSISTENT_STATS_INCORRECT;
const CheckConsistencyResponse_Status CheckConsistencyResponse::Status_MIN;
const CheckConsistencyResponse_Status CheckConsistencyResponse::Status_MAX;
const int CheckConsistencyResponse::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ReadConsistencyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ScanFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool ChecksumMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool PushTxnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ExternalStorageProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool MVCCFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RangeInfo::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeInfo_default_instance_._instance.get_mutable()->desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  ::cockroach::roachpb::_RangeInfo_default_instance_._instance.get_mutable()->lease_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
}
void RangeInfo::clear_desc() {
  if (GetArenaNoVirtual() == NULL && desc_ != NULL) {
    delete desc_;
  }
  desc_ = NULL;
}
void RangeInfo::clear_lease() {
  if (GetArenaNoVirtual() == NULL && lease_ != NULL) {
    delete lease_;
  }
  lease_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeInfo::kDescFieldNumber;
const int RangeInfo::kLeaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeInfo::RangeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeInfo)
}
RangeInfo::RangeInfo(const RangeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_desc()) {
    desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.desc_);
  } else {
    desc_ = NULL;
  }
  if (from.has_lease()) {
    lease_ = new ::cockroach::roachpb::Lease(*from.lease_);
  } else {
    lease_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeInfo)
}

void RangeInfo::SharedCtor() {
  ::memset(&desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&desc_)) + sizeof(lease_));
}

RangeInfo::~RangeInfo() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeInfo)
  SharedDtor();
}

void RangeInfo::SharedDtor() {
  if (this != internal_default_instance()) delete desc_;
  if (this != internal_default_instance()) delete lease_;
}

void RangeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeInfo& RangeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RangeInfo.base);
  return *internal_default_instance();
}


void RangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && desc_ != NULL) {
    delete desc_;
  }
  desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && lease_ != NULL) {
    delete lease_;
  }
  lease_ = NULL;
  _internal_metadata_.Clear();
}

bool RangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeInfo)
  return false;
#undef DO_
}

void RangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_desc(), output);
  }

  if (this->has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_lease(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeInfo)
}

size_t RangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeInfo)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *desc_);
  }

  if (this->has_lease()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeInfo*>(&from));
}

void RangeInfo::MergeFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_desc()) {
    mutable_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.desc());
  }
  if (from.has_lease()) {
    mutable_lease()->::cockroach::roachpb::Lease::MergeFrom(from.lease());
  }
}

void RangeInfo::CopyFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeInfo::IsInitialized() const {
  return true;
}

void RangeInfo::Swap(RangeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeInfo::InternalSwap(RangeInfo* other) {
  using std::swap;
  swap(desc_, other->desc_);
  swap(lease_, other->lease_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeInfo::GetTypeName() const {
  return "cockroach.roachpb.RangeInfo";
}


// ===================================================================

void RequestHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kKeyFieldNumber;
const int RequestHeader::kEndKeyFieldNumber;
const int RequestHeader::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = 0;
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeader& RequestHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RequestHeader.base);
  return *internal_default_instance();
}


void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = 0;
  _internal_metadata_.Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RequestHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sequence(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RequestHeader)
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RequestHeader)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestHeader*>(&from));
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_key_.Swap(&other->end_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RequestHeader::GetTypeName() const {
  return "cockroach.roachpb.RequestHeader";
}


// ===================================================================

void ResponseHeader::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ResponseHeader_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
  ::cockroach::roachpb::_ResponseHeader_default_instance_._instance.get_mutable()->resume_span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
}
void ResponseHeader::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
void ResponseHeader::clear_resume_span() {
  if (GetArenaNoVirtual() == NULL && resume_span_ != NULL) {
    delete resume_span_;
  }
  resume_span_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kTxnFieldNumber;
const int ResponseHeader::kResumeSpanFieldNumber;
const int ResponseHeader::kResumeReasonFieldNumber;
const int ResponseHeader::kNumKeysFieldNumber;
const int ResponseHeader::kNumBytesFieldNumber;
const int ResponseHeader::kRangeInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      range_infos_(from.range_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_txn()) {
    txn_ = new ::cockroach::roachpb::Transaction(*from.txn_);
  } else {
    txn_ = NULL;
  }
  if (from.has_resume_span()) {
    resume_span_ = new ::cockroach::roachpb::Span(*from.resume_span_);
  } else {
    resume_span_ = NULL;
  }
  ::memcpy(&num_keys_, &from.num_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_bytes_) -
    reinterpret_cast<char*>(&num_keys_)) + sizeof(num_bytes_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::memset(&txn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bytes_) -
      reinterpret_cast<char*>(&txn_)) + sizeof(num_bytes_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != internal_default_instance()) delete txn_;
  if (this != internal_default_instance()) delete resume_span_;
}

void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseHeader& ResponseHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ResponseHeader.base);
  return *internal_default_instance();
}


void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_infos_.Clear();
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  if (GetArenaNoVirtual() == NULL && resume_span_ != NULL) {
    delete resume_span_;
  }
  resume_span_ = NULL;
  ::memset(&num_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bytes_) -
      reinterpret_cast<char*>(&num_keys_)) + sizeof(num_bytes_));
  _internal_metadata_.Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ResponseHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.Transaction txn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.Span resume_span = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resume_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_keys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_range_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ResponseHeader.ResumeReason resume_reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resume_reason(static_cast< ::cockroach::roachpb::ResponseHeader_ResumeReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_bytes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.Transaction txn = 3;
  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_txn(), output);
  }

  // .cockroach.roachpb.Span resume_span = 4;
  if (this->has_resume_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_resume_span(), output);
  }

  // int64 num_keys = 5;
  if (this->num_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num_keys(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->range_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6,
      this->range_infos(static_cast<int>(i)),
      output);
  }

  // .cockroach.roachpb.ResponseHeader.ResumeReason resume_reason = 7;
  if (this->resume_reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->resume_reason(), output);
  }

  // int64 num_bytes = 8;
  if (this->num_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->num_bytes(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ResponseHeader)
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ResponseHeader)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->range_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->range_infos(static_cast<int>(i)));
    }
  }

  // .cockroach.roachpb.Transaction txn = 3;
  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // .cockroach.roachpb.Span resume_span = 4;
  if (this->has_resume_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resume_span_);
  }

  // int64 num_keys = 5;
  if (this->num_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_keys());
  }

  // .cockroach.roachpb.ResponseHeader.ResumeReason resume_reason = 7;
  if (this->resume_reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resume_reason());
  }

  // int64 num_bytes = 8;
  if (this->num_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseHeader*>(&from));
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_infos_.MergeFrom(from.range_infos_);
  if (from.has_txn()) {
    mutable_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.txn());
  }
  if (from.has_resume_span()) {
    mutable_resume_span()->::cockroach::roachpb::Span::MergeFrom(from.resume_span());
  }
  if (from.num_keys() != 0) {
    set_num_keys(from.num_keys());
  }
  if (from.resume_reason() != 0) {
    set_resume_reason(from.resume_reason());
  }
  if (from.num_bytes() != 0) {
    set_num_bytes(from.num_bytes());
  }
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  CastToBase(&range_infos_)->InternalSwap(CastToBase(&other->range_infos_));
  swap(txn_, other->txn_);
  swap(resume_span_, other->resume_span_);
  swap(num_keys_, other->num_keys_);
  swap(resume_reason_, other->resume_reason_);
  swap(num_bytes_, other->num_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ResponseHeader::GetTypeName() const {
  return "cockroach.roachpb.ResponseHeader";
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_GetRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_GetRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.GetRequest)
}

void GetRequest::SharedCtor() {
  header_ = NULL;
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_GetRequest.base);
  return *internal_default_instance();
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.GetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.GetRequest)
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.GetRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRequest*>(&from));
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GetRequest::GetTypeName() const {
  return "cockroach.roachpb.GetRequest";
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_GetResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_GetResponse_default_instance_._instance.get_mutable()->value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
  ::cockroach::roachpb::_GetResponse_default_instance_._instance.get_mutable()->intent_value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
}
void GetResponse::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
void GetResponse::clear_intent_value() {
  if (GetArenaNoVirtual() == NULL && intent_value_ != NULL) {
    delete intent_value_;
  }
  intent_value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kHeaderFieldNumber;
const int GetResponse::kValueFieldNumber;
const int GetResponse::kIntentValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_GetResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::cockroach::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_intent_value()) {
    intent_value_ = new ::cockroach::roachpb::Value(*from.intent_value_);
  } else {
    intent_value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.GetResponse)
}

void GetResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intent_value_) -
      reinterpret_cast<char*>(&header_)) + sizeof(intent_value_));
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete intent_value_;
}

void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_GetResponse.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && intent_value_ != NULL) {
    delete intent_value_;
  }
  intent_value_ = NULL;
  _internal_metadata_.Clear();
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.GetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.Value value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.Value intent_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intent_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // .cockroach.roachpb.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  // .cockroach.roachpb.Value intent_value = 3;
  if (this->has_intent_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_intent_value(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.GetResponse)
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.GetResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .cockroach.roachpb.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .cockroach.roachpb.Value intent_value = 3;
  if (this->has_intent_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *intent_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetResponse*>(&from));
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_value()) {
    mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
  }
  if (from.has_intent_value()) {
    mutable_intent_value()->::cockroach::roachpb::Value::MergeFrom(from.intent_value());
  }
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(value_, other->value_);
  swap(intent_value_, other->intent_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GetResponse::GetTypeName() const {
  return "cockroach.roachpb.GetResponse";
}


// ===================================================================

void PutRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_PutRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_PutRequest_default_instance_._instance.get_mutable()->value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
}
void PutRequest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kHeaderFieldNumber;
const int PutRequest::kValueFieldNumber;
const int PutRequest::kInlineFieldNumber;
const int PutRequest::kBlindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_PutRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::cockroach::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  ::memcpy(&inline__, &from.inline__,
    static_cast<size_t>(reinterpret_cast<char*>(&blind_) -
    reinterpret_cast<char*>(&inline__)) + sizeof(blind_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.PutRequest)
}

void PutRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blind_) -
      reinterpret_cast<char*>(&header_)) + sizeof(blind_));
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete value_;
}

void PutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutRequest& PutRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_PutRequest.base);
  return *internal_default_instance();
}


void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  ::memset(&inline__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blind_) -
      reinterpret_cast<char*>(&inline__)) + sizeof(blind_));
  _internal_metadata_.Clear();
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.PutRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inline__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blind = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  // bool inline = 3;
  if (this->inline_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inline_(), output);
  }

  // bool blind = 4;
  if (this->blind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blind(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.PutRequest)
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.PutRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // bool inline = 3;
  if (this->inline_() != 0) {
    total_size += 1 + 1;
  }

  // bool blind = 4;
  if (this->blind() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PutRequest*>(&from));
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_value()) {
    mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
  }
  if (from.inline_() != 0) {
    set_inline_(from.inline_());
  }
  if (from.blind() != 0) {
    set_blind(from.blind());
  }
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(value_, other->value_);
  swap(inline__, other->inline__);
  swap(blind_, other->blind_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PutRequest::GetTypeName() const {
  return "cockroach.roachpb.PutRequest";
}


// ===================================================================

void PutResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_PutResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_PutResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.PutResponse)
}
PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.PutResponse)
}

void PutResponse::SharedCtor() {
  header_ = NULL;
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutResponse& PutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_PutResponse.base);
  return *internal_default_instance();
}


void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.PutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.PutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.PutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.PutResponse)
}

size_t PutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.PutResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PutResponse*>(&from));
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {
  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PutResponse::GetTypeName() const {
  return "cockroach.roachpb.PutResponse";
}


// ===================================================================

void ConditionalPutRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ConditionalPutRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_ConditionalPutRequest_default_instance_._instance.get_mutable()->value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
  ::cockroach::roachpb::_ConditionalPutRequest_default_instance_._instance.get_mutable()->exp_value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
}
void ConditionalPutRequest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
void ConditionalPutRequest::clear_exp_value() {
  if (GetArenaNoVirtual() == NULL && exp_value_ != NULL) {
    delete exp_value_;
  }
  exp_value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalPutRequest::kHeaderFieldNumber;
const int ConditionalPutRequest::kValueFieldNumber;
const int ConditionalPutRequest::kExpValueFieldNumber;
const int ConditionalPutRequest::kBlindFieldNumber;
const int ConditionalPutRequest::kAllowIfDoesNotExistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalPutRequest::ConditionalPutRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ConditionalPutRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ConditionalPutRequest)
}
ConditionalPutRequest::ConditionalPutRequest(const ConditionalPutRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::cockroach::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_exp_value()) {
    exp_value_ = new ::cockroach::roachpb::Value(*from.exp_value_);
  } else {
    exp_value_ = NULL;
  }
  ::memcpy(&blind_, &from.blind_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_if_does_not_exist_) -
    reinterpret_cast<char*>(&blind_)) + sizeof(allow_if_does_not_exist_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ConditionalPutRequest)
}

void ConditionalPutRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_if_does_not_exist_) -
      reinterpret_cast<char*>(&header_)) + sizeof(allow_if_does_not_exist_));
}

ConditionalPutRequest::~ConditionalPutRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ConditionalPutRequest)
  SharedDtor();
}

void ConditionalPutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete exp_value_;
}

void ConditionalPutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalPutRequest& ConditionalPutRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ConditionalPutRequest.base);
  return *internal_default_instance();
}


void ConditionalPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ConditionalPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && exp_value_ != NULL) {
    delete exp_value_;
  }
  exp_value_ = NULL;
  ::memset(&blind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_if_does_not_exist_) -
      reinterpret_cast<char*>(&blind_)) + sizeof(allow_if_does_not_exist_));
  _internal_metadata_.Clear();
}

bool ConditionalPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ConditionalPutRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.Value exp_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exp_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blind = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_if_does_not_exist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_if_does_not_exist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ConditionalPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ConditionalPutRequest)
  return false;
#undef DO_
}

void ConditionalPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ConditionalPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  // .cockroach.roachpb.Value exp_value = 3;
  if (this->has_exp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_exp_value(), output);
  }

  // bool blind = 4;
  if (this->blind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blind(), output);
  }

  // bool allow_if_does_not_exist = 5;
  if (this->allow_if_does_not_exist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_if_does_not_exist(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ConditionalPutRequest)
}

size_t ConditionalPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ConditionalPutRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .cockroach.roachpb.Value exp_value = 3;
  if (this->has_exp_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exp_value_);
  }

  // bool blind = 4;
  if (this->blind() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_if_does_not_exist = 5;
  if (this->allow_if_does_not_exist() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalPutRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConditionalPutRequest*>(&from));
}

void ConditionalPutRequest::MergeFrom(const ConditionalPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ConditionalPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_value()) {
    mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
  }
  if (from.has_exp_value()) {
    mutable_exp_value()->::cockroach::roachpb::Value::MergeFrom(from.exp_value());
  }
  if (from.blind() != 0) {
    set_blind(from.blind());
  }
  if (from.allow_if_does_not_exist() != 0) {
    set_allow_if_does_not_exist(from.allow_if_does_not_exist());
  }
}

void ConditionalPutRequest::CopyFrom(const ConditionalPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ConditionalPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalPutRequest::IsInitialized() const {
  return true;
}

void ConditionalPutRequest::Swap(ConditionalPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalPutRequest::InternalSwap(ConditionalPutRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(value_, other->value_);
  swap(exp_value_, other->exp_value_);
  swap(blind_, other->blind_);
  swap(allow_if_does_not_exist_, other->allow_if_does_not_exist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ConditionalPutRequest::GetTypeName() const {
  return "cockroach.roachpb.ConditionalPutRequest";
}


// ===================================================================

void ConditionalPutResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ConditionalPutResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalPutResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalPutResponse::ConditionalPutResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ConditionalPutResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ConditionalPutResponse)
}
ConditionalPutResponse::ConditionalPutResponse(const ConditionalPutResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ConditionalPutResponse)
}

void ConditionalPutResponse::SharedCtor() {
  header_ = NULL;
}

ConditionalPutResponse::~ConditionalPutResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ConditionalPutResponse)
  SharedDtor();
}

void ConditionalPutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ConditionalPutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalPutResponse& ConditionalPutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ConditionalPutResponse.base);
  return *internal_default_instance();
}


void ConditionalPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ConditionalPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ConditionalPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ConditionalPutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ConditionalPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ConditionalPutResponse)
  return false;
#undef DO_
}

void ConditionalPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ConditionalPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ConditionalPutResponse)
}

size_t ConditionalPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ConditionalPutResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalPutResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConditionalPutResponse*>(&from));
}

void ConditionalPutResponse::MergeFrom(const ConditionalPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ConditionalPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ConditionalPutResponse::CopyFrom(const ConditionalPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ConditionalPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalPutResponse::IsInitialized() const {
  return true;
}

void ConditionalPutResponse::Swap(ConditionalPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalPutResponse::InternalSwap(ConditionalPutResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ConditionalPutResponse::GetTypeName() const {
  return "cockroach.roachpb.ConditionalPutResponse";
}


// ===================================================================

void InitPutRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_InitPutRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_InitPutRequest_default_instance_._instance.get_mutable()->value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
}
void InitPutRequest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitPutRequest::kHeaderFieldNumber;
const int InitPutRequest::kValueFieldNumber;
const int InitPutRequest::kBlindFieldNumber;
const int InitPutRequest::kFailOnTombstonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitPutRequest::InitPutRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_InitPutRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.InitPutRequest)
}
InitPutRequest::InitPutRequest(const InitPutRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::cockroach::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  ::memcpy(&blind_, &from.blind_,
    static_cast<size_t>(reinterpret_cast<char*>(&failontombstones_) -
    reinterpret_cast<char*>(&blind_)) + sizeof(failontombstones_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.InitPutRequest)
}

void InitPutRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failontombstones_) -
      reinterpret_cast<char*>(&header_)) + sizeof(failontombstones_));
}

InitPutRequest::~InitPutRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.InitPutRequest)
  SharedDtor();
}

void InitPutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete value_;
}

void InitPutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitPutRequest& InitPutRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_InitPutRequest.base);
  return *internal_default_instance();
}


void InitPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.InitPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  ::memset(&blind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failontombstones_) -
      reinterpret_cast<char*>(&blind_)) + sizeof(failontombstones_));
  _internal_metadata_.Clear();
}

bool InitPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.InitPutRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool failOnTombstones = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failontombstones_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.InitPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.InitPutRequest)
  return false;
#undef DO_
}

void InitPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.InitPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  // bool blind = 3;
  if (this->blind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->blind(), output);
  }

  // bool failOnTombstones = 4;
  if (this->failontombstones() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->failontombstones(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.InitPutRequest)
}

size_t InitPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.InitPutRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // bool blind = 3;
  if (this->blind() != 0) {
    total_size += 1 + 1;
  }

  // bool failOnTombstones = 4;
  if (this->failontombstones() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitPutRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitPutRequest*>(&from));
}

void InitPutRequest::MergeFrom(const InitPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.InitPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_value()) {
    mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
  }
  if (from.blind() != 0) {
    set_blind(from.blind());
  }
  if (from.failontombstones() != 0) {
    set_failontombstones(from.failontombstones());
  }
}

void InitPutRequest::CopyFrom(const InitPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.InitPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitPutRequest::IsInitialized() const {
  return true;
}

void InitPutRequest::Swap(InitPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitPutRequest::InternalSwap(InitPutRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(value_, other->value_);
  swap(blind_, other->blind_);
  swap(failontombstones_, other->failontombstones_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string InitPutRequest::GetTypeName() const {
  return "cockroach.roachpb.InitPutRequest";
}


// ===================================================================

void InitPutResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_InitPutResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitPutResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitPutResponse::InitPutResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_InitPutResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.InitPutResponse)
}
InitPutResponse::InitPutResponse(const InitPutResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.InitPutResponse)
}

void InitPutResponse::SharedCtor() {
  header_ = NULL;
}

InitPutResponse::~InitPutResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.InitPutResponse)
  SharedDtor();
}

void InitPutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void InitPutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitPutResponse& InitPutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_InitPutResponse.base);
  return *internal_default_instance();
}


void InitPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.InitPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool InitPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.InitPutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.InitPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.InitPutResponse)
  return false;
#undef DO_
}

void InitPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.InitPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.InitPutResponse)
}

size_t InitPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.InitPutResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitPutResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitPutResponse*>(&from));
}

void InitPutResponse::MergeFrom(const InitPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.InitPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void InitPutResponse::CopyFrom(const InitPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.InitPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitPutResponse::IsInitialized() const {
  return true;
}

void InitPutResponse::Swap(InitPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitPutResponse::InternalSwap(InitPutResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string InitPutResponse::GetTypeName() const {
  return "cockroach.roachpb.InitPutResponse";
}


// ===================================================================

void IncrementRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_IncrementRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncrementRequest::kHeaderFieldNumber;
const int IncrementRequest::kIncrementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncrementRequest::IncrementRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_IncrementRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.IncrementRequest)
}
IncrementRequest::IncrementRequest(const IncrementRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  increment_ = from.increment_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.IncrementRequest)
}

void IncrementRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&increment_) -
      reinterpret_cast<char*>(&header_)) + sizeof(increment_));
}

IncrementRequest::~IncrementRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.IncrementRequest)
  SharedDtor();
}

void IncrementRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void IncrementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementRequest& IncrementRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_IncrementRequest.base);
  return *internal_default_instance();
}


void IncrementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.IncrementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  increment_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool IncrementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.IncrementRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 increment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.IncrementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.IncrementRequest)
  return false;
#undef DO_
}

void IncrementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.IncrementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // int64 increment = 2;
  if (this->increment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->increment(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.IncrementRequest)
}

size_t IncrementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.IncrementRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 increment = 2;
  if (this->increment() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->increment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncrementRequest*>(&from));
}

void IncrementRequest::MergeFrom(const IncrementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.IncrementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.increment() != 0) {
    set_increment(from.increment());
  }
}

void IncrementRequest::CopyFrom(const IncrementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.IncrementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementRequest::IsInitialized() const {
  return true;
}

void IncrementRequest::Swap(IncrementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncrementRequest::InternalSwap(IncrementRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(increment_, other->increment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IncrementRequest::GetTypeName() const {
  return "cockroach.roachpb.IncrementRequest";
}


// ===================================================================

void IncrementResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_IncrementResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncrementResponse::kHeaderFieldNumber;
const int IncrementResponse::kNewValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncrementResponse::IncrementResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_IncrementResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.IncrementResponse)
}
IncrementResponse::IncrementResponse(const IncrementResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  new_value_ = from.new_value_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.IncrementResponse)
}

void IncrementResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_value_) -
      reinterpret_cast<char*>(&header_)) + sizeof(new_value_));
}

IncrementResponse::~IncrementResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.IncrementResponse)
  SharedDtor();
}

void IncrementResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void IncrementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementResponse& IncrementResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_IncrementResponse.base);
  return *internal_default_instance();
}


void IncrementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.IncrementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  new_value_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool IncrementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.IncrementResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 new_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.IncrementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.IncrementResponse)
  return false;
#undef DO_
}

void IncrementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.IncrementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // int64 new_value = 2;
  if (this->new_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->new_value(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.IncrementResponse)
}

size_t IncrementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.IncrementResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 new_value = 2;
  if (this->new_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncrementResponse*>(&from));
}

void IncrementResponse::MergeFrom(const IncrementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.IncrementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.new_value() != 0) {
    set_new_value(from.new_value());
  }
}

void IncrementResponse::CopyFrom(const IncrementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.IncrementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementResponse::IsInitialized() const {
  return true;
}

void IncrementResponse::Swap(IncrementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncrementResponse::InternalSwap(IncrementResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(new_value_, other->new_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IncrementResponse::GetTypeName() const {
  return "cockroach.roachpb.IncrementResponse";
}


// ===================================================================

void DeleteRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_DeleteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  header_ = NULL;
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRequest& DeleteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRequest.base);
  return *internal_default_instance();
}


void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.DeleteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.DeleteRequest)
  return false;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.DeleteRequest)
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.DeleteRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteRequest*>(&from));
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DeleteRequest::GetTypeName() const {
  return "cockroach.roachpb.DeleteRequest";
}


// ===================================================================

void DeleteResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_DeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_DeleteResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
  header_ = NULL;
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResponse& DeleteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_DeleteResponse.base);
  return *internal_default_instance();
}


void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.DeleteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.DeleteResponse)
  return false;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.DeleteResponse)
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.DeleteResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteResponse*>(&from));
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DeleteResponse::GetTypeName() const {
  return "cockroach.roachpb.DeleteResponse";
}


// ===================================================================

void DeleteRangeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_DeleteRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeRequest::kHeaderFieldNumber;
const int DeleteRangeRequest::kReturnKeysFieldNumber;
const int DeleteRangeRequest::kInlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeRequest::DeleteRangeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.DeleteRangeRequest)
}
DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&return_keys_, &from.return_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&inline__) -
    reinterpret_cast<char*>(&return_keys_)) + sizeof(inline__));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.DeleteRangeRequest)
}

void DeleteRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inline__) -
      reinterpret_cast<char*>(&header_)) + sizeof(inline__));
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.DeleteRangeRequest)
  SharedDtor();
}

void DeleteRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DeleteRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRangeRequest& DeleteRangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRangeRequest.base);
  return *internal_default_instance();
}


void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&return_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inline__) -
      reinterpret_cast<char*>(&return_keys_)) + sizeof(inline__));
  _internal_metadata_.Clear();
}

bool DeleteRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.DeleteRangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inline = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inline__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.DeleteRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.DeleteRangeRequest)
  return false;
#undef DO_
}

void DeleteRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bool return_keys = 3;
  if (this->return_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->return_keys(), output);
  }

  // bool inline = 4;
  if (this->inline_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->inline_(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.DeleteRangeRequest)
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.DeleteRangeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool return_keys = 3;
  if (this->return_keys() != 0) {
    total_size += 1 + 1;
  }

  // bool inline = 4;
  if (this->inline_() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRangeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteRangeRequest*>(&from));
}

void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.return_keys() != 0) {
    set_return_keys(from.return_keys());
  }
  if (from.inline_() != 0) {
    set_inline_(from.inline_());
  }
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {
  return true;
}

void DeleteRangeRequest::Swap(DeleteRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(return_keys_, other->return_keys_);
  swap(inline__, other->inline__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DeleteRangeRequest::GetTypeName() const {
  return "cockroach.roachpb.DeleteRangeRequest";
}


// ===================================================================

void DeleteRangeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_DeleteRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeResponse::kHeaderFieldNumber;
const int DeleteRangeResponse::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeResponse::DeleteRangeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRangeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.DeleteRangeResponse)
}
DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.DeleteRangeResponse)
}

void DeleteRangeResponse::SharedCtor() {
  header_ = NULL;
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.DeleteRangeResponse)
  SharedDtor();
}

void DeleteRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DeleteRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRangeResponse& DeleteRangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_DeleteRangeResponse.base);
  return *internal_default_instance();
}


void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool DeleteRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.DeleteRangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.DeleteRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.DeleteRangeResponse)
  return false;
#undef DO_
}

void DeleteRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.DeleteRangeResponse)
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.DeleteRangeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRangeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteRangeResponse*>(&from));
}

void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {
  return true;
}

void DeleteRangeResponse::Swap(DeleteRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  using std::swap;
  keys_.InternalSwap(CastToBase(&other->keys_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DeleteRangeResponse::GetTypeName() const {
  return "cockroach.roachpb.DeleteRangeResponse";
}


// ===================================================================

void ClearRangeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ClearRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearRangeRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearRangeRequest::ClearRangeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ClearRangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ClearRangeRequest)
}
ClearRangeRequest::ClearRangeRequest(const ClearRangeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ClearRangeRequest)
}

void ClearRangeRequest::SharedCtor() {
  header_ = NULL;
}

ClearRangeRequest::~ClearRangeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ClearRangeRequest)
  SharedDtor();
}

void ClearRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ClearRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearRangeRequest& ClearRangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ClearRangeRequest.base);
  return *internal_default_instance();
}


void ClearRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ClearRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ClearRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ClearRangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ClearRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ClearRangeRequest)
  return false;
#undef DO_
}

void ClearRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ClearRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ClearRangeRequest)
}

size_t ClearRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ClearRangeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearRangeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClearRangeRequest*>(&from));
}

void ClearRangeRequest::MergeFrom(const ClearRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ClearRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
}

void ClearRangeRequest::CopyFrom(const ClearRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ClearRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearRangeRequest::IsInitialized() const {
  return true;
}

void ClearRangeRequest::Swap(ClearRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearRangeRequest::InternalSwap(ClearRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ClearRangeRequest::GetTypeName() const {
  return "cockroach.roachpb.ClearRangeRequest";
}


// ===================================================================

void ClearRangeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ClearRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearRangeResponse::ClearRangeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ClearRangeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ClearRangeResponse)
}
ClearRangeResponse::ClearRangeResponse(const ClearRangeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ClearRangeResponse)
}

void ClearRangeResponse::SharedCtor() {
  header_ = NULL;
}

ClearRangeResponse::~ClearRangeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ClearRangeResponse)
  SharedDtor();
}

void ClearRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ClearRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearRangeResponse& ClearRangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ClearRangeResponse.base);
  return *internal_default_instance();
}


void ClearRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ClearRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ClearRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ClearRangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ClearRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ClearRangeResponse)
  return false;
#undef DO_
}

void ClearRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ClearRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ClearRangeResponse)
}

size_t ClearRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ClearRangeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearRangeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClearRangeResponse*>(&from));
}

void ClearRangeResponse::MergeFrom(const ClearRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ClearRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ClearRangeResponse::CopyFrom(const ClearRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ClearRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearRangeResponse::IsInitialized() const {
  return true;
}

void ClearRangeResponse::Swap(ClearRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearRangeResponse::InternalSwap(ClearRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ClearRangeResponse::GetTypeName() const {
  return "cockroach.roachpb.ClearRangeResponse";
}


// ===================================================================

void RevertRangeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RevertRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_RevertRangeRequest_default_instance_._instance.get_mutable()->target_time_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void RevertRangeRequest::clear_target_time() {
  if (GetArenaNoVirtual() == NULL && target_time_ != NULL) {
    delete target_time_;
  }
  target_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RevertRangeRequest::kHeaderFieldNumber;
const int RevertRangeRequest::kTargetTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RevertRangeRequest::RevertRangeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RevertRangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RevertRangeRequest)
}
RevertRangeRequest::RevertRangeRequest(const RevertRangeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_target_time()) {
    target_time_ = new ::cockroach::util::hlc::Timestamp(*from.target_time_);
  } else {
    target_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RevertRangeRequest)
}

void RevertRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_time_) -
      reinterpret_cast<char*>(&header_)) + sizeof(target_time_));
}

RevertRangeRequest::~RevertRangeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RevertRangeRequest)
  SharedDtor();
}

void RevertRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete target_time_;
}

void RevertRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevertRangeRequest& RevertRangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RevertRangeRequest.base);
  return *internal_default_instance();
}


void RevertRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RevertRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_time_ != NULL) {
    delete target_time_;
  }
  target_time_ = NULL;
  _internal_metadata_.Clear();
}

bool RevertRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RevertRangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RevertRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RevertRangeRequest)
  return false;
#undef DO_
}

void RevertRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RevertRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_target_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_target_time(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RevertRangeRequest)
}

size_t RevertRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RevertRangeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_target_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevertRangeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RevertRangeRequest*>(&from));
}

void RevertRangeRequest::MergeFrom(const RevertRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RevertRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_target_time()) {
    mutable_target_time()->::cockroach::util::hlc::Timestamp::MergeFrom(from.target_time());
  }
}

void RevertRangeRequest::CopyFrom(const RevertRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RevertRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevertRangeRequest::IsInitialized() const {
  return true;
}

void RevertRangeRequest::Swap(RevertRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RevertRangeRequest::InternalSwap(RevertRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(target_time_, other->target_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RevertRangeRequest::GetTypeName() const {
  return "cockroach.roachpb.RevertRangeRequest";
}


// ===================================================================

void RevertRangeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RevertRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RevertRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RevertRangeResponse::RevertRangeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RevertRangeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RevertRangeResponse)
}
RevertRangeResponse::RevertRangeResponse(const RevertRangeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RevertRangeResponse)
}

void RevertRangeResponse::SharedCtor() {
  header_ = NULL;
}

RevertRangeResponse::~RevertRangeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RevertRangeResponse)
  SharedDtor();
}

void RevertRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RevertRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevertRangeResponse& RevertRangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RevertRangeResponse.base);
  return *internal_default_instance();
}


void RevertRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RevertRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool RevertRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RevertRangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RevertRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RevertRangeResponse)
  return false;
#undef DO_
}

void RevertRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RevertRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RevertRangeResponse)
}

size_t RevertRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RevertRangeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevertRangeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RevertRangeResponse*>(&from));
}

void RevertRangeResponse::MergeFrom(const RevertRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RevertRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void RevertRangeResponse::CopyFrom(const RevertRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RevertRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevertRangeResponse::IsInitialized() const {
  return true;
}

void RevertRangeResponse::Swap(RevertRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RevertRangeResponse::InternalSwap(RevertRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RevertRangeResponse::GetTypeName() const {
  return "cockroach.roachpb.RevertRangeResponse";
}


// ===================================================================

void ScanRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ScanRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanRequest::kHeaderFieldNumber;
const int ScanRequest::kScanFormatFieldNumber;
const int ScanRequest::kKeyLockingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanRequest::ScanRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ScanRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ScanRequest)
}
ScanRequest::ScanRequest(const ScanRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&scan_format_, &from.scan_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_locking_) -
    reinterpret_cast<char*>(&scan_format_)) + sizeof(key_locking_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ScanRequest)
}

void ScanRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_locking_) -
      reinterpret_cast<char*>(&header_)) + sizeof(key_locking_));
}

ScanRequest::~ScanRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ScanRequest)
  SharedDtor();
}

void ScanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRequest& ScanRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ScanRequest.base);
  return *internal_default_instance();
}


void ScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&scan_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_locking_) -
      reinterpret_cast<char*>(&scan_format_)) + sizeof(key_locking_));
  _internal_metadata_.Clear();
}

bool ScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ScanRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ScanFormat scan_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scan_format(static_cast< ::cockroach::roachpb::ScanFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.kv.kvserver.concurrency.lock.Strength key_locking = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_locking(static_cast< ::cockroach::kv::kvserver::concurrency::lock::Strength >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ScanRequest)
  return false;
#undef DO_
}

void ScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // .cockroach.roachpb.ScanFormat scan_format = 4;
  if (this->scan_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_format(), output);
  }

  // .cockroach.kv.kvserver.concurrency.lock.Strength key_locking = 5;
  if (this->key_locking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->key_locking(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ScanRequest)
}

size_t ScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ScanRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .cockroach.roachpb.ScanFormat scan_format = 4;
  if (this->scan_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_format());
  }

  // .cockroach.kv.kvserver.concurrency.lock.Strength key_locking = 5;
  if (this->key_locking() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_locking());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScanRequest*>(&from));
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.scan_format() != 0) {
    set_scan_format(from.scan_format());
  }
  if (from.key_locking() != 0) {
    set_key_locking(from.key_locking());
  }
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRequest::IsInitialized() const {
  return true;
}

void ScanRequest::Swap(ScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanRequest::InternalSwap(ScanRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(scan_format_, other->scan_format_);
  swap(key_locking_, other->key_locking_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ScanRequest::GetTypeName() const {
  return "cockroach.roachpb.ScanRequest";
}


// ===================================================================

void ScanResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ScanResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
void ScanResponse::clear_rows() {
  rows_.Clear();
}
void ScanResponse::clear_intent_rows() {
  intent_rows_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanResponse::kHeaderFieldNumber;
const int ScanResponse::kRowsFieldNumber;
const int ScanResponse::kIntentRowsFieldNumber;
const int ScanResponse::kBatchResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanResponse::ScanResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ScanResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ScanResponse)
}
ScanResponse::ScanResponse(const ScanResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      rows_(from.rows_),
      intent_rows_(from.intent_rows_),
      batch_responses_(from.batch_responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ScanResponse)
}

void ScanResponse::SharedCtor() {
  header_ = NULL;
}

ScanResponse::~ScanResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ScanResponse)
  SharedDtor();
}

void ScanResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanResponse& ScanResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ScanResponse.base);
  return *internal_default_instance();
}


void ScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  intent_rows_.Clear();
  batch_responses_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ScanResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intent_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes batch_responses = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_batch_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ScanResponse)
  return false;
#undef DO_
}

void ScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->rows(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intent_rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->intent_rows(static_cast<int>(i)),
      output);
  }

  // repeated bytes batch_responses = 4;
  for (int i = 0, n = this->batch_responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->batch_responses(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ScanResponse)
}

size_t ScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ScanResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->intent_rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intent_rows(static_cast<int>(i)));
    }
  }

  // repeated bytes batch_responses = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->batch_responses_size());
  for (int i = 0, n = this->batch_responses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->batch_responses(i));
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScanResponse*>(&from));
}

void ScanResponse::MergeFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  intent_rows_.MergeFrom(from.intent_rows_);
  batch_responses_.MergeFrom(from.batch_responses_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ScanResponse::CopyFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResponse::IsInitialized() const {
  return true;
}

void ScanResponse::Swap(ScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanResponse::InternalSwap(ScanResponse* other) {
  using std::swap;
  CastToBase(&rows_)->InternalSwap(CastToBase(&other->rows_));
  CastToBase(&intent_rows_)->InternalSwap(CastToBase(&other->intent_rows_));
  batch_responses_.InternalSwap(CastToBase(&other->batch_responses_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ScanResponse::GetTypeName() const {
  return "cockroach.roachpb.ScanResponse";
}


// ===================================================================

void ReverseScanRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ReverseScanRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReverseScanRequest::kHeaderFieldNumber;
const int ReverseScanRequest::kScanFormatFieldNumber;
const int ReverseScanRequest::kKeyLockingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReverseScanRequest::ReverseScanRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ReverseScanRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReverseScanRequest)
}
ReverseScanRequest::ReverseScanRequest(const ReverseScanRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&scan_format_, &from.scan_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_locking_) -
    reinterpret_cast<char*>(&scan_format_)) + sizeof(key_locking_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReverseScanRequest)
}

void ReverseScanRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_locking_) -
      reinterpret_cast<char*>(&header_)) + sizeof(key_locking_));
}

ReverseScanRequest::~ReverseScanRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReverseScanRequest)
  SharedDtor();
}

void ReverseScanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ReverseScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReverseScanRequest& ReverseScanRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ReverseScanRequest.base);
  return *internal_default_instance();
}


void ReverseScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReverseScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&scan_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_locking_) -
      reinterpret_cast<char*>(&scan_format_)) + sizeof(key_locking_));
  _internal_metadata_.Clear();
}

bool ReverseScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReverseScanRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ScanFormat scan_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scan_format(static_cast< ::cockroach::roachpb::ScanFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.kv.kvserver.concurrency.lock.Strength key_locking = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_locking(static_cast< ::cockroach::kv::kvserver::concurrency::lock::Strength >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReverseScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReverseScanRequest)
  return false;
#undef DO_
}

void ReverseScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReverseScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // .cockroach.roachpb.ScanFormat scan_format = 4;
  if (this->scan_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_format(), output);
  }

  // .cockroach.kv.kvserver.concurrency.lock.Strength key_locking = 5;
  if (this->key_locking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->key_locking(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReverseScanRequest)
}

size_t ReverseScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReverseScanRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .cockroach.roachpb.ScanFormat scan_format = 4;
  if (this->scan_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_format());
  }

  // .cockroach.kv.kvserver.concurrency.lock.Strength key_locking = 5;
  if (this->key_locking() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_locking());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReverseScanRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReverseScanRequest*>(&from));
}

void ReverseScanRequest::MergeFrom(const ReverseScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReverseScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.scan_format() != 0) {
    set_scan_format(from.scan_format());
  }
  if (from.key_locking() != 0) {
    set_key_locking(from.key_locking());
  }
}

void ReverseScanRequest::CopyFrom(const ReverseScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReverseScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReverseScanRequest::IsInitialized() const {
  return true;
}

void ReverseScanRequest::Swap(ReverseScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReverseScanRequest::InternalSwap(ReverseScanRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(scan_format_, other->scan_format_);
  swap(key_locking_, other->key_locking_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReverseScanRequest::GetTypeName() const {
  return "cockroach.roachpb.ReverseScanRequest";
}


// ===================================================================

void ReverseScanResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ReverseScanResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
void ReverseScanResponse::clear_rows() {
  rows_.Clear();
}
void ReverseScanResponse::clear_intent_rows() {
  intent_rows_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReverseScanResponse::kHeaderFieldNumber;
const int ReverseScanResponse::kRowsFieldNumber;
const int ReverseScanResponse::kIntentRowsFieldNumber;
const int ReverseScanResponse::kBatchResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReverseScanResponse::ReverseScanResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ReverseScanResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReverseScanResponse)
}
ReverseScanResponse::ReverseScanResponse(const ReverseScanResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      rows_(from.rows_),
      intent_rows_(from.intent_rows_),
      batch_responses_(from.batch_responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReverseScanResponse)
}

void ReverseScanResponse::SharedCtor() {
  header_ = NULL;
}

ReverseScanResponse::~ReverseScanResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReverseScanResponse)
  SharedDtor();
}

void ReverseScanResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ReverseScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReverseScanResponse& ReverseScanResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ReverseScanResponse.base);
  return *internal_default_instance();
}


void ReverseScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReverseScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  intent_rows_.Clear();
  batch_responses_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ReverseScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReverseScanResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intent_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes batch_responses = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_batch_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReverseScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReverseScanResponse)
  return false;
#undef DO_
}

void ReverseScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReverseScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->rows(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intent_rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->intent_rows(static_cast<int>(i)),
      output);
  }

  // repeated bytes batch_responses = 4;
  for (int i = 0, n = this->batch_responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->batch_responses(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReverseScanResponse)
}

size_t ReverseScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReverseScanResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->intent_rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intent_rows(static_cast<int>(i)));
    }
  }

  // repeated bytes batch_responses = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->batch_responses_size());
  for (int i = 0, n = this->batch_responses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->batch_responses(i));
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReverseScanResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReverseScanResponse*>(&from));
}

void ReverseScanResponse::MergeFrom(const ReverseScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReverseScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  intent_rows_.MergeFrom(from.intent_rows_);
  batch_responses_.MergeFrom(from.batch_responses_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ReverseScanResponse::CopyFrom(const ReverseScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReverseScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReverseScanResponse::IsInitialized() const {
  return true;
}

void ReverseScanResponse::Swap(ReverseScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReverseScanResponse::InternalSwap(ReverseScanResponse* other) {
  using std::swap;
  CastToBase(&rows_)->InternalSwap(CastToBase(&other->rows_));
  CastToBase(&intent_rows_)->InternalSwap(CastToBase(&other->intent_rows_));
  batch_responses_.InternalSwap(CastToBase(&other->batch_responses_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReverseScanResponse::GetTypeName() const {
  return "cockroach.roachpb.ReverseScanResponse";
}


// ===================================================================

void CheckConsistencyRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_CheckConsistencyRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
void CheckConsistencyRequest::clear_terminate() {
  terminate_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckConsistencyRequest::kHeaderFieldNumber;
const int CheckConsistencyRequest::kWithDiffFieldNumber;
const int CheckConsistencyRequest::kModeFieldNumber;
const int CheckConsistencyRequest::kCheckpointFieldNumber;
const int CheckConsistencyRequest::kTerminateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckConsistencyRequest::CheckConsistencyRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.CheckConsistencyRequest)
}
CheckConsistencyRequest::CheckConsistencyRequest(const CheckConsistencyRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      terminate_(from.terminate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkpoint_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(checkpoint_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.CheckConsistencyRequest)
}

void CheckConsistencyRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkpoint_) -
      reinterpret_cast<char*>(&header_)) + sizeof(checkpoint_));
}

CheckConsistencyRequest::~CheckConsistencyRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.CheckConsistencyRequest)
  SharedDtor();
}

void CheckConsistencyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CheckConsistencyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckConsistencyRequest& CheckConsistencyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyRequest.base);
  return *internal_default_instance();
}


void CheckConsistencyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.CheckConsistencyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminate_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkpoint_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(checkpoint_));
  _internal_metadata_.Clear();
}

bool CheckConsistencyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.CheckConsistencyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_diff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ChecksumMode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::cockroach::roachpb::ChecksumMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool checkpoint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_terminate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.CheckConsistencyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.CheckConsistencyRequest)
  return false;
#undef DO_
}

void CheckConsistencyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.CheckConsistencyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bool with_diff = 2;
  if (this->with_diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->with_diff(), output);
  }

  // .cockroach.roachpb.ChecksumMode mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // bool checkpoint = 4;
  if (this->checkpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->checkpoint(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->terminate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->terminate(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.CheckConsistencyRequest)
}

size_t CheckConsistencyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.CheckConsistencyRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->terminate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->terminate(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .cockroach.roachpb.ChecksumMode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // bool with_diff = 2;
  if (this->with_diff() != 0) {
    total_size += 1 + 1;
  }

  // bool checkpoint = 4;
  if (this->checkpoint() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckConsistencyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckConsistencyRequest*>(&from));
}

void CheckConsistencyRequest::MergeFrom(const CheckConsistencyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.CheckConsistencyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  terminate_.MergeFrom(from.terminate_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.with_diff() != 0) {
    set_with_diff(from.with_diff());
  }
  if (from.checkpoint() != 0) {
    set_checkpoint(from.checkpoint());
  }
}

void CheckConsistencyRequest::CopyFrom(const CheckConsistencyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.CheckConsistencyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckConsistencyRequest::IsInitialized() const {
  return true;
}

void CheckConsistencyRequest::Swap(CheckConsistencyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckConsistencyRequest::InternalSwap(CheckConsistencyRequest* other) {
  using std::swap;
  CastToBase(&terminate_)->InternalSwap(CastToBase(&other->terminate_));
  swap(header_, other->header_);
  swap(mode_, other->mode_);
  swap(with_diff_, other->with_diff_);
  swap(checkpoint_, other->checkpoint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CheckConsistencyRequest::GetTypeName() const {
  return "cockroach.roachpb.CheckConsistencyRequest";
}


// ===================================================================

void CheckConsistencyResponse_Result::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckConsistencyResponse_Result::kRangeIdFieldNumber;
const int CheckConsistencyResponse_Result::kStartKeyFieldNumber;
const int CheckConsistencyResponse_Result::kStatusFieldNumber;
const int CheckConsistencyResponse_Result::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckConsistencyResponse_Result::CheckConsistencyResponse_Result()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyResponse_Result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.CheckConsistencyResponse.Result)
}
CheckConsistencyResponse_Result::CheckConsistencyResponse_Result(const CheckConsistencyResponse_Result& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detail().size() > 0) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.CheckConsistencyResponse.Result)
}

void CheckConsistencyResponse_Result::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(status_));
}

CheckConsistencyResponse_Result::~CheckConsistencyResponse_Result() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.CheckConsistencyResponse.Result)
  SharedDtor();
}

void CheckConsistencyResponse_Result::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckConsistencyResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckConsistencyResponse_Result& CheckConsistencyResponse_Result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyResponse_Result.base);
  return *internal_default_instance();
}


void CheckConsistencyResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.CheckConsistencyResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool CheckConsistencyResponse_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.CheckConsistencyResponse.Result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.CheckConsistencyResponse.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cockroach::roachpb::CheckConsistencyResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.CheckConsistencyResponse.Result.detail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.CheckConsistencyResponse.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.CheckConsistencyResponse.Result)
  return false;
#undef DO_
}

void CheckConsistencyResponse_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.CheckConsistencyResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // .cockroach.roachpb.CheckConsistencyResponse.Status status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // string detail = 4;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.CheckConsistencyResponse.Result.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->detail(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.CheckConsistencyResponse.Result)
}

size_t CheckConsistencyResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.CheckConsistencyResponse.Result)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // string detail = 4;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail());
  }

  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->range_id());
  }

  // .cockroach.roachpb.CheckConsistencyResponse.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckConsistencyResponse_Result::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckConsistencyResponse_Result*>(&from));
}

void CheckConsistencyResponse_Result::MergeFrom(const CheckConsistencyResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.CheckConsistencyResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CheckConsistencyResponse_Result::CopyFrom(const CheckConsistencyResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.CheckConsistencyResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckConsistencyResponse_Result::IsInitialized() const {
  return true;
}

void CheckConsistencyResponse_Result::Swap(CheckConsistencyResponse_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckConsistencyResponse_Result::InternalSwap(CheckConsistencyResponse_Result* other) {
  using std::swap;
  start_key_.Swap(&other->start_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detail_.Swap(&other->detail_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(range_id_, other->range_id_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CheckConsistencyResponse_Result::GetTypeName() const {
  return "cockroach.roachpb.CheckConsistencyResponse.Result";
}


// ===================================================================

void CheckConsistencyResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_CheckConsistencyResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckConsistencyResponse::kHeaderFieldNumber;
const int CheckConsistencyResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckConsistencyResponse::CheckConsistencyResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.CheckConsistencyResponse)
}
CheckConsistencyResponse::CheckConsistencyResponse(const CheckConsistencyResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.CheckConsistencyResponse)
}

void CheckConsistencyResponse::SharedCtor() {
  header_ = NULL;
}

CheckConsistencyResponse::~CheckConsistencyResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.CheckConsistencyResponse)
  SharedDtor();
}

void CheckConsistencyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CheckConsistencyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckConsistencyResponse& CheckConsistencyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_CheckConsistencyResponse.base);
  return *internal_default_instance();
}


void CheckConsistencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.CheckConsistencyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool CheckConsistencyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.CheckConsistencyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.CheckConsistencyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.CheckConsistencyResponse)
  return false;
#undef DO_
}

void CheckConsistencyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.CheckConsistencyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->result(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.CheckConsistencyResponse)
}

size_t CheckConsistencyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.CheckConsistencyResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->result_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->result(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckConsistencyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckConsistencyResponse*>(&from));
}

void CheckConsistencyResponse::MergeFrom(const CheckConsistencyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.CheckConsistencyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void CheckConsistencyResponse::CopyFrom(const CheckConsistencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.CheckConsistencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckConsistencyResponse::IsInitialized() const {
  return true;
}

void CheckConsistencyResponse::Swap(CheckConsistencyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckConsistencyResponse::InternalSwap(CheckConsistencyResponse* other) {
  using std::swap;
  CastToBase(&result_)->InternalSwap(CastToBase(&other->result_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CheckConsistencyResponse::GetTypeName() const {
  return "cockroach.roachpb.CheckConsistencyResponse";
}


// ===================================================================

void RecomputeStatsRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RecomputeStatsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecomputeStatsRequest::kHeaderFieldNumber;
const int RecomputeStatsRequest::kDryRunFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecomputeStatsRequest::RecomputeStatsRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RecomputeStatsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RecomputeStatsRequest)
}
RecomputeStatsRequest::RecomputeStatsRequest(const RecomputeStatsRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  dry_run_ = from.dry_run_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RecomputeStatsRequest)
}

void RecomputeStatsRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dry_run_) -
      reinterpret_cast<char*>(&header_)) + sizeof(dry_run_));
}

RecomputeStatsRequest::~RecomputeStatsRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RecomputeStatsRequest)
  SharedDtor();
}

void RecomputeStatsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RecomputeStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecomputeStatsRequest& RecomputeStatsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RecomputeStatsRequest.base);
  return *internal_default_instance();
}


void RecomputeStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RecomputeStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  dry_run_ = false;
  _internal_metadata_.Clear();
}

bool RecomputeStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RecomputeStatsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dry_run = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dry_run_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RecomputeStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RecomputeStatsRequest)
  return false;
#undef DO_
}

void RecomputeStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RecomputeStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bool dry_run = 2;
  if (this->dry_run() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dry_run(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RecomputeStatsRequest)
}

size_t RecomputeStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RecomputeStatsRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool dry_run = 2;
  if (this->dry_run() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecomputeStatsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecomputeStatsRequest*>(&from));
}

void RecomputeStatsRequest::MergeFrom(const RecomputeStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RecomputeStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.dry_run() != 0) {
    set_dry_run(from.dry_run());
  }
}

void RecomputeStatsRequest::CopyFrom(const RecomputeStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RecomputeStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecomputeStatsRequest::IsInitialized() const {
  return true;
}

void RecomputeStatsRequest::Swap(RecomputeStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecomputeStatsRequest::InternalSwap(RecomputeStatsRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(dry_run_, other->dry_run_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RecomputeStatsRequest::GetTypeName() const {
  return "cockroach.roachpb.RecomputeStatsRequest";
}


// ===================================================================

void RecomputeStatsResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RecomputeStatsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_RecomputeStatsResponse_default_instance_._instance.get_mutable()->added_delta_ = const_cast< ::cockroach::storage::enginepb::MVCCStatsDelta*>(
      ::cockroach::storage::enginepb::MVCCStatsDelta::internal_default_instance());
}
void RecomputeStatsResponse::clear_added_delta() {
  if (GetArenaNoVirtual() == NULL && added_delta_ != NULL) {
    delete added_delta_;
  }
  added_delta_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecomputeStatsResponse::kHeaderFieldNumber;
const int RecomputeStatsResponse::kAddedDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecomputeStatsResponse::RecomputeStatsResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RecomputeStatsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RecomputeStatsResponse)
}
RecomputeStatsResponse::RecomputeStatsResponse(const RecomputeStatsResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_added_delta()) {
    added_delta_ = new ::cockroach::storage::enginepb::MVCCStatsDelta(*from.added_delta_);
  } else {
    added_delta_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RecomputeStatsResponse)
}

void RecomputeStatsResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&added_delta_) -
      reinterpret_cast<char*>(&header_)) + sizeof(added_delta_));
}

RecomputeStatsResponse::~RecomputeStatsResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RecomputeStatsResponse)
  SharedDtor();
}

void RecomputeStatsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete added_delta_;
}

void RecomputeStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecomputeStatsResponse& RecomputeStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RecomputeStatsResponse.base);
  return *internal_default_instance();
}


void RecomputeStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RecomputeStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && added_delta_ != NULL) {
    delete added_delta_;
  }
  added_delta_ = NULL;
  _internal_metadata_.Clear();
}

bool RecomputeStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RecomputeStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_added_delta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RecomputeStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RecomputeStatsResponse)
  return false;
#undef DO_
}

void RecomputeStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RecomputeStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_added_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_added_delta(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RecomputeStatsResponse)
}

size_t RecomputeStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RecomputeStatsResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_added_delta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *added_delta_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecomputeStatsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecomputeStatsResponse*>(&from));
}

void RecomputeStatsResponse::MergeFrom(const RecomputeStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RecomputeStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_added_delta()) {
    mutable_added_delta()->::cockroach::storage::enginepb::MVCCStatsDelta::MergeFrom(from.added_delta());
  }
}

void RecomputeStatsResponse::CopyFrom(const RecomputeStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RecomputeStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecomputeStatsResponse::IsInitialized() const {
  return true;
}

void RecomputeStatsResponse::Swap(RecomputeStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecomputeStatsResponse::InternalSwap(RecomputeStatsResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(added_delta_, other->added_delta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RecomputeStatsResponse::GetTypeName() const {
  return "cockroach.roachpb.RecomputeStatsResponse";
}


// ===================================================================

void EndTxnRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_EndTxnRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_EndTxnRequest_default_instance_._instance.get_mutable()->deadline_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_EndTxnRequest_default_instance_._instance.get_mutable()->internal_commit_trigger_ = const_cast< ::cockroach::roachpb::InternalCommitTrigger*>(
      ::cockroach::roachpb::InternalCommitTrigger::internal_default_instance());
}
void EndTxnRequest::clear_deadline() {
  if (GetArenaNoVirtual() == NULL && deadline_ != NULL) {
    delete deadline_;
  }
  deadline_ = NULL;
}
void EndTxnRequest::clear_internal_commit_trigger() {
  if (GetArenaNoVirtual() == NULL && internal_commit_trigger_ != NULL) {
    delete internal_commit_trigger_;
  }
  internal_commit_trigger_ = NULL;
}
void EndTxnRequest::clear_lock_spans() {
  lock_spans_.Clear();
}
void EndTxnRequest::clear_in_flight_writes() {
  in_flight_writes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndTxnRequest::kHeaderFieldNumber;
const int EndTxnRequest::kCommitFieldNumber;
const int EndTxnRequest::kDeadlineFieldNumber;
const int EndTxnRequest::kInternalCommitTriggerFieldNumber;
const int EndTxnRequest::kLockSpansFieldNumber;
const int EndTxnRequest::kInFlightWritesFieldNumber;
const int EndTxnRequest::kRequire1PcFieldNumber;
const int EndTxnRequest::kCanCommitAtHigherTimestampFieldNumber;
const int EndTxnRequest::kPoisonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndTxnRequest::EndTxnRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_EndTxnRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.EndTxnRequest)
}
EndTxnRequest::EndTxnRequest(const EndTxnRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      lock_spans_(from.lock_spans_),
      in_flight_writes_(from.in_flight_writes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_deadline()) {
    deadline_ = new ::cockroach::util::hlc::Timestamp(*from.deadline_);
  } else {
    deadline_ = NULL;
  }
  if (from.has_internal_commit_trigger()) {
    internal_commit_trigger_ = new ::cockroach::roachpb::InternalCommitTrigger(*from.internal_commit_trigger_);
  } else {
    internal_commit_trigger_ = NULL;
  }
  ::memcpy(&commit_, &from.commit_,
    static_cast<size_t>(reinterpret_cast<char*>(&poison_) -
    reinterpret_cast<char*>(&commit_)) + sizeof(poison_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.EndTxnRequest)
}

void EndTxnRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poison_) -
      reinterpret_cast<char*>(&header_)) + sizeof(poison_));
}

EndTxnRequest::~EndTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.EndTxnRequest)
  SharedDtor();
}

void EndTxnRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete deadline_;
  if (this != internal_default_instance()) delete internal_commit_trigger_;
}

void EndTxnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndTxnRequest& EndTxnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_EndTxnRequest.base);
  return *internal_default_instance();
}


void EndTxnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.EndTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lock_spans_.Clear();
  in_flight_writes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && deadline_ != NULL) {
    delete deadline_;
  }
  deadline_ = NULL;
  if (GetArenaNoVirtual() == NULL && internal_commit_trigger_ != NULL) {
    delete internal_commit_trigger_;
  }
  internal_commit_trigger_ = NULL;
  ::memset(&commit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poison_) -
      reinterpret_cast<char*>(&commit_)) + sizeof(poison_));
  _internal_metadata_.Clear();
}

bool EndTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.EndTxnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool commit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.util.hlc.Timestamp deadline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deadline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.InternalCommitTrigger internal_commit_trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_internal_commit_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lock_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_1pc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_commit_at_higher_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_commit_at_higher_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool poison = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &poison_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_flight_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.EndTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.EndTxnRequest)
  return false;
#undef DO_
}

void EndTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.EndTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bool commit = 2;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->commit(), output);
  }

  // .cockroach.util.hlc.Timestamp deadline = 3;
  if (this->has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_deadline(), output);
  }

  // .cockroach.roachpb.InternalCommitTrigger internal_commit_trigger = 4;
  if (this->has_internal_commit_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_internal_commit_trigger(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lock_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->lock_spans(static_cast<int>(i)),
      output);
  }

  if (this->require_1pc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->require_1pc(), output);
  }

  // bool can_commit_at_higher_timestamp = 8;
  if (this->can_commit_at_higher_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->can_commit_at_higher_timestamp(), output);
  }

  // bool poison = 9;
  if (this->poison() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->poison(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_flight_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17,
      this->in_flight_writes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.EndTxnRequest)
}

size_t EndTxnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.EndTxnRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->lock_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lock_spans(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->in_flight_writes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_flight_writes(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .cockroach.util.hlc.Timestamp deadline = 3;
  if (this->has_deadline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deadline_);
  }

  // .cockroach.roachpb.InternalCommitTrigger internal_commit_trigger = 4;
  if (this->has_internal_commit_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *internal_commit_trigger_);
  }

  // bool commit = 2;
  if (this->commit() != 0) {
    total_size += 1 + 1;
  }

  if (this->require_1pc() != 0) {
    total_size += 1 + 1;
  }

  // bool can_commit_at_higher_timestamp = 8;
  if (this->can_commit_at_higher_timestamp() != 0) {
    total_size += 1 + 1;
  }

  // bool poison = 9;
  if (this->poison() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndTxnRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndTxnRequest*>(&from));
}

void EndTxnRequest::MergeFrom(const EndTxnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.EndTxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lock_spans_.MergeFrom(from.lock_spans_);
  in_flight_writes_.MergeFrom(from.in_flight_writes_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_deadline()) {
    mutable_deadline()->::cockroach::util::hlc::Timestamp::MergeFrom(from.deadline());
  }
  if (from.has_internal_commit_trigger()) {
    mutable_internal_commit_trigger()->::cockroach::roachpb::InternalCommitTrigger::MergeFrom(from.internal_commit_trigger());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
  if (from.require_1pc() != 0) {
    set_require_1pc(from.require_1pc());
  }
  if (from.can_commit_at_higher_timestamp() != 0) {
    set_can_commit_at_higher_timestamp(from.can_commit_at_higher_timestamp());
  }
  if (from.poison() != 0) {
    set_poison(from.poison());
  }
}

void EndTxnRequest::CopyFrom(const EndTxnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.EndTxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndTxnRequest::IsInitialized() const {
  return true;
}

void EndTxnRequest::Swap(EndTxnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndTxnRequest::InternalSwap(EndTxnRequest* other) {
  using std::swap;
  CastToBase(&lock_spans_)->InternalSwap(CastToBase(&other->lock_spans_));
  CastToBase(&in_flight_writes_)->InternalSwap(CastToBase(&other->in_flight_writes_));
  swap(header_, other->header_);
  swap(deadline_, other->deadline_);
  swap(internal_commit_trigger_, other->internal_commit_trigger_);
  swap(commit_, other->commit_);
  swap(require_1pc_, other->require_1pc_);
  swap(can_commit_at_higher_timestamp_, other->can_commit_at_higher_timestamp_);
  swap(poison_, other->poison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EndTxnRequest::GetTypeName() const {
  return "cockroach.roachpb.EndTxnRequest";
}


// ===================================================================

void EndTxnResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_EndTxnResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_EndTxnResponse_default_instance_._instance.get_mutable()->staging_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void EndTxnResponse::clear_staging_timestamp() {
  if (GetArenaNoVirtual() == NULL && staging_timestamp_ != NULL) {
    delete staging_timestamp_;
  }
  staging_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndTxnResponse::kHeaderFieldNumber;
const int EndTxnResponse::kOnePhaseCommitFieldNumber;
const int EndTxnResponse::kStagingTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndTxnResponse::EndTxnResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_EndTxnResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.EndTxnResponse)
}
EndTxnResponse::EndTxnResponse(const EndTxnResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_staging_timestamp()) {
    staging_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.staging_timestamp_);
  } else {
    staging_timestamp_ = NULL;
  }
  one_phase_commit_ = from.one_phase_commit_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.EndTxnResponse)
}

void EndTxnResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&one_phase_commit_) -
      reinterpret_cast<char*>(&header_)) + sizeof(one_phase_commit_));
}

EndTxnResponse::~EndTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.EndTxnResponse)
  SharedDtor();
}

void EndTxnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete staging_timestamp_;
}

void EndTxnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndTxnResponse& EndTxnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_EndTxnResponse.base);
  return *internal_default_instance();
}


void EndTxnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.EndTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && staging_timestamp_ != NULL) {
    delete staging_timestamp_;
  }
  staging_timestamp_ = NULL;
  one_phase_commit_ = false;
  _internal_metadata_.Clear();
}

bool EndTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.EndTxnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool one_phase_commit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &one_phase_commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_staging_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.EndTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.EndTxnResponse)
  return false;
#undef DO_
}

void EndTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.EndTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bool one_phase_commit = 4;
  if (this->one_phase_commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->one_phase_commit(), output);
  }

  if (this->has_staging_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_staging_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.EndTxnResponse)
}

size_t EndTxnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.EndTxnResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_staging_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *staging_timestamp_);
  }

  // bool one_phase_commit = 4;
  if (this->one_phase_commit() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndTxnResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndTxnResponse*>(&from));
}

void EndTxnResponse::MergeFrom(const EndTxnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.EndTxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_staging_timestamp()) {
    mutable_staging_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.staging_timestamp());
  }
  if (from.one_phase_commit() != 0) {
    set_one_phase_commit(from.one_phase_commit());
  }
}

void EndTxnResponse::CopyFrom(const EndTxnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.EndTxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndTxnResponse::IsInitialized() const {
  return true;
}

void EndTxnResponse::Swap(EndTxnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndTxnResponse::InternalSwap(EndTxnResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(staging_timestamp_, other->staging_timestamp_);
  swap(one_phase_commit_, other->one_phase_commit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EndTxnResponse::GetTypeName() const {
  return "cockroach.roachpb.EndTxnResponse";
}


// ===================================================================

void AdminSplitRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_AdminSplitRequest_default_instance_._instance.get_mutable()->expiration_time_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void AdminSplitRequest::clear_expiration_time() {
  if (GetArenaNoVirtual() == NULL && expiration_time_ != NULL) {
    delete expiration_time_;
  }
  expiration_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminSplitRequest::kHeaderFieldNumber;
const int AdminSplitRequest::kSplitKeyFieldNumber;
const int AdminSplitRequest::kExpirationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminSplitRequest::AdminSplitRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminSplitRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminSplitRequest)
}
AdminSplitRequest::AdminSplitRequest(const AdminSplitRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_expiration_time()) {
    expiration_time_ = new ::cockroach::util::hlc::Timestamp(*from.expiration_time_);
  } else {
    expiration_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminSplitRequest)
}

void AdminSplitRequest::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_time_) -
      reinterpret_cast<char*>(&header_)) + sizeof(expiration_time_));
}

AdminSplitRequest::~AdminSplitRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminSplitRequest)
  SharedDtor();
}

void AdminSplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete expiration_time_;
}

void AdminSplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminSplitRequest& AdminSplitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminSplitRequest.base);
  return *internal_default_instance();
}


void AdminSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && expiration_time_ != NULL) {
    delete expiration_time_;
  }
  expiration_time_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminSplitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminSplitRequest)
  return false;
#undef DO_
}

void AdminSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->split_key(), output);
  }

  if (this->has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_expiration_time(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminSplitRequest)
}

size_t AdminSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminSplitRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_expiration_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expiration_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminSplitRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminSplitRequest*>(&from));
}

void AdminSplitRequest::MergeFrom(const AdminSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_expiration_time()) {
    mutable_expiration_time()->::cockroach::util::hlc::Timestamp::MergeFrom(from.expiration_time());
  }
}

void AdminSplitRequest::CopyFrom(const AdminSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminSplitRequest::IsInitialized() const {
  return true;
}

void AdminSplitRequest::Swap(AdminSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminSplitRequest::InternalSwap(AdminSplitRequest* other) {
  using std::swap;
  split_key_.Swap(&other->split_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(expiration_time_, other->expiration_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminSplitRequest::GetTypeName() const {
  return "cockroach.roachpb.AdminSplitRequest";
}


// ===================================================================

void AdminSplitResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminSplitResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminSplitResponse::AdminSplitResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminSplitResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminSplitResponse)
}
AdminSplitResponse::AdminSplitResponse(const AdminSplitResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminSplitResponse)
}

void AdminSplitResponse::SharedCtor() {
  header_ = NULL;
}

AdminSplitResponse::~AdminSplitResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminSplitResponse)
  SharedDtor();
}

void AdminSplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminSplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminSplitResponse& AdminSplitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminSplitResponse.base);
  return *internal_default_instance();
}


void AdminSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminSplitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminSplitResponse)
  return false;
#undef DO_
}

void AdminSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminSplitResponse)
}

size_t AdminSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminSplitResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminSplitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminSplitResponse*>(&from));
}

void AdminSplitResponse::MergeFrom(const AdminSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AdminSplitResponse::CopyFrom(const AdminSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminSplitResponse::IsInitialized() const {
  return true;
}

void AdminSplitResponse::Swap(AdminSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminSplitResponse::InternalSwap(AdminSplitResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminSplitResponse::GetTypeName() const {
  return "cockroach.roachpb.AdminSplitResponse";
}


// ===================================================================

void AdminUnsplitRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminUnsplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminUnsplitRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminUnsplitRequest::AdminUnsplitRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminUnsplitRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminUnsplitRequest)
}
AdminUnsplitRequest::AdminUnsplitRequest(const AdminUnsplitRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminUnsplitRequest)
}

void AdminUnsplitRequest::SharedCtor() {
  header_ = NULL;
}

AdminUnsplitRequest::~AdminUnsplitRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminUnsplitRequest)
  SharedDtor();
}

void AdminUnsplitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminUnsplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminUnsplitRequest& AdminUnsplitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminUnsplitRequest.base);
  return *internal_default_instance();
}


void AdminUnsplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminUnsplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminUnsplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminUnsplitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminUnsplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminUnsplitRequest)
  return false;
#undef DO_
}

void AdminUnsplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminUnsplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminUnsplitRequest)
}

size_t AdminUnsplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminUnsplitRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminUnsplitRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminUnsplitRequest*>(&from));
}

void AdminUnsplitRequest::MergeFrom(const AdminUnsplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminUnsplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
}

void AdminUnsplitRequest::CopyFrom(const AdminUnsplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminUnsplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminUnsplitRequest::IsInitialized() const {
  return true;
}

void AdminUnsplitRequest::Swap(AdminUnsplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminUnsplitRequest::InternalSwap(AdminUnsplitRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminUnsplitRequest::GetTypeName() const {
  return "cockroach.roachpb.AdminUnsplitRequest";
}


// ===================================================================

void AdminUnsplitResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminUnsplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminUnsplitResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminUnsplitResponse::AdminUnsplitResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminUnsplitResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminUnsplitResponse)
}
AdminUnsplitResponse::AdminUnsplitResponse(const AdminUnsplitResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminUnsplitResponse)
}

void AdminUnsplitResponse::SharedCtor() {
  header_ = NULL;
}

AdminUnsplitResponse::~AdminUnsplitResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminUnsplitResponse)
  SharedDtor();
}

void AdminUnsplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminUnsplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminUnsplitResponse& AdminUnsplitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminUnsplitResponse.base);
  return *internal_default_instance();
}


void AdminUnsplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminUnsplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminUnsplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminUnsplitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminUnsplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminUnsplitResponse)
  return false;
#undef DO_
}

void AdminUnsplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminUnsplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminUnsplitResponse)
}

size_t AdminUnsplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminUnsplitResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminUnsplitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminUnsplitResponse*>(&from));
}

void AdminUnsplitResponse::MergeFrom(const AdminUnsplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminUnsplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AdminUnsplitResponse::CopyFrom(const AdminUnsplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminUnsplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminUnsplitResponse::IsInitialized() const {
  return true;
}

void AdminUnsplitResponse::Swap(AdminUnsplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminUnsplitResponse::InternalSwap(AdminUnsplitResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminUnsplitResponse::GetTypeName() const {
  return "cockroach.roachpb.AdminUnsplitResponse";
}


// ===================================================================

void AdminMergeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminMergeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminMergeRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminMergeRequest::AdminMergeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminMergeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminMergeRequest)
}
AdminMergeRequest::AdminMergeRequest(const AdminMergeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminMergeRequest)
}

void AdminMergeRequest::SharedCtor() {
  header_ = NULL;
}

AdminMergeRequest::~AdminMergeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminMergeRequest)
  SharedDtor();
}

void AdminMergeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminMergeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminMergeRequest& AdminMergeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminMergeRequest.base);
  return *internal_default_instance();
}


void AdminMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminMergeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminMergeRequest)
  return false;
#undef DO_
}

void AdminMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminMergeRequest)
}

size_t AdminMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminMergeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminMergeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminMergeRequest*>(&from));
}

void AdminMergeRequest::MergeFrom(const AdminMergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminMergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
}

void AdminMergeRequest::CopyFrom(const AdminMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminMergeRequest::IsInitialized() const {
  return true;
}

void AdminMergeRequest::Swap(AdminMergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminMergeRequest::InternalSwap(AdminMergeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminMergeRequest::GetTypeName() const {
  return "cockroach.roachpb.AdminMergeRequest";
}


// ===================================================================

void AdminMergeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminMergeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminMergeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminMergeResponse::AdminMergeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminMergeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminMergeResponse)
}
AdminMergeResponse::AdminMergeResponse(const AdminMergeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminMergeResponse)
}

void AdminMergeResponse::SharedCtor() {
  header_ = NULL;
}

AdminMergeResponse::~AdminMergeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminMergeResponse)
  SharedDtor();
}

void AdminMergeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminMergeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminMergeResponse& AdminMergeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminMergeResponse.base);
  return *internal_default_instance();
}


void AdminMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminMergeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminMergeResponse)
  return false;
#undef DO_
}

void AdminMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminMergeResponse)
}

size_t AdminMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminMergeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminMergeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminMergeResponse*>(&from));
}

void AdminMergeResponse::MergeFrom(const AdminMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AdminMergeResponse::CopyFrom(const AdminMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminMergeResponse::IsInitialized() const {
  return true;
}

void AdminMergeResponse::Swap(AdminMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminMergeResponse::InternalSwap(AdminMergeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminMergeResponse::GetTypeName() const {
  return "cockroach.roachpb.AdminMergeResponse";
}


// ===================================================================

void AdminTransferLeaseRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminTransferLeaseRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminTransferLeaseRequest::kHeaderFieldNumber;
const int AdminTransferLeaseRequest::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminTransferLeaseRequest::AdminTransferLeaseRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminTransferLeaseRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminTransferLeaseRequest)
}
AdminTransferLeaseRequest::AdminTransferLeaseRequest(const AdminTransferLeaseRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminTransferLeaseRequest)
}

void AdminTransferLeaseRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&header_)) + sizeof(target_));
}

AdminTransferLeaseRequest::~AdminTransferLeaseRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminTransferLeaseRequest)
  SharedDtor();
}

void AdminTransferLeaseRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminTransferLeaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminTransferLeaseRequest& AdminTransferLeaseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminTransferLeaseRequest.base);
  return *internal_default_instance();
}


void AdminTransferLeaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminTransferLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  target_ = 0;
  _internal_metadata_.Clear();
}

bool AdminTransferLeaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminTransferLeaseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminTransferLeaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminTransferLeaseRequest)
  return false;
#undef DO_
}

void AdminTransferLeaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminTransferLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminTransferLeaseRequest)
}

size_t AdminTransferLeaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminTransferLeaseRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminTransferLeaseRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminTransferLeaseRequest*>(&from));
}

void AdminTransferLeaseRequest::MergeFrom(const AdminTransferLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminTransferLeaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
}

void AdminTransferLeaseRequest::CopyFrom(const AdminTransferLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminTransferLeaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminTransferLeaseRequest::IsInitialized() const {
  return true;
}

void AdminTransferLeaseRequest::Swap(AdminTransferLeaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminTransferLeaseRequest::InternalSwap(AdminTransferLeaseRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(target_, other->target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminTransferLeaseRequest::GetTypeName() const {
  return "cockroach.roachpb.AdminTransferLeaseRequest";
}


// ===================================================================

void AdminTransferLeaseResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminTransferLeaseResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminTransferLeaseResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminTransferLeaseResponse::AdminTransferLeaseResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminTransferLeaseResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminTransferLeaseResponse)
}
AdminTransferLeaseResponse::AdminTransferLeaseResponse(const AdminTransferLeaseResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminTransferLeaseResponse)
}

void AdminTransferLeaseResponse::SharedCtor() {
  header_ = NULL;
}

AdminTransferLeaseResponse::~AdminTransferLeaseResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminTransferLeaseResponse)
  SharedDtor();
}

void AdminTransferLeaseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminTransferLeaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminTransferLeaseResponse& AdminTransferLeaseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminTransferLeaseResponse.base);
  return *internal_default_instance();
}


void AdminTransferLeaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminTransferLeaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminTransferLeaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminTransferLeaseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminTransferLeaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminTransferLeaseResponse)
  return false;
#undef DO_
}

void AdminTransferLeaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminTransferLeaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminTransferLeaseResponse)
}

size_t AdminTransferLeaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminTransferLeaseResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminTransferLeaseResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminTransferLeaseResponse*>(&from));
}

void AdminTransferLeaseResponse::MergeFrom(const AdminTransferLeaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminTransferLeaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AdminTransferLeaseResponse::CopyFrom(const AdminTransferLeaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminTransferLeaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminTransferLeaseResponse::IsInitialized() const {
  return true;
}

void AdminTransferLeaseResponse::Swap(AdminTransferLeaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminTransferLeaseResponse::InternalSwap(AdminTransferLeaseResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminTransferLeaseResponse::GetTypeName() const {
  return "cockroach.roachpb.AdminTransferLeaseResponse";
}


// ===================================================================

void ReplicationChange::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ReplicationChange_default_instance_._instance.get_mutable()->target_ = const_cast< ::cockroach::roachpb::ReplicationTarget*>(
      ::cockroach::roachpb::ReplicationTarget::internal_default_instance());
}
void ReplicationChange::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicationChange::kChangeTypeFieldNumber;
const int ReplicationChange::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicationChange::ReplicationChange()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ReplicationChange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicationChange)
}
ReplicationChange::ReplicationChange(const ReplicationChange& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::cockroach::roachpb::ReplicationTarget(*from.target_);
  } else {
    target_ = NULL;
  }
  change_type_ = from.change_type_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicationChange)
}

void ReplicationChange::SharedCtor() {
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_) -
      reinterpret_cast<char*>(&target_)) + sizeof(change_type_));
}

ReplicationChange::~ReplicationChange() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicationChange)
  SharedDtor();
}

void ReplicationChange::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void ReplicationChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicationChange& ReplicationChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ReplicationChange.base);
  return *internal_default_instance();
}


void ReplicationChange::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReplicationChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
  change_type_ = 0;
  _internal_metadata_.Clear();
}

bool ReplicationChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicationChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.ReplicaChangeType change_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::cockroach::roachpb::ReplicaChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicationChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicationChange)
  return false;
#undef DO_
}

void ReplicationChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicationChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.ReplicaChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_target(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicationChange)
}

size_t ReplicationChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReplicationChange)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .cockroach.roachpb.ReplicaChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicationChange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicationChange*>(&from));
}

void ReplicationChange::MergeFrom(const ReplicationChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReplicationChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::cockroach::roachpb::ReplicationTarget::MergeFrom(from.target());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
}

void ReplicationChange::CopyFrom(const ReplicationChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReplicationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationChange::IsInitialized() const {
  return true;
}

void ReplicationChange::Swap(ReplicationChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicationChange::InternalSwap(ReplicationChange* other) {
  using std::swap;
  swap(target_, other->target_);
  swap(change_type_, other->change_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReplicationChange::GetTypeName() const {
  return "cockroach.roachpb.ReplicationChange";
}


// ===================================================================

void AdminChangeReplicasRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminChangeReplicasRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_AdminChangeReplicasRequest_default_instance_._instance.get_mutable()->exp_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
}
void AdminChangeReplicasRequest::clear_deprecated_targets() {
  deprecated_targets_.Clear();
}
void AdminChangeReplicasRequest::clear_exp_desc() {
  if (GetArenaNoVirtual() == NULL && exp_desc_ != NULL) {
    delete exp_desc_;
  }
  exp_desc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminChangeReplicasRequest::kHeaderFieldNumber;
const int AdminChangeReplicasRequest::kDeprecatedChangeTypeFieldNumber;
const int AdminChangeReplicasRequest::kDeprecatedTargetsFieldNumber;
const int AdminChangeReplicasRequest::kExpDescFieldNumber;
const int AdminChangeReplicasRequest::kInternalChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminChangeReplicasRequest::AdminChangeReplicasRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminChangeReplicasRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminChangeReplicasRequest)
}
AdminChangeReplicasRequest::AdminChangeReplicasRequest(const AdminChangeReplicasRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      deprecated_targets_(from.deprecated_targets_),
      internal_changes_(from.internal_changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_exp_desc()) {
    exp_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.exp_desc_);
  } else {
    exp_desc_ = NULL;
  }
  deprecated_change_type_ = from.deprecated_change_type_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminChangeReplicasRequest)
}

void AdminChangeReplicasRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_change_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(deprecated_change_type_));
}

AdminChangeReplicasRequest::~AdminChangeReplicasRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminChangeReplicasRequest)
  SharedDtor();
}

void AdminChangeReplicasRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete exp_desc_;
}

void AdminChangeReplicasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminChangeReplicasRequest& AdminChangeReplicasRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminChangeReplicasRequest.base);
  return *internal_default_instance();
}


void AdminChangeReplicasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminChangeReplicasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_targets_.Clear();
  internal_changes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && exp_desc_ != NULL) {
    delete exp_desc_;
  }
  exp_desc_ = NULL;
  deprecated_change_type_ = 0;
  _internal_metadata_.Clear();
}

bool AdminChangeReplicasRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminChangeReplicasRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ReplicaChangeType deprecated_change_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_deprecated_change_type(static_cast< ::cockroach::roachpb::ReplicaChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deprecated_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exp_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_internal_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminChangeReplicasRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminChangeReplicasRequest)
  return false;
#undef DO_
}

void AdminChangeReplicasRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminChangeReplicasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // .cockroach.roachpb.ReplicaChangeType deprecated_change_type = 2;
  if (this->deprecated_change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->deprecated_change_type(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deprecated_targets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->deprecated_targets(static_cast<int>(i)),
      output);
  }

  if (this->has_exp_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_exp_desc(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_changes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->internal_changes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminChangeReplicasRequest)
}

size_t AdminChangeReplicasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminChangeReplicasRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->deprecated_targets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deprecated_targets(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->internal_changes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->internal_changes(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_exp_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exp_desc_);
  }

  // .cockroach.roachpb.ReplicaChangeType deprecated_change_type = 2;
  if (this->deprecated_change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->deprecated_change_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminChangeReplicasRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminChangeReplicasRequest*>(&from));
}

void AdminChangeReplicasRequest::MergeFrom(const AdminChangeReplicasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminChangeReplicasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_targets_.MergeFrom(from.deprecated_targets_);
  internal_changes_.MergeFrom(from.internal_changes_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_exp_desc()) {
    mutable_exp_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.exp_desc());
  }
  if (from.deprecated_change_type() != 0) {
    set_deprecated_change_type(from.deprecated_change_type());
  }
}

void AdminChangeReplicasRequest::CopyFrom(const AdminChangeReplicasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminChangeReplicasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminChangeReplicasRequest::IsInitialized() const {
  return true;
}

void AdminChangeReplicasRequest::Swap(AdminChangeReplicasRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminChangeReplicasRequest::InternalSwap(AdminChangeReplicasRequest* other) {
  using std::swap;
  CastToBase(&deprecated_targets_)->InternalSwap(CastToBase(&other->deprecated_targets_));
  CastToBase(&internal_changes_)->InternalSwap(CastToBase(&other->internal_changes_));
  swap(header_, other->header_);
  swap(exp_desc_, other->exp_desc_);
  swap(deprecated_change_type_, other->deprecated_change_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminChangeReplicasRequest::GetTypeName() const {
  return "cockroach.roachpb.AdminChangeReplicasRequest";
}


// ===================================================================

void AdminChangeReplicasResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminChangeReplicasResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_AdminChangeReplicasResponse_default_instance_._instance.get_mutable()->desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
}
void AdminChangeReplicasResponse::clear_desc() {
  if (GetArenaNoVirtual() == NULL && desc_ != NULL) {
    delete desc_;
  }
  desc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminChangeReplicasResponse::kHeaderFieldNumber;
const int AdminChangeReplicasResponse::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminChangeReplicasResponse::AdminChangeReplicasResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminChangeReplicasResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminChangeReplicasResponse)
}
AdminChangeReplicasResponse::AdminChangeReplicasResponse(const AdminChangeReplicasResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_desc()) {
    desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.desc_);
  } else {
    desc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminChangeReplicasResponse)
}

void AdminChangeReplicasResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desc_) -
      reinterpret_cast<char*>(&header_)) + sizeof(desc_));
}

AdminChangeReplicasResponse::~AdminChangeReplicasResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminChangeReplicasResponse)
  SharedDtor();
}

void AdminChangeReplicasResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete desc_;
}

void AdminChangeReplicasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminChangeReplicasResponse& AdminChangeReplicasResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminChangeReplicasResponse.base);
  return *internal_default_instance();
}


void AdminChangeReplicasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminChangeReplicasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && desc_ != NULL) {
    delete desc_;
  }
  desc_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminChangeReplicasResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminChangeReplicasResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminChangeReplicasResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminChangeReplicasResponse)
  return false;
#undef DO_
}

void AdminChangeReplicasResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminChangeReplicasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_desc(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminChangeReplicasResponse)
}

size_t AdminChangeReplicasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminChangeReplicasResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *desc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminChangeReplicasResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminChangeReplicasResponse*>(&from));
}

void AdminChangeReplicasResponse::MergeFrom(const AdminChangeReplicasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminChangeReplicasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_desc()) {
    mutable_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.desc());
  }
}

void AdminChangeReplicasResponse::CopyFrom(const AdminChangeReplicasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminChangeReplicasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminChangeReplicasResponse::IsInitialized() const {
  return true;
}

void AdminChangeReplicasResponse::Swap(AdminChangeReplicasResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminChangeReplicasResponse::InternalSwap(AdminChangeReplicasResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(desc_, other->desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminChangeReplicasResponse::GetTypeName() const {
  return "cockroach.roachpb.AdminChangeReplicasResponse";
}


// ===================================================================

void AdminRelocateRangeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminRelocateRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
void AdminRelocateRangeRequest::clear_targets() {
  targets_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRelocateRangeRequest::kHeaderFieldNumber;
const int AdminRelocateRangeRequest::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRelocateRangeRequest::AdminRelocateRangeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminRelocateRangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminRelocateRangeRequest)
}
AdminRelocateRangeRequest::AdminRelocateRangeRequest(const AdminRelocateRangeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminRelocateRangeRequest)
}

void AdminRelocateRangeRequest::SharedCtor() {
  header_ = NULL;
}

AdminRelocateRangeRequest::~AdminRelocateRangeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminRelocateRangeRequest)
  SharedDtor();
}

void AdminRelocateRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminRelocateRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminRelocateRangeRequest& AdminRelocateRangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminRelocateRangeRequest.base);
  return *internal_default_instance();
}


void AdminRelocateRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminRelocateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminRelocateRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminRelocateRangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminRelocateRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminRelocateRangeRequest)
  return false;
#undef DO_
}

void AdminRelocateRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminRelocateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->targets(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminRelocateRangeRequest)
}

size_t AdminRelocateRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminRelocateRangeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->targets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->targets(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminRelocateRangeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminRelocateRangeRequest*>(&from));
}

void AdminRelocateRangeRequest::MergeFrom(const AdminRelocateRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminRelocateRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
}

void AdminRelocateRangeRequest::CopyFrom(const AdminRelocateRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminRelocateRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRelocateRangeRequest::IsInitialized() const {
  return true;
}

void AdminRelocateRangeRequest::Swap(AdminRelocateRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRelocateRangeRequest::InternalSwap(AdminRelocateRangeRequest* other) {
  using std::swap;
  CastToBase(&targets_)->InternalSwap(CastToBase(&other->targets_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminRelocateRangeRequest::GetTypeName() const {
  return "cockroach.roachpb.AdminRelocateRangeRequest";
}


// ===================================================================

void AdminRelocateRangeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminRelocateRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRelocateRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRelocateRangeResponse::AdminRelocateRangeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminRelocateRangeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminRelocateRangeResponse)
}
AdminRelocateRangeResponse::AdminRelocateRangeResponse(const AdminRelocateRangeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminRelocateRangeResponse)
}

void AdminRelocateRangeResponse::SharedCtor() {
  header_ = NULL;
}

AdminRelocateRangeResponse::~AdminRelocateRangeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminRelocateRangeResponse)
  SharedDtor();
}

void AdminRelocateRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminRelocateRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminRelocateRangeResponse& AdminRelocateRangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminRelocateRangeResponse.base);
  return *internal_default_instance();
}


void AdminRelocateRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminRelocateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminRelocateRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminRelocateRangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminRelocateRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminRelocateRangeResponse)
  return false;
#undef DO_
}

void AdminRelocateRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminRelocateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminRelocateRangeResponse)
}

size_t AdminRelocateRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminRelocateRangeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminRelocateRangeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminRelocateRangeResponse*>(&from));
}

void AdminRelocateRangeResponse::MergeFrom(const AdminRelocateRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminRelocateRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AdminRelocateRangeResponse::CopyFrom(const AdminRelocateRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminRelocateRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRelocateRangeResponse::IsInitialized() const {
  return true;
}

void AdminRelocateRangeResponse::Swap(AdminRelocateRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRelocateRangeResponse::InternalSwap(AdminRelocateRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminRelocateRangeResponse::GetTypeName() const {
  return "cockroach.roachpb.AdminRelocateRangeResponse";
}


// ===================================================================

void HeartbeatTxnRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_HeartbeatTxnRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_HeartbeatTxnRequest_default_instance_._instance.get_mutable()->now_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void HeartbeatTxnRequest::clear_now() {
  if (GetArenaNoVirtual() == NULL && now_ != NULL) {
    delete now_;
  }
  now_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatTxnRequest::kHeaderFieldNumber;
const int HeartbeatTxnRequest::kNowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatTxnRequest::HeartbeatTxnRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_HeartbeatTxnRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.HeartbeatTxnRequest)
}
HeartbeatTxnRequest::HeartbeatTxnRequest(const HeartbeatTxnRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_now()) {
    now_ = new ::cockroach::util::hlc::Timestamp(*from.now_);
  } else {
    now_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.HeartbeatTxnRequest)
}

void HeartbeatTxnRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&now_) -
      reinterpret_cast<char*>(&header_)) + sizeof(now_));
}

HeartbeatTxnRequest::~HeartbeatTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.HeartbeatTxnRequest)
  SharedDtor();
}

void HeartbeatTxnRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete now_;
}

void HeartbeatTxnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatTxnRequest& HeartbeatTxnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_HeartbeatTxnRequest.base);
  return *internal_default_instance();
}


void HeartbeatTxnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.HeartbeatTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && now_ != NULL) {
    delete now_;
  }
  now_ = NULL;
  _internal_metadata_.Clear();
}

bool HeartbeatTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.HeartbeatTxnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.HeartbeatTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.HeartbeatTxnRequest)
  return false;
#undef DO_
}

void HeartbeatTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.HeartbeatTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_now(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.HeartbeatTxnRequest)
}

size_t HeartbeatTxnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.HeartbeatTxnRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_now()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *now_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatTxnRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HeartbeatTxnRequest*>(&from));
}

void HeartbeatTxnRequest::MergeFrom(const HeartbeatTxnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.HeartbeatTxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_now()) {
    mutable_now()->::cockroach::util::hlc::Timestamp::MergeFrom(from.now());
  }
}

void HeartbeatTxnRequest::CopyFrom(const HeartbeatTxnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.HeartbeatTxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatTxnRequest::IsInitialized() const {
  return true;
}

void HeartbeatTxnRequest::Swap(HeartbeatTxnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatTxnRequest::InternalSwap(HeartbeatTxnRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(now_, other->now_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string HeartbeatTxnRequest::GetTypeName() const {
  return "cockroach.roachpb.HeartbeatTxnRequest";
}


// ===================================================================

void HeartbeatTxnResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_HeartbeatTxnResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatTxnResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatTxnResponse::HeartbeatTxnResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_HeartbeatTxnResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.HeartbeatTxnResponse)
}
HeartbeatTxnResponse::HeartbeatTxnResponse(const HeartbeatTxnResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.HeartbeatTxnResponse)
}

void HeartbeatTxnResponse::SharedCtor() {
  header_ = NULL;
}

HeartbeatTxnResponse::~HeartbeatTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.HeartbeatTxnResponse)
  SharedDtor();
}

void HeartbeatTxnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void HeartbeatTxnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatTxnResponse& HeartbeatTxnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_HeartbeatTxnResponse.base);
  return *internal_default_instance();
}


void HeartbeatTxnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.HeartbeatTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool HeartbeatTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.HeartbeatTxnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.HeartbeatTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.HeartbeatTxnResponse)
  return false;
#undef DO_
}

void HeartbeatTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.HeartbeatTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.HeartbeatTxnResponse)
}

size_t HeartbeatTxnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.HeartbeatTxnResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatTxnResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HeartbeatTxnResponse*>(&from));
}

void HeartbeatTxnResponse::MergeFrom(const HeartbeatTxnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.HeartbeatTxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void HeartbeatTxnResponse::CopyFrom(const HeartbeatTxnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.HeartbeatTxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatTxnResponse::IsInitialized() const {
  return true;
}

void HeartbeatTxnResponse::Swap(HeartbeatTxnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatTxnResponse::InternalSwap(HeartbeatTxnResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string HeartbeatTxnResponse::GetTypeName() const {
  return "cockroach.roachpb.HeartbeatTxnResponse";
}


// ===================================================================

void GCRequest_GCKey::InitAsDefaultInstance() {
  ::cockroach::roachpb::_GCRequest_GCKey_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void GCRequest_GCKey::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCRequest_GCKey::kKeyFieldNumber;
const int GCRequest_GCKey::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCRequest_GCKey::GCRequest_GCKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_GCRequest_GCKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.GCRequest.GCKey)
}
GCRequest_GCKey::GCRequest_GCKey(const GCRequest_GCKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.GCRequest.GCKey)
}

void GCRequest_GCKey::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
}

GCRequest_GCKey::~GCRequest_GCKey() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.GCRequest.GCKey)
  SharedDtor();
}

void GCRequest_GCKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void GCRequest_GCKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GCRequest_GCKey& GCRequest_GCKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_GCRequest_GCKey.base);
  return *internal_default_instance();
}


void GCRequest_GCKey::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.GCRequest.GCKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool GCRequest_GCKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.GCRequest.GCKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.GCRequest.GCKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.GCRequest.GCKey)
  return false;
#undef DO_
}

void GCRequest_GCKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.GCRequest.GCKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.GCRequest.GCKey)
}

size_t GCRequest_GCKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.GCRequest.GCKey)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GCRequest_GCKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GCRequest_GCKey*>(&from));
}

void GCRequest_GCKey::MergeFrom(const GCRequest_GCKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.GCRequest.GCKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
}

void GCRequest_GCKey::CopyFrom(const GCRequest_GCKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.GCRequest.GCKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRequest_GCKey::IsInitialized() const {
  return true;
}

void GCRequest_GCKey::Swap(GCRequest_GCKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCRequest_GCKey::InternalSwap(GCRequest_GCKey* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GCRequest_GCKey::GetTypeName() const {
  return "cockroach.roachpb.GCRequest.GCKey";
}


// ===================================================================

void GCRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_GCRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_GCRequest_default_instance_._instance.get_mutable()->threshold_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void GCRequest::clear_threshold() {
  if (GetArenaNoVirtual() == NULL && threshold_ != NULL) {
    delete threshold_;
  }
  threshold_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCRequest::kHeaderFieldNumber;
const int GCRequest::kKeysFieldNumber;
const int GCRequest::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCRequest::GCRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_GCRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.GCRequest)
}
GCRequest::GCRequest(const GCRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_threshold()) {
    threshold_ = new ::cockroach::util::hlc::Timestamp(*from.threshold_);
  } else {
    threshold_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.GCRequest)
}

void GCRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&header_)) + sizeof(threshold_));
}

GCRequest::~GCRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.GCRequest)
  SharedDtor();
}

void GCRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete threshold_;
}

void GCRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GCRequest& GCRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_GCRequest.base);
  return *internal_default_instance();
}


void GCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.GCRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && threshold_ != NULL) {
    delete threshold_;
  }
  threshold_ = NULL;
  _internal_metadata_.Clear();
}

bool GCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.GCRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.GCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.GCRequest)
  return false;
#undef DO_
}

void GCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.GCRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->keys(static_cast<int>(i)),
      output);
  }

  if (this->has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_threshold(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.GCRequest)
}

size_t GCRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.GCRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *threshold_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GCRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GCRequest*>(&from));
}

void GCRequest::MergeFrom(const GCRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.GCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_threshold()) {
    mutable_threshold()->::cockroach::util::hlc::Timestamp::MergeFrom(from.threshold());
  }
}

void GCRequest::CopyFrom(const GCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.GCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRequest::IsInitialized() const {
  return true;
}

void GCRequest::Swap(GCRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCRequest::InternalSwap(GCRequest* other) {
  using std::swap;
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
  swap(header_, other->header_);
  swap(threshold_, other->threshold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GCRequest::GetTypeName() const {
  return "cockroach.roachpb.GCRequest";
}


// ===================================================================

void GCResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_GCResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCResponse::GCResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_GCResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.GCResponse)
}
GCResponse::GCResponse(const GCResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.GCResponse)
}

void GCResponse::SharedCtor() {
  header_ = NULL;
}

GCResponse::~GCResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.GCResponse)
  SharedDtor();
}

void GCResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GCResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GCResponse& GCResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_GCResponse.base);
  return *internal_default_instance();
}


void GCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.GCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.GCResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.GCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.GCResponse)
  return false;
#undef DO_
}

void GCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.GCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.GCResponse)
}

size_t GCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.GCResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GCResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GCResponse*>(&from));
}

void GCResponse::MergeFrom(const GCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.GCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void GCResponse::CopyFrom(const GCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.GCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCResponse::IsInitialized() const {
  return true;
}

void GCResponse::Swap(GCResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCResponse::InternalSwap(GCResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GCResponse::GetTypeName() const {
  return "cockroach.roachpb.GCResponse";
}


// ===================================================================

void PushTxnRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_PushTxnRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_PushTxnRequest_default_instance_._instance.get_mutable()->pusher_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
  ::cockroach::roachpb::_PushTxnRequest_default_instance_._instance.get_mutable()->pushee_txn_ = const_cast< ::cockroach::storage::enginepb::TxnMeta*>(
      ::cockroach::storage::enginepb::TxnMeta::internal_default_instance());
  ::cockroach::roachpb::_PushTxnRequest_default_instance_._instance.get_mutable()->push_to_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void PushTxnRequest::clear_pusher_txn() {
  if (GetArenaNoVirtual() == NULL && pusher_txn_ != NULL) {
    delete pusher_txn_;
  }
  pusher_txn_ = NULL;
}
void PushTxnRequest::clear_pushee_txn() {
  if (GetArenaNoVirtual() == NULL && pushee_txn_ != NULL) {
    delete pushee_txn_;
  }
  pushee_txn_ = NULL;
}
void PushTxnRequest::clear_push_to() {
  if (GetArenaNoVirtual() == NULL && push_to_ != NULL) {
    delete push_to_;
  }
  push_to_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushTxnRequest::kHeaderFieldNumber;
const int PushTxnRequest::kPusherTxnFieldNumber;
const int PushTxnRequest::kPusheeTxnFieldNumber;
const int PushTxnRequest::kPushToFieldNumber;
const int PushTxnRequest::kPushTypeFieldNumber;
const int PushTxnRequest::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushTxnRequest::PushTxnRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_PushTxnRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.PushTxnRequest)
}
PushTxnRequest::PushTxnRequest(const PushTxnRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pusher_txn()) {
    pusher_txn_ = new ::cockroach::roachpb::Transaction(*from.pusher_txn_);
  } else {
    pusher_txn_ = NULL;
  }
  if (from.has_pushee_txn()) {
    pushee_txn_ = new ::cockroach::storage::enginepb::TxnMeta(*from.pushee_txn_);
  } else {
    pushee_txn_ = NULL;
  }
  if (from.has_push_to()) {
    push_to_ = new ::cockroach::util::hlc::Timestamp(*from.push_to_);
  } else {
    push_to_ = NULL;
  }
  ::memcpy(&push_type_, &from.push_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&push_type_)) + sizeof(force_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.PushTxnRequest)
}

void PushTxnRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&header_)) + sizeof(force_));
}

PushTxnRequest::~PushTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.PushTxnRequest)
  SharedDtor();
}

void PushTxnRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pusher_txn_;
  if (this != internal_default_instance()) delete pushee_txn_;
  if (this != internal_default_instance()) delete push_to_;
}

void PushTxnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushTxnRequest& PushTxnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_PushTxnRequest.base);
  return *internal_default_instance();
}


void PushTxnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.PushTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && pusher_txn_ != NULL) {
    delete pusher_txn_;
  }
  pusher_txn_ = NULL;
  if (GetArenaNoVirtual() == NULL && pushee_txn_ != NULL) {
    delete pushee_txn_;
  }
  pushee_txn_ = NULL;
  if (GetArenaNoVirtual() == NULL && push_to_ != NULL) {
    delete push_to_;
  }
  push_to_ = NULL;
  ::memset(&push_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&push_type_)) + sizeof(force_));
  _internal_metadata_.Clear();
}

bool PushTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.PushTxnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pusher_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_push_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.PushTxnType push_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_push_type(static_cast< ::cockroach::roachpb::PushTxnType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool force = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.PushTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.PushTxnRequest)
  return false;
#undef DO_
}

void PushTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.PushTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_pusher_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_pusher_txn(), output);
  }

  if (this->has_pushee_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_pushee_txn(), output);
  }

  if (this->has_push_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_push_to(), output);
  }

  // .cockroach.roachpb.PushTxnType push_type = 6;
  if (this->push_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->push_type(), output);
  }

  // bool force = 7;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.PushTxnRequest)
}

size_t PushTxnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.PushTxnRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_pusher_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pusher_txn_);
  }

  if (this->has_pushee_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pushee_txn_);
  }

  if (this->has_push_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *push_to_);
  }

  // .cockroach.roachpb.PushTxnType push_type = 6;
  if (this->push_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_type());
  }

  // bool force = 7;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushTxnRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushTxnRequest*>(&from));
}

void PushTxnRequest::MergeFrom(const PushTxnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.PushTxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_pusher_txn()) {
    mutable_pusher_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.pusher_txn());
  }
  if (from.has_pushee_txn()) {
    mutable_pushee_txn()->::cockroach::storage::enginepb::TxnMeta::MergeFrom(from.pushee_txn());
  }
  if (from.has_push_to()) {
    mutable_push_to()->::cockroach::util::hlc::Timestamp::MergeFrom(from.push_to());
  }
  if (from.push_type() != 0) {
    set_push_type(from.push_type());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
}

void PushTxnRequest::CopyFrom(const PushTxnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.PushTxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushTxnRequest::IsInitialized() const {
  return true;
}

void PushTxnRequest::Swap(PushTxnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushTxnRequest::InternalSwap(PushTxnRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(pusher_txn_, other->pusher_txn_);
  swap(pushee_txn_, other->pushee_txn_);
  swap(push_to_, other->push_to_);
  swap(push_type_, other->push_type_);
  swap(force_, other->force_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PushTxnRequest::GetTypeName() const {
  return "cockroach.roachpb.PushTxnRequest";
}


// ===================================================================

void PushTxnResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_PushTxnResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_PushTxnResponse_default_instance_._instance.get_mutable()->pushee_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}
void PushTxnResponse::clear_pushee_txn() {
  if (GetArenaNoVirtual() == NULL && pushee_txn_ != NULL) {
    delete pushee_txn_;
  }
  pushee_txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushTxnResponse::kHeaderFieldNumber;
const int PushTxnResponse::kPusheeTxnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushTxnResponse::PushTxnResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_PushTxnResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.PushTxnResponse)
}
PushTxnResponse::PushTxnResponse(const PushTxnResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pushee_txn()) {
    pushee_txn_ = new ::cockroach::roachpb::Transaction(*from.pushee_txn_);
  } else {
    pushee_txn_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.PushTxnResponse)
}

void PushTxnResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pushee_txn_) -
      reinterpret_cast<char*>(&header_)) + sizeof(pushee_txn_));
}

PushTxnResponse::~PushTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.PushTxnResponse)
  SharedDtor();
}

void PushTxnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pushee_txn_;
}

void PushTxnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushTxnResponse& PushTxnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_PushTxnResponse.base);
  return *internal_default_instance();
}


void PushTxnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.PushTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && pushee_txn_ != NULL) {
    delete pushee_txn_;
  }
  pushee_txn_ = NULL;
  _internal_metadata_.Clear();
}

bool PushTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.PushTxnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.PushTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.PushTxnResponse)
  return false;
#undef DO_
}

void PushTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.PushTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_pushee_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_pushee_txn(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.PushTxnResponse)
}

size_t PushTxnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.PushTxnResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_pushee_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pushee_txn_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushTxnResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushTxnResponse*>(&from));
}

void PushTxnResponse::MergeFrom(const PushTxnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.PushTxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_pushee_txn()) {
    mutable_pushee_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.pushee_txn());
  }
}

void PushTxnResponse::CopyFrom(const PushTxnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.PushTxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushTxnResponse::IsInitialized() const {
  return true;
}

void PushTxnResponse::Swap(PushTxnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushTxnResponse::InternalSwap(PushTxnResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(pushee_txn_, other->pushee_txn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PushTxnResponse::GetTypeName() const {
  return "cockroach.roachpb.PushTxnResponse";
}


// ===================================================================

void RecoverTxnRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RecoverTxnRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_RecoverTxnRequest_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::storage::enginepb::TxnMeta*>(
      ::cockroach::storage::enginepb::TxnMeta::internal_default_instance());
}
void RecoverTxnRequest::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoverTxnRequest::kHeaderFieldNumber;
const int RecoverTxnRequest::kTxnFieldNumber;
const int RecoverTxnRequest::kImplicitlyCommittedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverTxnRequest::RecoverTxnRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RecoverTxnRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RecoverTxnRequest)
}
RecoverTxnRequest::RecoverTxnRequest(const RecoverTxnRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::cockroach::storage::enginepb::TxnMeta(*from.txn_);
  } else {
    txn_ = NULL;
  }
  implicitly_committed_ = from.implicitly_committed_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RecoverTxnRequest)
}

void RecoverTxnRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&implicitly_committed_) -
      reinterpret_cast<char*>(&header_)) + sizeof(implicitly_committed_));
}

RecoverTxnRequest::~RecoverTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RecoverTxnRequest)
  SharedDtor();
}

void RecoverTxnRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete txn_;
}

void RecoverTxnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverTxnRequest& RecoverTxnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RecoverTxnRequest.base);
  return *internal_default_instance();
}


void RecoverTxnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RecoverTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  implicitly_committed_ = false;
  _internal_metadata_.Clear();
}

bool RecoverTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RecoverTxnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool implicitly_committed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &implicitly_committed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RecoverTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RecoverTxnRequest)
  return false;
#undef DO_
}

void RecoverTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RecoverTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_txn(), output);
  }

  // bool implicitly_committed = 3;
  if (this->implicitly_committed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->implicitly_committed(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RecoverTxnRequest)
}

size_t RecoverTxnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RecoverTxnRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // bool implicitly_committed = 3;
  if (this->implicitly_committed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverTxnRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecoverTxnRequest*>(&from));
}

void RecoverTxnRequest::MergeFrom(const RecoverTxnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RecoverTxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_txn()) {
    mutable_txn()->::cockroach::storage::enginepb::TxnMeta::MergeFrom(from.txn());
  }
  if (from.implicitly_committed() != 0) {
    set_implicitly_committed(from.implicitly_committed());
  }
}

void RecoverTxnRequest::CopyFrom(const RecoverTxnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RecoverTxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverTxnRequest::IsInitialized() const {
  return true;
}

void RecoverTxnRequest::Swap(RecoverTxnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverTxnRequest::InternalSwap(RecoverTxnRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(txn_, other->txn_);
  swap(implicitly_committed_, other->implicitly_committed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RecoverTxnRequest::GetTypeName() const {
  return "cockroach.roachpb.RecoverTxnRequest";
}


// ===================================================================

void RecoverTxnResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RecoverTxnResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_RecoverTxnResponse_default_instance_._instance.get_mutable()->recovered_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}
void RecoverTxnResponse::clear_recovered_txn() {
  if (GetArenaNoVirtual() == NULL && recovered_txn_ != NULL) {
    delete recovered_txn_;
  }
  recovered_txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoverTxnResponse::kHeaderFieldNumber;
const int RecoverTxnResponse::kRecoveredTxnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverTxnResponse::RecoverTxnResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RecoverTxnResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RecoverTxnResponse)
}
RecoverTxnResponse::RecoverTxnResponse(const RecoverTxnResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_recovered_txn()) {
    recovered_txn_ = new ::cockroach::roachpb::Transaction(*from.recovered_txn_);
  } else {
    recovered_txn_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RecoverTxnResponse)
}

void RecoverTxnResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recovered_txn_) -
      reinterpret_cast<char*>(&header_)) + sizeof(recovered_txn_));
}

RecoverTxnResponse::~RecoverTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RecoverTxnResponse)
  SharedDtor();
}

void RecoverTxnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete recovered_txn_;
}

void RecoverTxnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverTxnResponse& RecoverTxnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RecoverTxnResponse.base);
  return *internal_default_instance();
}


void RecoverTxnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RecoverTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && recovered_txn_ != NULL) {
    delete recovered_txn_;
  }
  recovered_txn_ = NULL;
  _internal_metadata_.Clear();
}

bool RecoverTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RecoverTxnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recovered_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RecoverTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RecoverTxnResponse)
  return false;
#undef DO_
}

void RecoverTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RecoverTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_recovered_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_recovered_txn(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RecoverTxnResponse)
}

size_t RecoverTxnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RecoverTxnResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_recovered_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *recovered_txn_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverTxnResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecoverTxnResponse*>(&from));
}

void RecoverTxnResponse::MergeFrom(const RecoverTxnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RecoverTxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_recovered_txn()) {
    mutable_recovered_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.recovered_txn());
  }
}

void RecoverTxnResponse::CopyFrom(const RecoverTxnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RecoverTxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverTxnResponse::IsInitialized() const {
  return true;
}

void RecoverTxnResponse::Swap(RecoverTxnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverTxnResponse::InternalSwap(RecoverTxnResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(recovered_txn_, other->recovered_txn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RecoverTxnResponse::GetTypeName() const {
  return "cockroach.roachpb.RecoverTxnResponse";
}


// ===================================================================

void QueryTxnRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_QueryTxnRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_QueryTxnRequest_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::storage::enginepb::TxnMeta*>(
      ::cockroach::storage::enginepb::TxnMeta::internal_default_instance());
}
void QueryTxnRequest::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryTxnRequest::kHeaderFieldNumber;
const int QueryTxnRequest::kTxnFieldNumber;
const int QueryTxnRequest::kWaitForUpdateFieldNumber;
const int QueryTxnRequest::kKnownWaitingTxnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryTxnRequest::QueryTxnRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_QueryTxnRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.QueryTxnRequest)
}
QueryTxnRequest::QueryTxnRequest(const QueryTxnRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      known_waiting_txns_(from.known_waiting_txns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::cockroach::storage::enginepb::TxnMeta(*from.txn_);
  } else {
    txn_ = NULL;
  }
  wait_for_update_ = from.wait_for_update_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.QueryTxnRequest)
}

void QueryTxnRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_for_update_) -
      reinterpret_cast<char*>(&header_)) + sizeof(wait_for_update_));
}

QueryTxnRequest::~QueryTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.QueryTxnRequest)
  SharedDtor();
}

void QueryTxnRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete txn_;
}

void QueryTxnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryTxnRequest& QueryTxnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_QueryTxnRequest.base);
  return *internal_default_instance();
}


void QueryTxnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.QueryTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  known_waiting_txns_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  wait_for_update_ = false;
  _internal_metadata_.Clear();
}

bool QueryTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.QueryTxnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool wait_for_update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wait_for_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_known_waiting_txns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.QueryTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.QueryTxnRequest)
  return false;
#undef DO_
}

void QueryTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.QueryTxnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_txn(), output);
  }

  // bool wait_for_update = 3;
  if (this->wait_for_update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wait_for_update(), output);
  }

  for (int i = 0, n = this->known_waiting_txns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->known_waiting_txns(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.QueryTxnRequest)
}

size_t QueryTxnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.QueryTxnRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->known_waiting_txns_size());
  for (int i = 0, n = this->known_waiting_txns_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->known_waiting_txns(i));
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // bool wait_for_update = 3;
  if (this->wait_for_update() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryTxnRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryTxnRequest*>(&from));
}

void QueryTxnRequest::MergeFrom(const QueryTxnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.QueryTxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  known_waiting_txns_.MergeFrom(from.known_waiting_txns_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_txn()) {
    mutable_txn()->::cockroach::storage::enginepb::TxnMeta::MergeFrom(from.txn());
  }
  if (from.wait_for_update() != 0) {
    set_wait_for_update(from.wait_for_update());
  }
}

void QueryTxnRequest::CopyFrom(const QueryTxnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.QueryTxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTxnRequest::IsInitialized() const {
  return true;
}

void QueryTxnRequest::Swap(QueryTxnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryTxnRequest::InternalSwap(QueryTxnRequest* other) {
  using std::swap;
  known_waiting_txns_.InternalSwap(CastToBase(&other->known_waiting_txns_));
  swap(header_, other->header_);
  swap(txn_, other->txn_);
  swap(wait_for_update_, other->wait_for_update_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string QueryTxnRequest::GetTypeName() const {
  return "cockroach.roachpb.QueryTxnRequest";
}


// ===================================================================

void QueryTxnResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_QueryTxnResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_QueryTxnResponse_default_instance_._instance.get_mutable()->queried_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}
void QueryTxnResponse::clear_queried_txn() {
  if (GetArenaNoVirtual() == NULL && queried_txn_ != NULL) {
    delete queried_txn_;
  }
  queried_txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryTxnResponse::kHeaderFieldNumber;
const int QueryTxnResponse::kQueriedTxnFieldNumber;
const int QueryTxnResponse::kWaitingTxnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryTxnResponse::QueryTxnResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_QueryTxnResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.QueryTxnResponse)
}
QueryTxnResponse::QueryTxnResponse(const QueryTxnResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      waiting_txns_(from.waiting_txns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_queried_txn()) {
    queried_txn_ = new ::cockroach::roachpb::Transaction(*from.queried_txn_);
  } else {
    queried_txn_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.QueryTxnResponse)
}

void QueryTxnResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queried_txn_) -
      reinterpret_cast<char*>(&header_)) + sizeof(queried_txn_));
}

QueryTxnResponse::~QueryTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.QueryTxnResponse)
  SharedDtor();
}

void QueryTxnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete queried_txn_;
}

void QueryTxnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryTxnResponse& QueryTxnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_QueryTxnResponse.base);
  return *internal_default_instance();
}


void QueryTxnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.QueryTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waiting_txns_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && queried_txn_ != NULL) {
    delete queried_txn_;
  }
  queried_txn_ = NULL;
  _internal_metadata_.Clear();
}

bool QueryTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.QueryTxnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queried_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_waiting_txns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.QueryTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.QueryTxnResponse)
  return false;
#undef DO_
}

void QueryTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.QueryTxnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_queried_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_queried_txn(), output);
  }

  for (int i = 0, n = this->waiting_txns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->waiting_txns(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.QueryTxnResponse)
}

size_t QueryTxnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.QueryTxnResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->waiting_txns_size());
  for (int i = 0, n = this->waiting_txns_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->waiting_txns(i));
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_queried_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *queried_txn_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryTxnResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryTxnResponse*>(&from));
}

void QueryTxnResponse::MergeFrom(const QueryTxnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.QueryTxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waiting_txns_.MergeFrom(from.waiting_txns_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_queried_txn()) {
    mutable_queried_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.queried_txn());
  }
}

void QueryTxnResponse::CopyFrom(const QueryTxnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.QueryTxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTxnResponse::IsInitialized() const {
  return true;
}

void QueryTxnResponse::Swap(QueryTxnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryTxnResponse::InternalSwap(QueryTxnResponse* other) {
  using std::swap;
  waiting_txns_.InternalSwap(CastToBase(&other->waiting_txns_));
  swap(header_, other->header_);
  swap(queried_txn_, other->queried_txn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string QueryTxnResponse::GetTypeName() const {
  return "cockroach.roachpb.QueryTxnResponse";
}


// ===================================================================

void QueryIntentRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_QueryIntentRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_QueryIntentRequest_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::storage::enginepb::TxnMeta*>(
      ::cockroach::storage::enginepb::TxnMeta::internal_default_instance());
}
void QueryIntentRequest::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryIntentRequest::kHeaderFieldNumber;
const int QueryIntentRequest::kTxnFieldNumber;
const int QueryIntentRequest::kErrorIfMissingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryIntentRequest::QueryIntentRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_QueryIntentRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.QueryIntentRequest)
}
QueryIntentRequest::QueryIntentRequest(const QueryIntentRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::cockroach::storage::enginepb::TxnMeta(*from.txn_);
  } else {
    txn_ = NULL;
  }
  error_if_missing_ = from.error_if_missing_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.QueryIntentRequest)
}

void QueryIntentRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_if_missing_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_if_missing_));
}

QueryIntentRequest::~QueryIntentRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.QueryIntentRequest)
  SharedDtor();
}

void QueryIntentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete txn_;
}

void QueryIntentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryIntentRequest& QueryIntentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_QueryIntentRequest.base);
  return *internal_default_instance();
}


void QueryIntentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.QueryIntentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  error_if_missing_ = false;
  _internal_metadata_.Clear();
}

bool QueryIntentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.QueryIntentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool error_if_missing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_if_missing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.QueryIntentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.QueryIntentRequest)
  return false;
#undef DO_
}

void QueryIntentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.QueryIntentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_txn(), output);
  }

  // bool error_if_missing = 3;
  if (this->error_if_missing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->error_if_missing(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.QueryIntentRequest)
}

size_t QueryIntentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.QueryIntentRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // bool error_if_missing = 3;
  if (this->error_if_missing() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryIntentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryIntentRequest*>(&from));
}

void QueryIntentRequest::MergeFrom(const QueryIntentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.QueryIntentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_txn()) {
    mutable_txn()->::cockroach::storage::enginepb::TxnMeta::MergeFrom(from.txn());
  }
  if (from.error_if_missing() != 0) {
    set_error_if_missing(from.error_if_missing());
  }
}

void QueryIntentRequest::CopyFrom(const QueryIntentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.QueryIntentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIntentRequest::IsInitialized() const {
  return true;
}

void QueryIntentRequest::Swap(QueryIntentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryIntentRequest::InternalSwap(QueryIntentRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(txn_, other->txn_);
  swap(error_if_missing_, other->error_if_missing_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string QueryIntentRequest::GetTypeName() const {
  return "cockroach.roachpb.QueryIntentRequest";
}


// ===================================================================

void QueryIntentResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_QueryIntentResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryIntentResponse::kHeaderFieldNumber;
const int QueryIntentResponse::kFoundIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryIntentResponse::QueryIntentResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_QueryIntentResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.QueryIntentResponse)
}
QueryIntentResponse::QueryIntentResponse(const QueryIntentResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  found_intent_ = from.found_intent_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.QueryIntentResponse)
}

void QueryIntentResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_intent_) -
      reinterpret_cast<char*>(&header_)) + sizeof(found_intent_));
}

QueryIntentResponse::~QueryIntentResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.QueryIntentResponse)
  SharedDtor();
}

void QueryIntentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void QueryIntentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryIntentResponse& QueryIntentResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_QueryIntentResponse.base);
  return *internal_default_instance();
}


void QueryIntentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.QueryIntentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  found_intent_ = false;
  _internal_metadata_.Clear();
}

bool QueryIntentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.QueryIntentResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool found_intent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_intent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.QueryIntentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.QueryIntentResponse)
  return false;
#undef DO_
}

void QueryIntentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.QueryIntentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bool found_intent = 2;
  if (this->found_intent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->found_intent(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.QueryIntentResponse)
}

size_t QueryIntentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.QueryIntentResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool found_intent = 2;
  if (this->found_intent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryIntentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryIntentResponse*>(&from));
}

void QueryIntentResponse::MergeFrom(const QueryIntentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.QueryIntentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.found_intent() != 0) {
    set_found_intent(from.found_intent());
  }
}

void QueryIntentResponse::CopyFrom(const QueryIntentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.QueryIntentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIntentResponse::IsInitialized() const {
  return true;
}

void QueryIntentResponse::Swap(QueryIntentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryIntentResponse::InternalSwap(QueryIntentResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(found_intent_, other->found_intent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string QueryIntentResponse::GetTypeName() const {
  return "cockroach.roachpb.QueryIntentResponse";
}


// ===================================================================

void ResolveIntentRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ResolveIntentRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_ResolveIntentRequest_default_instance_._instance.get_mutable()->intent_txn_ = const_cast< ::cockroach::storage::enginepb::TxnMeta*>(
      ::cockroach::storage::enginepb::TxnMeta::internal_default_instance());
}
void ResolveIntentRequest::clear_intent_txn() {
  if (GetArenaNoVirtual() == NULL && intent_txn_ != NULL) {
    delete intent_txn_;
  }
  intent_txn_ = NULL;
}
void ResolveIntentRequest::clear_ignored_seqnums() {
  ignored_seqnums_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveIntentRequest::kHeaderFieldNumber;
const int ResolveIntentRequest::kIntentTxnFieldNumber;
const int ResolveIntentRequest::kStatusFieldNumber;
const int ResolveIntentRequest::kPoisonFieldNumber;
const int ResolveIntentRequest::kIgnoredSeqnumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveIntentRequest::ResolveIntentRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ResolveIntentRequest)
}
ResolveIntentRequest::ResolveIntentRequest(const ResolveIntentRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ignored_seqnums_(from.ignored_seqnums_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_intent_txn()) {
    intent_txn_ = new ::cockroach::storage::enginepb::TxnMeta(*from.intent_txn_);
  } else {
    intent_txn_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&poison_) -
    reinterpret_cast<char*>(&status_)) + sizeof(poison_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ResolveIntentRequest)
}

void ResolveIntentRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poison_) -
      reinterpret_cast<char*>(&header_)) + sizeof(poison_));
}

ResolveIntentRequest::~ResolveIntentRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ResolveIntentRequest)
  SharedDtor();
}

void ResolveIntentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete intent_txn_;
}

void ResolveIntentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveIntentRequest& ResolveIntentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRequest.base);
  return *internal_default_instance();
}


void ResolveIntentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ResolveIntentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignored_seqnums_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && intent_txn_ != NULL) {
    delete intent_txn_;
  }
  intent_txn_ = NULL;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poison_) -
      reinterpret_cast<char*>(&status_)) + sizeof(poison_));
  _internal_metadata_.Clear();
}

bool ResolveIntentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ResolveIntentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intent_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TransactionStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool poison = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &poison_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ignored_seqnums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ResolveIntentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ResolveIntentRequest)
  return false;
#undef DO_
}

void ResolveIntentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ResolveIntentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_intent_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_intent_txn(), output);
  }

  // .cockroach.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // bool poison = 4;
  if (this->poison() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->poison(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ignored_seqnums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->ignored_seqnums(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ResolveIntentRequest)
}

size_t ResolveIntentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ResolveIntentRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->ignored_seqnums_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ignored_seqnums(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_intent_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *intent_txn_);
  }

  // .cockroach.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool poison = 4;
  if (this->poison() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveIntentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResolveIntentRequest*>(&from));
}

void ResolveIntentRequest::MergeFrom(const ResolveIntentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ResolveIntentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignored_seqnums_.MergeFrom(from.ignored_seqnums_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_intent_txn()) {
    mutable_intent_txn()->::cockroach::storage::enginepb::TxnMeta::MergeFrom(from.intent_txn());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.poison() != 0) {
    set_poison(from.poison());
  }
}

void ResolveIntentRequest::CopyFrom(const ResolveIntentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ResolveIntentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveIntentRequest::IsInitialized() const {
  return true;
}

void ResolveIntentRequest::Swap(ResolveIntentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveIntentRequest::InternalSwap(ResolveIntentRequest* other) {
  using std::swap;
  CastToBase(&ignored_seqnums_)->InternalSwap(CastToBase(&other->ignored_seqnums_));
  swap(header_, other->header_);
  swap(intent_txn_, other->intent_txn_);
  swap(status_, other->status_);
  swap(poison_, other->poison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ResolveIntentRequest::GetTypeName() const {
  return "cockroach.roachpb.ResolveIntentRequest";
}


// ===================================================================

void ResolveIntentResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ResolveIntentResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveIntentResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveIntentResponse::ResolveIntentResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ResolveIntentResponse)
}
ResolveIntentResponse::ResolveIntentResponse(const ResolveIntentResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ResolveIntentResponse)
}

void ResolveIntentResponse::SharedCtor() {
  header_ = NULL;
}

ResolveIntentResponse::~ResolveIntentResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ResolveIntentResponse)
  SharedDtor();
}

void ResolveIntentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ResolveIntentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveIntentResponse& ResolveIntentResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentResponse.base);
  return *internal_default_instance();
}


void ResolveIntentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ResolveIntentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ResolveIntentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ResolveIntentResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ResolveIntentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ResolveIntentResponse)
  return false;
#undef DO_
}

void ResolveIntentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ResolveIntentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ResolveIntentResponse)
}

size_t ResolveIntentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ResolveIntentResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveIntentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResolveIntentResponse*>(&from));
}

void ResolveIntentResponse::MergeFrom(const ResolveIntentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ResolveIntentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ResolveIntentResponse::CopyFrom(const ResolveIntentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ResolveIntentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveIntentResponse::IsInitialized() const {
  return true;
}

void ResolveIntentResponse::Swap(ResolveIntentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveIntentResponse::InternalSwap(ResolveIntentResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ResolveIntentResponse::GetTypeName() const {
  return "cockroach.roachpb.ResolveIntentResponse";
}


// ===================================================================

void ResolveIntentRangeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ResolveIntentRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_ResolveIntentRangeRequest_default_instance_._instance.get_mutable()->intent_txn_ = const_cast< ::cockroach::storage::enginepb::TxnMeta*>(
      ::cockroach::storage::enginepb::TxnMeta::internal_default_instance());
  ::cockroach::roachpb::_ResolveIntentRangeRequest_default_instance_._instance.get_mutable()->min_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void ResolveIntentRangeRequest::clear_intent_txn() {
  if (GetArenaNoVirtual() == NULL && intent_txn_ != NULL) {
    delete intent_txn_;
  }
  intent_txn_ = NULL;
}
void ResolveIntentRangeRequest::clear_min_timestamp() {
  if (GetArenaNoVirtual() == NULL && min_timestamp_ != NULL) {
    delete min_timestamp_;
  }
  min_timestamp_ = NULL;
}
void ResolveIntentRangeRequest::clear_ignored_seqnums() {
  ignored_seqnums_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveIntentRangeRequest::kHeaderFieldNumber;
const int ResolveIntentRangeRequest::kIntentTxnFieldNumber;
const int ResolveIntentRangeRequest::kStatusFieldNumber;
const int ResolveIntentRangeRequest::kPoisonFieldNumber;
const int ResolveIntentRangeRequest::kMinTimestampFieldNumber;
const int ResolveIntentRangeRequest::kIgnoredSeqnumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveIntentRangeRequest::ResolveIntentRangeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ResolveIntentRangeRequest)
}
ResolveIntentRangeRequest::ResolveIntentRangeRequest(const ResolveIntentRangeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ignored_seqnums_(from.ignored_seqnums_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_intent_txn()) {
    intent_txn_ = new ::cockroach::storage::enginepb::TxnMeta(*from.intent_txn_);
  } else {
    intent_txn_ = NULL;
  }
  if (from.has_min_timestamp()) {
    min_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.min_timestamp_);
  } else {
    min_timestamp_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&poison_) -
    reinterpret_cast<char*>(&status_)) + sizeof(poison_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ResolveIntentRangeRequest)
}

void ResolveIntentRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poison_) -
      reinterpret_cast<char*>(&header_)) + sizeof(poison_));
}

ResolveIntentRangeRequest::~ResolveIntentRangeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ResolveIntentRangeRequest)
  SharedDtor();
}

void ResolveIntentRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete intent_txn_;
  if (this != internal_default_instance()) delete min_timestamp_;
}

void ResolveIntentRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveIntentRangeRequest& ResolveIntentRangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRangeRequest.base);
  return *internal_default_instance();
}


void ResolveIntentRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ResolveIntentRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignored_seqnums_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && intent_txn_ != NULL) {
    delete intent_txn_;
  }
  intent_txn_ = NULL;
  if (GetArenaNoVirtual() == NULL && min_timestamp_ != NULL) {
    delete min_timestamp_;
  }
  min_timestamp_ = NULL;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poison_) -
      reinterpret_cast<char*>(&status_)) + sizeof(poison_));
  _internal_metadata_.Clear();
}

bool ResolveIntentRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ResolveIntentRangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intent_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TransactionStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool poison = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &poison_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ignored_seqnums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ResolveIntentRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ResolveIntentRangeRequest)
  return false;
#undef DO_
}

void ResolveIntentRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ResolveIntentRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_intent_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_intent_txn(), output);
  }

  // .cockroach.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // bool poison = 4;
  if (this->poison() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->poison(), output);
  }

  if (this->has_min_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_min_timestamp(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ignored_seqnums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6,
      this->ignored_seqnums(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ResolveIntentRangeRequest)
}

size_t ResolveIntentRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ResolveIntentRangeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->ignored_seqnums_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ignored_seqnums(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_intent_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *intent_txn_);
  }

  if (this->has_min_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_timestamp_);
  }

  // .cockroach.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool poison = 4;
  if (this->poison() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveIntentRangeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResolveIntentRangeRequest*>(&from));
}

void ResolveIntentRangeRequest::MergeFrom(const ResolveIntentRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ResolveIntentRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignored_seqnums_.MergeFrom(from.ignored_seqnums_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_intent_txn()) {
    mutable_intent_txn()->::cockroach::storage::enginepb::TxnMeta::MergeFrom(from.intent_txn());
  }
  if (from.has_min_timestamp()) {
    mutable_min_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.min_timestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.poison() != 0) {
    set_poison(from.poison());
  }
}

void ResolveIntentRangeRequest::CopyFrom(const ResolveIntentRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ResolveIntentRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveIntentRangeRequest::IsInitialized() const {
  return true;
}

void ResolveIntentRangeRequest::Swap(ResolveIntentRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveIntentRangeRequest::InternalSwap(ResolveIntentRangeRequest* other) {
  using std::swap;
  CastToBase(&ignored_seqnums_)->InternalSwap(CastToBase(&other->ignored_seqnums_));
  swap(header_, other->header_);
  swap(intent_txn_, other->intent_txn_);
  swap(min_timestamp_, other->min_timestamp_);
  swap(status_, other->status_);
  swap(poison_, other->poison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ResolveIntentRangeRequest::GetTypeName() const {
  return "cockroach.roachpb.ResolveIntentRangeRequest";
}


// ===================================================================

void ResolveIntentRangeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ResolveIntentRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveIntentRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveIntentRangeResponse::ResolveIntentRangeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRangeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ResolveIntentRangeResponse)
}
ResolveIntentRangeResponse::ResolveIntentRangeResponse(const ResolveIntentRangeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ResolveIntentRangeResponse)
}

void ResolveIntentRangeResponse::SharedCtor() {
  header_ = NULL;
}

ResolveIntentRangeResponse::~ResolveIntentRangeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ResolveIntentRangeResponse)
  SharedDtor();
}

void ResolveIntentRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ResolveIntentRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveIntentRangeResponse& ResolveIntentRangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ResolveIntentRangeResponse.base);
  return *internal_default_instance();
}


void ResolveIntentRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ResolveIntentRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ResolveIntentRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ResolveIntentRangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ResolveIntentRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ResolveIntentRangeResponse)
  return false;
#undef DO_
}

void ResolveIntentRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ResolveIntentRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ResolveIntentRangeResponse)
}

size_t ResolveIntentRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ResolveIntentRangeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveIntentRangeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResolveIntentRangeResponse*>(&from));
}

void ResolveIntentRangeResponse::MergeFrom(const ResolveIntentRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ResolveIntentRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ResolveIntentRangeResponse::CopyFrom(const ResolveIntentRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ResolveIntentRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveIntentRangeResponse::IsInitialized() const {
  return true;
}

void ResolveIntentRangeResponse::Swap(ResolveIntentRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveIntentRangeResponse::InternalSwap(ResolveIntentRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ResolveIntentRangeResponse::GetTypeName() const {
  return "cockroach.roachpb.ResolveIntentRangeResponse";
}


// ===================================================================

void MergeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_MergeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_MergeRequest_default_instance_._instance.get_mutable()->value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
}
void MergeRequest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeRequest::kHeaderFieldNumber;
const int MergeRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeRequest::MergeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_MergeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.MergeRequest)
}
MergeRequest::MergeRequest(const MergeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::cockroach::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.MergeRequest)
}

void MergeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&header_)) + sizeof(value_));
}

MergeRequest::~MergeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.MergeRequest)
  SharedDtor();
}

void MergeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete value_;
}

void MergeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeRequest& MergeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_MergeRequest.base);
  return *internal_default_instance();
}


void MergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.MergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool MergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.MergeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.MergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.MergeRequest)
  return false;
#undef DO_
}

void MergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.MergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.MergeRequest)
}

size_t MergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.MergeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeRequest*>(&from));
}

void MergeRequest::MergeFrom(const MergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.MergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_value()) {
    mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
  }
}

void MergeRequest::CopyFrom(const MergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.MergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRequest::IsInitialized() const {
  return true;
}

void MergeRequest::Swap(MergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeRequest::InternalSwap(MergeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MergeRequest::GetTypeName() const {
  return "cockroach.roachpb.MergeRequest";
}


// ===================================================================

void MergeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_MergeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeResponse::MergeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_MergeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.MergeResponse)
}
MergeResponse::MergeResponse(const MergeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.MergeResponse)
}

void MergeResponse::SharedCtor() {
  header_ = NULL;
}

MergeResponse::~MergeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.MergeResponse)
  SharedDtor();
}

void MergeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void MergeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeResponse& MergeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_MergeResponse.base);
  return *internal_default_instance();
}


void MergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.MergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool MergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.MergeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.MergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.MergeResponse)
  return false;
#undef DO_
}

void MergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.MergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.MergeResponse)
}

size_t MergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.MergeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeResponse*>(&from));
}

void MergeResponse::MergeFrom(const MergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.MergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void MergeResponse::CopyFrom(const MergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.MergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeResponse::IsInitialized() const {
  return true;
}

void MergeResponse::Swap(MergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeResponse::InternalSwap(MergeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MergeResponse::GetTypeName() const {
  return "cockroach.roachpb.MergeResponse";
}


// ===================================================================

void TruncateLogRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_TruncateLogRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncateLogRequest::kHeaderFieldNumber;
const int TruncateLogRequest::kIndexFieldNumber;
const int TruncateLogRequest::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncateLogRequest::TruncateLogRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_TruncateLogRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TruncateLogRequest)
}
TruncateLogRequest::TruncateLogRequest(const TruncateLogRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_id_) -
    reinterpret_cast<char*>(&index_)) + sizeof(range_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TruncateLogRequest)
}

void TruncateLogRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_id_));
}

TruncateLogRequest::~TruncateLogRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TruncateLogRequest)
  SharedDtor();
}

void TruncateLogRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TruncateLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TruncateLogRequest& TruncateLogRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_TruncateLogRequest.base);
  return *internal_default_instance();
}


void TruncateLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TruncateLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&index_)) + sizeof(range_id_));
  _internal_metadata_.Clear();
}

bool TruncateLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TruncateLogRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TruncateLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TruncateLogRequest)
  return false;
#undef DO_
}

void TruncateLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TruncateLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->range_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TruncateLogRequest)
}

size_t TruncateLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TruncateLogRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TruncateLogRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TruncateLogRequest*>(&from));
}

void TruncateLogRequest::MergeFrom(const TruncateLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TruncateLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void TruncateLogRequest::CopyFrom(const TruncateLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TruncateLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateLogRequest::IsInitialized() const {
  return true;
}

void TruncateLogRequest::Swap(TruncateLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncateLogRequest::InternalSwap(TruncateLogRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(index_, other->index_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TruncateLogRequest::GetTypeName() const {
  return "cockroach.roachpb.TruncateLogRequest";
}


// ===================================================================

void TruncateLogResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_TruncateLogResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncateLogResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncateLogResponse::TruncateLogResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_TruncateLogResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TruncateLogResponse)
}
TruncateLogResponse::TruncateLogResponse(const TruncateLogResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TruncateLogResponse)
}

void TruncateLogResponse::SharedCtor() {
  header_ = NULL;
}

TruncateLogResponse::~TruncateLogResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TruncateLogResponse)
  SharedDtor();
}

void TruncateLogResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TruncateLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TruncateLogResponse& TruncateLogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_TruncateLogResponse.base);
  return *internal_default_instance();
}


void TruncateLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TruncateLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool TruncateLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TruncateLogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TruncateLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TruncateLogResponse)
  return false;
#undef DO_
}

void TruncateLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TruncateLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TruncateLogResponse)
}

size_t TruncateLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TruncateLogResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TruncateLogResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TruncateLogResponse*>(&from));
}

void TruncateLogResponse::MergeFrom(const TruncateLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TruncateLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void TruncateLogResponse::CopyFrom(const TruncateLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TruncateLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateLogResponse::IsInitialized() const {
  return true;
}

void TruncateLogResponse::Swap(TruncateLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncateLogResponse::InternalSwap(TruncateLogResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TruncateLogResponse::GetTypeName() const {
  return "cockroach.roachpb.TruncateLogResponse";
}


// ===================================================================

void RequestLeaseRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RequestLeaseRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_RequestLeaseRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
  ::cockroach::roachpb::_RequestLeaseRequest_default_instance_._instance.get_mutable()->prev_lease_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
  ::cockroach::roachpb::_RequestLeaseRequest_default_instance_._instance.get_mutable()->min_proposed_ts_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void RequestLeaseRequest::clear_lease() {
  if (GetArenaNoVirtual() == NULL && lease_ != NULL) {
    delete lease_;
  }
  lease_ = NULL;
}
void RequestLeaseRequest::clear_prev_lease() {
  if (GetArenaNoVirtual() == NULL && prev_lease_ != NULL) {
    delete prev_lease_;
  }
  prev_lease_ = NULL;
}
void RequestLeaseRequest::clear_min_proposed_ts() {
  if (GetArenaNoVirtual() == NULL && min_proposed_ts_ != NULL) {
    delete min_proposed_ts_;
  }
  min_proposed_ts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestLeaseRequest::kHeaderFieldNumber;
const int RequestLeaseRequest::kLeaseFieldNumber;
const int RequestLeaseRequest::kPrevLeaseFieldNumber;
const int RequestLeaseRequest::kMinProposedTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestLeaseRequest::RequestLeaseRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestLeaseRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RequestLeaseRequest)
}
RequestLeaseRequest::RequestLeaseRequest(const RequestLeaseRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_lease()) {
    lease_ = new ::cockroach::roachpb::Lease(*from.lease_);
  } else {
    lease_ = NULL;
  }
  if (from.has_prev_lease()) {
    prev_lease_ = new ::cockroach::roachpb::Lease(*from.prev_lease_);
  } else {
    prev_lease_ = NULL;
  }
  if (from.has_min_proposed_ts()) {
    min_proposed_ts_ = new ::cockroach::util::hlc::Timestamp(*from.min_proposed_ts_);
  } else {
    min_proposed_ts_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RequestLeaseRequest)
}

void RequestLeaseRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_proposed_ts_) -
      reinterpret_cast<char*>(&header_)) + sizeof(min_proposed_ts_));
}

RequestLeaseRequest::~RequestLeaseRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RequestLeaseRequest)
  SharedDtor();
}

void RequestLeaseRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
  if (this != internal_default_instance()) delete prev_lease_;
  if (this != internal_default_instance()) delete min_proposed_ts_;
}

void RequestLeaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestLeaseRequest& RequestLeaseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RequestLeaseRequest.base);
  return *internal_default_instance();
}


void RequestLeaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RequestLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && lease_ != NULL) {
    delete lease_;
  }
  lease_ = NULL;
  if (GetArenaNoVirtual() == NULL && prev_lease_ != NULL) {
    delete prev_lease_;
  }
  prev_lease_ = NULL;
  if (GetArenaNoVirtual() == NULL && min_proposed_ts_ != NULL) {
    delete min_proposed_ts_;
  }
  min_proposed_ts_ = NULL;
  _internal_metadata_.Clear();
}

bool RequestLeaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RequestLeaseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prev_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_proposed_ts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RequestLeaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RequestLeaseRequest)
  return false;
#undef DO_
}

void RequestLeaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RequestLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_lease(), output);
  }

  if (this->has_prev_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_prev_lease(), output);
  }

  if (this->has_min_proposed_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_min_proposed_ts(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RequestLeaseRequest)
}

size_t RequestLeaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RequestLeaseRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_lease()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (this->has_prev_lease()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prev_lease_);
  }

  if (this->has_min_proposed_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_proposed_ts_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestLeaseRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestLeaseRequest*>(&from));
}

void RequestLeaseRequest::MergeFrom(const RequestLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RequestLeaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_lease()) {
    mutable_lease()->::cockroach::roachpb::Lease::MergeFrom(from.lease());
  }
  if (from.has_prev_lease()) {
    mutable_prev_lease()->::cockroach::roachpb::Lease::MergeFrom(from.prev_lease());
  }
  if (from.has_min_proposed_ts()) {
    mutable_min_proposed_ts()->::cockroach::util::hlc::Timestamp::MergeFrom(from.min_proposed_ts());
  }
}

void RequestLeaseRequest::CopyFrom(const RequestLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RequestLeaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLeaseRequest::IsInitialized() const {
  return true;
}

void RequestLeaseRequest::Swap(RequestLeaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestLeaseRequest::InternalSwap(RequestLeaseRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(lease_, other->lease_);
  swap(prev_lease_, other->prev_lease_);
  swap(min_proposed_ts_, other->min_proposed_ts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RequestLeaseRequest::GetTypeName() const {
  return "cockroach.roachpb.RequestLeaseRequest";
}


// ===================================================================

void TransferLeaseRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_TransferLeaseRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_TransferLeaseRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
  ::cockroach::roachpb::_TransferLeaseRequest_default_instance_._instance.get_mutable()->prev_lease_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
}
void TransferLeaseRequest::clear_lease() {
  if (GetArenaNoVirtual() == NULL && lease_ != NULL) {
    delete lease_;
  }
  lease_ = NULL;
}
void TransferLeaseRequest::clear_prev_lease() {
  if (GetArenaNoVirtual() == NULL && prev_lease_ != NULL) {
    delete prev_lease_;
  }
  prev_lease_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeaseRequest::kHeaderFieldNumber;
const int TransferLeaseRequest::kLeaseFieldNumber;
const int TransferLeaseRequest::kPrevLeaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaseRequest::TransferLeaseRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_TransferLeaseRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransferLeaseRequest)
}
TransferLeaseRequest::TransferLeaseRequest(const TransferLeaseRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_lease()) {
    lease_ = new ::cockroach::roachpb::Lease(*from.lease_);
  } else {
    lease_ = NULL;
  }
  if (from.has_prev_lease()) {
    prev_lease_ = new ::cockroach::roachpb::Lease(*from.prev_lease_);
  } else {
    prev_lease_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransferLeaseRequest)
}

void TransferLeaseRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(prev_lease_));
}

TransferLeaseRequest::~TransferLeaseRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransferLeaseRequest)
  SharedDtor();
}

void TransferLeaseRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
  if (this != internal_default_instance()) delete prev_lease_;
}

void TransferLeaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferLeaseRequest& TransferLeaseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_TransferLeaseRequest.base);
  return *internal_default_instance();
}


void TransferLeaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TransferLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && lease_ != NULL) {
    delete lease_;
  }
  lease_ = NULL;
  if (GetArenaNoVirtual() == NULL && prev_lease_ != NULL) {
    delete prev_lease_;
  }
  prev_lease_ = NULL;
  _internal_metadata_.Clear();
}

bool TransferLeaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransferLeaseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prev_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransferLeaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransferLeaseRequest)
  return false;
#undef DO_
}

void TransferLeaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransferLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_lease(), output);
  }

  if (this->has_prev_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_prev_lease(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransferLeaseRequest)
}

size_t TransferLeaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TransferLeaseRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_lease()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (this->has_prev_lease()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prev_lease_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeaseRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransferLeaseRequest*>(&from));
}

void TransferLeaseRequest::MergeFrom(const TransferLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TransferLeaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_lease()) {
    mutable_lease()->::cockroach::roachpb::Lease::MergeFrom(from.lease());
  }
  if (from.has_prev_lease()) {
    mutable_prev_lease()->::cockroach::roachpb::Lease::MergeFrom(from.prev_lease());
  }
}

void TransferLeaseRequest::CopyFrom(const TransferLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TransferLeaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaseRequest::IsInitialized() const {
  return true;
}

void TransferLeaseRequest::Swap(TransferLeaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaseRequest::InternalSwap(TransferLeaseRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(lease_, other->lease_);
  swap(prev_lease_, other->prev_lease_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TransferLeaseRequest::GetTypeName() const {
  return "cockroach.roachpb.TransferLeaseRequest";
}


// ===================================================================

void LeaseInfoRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_LeaseInfoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseInfoRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseInfoRequest::LeaseInfoRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_LeaseInfoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.LeaseInfoRequest)
}
LeaseInfoRequest::LeaseInfoRequest(const LeaseInfoRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.LeaseInfoRequest)
}

void LeaseInfoRequest::SharedCtor() {
  header_ = NULL;
}

LeaseInfoRequest::~LeaseInfoRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.LeaseInfoRequest)
  SharedDtor();
}

void LeaseInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LeaseInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseInfoRequest& LeaseInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_LeaseInfoRequest.base);
  return *internal_default_instance();
}


void LeaseInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.LeaseInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool LeaseInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.LeaseInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.LeaseInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.LeaseInfoRequest)
  return false;
#undef DO_
}

void LeaseInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.LeaseInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.LeaseInfoRequest)
}

size_t LeaseInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.LeaseInfoRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeaseInfoRequest*>(&from));
}

void LeaseInfoRequest::MergeFrom(const LeaseInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.LeaseInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
}

void LeaseInfoRequest::CopyFrom(const LeaseInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.LeaseInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseInfoRequest::IsInitialized() const {
  return true;
}

void LeaseInfoRequest::Swap(LeaseInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseInfoRequest::InternalSwap(LeaseInfoRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LeaseInfoRequest::GetTypeName() const {
  return "cockroach.roachpb.LeaseInfoRequest";
}


// ===================================================================

void LeaseInfoResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_LeaseInfoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_LeaseInfoResponse_default_instance_._instance.get_mutable()->lease_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
}
void LeaseInfoResponse::clear_lease() {
  if (GetArenaNoVirtual() == NULL && lease_ != NULL) {
    delete lease_;
  }
  lease_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseInfoResponse::kHeaderFieldNumber;
const int LeaseInfoResponse::kLeaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseInfoResponse::LeaseInfoResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_LeaseInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.LeaseInfoResponse)
}
LeaseInfoResponse::LeaseInfoResponse(const LeaseInfoResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_lease()) {
    lease_ = new ::cockroach::roachpb::Lease(*from.lease_);
  } else {
    lease_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.LeaseInfoResponse)
}

void LeaseInfoResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

LeaseInfoResponse::~LeaseInfoResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.LeaseInfoResponse)
  SharedDtor();
}

void LeaseInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
}

void LeaseInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseInfoResponse& LeaseInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_LeaseInfoResponse.base);
  return *internal_default_instance();
}


void LeaseInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.LeaseInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && lease_ != NULL) {
    delete lease_;
  }
  lease_ = NULL;
  _internal_metadata_.Clear();
}

bool LeaseInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.LeaseInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.LeaseInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.LeaseInfoResponse)
  return false;
#undef DO_
}

void LeaseInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.LeaseInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_lease(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.LeaseInfoResponse)
}

size_t LeaseInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.LeaseInfoResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_lease()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeaseInfoResponse*>(&from));
}

void LeaseInfoResponse::MergeFrom(const LeaseInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.LeaseInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_lease()) {
    mutable_lease()->::cockroach::roachpb::Lease::MergeFrom(from.lease());
  }
}

void LeaseInfoResponse::CopyFrom(const LeaseInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.LeaseInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseInfoResponse::IsInitialized() const {
  return true;
}

void LeaseInfoResponse::Swap(LeaseInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseInfoResponse::InternalSwap(LeaseInfoResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(lease_, other->lease_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LeaseInfoResponse::GetTypeName() const {
  return "cockroach.roachpb.LeaseInfoResponse";
}


// ===================================================================

void RequestLeaseResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RequestLeaseResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestLeaseResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestLeaseResponse::RequestLeaseResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestLeaseResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RequestLeaseResponse)
}
RequestLeaseResponse::RequestLeaseResponse(const RequestLeaseResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RequestLeaseResponse)
}

void RequestLeaseResponse::SharedCtor() {
  header_ = NULL;
}

RequestLeaseResponse::~RequestLeaseResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RequestLeaseResponse)
  SharedDtor();
}

void RequestLeaseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RequestLeaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestLeaseResponse& RequestLeaseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RequestLeaseResponse.base);
  return *internal_default_instance();
}


void RequestLeaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RequestLeaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool RequestLeaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RequestLeaseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RequestLeaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RequestLeaseResponse)
  return false;
#undef DO_
}

void RequestLeaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RequestLeaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RequestLeaseResponse)
}

size_t RequestLeaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RequestLeaseResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestLeaseResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestLeaseResponse*>(&from));
}

void RequestLeaseResponse::MergeFrom(const RequestLeaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RequestLeaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void RequestLeaseResponse::CopyFrom(const RequestLeaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RequestLeaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLeaseResponse::IsInitialized() const {
  return true;
}

void RequestLeaseResponse::Swap(RequestLeaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestLeaseResponse::InternalSwap(RequestLeaseResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RequestLeaseResponse::GetTypeName() const {
  return "cockroach.roachpb.RequestLeaseResponse";
}


// ===================================================================

void ComputeChecksumRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ComputeChecksumRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
void ComputeChecksumRequest::clear_terminate() {
  terminate_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputeChecksumRequest::kHeaderFieldNumber;
const int ComputeChecksumRequest::kVersionFieldNumber;
const int ComputeChecksumRequest::kSnapshotFieldNumber;
const int ComputeChecksumRequest::kModeFieldNumber;
const int ComputeChecksumRequest::kCheckpointFieldNumber;
const int ComputeChecksumRequest::kTerminateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputeChecksumRequest::ComputeChecksumRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ComputeChecksumRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ComputeChecksumRequest)
}
ComputeChecksumRequest::ComputeChecksumRequest(const ComputeChecksumRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      terminate_(from.terminate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkpoint_) -
    reinterpret_cast<char*>(&version_)) + sizeof(checkpoint_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ComputeChecksumRequest)
}

void ComputeChecksumRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkpoint_) -
      reinterpret_cast<char*>(&header_)) + sizeof(checkpoint_));
}

ComputeChecksumRequest::~ComputeChecksumRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ComputeChecksumRequest)
  SharedDtor();
}

void ComputeChecksumRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ComputeChecksumRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComputeChecksumRequest& ComputeChecksumRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ComputeChecksumRequest.base);
  return *internal_default_instance();
}


void ComputeChecksumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ComputeChecksumRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminate_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkpoint_) -
      reinterpret_cast<char*>(&version_)) + sizeof(checkpoint_));
  _internal_metadata_.Clear();
}

bool ComputeChecksumRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ComputeChecksumRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool snapshot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ChecksumMode mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::cockroach::roachpb::ChecksumMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool checkpoint = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_terminate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ComputeChecksumRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ComputeChecksumRequest)
  return false;
#undef DO_
}

void ComputeChecksumRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ComputeChecksumRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // bool snapshot = 4;
  if (this->snapshot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->snapshot(), output);
  }

  // .cockroach.roachpb.ChecksumMode mode = 5;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // bool checkpoint = 6;
  if (this->checkpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->checkpoint(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->terminate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->terminate(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ComputeChecksumRequest)
}

size_t ComputeChecksumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ComputeChecksumRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->terminate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->terminate(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // .cockroach.roachpb.ChecksumMode mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // bool snapshot = 4;
  if (this->snapshot() != 0) {
    total_size += 1 + 1;
  }

  // bool checkpoint = 6;
  if (this->checkpoint() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputeChecksumRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComputeChecksumRequest*>(&from));
}

void ComputeChecksumRequest::MergeFrom(const ComputeChecksumRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ComputeChecksumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  terminate_.MergeFrom(from.terminate_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.snapshot() != 0) {
    set_snapshot(from.snapshot());
  }
  if (from.checkpoint() != 0) {
    set_checkpoint(from.checkpoint());
  }
}

void ComputeChecksumRequest::CopyFrom(const ComputeChecksumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ComputeChecksumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeChecksumRequest::IsInitialized() const {
  return true;
}

void ComputeChecksumRequest::Swap(ComputeChecksumRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputeChecksumRequest::InternalSwap(ComputeChecksumRequest* other) {
  using std::swap;
  CastToBase(&terminate_)->InternalSwap(CastToBase(&other->terminate_));
  swap(header_, other->header_);
  swap(version_, other->version_);
  swap(mode_, other->mode_);
  swap(snapshot_, other->snapshot_);
  swap(checkpoint_, other->checkpoint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ComputeChecksumRequest::GetTypeName() const {
  return "cockroach.roachpb.ComputeChecksumRequest";
}


// ===================================================================

void ComputeChecksumResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ComputeChecksumResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputeChecksumResponse::kHeaderFieldNumber;
const int ComputeChecksumResponse::kChecksumIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputeChecksumResponse::ComputeChecksumResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ComputeChecksumResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ComputeChecksumResponse)
}
ComputeChecksumResponse::ComputeChecksumResponse(const ComputeChecksumResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  checksum_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.checksum_id().size() > 0) {
    checksum_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_id_);
  }
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ComputeChecksumResponse)
}

void ComputeChecksumResponse::SharedCtor() {
  checksum_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

ComputeChecksumResponse::~ComputeChecksumResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ComputeChecksumResponse)
  SharedDtor();
}

void ComputeChecksumResponse::SharedDtor() {
  checksum_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ComputeChecksumResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComputeChecksumResponse& ComputeChecksumResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ComputeChecksumResponse.base);
  return *internal_default_instance();
}


void ComputeChecksumResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ComputeChecksumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checksum_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ComputeChecksumResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ComputeChecksumResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_checksum_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ComputeChecksumResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ComputeChecksumResponse)
  return false;
#undef DO_
}

void ComputeChecksumResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ComputeChecksumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->checksum_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->checksum_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ComputeChecksumResponse)
}

size_t ComputeChecksumResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ComputeChecksumResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->checksum_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->checksum_id());
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputeChecksumResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComputeChecksumResponse*>(&from));
}

void ComputeChecksumResponse::MergeFrom(const ComputeChecksumResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ComputeChecksumResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checksum_id().size() > 0) {

    checksum_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ComputeChecksumResponse::CopyFrom(const ComputeChecksumResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ComputeChecksumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeChecksumResponse::IsInitialized() const {
  return true;
}

void ComputeChecksumResponse::Swap(ComputeChecksumResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputeChecksumResponse::InternalSwap(ComputeChecksumResponse* other) {
  using std::swap;
  checksum_id_.Swap(&other->checksum_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ComputeChecksumResponse::GetTypeName() const {
  return "cockroach.roachpb.ComputeChecksumResponse";
}


// ===================================================================

void ExternalStorage_LocalFilePath::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalStorage_LocalFilePath::kPathFieldNumber;
const int ExternalStorage_LocalFilePath::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalStorage_LocalFilePath::ExternalStorage_LocalFilePath()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_LocalFilePath.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExternalStorage.LocalFilePath)
}
ExternalStorage_LocalFilePath::ExternalStorage_LocalFilePath(const ExternalStorage_LocalFilePath& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExternalStorage.LocalFilePath)
}

void ExternalStorage_LocalFilePath::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0u;
}

ExternalStorage_LocalFilePath::~ExternalStorage_LocalFilePath() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExternalStorage.LocalFilePath)
  SharedDtor();
}

void ExternalStorage_LocalFilePath::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExternalStorage_LocalFilePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalStorage_LocalFilePath& ExternalStorage_LocalFilePath::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_LocalFilePath.base);
  return *internal_default_instance();
}


void ExternalStorage_LocalFilePath::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExternalStorage.LocalFilePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ExternalStorage_LocalFilePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExternalStorage.LocalFilePath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.LocalFilePath.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExternalStorage.LocalFilePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExternalStorage.LocalFilePath)
  return false;
#undef DO_
}

void ExternalStorage_LocalFilePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExternalStorage.LocalFilePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.LocalFilePath.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExternalStorage.LocalFilePath)
}

size_t ExternalStorage_LocalFilePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExternalStorage.LocalFilePath)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalStorage_LocalFilePath::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExternalStorage_LocalFilePath*>(&from));
}

void ExternalStorage_LocalFilePath::MergeFrom(const ExternalStorage_LocalFilePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExternalStorage.LocalFilePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void ExternalStorage_LocalFilePath::CopyFrom(const ExternalStorage_LocalFilePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExternalStorage.LocalFilePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalStorage_LocalFilePath::IsInitialized() const {
  return true;
}

void ExternalStorage_LocalFilePath::Swap(ExternalStorage_LocalFilePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalStorage_LocalFilePath::InternalSwap(ExternalStorage_LocalFilePath* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExternalStorage_LocalFilePath::GetTypeName() const {
  return "cockroach.roachpb.ExternalStorage.LocalFilePath";
}


// ===================================================================

void ExternalStorage_Http::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalStorage_Http::kBaseUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalStorage_Http::ExternalStorage_Http()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Http.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExternalStorage.Http)
}
ExternalStorage_Http::ExternalStorage_Http(const ExternalStorage_Http& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  baseuri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.baseuri().size() > 0) {
    baseuri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.baseuri_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExternalStorage.Http)
}

void ExternalStorage_Http::SharedCtor() {
  baseuri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExternalStorage_Http::~ExternalStorage_Http() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExternalStorage.Http)
  SharedDtor();
}

void ExternalStorage_Http::SharedDtor() {
  baseuri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExternalStorage_Http::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalStorage_Http& ExternalStorage_Http::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Http.base);
  return *internal_default_instance();
}


void ExternalStorage_Http::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExternalStorage.Http)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  baseuri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ExternalStorage_Http::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExternalStorage.Http)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string baseUri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baseuri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->baseuri().data(), static_cast<int>(this->baseuri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Http.baseUri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExternalStorage.Http)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExternalStorage.Http)
  return false;
#undef DO_
}

void ExternalStorage_Http::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExternalStorage.Http)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string baseUri = 1;
  if (this->baseuri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->baseuri().data(), static_cast<int>(this->baseuri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Http.baseUri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->baseuri(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExternalStorage.Http)
}

size_t ExternalStorage_Http::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExternalStorage.Http)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string baseUri = 1;
  if (this->baseuri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->baseuri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalStorage_Http::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExternalStorage_Http*>(&from));
}

void ExternalStorage_Http::MergeFrom(const ExternalStorage_Http& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExternalStorage.Http)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.baseuri().size() > 0) {

    baseuri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.baseuri_);
  }
}

void ExternalStorage_Http::CopyFrom(const ExternalStorage_Http& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExternalStorage.Http)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalStorage_Http::IsInitialized() const {
  return true;
}

void ExternalStorage_Http::Swap(ExternalStorage_Http* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalStorage_Http::InternalSwap(ExternalStorage_Http* other) {
  using std::swap;
  baseuri_.Swap(&other->baseuri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExternalStorage_Http::GetTypeName() const {
  return "cockroach.roachpb.ExternalStorage.Http";
}


// ===================================================================

void ExternalStorage_S3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalStorage_S3::kBucketFieldNumber;
const int ExternalStorage_S3::kPrefixFieldNumber;
const int ExternalStorage_S3::kAccessKeyFieldNumber;
const int ExternalStorage_S3::kSecretFieldNumber;
const int ExternalStorage_S3::kTempTokenFieldNumber;
const int ExternalStorage_S3::kEndpointFieldNumber;
const int ExternalStorage_S3::kRegionFieldNumber;
const int ExternalStorage_S3::kAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalStorage_S3::ExternalStorage_S3()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_S3.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExternalStorage.S3)
}
ExternalStorage_S3::ExternalStorage_S3(const ExternalStorage_S3& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bucket().size() > 0) {
    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  access_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.access_key().size() > 0) {
    access_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_key_);
  }
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secret().size() > 0) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  temp_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.temp_token().size() > 0) {
    temp_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.temp_token_);
  }
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.endpoint().size() > 0) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  auth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auth().size() > 0) {
    auth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExternalStorage.S3)
}

void ExternalStorage_S3::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temp_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExternalStorage_S3::~ExternalStorage_S3() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExternalStorage.S3)
  SharedDtor();
}

void ExternalStorage_S3::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temp_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExternalStorage_S3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalStorage_S3& ExternalStorage_S3::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_S3.base);
  return *internal_default_instance();
}


void ExternalStorage_S3::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExternalStorage.S3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temp_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ExternalStorage_S3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExternalStorage.S3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bucket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), static_cast<int>(this->bucket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.S3.bucket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.S3.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string access_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->access_key().data(), static_cast<int>(this->access_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.S3.access_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secret = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secret().data(), static_cast<int>(this->secret().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.S3.secret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string temp_token = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->temp_token().data(), static_cast<int>(this->temp_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.S3.temp_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string endpoint = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endpoint().data(), static_cast<int>(this->endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.S3.endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.S3.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string auth = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth().data(), static_cast<int>(this->auth().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.S3.auth"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExternalStorage.S3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExternalStorage.S3)
  return false;
#undef DO_
}

void ExternalStorage_S3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExternalStorage.S3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), static_cast<int>(this->bucket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.S3.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.S3.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefix(), output);
  }

  // string access_key = 3;
  if (this->access_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_key().data(), static_cast<int>(this->access_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.S3.access_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->access_key(), output);
  }

  // string secret = 4;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.S3.secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->secret(), output);
  }

  // string temp_token = 5;
  if (this->temp_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->temp_token().data(), static_cast<int>(this->temp_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.S3.temp_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->temp_token(), output);
  }

  // string endpoint = 6;
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.S3.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->endpoint(), output);
  }

  // string region = 7;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.S3.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->region(), output);
  }

  // string auth = 8;
  if (this->auth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth().data(), static_cast<int>(this->auth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.S3.auth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->auth(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExternalStorage.S3)
}

size_t ExternalStorage_S3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExternalStorage.S3)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // string access_key = 3;
  if (this->access_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->access_key());
  }

  // string secret = 4;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret());
  }

  // string temp_token = 5;
  if (this->temp_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->temp_token());
  }

  // string endpoint = 6;
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endpoint());
  }

  // string region = 7;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // string auth = 8;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalStorage_S3::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExternalStorage_S3*>(&from));
}

void ExternalStorage_S3::MergeFrom(const ExternalStorage_S3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExternalStorage.S3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.access_key().size() > 0) {

    access_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_key_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.temp_token().size() > 0) {

    temp_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.temp_token_);
  }
  if (from.endpoint().size() > 0) {

    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.auth().size() > 0) {

    auth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
}

void ExternalStorage_S3::CopyFrom(const ExternalStorage_S3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExternalStorage.S3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalStorage_S3::IsInitialized() const {
  return true;
}

void ExternalStorage_S3::Swap(ExternalStorage_S3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalStorage_S3::InternalSwap(ExternalStorage_S3* other) {
  using std::swap;
  bucket_.Swap(&other->bucket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefix_.Swap(&other->prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_key_.Swap(&other->access_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  temp_token_.Swap(&other->temp_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  endpoint_.Swap(&other->endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_.Swap(&other->auth_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExternalStorage_S3::GetTypeName() const {
  return "cockroach.roachpb.ExternalStorage.S3";
}


// ===================================================================

void ExternalStorage_GCS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalStorage_GCS::kBucketFieldNumber;
const int ExternalStorage_GCS::kPrefixFieldNumber;
const int ExternalStorage_GCS::kAuthFieldNumber;
const int ExternalStorage_GCS::kBillingProjectFieldNumber;
const int ExternalStorage_GCS::kCredentialsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalStorage_GCS::ExternalStorage_GCS()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_GCS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExternalStorage.GCS)
}
ExternalStorage_GCS::ExternalStorage_GCS(const ExternalStorage_GCS& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bucket().size() > 0) {
    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  auth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auth().size() > 0) {
    auth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  billing_project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.billing_project().size() > 0) {
    billing_project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billing_project_);
  }
  credentials_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.credentials().size() > 0) {
    credentials_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.credentials_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExternalStorage.GCS)
}

void ExternalStorage_GCS::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billing_project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credentials_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExternalStorage_GCS::~ExternalStorage_GCS() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExternalStorage.GCS)
  SharedDtor();
}

void ExternalStorage_GCS::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billing_project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credentials_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExternalStorage_GCS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalStorage_GCS& ExternalStorage_GCS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_GCS.base);
  return *internal_default_instance();
}


void ExternalStorage_GCS::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExternalStorage.GCS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billing_project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credentials_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ExternalStorage_GCS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExternalStorage.GCS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bucket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), static_cast<int>(this->bucket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.GCS.bucket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.GCS.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string auth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth().data(), static_cast<int>(this->auth().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.GCS.auth"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string billing_project = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billing_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->billing_project().data(), static_cast<int>(this->billing_project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.GCS.billing_project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string credentials = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_credentials()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->credentials().data(), static_cast<int>(this->credentials().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.GCS.credentials"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExternalStorage.GCS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExternalStorage.GCS)
  return false;
#undef DO_
}

void ExternalStorage_GCS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExternalStorage.GCS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), static_cast<int>(this->bucket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.GCS.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.GCS.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefix(), output);
  }

  // string auth = 3;
  if (this->auth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth().data(), static_cast<int>(this->auth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.GCS.auth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->auth(), output);
  }

  // string billing_project = 4;
  if (this->billing_project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->billing_project().data(), static_cast<int>(this->billing_project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.GCS.billing_project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->billing_project(), output);
  }

  // string credentials = 5;
  if (this->credentials().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->credentials().data(), static_cast<int>(this->credentials().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.GCS.credentials");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->credentials(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExternalStorage.GCS)
}

size_t ExternalStorage_GCS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExternalStorage.GCS)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // string auth = 3;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth());
  }

  // string billing_project = 4;
  if (this->billing_project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->billing_project());
  }

  // string credentials = 5;
  if (this->credentials().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->credentials());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalStorage_GCS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExternalStorage_GCS*>(&from));
}

void ExternalStorage_GCS::MergeFrom(const ExternalStorage_GCS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExternalStorage.GCS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.auth().size() > 0) {

    auth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  if (from.billing_project().size() > 0) {

    billing_project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billing_project_);
  }
  if (from.credentials().size() > 0) {

    credentials_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.credentials_);
  }
}

void ExternalStorage_GCS::CopyFrom(const ExternalStorage_GCS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExternalStorage.GCS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalStorage_GCS::IsInitialized() const {
  return true;
}

void ExternalStorage_GCS::Swap(ExternalStorage_GCS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalStorage_GCS::InternalSwap(ExternalStorage_GCS* other) {
  using std::swap;
  bucket_.Swap(&other->bucket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefix_.Swap(&other->prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_.Swap(&other->auth_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  billing_project_.Swap(&other->billing_project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  credentials_.Swap(&other->credentials_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExternalStorage_GCS::GetTypeName() const {
  return "cockroach.roachpb.ExternalStorage.GCS";
}


// ===================================================================

void ExternalStorage_Azure::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalStorage_Azure::kContainerFieldNumber;
const int ExternalStorage_Azure::kPrefixFieldNumber;
const int ExternalStorage_Azure::kAccountNameFieldNumber;
const int ExternalStorage_Azure::kAccountKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalStorage_Azure::ExternalStorage_Azure()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Azure.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExternalStorage.Azure)
}
ExternalStorage_Azure::ExternalStorage_Azure(const ExternalStorage_Azure& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  container_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container().size() > 0) {
    container_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_);
  }
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_name().size() > 0) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  account_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_key().size() > 0) {
    account_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_key_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExternalStorage.Azure)
}

void ExternalStorage_Azure::SharedCtor() {
  container_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExternalStorage_Azure::~ExternalStorage_Azure() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExternalStorage.Azure)
  SharedDtor();
}

void ExternalStorage_Azure::SharedDtor() {
  container_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExternalStorage_Azure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalStorage_Azure& ExternalStorage_Azure::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Azure.base);
  return *internal_default_instance();
}


void ExternalStorage_Azure::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExternalStorage.Azure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ExternalStorage_Azure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExternalStorage.Azure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string container = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container().data(), static_cast<int>(this->container().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Azure.container"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Azure.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Azure.account_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_key().data(), static_cast<int>(this->account_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Azure.account_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExternalStorage.Azure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExternalStorage.Azure)
  return false;
#undef DO_
}

void ExternalStorage_Azure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExternalStorage.Azure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container = 1;
  if (this->container().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container().data(), static_cast<int>(this->container().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Azure.container");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->container(), output);
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Azure.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefix(), output);
  }

  // string account_name = 3;
  if (this->account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Azure.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account_name(), output);
  }

  // string account_key = 4;
  if (this->account_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_key().data(), static_cast<int>(this->account_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Azure.account_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account_key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExternalStorage.Azure)
}

size_t ExternalStorage_Azure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExternalStorage.Azure)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string container = 1;
  if (this->container().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container());
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // string account_name = 3;
  if (this->account_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_name());
  }

  // string account_key = 4;
  if (this->account_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalStorage_Azure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExternalStorage_Azure*>(&from));
}

void ExternalStorage_Azure::MergeFrom(const ExternalStorage_Azure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExternalStorage.Azure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container().size() > 0) {

    container_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_);
  }
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.account_name().size() > 0) {

    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  if (from.account_key().size() > 0) {

    account_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_key_);
  }
}

void ExternalStorage_Azure::CopyFrom(const ExternalStorage_Azure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExternalStorage.Azure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalStorage_Azure::IsInitialized() const {
  return true;
}

void ExternalStorage_Azure::Swap(ExternalStorage_Azure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalStorage_Azure::InternalSwap(ExternalStorage_Azure* other) {
  using std::swap;
  container_.Swap(&other->container_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefix_.Swap(&other->prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_key_.Swap(&other->account_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExternalStorage_Azure::GetTypeName() const {
  return "cockroach.roachpb.ExternalStorage.Azure";
}


// ===================================================================

void ExternalStorage_Workload::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalStorage_Workload::kGeneratorFieldNumber;
const int ExternalStorage_Workload::kVersionFieldNumber;
const int ExternalStorage_Workload::kTableFieldNumber;
const int ExternalStorage_Workload::kFlagsFieldNumber;
const int ExternalStorage_Workload::kFormatFieldNumber;
const int ExternalStorage_Workload::kBatchBeginFieldNumber;
const int ExternalStorage_Workload::kBatchEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalStorage_Workload::ExternalStorage_Workload()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Workload.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExternalStorage.Workload)
}
ExternalStorage_Workload::ExternalStorage_Workload(const ExternalStorage_Workload& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      flags_(from.flags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  generator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.generator().size() > 0) {
    generator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  ::memcpy(&batch_begin_, &from.batch_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_end_) -
    reinterpret_cast<char*>(&batch_begin_)) + sizeof(batch_end_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExternalStorage.Workload)
}

void ExternalStorage_Workload::SharedCtor() {
  generator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_end_) -
      reinterpret_cast<char*>(&batch_begin_)) + sizeof(batch_end_));
}

ExternalStorage_Workload::~ExternalStorage_Workload() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExternalStorage.Workload)
  SharedDtor();
}

void ExternalStorage_Workload::SharedDtor() {
  generator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExternalStorage_Workload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalStorage_Workload& ExternalStorage_Workload::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage_Workload.base);
  return *internal_default_instance();
}


void ExternalStorage_Workload::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExternalStorage.Workload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.Clear();
  generator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_end_) -
      reinterpret_cast<char*>(&batch_begin_)) + sizeof(batch_end_));
  _internal_metadata_.Clear();
}

bool ExternalStorage_Workload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExternalStorage.Workload)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string generator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->generator().data(), static_cast<int>(this->generator().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Workload.generator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Workload.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Workload.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_flags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->flags(this->flags_size() - 1).data(),
            static_cast<int>(this->flags(this->flags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Workload.flags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), static_cast<int>(this->format().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExternalStorage.Workload.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 batch_begin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batch_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 batch_end = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batch_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExternalStorage.Workload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExternalStorage.Workload)
  return false;
#undef DO_
}

void ExternalStorage_Workload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExternalStorage.Workload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string generator = 1;
  if (this->generator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->generator().data(), static_cast<int>(this->generator().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Workload.generator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->generator(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Workload.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string table = 3;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Workload.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table(), output);
  }

  // repeated string flags = 4;
  for (int i = 0, n = this->flags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flags(i).data(), static_cast<int>(this->flags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Workload.flags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->flags(i), output);
  }

  // string format = 5;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExternalStorage.Workload.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->format(), output);
  }

  // int64 batch_begin = 6;
  if (this->batch_begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->batch_begin(), output);
  }

  // int64 batch_end = 7;
  if (this->batch_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->batch_end(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExternalStorage.Workload)
}

size_t ExternalStorage_Workload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExternalStorage.Workload)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated string flags = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->flags_size());
  for (int i = 0, n = this->flags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->flags(i));
  }

  // string generator = 1;
  if (this->generator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->generator());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string table = 3;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string format = 5;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  // int64 batch_begin = 6;
  if (this->batch_begin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->batch_begin());
  }

  // int64 batch_end = 7;
  if (this->batch_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->batch_end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalStorage_Workload::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExternalStorage_Workload*>(&from));
}

void ExternalStorage_Workload::MergeFrom(const ExternalStorage_Workload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExternalStorage.Workload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flags_.MergeFrom(from.flags_);
  if (from.generator().size() > 0) {

    generator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  if (from.batch_begin() != 0) {
    set_batch_begin(from.batch_begin());
  }
  if (from.batch_end() != 0) {
    set_batch_end(from.batch_end());
  }
}

void ExternalStorage_Workload::CopyFrom(const ExternalStorage_Workload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExternalStorage.Workload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalStorage_Workload::IsInitialized() const {
  return true;
}

void ExternalStorage_Workload::Swap(ExternalStorage_Workload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalStorage_Workload::InternalSwap(ExternalStorage_Workload* other) {
  using std::swap;
  flags_.InternalSwap(CastToBase(&other->flags_));
  generator_.Swap(&other->generator_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_.Swap(&other->format_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batch_begin_, other->batch_begin_);
  swap(batch_end_, other->batch_end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExternalStorage_Workload::GetTypeName() const {
  return "cockroach.roachpb.ExternalStorage.Workload";
}


// ===================================================================

void ExternalStorage::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ExternalStorage_default_instance_._instance.get_mutable()->localfile_ = const_cast< ::cockroach::roachpb::ExternalStorage_LocalFilePath*>(
      ::cockroach::roachpb::ExternalStorage_LocalFilePath::internal_default_instance());
  ::cockroach::roachpb::_ExternalStorage_default_instance_._instance.get_mutable()->httppath_ = const_cast< ::cockroach::roachpb::ExternalStorage_Http*>(
      ::cockroach::roachpb::ExternalStorage_Http::internal_default_instance());
  ::cockroach::roachpb::_ExternalStorage_default_instance_._instance.get_mutable()->googlecloudconfig_ = const_cast< ::cockroach::roachpb::ExternalStorage_GCS*>(
      ::cockroach::roachpb::ExternalStorage_GCS::internal_default_instance());
  ::cockroach::roachpb::_ExternalStorage_default_instance_._instance.get_mutable()->s3config_ = const_cast< ::cockroach::roachpb::ExternalStorage_S3*>(
      ::cockroach::roachpb::ExternalStorage_S3::internal_default_instance());
  ::cockroach::roachpb::_ExternalStorage_default_instance_._instance.get_mutable()->azureconfig_ = const_cast< ::cockroach::roachpb::ExternalStorage_Azure*>(
      ::cockroach::roachpb::ExternalStorage_Azure::internal_default_instance());
  ::cockroach::roachpb::_ExternalStorage_default_instance_._instance.get_mutable()->workloadconfig_ = const_cast< ::cockroach::roachpb::ExternalStorage_Workload*>(
      ::cockroach::roachpb::ExternalStorage_Workload::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalStorage::kProviderFieldNumber;
const int ExternalStorage::kLocalFileFieldNumber;
const int ExternalStorage::kHttpPathFieldNumber;
const int ExternalStorage::kGoogleCloudConfigFieldNumber;
const int ExternalStorage::kS3ConfigFieldNumber;
const int ExternalStorage::kAzureConfigFieldNumber;
const int ExternalStorage::kWorkloadConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalStorage::ExternalStorage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExternalStorage)
}
ExternalStorage::ExternalStorage(const ExternalStorage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_localfile()) {
    localfile_ = new ::cockroach::roachpb::ExternalStorage_LocalFilePath(*from.localfile_);
  } else {
    localfile_ = NULL;
  }
  if (from.has_httppath()) {
    httppath_ = new ::cockroach::roachpb::ExternalStorage_Http(*from.httppath_);
  } else {
    httppath_ = NULL;
  }
  if (from.has_googlecloudconfig()) {
    googlecloudconfig_ = new ::cockroach::roachpb::ExternalStorage_GCS(*from.googlecloudconfig_);
  } else {
    googlecloudconfig_ = NULL;
  }
  if (from.has_s3config()) {
    s3config_ = new ::cockroach::roachpb::ExternalStorage_S3(*from.s3config_);
  } else {
    s3config_ = NULL;
  }
  if (from.has_azureconfig()) {
    azureconfig_ = new ::cockroach::roachpb::ExternalStorage_Azure(*from.azureconfig_);
  } else {
    azureconfig_ = NULL;
  }
  if (from.has_workloadconfig()) {
    workloadconfig_ = new ::cockroach::roachpb::ExternalStorage_Workload(*from.workloadconfig_);
  } else {
    workloadconfig_ = NULL;
  }
  provider_ = from.provider_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExternalStorage)
}

void ExternalStorage::SharedCtor() {
  ::memset(&localfile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&provider_) -
      reinterpret_cast<char*>(&localfile_)) + sizeof(provider_));
}

ExternalStorage::~ExternalStorage() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExternalStorage)
  SharedDtor();
}

void ExternalStorage::SharedDtor() {
  if (this != internal_default_instance()) delete localfile_;
  if (this != internal_default_instance()) delete httppath_;
  if (this != internal_default_instance()) delete googlecloudconfig_;
  if (this != internal_default_instance()) delete s3config_;
  if (this != internal_default_instance()) delete azureconfig_;
  if (this != internal_default_instance()) delete workloadconfig_;
}

void ExternalStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalStorage& ExternalStorage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExternalStorage.base);
  return *internal_default_instance();
}


void ExternalStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExternalStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && localfile_ != NULL) {
    delete localfile_;
  }
  localfile_ = NULL;
  if (GetArenaNoVirtual() == NULL && httppath_ != NULL) {
    delete httppath_;
  }
  httppath_ = NULL;
  if (GetArenaNoVirtual() == NULL && googlecloudconfig_ != NULL) {
    delete googlecloudconfig_;
  }
  googlecloudconfig_ = NULL;
  if (GetArenaNoVirtual() == NULL && s3config_ != NULL) {
    delete s3config_;
  }
  s3config_ = NULL;
  if (GetArenaNoVirtual() == NULL && azureconfig_ != NULL) {
    delete azureconfig_;
  }
  azureconfig_ = NULL;
  if (GetArenaNoVirtual() == NULL && workloadconfig_ != NULL) {
    delete workloadconfig_;
  }
  workloadconfig_ = NULL;
  provider_ = 0;
  _internal_metadata_.Clear();
}

bool ExternalStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExternalStorage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.ExternalStorageProvider provider = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_provider(static_cast< ::cockroach::roachpb::ExternalStorageProvider >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_localfile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_httppath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ExternalStorage.GCS GoogleCloudConfig = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_googlecloudconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ExternalStorage.S3 S3Config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s3config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ExternalStorage.Azure AzureConfig = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_azureconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ExternalStorage.Workload WorkloadConfig = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workloadconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExternalStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExternalStorage)
  return false;
#undef DO_
}

void ExternalStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExternalStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.ExternalStorageProvider provider = 1;
  if (this->provider() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  if (this->has_localfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_localfile(), output);
  }

  if (this->has_httppath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_httppath(), output);
  }

  // .cockroach.roachpb.ExternalStorage.GCS GoogleCloudConfig = 4;
  if (this->has_googlecloudconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_googlecloudconfig(), output);
  }

  // .cockroach.roachpb.ExternalStorage.S3 S3Config = 5;
  if (this->has_s3config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_s3config(), output);
  }

  // .cockroach.roachpb.ExternalStorage.Azure AzureConfig = 6;
  if (this->has_azureconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_azureconfig(), output);
  }

  // .cockroach.roachpb.ExternalStorage.Workload WorkloadConfig = 7;
  if (this->has_workloadconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_workloadconfig(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExternalStorage)
}

size_t ExternalStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExternalStorage)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_localfile()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *localfile_);
  }

  if (this->has_httppath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *httppath_);
  }

  // .cockroach.roachpb.ExternalStorage.GCS GoogleCloudConfig = 4;
  if (this->has_googlecloudconfig()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *googlecloudconfig_);
  }

  // .cockroach.roachpb.ExternalStorage.S3 S3Config = 5;
  if (this->has_s3config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *s3config_);
  }

  // .cockroach.roachpb.ExternalStorage.Azure AzureConfig = 6;
  if (this->has_azureconfig()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *azureconfig_);
  }

  // .cockroach.roachpb.ExternalStorage.Workload WorkloadConfig = 7;
  if (this->has_workloadconfig()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workloadconfig_);
  }

  // .cockroach.roachpb.ExternalStorageProvider provider = 1;
  if (this->provider() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalStorage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExternalStorage*>(&from));
}

void ExternalStorage::MergeFrom(const ExternalStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExternalStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_localfile()) {
    mutable_localfile()->::cockroach::roachpb::ExternalStorage_LocalFilePath::MergeFrom(from.localfile());
  }
  if (from.has_httppath()) {
    mutable_httppath()->::cockroach::roachpb::ExternalStorage_Http::MergeFrom(from.httppath());
  }
  if (from.has_googlecloudconfig()) {
    mutable_googlecloudconfig()->::cockroach::roachpb::ExternalStorage_GCS::MergeFrom(from.googlecloudconfig());
  }
  if (from.has_s3config()) {
    mutable_s3config()->::cockroach::roachpb::ExternalStorage_S3::MergeFrom(from.s3config());
  }
  if (from.has_azureconfig()) {
    mutable_azureconfig()->::cockroach::roachpb::ExternalStorage_Azure::MergeFrom(from.azureconfig());
  }
  if (from.has_workloadconfig()) {
    mutable_workloadconfig()->::cockroach::roachpb::ExternalStorage_Workload::MergeFrom(from.workloadconfig());
  }
  if (from.provider() != 0) {
    set_provider(from.provider());
  }
}

void ExternalStorage::CopyFrom(const ExternalStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExternalStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalStorage::IsInitialized() const {
  return true;
}

void ExternalStorage::Swap(ExternalStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalStorage::InternalSwap(ExternalStorage* other) {
  using std::swap;
  swap(localfile_, other->localfile_);
  swap(httppath_, other->httppath_);
  swap(googlecloudconfig_, other->googlecloudconfig_);
  swap(s3config_, other->s3config_);
  swap(azureconfig_, other->azureconfig_);
  swap(workloadconfig_, other->workloadconfig_);
  swap(provider_, other->provider_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExternalStorage::GetTypeName() const {
  return "cockroach.roachpb.ExternalStorage";
}


// ===================================================================

void WriteBatchRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_WriteBatchRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_WriteBatchRequest_default_instance_._instance.get_mutable()->data_span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
}
void WriteBatchRequest::clear_data_span() {
  if (GetArenaNoVirtual() == NULL && data_span_ != NULL) {
    delete data_span_;
  }
  data_span_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteBatchRequest::kHeaderFieldNumber;
const int WriteBatchRequest::kDataSpanFieldNumber;
const int WriteBatchRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteBatchRequest::WriteBatchRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_WriteBatchRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.WriteBatchRequest)
}
WriteBatchRequest::WriteBatchRequest(const WriteBatchRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_data_span()) {
    data_span_ = new ::cockroach::roachpb::Span(*from.data_span_);
  } else {
    data_span_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.WriteBatchRequest)
}

void WriteBatchRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_span_) -
      reinterpret_cast<char*>(&header_)) + sizeof(data_span_));
}

WriteBatchRequest::~WriteBatchRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.WriteBatchRequest)
  SharedDtor();
}

void WriteBatchRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete data_span_;
}

void WriteBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteBatchRequest& WriteBatchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_WriteBatchRequest.base);
  return *internal_default_instance();
}


void WriteBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.WriteBatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_span_ != NULL) {
    delete data_span_;
  }
  data_span_ = NULL;
  _internal_metadata_.Clear();
}

bool WriteBatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.WriteBatchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.WriteBatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.WriteBatchRequest)
  return false;
#undef DO_
}

void WriteBatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.WriteBatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_data_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_data_span(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.WriteBatchRequest)
}

size_t WriteBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.WriteBatchRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_data_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_span_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteBatchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WriteBatchRequest*>(&from));
}

void WriteBatchRequest::MergeFrom(const WriteBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.WriteBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_data_span()) {
    mutable_data_span()->::cockroach::roachpb::Span::MergeFrom(from.data_span());
  }
}

void WriteBatchRequest::CopyFrom(const WriteBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.WriteBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBatchRequest::IsInitialized() const {
  return true;
}

void WriteBatchRequest::Swap(WriteBatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteBatchRequest::InternalSwap(WriteBatchRequest* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(data_span_, other->data_span_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string WriteBatchRequest::GetTypeName() const {
  return "cockroach.roachpb.WriteBatchRequest";
}


// ===================================================================

void WriteBatchResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_WriteBatchResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteBatchResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteBatchResponse::WriteBatchResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_WriteBatchResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.WriteBatchResponse)
}
WriteBatchResponse::WriteBatchResponse(const WriteBatchResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.WriteBatchResponse)
}

void WriteBatchResponse::SharedCtor() {
  header_ = NULL;
}

WriteBatchResponse::~WriteBatchResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.WriteBatchResponse)
  SharedDtor();
}

void WriteBatchResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void WriteBatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteBatchResponse& WriteBatchResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_WriteBatchResponse.base);
  return *internal_default_instance();
}


void WriteBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.WriteBatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool WriteBatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.WriteBatchResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.WriteBatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.WriteBatchResponse)
  return false;
#undef DO_
}

void WriteBatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.WriteBatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.WriteBatchResponse)
}

size_t WriteBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.WriteBatchResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteBatchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WriteBatchResponse*>(&from));
}

void WriteBatchResponse::MergeFrom(const WriteBatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.WriteBatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void WriteBatchResponse::CopyFrom(const WriteBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.WriteBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBatchResponse::IsInitialized() const {
  return true;
}

void WriteBatchResponse::Swap(WriteBatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteBatchResponse::InternalSwap(WriteBatchResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string WriteBatchResponse::GetTypeName() const {
  return "cockroach.roachpb.WriteBatchResponse";
}


// ===================================================================

void FileEncryptionOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileEncryptionOptions::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileEncryptionOptions::FileEncryptionOptions()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_FileEncryptionOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.FileEncryptionOptions)
}
FileEncryptionOptions::FileEncryptionOptions(const FileEncryptionOptions& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.FileEncryptionOptions)
}

void FileEncryptionOptions::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileEncryptionOptions::~FileEncryptionOptions() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.FileEncryptionOptions)
  SharedDtor();
}

void FileEncryptionOptions::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileEncryptionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileEncryptionOptions& FileEncryptionOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_FileEncryptionOptions.base);
  return *internal_default_instance();
}


void FileEncryptionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.FileEncryptionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FileEncryptionOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.FileEncryptionOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.FileEncryptionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.FileEncryptionOptions)
  return false;
#undef DO_
}

void FileEncryptionOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.FileEncryptionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.FileEncryptionOptions)
}

size_t FileEncryptionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.FileEncryptionOptions)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileEncryptionOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileEncryptionOptions*>(&from));
}

void FileEncryptionOptions::MergeFrom(const FileEncryptionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.FileEncryptionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void FileEncryptionOptions::CopyFrom(const FileEncryptionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.FileEncryptionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileEncryptionOptions::IsInitialized() const {
  return true;
}

void FileEncryptionOptions::Swap(FileEncryptionOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileEncryptionOptions::InternalSwap(FileEncryptionOptions* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileEncryptionOptions::GetTypeName() const {
  return "cockroach.roachpb.FileEncryptionOptions";
}


// ===================================================================

ExportRequest_StorageByLocalityKvEntry_DoNotUse::ExportRequest_StorageByLocalityKvEntry_DoNotUse() {}
ExportRequest_StorageByLocalityKvEntry_DoNotUse::ExportRequest_StorageByLocalityKvEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ExportRequest_StorageByLocalityKvEntry_DoNotUse::MergeFrom(const ExportRequest_StorageByLocalityKvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void ExportRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ExportRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_ExportRequest_default_instance_._instance.get_mutable()->storage_ = const_cast< ::cockroach::roachpb::ExternalStorage*>(
      ::cockroach::roachpb::ExternalStorage::internal_default_instance());
  ::cockroach::roachpb::_ExportRequest_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_ExportRequest_default_instance_._instance.get_mutable()->encryption_ = const_cast< ::cockroach::roachpb::FileEncryptionOptions*>(
      ::cockroach::roachpb::FileEncryptionOptions::internal_default_instance());
}
void ExportRequest::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportRequest::kHeaderFieldNumber;
const int ExportRequest::kStorageFieldNumber;
const int ExportRequest::kStartTimeFieldNumber;
const int ExportRequest::kMvccFilterFieldNumber;
const int ExportRequest::kReturnSstFieldNumber;
const int ExportRequest::kOmitChecksumFieldNumber;
const int ExportRequest::kEnableTimeBoundIteratorOptimizationFieldNumber;
const int ExportRequest::kStorageByLocalityKvFieldNumber;
const int ExportRequest::kEncryptionFieldNumber;
const int ExportRequest::kTargetFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportRequest::ExportRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExportRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExportRequest)
}
ExportRequest::ExportRequest(const ExportRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  storage_by_locality_kv_.MergeFrom(from.storage_by_locality_kv_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_storage()) {
    storage_ = new ::cockroach::roachpb::ExternalStorage(*from.storage_);
  } else {
    storage_ = NULL;
  }
  if (from.has_start_time()) {
    start_time_ = new ::cockroach::util::hlc::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_encryption()) {
    encryption_ = new ::cockroach::roachpb::FileEncryptionOptions(*from.encryption_);
  } else {
    encryption_ = NULL;
  }
  ::memcpy(&mvcc_filter_, &from.mvcc_filter_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_file_size_) -
    reinterpret_cast<char*>(&mvcc_filter_)) + sizeof(target_file_size_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExportRequest)
}

void ExportRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_file_size_) -
      reinterpret_cast<char*>(&header_)) + sizeof(target_file_size_));
}

ExportRequest::~ExportRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExportRequest)
  SharedDtor();
}

void ExportRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete encryption_;
}

void ExportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExportRequest& ExportRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExportRequest.base);
  return *internal_default_instance();
}


void ExportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storage_by_locality_kv_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && storage_ != NULL) {
    delete storage_;
  }
  storage_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && encryption_ != NULL) {
    delete encryption_;
  }
  encryption_ = NULL;
  ::memset(&mvcc_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_file_size_) -
      reinterpret_cast<char*>(&mvcc_filter_)) + sizeof(target_file_size_));
  _internal_metadata_.Clear();
}

bool ExportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExportRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mvcc_filter(static_cast< ::cockroach::roachpb::MVCCFilter >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_sst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool omit_checksum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_time_bound_iterator_optimization = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_time_bound_iterator_optimization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          ExportRequest_StorageByLocalityKvEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              ExportRequest_StorageByLocalityKvEntry_DoNotUse,
              ::std::string, ::cockroach::roachpb::ExternalStorage,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage > > parser(&storage_by_locality_kv_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExportRequest.StorageByLocalityKvEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.FileEncryptionOptions encryption = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encryption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_file_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExportRequest)
  return false;
#undef DO_
}

void ExportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_storage(), output);
  }

  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_start_time(), output);
  }

  if (this->mvcc_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mvcc_filter(), output);
  }

  if (this->return_sst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->return_sst(), output);
  }

  // bool omit_checksum = 6;
  if (this->omit_checksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->omit_checksum(), output);
  }

  // bool enable_time_bound_iterator_optimization = 7;
  if (this->enable_time_bound_iterator_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_time_bound_iterator_optimization(), output);
  }

  if (!this->storage_by_locality_kv().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cockroach.roachpb.ExportRequest.StorageByLocalityKvEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->storage_by_locality_kv().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->storage_by_locality_kv().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >::const_iterator
          it = this->storage_by_locality_kv().begin();
          it != this->storage_by_locality_kv().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ExportRequest_StorageByLocalityKvEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(storage_by_locality_kv_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ExportRequest_StorageByLocalityKvEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >::const_iterator
          it = this->storage_by_locality_kv().begin();
          it != this->storage_by_locality_kv().end(); ++it) {
        entry.reset(storage_by_locality_kv_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .cockroach.roachpb.FileEncryptionOptions encryption = 9;
  if (this->has_encryption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_encryption(), output);
  }

  // int64 target_file_size = 10;
  if (this->target_file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->target_file_size(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExportRequest)
}

size_t ExportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExportRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->storage_by_locality_kv_size());
  {
    ::std::unique_ptr<ExportRequest_StorageByLocalityKvEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >::const_iterator
        it = this->storage_by_locality_kv().begin();
        it != this->storage_by_locality_kv().end(); ++it) {
      entry.reset(storage_by_locality_kv_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_storage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .cockroach.roachpb.FileEncryptionOptions encryption = 9;
  if (this->has_encryption()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *encryption_);
  }

  if (this->mvcc_filter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mvcc_filter());
  }

  if (this->return_sst() != 0) {
    total_size += 1 + 1;
  }

  // bool omit_checksum = 6;
  if (this->omit_checksum() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_time_bound_iterator_optimization = 7;
  if (this->enable_time_bound_iterator_optimization() != 0) {
    total_size += 1 + 1;
  }

  // int64 target_file_size = 10;
  if (this->target_file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_file_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExportRequest*>(&from));
}

void ExportRequest::MergeFrom(const ExportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  storage_by_locality_kv_.MergeFrom(from.storage_by_locality_kv_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_storage()) {
    mutable_storage()->::cockroach::roachpb::ExternalStorage::MergeFrom(from.storage());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::cockroach::util::hlc::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_encryption()) {
    mutable_encryption()->::cockroach::roachpb::FileEncryptionOptions::MergeFrom(from.encryption());
  }
  if (from.mvcc_filter() != 0) {
    set_mvcc_filter(from.mvcc_filter());
  }
  if (from.return_sst() != 0) {
    set_return_sst(from.return_sst());
  }
  if (from.omit_checksum() != 0) {
    set_omit_checksum(from.omit_checksum());
  }
  if (from.enable_time_bound_iterator_optimization() != 0) {
    set_enable_time_bound_iterator_optimization(from.enable_time_bound_iterator_optimization());
  }
  if (from.target_file_size() != 0) {
    set_target_file_size(from.target_file_size());
  }
}

void ExportRequest::CopyFrom(const ExportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportRequest::IsInitialized() const {
  return true;
}

void ExportRequest::Swap(ExportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportRequest::InternalSwap(ExportRequest* other) {
  using std::swap;
  storage_by_locality_kv_.Swap(&other->storage_by_locality_kv_);
  swap(header_, other->header_);
  swap(storage_, other->storage_);
  swap(start_time_, other->start_time_);
  swap(encryption_, other->encryption_);
  swap(mvcc_filter_, other->mvcc_filter_);
  swap(return_sst_, other->return_sst_);
  swap(omit_checksum_, other->omit_checksum_);
  swap(enable_time_bound_iterator_optimization_, other->enable_time_bound_iterator_optimization_);
  swap(target_file_size_, other->target_file_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExportRequest::GetTypeName() const {
  return "cockroach.roachpb.ExportRequest";
}


// ===================================================================

BulkOpSummary_EntryCountsEntry_DoNotUse::BulkOpSummary_EntryCountsEntry_DoNotUse() {}
BulkOpSummary_EntryCountsEntry_DoNotUse::BulkOpSummary_EntryCountsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void BulkOpSummary_EntryCountsEntry_DoNotUse::MergeFrom(const BulkOpSummary_EntryCountsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void BulkOpSummary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulkOpSummary::kDataSizeFieldNumber;
const int BulkOpSummary::kDeprecatedRowsFieldNumber;
const int BulkOpSummary::kDeprecatedIndexEntriesFieldNumber;
const int BulkOpSummary::kEntryCountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulkOpSummary::BulkOpSummary()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_BulkOpSummary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.BulkOpSummary)
}
BulkOpSummary::BulkOpSummary(const BulkOpSummary& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entry_counts_.MergeFrom(from.entry_counts_);
  ::memcpy(&data_size_, &from.data_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_index_entries_) -
    reinterpret_cast<char*>(&data_size_)) + sizeof(deprecated_index_entries_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.BulkOpSummary)
}

void BulkOpSummary::SharedCtor() {
  ::memset(&data_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_index_entries_) -
      reinterpret_cast<char*>(&data_size_)) + sizeof(deprecated_index_entries_));
}

BulkOpSummary::~BulkOpSummary() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.BulkOpSummary)
  SharedDtor();
}

void BulkOpSummary::SharedDtor() {
}

void BulkOpSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkOpSummary& BulkOpSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_BulkOpSummary.base);
  return *internal_default_instance();
}


void BulkOpSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.BulkOpSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_counts_.Clear();
  ::memset(&data_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_index_entries_) -
      reinterpret_cast<char*>(&data_size_)) + sizeof(deprecated_index_entries_));
  _internal_metadata_.Clear();
}

bool BulkOpSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.BulkOpSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 data_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 deprecated_rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 deprecated_index_entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_index_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, int64> entry_counts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          BulkOpSummary_EntryCountsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              BulkOpSummary_EntryCountsEntry_DoNotUse,
              ::google::protobuf::uint64, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::int64 > > parser(&entry_counts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.BulkOpSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.BulkOpSummary)
  return false;
#undef DO_
}

void BulkOpSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.BulkOpSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data_size = 1;
  if (this->data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->data_size(), output);
  }

  // int64 deprecated_rows = 2;
  if (this->deprecated_rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->deprecated_rows(), output);
  }

  // int64 deprecated_index_entries = 3;
  if (this->deprecated_index_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->deprecated_index_entries(), output);
  }

  // map<uint64, int64> entry_counts = 5;
  if (!this->entry_counts().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->entry_counts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->entry_counts().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::int64 >::const_iterator
          it = this->entry_counts().begin();
          it != this->entry_counts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BulkOpSummary_EntryCountsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entry_counts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
      }
    } else {
      ::std::unique_ptr<BulkOpSummary_EntryCountsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::int64 >::const_iterator
          it = this->entry_counts().begin();
          it != this->entry_counts().end(); ++it) {
        entry.reset(entry_counts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
      }
    }
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.BulkOpSummary)
}

size_t BulkOpSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.BulkOpSummary)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<uint64, int64> entry_counts = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entry_counts_size());
  {
    ::std::unique_ptr<BulkOpSummary_EntryCountsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::int64 >::const_iterator
        it = this->entry_counts().begin();
        it != this->entry_counts().end(); ++it) {
      entry.reset(entry_counts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int64 data_size = 1;
  if (this->data_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data_size());
  }

  // int64 deprecated_rows = 2;
  if (this->deprecated_rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->deprecated_rows());
  }

  // int64 deprecated_index_entries = 3;
  if (this->deprecated_index_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->deprecated_index_entries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkOpSummary::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BulkOpSummary*>(&from));
}

void BulkOpSummary::MergeFrom(const BulkOpSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.BulkOpSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_counts_.MergeFrom(from.entry_counts_);
  if (from.data_size() != 0) {
    set_data_size(from.data_size());
  }
  if (from.deprecated_rows() != 0) {
    set_deprecated_rows(from.deprecated_rows());
  }
  if (from.deprecated_index_entries() != 0) {
    set_deprecated_index_entries(from.deprecated_index_entries());
  }
}

void BulkOpSummary::CopyFrom(const BulkOpSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.BulkOpSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkOpSummary::IsInitialized() const {
  return true;
}

void BulkOpSummary::Swap(BulkOpSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulkOpSummary::InternalSwap(BulkOpSummary* other) {
  using std::swap;
  entry_counts_.Swap(&other->entry_counts_);
  swap(data_size_, other->data_size_);
  swap(deprecated_rows_, other->deprecated_rows_);
  swap(deprecated_index_entries_, other->deprecated_index_entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BulkOpSummary::GetTypeName() const {
  return "cockroach.roachpb.BulkOpSummary";
}


// ===================================================================

void ExportResponse_File::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ExportResponse_File_default_instance_._instance.get_mutable()->span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
  ::cockroach::roachpb::_ExportResponse_File_default_instance_._instance.get_mutable()->exported_ = const_cast< ::cockroach::roachpb::BulkOpSummary*>(
      ::cockroach::roachpb::BulkOpSummary::internal_default_instance());
}
void ExportResponse_File::clear_span() {
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportResponse_File::kSpanFieldNumber;
const int ExportResponse_File::kPathFieldNumber;
const int ExportResponse_File::kSha512FieldNumber;
const int ExportResponse_File::kExportedFieldNumber;
const int ExportResponse_File::kSstFieldNumber;
const int ExportResponse_File::kLocalityKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportResponse_File::ExportResponse_File()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExportResponse_File.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExportResponse.File)
}
ExportResponse_File::ExportResponse_File(const ExportResponse_File& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  sha512_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha512().size() > 0) {
    sha512_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha512_);
  }
  sst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sst().size() > 0) {
    sst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sst_);
  }
  locality_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.locality_kv().size() > 0) {
    locality_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locality_kv_);
  }
  if (from.has_span()) {
    span_ = new ::cockroach::roachpb::Span(*from.span_);
  } else {
    span_ = NULL;
  }
  if (from.has_exported()) {
    exported_ = new ::cockroach::roachpb::BulkOpSummary(*from.exported_);
  } else {
    exported_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExportResponse.File)
}

void ExportResponse_File::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha512_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exported_) -
      reinterpret_cast<char*>(&span_)) + sizeof(exported_));
}

ExportResponse_File::~ExportResponse_File() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExportResponse.File)
  SharedDtor();
}

void ExportResponse_File::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha512_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sst_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_kv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete span_;
  if (this != internal_default_instance()) delete exported_;
}

void ExportResponse_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExportResponse_File& ExportResponse_File::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExportResponse_File.base);
  return *internal_default_instance();
}


void ExportResponse_File::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExportResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha512_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_kv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
  if (GetArenaNoVirtual() == NULL && exported_ != NULL) {
    delete exported_;
  }
  exported_ = NULL;
  _internal_metadata_.Clear();
}

bool ExportResponse_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExportResponse.File)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExportResponse.File.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sha512 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha512()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exported()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locality_kv()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locality_kv().data(), static_cast<int>(this->locality_kv().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ExportResponse.File.locality_kv"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExportResponse.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExportResponse.File)
  return false;
#undef DO_
}

void ExportResponse_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExportResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_span(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExportResponse.File.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bytes sha512 = 5;
  if (this->sha512().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sha512(), output);
  }

  if (this->has_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_exported(), output);
  }

  if (this->sst().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->sst(), output);
  }

  if (this->locality_kv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locality_kv().data(), static_cast<int>(this->locality_kv().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ExportResponse.File.locality_kv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->locality_kv(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExportResponse.File)
}

size_t ExportResponse_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExportResponse.File)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes sha512 = 5;
  if (this->sha512().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha512());
  }

  if (this->sst().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sst());
  }

  if (this->locality_kv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->locality_kv());
  }

  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *span_);
  }

  if (this->has_exported()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exported_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportResponse_File::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExportResponse_File*>(&from));
}

void ExportResponse_File::MergeFrom(const ExportResponse_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExportResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.sha512().size() > 0) {

    sha512_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha512_);
  }
  if (from.sst().size() > 0) {

    sst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sst_);
  }
  if (from.locality_kv().size() > 0) {

    locality_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locality_kv_);
  }
  if (from.has_span()) {
    mutable_span()->::cockroach::roachpb::Span::MergeFrom(from.span());
  }
  if (from.has_exported()) {
    mutable_exported()->::cockroach::roachpb::BulkOpSummary::MergeFrom(from.exported());
  }
}

void ExportResponse_File::CopyFrom(const ExportResponse_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExportResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportResponse_File::IsInitialized() const {
  return true;
}

void ExportResponse_File::Swap(ExportResponse_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportResponse_File::InternalSwap(ExportResponse_File* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha512_.Swap(&other->sha512_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sst_.Swap(&other->sst_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locality_kv_.Swap(&other->locality_kv_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(span_, other->span_);
  swap(exported_, other->exported_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExportResponse_File::GetTypeName() const {
  return "cockroach.roachpb.ExportResponse.File";
}


// ===================================================================

void ExportResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ExportResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_ExportResponse_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void ExportResponse::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportResponse::kHeaderFieldNumber;
const int ExportResponse::kFilesFieldNumber;
const int ExportResponse::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportResponse::ExportResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ExportResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExportResponse)
}
ExportResponse::ExportResponse(const ExportResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_start_time()) {
    start_time_ = new ::cockroach::util::hlc::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExportResponse)
}

void ExportResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&header_)) + sizeof(start_time_));
}

ExportResponse::~ExportResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExportResponse)
  SharedDtor();
}

void ExportResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete start_time_;
}

void ExportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExportResponse& ExportResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ExportResponse.base);
  return *internal_default_instance();
}


void ExportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ExportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  _internal_metadata_.Clear();
}

bool ExportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExportResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExportResponse)
  return false;
#undef DO_
}

void ExportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->files(static_cast<int>(i)),
      output);
  }

  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_start_time(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExportResponse)
}

size_t ExportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ExportResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExportResponse*>(&from));
}

void ExportResponse::MergeFrom(const ExportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ExportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::cockroach::util::hlc::Timestamp::MergeFrom(from.start_time());
  }
}

void ExportResponse::CopyFrom(const ExportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ExportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportResponse::IsInitialized() const {
  return true;
}

void ExportResponse::Swap(ExportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportResponse::InternalSwap(ExportResponse* other) {
  using std::swap;
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
  swap(header_, other->header_);
  swap(start_time_, other->start_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ExportResponse::GetTypeName() const {
  return "cockroach.roachpb.ExportResponse";
}


// ===================================================================

void ImportRequest_File::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ImportRequest_File_default_instance_._instance.get_mutable()->dir_ = const_cast< ::cockroach::roachpb::ExternalStorage*>(
      ::cockroach::roachpb::ExternalStorage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportRequest_File::kDirFieldNumber;
const int ImportRequest_File::kPathFieldNumber;
const int ImportRequest_File::kSha512FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportRequest_File::ImportRequest_File()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest_File.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ImportRequest.File)
}
ImportRequest_File::ImportRequest_File(const ImportRequest_File& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  sha512_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha512().size() > 0) {
    sha512_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha512_);
  }
  if (from.has_dir()) {
    dir_ = new ::cockroach::roachpb::ExternalStorage(*from.dir_);
  } else {
    dir_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ImportRequest.File)
}

void ImportRequest_File::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha512_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_ = NULL;
}

ImportRequest_File::~ImportRequest_File() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ImportRequest.File)
  SharedDtor();
}

void ImportRequest_File::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha512_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dir_;
}

void ImportRequest_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportRequest_File& ImportRequest_File::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest_File.base);
  return *internal_default_instance();
}


void ImportRequest_File::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ImportRequest.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha512_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && dir_ != NULL) {
    delete dir_;
  }
  dir_ = NULL;
  _internal_metadata_.Clear();
}

bool ImportRequest_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ImportRequest.File)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.ImportRequest.File.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sha512 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha512()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ImportRequest.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ImportRequest.File)
  return false;
#undef DO_
}

void ImportRequest_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ImportRequest.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_dir(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.ImportRequest.File.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bytes sha512 = 4;
  if (this->sha512().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha512(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ImportRequest.File)
}

size_t ImportRequest_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ImportRequest.File)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes sha512 = 4;
  if (this->sha512().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha512());
  }

  if (this->has_dir()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dir_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportRequest_File::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImportRequest_File*>(&from));
}

void ImportRequest_File::MergeFrom(const ImportRequest_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ImportRequest.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.sha512().size() > 0) {

    sha512_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha512_);
  }
  if (from.has_dir()) {
    mutable_dir()->::cockroach::roachpb::ExternalStorage::MergeFrom(from.dir());
  }
}

void ImportRequest_File::CopyFrom(const ImportRequest_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ImportRequest.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportRequest_File::IsInitialized() const {
  return true;
}

void ImportRequest_File::Swap(ImportRequest_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportRequest_File::InternalSwap(ImportRequest_File* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha512_.Swap(&other->sha512_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dir_, other->dir_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ImportRequest_File::GetTypeName() const {
  return "cockroach.roachpb.ImportRequest.File";
}


// ===================================================================

void ImportRequest_TableRekey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportRequest_TableRekey::kOldIdFieldNumber;
const int ImportRequest_TableRekey::kNewDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportRequest_TableRekey::ImportRequest_TableRekey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest_TableRekey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ImportRequest.TableRekey)
}
ImportRequest_TableRekey::ImportRequest_TableRekey(const ImportRequest_TableRekey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_desc().size() > 0) {
    new_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_desc_);
  }
  old_id_ = from.old_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ImportRequest.TableRekey)
}

void ImportRequest_TableRekey::SharedCtor() {
  new_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_id_ = 0u;
}

ImportRequest_TableRekey::~ImportRequest_TableRekey() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ImportRequest.TableRekey)
  SharedDtor();
}

void ImportRequest_TableRekey::SharedDtor() {
  new_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImportRequest_TableRekey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportRequest_TableRekey& ImportRequest_TableRekey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest_TableRekey.base);
  return *internal_default_instance();
}


void ImportRequest_TableRekey::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ImportRequest.TableRekey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ImportRequest_TableRekey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ImportRequest.TableRekey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes new_desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ImportRequest.TableRekey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ImportRequest.TableRekey)
  return false;
#undef DO_
}

void ImportRequest_TableRekey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ImportRequest.TableRekey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->old_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_id(), output);
  }

  // bytes new_desc = 2;
  if (this->new_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->new_desc(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ImportRequest.TableRekey)
}

size_t ImportRequest_TableRekey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ImportRequest.TableRekey)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes new_desc = 2;
  if (this->new_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->new_desc());
  }

  if (this->old_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->old_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportRequest_TableRekey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImportRequest_TableRekey*>(&from));
}

void ImportRequest_TableRekey::MergeFrom(const ImportRequest_TableRekey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ImportRequest.TableRekey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_desc().size() > 0) {

    new_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_desc_);
  }
  if (from.old_id() != 0) {
    set_old_id(from.old_id());
  }
}

void ImportRequest_TableRekey::CopyFrom(const ImportRequest_TableRekey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ImportRequest.TableRekey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportRequest_TableRekey::IsInitialized() const {
  return true;
}

void ImportRequest_TableRekey::Swap(ImportRequest_TableRekey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportRequest_TableRekey::InternalSwap(ImportRequest_TableRekey* other) {
  using std::swap;
  new_desc_.Swap(&other->new_desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(old_id_, other->old_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ImportRequest_TableRekey::GetTypeName() const {
  return "cockroach.roachpb.ImportRequest.TableRekey";
}


// ===================================================================

void ImportRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ImportRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_ImportRequest_default_instance_._instance.get_mutable()->data_span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
  ::cockroach::roachpb::_ImportRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_ImportRequest_default_instance_._instance.get_mutable()->encryption_ = const_cast< ::cockroach::roachpb::FileEncryptionOptions*>(
      ::cockroach::roachpb::FileEncryptionOptions::internal_default_instance());
}
void ImportRequest::clear_data_span() {
  if (GetArenaNoVirtual() == NULL && data_span_ != NULL) {
    delete data_span_;
  }
  data_span_ = NULL;
}
void ImportRequest::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportRequest::kHeaderFieldNumber;
const int ImportRequest::kFilesFieldNumber;
const int ImportRequest::kDataSpanFieldNumber;
const int ImportRequest::kEndTimeFieldNumber;
const int ImportRequest::kRekeysFieldNumber;
const int ImportRequest::kEncryptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportRequest::ImportRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ImportRequest)
}
ImportRequest::ImportRequest(const ImportRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      files_(from.files_),
      rekeys_(from.rekeys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_data_span()) {
    data_span_ = new ::cockroach::roachpb::Span(*from.data_span_);
  } else {
    data_span_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::cockroach::util::hlc::Timestamp(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  if (from.has_encryption()) {
    encryption_ = new ::cockroach::roachpb::FileEncryptionOptions(*from.encryption_);
  } else {
    encryption_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ImportRequest)
}

void ImportRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encryption_) -
      reinterpret_cast<char*>(&header_)) + sizeof(encryption_));
}

ImportRequest::~ImportRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ImportRequest)
  SharedDtor();
}

void ImportRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete data_span_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete encryption_;
}

void ImportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportRequest& ImportRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ImportRequest.base);
  return *internal_default_instance();
}


void ImportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ImportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  rekeys_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_span_ != NULL) {
    delete data_span_;
  }
  data_span_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && encryption_ != NULL) {
    delete encryption_;
  }
  encryption_ = NULL;
  _internal_metadata_.Clear();
}

bool ImportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ImportRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rekeys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.FileEncryptionOptions encryption = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encryption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ImportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ImportRequest)
  return false;
#undef DO_
}

void ImportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ImportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->files(static_cast<int>(i)),
      output);
  }

  if (this->has_data_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_data_span(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rekeys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->rekeys(static_cast<int>(i)),
      output);
  }

  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_end_time(), output);
  }

  // .cockroach.roachpb.FileEncryptionOptions encryption = 7;
  if (this->has_encryption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_encryption(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ImportRequest)
}

size_t ImportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ImportRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->rekeys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rekeys(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_data_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_span_);
  }

  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .cockroach.roachpb.FileEncryptionOptions encryption = 7;
  if (this->has_encryption()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *encryption_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImportRequest*>(&from));
}

void ImportRequest::MergeFrom(const ImportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ImportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  rekeys_.MergeFrom(from.rekeys_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_data_span()) {
    mutable_data_span()->::cockroach::roachpb::Span::MergeFrom(from.data_span());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::cockroach::util::hlc::Timestamp::MergeFrom(from.end_time());
  }
  if (from.has_encryption()) {
    mutable_encryption()->::cockroach::roachpb::FileEncryptionOptions::MergeFrom(from.encryption());
  }
}

void ImportRequest::CopyFrom(const ImportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ImportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportRequest::IsInitialized() const {
  return true;
}

void ImportRequest::Swap(ImportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportRequest::InternalSwap(ImportRequest* other) {
  using std::swap;
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
  CastToBase(&rekeys_)->InternalSwap(CastToBase(&other->rekeys_));
  swap(header_, other->header_);
  swap(data_span_, other->data_span_);
  swap(end_time_, other->end_time_);
  swap(encryption_, other->encryption_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ImportRequest::GetTypeName() const {
  return "cockroach.roachpb.ImportRequest";
}


// ===================================================================

void ImportResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ImportResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_ImportResponse_default_instance_._instance.get_mutable()->imported_ = const_cast< ::cockroach::roachpb::BulkOpSummary*>(
      ::cockroach::roachpb::BulkOpSummary::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportResponse::kHeaderFieldNumber;
const int ImportResponse::kImportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportResponse::ImportResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ImportResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ImportResponse)
}
ImportResponse::ImportResponse(const ImportResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_imported()) {
    imported_ = new ::cockroach::roachpb::BulkOpSummary(*from.imported_);
  } else {
    imported_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ImportResponse)
}

void ImportResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imported_) -
      reinterpret_cast<char*>(&header_)) + sizeof(imported_));
}

ImportResponse::~ImportResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ImportResponse)
  SharedDtor();
}

void ImportResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete imported_;
}

void ImportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportResponse& ImportResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ImportResponse.base);
  return *internal_default_instance();
}


void ImportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ImportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && imported_ != NULL) {
    delete imported_;
  }
  imported_ = NULL;
  _internal_metadata_.Clear();
}

bool ImportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ImportResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imported()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ImportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ImportResponse)
  return false;
#undef DO_
}

void ImportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ImportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_imported()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_imported(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ImportResponse)
}

size_t ImportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ImportResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_imported()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *imported_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImportResponse*>(&from));
}

void ImportResponse::MergeFrom(const ImportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ImportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_imported()) {
    mutable_imported()->::cockroach::roachpb::BulkOpSummary::MergeFrom(from.imported());
  }
}

void ImportResponse::CopyFrom(const ImportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ImportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportResponse::IsInitialized() const {
  return true;
}

void ImportResponse::Swap(ImportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportResponse::InternalSwap(ImportResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(imported_, other->imported_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ImportResponse::GetTypeName() const {
  return "cockroach.roachpb.ImportResponse";
}


// ===================================================================

void AdminScatterRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminScatterRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminScatterRequest::kHeaderFieldNumber;
const int AdminScatterRequest::kRandomizeLeasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminScatterRequest::AdminScatterRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminScatterRequest)
}
AdminScatterRequest::AdminScatterRequest(const AdminScatterRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  randomize_leases_ = from.randomize_leases_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminScatterRequest)
}

void AdminScatterRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&randomize_leases_) -
      reinterpret_cast<char*>(&header_)) + sizeof(randomize_leases_));
}

AdminScatterRequest::~AdminScatterRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminScatterRequest)
  SharedDtor();
}

void AdminScatterRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminScatterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminScatterRequest& AdminScatterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterRequest.base);
  return *internal_default_instance();
}


void AdminScatterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminScatterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  randomize_leases_ = false;
  _internal_metadata_.Clear();
}

bool AdminScatterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminScatterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool randomize_leases = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_leases_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminScatterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminScatterRequest)
  return false;
#undef DO_
}

void AdminScatterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminScatterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bool randomize_leases = 2;
  if (this->randomize_leases() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->randomize_leases(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminScatterRequest)
}

size_t AdminScatterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminScatterRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool randomize_leases = 2;
  if (this->randomize_leases() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminScatterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminScatterRequest*>(&from));
}

void AdminScatterRequest::MergeFrom(const AdminScatterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminScatterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.randomize_leases() != 0) {
    set_randomize_leases(from.randomize_leases());
  }
}

void AdminScatterRequest::CopyFrom(const AdminScatterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminScatterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminScatterRequest::IsInitialized() const {
  return true;
}

void AdminScatterRequest::Swap(AdminScatterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminScatterRequest::InternalSwap(AdminScatterRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(randomize_leases_, other->randomize_leases_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminScatterRequest::GetTypeName() const {
  return "cockroach.roachpb.AdminScatterRequest";
}


// ===================================================================

void AdminScatterResponse_Range::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminScatterResponse_Range_default_instance_._instance.get_mutable()->span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
}
void AdminScatterResponse_Range::clear_span() {
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminScatterResponse_Range::kSpanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminScatterResponse_Range::AdminScatterResponse_Range()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterResponse_Range.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminScatterResponse.Range)
}
AdminScatterResponse_Range::AdminScatterResponse_Range(const AdminScatterResponse_Range& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span()) {
    span_ = new ::cockroach::roachpb::Span(*from.span_);
  } else {
    span_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminScatterResponse.Range)
}

void AdminScatterResponse_Range::SharedCtor() {
  span_ = NULL;
}

AdminScatterResponse_Range::~AdminScatterResponse_Range() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminScatterResponse.Range)
  SharedDtor();
}

void AdminScatterResponse_Range::SharedDtor() {
  if (this != internal_default_instance()) delete span_;
}

void AdminScatterResponse_Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminScatterResponse_Range& AdminScatterResponse_Range::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterResponse_Range.base);
  return *internal_default_instance();
}


void AdminScatterResponse_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminScatterResponse.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminScatterResponse_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminScatterResponse.Range)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminScatterResponse.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminScatterResponse.Range)
  return false;
#undef DO_
}

void AdminScatterResponse_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminScatterResponse.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_span(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminScatterResponse.Range)
}

size_t AdminScatterResponse_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminScatterResponse.Range)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *span_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminScatterResponse_Range::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminScatterResponse_Range*>(&from));
}

void AdminScatterResponse_Range::MergeFrom(const AdminScatterResponse_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminScatterResponse.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    mutable_span()->::cockroach::roachpb::Span::MergeFrom(from.span());
  }
}

void AdminScatterResponse_Range::CopyFrom(const AdminScatterResponse_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminScatterResponse.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminScatterResponse_Range::IsInitialized() const {
  return true;
}

void AdminScatterResponse_Range::Swap(AdminScatterResponse_Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminScatterResponse_Range::InternalSwap(AdminScatterResponse_Range* other) {
  using std::swap;
  swap(span_, other->span_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminScatterResponse_Range::GetTypeName() const {
  return "cockroach.roachpb.AdminScatterResponse.Range";
}


// ===================================================================

void AdminScatterResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminScatterResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminScatterResponse::kHeaderFieldNumber;
const int AdminScatterResponse::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminScatterResponse::AdminScatterResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminScatterResponse)
}
AdminScatterResponse::AdminScatterResponse(const AdminScatterResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminScatterResponse)
}

void AdminScatterResponse::SharedCtor() {
  header_ = NULL;
}

AdminScatterResponse::~AdminScatterResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminScatterResponse)
  SharedDtor();
}

void AdminScatterResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminScatterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminScatterResponse& AdminScatterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminScatterResponse.base);
  return *internal_default_instance();
}


void AdminScatterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminScatterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminScatterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminScatterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminScatterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminScatterResponse)
  return false;
#undef DO_
}

void AdminScatterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminScatterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->ranges(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminScatterResponse)
}

size_t AdminScatterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminScatterResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ranges(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminScatterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminScatterResponse*>(&from));
}

void AdminScatterResponse::MergeFrom(const AdminScatterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminScatterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AdminScatterResponse::CopyFrom(const AdminScatterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminScatterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminScatterResponse::IsInitialized() const {
  return true;
}

void AdminScatterResponse::Swap(AdminScatterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminScatterResponse::InternalSwap(AdminScatterResponse* other) {
  using std::swap;
  CastToBase(&ranges_)->InternalSwap(CastToBase(&other->ranges_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminScatterResponse::GetTypeName() const {
  return "cockroach.roachpb.AdminScatterResponse";
}


// ===================================================================

void AdminVerifyProtectedTimestampRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminVerifyProtectedTimestampRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_AdminVerifyProtectedTimestampRequest_default_instance_._instance.get_mutable()->protected__ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_AdminVerifyProtectedTimestampRequest_default_instance_._instance.get_mutable()->record_alive_at_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void AdminVerifyProtectedTimestampRequest::clear_protected_() {
  if (GetArenaNoVirtual() == NULL && protected__ != NULL) {
    delete protected__;
  }
  protected__ = NULL;
}
void AdminVerifyProtectedTimestampRequest::clear_record_alive_at() {
  if (GetArenaNoVirtual() == NULL && record_alive_at_ != NULL) {
    delete record_alive_at_;
  }
  record_alive_at_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminVerifyProtectedTimestampRequest::kHeaderFieldNumber;
const int AdminVerifyProtectedTimestampRequest::kRecordIdFieldNumber;
const int AdminVerifyProtectedTimestampRequest::kProtectedFieldNumber;
const int AdminVerifyProtectedTimestampRequest::kRecordAliveAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminVerifyProtectedTimestampRequest::AdminVerifyProtectedTimestampRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminVerifyProtectedTimestampRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
}
AdminVerifyProtectedTimestampRequest::AdminVerifyProtectedTimestampRequest(const AdminVerifyProtectedTimestampRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.record_id().size() > 0) {
    record_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_id_);
  }
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_protected_()) {
    protected__ = new ::cockroach::util::hlc::Timestamp(*from.protected__);
  } else {
    protected__ = NULL;
  }
  if (from.has_record_alive_at()) {
    record_alive_at_ = new ::cockroach::util::hlc::Timestamp(*from.record_alive_at_);
  } else {
    record_alive_at_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
}

void AdminVerifyProtectedTimestampRequest::SharedCtor() {
  record_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_alive_at_) -
      reinterpret_cast<char*>(&header_)) + sizeof(record_alive_at_));
}

AdminVerifyProtectedTimestampRequest::~AdminVerifyProtectedTimestampRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  SharedDtor();
}

void AdminVerifyProtectedTimestampRequest::SharedDtor() {
  record_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete protected__;
  if (this != internal_default_instance()) delete record_alive_at_;
}

void AdminVerifyProtectedTimestampRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminVerifyProtectedTimestampRequest& AdminVerifyProtectedTimestampRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminVerifyProtectedTimestampRequest.base);
  return *internal_default_instance();
}


void AdminVerifyProtectedTimestampRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && protected__ != NULL) {
    delete protected__;
  }
  protected__ = NULL;
  if (GetArenaNoVirtual() == NULL && record_alive_at_ != NULL) {
    delete record_alive_at_;
  }
  record_alive_at_ = NULL;
  _internal_metadata_.Clear();
}

bool AdminVerifyProtectedTimestampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_protected_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record_alive_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  return false;
#undef DO_
}

void AdminVerifyProtectedTimestampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_protected_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_protected_(), output);
  }

  if (this->has_record_alive_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_record_alive_at(), output);
  }

  if (this->record_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->record_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
}

size_t AdminVerifyProtectedTimestampRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_id());
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_protected_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *protected__);
  }

  if (this->has_record_alive_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *record_alive_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminVerifyProtectedTimestampRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminVerifyProtectedTimestampRequest*>(&from));
}

void AdminVerifyProtectedTimestampRequest::MergeFrom(const AdminVerifyProtectedTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {

    record_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_protected_()) {
    mutable_protected_()->::cockroach::util::hlc::Timestamp::MergeFrom(from.protected_());
  }
  if (from.has_record_alive_at()) {
    mutable_record_alive_at()->::cockroach::util::hlc::Timestamp::MergeFrom(from.record_alive_at());
  }
}

void AdminVerifyProtectedTimestampRequest::CopyFrom(const AdminVerifyProtectedTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminVerifyProtectedTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminVerifyProtectedTimestampRequest::IsInitialized() const {
  return true;
}

void AdminVerifyProtectedTimestampRequest::Swap(AdminVerifyProtectedTimestampRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminVerifyProtectedTimestampRequest::InternalSwap(AdminVerifyProtectedTimestampRequest* other) {
  using std::swap;
  record_id_.Swap(&other->record_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(protected__, other->protected__);
  swap(record_alive_at_, other->record_alive_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminVerifyProtectedTimestampRequest::GetTypeName() const {
  return "cockroach.roachpb.AdminVerifyProtectedTimestampRequest";
}


// ===================================================================

void AdminVerifyProtectedTimestampResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AdminVerifyProtectedTimestampResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
void AdminVerifyProtectedTimestampResponse::clear_failed_ranges() {
  failed_ranges_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminVerifyProtectedTimestampResponse::kHeaderFieldNumber;
const int AdminVerifyProtectedTimestampResponse::kVerifiedFieldNumber;
const int AdminVerifyProtectedTimestampResponse::kFailedRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminVerifyProtectedTimestampResponse::AdminVerifyProtectedTimestampResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AdminVerifyProtectedTimestampResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
}
AdminVerifyProtectedTimestampResponse::AdminVerifyProtectedTimestampResponse(const AdminVerifyProtectedTimestampResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      failed_ranges_(from.failed_ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  verified_ = from.verified_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
}

void AdminVerifyProtectedTimestampResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verified_) -
      reinterpret_cast<char*>(&header_)) + sizeof(verified_));
}

AdminVerifyProtectedTimestampResponse::~AdminVerifyProtectedTimestampResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  SharedDtor();
}

void AdminVerifyProtectedTimestampResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdminVerifyProtectedTimestampResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminVerifyProtectedTimestampResponse& AdminVerifyProtectedTimestampResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AdminVerifyProtectedTimestampResponse.base);
  return *internal_default_instance();
}


void AdminVerifyProtectedTimestampResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failed_ranges_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  verified_ = false;
  _internal_metadata_.Clear();
}

bool AdminVerifyProtectedTimestampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool verified = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_failed_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  return false;
#undef DO_
}

void AdminVerifyProtectedTimestampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bool verified = 2;
  if (this->verified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->verified(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->failed_ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->failed_ranges(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
}

size_t AdminVerifyProtectedTimestampResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->failed_ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->failed_ranges(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool verified = 2;
  if (this->verified() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminVerifyProtectedTimestampResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminVerifyProtectedTimestampResponse*>(&from));
}

void AdminVerifyProtectedTimestampResponse::MergeFrom(const AdminVerifyProtectedTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failed_ranges_.MergeFrom(from.failed_ranges_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.verified() != 0) {
    set_verified(from.verified());
  }
}

void AdminVerifyProtectedTimestampResponse::CopyFrom(const AdminVerifyProtectedTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AdminVerifyProtectedTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminVerifyProtectedTimestampResponse::IsInitialized() const {
  return true;
}

void AdminVerifyProtectedTimestampResponse::Swap(AdminVerifyProtectedTimestampResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminVerifyProtectedTimestampResponse::InternalSwap(AdminVerifyProtectedTimestampResponse* other) {
  using std::swap;
  CastToBase(&failed_ranges_)->InternalSwap(CastToBase(&other->failed_ranges_));
  swap(header_, other->header_);
  swap(verified_, other->verified_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AdminVerifyProtectedTimestampResponse::GetTypeName() const {
  return "cockroach.roachpb.AdminVerifyProtectedTimestampResponse";
}


// ===================================================================

void AddSSTableRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AddSSTableRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_AddSSTableRequest_default_instance_._instance.get_mutable()->mvcc_stats_ = const_cast< ::cockroach::storage::enginepb::MVCCStats*>(
      ::cockroach::storage::enginepb::MVCCStats::internal_default_instance());
}
void AddSSTableRequest::clear_mvcc_stats() {
  if (GetArenaNoVirtual() == NULL && mvcc_stats_ != NULL) {
    delete mvcc_stats_;
  }
  mvcc_stats_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddSSTableRequest::kHeaderFieldNumber;
const int AddSSTableRequest::kDataFieldNumber;
const int AddSSTableRequest::kDisallowShadowingFieldNumber;
const int AddSSTableRequest::kMvccStatsFieldNumber;
const int AddSSTableRequest::kIngestAsWritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddSSTableRequest::AddSSTableRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AddSSTableRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AddSSTableRequest)
}
AddSSTableRequest::AddSSTableRequest(const AddSSTableRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_mvcc_stats()) {
    mvcc_stats_ = new ::cockroach::storage::enginepb::MVCCStats(*from.mvcc_stats_);
  } else {
    mvcc_stats_ = NULL;
  }
  ::memcpy(&disallow_shadowing_, &from.disallow_shadowing_,
    static_cast<size_t>(reinterpret_cast<char*>(&ingest_as_writes_) -
    reinterpret_cast<char*>(&disallow_shadowing_)) + sizeof(ingest_as_writes_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AddSSTableRequest)
}

void AddSSTableRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ingest_as_writes_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ingest_as_writes_));
}

AddSSTableRequest::~AddSSTableRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AddSSTableRequest)
  SharedDtor();
}

void AddSSTableRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mvcc_stats_;
}

void AddSSTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddSSTableRequest& AddSSTableRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AddSSTableRequest.base);
  return *internal_default_instance();
}


void AddSSTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AddSSTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && mvcc_stats_ != NULL) {
    delete mvcc_stats_;
  }
  mvcc_stats_ = NULL;
  ::memset(&disallow_shadowing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ingest_as_writes_) -
      reinterpret_cast<char*>(&disallow_shadowing_)) + sizeof(ingest_as_writes_));
  _internal_metadata_.Clear();
}

bool AddSSTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AddSSTableRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disallow_shadowing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disallow_shadowing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mvcc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ingest_as_writes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ingest_as_writes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AddSSTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AddSSTableRequest)
  return false;
#undef DO_
}

void AddSSTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AddSSTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // bool disallow_shadowing = 3;
  if (this->disallow_shadowing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disallow_shadowing(), output);
  }

  if (this->has_mvcc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_mvcc_stats(), output);
  }

  // bool ingest_as_writes = 5;
  if (this->ingest_as_writes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ingest_as_writes(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AddSSTableRequest)
}

size_t AddSSTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AddSSTableRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_mvcc_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mvcc_stats_);
  }

  // bool disallow_shadowing = 3;
  if (this->disallow_shadowing() != 0) {
    total_size += 1 + 1;
  }

  // bool ingest_as_writes = 5;
  if (this->ingest_as_writes() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddSSTableRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddSSTableRequest*>(&from));
}

void AddSSTableRequest::MergeFrom(const AddSSTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AddSSTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_mvcc_stats()) {
    mutable_mvcc_stats()->::cockroach::storage::enginepb::MVCCStats::MergeFrom(from.mvcc_stats());
  }
  if (from.disallow_shadowing() != 0) {
    set_disallow_shadowing(from.disallow_shadowing());
  }
  if (from.ingest_as_writes() != 0) {
    set_ingest_as_writes(from.ingest_as_writes());
  }
}

void AddSSTableRequest::CopyFrom(const AddSSTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AddSSTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSSTableRequest::IsInitialized() const {
  return true;
}

void AddSSTableRequest::Swap(AddSSTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddSSTableRequest::InternalSwap(AddSSTableRequest* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(mvcc_stats_, other->mvcc_stats_);
  swap(disallow_shadowing_, other->disallow_shadowing_);
  swap(ingest_as_writes_, other->ingest_as_writes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AddSSTableRequest::GetTypeName() const {
  return "cockroach.roachpb.AddSSTableRequest";
}


// ===================================================================

void AddSSTableResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AddSSTableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddSSTableResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddSSTableResponse::AddSSTableResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_AddSSTableResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AddSSTableResponse)
}
AddSSTableResponse::AddSSTableResponse(const AddSSTableResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AddSSTableResponse)
}

void AddSSTableResponse::SharedCtor() {
  header_ = NULL;
}

AddSSTableResponse::~AddSSTableResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AddSSTableResponse)
  SharedDtor();
}

void AddSSTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AddSSTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddSSTableResponse& AddSSTableResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_AddSSTableResponse.base);
  return *internal_default_instance();
}


void AddSSTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AddSSTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AddSSTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AddSSTableResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AddSSTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AddSSTableResponse)
  return false;
#undef DO_
}

void AddSSTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AddSSTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AddSSTableResponse)
}

size_t AddSSTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AddSSTableResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddSSTableResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddSSTableResponse*>(&from));
}

void AddSSTableResponse::MergeFrom(const AddSSTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AddSSTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AddSSTableResponse::CopyFrom(const AddSSTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AddSSTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSSTableResponse::IsInitialized() const {
  return true;
}

void AddSSTableResponse::Swap(AddSSTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddSSTableResponse::InternalSwap(AddSSTableResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AddSSTableResponse::GetTypeName() const {
  return "cockroach.roachpb.AddSSTableResponse";
}


// ===================================================================

void RefreshRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RefreshRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_RefreshRequest_default_instance_._instance.get_mutable()->refresh_from_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void RefreshRequest::clear_refresh_from() {
  if (GetArenaNoVirtual() == NULL && refresh_from_ != NULL) {
    delete refresh_from_;
  }
  refresh_from_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefreshRequest::kHeaderFieldNumber;
const int RefreshRequest::kRefreshFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefreshRequest::RefreshRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RefreshRequest)
}
RefreshRequest::RefreshRequest(const RefreshRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_refresh_from()) {
    refresh_from_ = new ::cockroach::util::hlc::Timestamp(*from.refresh_from_);
  } else {
    refresh_from_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RefreshRequest)
}

void RefreshRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_from_) -
      reinterpret_cast<char*>(&header_)) + sizeof(refresh_from_));
}

RefreshRequest::~RefreshRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RefreshRequest)
  SharedDtor();
}

void RefreshRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete refresh_from_;
}

void RefreshRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshRequest& RefreshRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRequest.base);
  return *internal_default_instance();
}


void RefreshRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RefreshRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && refresh_from_ != NULL) {
    delete refresh_from_;
  }
  refresh_from_ = NULL;
  _internal_metadata_.Clear();
}

bool RefreshRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RefreshRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refresh_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RefreshRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RefreshRequest)
  return false;
#undef DO_
}

void RefreshRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RefreshRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_refresh_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_refresh_from(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RefreshRequest)
}

size_t RefreshRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RefreshRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_refresh_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *refresh_from_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RefreshRequest*>(&from));
}

void RefreshRequest::MergeFrom(const RefreshRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RefreshRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_refresh_from()) {
    mutable_refresh_from()->::cockroach::util::hlc::Timestamp::MergeFrom(from.refresh_from());
  }
}

void RefreshRequest::CopyFrom(const RefreshRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RefreshRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshRequest::IsInitialized() const {
  return true;
}

void RefreshRequest::Swap(RefreshRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefreshRequest::InternalSwap(RefreshRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(refresh_from_, other->refresh_from_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RefreshRequest::GetTypeName() const {
  return "cockroach.roachpb.RefreshRequest";
}


// ===================================================================

void RefreshResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RefreshResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefreshResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefreshResponse::RefreshResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RefreshResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RefreshResponse)
}
RefreshResponse::RefreshResponse(const RefreshResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RefreshResponse)
}

void RefreshResponse::SharedCtor() {
  header_ = NULL;
}

RefreshResponse::~RefreshResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RefreshResponse)
  SharedDtor();
}

void RefreshResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RefreshResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshResponse& RefreshResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RefreshResponse.base);
  return *internal_default_instance();
}


void RefreshResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RefreshResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool RefreshResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RefreshResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RefreshResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RefreshResponse)
  return false;
#undef DO_
}

void RefreshResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RefreshResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RefreshResponse)
}

size_t RefreshResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RefreshResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RefreshResponse*>(&from));
}

void RefreshResponse::MergeFrom(const RefreshResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RefreshResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void RefreshResponse::CopyFrom(const RefreshResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RefreshResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshResponse::IsInitialized() const {
  return true;
}

void RefreshResponse::Swap(RefreshResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefreshResponse::InternalSwap(RefreshResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RefreshResponse::GetTypeName() const {
  return "cockroach.roachpb.RefreshResponse";
}


// ===================================================================

void RefreshRangeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RefreshRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_RefreshRangeRequest_default_instance_._instance.get_mutable()->refresh_from_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void RefreshRangeRequest::clear_refresh_from() {
  if (GetArenaNoVirtual() == NULL && refresh_from_ != NULL) {
    delete refresh_from_;
  }
  refresh_from_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefreshRangeRequest::kHeaderFieldNumber;
const int RefreshRangeRequest::kRefreshFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefreshRangeRequest::RefreshRangeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RefreshRangeRequest)
}
RefreshRangeRequest::RefreshRangeRequest(const RefreshRangeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_refresh_from()) {
    refresh_from_ = new ::cockroach::util::hlc::Timestamp(*from.refresh_from_);
  } else {
    refresh_from_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RefreshRangeRequest)
}

void RefreshRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_from_) -
      reinterpret_cast<char*>(&header_)) + sizeof(refresh_from_));
}

RefreshRangeRequest::~RefreshRangeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RefreshRangeRequest)
  SharedDtor();
}

void RefreshRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete refresh_from_;
}

void RefreshRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshRangeRequest& RefreshRangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRangeRequest.base);
  return *internal_default_instance();
}


void RefreshRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RefreshRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && refresh_from_ != NULL) {
    delete refresh_from_;
  }
  refresh_from_ = NULL;
  _internal_metadata_.Clear();
}

bool RefreshRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RefreshRangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refresh_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RefreshRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RefreshRangeRequest)
  return false;
#undef DO_
}

void RefreshRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RefreshRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_refresh_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_refresh_from(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RefreshRangeRequest)
}

size_t RefreshRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RefreshRangeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_refresh_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *refresh_from_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshRangeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RefreshRangeRequest*>(&from));
}

void RefreshRangeRequest::MergeFrom(const RefreshRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RefreshRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_refresh_from()) {
    mutable_refresh_from()->::cockroach::util::hlc::Timestamp::MergeFrom(from.refresh_from());
  }
}

void RefreshRangeRequest::CopyFrom(const RefreshRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RefreshRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshRangeRequest::IsInitialized() const {
  return true;
}

void RefreshRangeRequest::Swap(RefreshRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefreshRangeRequest::InternalSwap(RefreshRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(refresh_from_, other->refresh_from_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RefreshRangeRequest::GetTypeName() const {
  return "cockroach.roachpb.RefreshRangeRequest";
}


// ===================================================================

void RefreshRangeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RefreshRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefreshRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefreshRangeResponse::RefreshRangeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRangeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RefreshRangeResponse)
}
RefreshRangeResponse::RefreshRangeResponse(const RefreshRangeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RefreshRangeResponse)
}

void RefreshRangeResponse::SharedCtor() {
  header_ = NULL;
}

RefreshRangeResponse::~RefreshRangeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RefreshRangeResponse)
  SharedDtor();
}

void RefreshRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RefreshRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshRangeResponse& RefreshRangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RefreshRangeResponse.base);
  return *internal_default_instance();
}


void RefreshRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RefreshRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool RefreshRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RefreshRangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RefreshRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RefreshRangeResponse)
  return false;
#undef DO_
}

void RefreshRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RefreshRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RefreshRangeResponse)
}

size_t RefreshRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RefreshRangeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshRangeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RefreshRangeResponse*>(&from));
}

void RefreshRangeResponse::MergeFrom(const RefreshRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RefreshRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
}

void RefreshRangeResponse::CopyFrom(const RefreshRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RefreshRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshRangeResponse::IsInitialized() const {
  return true;
}

void RefreshRangeResponse::Swap(RefreshRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefreshRangeResponse::InternalSwap(RefreshRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RefreshRangeResponse::GetTypeName() const {
  return "cockroach.roachpb.RefreshRangeResponse";
}


// ===================================================================

void SubsumeRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_SubsumeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
  ::cockroach::roachpb::_SubsumeRequest_default_instance_._instance.get_mutable()->left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  ::cockroach::roachpb::_SubsumeRequest_default_instance_._instance.get_mutable()->right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
}
void SubsumeRequest::clear_left_desc() {
  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
}
void SubsumeRequest::clear_right_desc() {
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubsumeRequest::kHeaderFieldNumber;
const int SubsumeRequest::kLeftDescFieldNumber;
const int SubsumeRequest::kRightDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubsumeRequest::SubsumeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_SubsumeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SubsumeRequest)
}
SubsumeRequest::SubsumeRequest(const SubsumeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_left_desc()) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.left_desc_);
  } else {
    left_desc_ = NULL;
  }
  if (from.has_right_desc()) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.right_desc_);
  } else {
    right_desc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SubsumeRequest)
}

void SubsumeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_desc_) -
      reinterpret_cast<char*>(&header_)) + sizeof(right_desc_));
}

SubsumeRequest::~SubsumeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SubsumeRequest)
  SharedDtor();
}

void SubsumeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete left_desc_;
  if (this != internal_default_instance()) delete right_desc_;
}

void SubsumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubsumeRequest& SubsumeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_SubsumeRequest.base);
  return *internal_default_instance();
}


void SubsumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.SubsumeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
  _internal_metadata_.Clear();
}

bool SubsumeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SubsumeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SubsumeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SubsumeRequest)
  return false;
#undef DO_
}

void SubsumeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SubsumeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_left_desc(), output);
  }

  if (this->has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_right_desc(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SubsumeRequest)
}

size_t SubsumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.SubsumeRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_left_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_desc_);
  }

  if (this->has_right_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_desc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubsumeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SubsumeRequest*>(&from));
}

void SubsumeRequest::MergeFrom(const SubsumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.SubsumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_left_desc()) {
    mutable_left_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
  }
  if (from.has_right_desc()) {
    mutable_right_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
  }
}

void SubsumeRequest::CopyFrom(const SubsumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.SubsumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubsumeRequest::IsInitialized() const {
  return true;
}

void SubsumeRequest::Swap(SubsumeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubsumeRequest::InternalSwap(SubsumeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(left_desc_, other->left_desc_);
  swap(right_desc_, other->right_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SubsumeRequest::GetTypeName() const {
  return "cockroach.roachpb.SubsumeRequest";
}


// ===================================================================

void SubsumeResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_SubsumeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_SubsumeResponse_default_instance_._instance.get_mutable()->mvcc_stats_ = const_cast< ::cockroach::storage::enginepb::MVCCStats*>(
      ::cockroach::storage::enginepb::MVCCStats::internal_default_instance());
  ::cockroach::roachpb::_SubsumeResponse_default_instance_._instance.get_mutable()->freeze_start_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void SubsumeResponse::clear_mvcc_stats() {
  if (GetArenaNoVirtual() == NULL && mvcc_stats_ != NULL) {
    delete mvcc_stats_;
  }
  mvcc_stats_ = NULL;
}
void SubsumeResponse::clear_freeze_start() {
  if (GetArenaNoVirtual() == NULL && freeze_start_ != NULL) {
    delete freeze_start_;
  }
  freeze_start_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubsumeResponse::kHeaderFieldNumber;
const int SubsumeResponse::kMvccStatsFieldNumber;
const int SubsumeResponse::kLeaseAppliedIndexFieldNumber;
const int SubsumeResponse::kFreezeStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubsumeResponse::SubsumeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_SubsumeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SubsumeResponse)
}
SubsumeResponse::SubsumeResponse(const SubsumeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_mvcc_stats()) {
    mvcc_stats_ = new ::cockroach::storage::enginepb::MVCCStats(*from.mvcc_stats_);
  } else {
    mvcc_stats_ = NULL;
  }
  if (from.has_freeze_start()) {
    freeze_start_ = new ::cockroach::util::hlc::Timestamp(*from.freeze_start_);
  } else {
    freeze_start_ = NULL;
  }
  lease_applied_index_ = from.lease_applied_index_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SubsumeResponse)
}

void SubsumeResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_applied_index_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_applied_index_));
}

SubsumeResponse::~SubsumeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SubsumeResponse)
  SharedDtor();
}

void SubsumeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mvcc_stats_;
  if (this != internal_default_instance()) delete freeze_start_;
}

void SubsumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubsumeResponse& SubsumeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_SubsumeResponse.base);
  return *internal_default_instance();
}


void SubsumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.SubsumeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && mvcc_stats_ != NULL) {
    delete mvcc_stats_;
  }
  mvcc_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && freeze_start_ != NULL) {
    delete freeze_start_;
  }
  freeze_start_ = NULL;
  lease_applied_index_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SubsumeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SubsumeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mvcc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lease_applied_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lease_applied_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freeze_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SubsumeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SubsumeResponse)
  return false;
#undef DO_
}

void SubsumeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SubsumeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_mvcc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_mvcc_stats(), output);
  }

  // uint64 lease_applied_index = 4;
  if (this->lease_applied_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lease_applied_index(), output);
  }

  if (this->has_freeze_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_freeze_start(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SubsumeResponse)
}

size_t SubsumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.SubsumeResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_mvcc_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mvcc_stats_);
  }

  if (this->has_freeze_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freeze_start_);
  }

  // uint64 lease_applied_index = 4;
  if (this->lease_applied_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lease_applied_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubsumeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SubsumeResponse*>(&from));
}

void SubsumeResponse::MergeFrom(const SubsumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.SubsumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_mvcc_stats()) {
    mutable_mvcc_stats()->::cockroach::storage::enginepb::MVCCStats::MergeFrom(from.mvcc_stats());
  }
  if (from.has_freeze_start()) {
    mutable_freeze_start()->::cockroach::util::hlc::Timestamp::MergeFrom(from.freeze_start());
  }
  if (from.lease_applied_index() != 0) {
    set_lease_applied_index(from.lease_applied_index());
  }
}

void SubsumeResponse::CopyFrom(const SubsumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.SubsumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubsumeResponse::IsInitialized() const {
  return true;
}

void SubsumeResponse::Swap(SubsumeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubsumeResponse::InternalSwap(SubsumeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(mvcc_stats_, other->mvcc_stats_);
  swap(freeze_start_, other->freeze_start_);
  swap(lease_applied_index_, other->lease_applied_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SubsumeResponse::GetTypeName() const {
  return "cockroach.roachpb.SubsumeResponse";
}


// ===================================================================

void RangeStatsRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeStatsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::RequestHeader*>(
      ::cockroach::roachpb::RequestHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeStatsRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeStatsRequest::RangeStatsRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeStatsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeStatsRequest)
}
RangeStatsRequest::RangeStatsRequest(const RangeStatsRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeStatsRequest)
}

void RangeStatsRequest::SharedCtor() {
  header_ = NULL;
}

RangeStatsRequest::~RangeStatsRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeStatsRequest)
  SharedDtor();
}

void RangeStatsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RangeStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeStatsRequest& RangeStatsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RangeStatsRequest.base);
  return *internal_default_instance();
}


void RangeStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool RangeStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeStatsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeStatsRequest)
  return false;
#undef DO_
}

void RangeStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeStatsRequest)
}

size_t RangeStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeStatsRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeStatsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeStatsRequest*>(&from));
}

void RangeStatsRequest::MergeFrom(const RangeStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::RequestHeader::MergeFrom(from.header());
  }
}

void RangeStatsRequest::CopyFrom(const RangeStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeStatsRequest::IsInitialized() const {
  return true;
}

void RangeStatsRequest::Swap(RangeStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeStatsRequest::InternalSwap(RangeStatsRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeStatsRequest::GetTypeName() const {
  return "cockroach.roachpb.RangeStatsRequest";
}


// ===================================================================

void RangeStatsResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeStatsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::ResponseHeader*>(
      ::cockroach::roachpb::ResponseHeader::internal_default_instance());
  ::cockroach::roachpb::_RangeStatsResponse_default_instance_._instance.get_mutable()->mvcc_stats_ = const_cast< ::cockroach::storage::enginepb::MVCCStats*>(
      ::cockroach::storage::enginepb::MVCCStats::internal_default_instance());
}
void RangeStatsResponse::clear_mvcc_stats() {
  if (GetArenaNoVirtual() == NULL && mvcc_stats_ != NULL) {
    delete mvcc_stats_;
  }
  mvcc_stats_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeStatsResponse::kHeaderFieldNumber;
const int RangeStatsResponse::kMvccStatsFieldNumber;
const int RangeStatsResponse::kQueriesPerSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeStatsResponse::RangeStatsResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeStatsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeStatsResponse)
}
RangeStatsResponse::RangeStatsResponse(const RangeStatsResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_mvcc_stats()) {
    mvcc_stats_ = new ::cockroach::storage::enginepb::MVCCStats(*from.mvcc_stats_);
  } else {
    mvcc_stats_ = NULL;
  }
  queries_per_second_ = from.queries_per_second_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeStatsResponse)
}

void RangeStatsResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queries_per_second_) -
      reinterpret_cast<char*>(&header_)) + sizeof(queries_per_second_));
}

RangeStatsResponse::~RangeStatsResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeStatsResponse)
  SharedDtor();
}

void RangeStatsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mvcc_stats_;
}

void RangeStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeStatsResponse& RangeStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RangeStatsResponse.base);
  return *internal_default_instance();
}


void RangeStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && mvcc_stats_ != NULL) {
    delete mvcc_stats_;
  }
  mvcc_stats_ = NULL;
  queries_per_second_ = 0;
  _internal_metadata_.Clear();
}

bool RangeStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mvcc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double queries_per_second = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &queries_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeStatsResponse)
  return false;
#undef DO_
}

void RangeStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_mvcc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_mvcc_stats(), output);
  }

  // double queries_per_second = 3;
  if (this->queries_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->queries_per_second(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeStatsResponse)
}

size_t RangeStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeStatsResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_mvcc_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mvcc_stats_);
  }

  // double queries_per_second = 3;
  if (this->queries_per_second() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeStatsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeStatsResponse*>(&from));
}

void RangeStatsResponse::MergeFrom(const RangeStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_mvcc_stats()) {
    mutable_mvcc_stats()->::cockroach::storage::enginepb::MVCCStats::MergeFrom(from.mvcc_stats());
  }
  if (from.queries_per_second() != 0) {
    set_queries_per_second(from.queries_per_second());
  }
}

void RangeStatsResponse::CopyFrom(const RangeStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeStatsResponse::IsInitialized() const {
  return true;
}

void RangeStatsResponse::Swap(RangeStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeStatsResponse::InternalSwap(RangeStatsResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(mvcc_stats_, other->mvcc_stats_);
  swap(queries_per_second_, other->queries_per_second_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeStatsResponse::GetTypeName() const {
  return "cockroach.roachpb.RangeStatsResponse";
}


// ===================================================================

void RequestUnion::InitAsDefaultInstance() {
}
void RequestUnion::set_allocated_get(::cockroach::roachpb::GetRequest* get) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (get) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    set_has_get();
    value_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.get)
}
void RequestUnion::set_allocated_put(::cockroach::roachpb::PutRequest* put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (put) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.put)
}
void RequestUnion::set_allocated_conditional_put(::cockroach::roachpb::ConditionalPutRequest* conditional_put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (conditional_put) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conditional_put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conditional_put, submessage_arena);
    }
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.conditional_put)
}
void RequestUnion::set_allocated_increment(::cockroach::roachpb::IncrementRequest* increment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (increment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      increment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, increment, submessage_arena);
    }
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.increment)
}
void RequestUnion::set_allocated_delete_(::cockroach::roachpb::DeleteRequest* delete_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (delete_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_, submessage_arena);
    }
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.delete)
}
void RequestUnion::set_allocated_delete_range(::cockroach::roachpb::DeleteRangeRequest* delete_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (delete_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_range, submessage_arena);
    }
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.delete_range)
}
void RequestUnion::set_allocated_clear_range(::cockroach::roachpb::ClearRangeRequest* clear_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (clear_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clear_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clear_range, submessage_arena);
    }
    set_has_clear_range();
    value_.clear_range_ = clear_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.clear_range)
}
void RequestUnion::set_allocated_revert_range(::cockroach::roachpb::RevertRangeRequest* revert_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (revert_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      revert_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, revert_range, submessage_arena);
    }
    set_has_revert_range();
    value_.revert_range_ = revert_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.revert_range)
}
void RequestUnion::set_allocated_scan(::cockroach::roachpb::ScanRequest* scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scan, submessage_arena);
    }
    set_has_scan();
    value_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.scan)
}
void RequestUnion::set_allocated_end_txn(::cockroach::roachpb::EndTxnRequest* end_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (end_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_txn, submessage_arena);
    }
    set_has_end_txn();
    value_.end_txn_ = end_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.end_txn)
}
void RequestUnion::set_allocated_admin_split(::cockroach::roachpb::AdminSplitRequest* admin_split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_split) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_split, submessage_arena);
    }
    set_has_admin_split();
    value_.admin_split_ = admin_split;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.admin_split)
}
void RequestUnion::set_allocated_admin_unsplit(::cockroach::roachpb::AdminUnsplitRequest* admin_unsplit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_unsplit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_unsplit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_unsplit, submessage_arena);
    }
    set_has_admin_unsplit();
    value_.admin_unsplit_ = admin_unsplit;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.admin_unsplit)
}
void RequestUnion::set_allocated_admin_merge(::cockroach::roachpb::AdminMergeRequest* admin_merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_merge, submessage_arena);
    }
    set_has_admin_merge();
    value_.admin_merge_ = admin_merge;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.admin_merge)
}
void RequestUnion::set_allocated_admin_transfer_lease(::cockroach::roachpb::AdminTransferLeaseRequest* admin_transfer_lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_transfer_lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_transfer_lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_transfer_lease, submessage_arena);
    }
    set_has_admin_transfer_lease();
    value_.admin_transfer_lease_ = admin_transfer_lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.admin_transfer_lease)
}
void RequestUnion::set_allocated_admin_change_replicas(::cockroach::roachpb::AdminChangeReplicasRequest* admin_change_replicas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_change_replicas) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_change_replicas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_change_replicas, submessage_arena);
    }
    set_has_admin_change_replicas();
    value_.admin_change_replicas_ = admin_change_replicas;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.admin_change_replicas)
}
void RequestUnion::set_allocated_admin_relocate_range(::cockroach::roachpb::AdminRelocateRangeRequest* admin_relocate_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_relocate_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_relocate_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_relocate_range, submessage_arena);
    }
    set_has_admin_relocate_range();
    value_.admin_relocate_range_ = admin_relocate_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.admin_relocate_range)
}
void RequestUnion::set_allocated_heartbeat_txn(::cockroach::roachpb::HeartbeatTxnRequest* heartbeat_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (heartbeat_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heartbeat_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heartbeat_txn, submessage_arena);
    }
    set_has_heartbeat_txn();
    value_.heartbeat_txn_ = heartbeat_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.heartbeat_txn)
}
void RequestUnion::set_allocated_gc(::cockroach::roachpb::GCRequest* gc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (gc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gc, submessage_arena);
    }
    set_has_gc();
    value_.gc_ = gc;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.gc)
}
void RequestUnion::set_allocated_push_txn(::cockroach::roachpb::PushTxnRequest* push_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (push_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      push_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_txn, submessage_arena);
    }
    set_has_push_txn();
    value_.push_txn_ = push_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.push_txn)
}
void RequestUnion::set_allocated_recover_txn(::cockroach::roachpb::RecoverTxnRequest* recover_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (recover_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recover_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recover_txn, submessage_arena);
    }
    set_has_recover_txn();
    value_.recover_txn_ = recover_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.recover_txn)
}
void RequestUnion::set_allocated_resolve_intent(::cockroach::roachpb::ResolveIntentRequest* resolve_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (resolve_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resolve_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resolve_intent, submessage_arena);
    }
    set_has_resolve_intent();
    value_.resolve_intent_ = resolve_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.resolve_intent)
}
void RequestUnion::set_allocated_resolve_intent_range(::cockroach::roachpb::ResolveIntentRangeRequest* resolve_intent_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (resolve_intent_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resolve_intent_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resolve_intent_range, submessage_arena);
    }
    set_has_resolve_intent_range();
    value_.resolve_intent_range_ = resolve_intent_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.resolve_intent_range)
}
void RequestUnion::set_allocated_merge(::cockroach::roachpb::MergeRequest* merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, merge, submessage_arena);
    }
    set_has_merge();
    value_.merge_ = merge;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.merge)
}
void RequestUnion::set_allocated_truncate_log(::cockroach::roachpb::TruncateLogRequest* truncate_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (truncate_log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      truncate_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, truncate_log, submessage_arena);
    }
    set_has_truncate_log();
    value_.truncate_log_ = truncate_log;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.truncate_log)
}
void RequestUnion::set_allocated_request_lease(::cockroach::roachpb::RequestLeaseRequest* request_lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (request_lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_lease, submessage_arena);
    }
    set_has_request_lease();
    value_.request_lease_ = request_lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.request_lease)
}
void RequestUnion::set_allocated_reverse_scan(::cockroach::roachpb::ReverseScanRequest* reverse_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (reverse_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reverse_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reverse_scan, submessage_arena);
    }
    set_has_reverse_scan();
    value_.reverse_scan_ = reverse_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.reverse_scan)
}
void RequestUnion::set_allocated_compute_checksum(::cockroach::roachpb::ComputeChecksumRequest* compute_checksum) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (compute_checksum) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      compute_checksum = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compute_checksum, submessage_arena);
    }
    set_has_compute_checksum();
    value_.compute_checksum_ = compute_checksum;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.compute_checksum)
}
void RequestUnion::set_allocated_check_consistency(::cockroach::roachpb::CheckConsistencyRequest* check_consistency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (check_consistency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_consistency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_consistency, submessage_arena);
    }
    set_has_check_consistency();
    value_.check_consistency_ = check_consistency;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.check_consistency)
}
void RequestUnion::set_allocated_init_put(::cockroach::roachpb::InitPutRequest* init_put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (init_put) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init_put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_put, submessage_arena);
    }
    set_has_init_put();
    value_.init_put_ = init_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.init_put)
}
void RequestUnion::set_allocated_transfer_lease(::cockroach::roachpb::TransferLeaseRequest* transfer_lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (transfer_lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transfer_lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transfer_lease, submessage_arena);
    }
    set_has_transfer_lease();
    value_.transfer_lease_ = transfer_lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.transfer_lease)
}
void RequestUnion::set_allocated_lease_info(::cockroach::roachpb::LeaseInfoRequest* lease_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (lease_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lease_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease_info, submessage_arena);
    }
    set_has_lease_info();
    value_.lease_info_ = lease_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.lease_info)
}
void RequestUnion::set_allocated_write_batch(::cockroach::roachpb::WriteBatchRequest* write_batch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (write_batch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_batch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_batch, submessage_arena);
    }
    set_has_write_batch();
    value_.write_batch_ = write_batch;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.write_batch)
}
void RequestUnion::set_allocated_export_(::cockroach::roachpb::ExportRequest* export_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (export_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      export_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, export_, submessage_arena);
    }
    set_has_export_();
    value_.export__ = export_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.export)
}
void RequestUnion::set_allocated_import(::cockroach::roachpb::ImportRequest* import) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (import) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      import = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, import, submessage_arena);
    }
    set_has_import();
    value_.import_ = import;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.import)
}
void RequestUnion::set_allocated_query_txn(::cockroach::roachpb::QueryTxnRequest* query_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (query_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_txn, submessage_arena);
    }
    set_has_query_txn();
    value_.query_txn_ = query_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.query_txn)
}
void RequestUnion::set_allocated_query_intent(::cockroach::roachpb::QueryIntentRequest* query_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (query_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_intent, submessage_arena);
    }
    set_has_query_intent();
    value_.query_intent_ = query_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.query_intent)
}
void RequestUnion::set_allocated_admin_scatter(::cockroach::roachpb::AdminScatterRequest* admin_scatter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_scatter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_scatter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_scatter, submessage_arena);
    }
    set_has_admin_scatter();
    value_.admin_scatter_ = admin_scatter;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.admin_scatter)
}
void RequestUnion::set_allocated_add_sstable(::cockroach::roachpb::AddSSTableRequest* add_sstable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (add_sstable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_sstable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_sstable, submessage_arena);
    }
    set_has_add_sstable();
    value_.add_sstable_ = add_sstable;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.add_sstable)
}
void RequestUnion::set_allocated_recompute_stats(::cockroach::roachpb::RecomputeStatsRequest* recompute_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (recompute_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recompute_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recompute_stats, submessage_arena);
    }
    set_has_recompute_stats();
    value_.recompute_stats_ = recompute_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.recompute_stats)
}
void RequestUnion::set_allocated_refresh(::cockroach::roachpb::RefreshRequest* refresh) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (refresh) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      refresh = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, refresh, submessage_arena);
    }
    set_has_refresh();
    value_.refresh_ = refresh;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.refresh)
}
void RequestUnion::set_allocated_refresh_range(::cockroach::roachpb::RefreshRangeRequest* refresh_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (refresh_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      refresh_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, refresh_range, submessage_arena);
    }
    set_has_refresh_range();
    value_.refresh_range_ = refresh_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.refresh_range)
}
void RequestUnion::set_allocated_subsume(::cockroach::roachpb::SubsumeRequest* subsume) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (subsume) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subsume = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subsume, submessage_arena);
    }
    set_has_subsume();
    value_.subsume_ = subsume;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.subsume)
}
void RequestUnion::set_allocated_range_stats(::cockroach::roachpb::RangeStatsRequest* range_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (range_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range_stats, submessage_arena);
    }
    set_has_range_stats();
    value_.range_stats_ = range_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.range_stats)
}
void RequestUnion::set_allocated_admin_verify_protected_timestamp(::cockroach::roachpb::AdminVerifyProtectedTimestampRequest* admin_verify_protected_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_verify_protected_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_verify_protected_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_verify_protected_timestamp, submessage_arena);
    }
    set_has_admin_verify_protected_timestamp();
    value_.admin_verify_protected_timestamp_ = admin_verify_protected_timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestUnion.admin_verify_protected_timestamp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestUnion::kGetFieldNumber;
const int RequestUnion::kPutFieldNumber;
const int RequestUnion::kConditionalPutFieldNumber;
const int RequestUnion::kIncrementFieldNumber;
const int RequestUnion::kDeleteFieldNumber;
const int RequestUnion::kDeleteRangeFieldNumber;
const int RequestUnion::kClearRangeFieldNumber;
const int RequestUnion::kRevertRangeFieldNumber;
const int RequestUnion::kScanFieldNumber;
const int RequestUnion::kEndTxnFieldNumber;
const int RequestUnion::kAdminSplitFieldNumber;
const int RequestUnion::kAdminUnsplitFieldNumber;
const int RequestUnion::kAdminMergeFieldNumber;
const int RequestUnion::kAdminTransferLeaseFieldNumber;
const int RequestUnion::kAdminChangeReplicasFieldNumber;
const int RequestUnion::kAdminRelocateRangeFieldNumber;
const int RequestUnion::kHeartbeatTxnFieldNumber;
const int RequestUnion::kGcFieldNumber;
const int RequestUnion::kPushTxnFieldNumber;
const int RequestUnion::kRecoverTxnFieldNumber;
const int RequestUnion::kResolveIntentFieldNumber;
const int RequestUnion::kResolveIntentRangeFieldNumber;
const int RequestUnion::kMergeFieldNumber;
const int RequestUnion::kTruncateLogFieldNumber;
const int RequestUnion::kRequestLeaseFieldNumber;
const int RequestUnion::kReverseScanFieldNumber;
const int RequestUnion::kComputeChecksumFieldNumber;
const int RequestUnion::kCheckConsistencyFieldNumber;
const int RequestUnion::kInitPutFieldNumber;
const int RequestUnion::kTransferLeaseFieldNumber;
const int RequestUnion::kLeaseInfoFieldNumber;
const int RequestUnion::kWriteBatchFieldNumber;
const int RequestUnion::kExportFieldNumber;
const int RequestUnion::kImportFieldNumber;
const int RequestUnion::kQueryTxnFieldNumber;
const int RequestUnion::kQueryIntentFieldNumber;
const int RequestUnion::kAdminScatterFieldNumber;
const int RequestUnion::kAddSstableFieldNumber;
const int RequestUnion::kRecomputeStatsFieldNumber;
const int RequestUnion::kRefreshFieldNumber;
const int RequestUnion::kRefreshRangeFieldNumber;
const int RequestUnion::kSubsumeFieldNumber;
const int RequestUnion::kRangeStatsFieldNumber;
const int RequestUnion::kAdminVerifyProtectedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestUnion::RequestUnion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RequestUnion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RequestUnion)
}
RequestUnion::RequestUnion(const RequestUnion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kGet: {
      mutable_get()->::cockroach::roachpb::GetRequest::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::roachpb::PutRequest::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::roachpb::ConditionalPutRequest::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::roachpb::IncrementRequest::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::roachpb::DeleteRequest::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::roachpb::DeleteRangeRequest::MergeFrom(from.delete_range());
      break;
    }
    case kClearRange: {
      mutable_clear_range()->::cockroach::roachpb::ClearRangeRequest::MergeFrom(from.clear_range());
      break;
    }
    case kRevertRange: {
      mutable_revert_range()->::cockroach::roachpb::RevertRangeRequest::MergeFrom(from.revert_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::roachpb::ScanRequest::MergeFrom(from.scan());
      break;
    }
    case kEndTxn: {
      mutable_end_txn()->::cockroach::roachpb::EndTxnRequest::MergeFrom(from.end_txn());
      break;
    }
    case kAdminSplit: {
      mutable_admin_split()->::cockroach::roachpb::AdminSplitRequest::MergeFrom(from.admin_split());
      break;
    }
    case kAdminUnsplit: {
      mutable_admin_unsplit()->::cockroach::roachpb::AdminUnsplitRequest::MergeFrom(from.admin_unsplit());
      break;
    }
    case kAdminMerge: {
      mutable_admin_merge()->::cockroach::roachpb::AdminMergeRequest::MergeFrom(from.admin_merge());
      break;
    }
    case kAdminTransferLease: {
      mutable_admin_transfer_lease()->::cockroach::roachpb::AdminTransferLeaseRequest::MergeFrom(from.admin_transfer_lease());
      break;
    }
    case kAdminChangeReplicas: {
      mutable_admin_change_replicas()->::cockroach::roachpb::AdminChangeReplicasRequest::MergeFrom(from.admin_change_replicas());
      break;
    }
    case kAdminRelocateRange: {
      mutable_admin_relocate_range()->::cockroach::roachpb::AdminRelocateRangeRequest::MergeFrom(from.admin_relocate_range());
      break;
    }
    case kHeartbeatTxn: {
      mutable_heartbeat_txn()->::cockroach::roachpb::HeartbeatTxnRequest::MergeFrom(from.heartbeat_txn());
      break;
    }
    case kGc: {
      mutable_gc()->::cockroach::roachpb::GCRequest::MergeFrom(from.gc());
      break;
    }
    case kPushTxn: {
      mutable_push_txn()->::cockroach::roachpb::PushTxnRequest::MergeFrom(from.push_txn());
      break;
    }
    case kRecoverTxn: {
      mutable_recover_txn()->::cockroach::roachpb::RecoverTxnRequest::MergeFrom(from.recover_txn());
      break;
    }
    case kResolveIntent: {
      mutable_resolve_intent()->::cockroach::roachpb::ResolveIntentRequest::MergeFrom(from.resolve_intent());
      break;
    }
    case kResolveIntentRange: {
      mutable_resolve_intent_range()->::cockroach::roachpb::ResolveIntentRangeRequest::MergeFrom(from.resolve_intent_range());
      break;
    }
    case kMerge: {
      mutable_merge()->::cockroach::roachpb::MergeRequest::MergeFrom(from.merge());
      break;
    }
    case kTruncateLog: {
      mutable_truncate_log()->::cockroach::roachpb::TruncateLogRequest::MergeFrom(from.truncate_log());
      break;
    }
    case kRequestLease: {
      mutable_request_lease()->::cockroach::roachpb::RequestLeaseRequest::MergeFrom(from.request_lease());
      break;
    }
    case kReverseScan: {
      mutable_reverse_scan()->::cockroach::roachpb::ReverseScanRequest::MergeFrom(from.reverse_scan());
      break;
    }
    case kComputeChecksum: {
      mutable_compute_checksum()->::cockroach::roachpb::ComputeChecksumRequest::MergeFrom(from.compute_checksum());
      break;
    }
    case kCheckConsistency: {
      mutable_check_consistency()->::cockroach::roachpb::CheckConsistencyRequest::MergeFrom(from.check_consistency());
      break;
    }
    case kInitPut: {
      mutable_init_put()->::cockroach::roachpb::InitPutRequest::MergeFrom(from.init_put());
      break;
    }
    case kTransferLease: {
      mutable_transfer_lease()->::cockroach::roachpb::TransferLeaseRequest::MergeFrom(from.transfer_lease());
      break;
    }
    case kLeaseInfo: {
      mutable_lease_info()->::cockroach::roachpb::LeaseInfoRequest::MergeFrom(from.lease_info());
      break;
    }
    case kWriteBatch: {
      mutable_write_batch()->::cockroach::roachpb::WriteBatchRequest::MergeFrom(from.write_batch());
      break;
    }
    case kExport: {
      mutable_export_()->::cockroach::roachpb::ExportRequest::MergeFrom(from.export_());
      break;
    }
    case kImport: {
      mutable_import()->::cockroach::roachpb::ImportRequest::MergeFrom(from.import());
      break;
    }
    case kQueryTxn: {
      mutable_query_txn()->::cockroach::roachpb::QueryTxnRequest::MergeFrom(from.query_txn());
      break;
    }
    case kQueryIntent: {
      mutable_query_intent()->::cockroach::roachpb::QueryIntentRequest::MergeFrom(from.query_intent());
      break;
    }
    case kAdminScatter: {
      mutable_admin_scatter()->::cockroach::roachpb::AdminScatterRequest::MergeFrom(from.admin_scatter());
      break;
    }
    case kAddSstable: {
      mutable_add_sstable()->::cockroach::roachpb::AddSSTableRequest::MergeFrom(from.add_sstable());
      break;
    }
    case kRecomputeStats: {
      mutable_recompute_stats()->::cockroach::roachpb::RecomputeStatsRequest::MergeFrom(from.recompute_stats());
      break;
    }
    case kRefresh: {
      mutable_refresh()->::cockroach::roachpb::RefreshRequest::MergeFrom(from.refresh());
      break;
    }
    case kRefreshRange: {
      mutable_refresh_range()->::cockroach::roachpb::RefreshRangeRequest::MergeFrom(from.refresh_range());
      break;
    }
    case kSubsume: {
      mutable_subsume()->::cockroach::roachpb::SubsumeRequest::MergeFrom(from.subsume());
      break;
    }
    case kRangeStats: {
      mutable_range_stats()->::cockroach::roachpb::RangeStatsRequest::MergeFrom(from.range_stats());
      break;
    }
    case kAdminVerifyProtectedTimestamp: {
      mutable_admin_verify_protected_timestamp()->::cockroach::roachpb::AdminVerifyProtectedTimestampRequest::MergeFrom(from.admin_verify_protected_timestamp());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RequestUnion)
}

void RequestUnion::SharedCtor() {
  clear_has_value();
}

RequestUnion::~RequestUnion() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RequestUnion)
  SharedDtor();
}

void RequestUnion::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void RequestUnion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestUnion& RequestUnion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RequestUnion.base);
  return *internal_default_instance();
}


void RequestUnion::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cockroach.roachpb.RequestUnion)
  switch (value_case()) {
    case kGet: {
      delete value_.get_;
      break;
    }
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kClearRange: {
      delete value_.clear_range_;
      break;
    }
    case kRevertRange: {
      delete value_.revert_range_;
      break;
    }
    case kScan: {
      delete value_.scan_;
      break;
    }
    case kEndTxn: {
      delete value_.end_txn_;
      break;
    }
    case kAdminSplit: {
      delete value_.admin_split_;
      break;
    }
    case kAdminUnsplit: {
      delete value_.admin_unsplit_;
      break;
    }
    case kAdminMerge: {
      delete value_.admin_merge_;
      break;
    }
    case kAdminTransferLease: {
      delete value_.admin_transfer_lease_;
      break;
    }
    case kAdminChangeReplicas: {
      delete value_.admin_change_replicas_;
      break;
    }
    case kAdminRelocateRange: {
      delete value_.admin_relocate_range_;
      break;
    }
    case kHeartbeatTxn: {
      delete value_.heartbeat_txn_;
      break;
    }
    case kGc: {
      delete value_.gc_;
      break;
    }
    case kPushTxn: {
      delete value_.push_txn_;
      break;
    }
    case kRecoverTxn: {
      delete value_.recover_txn_;
      break;
    }
    case kResolveIntent: {
      delete value_.resolve_intent_;
      break;
    }
    case kResolveIntentRange: {
      delete value_.resolve_intent_range_;
      break;
    }
    case kMerge: {
      delete value_.merge_;
      break;
    }
    case kTruncateLog: {
      delete value_.truncate_log_;
      break;
    }
    case kRequestLease: {
      delete value_.request_lease_;
      break;
    }
    case kReverseScan: {
      delete value_.reverse_scan_;
      break;
    }
    case kComputeChecksum: {
      delete value_.compute_checksum_;
      break;
    }
    case kCheckConsistency: {
      delete value_.check_consistency_;
      break;
    }
    case kInitPut: {
      delete value_.init_put_;
      break;
    }
    case kTransferLease: {
      delete value_.transfer_lease_;
      break;
    }
    case kLeaseInfo: {
      delete value_.lease_info_;
      break;
    }
    case kWriteBatch: {
      delete value_.write_batch_;
      break;
    }
    case kExport: {
      delete value_.export__;
      break;
    }
    case kImport: {
      delete value_.import_;
      break;
    }
    case kQueryTxn: {
      delete value_.query_txn_;
      break;
    }
    case kQueryIntent: {
      delete value_.query_intent_;
      break;
    }
    case kAdminScatter: {
      delete value_.admin_scatter_;
      break;
    }
    case kAddSstable: {
      delete value_.add_sstable_;
      break;
    }
    case kRecomputeStats: {
      delete value_.recompute_stats_;
      break;
    }
    case kRefresh: {
      delete value_.refresh_;
      break;
    }
    case kRefreshRange: {
      delete value_.refresh_range_;
      break;
    }
    case kSubsume: {
      delete value_.subsume_;
      break;
    }
    case kRangeStats: {
      delete value_.range_stats_;
      break;
    }
    case kAdminVerifyProtectedTimestamp: {
      delete value_.admin_verify_protected_timestamp_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void RequestUnion::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RequestUnion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

bool RequestUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RequestUnion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.GetRequest get = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.PutRequest put = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ConditionalPutRequest conditional_put = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.IncrementRequest increment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.DeleteRequest delete = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.DeleteRangeRequest delete_range = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ScanRequest scan = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.EndTxnRequest end_txn = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminSplitRequest admin_split = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminMergeRequest admin_merge = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.HeartbeatTxnRequest heartbeat_txn = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.GCRequest gc = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.PushTxnRequest push_txn = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_push_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ResolveIntentRequest resolve_intent = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ResolveIntentRangeRequest resolve_intent_range = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resolve_intent_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.MergeRequest merge = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TruncateLogRequest truncate_log = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_truncate_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RequestLeaseRequest request_lease = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ReverseScanRequest reverse_scan = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reverse_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ComputeChecksumRequest compute_checksum = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compute_checksum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.CheckConsistencyRequest check_consistency = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_consistency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.InitPutRequest init_put = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TransferLeaseRequest transfer_lease = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminTransferLeaseRequest admin_transfer_lease = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_transfer_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.LeaseInfoRequest lease_info = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.WriteBatchRequest write_batch = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_write_batch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ExportRequest export = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_export_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.QueryTxnRequest query_txn = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ImportRequest import = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_import()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminChangeReplicasRequest admin_change_replicas = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_change_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminScatterRequest admin_scatter = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_scatter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AddSSTableRequest add_sstable = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_sstable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ClearRangeRequest clear_range = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clear_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RecomputeStatsRequest recompute_stats = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recompute_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RefreshRequest refresh = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refresh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RefreshRangeRequest refresh_range = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refresh_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.QueryIntentRequest query_intent = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.SubsumeRequest subsume = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subsume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RangeStatsRequest range_stats = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminRelocateRangeRequest admin_relocate_range = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_relocate_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RecoverTxnRequest recover_txn = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recover_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminUnsplitRequest admin_unsplit = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_unsplit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RevertRangeRequest revert_range = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_revert_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminVerifyProtectedTimestampRequest admin_verify_protected_timestamp = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_verify_protected_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RequestUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RequestUnion)
  return false;
#undef DO_
}

void RequestUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RequestUnion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.GetRequest get = 1;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_get(), output);
  }

  // .cockroach.roachpb.PutRequest put = 2;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_put(), output);
  }

  // .cockroach.roachpb.ConditionalPutRequest conditional_put = 3;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_conditional_put(), output);
  }

  // .cockroach.roachpb.IncrementRequest increment = 4;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_increment(), output);
  }

  // .cockroach.roachpb.DeleteRequest delete = 5;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_delete_(), output);
  }

  // .cockroach.roachpb.DeleteRangeRequest delete_range = 6;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_delete_range(), output);
  }

  // .cockroach.roachpb.ScanRequest scan = 7;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_scan(), output);
  }

  // .cockroach.roachpb.EndTxnRequest end_txn = 9;
  if (has_end_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_end_txn(), output);
  }

  // .cockroach.roachpb.AdminSplitRequest admin_split = 10;
  if (has_admin_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_admin_split(), output);
  }

  // .cockroach.roachpb.AdminMergeRequest admin_merge = 11;
  if (has_admin_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_admin_merge(), output);
  }

  // .cockroach.roachpb.HeartbeatTxnRequest heartbeat_txn = 12;
  if (has_heartbeat_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->_internal_heartbeat_txn(), output);
  }

  // .cockroach.roachpb.GCRequest gc = 13;
  if (has_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->_internal_gc(), output);
  }

  // .cockroach.roachpb.PushTxnRequest push_txn = 14;
  if (has_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->_internal_push_txn(), output);
  }

  // .cockroach.roachpb.ResolveIntentRequest resolve_intent = 16;
  if (has_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->_internal_resolve_intent(), output);
  }

  // .cockroach.roachpb.ResolveIntentRangeRequest resolve_intent_range = 17;
  if (has_resolve_intent_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->_internal_resolve_intent_range(), output);
  }

  // .cockroach.roachpb.MergeRequest merge = 18;
  if (has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->_internal_merge(), output);
  }

  // .cockroach.roachpb.TruncateLogRequest truncate_log = 19;
  if (has_truncate_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->_internal_truncate_log(), output);
  }

  // .cockroach.roachpb.RequestLeaseRequest request_lease = 20;
  if (has_request_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->_internal_request_lease(), output);
  }

  // .cockroach.roachpb.ReverseScanRequest reverse_scan = 21;
  if (has_reverse_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->_internal_reverse_scan(), output);
  }

  // .cockroach.roachpb.ComputeChecksumRequest compute_checksum = 22;
  if (has_compute_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->_internal_compute_checksum(), output);
  }

  // .cockroach.roachpb.CheckConsistencyRequest check_consistency = 24;
  if (has_check_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->_internal_check_consistency(), output);
  }

  // .cockroach.roachpb.InitPutRequest init_put = 26;
  if (has_init_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->_internal_init_put(), output);
  }

  // .cockroach.roachpb.TransferLeaseRequest transfer_lease = 28;
  if (has_transfer_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->_internal_transfer_lease(), output);
  }

  // .cockroach.roachpb.AdminTransferLeaseRequest admin_transfer_lease = 29;
  if (has_admin_transfer_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->_internal_admin_transfer_lease(), output);
  }

  // .cockroach.roachpb.LeaseInfoRequest lease_info = 30;
  if (has_lease_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->_internal_lease_info(), output);
  }

  // .cockroach.roachpb.WriteBatchRequest write_batch = 31;
  if (has_write_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->_internal_write_batch(), output);
  }

  // .cockroach.roachpb.ExportRequest export = 32;
  if (has_export_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->_internal_export_(), output);
  }

  // .cockroach.roachpb.QueryTxnRequest query_txn = 33;
  if (has_query_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->_internal_query_txn(), output);
  }

  // .cockroach.roachpb.ImportRequest import = 34;
  if (has_import()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->_internal_import(), output);
  }

  // .cockroach.roachpb.AdminChangeReplicasRequest admin_change_replicas = 35;
  if (has_admin_change_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->_internal_admin_change_replicas(), output);
  }

  // .cockroach.roachpb.AdminScatterRequest admin_scatter = 36;
  if (has_admin_scatter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->_internal_admin_scatter(), output);
  }

  // .cockroach.roachpb.AddSSTableRequest add_sstable = 37;
  if (has_add_sstable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->_internal_add_sstable(), output);
  }

  // .cockroach.roachpb.ClearRangeRequest clear_range = 38;
  if (has_clear_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->_internal_clear_range(), output);
  }

  // .cockroach.roachpb.RecomputeStatsRequest recompute_stats = 39;
  if (has_recompute_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, this->_internal_recompute_stats(), output);
  }

  // .cockroach.roachpb.RefreshRequest refresh = 40;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->_internal_refresh(), output);
  }

  // .cockroach.roachpb.RefreshRangeRequest refresh_range = 41;
  if (has_refresh_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->_internal_refresh_range(), output);
  }

  // .cockroach.roachpb.QueryIntentRequest query_intent = 42;
  if (has_query_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, this->_internal_query_intent(), output);
  }

  // .cockroach.roachpb.SubsumeRequest subsume = 43;
  if (has_subsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, this->_internal_subsume(), output);
  }

  // .cockroach.roachpb.RangeStatsRequest range_stats = 44;
  if (has_range_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, this->_internal_range_stats(), output);
  }

  // .cockroach.roachpb.AdminRelocateRangeRequest admin_relocate_range = 45;
  if (has_admin_relocate_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->_internal_admin_relocate_range(), output);
  }

  // .cockroach.roachpb.RecoverTxnRequest recover_txn = 46;
  if (has_recover_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->_internal_recover_txn(), output);
  }

  // .cockroach.roachpb.AdminUnsplitRequest admin_unsplit = 47;
  if (has_admin_unsplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->_internal_admin_unsplit(), output);
  }

  // .cockroach.roachpb.RevertRangeRequest revert_range = 48;
  if (has_revert_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->_internal_revert_range(), output);
  }

  // .cockroach.roachpb.AdminVerifyProtectedTimestampRequest admin_verify_protected_timestamp = 49;
  if (has_admin_verify_protected_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->_internal_admin_verify_protected_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RequestUnion)
}

size_t RequestUnion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RequestUnion)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  switch (value_case()) {
    // .cockroach.roachpb.GetRequest get = 1;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.get_);
      break;
    }
    // .cockroach.roachpb.PutRequest put = 2;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.put_);
      break;
    }
    // .cockroach.roachpb.ConditionalPutRequest conditional_put = 3;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.conditional_put_);
      break;
    }
    // .cockroach.roachpb.IncrementRequest increment = 4;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.increment_);
      break;
    }
    // .cockroach.roachpb.DeleteRequest delete = 5;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.delete__);
      break;
    }
    // .cockroach.roachpb.DeleteRangeRequest delete_range = 6;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.delete_range_);
      break;
    }
    // .cockroach.roachpb.ClearRangeRequest clear_range = 38;
    case kClearRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.clear_range_);
      break;
    }
    // .cockroach.roachpb.RevertRangeRequest revert_range = 48;
    case kRevertRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.revert_range_);
      break;
    }
    // .cockroach.roachpb.ScanRequest scan = 7;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.scan_);
      break;
    }
    // .cockroach.roachpb.EndTxnRequest end_txn = 9;
    case kEndTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.end_txn_);
      break;
    }
    // .cockroach.roachpb.AdminSplitRequest admin_split = 10;
    case kAdminSplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_split_);
      break;
    }
    // .cockroach.roachpb.AdminUnsplitRequest admin_unsplit = 47;
    case kAdminUnsplit: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_unsplit_);
      break;
    }
    // .cockroach.roachpb.AdminMergeRequest admin_merge = 11;
    case kAdminMerge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_merge_);
      break;
    }
    // .cockroach.roachpb.AdminTransferLeaseRequest admin_transfer_lease = 29;
    case kAdminTransferLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_transfer_lease_);
      break;
    }
    // .cockroach.roachpb.AdminChangeReplicasRequest admin_change_replicas = 35;
    case kAdminChangeReplicas: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_change_replicas_);
      break;
    }
    // .cockroach.roachpb.AdminRelocateRangeRequest admin_relocate_range = 45;
    case kAdminRelocateRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_relocate_range_);
      break;
    }
    // .cockroach.roachpb.HeartbeatTxnRequest heartbeat_txn = 12;
    case kHeartbeatTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.heartbeat_txn_);
      break;
    }
    // .cockroach.roachpb.GCRequest gc = 13;
    case kGc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.gc_);
      break;
    }
    // .cockroach.roachpb.PushTxnRequest push_txn = 14;
    case kPushTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.push_txn_);
      break;
    }
    // .cockroach.roachpb.RecoverTxnRequest recover_txn = 46;
    case kRecoverTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.recover_txn_);
      break;
    }
    // .cockroach.roachpb.ResolveIntentRequest resolve_intent = 16;
    case kResolveIntent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.resolve_intent_);
      break;
    }
    // .cockroach.roachpb.ResolveIntentRangeRequest resolve_intent_range = 17;
    case kResolveIntentRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.resolve_intent_range_);
      break;
    }
    // .cockroach.roachpb.MergeRequest merge = 18;
    case kMerge: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.merge_);
      break;
    }
    // .cockroach.roachpb.TruncateLogRequest truncate_log = 19;
    case kTruncateLog: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.truncate_log_);
      break;
    }
    // .cockroach.roachpb.RequestLeaseRequest request_lease = 20;
    case kRequestLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.request_lease_);
      break;
    }
    // .cockroach.roachpb.ReverseScanRequest reverse_scan = 21;
    case kReverseScan: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.reverse_scan_);
      break;
    }
    // .cockroach.roachpb.ComputeChecksumRequest compute_checksum = 22;
    case kComputeChecksum: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.compute_checksum_);
      break;
    }
    // .cockroach.roachpb.CheckConsistencyRequest check_consistency = 24;
    case kCheckConsistency: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.check_consistency_);
      break;
    }
    // .cockroach.roachpb.InitPutRequest init_put = 26;
    case kInitPut: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.init_put_);
      break;
    }
    // .cockroach.roachpb.TransferLeaseRequest transfer_lease = 28;
    case kTransferLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.transfer_lease_);
      break;
    }
    // .cockroach.roachpb.LeaseInfoRequest lease_info = 30;
    case kLeaseInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.lease_info_);
      break;
    }
    // .cockroach.roachpb.WriteBatchRequest write_batch = 31;
    case kWriteBatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.write_batch_);
      break;
    }
    // .cockroach.roachpb.ExportRequest export = 32;
    case kExport: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.export__);
      break;
    }
    // .cockroach.roachpb.ImportRequest import = 34;
    case kImport: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.import_);
      break;
    }
    // .cockroach.roachpb.QueryTxnRequest query_txn = 33;
    case kQueryTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.query_txn_);
      break;
    }
    // .cockroach.roachpb.QueryIntentRequest query_intent = 42;
    case kQueryIntent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.query_intent_);
      break;
    }
    // .cockroach.roachpb.AdminScatterRequest admin_scatter = 36;
    case kAdminScatter: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_scatter_);
      break;
    }
    // .cockroach.roachpb.AddSSTableRequest add_sstable = 37;
    case kAddSstable: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.add_sstable_);
      break;
    }
    // .cockroach.roachpb.RecomputeStatsRequest recompute_stats = 39;
    case kRecomputeStats: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.recompute_stats_);
      break;
    }
    // .cockroach.roachpb.RefreshRequest refresh = 40;
    case kRefresh: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.refresh_);
      break;
    }
    // .cockroach.roachpb.RefreshRangeRequest refresh_range = 41;
    case kRefreshRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.refresh_range_);
      break;
    }
    // .cockroach.roachpb.SubsumeRequest subsume = 43;
    case kSubsume: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.subsume_);
      break;
    }
    // .cockroach.roachpb.RangeStatsRequest range_stats = 44;
    case kRangeStats: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.range_stats_);
      break;
    }
    // .cockroach.roachpb.AdminVerifyProtectedTimestampRequest admin_verify_protected_timestamp = 49;
    case kAdminVerifyProtectedTimestamp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_verify_protected_timestamp_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestUnion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUnion*>(&from));
}

void RequestUnion::MergeFrom(const RequestUnion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RequestUnion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kGet: {
      mutable_get()->::cockroach::roachpb::GetRequest::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::roachpb::PutRequest::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::roachpb::ConditionalPutRequest::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::roachpb::IncrementRequest::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::roachpb::DeleteRequest::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::roachpb::DeleteRangeRequest::MergeFrom(from.delete_range());
      break;
    }
    case kClearRange: {
      mutable_clear_range()->::cockroach::roachpb::ClearRangeRequest::MergeFrom(from.clear_range());
      break;
    }
    case kRevertRange: {
      mutable_revert_range()->::cockroach::roachpb::RevertRangeRequest::MergeFrom(from.revert_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::roachpb::ScanRequest::MergeFrom(from.scan());
      break;
    }
    case kEndTxn: {
      mutable_end_txn()->::cockroach::roachpb::EndTxnRequest::MergeFrom(from.end_txn());
      break;
    }
    case kAdminSplit: {
      mutable_admin_split()->::cockroach::roachpb::AdminSplitRequest::MergeFrom(from.admin_split());
      break;
    }
    case kAdminUnsplit: {
      mutable_admin_unsplit()->::cockroach::roachpb::AdminUnsplitRequest::MergeFrom(from.admin_unsplit());
      break;
    }
    case kAdminMerge: {
      mutable_admin_merge()->::cockroach::roachpb::AdminMergeRequest::MergeFrom(from.admin_merge());
      break;
    }
    case kAdminTransferLease: {
      mutable_admin_transfer_lease()->::cockroach::roachpb::AdminTransferLeaseRequest::MergeFrom(from.admin_transfer_lease());
      break;
    }
    case kAdminChangeReplicas: {
      mutable_admin_change_replicas()->::cockroach::roachpb::AdminChangeReplicasRequest::MergeFrom(from.admin_change_replicas());
      break;
    }
    case kAdminRelocateRange: {
      mutable_admin_relocate_range()->::cockroach::roachpb::AdminRelocateRangeRequest::MergeFrom(from.admin_relocate_range());
      break;
    }
    case kHeartbeatTxn: {
      mutable_heartbeat_txn()->::cockroach::roachpb::HeartbeatTxnRequest::MergeFrom(from.heartbeat_txn());
      break;
    }
    case kGc: {
      mutable_gc()->::cockroach::roachpb::GCRequest::MergeFrom(from.gc());
      break;
    }
    case kPushTxn: {
      mutable_push_txn()->::cockroach::roachpb::PushTxnRequest::MergeFrom(from.push_txn());
      break;
    }
    case kRecoverTxn: {
      mutable_recover_txn()->::cockroach::roachpb::RecoverTxnRequest::MergeFrom(from.recover_txn());
      break;
    }
    case kResolveIntent: {
      mutable_resolve_intent()->::cockroach::roachpb::ResolveIntentRequest::MergeFrom(from.resolve_intent());
      break;
    }
    case kResolveIntentRange: {
      mutable_resolve_intent_range()->::cockroach::roachpb::ResolveIntentRangeRequest::MergeFrom(from.resolve_intent_range());
      break;
    }
    case kMerge: {
      mutable_merge()->::cockroach::roachpb::MergeRequest::MergeFrom(from.merge());
      break;
    }
    case kTruncateLog: {
      mutable_truncate_log()->::cockroach::roachpb::TruncateLogRequest::MergeFrom(from.truncate_log());
      break;
    }
    case kRequestLease: {
      mutable_request_lease()->::cockroach::roachpb::RequestLeaseRequest::MergeFrom(from.request_lease());
      break;
    }
    case kReverseScan: {
      mutable_reverse_scan()->::cockroach::roachpb::ReverseScanRequest::MergeFrom(from.reverse_scan());
      break;
    }
    case kComputeChecksum: {
      mutable_compute_checksum()->::cockroach::roachpb::ComputeChecksumRequest::MergeFrom(from.compute_checksum());
      break;
    }
    case kCheckConsistency: {
      mutable_check_consistency()->::cockroach::roachpb::CheckConsistencyRequest::MergeFrom(from.check_consistency());
      break;
    }
    case kInitPut: {
      mutable_init_put()->::cockroach::roachpb::InitPutRequest::MergeFrom(from.init_put());
      break;
    }
    case kTransferLease: {
      mutable_transfer_lease()->::cockroach::roachpb::TransferLeaseRequest::MergeFrom(from.transfer_lease());
      break;
    }
    case kLeaseInfo: {
      mutable_lease_info()->::cockroach::roachpb::LeaseInfoRequest::MergeFrom(from.lease_info());
      break;
    }
    case kWriteBatch: {
      mutable_write_batch()->::cockroach::roachpb::WriteBatchRequest::MergeFrom(from.write_batch());
      break;
    }
    case kExport: {
      mutable_export_()->::cockroach::roachpb::ExportRequest::MergeFrom(from.export_());
      break;
    }
    case kImport: {
      mutable_import()->::cockroach::roachpb::ImportRequest::MergeFrom(from.import());
      break;
    }
    case kQueryTxn: {
      mutable_query_txn()->::cockroach::roachpb::QueryTxnRequest::MergeFrom(from.query_txn());
      break;
    }
    case kQueryIntent: {
      mutable_query_intent()->::cockroach::roachpb::QueryIntentRequest::MergeFrom(from.query_intent());
      break;
    }
    case kAdminScatter: {
      mutable_admin_scatter()->::cockroach::roachpb::AdminScatterRequest::MergeFrom(from.admin_scatter());
      break;
    }
    case kAddSstable: {
      mutable_add_sstable()->::cockroach::roachpb::AddSSTableRequest::MergeFrom(from.add_sstable());
      break;
    }
    case kRecomputeStats: {
      mutable_recompute_stats()->::cockroach::roachpb::RecomputeStatsRequest::MergeFrom(from.recompute_stats());
      break;
    }
    case kRefresh: {
      mutable_refresh()->::cockroach::roachpb::RefreshRequest::MergeFrom(from.refresh());
      break;
    }
    case kRefreshRange: {
      mutable_refresh_range()->::cockroach::roachpb::RefreshRangeRequest::MergeFrom(from.refresh_range());
      break;
    }
    case kSubsume: {
      mutable_subsume()->::cockroach::roachpb::SubsumeRequest::MergeFrom(from.subsume());
      break;
    }
    case kRangeStats: {
      mutable_range_stats()->::cockroach::roachpb::RangeStatsRequest::MergeFrom(from.range_stats());
      break;
    }
    case kAdminVerifyProtectedTimestamp: {
      mutable_admin_verify_protected_timestamp()->::cockroach::roachpb::AdminVerifyProtectedTimestampRequest::MergeFrom(from.admin_verify_protected_timestamp());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void RequestUnion::CopyFrom(const RequestUnion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RequestUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUnion::IsInitialized() const {
  return true;
}

void RequestUnion::Swap(RequestUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestUnion::InternalSwap(RequestUnion* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RequestUnion::GetTypeName() const {
  return "cockroach.roachpb.RequestUnion";
}


// ===================================================================

void ResponseUnion::InitAsDefaultInstance() {
}
void ResponseUnion::set_allocated_get(::cockroach::roachpb::GetResponse* get) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (get) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    set_has_get();
    value_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.get)
}
void ResponseUnion::set_allocated_put(::cockroach::roachpb::PutResponse* put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (put) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.put)
}
void ResponseUnion::set_allocated_conditional_put(::cockroach::roachpb::ConditionalPutResponse* conditional_put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (conditional_put) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conditional_put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conditional_put, submessage_arena);
    }
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.conditional_put)
}
void ResponseUnion::set_allocated_increment(::cockroach::roachpb::IncrementResponse* increment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (increment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      increment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, increment, submessage_arena);
    }
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.increment)
}
void ResponseUnion::set_allocated_delete_(::cockroach::roachpb::DeleteResponse* delete_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (delete_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_, submessage_arena);
    }
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.delete)
}
void ResponseUnion::set_allocated_delete_range(::cockroach::roachpb::DeleteRangeResponse* delete_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (delete_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_range, submessage_arena);
    }
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.delete_range)
}
void ResponseUnion::set_allocated_clear_range(::cockroach::roachpb::ClearRangeResponse* clear_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (clear_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clear_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clear_range, submessage_arena);
    }
    set_has_clear_range();
    value_.clear_range_ = clear_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.clear_range)
}
void ResponseUnion::set_allocated_revert_range(::cockroach::roachpb::RevertRangeResponse* revert_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (revert_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      revert_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, revert_range, submessage_arena);
    }
    set_has_revert_range();
    value_.revert_range_ = revert_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.revert_range)
}
void ResponseUnion::set_allocated_scan(::cockroach::roachpb::ScanResponse* scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scan, submessage_arena);
    }
    set_has_scan();
    value_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.scan)
}
void ResponseUnion::set_allocated_end_txn(::cockroach::roachpb::EndTxnResponse* end_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (end_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_txn, submessage_arena);
    }
    set_has_end_txn();
    value_.end_txn_ = end_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.end_txn)
}
void ResponseUnion::set_allocated_admin_split(::cockroach::roachpb::AdminSplitResponse* admin_split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_split) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_split, submessage_arena);
    }
    set_has_admin_split();
    value_.admin_split_ = admin_split;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.admin_split)
}
void ResponseUnion::set_allocated_admin_unsplit(::cockroach::roachpb::AdminUnsplitResponse* admin_unsplit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_unsplit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_unsplit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_unsplit, submessage_arena);
    }
    set_has_admin_unsplit();
    value_.admin_unsplit_ = admin_unsplit;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.admin_unsplit)
}
void ResponseUnion::set_allocated_admin_merge(::cockroach::roachpb::AdminMergeResponse* admin_merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_merge, submessage_arena);
    }
    set_has_admin_merge();
    value_.admin_merge_ = admin_merge;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.admin_merge)
}
void ResponseUnion::set_allocated_admin_transfer_lease(::cockroach::roachpb::AdminTransferLeaseResponse* admin_transfer_lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_transfer_lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_transfer_lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_transfer_lease, submessage_arena);
    }
    set_has_admin_transfer_lease();
    value_.admin_transfer_lease_ = admin_transfer_lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.admin_transfer_lease)
}
void ResponseUnion::set_allocated_admin_change_replicas(::cockroach::roachpb::AdminChangeReplicasResponse* admin_change_replicas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_change_replicas) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_change_replicas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_change_replicas, submessage_arena);
    }
    set_has_admin_change_replicas();
    value_.admin_change_replicas_ = admin_change_replicas;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.admin_change_replicas)
}
void ResponseUnion::set_allocated_admin_relocate_range(::cockroach::roachpb::AdminRelocateRangeResponse* admin_relocate_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_relocate_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_relocate_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_relocate_range, submessage_arena);
    }
    set_has_admin_relocate_range();
    value_.admin_relocate_range_ = admin_relocate_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.admin_relocate_range)
}
void ResponseUnion::set_allocated_heartbeat_txn(::cockroach::roachpb::HeartbeatTxnResponse* heartbeat_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (heartbeat_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heartbeat_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heartbeat_txn, submessage_arena);
    }
    set_has_heartbeat_txn();
    value_.heartbeat_txn_ = heartbeat_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.heartbeat_txn)
}
void ResponseUnion::set_allocated_gc(::cockroach::roachpb::GCResponse* gc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (gc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gc, submessage_arena);
    }
    set_has_gc();
    value_.gc_ = gc;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.gc)
}
void ResponseUnion::set_allocated_push_txn(::cockroach::roachpb::PushTxnResponse* push_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (push_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      push_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_txn, submessage_arena);
    }
    set_has_push_txn();
    value_.push_txn_ = push_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.push_txn)
}
void ResponseUnion::set_allocated_recover_txn(::cockroach::roachpb::RecoverTxnResponse* recover_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (recover_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recover_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recover_txn, submessage_arena);
    }
    set_has_recover_txn();
    value_.recover_txn_ = recover_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.recover_txn)
}
void ResponseUnion::set_allocated_resolve_intent(::cockroach::roachpb::ResolveIntentResponse* resolve_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (resolve_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resolve_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resolve_intent, submessage_arena);
    }
    set_has_resolve_intent();
    value_.resolve_intent_ = resolve_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.resolve_intent)
}
void ResponseUnion::set_allocated_resolve_intent_range(::cockroach::roachpb::ResolveIntentRangeResponse* resolve_intent_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (resolve_intent_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resolve_intent_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resolve_intent_range, submessage_arena);
    }
    set_has_resolve_intent_range();
    value_.resolve_intent_range_ = resolve_intent_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.resolve_intent_range)
}
void ResponseUnion::set_allocated_merge(::cockroach::roachpb::MergeResponse* merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, merge, submessage_arena);
    }
    set_has_merge();
    value_.merge_ = merge;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.merge)
}
void ResponseUnion::set_allocated_truncate_log(::cockroach::roachpb::TruncateLogResponse* truncate_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (truncate_log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      truncate_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, truncate_log, submessage_arena);
    }
    set_has_truncate_log();
    value_.truncate_log_ = truncate_log;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.truncate_log)
}
void ResponseUnion::set_allocated_request_lease(::cockroach::roachpb::RequestLeaseResponse* request_lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (request_lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_lease, submessage_arena);
    }
    set_has_request_lease();
    value_.request_lease_ = request_lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.request_lease)
}
void ResponseUnion::set_allocated_reverse_scan(::cockroach::roachpb::ReverseScanResponse* reverse_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (reverse_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reverse_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reverse_scan, submessage_arena);
    }
    set_has_reverse_scan();
    value_.reverse_scan_ = reverse_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.reverse_scan)
}
void ResponseUnion::set_allocated_compute_checksum(::cockroach::roachpb::ComputeChecksumResponse* compute_checksum) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (compute_checksum) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      compute_checksum = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compute_checksum, submessage_arena);
    }
    set_has_compute_checksum();
    value_.compute_checksum_ = compute_checksum;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.compute_checksum)
}
void ResponseUnion::set_allocated_check_consistency(::cockroach::roachpb::CheckConsistencyResponse* check_consistency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (check_consistency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_consistency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_consistency, submessage_arena);
    }
    set_has_check_consistency();
    value_.check_consistency_ = check_consistency;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.check_consistency)
}
void ResponseUnion::set_allocated_init_put(::cockroach::roachpb::InitPutResponse* init_put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (init_put) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init_put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_put, submessage_arena);
    }
    set_has_init_put();
    value_.init_put_ = init_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.init_put)
}
void ResponseUnion::set_allocated_lease_info(::cockroach::roachpb::LeaseInfoResponse* lease_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (lease_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lease_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease_info, submessage_arena);
    }
    set_has_lease_info();
    value_.lease_info_ = lease_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.lease_info)
}
void ResponseUnion::set_allocated_write_batch(::cockroach::roachpb::WriteBatchResponse* write_batch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (write_batch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_batch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_batch, submessage_arena);
    }
    set_has_write_batch();
    value_.write_batch_ = write_batch;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.write_batch)
}
void ResponseUnion::set_allocated_export_(::cockroach::roachpb::ExportResponse* export_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (export_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      export_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, export_, submessage_arena);
    }
    set_has_export_();
    value_.export__ = export_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.export)
}
void ResponseUnion::set_allocated_import(::cockroach::roachpb::ImportResponse* import) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (import) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      import = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, import, submessage_arena);
    }
    set_has_import();
    value_.import_ = import;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.import)
}
void ResponseUnion::set_allocated_query_txn(::cockroach::roachpb::QueryTxnResponse* query_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (query_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_txn, submessage_arena);
    }
    set_has_query_txn();
    value_.query_txn_ = query_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.query_txn)
}
void ResponseUnion::set_allocated_query_intent(::cockroach::roachpb::QueryIntentResponse* query_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (query_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_intent, submessage_arena);
    }
    set_has_query_intent();
    value_.query_intent_ = query_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.query_intent)
}
void ResponseUnion::set_allocated_admin_scatter(::cockroach::roachpb::AdminScatterResponse* admin_scatter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_scatter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_scatter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_scatter, submessage_arena);
    }
    set_has_admin_scatter();
    value_.admin_scatter_ = admin_scatter;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.admin_scatter)
}
void ResponseUnion::set_allocated_add_sstable(::cockroach::roachpb::AddSSTableResponse* add_sstable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (add_sstable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_sstable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_sstable, submessage_arena);
    }
    set_has_add_sstable();
    value_.add_sstable_ = add_sstable;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.add_sstable)
}
void ResponseUnion::set_allocated_recompute_stats(::cockroach::roachpb::RecomputeStatsResponse* recompute_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (recompute_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recompute_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recompute_stats, submessage_arena);
    }
    set_has_recompute_stats();
    value_.recompute_stats_ = recompute_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.recompute_stats)
}
void ResponseUnion::set_allocated_refresh(::cockroach::roachpb::RefreshResponse* refresh) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (refresh) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      refresh = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, refresh, submessage_arena);
    }
    set_has_refresh();
    value_.refresh_ = refresh;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.refresh)
}
void ResponseUnion::set_allocated_refresh_range(::cockroach::roachpb::RefreshRangeResponse* refresh_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (refresh_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      refresh_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, refresh_range, submessage_arena);
    }
    set_has_refresh_range();
    value_.refresh_range_ = refresh_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.refresh_range)
}
void ResponseUnion::set_allocated_subsume(::cockroach::roachpb::SubsumeResponse* subsume) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (subsume) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subsume = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subsume, submessage_arena);
    }
    set_has_subsume();
    value_.subsume_ = subsume;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.subsume)
}
void ResponseUnion::set_allocated_range_stats(::cockroach::roachpb::RangeStatsResponse* range_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (range_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range_stats, submessage_arena);
    }
    set_has_range_stats();
    value_.range_stats_ = range_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.range_stats)
}
void ResponseUnion::set_allocated_admin_verify_protected_timestamp(::cockroach::roachpb::AdminVerifyProtectedTimestampResponse* admin_verify_protected_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (admin_verify_protected_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_verify_protected_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_verify_protected_timestamp, submessage_arena);
    }
    set_has_admin_verify_protected_timestamp();
    value_.admin_verify_protected_timestamp_ = admin_verify_protected_timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseUnion.admin_verify_protected_timestamp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseUnion::kGetFieldNumber;
const int ResponseUnion::kPutFieldNumber;
const int ResponseUnion::kConditionalPutFieldNumber;
const int ResponseUnion::kIncrementFieldNumber;
const int ResponseUnion::kDeleteFieldNumber;
const int ResponseUnion::kDeleteRangeFieldNumber;
const int ResponseUnion::kClearRangeFieldNumber;
const int ResponseUnion::kRevertRangeFieldNumber;
const int ResponseUnion::kScanFieldNumber;
const int ResponseUnion::kEndTxnFieldNumber;
const int ResponseUnion::kAdminSplitFieldNumber;
const int ResponseUnion::kAdminUnsplitFieldNumber;
const int ResponseUnion::kAdminMergeFieldNumber;
const int ResponseUnion::kAdminTransferLeaseFieldNumber;
const int ResponseUnion::kAdminChangeReplicasFieldNumber;
const int ResponseUnion::kAdminRelocateRangeFieldNumber;
const int ResponseUnion::kHeartbeatTxnFieldNumber;
const int ResponseUnion::kGcFieldNumber;
const int ResponseUnion::kPushTxnFieldNumber;
const int ResponseUnion::kRecoverTxnFieldNumber;
const int ResponseUnion::kResolveIntentFieldNumber;
const int ResponseUnion::kResolveIntentRangeFieldNumber;
const int ResponseUnion::kMergeFieldNumber;
const int ResponseUnion::kTruncateLogFieldNumber;
const int ResponseUnion::kRequestLeaseFieldNumber;
const int ResponseUnion::kReverseScanFieldNumber;
const int ResponseUnion::kComputeChecksumFieldNumber;
const int ResponseUnion::kCheckConsistencyFieldNumber;
const int ResponseUnion::kInitPutFieldNumber;
const int ResponseUnion::kLeaseInfoFieldNumber;
const int ResponseUnion::kWriteBatchFieldNumber;
const int ResponseUnion::kExportFieldNumber;
const int ResponseUnion::kImportFieldNumber;
const int ResponseUnion::kQueryTxnFieldNumber;
const int ResponseUnion::kQueryIntentFieldNumber;
const int ResponseUnion::kAdminScatterFieldNumber;
const int ResponseUnion::kAddSstableFieldNumber;
const int ResponseUnion::kRecomputeStatsFieldNumber;
const int ResponseUnion::kRefreshFieldNumber;
const int ResponseUnion::kRefreshRangeFieldNumber;
const int ResponseUnion::kSubsumeFieldNumber;
const int ResponseUnion::kRangeStatsFieldNumber;
const int ResponseUnion::kAdminVerifyProtectedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseUnion::ResponseUnion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_ResponseUnion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ResponseUnion)
}
ResponseUnion::ResponseUnion(const ResponseUnion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kGet: {
      mutable_get()->::cockroach::roachpb::GetResponse::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::roachpb::PutResponse::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::roachpb::ConditionalPutResponse::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::roachpb::IncrementResponse::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::roachpb::DeleteResponse::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::roachpb::DeleteRangeResponse::MergeFrom(from.delete_range());
      break;
    }
    case kClearRange: {
      mutable_clear_range()->::cockroach::roachpb::ClearRangeResponse::MergeFrom(from.clear_range());
      break;
    }
    case kRevertRange: {
      mutable_revert_range()->::cockroach::roachpb::RevertRangeResponse::MergeFrom(from.revert_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::roachpb::ScanResponse::MergeFrom(from.scan());
      break;
    }
    case kEndTxn: {
      mutable_end_txn()->::cockroach::roachpb::EndTxnResponse::MergeFrom(from.end_txn());
      break;
    }
    case kAdminSplit: {
      mutable_admin_split()->::cockroach::roachpb::AdminSplitResponse::MergeFrom(from.admin_split());
      break;
    }
    case kAdminUnsplit: {
      mutable_admin_unsplit()->::cockroach::roachpb::AdminUnsplitResponse::MergeFrom(from.admin_unsplit());
      break;
    }
    case kAdminMerge: {
      mutable_admin_merge()->::cockroach::roachpb::AdminMergeResponse::MergeFrom(from.admin_merge());
      break;
    }
    case kAdminTransferLease: {
      mutable_admin_transfer_lease()->::cockroach::roachpb::AdminTransferLeaseResponse::MergeFrom(from.admin_transfer_lease());
      break;
    }
    case kAdminChangeReplicas: {
      mutable_admin_change_replicas()->::cockroach::roachpb::AdminChangeReplicasResponse::MergeFrom(from.admin_change_replicas());
      break;
    }
    case kAdminRelocateRange: {
      mutable_admin_relocate_range()->::cockroach::roachpb::AdminRelocateRangeResponse::MergeFrom(from.admin_relocate_range());
      break;
    }
    case kHeartbeatTxn: {
      mutable_heartbeat_txn()->::cockroach::roachpb::HeartbeatTxnResponse::MergeFrom(from.heartbeat_txn());
      break;
    }
    case kGc: {
      mutable_gc()->::cockroach::roachpb::GCResponse::MergeFrom(from.gc());
      break;
    }
    case kPushTxn: {
      mutable_push_txn()->::cockroach::roachpb::PushTxnResponse::MergeFrom(from.push_txn());
      break;
    }
    case kRecoverTxn: {
      mutable_recover_txn()->::cockroach::roachpb::RecoverTxnResponse::MergeFrom(from.recover_txn());
      break;
    }
    case kResolveIntent: {
      mutable_resolve_intent()->::cockroach::roachpb::ResolveIntentResponse::MergeFrom(from.resolve_intent());
      break;
    }
    case kResolveIntentRange: {
      mutable_resolve_intent_range()->::cockroach::roachpb::ResolveIntentRangeResponse::MergeFrom(from.resolve_intent_range());
      break;
    }
    case kMerge: {
      mutable_merge()->::cockroach::roachpb::MergeResponse::MergeFrom(from.merge());
      break;
    }
    case kTruncateLog: {
      mutable_truncate_log()->::cockroach::roachpb::TruncateLogResponse::MergeFrom(from.truncate_log());
      break;
    }
    case kRequestLease: {
      mutable_request_lease()->::cockroach::roachpb::RequestLeaseResponse::MergeFrom(from.request_lease());
      break;
    }
    case kReverseScan: {
      mutable_reverse_scan()->::cockroach::roachpb::ReverseScanResponse::MergeFrom(from.reverse_scan());
      break;
    }
    case kComputeChecksum: {
      mutable_compute_checksum()->::cockroach::roachpb::ComputeChecksumResponse::MergeFrom(from.compute_checksum());
      break;
    }
    case kCheckConsistency: {
      mutable_check_consistency()->::cockroach::roachpb::CheckConsistencyResponse::MergeFrom(from.check_consistency());
      break;
    }
    case kInitPut: {
      mutable_init_put()->::cockroach::roachpb::InitPutResponse::MergeFrom(from.init_put());
      break;
    }
    case kLeaseInfo: {
      mutable_lease_info()->::cockroach::roachpb::LeaseInfoResponse::MergeFrom(from.lease_info());
      break;
    }
    case kWriteBatch: {
      mutable_write_batch()->::cockroach::roachpb::WriteBatchResponse::MergeFrom(from.write_batch());
      break;
    }
    case kExport: {
      mutable_export_()->::cockroach::roachpb::ExportResponse::MergeFrom(from.export_());
      break;
    }
    case kImport: {
      mutable_import()->::cockroach::roachpb::ImportResponse::MergeFrom(from.import());
      break;
    }
    case kQueryTxn: {
      mutable_query_txn()->::cockroach::roachpb::QueryTxnResponse::MergeFrom(from.query_txn());
      break;
    }
    case kQueryIntent: {
      mutable_query_intent()->::cockroach::roachpb::QueryIntentResponse::MergeFrom(from.query_intent());
      break;
    }
    case kAdminScatter: {
      mutable_admin_scatter()->::cockroach::roachpb::AdminScatterResponse::MergeFrom(from.admin_scatter());
      break;
    }
    case kAddSstable: {
      mutable_add_sstable()->::cockroach::roachpb::AddSSTableResponse::MergeFrom(from.add_sstable());
      break;
    }
    case kRecomputeStats: {
      mutable_recompute_stats()->::cockroach::roachpb::RecomputeStatsResponse::MergeFrom(from.recompute_stats());
      break;
    }
    case kRefresh: {
      mutable_refresh()->::cockroach::roachpb::RefreshResponse::MergeFrom(from.refresh());
      break;
    }
    case kRefreshRange: {
      mutable_refresh_range()->::cockroach::roachpb::RefreshRangeResponse::MergeFrom(from.refresh_range());
      break;
    }
    case kSubsume: {
      mutable_subsume()->::cockroach::roachpb::SubsumeResponse::MergeFrom(from.subsume());
      break;
    }
    case kRangeStats: {
      mutable_range_stats()->::cockroach::roachpb::RangeStatsResponse::MergeFrom(from.range_stats());
      break;
    }
    case kAdminVerifyProtectedTimestamp: {
      mutable_admin_verify_protected_timestamp()->::cockroach::roachpb::AdminVerifyProtectedTimestampResponse::MergeFrom(from.admin_verify_protected_timestamp());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ResponseUnion)
}

void ResponseUnion::SharedCtor() {
  clear_has_value();
}

ResponseUnion::~ResponseUnion() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ResponseUnion)
  SharedDtor();
}

void ResponseUnion::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void ResponseUnion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseUnion& ResponseUnion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_ResponseUnion.base);
  return *internal_default_instance();
}


void ResponseUnion::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cockroach.roachpb.ResponseUnion)
  switch (value_case()) {
    case kGet: {
      delete value_.get_;
      break;
    }
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kClearRange: {
      delete value_.clear_range_;
      break;
    }
    case kRevertRange: {
      delete value_.revert_range_;
      break;
    }
    case kScan: {
      delete value_.scan_;
      break;
    }
    case kEndTxn: {
      delete value_.end_txn_;
      break;
    }
    case kAdminSplit: {
      delete value_.admin_split_;
      break;
    }
    case kAdminUnsplit: {
      delete value_.admin_unsplit_;
      break;
    }
    case kAdminMerge: {
      delete value_.admin_merge_;
      break;
    }
    case kAdminTransferLease: {
      delete value_.admin_transfer_lease_;
      break;
    }
    case kAdminChangeReplicas: {
      delete value_.admin_change_replicas_;
      break;
    }
    case kAdminRelocateRange: {
      delete value_.admin_relocate_range_;
      break;
    }
    case kHeartbeatTxn: {
      delete value_.heartbeat_txn_;
      break;
    }
    case kGc: {
      delete value_.gc_;
      break;
    }
    case kPushTxn: {
      delete value_.push_txn_;
      break;
    }
    case kRecoverTxn: {
      delete value_.recover_txn_;
      break;
    }
    case kResolveIntent: {
      delete value_.resolve_intent_;
      break;
    }
    case kResolveIntentRange: {
      delete value_.resolve_intent_range_;
      break;
    }
    case kMerge: {
      delete value_.merge_;
      break;
    }
    case kTruncateLog: {
      delete value_.truncate_log_;
      break;
    }
    case kRequestLease: {
      delete value_.request_lease_;
      break;
    }
    case kReverseScan: {
      delete value_.reverse_scan_;
      break;
    }
    case kComputeChecksum: {
      delete value_.compute_checksum_;
      break;
    }
    case kCheckConsistency: {
      delete value_.check_consistency_;
      break;
    }
    case kInitPut: {
      delete value_.init_put_;
      break;
    }
    case kLeaseInfo: {
      delete value_.lease_info_;
      break;
    }
    case kWriteBatch: {
      delete value_.write_batch_;
      break;
    }
    case kExport: {
      delete value_.export__;
      break;
    }
    case kImport: {
      delete value_.import_;
      break;
    }
    case kQueryTxn: {
      delete value_.query_txn_;
      break;
    }
    case kQueryIntent: {
      delete value_.query_intent_;
      break;
    }
    case kAdminScatter: {
      delete value_.admin_scatter_;
      break;
    }
    case kAddSstable: {
      delete value_.add_sstable_;
      break;
    }
    case kRecomputeStats: {
      delete value_.recompute_stats_;
      break;
    }
    case kRefresh: {
      delete value_.refresh_;
      break;
    }
    case kRefreshRange: {
      delete value_.refresh_range_;
      break;
    }
    case kSubsume: {
      delete value_.subsume_;
      break;
    }
    case kRangeStats: {
      delete value_.range_stats_;
      break;
    }
    case kAdminVerifyProtectedTimestamp: {
      delete value_.admin_verify_protected_timestamp_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ResponseUnion::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ResponseUnion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

bool ResponseUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ResponseUnion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.GetResponse get = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.PutResponse put = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ConditionalPutResponse conditional_put = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.IncrementResponse increment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.DeleteResponse delete = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.DeleteRangeResponse delete_range = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ScanResponse scan = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.EndTxnResponse end_txn = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminSplitResponse admin_split = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminMergeResponse admin_merge = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.HeartbeatTxnResponse heartbeat_txn = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.GCResponse gc = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.PushTxnResponse push_txn = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_push_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ResolveIntentResponse resolve_intent = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ResolveIntentRangeResponse resolve_intent_range = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resolve_intent_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.MergeResponse merge = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TruncateLogResponse truncate_log = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_truncate_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RequestLeaseResponse request_lease = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ReverseScanResponse reverse_scan = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reverse_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ComputeChecksumResponse compute_checksum = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compute_checksum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.CheckConsistencyResponse check_consistency = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_consistency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.InitPutResponse init_put = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminTransferLeaseResponse admin_transfer_lease = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_transfer_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.LeaseInfoResponse lease_info = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.WriteBatchResponse write_batch = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_write_batch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ExportResponse export = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_export_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.QueryTxnResponse query_txn = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ImportResponse import = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_import()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminChangeReplicasResponse admin_change_replicas = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_change_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminScatterResponse admin_scatter = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_scatter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AddSSTableResponse add_sstable = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_sstable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ClearRangeResponse clear_range = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clear_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RecomputeStatsResponse recompute_stats = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recompute_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RefreshResponse refresh = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refresh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RefreshRangeResponse refresh_range = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refresh_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.QueryIntentResponse query_intent = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.SubsumeResponse subsume = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subsume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RangeStatsResponse range_stats = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminRelocateRangeResponse admin_relocate_range = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_relocate_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RecoverTxnResponse recover_txn = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recover_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminUnsplitResponse admin_unsplit = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_unsplit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RevertRangeResponse revert_range = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_revert_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.AdminVerifyProtectedTimestampResponse admin_verify_protected_timestamp = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_verify_protected_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ResponseUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ResponseUnion)
  return false;
#undef DO_
}

void ResponseUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ResponseUnion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.GetResponse get = 1;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_get(), output);
  }

  // .cockroach.roachpb.PutResponse put = 2;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_put(), output);
  }

  // .cockroach.roachpb.ConditionalPutResponse conditional_put = 3;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_conditional_put(), output);
  }

  // .cockroach.roachpb.IncrementResponse increment = 4;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_increment(), output);
  }

  // .cockroach.roachpb.DeleteResponse delete = 5;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_delete_(), output);
  }

  // .cockroach.roachpb.DeleteRangeResponse delete_range = 6;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_delete_range(), output);
  }

  // .cockroach.roachpb.ScanResponse scan = 7;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_scan(), output);
  }

  // .cockroach.roachpb.EndTxnResponse end_txn = 9;
  if (has_end_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_end_txn(), output);
  }

  // .cockroach.roachpb.AdminSplitResponse admin_split = 10;
  if (has_admin_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_admin_split(), output);
  }

  // .cockroach.roachpb.AdminMergeResponse admin_merge = 11;
  if (has_admin_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_admin_merge(), output);
  }

  // .cockroach.roachpb.HeartbeatTxnResponse heartbeat_txn = 12;
  if (has_heartbeat_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->_internal_heartbeat_txn(), output);
  }

  // .cockroach.roachpb.GCResponse gc = 13;
  if (has_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->_internal_gc(), output);
  }

  // .cockroach.roachpb.PushTxnResponse push_txn = 14;
  if (has_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->_internal_push_txn(), output);
  }

  // .cockroach.roachpb.ResolveIntentResponse resolve_intent = 16;
  if (has_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->_internal_resolve_intent(), output);
  }

  // .cockroach.roachpb.ResolveIntentRangeResponse resolve_intent_range = 17;
  if (has_resolve_intent_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->_internal_resolve_intent_range(), output);
  }

  // .cockroach.roachpb.MergeResponse merge = 18;
  if (has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->_internal_merge(), output);
  }

  // .cockroach.roachpb.TruncateLogResponse truncate_log = 19;
  if (has_truncate_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->_internal_truncate_log(), output);
  }

  // .cockroach.roachpb.RequestLeaseResponse request_lease = 20;
  if (has_request_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->_internal_request_lease(), output);
  }

  // .cockroach.roachpb.ReverseScanResponse reverse_scan = 21;
  if (has_reverse_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->_internal_reverse_scan(), output);
  }

  // .cockroach.roachpb.ComputeChecksumResponse compute_checksum = 22;
  if (has_compute_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->_internal_compute_checksum(), output);
  }

  // .cockroach.roachpb.CheckConsistencyResponse check_consistency = 24;
  if (has_check_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->_internal_check_consistency(), output);
  }

  // .cockroach.roachpb.InitPutResponse init_put = 26;
  if (has_init_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->_internal_init_put(), output);
  }

  // .cockroach.roachpb.AdminTransferLeaseResponse admin_transfer_lease = 29;
  if (has_admin_transfer_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->_internal_admin_transfer_lease(), output);
  }

  // .cockroach.roachpb.LeaseInfoResponse lease_info = 30;
  if (has_lease_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->_internal_lease_info(), output);
  }

  // .cockroach.roachpb.WriteBatchResponse write_batch = 31;
  if (has_write_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->_internal_write_batch(), output);
  }

  // .cockroach.roachpb.ExportResponse export = 32;
  if (has_export_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->_internal_export_(), output);
  }

  // .cockroach.roachpb.QueryTxnResponse query_txn = 33;
  if (has_query_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->_internal_query_txn(), output);
  }

  // .cockroach.roachpb.ImportResponse import = 34;
  if (has_import()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->_internal_import(), output);
  }

  // .cockroach.roachpb.AdminChangeReplicasResponse admin_change_replicas = 35;
  if (has_admin_change_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->_internal_admin_change_replicas(), output);
  }

  // .cockroach.roachpb.AdminScatterResponse admin_scatter = 36;
  if (has_admin_scatter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->_internal_admin_scatter(), output);
  }

  // .cockroach.roachpb.AddSSTableResponse add_sstable = 37;
  if (has_add_sstable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->_internal_add_sstable(), output);
  }

  // .cockroach.roachpb.ClearRangeResponse clear_range = 38;
  if (has_clear_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->_internal_clear_range(), output);
  }

  // .cockroach.roachpb.RecomputeStatsResponse recompute_stats = 39;
  if (has_recompute_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, this->_internal_recompute_stats(), output);
  }

  // .cockroach.roachpb.RefreshResponse refresh = 40;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->_internal_refresh(), output);
  }

  // .cockroach.roachpb.RefreshRangeResponse refresh_range = 41;
  if (has_refresh_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->_internal_refresh_range(), output);
  }

  // .cockroach.roachpb.QueryIntentResponse query_intent = 42;
  if (has_query_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, this->_internal_query_intent(), output);
  }

  // .cockroach.roachpb.SubsumeResponse subsume = 43;
  if (has_subsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, this->_internal_subsume(), output);
  }

  // .cockroach.roachpb.RangeStatsResponse range_stats = 44;
  if (has_range_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, this->_internal_range_stats(), output);
  }

  // .cockroach.roachpb.AdminRelocateRangeResponse admin_relocate_range = 45;
  if (has_admin_relocate_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->_internal_admin_relocate_range(), output);
  }

  // .cockroach.roachpb.RecoverTxnResponse recover_txn = 46;
  if (has_recover_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->_internal_recover_txn(), output);
  }

  // .cockroach.roachpb.AdminUnsplitResponse admin_unsplit = 47;
  if (has_admin_unsplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->_internal_admin_unsplit(), output);
  }

  // .cockroach.roachpb.RevertRangeResponse revert_range = 48;
  if (has_revert_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->_internal_revert_range(), output);
  }

  // .cockroach.roachpb.AdminVerifyProtectedTimestampResponse admin_verify_protected_timestamp = 49;
  if (has_admin_verify_protected_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->_internal_admin_verify_protected_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ResponseUnion)
}

size_t ResponseUnion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ResponseUnion)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  switch (value_case()) {
    // .cockroach.roachpb.GetResponse get = 1;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.get_);
      break;
    }
    // .cockroach.roachpb.PutResponse put = 2;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.put_);
      break;
    }
    // .cockroach.roachpb.ConditionalPutResponse conditional_put = 3;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.conditional_put_);
      break;
    }
    // .cockroach.roachpb.IncrementResponse increment = 4;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.increment_);
      break;
    }
    // .cockroach.roachpb.DeleteResponse delete = 5;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.delete__);
      break;
    }
    // .cockroach.roachpb.DeleteRangeResponse delete_range = 6;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.delete_range_);
      break;
    }
    // .cockroach.roachpb.ClearRangeResponse clear_range = 38;
    case kClearRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.clear_range_);
      break;
    }
    // .cockroach.roachpb.RevertRangeResponse revert_range = 48;
    case kRevertRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.revert_range_);
      break;
    }
    // .cockroach.roachpb.ScanResponse scan = 7;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.scan_);
      break;
    }
    // .cockroach.roachpb.EndTxnResponse end_txn = 9;
    case kEndTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.end_txn_);
      break;
    }
    // .cockroach.roachpb.AdminSplitResponse admin_split = 10;
    case kAdminSplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_split_);
      break;
    }
    // .cockroach.roachpb.AdminUnsplitResponse admin_unsplit = 47;
    case kAdminUnsplit: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_unsplit_);
      break;
    }
    // .cockroach.roachpb.AdminMergeResponse admin_merge = 11;
    case kAdminMerge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_merge_);
      break;
    }
    // .cockroach.roachpb.AdminTransferLeaseResponse admin_transfer_lease = 29;
    case kAdminTransferLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_transfer_lease_);
      break;
    }
    // .cockroach.roachpb.AdminChangeReplicasResponse admin_change_replicas = 35;
    case kAdminChangeReplicas: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_change_replicas_);
      break;
    }
    // .cockroach.roachpb.AdminRelocateRangeResponse admin_relocate_range = 45;
    case kAdminRelocateRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_relocate_range_);
      break;
    }
    // .cockroach.roachpb.HeartbeatTxnResponse heartbeat_txn = 12;
    case kHeartbeatTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.heartbeat_txn_);
      break;
    }
    // .cockroach.roachpb.GCResponse gc = 13;
    case kGc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.gc_);
      break;
    }
    // .cockroach.roachpb.PushTxnResponse push_txn = 14;
    case kPushTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.push_txn_);
      break;
    }
    // .cockroach.roachpb.RecoverTxnResponse recover_txn = 46;
    case kRecoverTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.recover_txn_);
      break;
    }
    // .cockroach.roachpb.ResolveIntentResponse resolve_intent = 16;
    case kResolveIntent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.resolve_intent_);
      break;
    }
    // .cockroach.roachpb.ResolveIntentRangeResponse resolve_intent_range = 17;
    case kResolveIntentRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.resolve_intent_range_);
      break;
    }
    // .cockroach.roachpb.MergeResponse merge = 18;
    case kMerge: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.merge_);
      break;
    }
    // .cockroach.roachpb.TruncateLogResponse truncate_log = 19;
    case kTruncateLog: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.truncate_log_);
      break;
    }
    // .cockroach.roachpb.RequestLeaseResponse request_lease = 20;
    case kRequestLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.request_lease_);
      break;
    }
    // .cockroach.roachpb.ReverseScanResponse reverse_scan = 21;
    case kReverseScan: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.reverse_scan_);
      break;
    }
    // .cockroach.roachpb.ComputeChecksumResponse compute_checksum = 22;
    case kComputeChecksum: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.compute_checksum_);
      break;
    }
    // .cockroach.roachpb.CheckConsistencyResponse check_consistency = 24;
    case kCheckConsistency: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.check_consistency_);
      break;
    }
    // .cockroach.roachpb.InitPutResponse init_put = 26;
    case kInitPut: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.init_put_);
      break;
    }
    // .cockroach.roachpb.LeaseInfoResponse lease_info = 30;
    case kLeaseInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.lease_info_);
      break;
    }
    // .cockroach.roachpb.WriteBatchResponse write_batch = 31;
    case kWriteBatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.write_batch_);
      break;
    }
    // .cockroach.roachpb.ExportResponse export = 32;
    case kExport: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.export__);
      break;
    }
    // .cockroach.roachpb.ImportResponse import = 34;
    case kImport: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.import_);
      break;
    }
    // .cockroach.roachpb.QueryTxnResponse query_txn = 33;
    case kQueryTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.query_txn_);
      break;
    }
    // .cockroach.roachpb.QueryIntentResponse query_intent = 42;
    case kQueryIntent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.query_intent_);
      break;
    }
    // .cockroach.roachpb.AdminScatterResponse admin_scatter = 36;
    case kAdminScatter: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_scatter_);
      break;
    }
    // .cockroach.roachpb.AddSSTableResponse add_sstable = 37;
    case kAddSstable: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.add_sstable_);
      break;
    }
    // .cockroach.roachpb.RecomputeStatsResponse recompute_stats = 39;
    case kRecomputeStats: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.recompute_stats_);
      break;
    }
    // .cockroach.roachpb.RefreshResponse refresh = 40;
    case kRefresh: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.refresh_);
      break;
    }
    // .cockroach.roachpb.RefreshRangeResponse refresh_range = 41;
    case kRefreshRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.refresh_range_);
      break;
    }
    // .cockroach.roachpb.SubsumeResponse subsume = 43;
    case kSubsume: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.subsume_);
      break;
    }
    // .cockroach.roachpb.RangeStatsResponse range_stats = 44;
    case kRangeStats: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.range_stats_);
      break;
    }
    // .cockroach.roachpb.AdminVerifyProtectedTimestampResponse admin_verify_protected_timestamp = 49;
    case kAdminVerifyProtectedTimestamp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.admin_verify_protected_timestamp_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseUnion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseUnion*>(&from));
}

void ResponseUnion::MergeFrom(const ResponseUnion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ResponseUnion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kGet: {
      mutable_get()->::cockroach::roachpb::GetResponse::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::roachpb::PutResponse::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::roachpb::ConditionalPutResponse::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::roachpb::IncrementResponse::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::roachpb::DeleteResponse::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::roachpb::DeleteRangeResponse::MergeFrom(from.delete_range());
      break;
    }
    case kClearRange: {
      mutable_clear_range()->::cockroach::roachpb::ClearRangeResponse::MergeFrom(from.clear_range());
      break;
    }
    case kRevertRange: {
      mutable_revert_range()->::cockroach::roachpb::RevertRangeResponse::MergeFrom(from.revert_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::roachpb::ScanResponse::MergeFrom(from.scan());
      break;
    }
    case kEndTxn: {
      mutable_end_txn()->::cockroach::roachpb::EndTxnResponse::MergeFrom(from.end_txn());
      break;
    }
    case kAdminSplit: {
      mutable_admin_split()->::cockroach::roachpb::AdminSplitResponse::MergeFrom(from.admin_split());
      break;
    }
    case kAdminUnsplit: {
      mutable_admin_unsplit()->::cockroach::roachpb::AdminUnsplitResponse::MergeFrom(from.admin_unsplit());
      break;
    }
    case kAdminMerge: {
      mutable_admin_merge()->::cockroach::roachpb::AdminMergeResponse::MergeFrom(from.admin_merge());
      break;
    }
    case kAdminTransferLease: {
      mutable_admin_transfer_lease()->::cockroach::roachpb::AdminTransferLeaseResponse::MergeFrom(from.admin_transfer_lease());
      break;
    }
    case kAdminChangeReplicas: {
      mutable_admin_change_replicas()->::cockroach::roachpb::AdminChangeReplicasResponse::MergeFrom(from.admin_change_replicas());
      break;
    }
    case kAdminRelocateRange: {
      mutable_admin_relocate_range()->::cockroach::roachpb::AdminRelocateRangeResponse::MergeFrom(from.admin_relocate_range());
      break;
    }
    case kHeartbeatTxn: {
      mutable_heartbeat_txn()->::cockroach::roachpb::HeartbeatTxnResponse::MergeFrom(from.heartbeat_txn());
      break;
    }
    case kGc: {
      mutable_gc()->::cockroach::roachpb::GCResponse::MergeFrom(from.gc());
      break;
    }
    case kPushTxn: {
      mutable_push_txn()->::cockroach::roachpb::PushTxnResponse::MergeFrom(from.push_txn());
      break;
    }
    case kRecoverTxn: {
      mutable_recover_txn()->::cockroach::roachpb::RecoverTxnResponse::MergeFrom(from.recover_txn());
      break;
    }
    case kResolveIntent: {
      mutable_resolve_intent()->::cockroach::roachpb::ResolveIntentResponse::MergeFrom(from.resolve_intent());
      break;
    }
    case kResolveIntentRange: {
      mutable_resolve_intent_range()->::cockroach::roachpb::ResolveIntentRangeResponse::MergeFrom(from.resolve_intent_range());
      break;
    }
    case kMerge: {
      mutable_merge()->::cockroach::roachpb::MergeResponse::MergeFrom(from.merge());
      break;
    }
    case kTruncateLog: {
      mutable_truncate_log()->::cockroach::roachpb::TruncateLogResponse::MergeFrom(from.truncate_log());
      break;
    }
    case kRequestLease: {
      mutable_request_lease()->::cockroach::roachpb::RequestLeaseResponse::MergeFrom(from.request_lease());
      break;
    }
    case kReverseScan: {
      mutable_reverse_scan()->::cockroach::roachpb::ReverseScanResponse::MergeFrom(from.reverse_scan());
      break;
    }
    case kComputeChecksum: {
      mutable_compute_checksum()->::cockroach::roachpb::ComputeChecksumResponse::MergeFrom(from.compute_checksum());
      break;
    }
    case kCheckConsistency: {
      mutable_check_consistency()->::cockroach::roachpb::CheckConsistencyResponse::MergeFrom(from.check_consistency());
      break;
    }
    case kInitPut: {
      mutable_init_put()->::cockroach::roachpb::InitPutResponse::MergeFrom(from.init_put());
      break;
    }
    case kLeaseInfo: {
      mutable_lease_info()->::cockroach::roachpb::LeaseInfoResponse::MergeFrom(from.lease_info());
      break;
    }
    case kWriteBatch: {
      mutable_write_batch()->::cockroach::roachpb::WriteBatchResponse::MergeFrom(from.write_batch());
      break;
    }
    case kExport: {
      mutable_export_()->::cockroach::roachpb::ExportResponse::MergeFrom(from.export_());
      break;
    }
    case kImport: {
      mutable_import()->::cockroach::roachpb::ImportResponse::MergeFrom(from.import());
      break;
    }
    case kQueryTxn: {
      mutable_query_txn()->::cockroach::roachpb::QueryTxnResponse::MergeFrom(from.query_txn());
      break;
    }
    case kQueryIntent: {
      mutable_query_intent()->::cockroach::roachpb::QueryIntentResponse::MergeFrom(from.query_intent());
      break;
    }
    case kAdminScatter: {
      mutable_admin_scatter()->::cockroach::roachpb::AdminScatterResponse::MergeFrom(from.admin_scatter());
      break;
    }
    case kAddSstable: {
      mutable_add_sstable()->::cockroach::roachpb::AddSSTableResponse::MergeFrom(from.add_sstable());
      break;
    }
    case kRecomputeStats: {
      mutable_recompute_stats()->::cockroach::roachpb::RecomputeStatsResponse::MergeFrom(from.recompute_stats());
      break;
    }
    case kRefresh: {
      mutable_refresh()->::cockroach::roachpb::RefreshResponse::MergeFrom(from.refresh());
      break;
    }
    case kRefreshRange: {
      mutable_refresh_range()->::cockroach::roachpb::RefreshRangeResponse::MergeFrom(from.refresh_range());
      break;
    }
    case kSubsume: {
      mutable_subsume()->::cockroach::roachpb::SubsumeResponse::MergeFrom(from.subsume());
      break;
    }
    case kRangeStats: {
      mutable_range_stats()->::cockroach::roachpb::RangeStatsResponse::MergeFrom(from.range_stats());
      break;
    }
    case kAdminVerifyProtectedTimestamp: {
      mutable_admin_verify_protected_timestamp()->::cockroach::roachpb::AdminVerifyProtectedTimestampResponse::MergeFrom(from.admin_verify_protected_timestamp());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ResponseUnion::CopyFrom(const ResponseUnion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ResponseUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUnion::IsInitialized() const {
  return true;
}

void ResponseUnion::Swap(ResponseUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseUnion::InternalSwap(ResponseUnion* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ResponseUnion::GetTypeName() const {
  return "cockroach.roachpb.ResponseUnion";
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::cockroach::roachpb::_Header_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_Header_default_instance_._instance.get_mutable()->replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
  ::cockroach::roachpb::_Header_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}
void Header::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void Header::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
}
void Header::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTimestampFieldNumber;
const int Header::kReplicaFieldNumber;
const int Header::kRangeIdFieldNumber;
const int Header::kUserPriorityFieldNumber;
const int Header::kTxnFieldNumber;
const int Header::kReadConsistencyFieldNumber;
const int Header::kMaxSpanRequestKeysFieldNumber;
const int Header::kTargetBytesFieldNumber;
const int Header::kDistinctSpansFieldNumber;
const int Header::kReturnRangeInfoFieldNumber;
const int Header::kGatewayNodeIdFieldNumber;
const int Header::kAsyncConsensusFieldNumber;
const int Header::kCanForwardReadTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_replica()) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::cockroach::roachpb::Transaction(*from.txn_);
  } else {
    txn_ = NULL;
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_bytes_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(target_bytes_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Header)
}

void Header::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_bytes_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(target_bytes_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete replica_;
  if (this != internal_default_instance()) delete txn_;
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_bytes_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(target_bytes_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &user_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.Transaction txn = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ReadConsistencyType read_consistency = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_read_consistency(static_cast< ::cockroach::roachpb::ReadConsistencyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_span_request_keys = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_span_request_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool distinct_spans = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distinct_spans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_range_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_range_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateway_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool async_consensus = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &async_consensus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_bytes = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_forward_read_timestamp = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_forward_read_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_timestamp(), output);
  }

  if (this->has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_replica(), output);
  }

  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->range_id(), output);
  }

  if (this->user_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->user_priority(), output);
  }

  // .cockroach.roachpb.Transaction txn = 5;
  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_txn(), output);
  }

  // .cockroach.roachpb.ReadConsistencyType read_consistency = 6;
  if (this->read_consistency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->read_consistency(), output);
  }

  // int64 max_span_request_keys = 8;
  if (this->max_span_request_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->max_span_request_keys(), output);
  }

  // bool distinct_spans = 9;
  if (this->distinct_spans() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->distinct_spans(), output);
  }

  // bool return_range_info = 10;
  if (this->return_range_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->return_range_info(), output);
  }

  if (this->gateway_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gateway_node_id(), output);
  }

  // bool async_consensus = 13;
  if (this->async_consensus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->async_consensus(), output);
  }

  // int64 target_bytes = 15;
  if (this->target_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->target_bytes(), output);
  }

  // bool can_forward_read_timestamp = 16;
  if (this->can_forward_read_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->can_forward_read_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Header)
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Header)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (this->has_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *replica_);
  }

  // .cockroach.roachpb.Transaction txn = 5;
  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->range_id());
  }

  if (this->user_priority() != 0) {
    total_size += 1 + 8;
  }

  // int64 max_span_request_keys = 8;
  if (this->max_span_request_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_span_request_keys());
  }

  // .cockroach.roachpb.ReadConsistencyType read_consistency = 6;
  if (this->read_consistency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->read_consistency());
  }

  if (this->gateway_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gateway_node_id());
  }

  // bool distinct_spans = 9;
  if (this->distinct_spans() != 0) {
    total_size += 1 + 1;
  }

  // bool return_range_info = 10;
  if (this->return_range_info() != 0) {
    total_size += 1 + 1;
  }

  // bool async_consensus = 13;
  if (this->async_consensus() != 0) {
    total_size += 1 + 1;
  }

  // bool can_forward_read_timestamp = 16;
  if (this->can_forward_read_timestamp() != 0) {
    total_size += 2 + 1;
  }

  // int64 target_bytes = 15;
  if (this->target_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Header*>(&from));
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_replica()) {
    mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
  }
  if (from.has_txn()) {
    mutable_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.txn());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.user_priority() != 0) {
    set_user_priority(from.user_priority());
  }
  if (from.max_span_request_keys() != 0) {
    set_max_span_request_keys(from.max_span_request_keys());
  }
  if (from.read_consistency() != 0) {
    set_read_consistency(from.read_consistency());
  }
  if (from.gateway_node_id() != 0) {
    set_gateway_node_id(from.gateway_node_id());
  }
  if (from.distinct_spans() != 0) {
    set_distinct_spans(from.distinct_spans());
  }
  if (from.return_range_info() != 0) {
    set_return_range_info(from.return_range_info());
  }
  if (from.async_consensus() != 0) {
    set_async_consensus(from.async_consensus());
  }
  if (from.can_forward_read_timestamp() != 0) {
    set_can_forward_read_timestamp(from.can_forward_read_timestamp());
  }
  if (from.target_bytes() != 0) {
    set_target_bytes(from.target_bytes());
  }
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(replica_, other->replica_);
  swap(txn_, other->txn_);
  swap(range_id_, other->range_id_);
  swap(user_priority_, other->user_priority_);
  swap(max_span_request_keys_, other->max_span_request_keys_);
  swap(read_consistency_, other->read_consistency_);
  swap(gateway_node_id_, other->gateway_node_id_);
  swap(distinct_spans_, other->distinct_spans_);
  swap(return_range_info_, other->return_range_info_);
  swap(async_consensus_, other->async_consensus_);
  swap(can_forward_read_timestamp_, other->can_forward_read_timestamp_);
  swap(target_bytes_, other->target_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Header::GetTypeName() const {
  return "cockroach.roachpb.Header";
}


// ===================================================================

void BatchRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_BatchRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::Header*>(
      ::cockroach::roachpb::Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRequest::kHeaderFieldNumber;
const int BatchRequest::kRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRequest::BatchRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_BatchRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.BatchRequest)
}
BatchRequest::BatchRequest(const BatchRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.BatchRequest)
}

void BatchRequest::SharedCtor() {
  header_ = NULL;
}

BatchRequest::~BatchRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.BatchRequest)
  SharedDtor();
}

void BatchRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void BatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRequest& BatchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_BatchRequest.base);
  return *internal_default_instance();
}


void BatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.BatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool BatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.BatchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.BatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.BatchRequest)
  return false;
#undef DO_
}

void BatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.BatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->requests(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.BatchRequest)
}

size_t BatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.BatchRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BatchRequest*>(&from));
}

void BatchRequest::MergeFrom(const BatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.BatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::Header::MergeFrom(from.header());
  }
}

void BatchRequest::CopyFrom(const BatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.BatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRequest::IsInitialized() const {
  return true;
}

void BatchRequest::Swap(BatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRequest::InternalSwap(BatchRequest* other) {
  using std::swap;
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BatchRequest::GetTypeName() const {
  return "cockroach.roachpb.BatchRequest";
}


// ===================================================================

void BatchResponse_Header::InitAsDefaultInstance() {
  ::cockroach::roachpb::_BatchResponse_Header_default_instance_._instance.get_mutable()->error_ = const_cast< ::cockroach::roachpb::Error*>(
      ::cockroach::roachpb::Error::internal_default_instance());
  ::cockroach::roachpb::_BatchResponse_Header_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_BatchResponse_Header_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
  ::cockroach::roachpb::_BatchResponse_Header_default_instance_._instance.get_mutable()->now_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void BatchResponse_Header::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void BatchResponse_Header::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void BatchResponse_Header::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
void BatchResponse_Header::clear_now() {
  if (GetArenaNoVirtual() == NULL && now_ != NULL) {
    delete now_;
  }
  now_ = NULL;
}
void BatchResponse_Header::clear_collected_spans() {
  collected_spans_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchResponse_Header::kErrorFieldNumber;
const int BatchResponse_Header::kTimestampFieldNumber;
const int BatchResponse_Header::kTxnFieldNumber;
const int BatchResponse_Header::kNowFieldNumber;
const int BatchResponse_Header::kCollectedSpansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchResponse_Header::BatchResponse_Header()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_BatchResponse_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.BatchResponse.Header)
}
BatchResponse_Header::BatchResponse_Header(const BatchResponse_Header& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      collected_spans_(from.collected_spans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::cockroach::roachpb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::cockroach::roachpb::Transaction(*from.txn_);
  } else {
    txn_ = NULL;
  }
  if (from.has_now()) {
    now_ = new ::cockroach::util::hlc::Timestamp(*from.now_);
  } else {
    now_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.BatchResponse.Header)
}

void BatchResponse_Header::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&now_) -
      reinterpret_cast<char*>(&error_)) + sizeof(now_));
}

BatchResponse_Header::~BatchResponse_Header() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.BatchResponse.Header)
  SharedDtor();
}

void BatchResponse_Header::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete txn_;
  if (this != internal_default_instance()) delete now_;
}

void BatchResponse_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchResponse_Header& BatchResponse_Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_BatchResponse_Header.base);
  return *internal_default_instance();
}


void BatchResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.BatchResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collected_spans_.Clear();
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  if (GetArenaNoVirtual() == NULL && now_ != NULL) {
    delete now_;
  }
  now_ = NULL;
  _internal_metadata_.Clear();
}

bool BatchResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.BatchResponse.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.Error error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.Transaction txn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_collected_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.BatchResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.BatchResponse.Header)
  return false;
#undef DO_
}

void BatchResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.BatchResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.Error error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_error(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_timestamp(), output);
  }

  // .cockroach.roachpb.Transaction txn = 3;
  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_txn(), output);
  }

  if (this->has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_now(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collected_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6,
      this->collected_spans(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.BatchResponse.Header)
}

size_t BatchResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.BatchResponse.Header)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->collected_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->collected_spans(static_cast<int>(i)));
    }
  }

  // .cockroach.roachpb.Error error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .cockroach.roachpb.Transaction txn = 3;
  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  if (this->has_now()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *now_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchResponse_Header::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BatchResponse_Header*>(&from));
}

void BatchResponse_Header::MergeFrom(const BatchResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.BatchResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collected_spans_.MergeFrom(from.collected_spans_);
  if (from.has_error()) {
    mutable_error()->::cockroach::roachpb::Error::MergeFrom(from.error());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_txn()) {
    mutable_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.txn());
  }
  if (from.has_now()) {
    mutable_now()->::cockroach::util::hlc::Timestamp::MergeFrom(from.now());
  }
}

void BatchResponse_Header::CopyFrom(const BatchResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.BatchResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchResponse_Header::IsInitialized() const {
  return true;
}

void BatchResponse_Header::Swap(BatchResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchResponse_Header::InternalSwap(BatchResponse_Header* other) {
  using std::swap;
  CastToBase(&collected_spans_)->InternalSwap(CastToBase(&other->collected_spans_));
  swap(error_, other->error_);
  swap(timestamp_, other->timestamp_);
  swap(txn_, other->txn_);
  swap(now_, other->now_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BatchResponse_Header::GetTypeName() const {
  return "cockroach.roachpb.BatchResponse.Header";
}


// ===================================================================

void BatchResponse::InitAsDefaultInstance() {
  ::cockroach::roachpb::_BatchResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::BatchResponse_Header*>(
      ::cockroach::roachpb::BatchResponse_Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchResponse::kHeaderFieldNumber;
const int BatchResponse::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchResponse::BatchResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_BatchResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.BatchResponse)
}
BatchResponse::BatchResponse(const BatchResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::BatchResponse_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.BatchResponse)
}

void BatchResponse::SharedCtor() {
  header_ = NULL;
}

BatchResponse::~BatchResponse() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.BatchResponse)
  SharedDtor();
}

void BatchResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void BatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchResponse& BatchResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_BatchResponse.base);
  return *internal_default_instance();
}


void BatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.BatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool BatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.BatchResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.BatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.BatchResponse)
  return false;
#undef DO_
}

void BatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.BatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->responses(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.BatchResponse)
}

size_t BatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.BatchResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->responses(static_cast<int>(i)));
    }
  }

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BatchResponse*>(&from));
}

void BatchResponse::MergeFrom(const BatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.BatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::BatchResponse_Header::MergeFrom(from.header());
  }
}

void BatchResponse::CopyFrom(const BatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.BatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchResponse::IsInitialized() const {
  return true;
}

void BatchResponse::Swap(BatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchResponse::InternalSwap(BatchResponse* other) {
  using std::swap;
  CastToBase(&responses_)->InternalSwap(CastToBase(&other->responses_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BatchResponse::GetTypeName() const {
  return "cockroach.roachpb.BatchResponse";
}


// ===================================================================

void RangeFeedRequest::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeFeedRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::cockroach::roachpb::Header*>(
      ::cockroach::roachpb::Header::internal_default_instance());
  ::cockroach::roachpb::_RangeFeedRequest_default_instance_._instance.get_mutable()->span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
}
void RangeFeedRequest::clear_span() {
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeFeedRequest::kHeaderFieldNumber;
const int RangeFeedRequest::kSpanFieldNumber;
const int RangeFeedRequest::kWithDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeFeedRequest::RangeFeedRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeFeedRequest)
}
RangeFeedRequest::RangeFeedRequest(const RangeFeedRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cockroach::roachpb::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_span()) {
    span_ = new ::cockroach::roachpb::Span(*from.span_);
  } else {
    span_ = NULL;
  }
  with_diff_ = from.with_diff_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeFeedRequest)
}

void RangeFeedRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_diff_) -
      reinterpret_cast<char*>(&header_)) + sizeof(with_diff_));
}

RangeFeedRequest::~RangeFeedRequest() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeFeedRequest)
  SharedDtor();
}

void RangeFeedRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete span_;
}

void RangeFeedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeFeedRequest& RangeFeedRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedRequest.base);
  return *internal_default_instance();
}


void RangeFeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeFeedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
  with_diff_ = false;
  _internal_metadata_.Clear();
}

bool RangeFeedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeFeedRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_diff = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeFeedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeFeedRequest)
  return false;
#undef DO_
}

void RangeFeedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeFeedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_span(), output);
  }

  // bool with_diff = 3;
  if (this->with_diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->with_diff(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeFeedRequest)
}

size_t RangeFeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeFeedRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // bool with_diff = 3;
  if (this->with_diff() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeFeedRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeFeedRequest*>(&from));
}

void RangeFeedRequest::MergeFrom(const RangeFeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeFeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::cockroach::roachpb::Header::MergeFrom(from.header());
  }
  if (from.has_span()) {
    mutable_span()->::cockroach::roachpb::Span::MergeFrom(from.span());
  }
  if (from.with_diff() != 0) {
    set_with_diff(from.with_diff());
  }
}

void RangeFeedRequest::CopyFrom(const RangeFeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeFeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFeedRequest::IsInitialized() const {
  return true;
}

void RangeFeedRequest::Swap(RangeFeedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeFeedRequest::InternalSwap(RangeFeedRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(span_, other->span_);
  swap(with_diff_, other->with_diff_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeFeedRequest::GetTypeName() const {
  return "cockroach.roachpb.RangeFeedRequest";
}


// ===================================================================

void RangeFeedValue::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeFeedValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
  ::cockroach::roachpb::_RangeFeedValue_default_instance_._instance.get_mutable()->prev_value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
}
void RangeFeedValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
void RangeFeedValue::clear_prev_value() {
  if (GetArenaNoVirtual() == NULL && prev_value_ != NULL) {
    delete prev_value_;
  }
  prev_value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeFeedValue::kKeyFieldNumber;
const int RangeFeedValue::kValueFieldNumber;
const int RangeFeedValue::kPrevValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeFeedValue::RangeFeedValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeFeedValue)
}
RangeFeedValue::RangeFeedValue(const RangeFeedValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::cockroach::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_prev_value()) {
    prev_value_ = new ::cockroach::roachpb::Value(*from.prev_value_);
  } else {
    prev_value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeFeedValue)
}

void RangeFeedValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_value_) -
      reinterpret_cast<char*>(&value_)) + sizeof(prev_value_));
}

RangeFeedValue::~RangeFeedValue() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeFeedValue)
  SharedDtor();
}

void RangeFeedValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete prev_value_;
}

void RangeFeedValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeFeedValue& RangeFeedValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedValue.base);
  return *internal_default_instance();
}


void RangeFeedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeFeedValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && prev_value_ != NULL) {
    delete prev_value_;
  }
  prev_value_ = NULL;
  _internal_metadata_.Clear();
}

bool RangeFeedValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeFeedValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prev_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeFeedValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeFeedValue)
  return false;
#undef DO_
}

void RangeFeedValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeFeedValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  if (this->has_prev_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_prev_value(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeFeedValue)
}

size_t RangeFeedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeFeedValue)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (this->has_prev_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prev_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeFeedValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeFeedValue*>(&from));
}

void RangeFeedValue::MergeFrom(const RangeFeedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeFeedValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
  }
  if (from.has_prev_value()) {
    mutable_prev_value()->::cockroach::roachpb::Value::MergeFrom(from.prev_value());
  }
}

void RangeFeedValue::CopyFrom(const RangeFeedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeFeedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFeedValue::IsInitialized() const {
  return true;
}

void RangeFeedValue::Swap(RangeFeedValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeFeedValue::InternalSwap(RangeFeedValue* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(prev_value_, other->prev_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeFeedValue::GetTypeName() const {
  return "cockroach.roachpb.RangeFeedValue";
}


// ===================================================================

void RangeFeedCheckpoint::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeFeedCheckpoint_default_instance_._instance.get_mutable()->span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
  ::cockroach::roachpb::_RangeFeedCheckpoint_default_instance_._instance.get_mutable()->resolved_ts_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void RangeFeedCheckpoint::clear_span() {
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
}
void RangeFeedCheckpoint::clear_resolved_ts() {
  if (GetArenaNoVirtual() == NULL && resolved_ts_ != NULL) {
    delete resolved_ts_;
  }
  resolved_ts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeFeedCheckpoint::kSpanFieldNumber;
const int RangeFeedCheckpoint::kResolvedTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeFeedCheckpoint::RangeFeedCheckpoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedCheckpoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeFeedCheckpoint)
}
RangeFeedCheckpoint::RangeFeedCheckpoint(const RangeFeedCheckpoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span()) {
    span_ = new ::cockroach::roachpb::Span(*from.span_);
  } else {
    span_ = NULL;
  }
  if (from.has_resolved_ts()) {
    resolved_ts_ = new ::cockroach::util::hlc::Timestamp(*from.resolved_ts_);
  } else {
    resolved_ts_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeFeedCheckpoint)
}

void RangeFeedCheckpoint::SharedCtor() {
  ::memset(&span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolved_ts_) -
      reinterpret_cast<char*>(&span_)) + sizeof(resolved_ts_));
}

RangeFeedCheckpoint::~RangeFeedCheckpoint() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeFeedCheckpoint)
  SharedDtor();
}

void RangeFeedCheckpoint::SharedDtor() {
  if (this != internal_default_instance()) delete span_;
  if (this != internal_default_instance()) delete resolved_ts_;
}

void RangeFeedCheckpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeFeedCheckpoint& RangeFeedCheckpoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedCheckpoint.base);
  return *internal_default_instance();
}


void RangeFeedCheckpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeFeedCheckpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
  if (GetArenaNoVirtual() == NULL && resolved_ts_ != NULL) {
    delete resolved_ts_;
  }
  resolved_ts_ = NULL;
  _internal_metadata_.Clear();
}

bool RangeFeedCheckpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeFeedCheckpoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resolved_ts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeFeedCheckpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeFeedCheckpoint)
  return false;
#undef DO_
}

void RangeFeedCheckpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeFeedCheckpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_span(), output);
  }

  if (this->has_resolved_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_resolved_ts(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeFeedCheckpoint)
}

size_t RangeFeedCheckpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeFeedCheckpoint)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *span_);
  }

  if (this->has_resolved_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resolved_ts_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeFeedCheckpoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeFeedCheckpoint*>(&from));
}

void RangeFeedCheckpoint::MergeFrom(const RangeFeedCheckpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeFeedCheckpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    mutable_span()->::cockroach::roachpb::Span::MergeFrom(from.span());
  }
  if (from.has_resolved_ts()) {
    mutable_resolved_ts()->::cockroach::util::hlc::Timestamp::MergeFrom(from.resolved_ts());
  }
}

void RangeFeedCheckpoint::CopyFrom(const RangeFeedCheckpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeFeedCheckpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFeedCheckpoint::IsInitialized() const {
  return true;
}

void RangeFeedCheckpoint::Swap(RangeFeedCheckpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeFeedCheckpoint::InternalSwap(RangeFeedCheckpoint* other) {
  using std::swap;
  swap(span_, other->span_);
  swap(resolved_ts_, other->resolved_ts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeFeedCheckpoint::GetTypeName() const {
  return "cockroach.roachpb.RangeFeedCheckpoint";
}


// ===================================================================

void RangeFeedError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeFeedError_default_instance_._instance.get_mutable()->error_ = const_cast< ::cockroach::roachpb::Error*>(
      ::cockroach::roachpb::Error::internal_default_instance());
}
void RangeFeedError::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeFeedError::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeFeedError::RangeFeedError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeFeedError)
}
RangeFeedError::RangeFeedError(const RangeFeedError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::cockroach::roachpb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeFeedError)
}

void RangeFeedError::SharedCtor() {
  error_ = NULL;
}

RangeFeedError::~RangeFeedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeFeedError)
  SharedDtor();
}

void RangeFeedError::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void RangeFeedError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeFeedError& RangeFeedError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedError.base);
  return *internal_default_instance();
}


void RangeFeedError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeFeedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool RangeFeedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeFeedError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeFeedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeFeedError)
  return false;
#undef DO_
}

void RangeFeedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeFeedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_error(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeFeedError)
}

size_t RangeFeedError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeFeedError)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeFeedError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeFeedError*>(&from));
}

void RangeFeedError::MergeFrom(const RangeFeedError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeFeedError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::cockroach::roachpb::Error::MergeFrom(from.error());
  }
}

void RangeFeedError::CopyFrom(const RangeFeedError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeFeedError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFeedError::IsInitialized() const {
  return true;
}

void RangeFeedError::Swap(RangeFeedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeFeedError::InternalSwap(RangeFeedError* other) {
  using std::swap;
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeFeedError::GetTypeName() const {
  return "cockroach.roachpb.RangeFeedError";
}


// ===================================================================

void RangeFeedEvent::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeFeedEvent_default_instance_._instance.get_mutable()->val_ = const_cast< ::cockroach::roachpb::RangeFeedValue*>(
      ::cockroach::roachpb::RangeFeedValue::internal_default_instance());
  ::cockroach::roachpb::_RangeFeedEvent_default_instance_._instance.get_mutable()->checkpoint_ = const_cast< ::cockroach::roachpb::RangeFeedCheckpoint*>(
      ::cockroach::roachpb::RangeFeedCheckpoint::internal_default_instance());
  ::cockroach::roachpb::_RangeFeedEvent_default_instance_._instance.get_mutable()->error_ = const_cast< ::cockroach::roachpb::RangeFeedError*>(
      ::cockroach::roachpb::RangeFeedError::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeFeedEvent::kValFieldNumber;
const int RangeFeedEvent::kCheckpointFieldNumber;
const int RangeFeedEvent::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeFeedEvent::RangeFeedEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeFeedEvent)
}
RangeFeedEvent::RangeFeedEvent(const RangeFeedEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_val()) {
    val_ = new ::cockroach::roachpb::RangeFeedValue(*from.val_);
  } else {
    val_ = NULL;
  }
  if (from.has_checkpoint()) {
    checkpoint_ = new ::cockroach::roachpb::RangeFeedCheckpoint(*from.checkpoint_);
  } else {
    checkpoint_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::cockroach::roachpb::RangeFeedError(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeFeedEvent)
}

void RangeFeedEvent::SharedCtor() {
  ::memset(&val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&val_)) + sizeof(error_));
}

RangeFeedEvent::~RangeFeedEvent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeFeedEvent)
  SharedDtor();
}

void RangeFeedEvent::SharedDtor() {
  if (this != internal_default_instance()) delete val_;
  if (this != internal_default_instance()) delete checkpoint_;
  if (this != internal_default_instance()) delete error_;
}

void RangeFeedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeFeedEvent& RangeFeedEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fapi_2eproto::scc_info_RangeFeedEvent.base);
  return *internal_default_instance();
}


void RangeFeedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeFeedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && val_ != NULL) {
    delete val_;
  }
  val_ = NULL;
  if (GetArenaNoVirtual() == NULL && checkpoint_ != NULL) {
    delete checkpoint_;
  }
  checkpoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool RangeFeedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeFeedEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.RangeFeedValue val = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RangeFeedCheckpoint checkpoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_checkpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RangeFeedError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeFeedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeFeedEvent)
  return false;
#undef DO_
}

void RangeFeedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeFeedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.RangeFeedValue val = 1;
  if (this->has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_val(), output);
  }

  // .cockroach.roachpb.RangeFeedCheckpoint checkpoint = 2;
  if (this->has_checkpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_checkpoint(), output);
  }

  // .cockroach.roachpb.RangeFeedError error = 3;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_error(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeFeedEvent)
}

size_t RangeFeedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeFeedEvent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .cockroach.roachpb.RangeFeedValue val = 1;
  if (this->has_val()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *val_);
  }

  // .cockroach.roachpb.RangeFeedCheckpoint checkpoint = 2;
  if (this->has_checkpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *checkpoint_);
  }

  // .cockroach.roachpb.RangeFeedError error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeFeedEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeFeedEvent*>(&from));
}

void RangeFeedEvent::MergeFrom(const RangeFeedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeFeedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_val()) {
    mutable_val()->::cockroach::roachpb::RangeFeedValue::MergeFrom(from.val());
  }
  if (from.has_checkpoint()) {
    mutable_checkpoint()->::cockroach::roachpb::RangeFeedCheckpoint::MergeFrom(from.checkpoint());
  }
  if (from.has_error()) {
    mutable_error()->::cockroach::roachpb::RangeFeedError::MergeFrom(from.error());
  }
}

void RangeFeedEvent::CopyFrom(const RangeFeedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeFeedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFeedEvent::IsInitialized() const {
  return true;
}

void RangeFeedEvent::Swap(RangeFeedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeFeedEvent::InternalSwap(RangeFeedEvent* other) {
  using std::swap;
  swap(val_, other->val_);
  swap(checkpoint_, other->checkpoint_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeFeedEvent::GetTypeName() const {
  return "cockroach.roachpb.RangeFeedEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roachpb
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeInfo* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RequestHeader* Arena::CreateMaybeMessage< ::cockroach::roachpb::RequestHeader >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RequestHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ResponseHeader* Arena::CreateMaybeMessage< ::cockroach::roachpb::ResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ResponseHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::GetRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::GetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::GetRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::GetResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::GetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::GetResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::PutRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::PutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::PutRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::PutResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::PutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::PutResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ConditionalPutRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ConditionalPutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ConditionalPutRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ConditionalPutResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ConditionalPutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ConditionalPutResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::InitPutRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::InitPutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::InitPutRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::InitPutResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::InitPutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::InitPutResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::IncrementRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::IncrementRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::IncrementRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::IncrementResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::IncrementResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::IncrementResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::DeleteRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::DeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::DeleteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::DeleteResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::DeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::DeleteResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::DeleteRangeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::DeleteRangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::DeleteRangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::DeleteRangeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::DeleteRangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::DeleteRangeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ClearRangeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ClearRangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ClearRangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ClearRangeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ClearRangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ClearRangeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RevertRangeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::RevertRangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RevertRangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RevertRangeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::RevertRangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RevertRangeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ScanRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ScanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ScanRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ScanResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ScanResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ScanResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ReverseScanRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ReverseScanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ReverseScanRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ReverseScanResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ReverseScanResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ReverseScanResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::CheckConsistencyRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::CheckConsistencyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::CheckConsistencyRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::CheckConsistencyResponse_Result* Arena::CreateMaybeMessage< ::cockroach::roachpb::CheckConsistencyResponse_Result >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::CheckConsistencyResponse_Result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::CheckConsistencyResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::CheckConsistencyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::CheckConsistencyResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RecomputeStatsRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::RecomputeStatsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RecomputeStatsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RecomputeStatsResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::RecomputeStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RecomputeStatsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::EndTxnRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::EndTxnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::EndTxnRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::EndTxnResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::EndTxnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::EndTxnResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminSplitRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminSplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminSplitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminSplitResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminSplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminSplitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminUnsplitRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminUnsplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminUnsplitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminUnsplitResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminUnsplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminUnsplitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminMergeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminMergeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminMergeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminMergeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminMergeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminMergeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminTransferLeaseRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminTransferLeaseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminTransferLeaseRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminTransferLeaseResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminTransferLeaseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminTransferLeaseResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ReplicationChange* Arena::CreateMaybeMessage< ::cockroach::roachpb::ReplicationChange >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ReplicationChange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminChangeReplicasRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminChangeReplicasRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminChangeReplicasRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminChangeReplicasResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminChangeReplicasResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminChangeReplicasResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminRelocateRangeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminRelocateRangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminRelocateRangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminRelocateRangeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminRelocateRangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminRelocateRangeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::HeartbeatTxnRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::HeartbeatTxnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::HeartbeatTxnRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::HeartbeatTxnResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::HeartbeatTxnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::HeartbeatTxnResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::GCRequest_GCKey* Arena::CreateMaybeMessage< ::cockroach::roachpb::GCRequest_GCKey >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::GCRequest_GCKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::GCRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::GCRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::GCRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::GCResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::GCResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::GCResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::PushTxnRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::PushTxnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::PushTxnRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::PushTxnResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::PushTxnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::PushTxnResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RecoverTxnRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::RecoverTxnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RecoverTxnRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RecoverTxnResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::RecoverTxnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RecoverTxnResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::QueryTxnRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::QueryTxnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::QueryTxnRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::QueryTxnResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::QueryTxnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::QueryTxnResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::QueryIntentRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::QueryIntentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::QueryIntentRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::QueryIntentResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::QueryIntentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::QueryIntentResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ResolveIntentRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ResolveIntentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ResolveIntentRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ResolveIntentResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ResolveIntentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ResolveIntentResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ResolveIntentRangeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ResolveIntentRangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ResolveIntentRangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ResolveIntentRangeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ResolveIntentRangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ResolveIntentRangeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::MergeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::MergeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::MergeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::MergeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::MergeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::MergeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TruncateLogRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::TruncateLogRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TruncateLogRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TruncateLogResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::TruncateLogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TruncateLogResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RequestLeaseRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::RequestLeaseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RequestLeaseRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TransferLeaseRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::TransferLeaseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TransferLeaseRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::LeaseInfoRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::LeaseInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::LeaseInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::LeaseInfoResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::LeaseInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::LeaseInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RequestLeaseResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::RequestLeaseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RequestLeaseResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ComputeChecksumRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ComputeChecksumRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ComputeChecksumRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ComputeChecksumResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ComputeChecksumResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ComputeChecksumResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExternalStorage_LocalFilePath* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExternalStorage_LocalFilePath >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExternalStorage_LocalFilePath >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExternalStorage_Http* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExternalStorage_Http >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExternalStorage_Http >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExternalStorage_S3* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExternalStorage_S3 >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExternalStorage_S3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExternalStorage_GCS* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExternalStorage_GCS >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExternalStorage_GCS >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExternalStorage_Azure* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExternalStorage_Azure >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExternalStorage_Azure >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExternalStorage_Workload* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExternalStorage_Workload >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExternalStorage_Workload >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExternalStorage* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExternalStorage >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExternalStorage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::WriteBatchRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::WriteBatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::WriteBatchRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::WriteBatchResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::WriteBatchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::WriteBatchResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::FileEncryptionOptions* Arena::CreateMaybeMessage< ::cockroach::roachpb::FileEncryptionOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::FileEncryptionOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExportRequest_StorageByLocalityKvEntry_DoNotUse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExportRequest_StorageByLocalityKvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExportRequest_StorageByLocalityKvEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExportRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExportRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::BulkOpSummary_EntryCountsEntry_DoNotUse* Arena::CreateMaybeMessage< ::cockroach::roachpb::BulkOpSummary_EntryCountsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::BulkOpSummary_EntryCountsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::BulkOpSummary* Arena::CreateMaybeMessage< ::cockroach::roachpb::BulkOpSummary >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::BulkOpSummary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExportResponse_File* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExportResponse_File >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExportResponse_File >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ExportResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ExportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ExportResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ImportRequest_File* Arena::CreateMaybeMessage< ::cockroach::roachpb::ImportRequest_File >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ImportRequest_File >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ImportRequest_TableRekey* Arena::CreateMaybeMessage< ::cockroach::roachpb::ImportRequest_TableRekey >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ImportRequest_TableRekey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ImportRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::ImportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ImportRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ImportResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::ImportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ImportResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminScatterRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminScatterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminScatterRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminScatterResponse_Range* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminScatterResponse_Range >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminScatterResponse_Range >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminScatterResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminScatterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminScatterResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminVerifyProtectedTimestampRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminVerifyProtectedTimestampRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminVerifyProtectedTimestampRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AdminVerifyProtectedTimestampResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AdminVerifyProtectedTimestampResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AdminVerifyProtectedTimestampResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AddSSTableRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::AddSSTableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AddSSTableRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AddSSTableResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::AddSSTableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AddSSTableResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RefreshRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::RefreshRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RefreshRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RefreshResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::RefreshResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RefreshResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RefreshRangeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::RefreshRangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RefreshRangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RefreshRangeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::RefreshRangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RefreshRangeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::SubsumeRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::SubsumeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::SubsumeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::SubsumeResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::SubsumeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::SubsumeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeStatsRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeStatsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeStatsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeStatsResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeStatsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RequestUnion* Arena::CreateMaybeMessage< ::cockroach::roachpb::RequestUnion >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RequestUnion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ResponseUnion* Arena::CreateMaybeMessage< ::cockroach::roachpb::ResponseUnion >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ResponseUnion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::Header* Arena::CreateMaybeMessage< ::cockroach::roachpb::Header >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::BatchRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::BatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::BatchRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::BatchResponse_Header* Arena::CreateMaybeMessage< ::cockroach::roachpb::BatchResponse_Header >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::BatchResponse_Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::BatchResponse* Arena::CreateMaybeMessage< ::cockroach::roachpb::BatchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::BatchResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeFeedRequest* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeFeedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeFeedRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeFeedValue* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeFeedValue >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeFeedValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeFeedCheckpoint* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeFeedCheckpoint >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeFeedCheckpoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeFeedError* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeFeedError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeFeedError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeFeedEvent* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeFeedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeFeedEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
