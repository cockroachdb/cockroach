// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/api.proto

#ifndef PROTOBUF_INCLUDED_roachpb_2fapi_2eproto
#define PROTOBUF_INCLUDED_roachpb_2fapi_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include "roachpb/data.pb.h"
#include "roachpb/errors.pb.h"
#include "roachpb/metadata.pb.h"
#include "storage/engine/enginepb/mvcc.pb.h"
#include "storage/engine/enginepb/mvcc3.pb.h"
#include "util/hlc/timestamp.pb.h"
#include "util/tracing/recorded_span.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fapi_2eproto 

namespace protobuf_roachpb_2fapi_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[118];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_roachpb_2fapi_2eproto
namespace cockroach {
namespace roachpb {
class AddSSTableRequest;
class AddSSTableRequestDefaultTypeInternal;
extern AddSSTableRequestDefaultTypeInternal _AddSSTableRequest_default_instance_;
class AddSSTableResponse;
class AddSSTableResponseDefaultTypeInternal;
extern AddSSTableResponseDefaultTypeInternal _AddSSTableResponse_default_instance_;
class AdminChangeReplicasRequest;
class AdminChangeReplicasRequestDefaultTypeInternal;
extern AdminChangeReplicasRequestDefaultTypeInternal _AdminChangeReplicasRequest_default_instance_;
class AdminChangeReplicasResponse;
class AdminChangeReplicasResponseDefaultTypeInternal;
extern AdminChangeReplicasResponseDefaultTypeInternal _AdminChangeReplicasResponse_default_instance_;
class AdminMergeRequest;
class AdminMergeRequestDefaultTypeInternal;
extern AdminMergeRequestDefaultTypeInternal _AdminMergeRequest_default_instance_;
class AdminMergeResponse;
class AdminMergeResponseDefaultTypeInternal;
extern AdminMergeResponseDefaultTypeInternal _AdminMergeResponse_default_instance_;
class AdminRelocateRangeRequest;
class AdminRelocateRangeRequestDefaultTypeInternal;
extern AdminRelocateRangeRequestDefaultTypeInternal _AdminRelocateRangeRequest_default_instance_;
class AdminRelocateRangeResponse;
class AdminRelocateRangeResponseDefaultTypeInternal;
extern AdminRelocateRangeResponseDefaultTypeInternal _AdminRelocateRangeResponse_default_instance_;
class AdminScatterRequest;
class AdminScatterRequestDefaultTypeInternal;
extern AdminScatterRequestDefaultTypeInternal _AdminScatterRequest_default_instance_;
class AdminScatterResponse;
class AdminScatterResponseDefaultTypeInternal;
extern AdminScatterResponseDefaultTypeInternal _AdminScatterResponse_default_instance_;
class AdminScatterResponse_Range;
class AdminScatterResponse_RangeDefaultTypeInternal;
extern AdminScatterResponse_RangeDefaultTypeInternal _AdminScatterResponse_Range_default_instance_;
class AdminSplitRequest;
class AdminSplitRequestDefaultTypeInternal;
extern AdminSplitRequestDefaultTypeInternal _AdminSplitRequest_default_instance_;
class AdminSplitResponse;
class AdminSplitResponseDefaultTypeInternal;
extern AdminSplitResponseDefaultTypeInternal _AdminSplitResponse_default_instance_;
class AdminTransferLeaseRequest;
class AdminTransferLeaseRequestDefaultTypeInternal;
extern AdminTransferLeaseRequestDefaultTypeInternal _AdminTransferLeaseRequest_default_instance_;
class AdminTransferLeaseResponse;
class AdminTransferLeaseResponseDefaultTypeInternal;
extern AdminTransferLeaseResponseDefaultTypeInternal _AdminTransferLeaseResponse_default_instance_;
class AdminUnsplitRequest;
class AdminUnsplitRequestDefaultTypeInternal;
extern AdminUnsplitRequestDefaultTypeInternal _AdminUnsplitRequest_default_instance_;
class AdminUnsplitResponse;
class AdminUnsplitResponseDefaultTypeInternal;
extern AdminUnsplitResponseDefaultTypeInternal _AdminUnsplitResponse_default_instance_;
class BatchRequest;
class BatchRequestDefaultTypeInternal;
extern BatchRequestDefaultTypeInternal _BatchRequest_default_instance_;
class BatchResponse;
class BatchResponseDefaultTypeInternal;
extern BatchResponseDefaultTypeInternal _BatchResponse_default_instance_;
class BatchResponse_Header;
class BatchResponse_HeaderDefaultTypeInternal;
extern BatchResponse_HeaderDefaultTypeInternal _BatchResponse_Header_default_instance_;
class BeginTransactionRequest;
class BeginTransactionRequestDefaultTypeInternal;
extern BeginTransactionRequestDefaultTypeInternal _BeginTransactionRequest_default_instance_;
class BeginTransactionResponse;
class BeginTransactionResponseDefaultTypeInternal;
extern BeginTransactionResponseDefaultTypeInternal _BeginTransactionResponse_default_instance_;
class BulkOpSummary;
class BulkOpSummaryDefaultTypeInternal;
extern BulkOpSummaryDefaultTypeInternal _BulkOpSummary_default_instance_;
class CheckConsistencyRequest;
class CheckConsistencyRequestDefaultTypeInternal;
extern CheckConsistencyRequestDefaultTypeInternal _CheckConsistencyRequest_default_instance_;
class CheckConsistencyResponse;
class CheckConsistencyResponseDefaultTypeInternal;
extern CheckConsistencyResponseDefaultTypeInternal _CheckConsistencyResponse_default_instance_;
class CheckConsistencyResponse_Result;
class CheckConsistencyResponse_ResultDefaultTypeInternal;
extern CheckConsistencyResponse_ResultDefaultTypeInternal _CheckConsistencyResponse_Result_default_instance_;
class ClearRangeRequest;
class ClearRangeRequestDefaultTypeInternal;
extern ClearRangeRequestDefaultTypeInternal _ClearRangeRequest_default_instance_;
class ClearRangeResponse;
class ClearRangeResponseDefaultTypeInternal;
extern ClearRangeResponseDefaultTypeInternal _ClearRangeResponse_default_instance_;
class ComputeChecksumRequest;
class ComputeChecksumRequestDefaultTypeInternal;
extern ComputeChecksumRequestDefaultTypeInternal _ComputeChecksumRequest_default_instance_;
class ComputeChecksumResponse;
class ComputeChecksumResponseDefaultTypeInternal;
extern ComputeChecksumResponseDefaultTypeInternal _ComputeChecksumResponse_default_instance_;
class ConditionalPutRequest;
class ConditionalPutRequestDefaultTypeInternal;
extern ConditionalPutRequestDefaultTypeInternal _ConditionalPutRequest_default_instance_;
class ConditionalPutResponse;
class ConditionalPutResponseDefaultTypeInternal;
extern ConditionalPutResponseDefaultTypeInternal _ConditionalPutResponse_default_instance_;
class DeleteRangeRequest;
class DeleteRangeRequestDefaultTypeInternal;
extern DeleteRangeRequestDefaultTypeInternal _DeleteRangeRequest_default_instance_;
class DeleteRangeResponse;
class DeleteRangeResponseDefaultTypeInternal;
extern DeleteRangeResponseDefaultTypeInternal _DeleteRangeResponse_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class EndTransactionRequest;
class EndTransactionRequestDefaultTypeInternal;
extern EndTransactionRequestDefaultTypeInternal _EndTransactionRequest_default_instance_;
class EndTransactionResponse;
class EndTransactionResponseDefaultTypeInternal;
extern EndTransactionResponseDefaultTypeInternal _EndTransactionResponse_default_instance_;
class ExportRequest;
class ExportRequestDefaultTypeInternal;
extern ExportRequestDefaultTypeInternal _ExportRequest_default_instance_;
class ExportRequest_StorageByLocalityKvEntry_DoNotUse;
class ExportRequest_StorageByLocalityKvEntry_DoNotUseDefaultTypeInternal;
extern ExportRequest_StorageByLocalityKvEntry_DoNotUseDefaultTypeInternal _ExportRequest_StorageByLocalityKvEntry_DoNotUse_default_instance_;
class ExportResponse;
class ExportResponseDefaultTypeInternal;
extern ExportResponseDefaultTypeInternal _ExportResponse_default_instance_;
class ExportResponse_File;
class ExportResponse_FileDefaultTypeInternal;
extern ExportResponse_FileDefaultTypeInternal _ExportResponse_File_default_instance_;
class ExternalStorage;
class ExternalStorageDefaultTypeInternal;
extern ExternalStorageDefaultTypeInternal _ExternalStorage_default_instance_;
class ExternalStorage_Azure;
class ExternalStorage_AzureDefaultTypeInternal;
extern ExternalStorage_AzureDefaultTypeInternal _ExternalStorage_Azure_default_instance_;
class ExternalStorage_GCS;
class ExternalStorage_GCSDefaultTypeInternal;
extern ExternalStorage_GCSDefaultTypeInternal _ExternalStorage_GCS_default_instance_;
class ExternalStorage_Http;
class ExternalStorage_HttpDefaultTypeInternal;
extern ExternalStorage_HttpDefaultTypeInternal _ExternalStorage_Http_default_instance_;
class ExternalStorage_LocalFilePath;
class ExternalStorage_LocalFilePathDefaultTypeInternal;
extern ExternalStorage_LocalFilePathDefaultTypeInternal _ExternalStorage_LocalFilePath_default_instance_;
class ExternalStorage_S3;
class ExternalStorage_S3DefaultTypeInternal;
extern ExternalStorage_S3DefaultTypeInternal _ExternalStorage_S3_default_instance_;
class ExternalStorage_Workload;
class ExternalStorage_WorkloadDefaultTypeInternal;
extern ExternalStorage_WorkloadDefaultTypeInternal _ExternalStorage_Workload_default_instance_;
class GCRequest;
class GCRequestDefaultTypeInternal;
extern GCRequestDefaultTypeInternal _GCRequest_default_instance_;
class GCRequest_GCKey;
class GCRequest_GCKeyDefaultTypeInternal;
extern GCRequest_GCKeyDefaultTypeInternal _GCRequest_GCKey_default_instance_;
class GCResponse;
class GCResponseDefaultTypeInternal;
extern GCResponseDefaultTypeInternal _GCResponse_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class HeartbeatTxnRequest;
class HeartbeatTxnRequestDefaultTypeInternal;
extern HeartbeatTxnRequestDefaultTypeInternal _HeartbeatTxnRequest_default_instance_;
class HeartbeatTxnResponse;
class HeartbeatTxnResponseDefaultTypeInternal;
extern HeartbeatTxnResponseDefaultTypeInternal _HeartbeatTxnResponse_default_instance_;
class ImportRequest;
class ImportRequestDefaultTypeInternal;
extern ImportRequestDefaultTypeInternal _ImportRequest_default_instance_;
class ImportRequest_File;
class ImportRequest_FileDefaultTypeInternal;
extern ImportRequest_FileDefaultTypeInternal _ImportRequest_File_default_instance_;
class ImportRequest_TableRekey;
class ImportRequest_TableRekeyDefaultTypeInternal;
extern ImportRequest_TableRekeyDefaultTypeInternal _ImportRequest_TableRekey_default_instance_;
class ImportResponse;
class ImportResponseDefaultTypeInternal;
extern ImportResponseDefaultTypeInternal _ImportResponse_default_instance_;
class IncrementRequest;
class IncrementRequestDefaultTypeInternal;
extern IncrementRequestDefaultTypeInternal _IncrementRequest_default_instance_;
class IncrementResponse;
class IncrementResponseDefaultTypeInternal;
extern IncrementResponseDefaultTypeInternal _IncrementResponse_default_instance_;
class InitPutRequest;
class InitPutRequestDefaultTypeInternal;
extern InitPutRequestDefaultTypeInternal _InitPutRequest_default_instance_;
class InitPutResponse;
class InitPutResponseDefaultTypeInternal;
extern InitPutResponseDefaultTypeInternal _InitPutResponse_default_instance_;
class LeaseInfoRequest;
class LeaseInfoRequestDefaultTypeInternal;
extern LeaseInfoRequestDefaultTypeInternal _LeaseInfoRequest_default_instance_;
class LeaseInfoResponse;
class LeaseInfoResponseDefaultTypeInternal;
extern LeaseInfoResponseDefaultTypeInternal _LeaseInfoResponse_default_instance_;
class MergeRequest;
class MergeRequestDefaultTypeInternal;
extern MergeRequestDefaultTypeInternal _MergeRequest_default_instance_;
class MergeResponse;
class MergeResponseDefaultTypeInternal;
extern MergeResponseDefaultTypeInternal _MergeResponse_default_instance_;
class PushTxnRequest;
class PushTxnRequestDefaultTypeInternal;
extern PushTxnRequestDefaultTypeInternal _PushTxnRequest_default_instance_;
class PushTxnResponse;
class PushTxnResponseDefaultTypeInternal;
extern PushTxnResponseDefaultTypeInternal _PushTxnResponse_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class QueryIntentRequest;
class QueryIntentRequestDefaultTypeInternal;
extern QueryIntentRequestDefaultTypeInternal _QueryIntentRequest_default_instance_;
class QueryIntentResponse;
class QueryIntentResponseDefaultTypeInternal;
extern QueryIntentResponseDefaultTypeInternal _QueryIntentResponse_default_instance_;
class QueryTxnRequest;
class QueryTxnRequestDefaultTypeInternal;
extern QueryTxnRequestDefaultTypeInternal _QueryTxnRequest_default_instance_;
class QueryTxnResponse;
class QueryTxnResponseDefaultTypeInternal;
extern QueryTxnResponseDefaultTypeInternal _QueryTxnResponse_default_instance_;
class RangeFeedCheckpoint;
class RangeFeedCheckpointDefaultTypeInternal;
extern RangeFeedCheckpointDefaultTypeInternal _RangeFeedCheckpoint_default_instance_;
class RangeFeedError;
class RangeFeedErrorDefaultTypeInternal;
extern RangeFeedErrorDefaultTypeInternal _RangeFeedError_default_instance_;
class RangeFeedEvent;
class RangeFeedEventDefaultTypeInternal;
extern RangeFeedEventDefaultTypeInternal _RangeFeedEvent_default_instance_;
class RangeFeedRequest;
class RangeFeedRequestDefaultTypeInternal;
extern RangeFeedRequestDefaultTypeInternal _RangeFeedRequest_default_instance_;
class RangeFeedValue;
class RangeFeedValueDefaultTypeInternal;
extern RangeFeedValueDefaultTypeInternal _RangeFeedValue_default_instance_;
class RangeInfo;
class RangeInfoDefaultTypeInternal;
extern RangeInfoDefaultTypeInternal _RangeInfo_default_instance_;
class RangeStatsRequest;
class RangeStatsRequestDefaultTypeInternal;
extern RangeStatsRequestDefaultTypeInternal _RangeStatsRequest_default_instance_;
class RangeStatsResponse;
class RangeStatsResponseDefaultTypeInternal;
extern RangeStatsResponseDefaultTypeInternal _RangeStatsResponse_default_instance_;
class RecomputeStatsRequest;
class RecomputeStatsRequestDefaultTypeInternal;
extern RecomputeStatsRequestDefaultTypeInternal _RecomputeStatsRequest_default_instance_;
class RecomputeStatsResponse;
class RecomputeStatsResponseDefaultTypeInternal;
extern RecomputeStatsResponseDefaultTypeInternal _RecomputeStatsResponse_default_instance_;
class RecoverTxnRequest;
class RecoverTxnRequestDefaultTypeInternal;
extern RecoverTxnRequestDefaultTypeInternal _RecoverTxnRequest_default_instance_;
class RecoverTxnResponse;
class RecoverTxnResponseDefaultTypeInternal;
extern RecoverTxnResponseDefaultTypeInternal _RecoverTxnResponse_default_instance_;
class RefreshRangeRequest;
class RefreshRangeRequestDefaultTypeInternal;
extern RefreshRangeRequestDefaultTypeInternal _RefreshRangeRequest_default_instance_;
class RefreshRangeResponse;
class RefreshRangeResponseDefaultTypeInternal;
extern RefreshRangeResponseDefaultTypeInternal _RefreshRangeResponse_default_instance_;
class RefreshRequest;
class RefreshRequestDefaultTypeInternal;
extern RefreshRequestDefaultTypeInternal _RefreshRequest_default_instance_;
class RefreshResponse;
class RefreshResponseDefaultTypeInternal;
extern RefreshResponseDefaultTypeInternal _RefreshResponse_default_instance_;
class ReplicationChange;
class ReplicationChangeDefaultTypeInternal;
extern ReplicationChangeDefaultTypeInternal _ReplicationChange_default_instance_;
class RequestHeader;
class RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
class RequestLeaseRequest;
class RequestLeaseRequestDefaultTypeInternal;
extern RequestLeaseRequestDefaultTypeInternal _RequestLeaseRequest_default_instance_;
class RequestLeaseResponse;
class RequestLeaseResponseDefaultTypeInternal;
extern RequestLeaseResponseDefaultTypeInternal _RequestLeaseResponse_default_instance_;
class RequestUnion;
class RequestUnionDefaultTypeInternal;
extern RequestUnionDefaultTypeInternal _RequestUnion_default_instance_;
class ResolveIntentRangeRequest;
class ResolveIntentRangeRequestDefaultTypeInternal;
extern ResolveIntentRangeRequestDefaultTypeInternal _ResolveIntentRangeRequest_default_instance_;
class ResolveIntentRangeResponse;
class ResolveIntentRangeResponseDefaultTypeInternal;
extern ResolveIntentRangeResponseDefaultTypeInternal _ResolveIntentRangeResponse_default_instance_;
class ResolveIntentRequest;
class ResolveIntentRequestDefaultTypeInternal;
extern ResolveIntentRequestDefaultTypeInternal _ResolveIntentRequest_default_instance_;
class ResolveIntentResponse;
class ResolveIntentResponseDefaultTypeInternal;
extern ResolveIntentResponseDefaultTypeInternal _ResolveIntentResponse_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class ResponseUnion;
class ResponseUnionDefaultTypeInternal;
extern ResponseUnionDefaultTypeInternal _ResponseUnion_default_instance_;
class ReverseScanRequest;
class ReverseScanRequestDefaultTypeInternal;
extern ReverseScanRequestDefaultTypeInternal _ReverseScanRequest_default_instance_;
class ReverseScanResponse;
class ReverseScanResponseDefaultTypeInternal;
extern ReverseScanResponseDefaultTypeInternal _ReverseScanResponse_default_instance_;
class RevertRangeRequest;
class RevertRangeRequestDefaultTypeInternal;
extern RevertRangeRequestDefaultTypeInternal _RevertRangeRequest_default_instance_;
class RevertRangeResponse;
class RevertRangeResponseDefaultTypeInternal;
extern RevertRangeResponseDefaultTypeInternal _RevertRangeResponse_default_instance_;
class ScanOptions;
class ScanOptionsDefaultTypeInternal;
extern ScanOptionsDefaultTypeInternal _ScanOptions_default_instance_;
class ScanRequest;
class ScanRequestDefaultTypeInternal;
extern ScanRequestDefaultTypeInternal _ScanRequest_default_instance_;
class ScanResponse;
class ScanResponseDefaultTypeInternal;
extern ScanResponseDefaultTypeInternal _ScanResponse_default_instance_;
class SubsumeRequest;
class SubsumeRequestDefaultTypeInternal;
extern SubsumeRequestDefaultTypeInternal _SubsumeRequest_default_instance_;
class SubsumeResponse;
class SubsumeResponseDefaultTypeInternal;
extern SubsumeResponseDefaultTypeInternal _SubsumeResponse_default_instance_;
class TransferLeaseRequest;
class TransferLeaseRequestDefaultTypeInternal;
extern TransferLeaseRequestDefaultTypeInternal _TransferLeaseRequest_default_instance_;
class TruncateLogRequest;
class TruncateLogRequestDefaultTypeInternal;
extern TruncateLogRequestDefaultTypeInternal _TruncateLogRequest_default_instance_;
class TruncateLogResponse;
class TruncateLogResponseDefaultTypeInternal;
extern TruncateLogResponseDefaultTypeInternal _TruncateLogResponse_default_instance_;
class WriteBatchRequest;
class WriteBatchRequestDefaultTypeInternal;
extern WriteBatchRequestDefaultTypeInternal _WriteBatchRequest_default_instance_;
class WriteBatchResponse;
class WriteBatchResponseDefaultTypeInternal;
extern WriteBatchResponseDefaultTypeInternal _WriteBatchResponse_default_instance_;
}  // namespace roachpb
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> ::cockroach::roachpb::AddSSTableRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::AddSSTableRequest>(Arena*);
template<> ::cockroach::roachpb::AddSSTableResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::AddSSTableResponse>(Arena*);
template<> ::cockroach::roachpb::AdminChangeReplicasRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminChangeReplicasRequest>(Arena*);
template<> ::cockroach::roachpb::AdminChangeReplicasResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminChangeReplicasResponse>(Arena*);
template<> ::cockroach::roachpb::AdminMergeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminMergeRequest>(Arena*);
template<> ::cockroach::roachpb::AdminMergeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminMergeResponse>(Arena*);
template<> ::cockroach::roachpb::AdminRelocateRangeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminRelocateRangeRequest>(Arena*);
template<> ::cockroach::roachpb::AdminRelocateRangeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminRelocateRangeResponse>(Arena*);
template<> ::cockroach::roachpb::AdminScatterRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminScatterRequest>(Arena*);
template<> ::cockroach::roachpb::AdminScatterResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminScatterResponse>(Arena*);
template<> ::cockroach::roachpb::AdminScatterResponse_Range* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminScatterResponse_Range>(Arena*);
template<> ::cockroach::roachpb::AdminSplitRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminSplitRequest>(Arena*);
template<> ::cockroach::roachpb::AdminSplitResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminSplitResponse>(Arena*);
template<> ::cockroach::roachpb::AdminTransferLeaseRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminTransferLeaseRequest>(Arena*);
template<> ::cockroach::roachpb::AdminTransferLeaseResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminTransferLeaseResponse>(Arena*);
template<> ::cockroach::roachpb::AdminUnsplitRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminUnsplitRequest>(Arena*);
template<> ::cockroach::roachpb::AdminUnsplitResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::AdminUnsplitResponse>(Arena*);
template<> ::cockroach::roachpb::BatchRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::BatchRequest>(Arena*);
template<> ::cockroach::roachpb::BatchResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::BatchResponse>(Arena*);
template<> ::cockroach::roachpb::BatchResponse_Header* Arena::CreateMaybeMessage<::cockroach::roachpb::BatchResponse_Header>(Arena*);
template<> ::cockroach::roachpb::BeginTransactionRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::BeginTransactionRequest>(Arena*);
template<> ::cockroach::roachpb::BeginTransactionResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::BeginTransactionResponse>(Arena*);
template<> ::cockroach::roachpb::BulkOpSummary* Arena::CreateMaybeMessage<::cockroach::roachpb::BulkOpSummary>(Arena*);
template<> ::cockroach::roachpb::CheckConsistencyRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::CheckConsistencyRequest>(Arena*);
template<> ::cockroach::roachpb::CheckConsistencyResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::CheckConsistencyResponse>(Arena*);
template<> ::cockroach::roachpb::CheckConsistencyResponse_Result* Arena::CreateMaybeMessage<::cockroach::roachpb::CheckConsistencyResponse_Result>(Arena*);
template<> ::cockroach::roachpb::ClearRangeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ClearRangeRequest>(Arena*);
template<> ::cockroach::roachpb::ClearRangeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ClearRangeResponse>(Arena*);
template<> ::cockroach::roachpb::ComputeChecksumRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ComputeChecksumRequest>(Arena*);
template<> ::cockroach::roachpb::ComputeChecksumResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ComputeChecksumResponse>(Arena*);
template<> ::cockroach::roachpb::ConditionalPutRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ConditionalPutRequest>(Arena*);
template<> ::cockroach::roachpb::ConditionalPutResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ConditionalPutResponse>(Arena*);
template<> ::cockroach::roachpb::DeleteRangeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::DeleteRangeRequest>(Arena*);
template<> ::cockroach::roachpb::DeleteRangeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::DeleteRangeResponse>(Arena*);
template<> ::cockroach::roachpb::DeleteRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::DeleteRequest>(Arena*);
template<> ::cockroach::roachpb::DeleteResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::DeleteResponse>(Arena*);
template<> ::cockroach::roachpb::EndTransactionRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::EndTransactionRequest>(Arena*);
template<> ::cockroach::roachpb::EndTransactionResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::EndTransactionResponse>(Arena*);
template<> ::cockroach::roachpb::ExportRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ExportRequest>(Arena*);
template<> ::cockroach::roachpb::ExportRequest_StorageByLocalityKvEntry_DoNotUse* Arena::CreateMaybeMessage<::cockroach::roachpb::ExportRequest_StorageByLocalityKvEntry_DoNotUse>(Arena*);
template<> ::cockroach::roachpb::ExportResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ExportResponse>(Arena*);
template<> ::cockroach::roachpb::ExportResponse_File* Arena::CreateMaybeMessage<::cockroach::roachpb::ExportResponse_File>(Arena*);
template<> ::cockroach::roachpb::ExternalStorage* Arena::CreateMaybeMessage<::cockroach::roachpb::ExternalStorage>(Arena*);
template<> ::cockroach::roachpb::ExternalStorage_Azure* Arena::CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_Azure>(Arena*);
template<> ::cockroach::roachpb::ExternalStorage_GCS* Arena::CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_GCS>(Arena*);
template<> ::cockroach::roachpb::ExternalStorage_Http* Arena::CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_Http>(Arena*);
template<> ::cockroach::roachpb::ExternalStorage_LocalFilePath* Arena::CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_LocalFilePath>(Arena*);
template<> ::cockroach::roachpb::ExternalStorage_S3* Arena::CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_S3>(Arena*);
template<> ::cockroach::roachpb::ExternalStorage_Workload* Arena::CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_Workload>(Arena*);
template<> ::cockroach::roachpb::GCRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::GCRequest>(Arena*);
template<> ::cockroach::roachpb::GCRequest_GCKey* Arena::CreateMaybeMessage<::cockroach::roachpb::GCRequest_GCKey>(Arena*);
template<> ::cockroach::roachpb::GCResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::GCResponse>(Arena*);
template<> ::cockroach::roachpb::GetRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::GetRequest>(Arena*);
template<> ::cockroach::roachpb::GetResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::GetResponse>(Arena*);
template<> ::cockroach::roachpb::Header* Arena::CreateMaybeMessage<::cockroach::roachpb::Header>(Arena*);
template<> ::cockroach::roachpb::HeartbeatTxnRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::HeartbeatTxnRequest>(Arena*);
template<> ::cockroach::roachpb::HeartbeatTxnResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::HeartbeatTxnResponse>(Arena*);
template<> ::cockroach::roachpb::ImportRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ImportRequest>(Arena*);
template<> ::cockroach::roachpb::ImportRequest_File* Arena::CreateMaybeMessage<::cockroach::roachpb::ImportRequest_File>(Arena*);
template<> ::cockroach::roachpb::ImportRequest_TableRekey* Arena::CreateMaybeMessage<::cockroach::roachpb::ImportRequest_TableRekey>(Arena*);
template<> ::cockroach::roachpb::ImportResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ImportResponse>(Arena*);
template<> ::cockroach::roachpb::IncrementRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::IncrementRequest>(Arena*);
template<> ::cockroach::roachpb::IncrementResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::IncrementResponse>(Arena*);
template<> ::cockroach::roachpb::InitPutRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::InitPutRequest>(Arena*);
template<> ::cockroach::roachpb::InitPutResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::InitPutResponse>(Arena*);
template<> ::cockroach::roachpb::LeaseInfoRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::LeaseInfoRequest>(Arena*);
template<> ::cockroach::roachpb::LeaseInfoResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::LeaseInfoResponse>(Arena*);
template<> ::cockroach::roachpb::MergeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::MergeRequest>(Arena*);
template<> ::cockroach::roachpb::MergeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::MergeResponse>(Arena*);
template<> ::cockroach::roachpb::PushTxnRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::PushTxnRequest>(Arena*);
template<> ::cockroach::roachpb::PushTxnResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::PushTxnResponse>(Arena*);
template<> ::cockroach::roachpb::PutRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::PutRequest>(Arena*);
template<> ::cockroach::roachpb::PutResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::PutResponse>(Arena*);
template<> ::cockroach::roachpb::QueryIntentRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::QueryIntentRequest>(Arena*);
template<> ::cockroach::roachpb::QueryIntentResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::QueryIntentResponse>(Arena*);
template<> ::cockroach::roachpb::QueryTxnRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::QueryTxnRequest>(Arena*);
template<> ::cockroach::roachpb::QueryTxnResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::QueryTxnResponse>(Arena*);
template<> ::cockroach::roachpb::RangeFeedCheckpoint* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeFeedCheckpoint>(Arena*);
template<> ::cockroach::roachpb::RangeFeedError* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeFeedError>(Arena*);
template<> ::cockroach::roachpb::RangeFeedEvent* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeFeedEvent>(Arena*);
template<> ::cockroach::roachpb::RangeFeedRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeFeedRequest>(Arena*);
template<> ::cockroach::roachpb::RangeFeedValue* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeFeedValue>(Arena*);
template<> ::cockroach::roachpb::RangeInfo* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeInfo>(Arena*);
template<> ::cockroach::roachpb::RangeStatsRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeStatsRequest>(Arena*);
template<> ::cockroach::roachpb::RangeStatsResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeStatsResponse>(Arena*);
template<> ::cockroach::roachpb::RecomputeStatsRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::RecomputeStatsRequest>(Arena*);
template<> ::cockroach::roachpb::RecomputeStatsResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::RecomputeStatsResponse>(Arena*);
template<> ::cockroach::roachpb::RecoverTxnRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::RecoverTxnRequest>(Arena*);
template<> ::cockroach::roachpb::RecoverTxnResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::RecoverTxnResponse>(Arena*);
template<> ::cockroach::roachpb::RefreshRangeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::RefreshRangeRequest>(Arena*);
template<> ::cockroach::roachpb::RefreshRangeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::RefreshRangeResponse>(Arena*);
template<> ::cockroach::roachpb::RefreshRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::RefreshRequest>(Arena*);
template<> ::cockroach::roachpb::RefreshResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::RefreshResponse>(Arena*);
template<> ::cockroach::roachpb::ReplicationChange* Arena::CreateMaybeMessage<::cockroach::roachpb::ReplicationChange>(Arena*);
template<> ::cockroach::roachpb::RequestHeader* Arena::CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(Arena*);
template<> ::cockroach::roachpb::RequestLeaseRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::RequestLeaseRequest>(Arena*);
template<> ::cockroach::roachpb::RequestLeaseResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::RequestLeaseResponse>(Arena*);
template<> ::cockroach::roachpb::RequestUnion* Arena::CreateMaybeMessage<::cockroach::roachpb::RequestUnion>(Arena*);
template<> ::cockroach::roachpb::ResolveIntentRangeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ResolveIntentRangeRequest>(Arena*);
template<> ::cockroach::roachpb::ResolveIntentRangeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ResolveIntentRangeResponse>(Arena*);
template<> ::cockroach::roachpb::ResolveIntentRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ResolveIntentRequest>(Arena*);
template<> ::cockroach::roachpb::ResolveIntentResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ResolveIntentResponse>(Arena*);
template<> ::cockroach::roachpb::ResponseHeader* Arena::CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(Arena*);
template<> ::cockroach::roachpb::ResponseUnion* Arena::CreateMaybeMessage<::cockroach::roachpb::ResponseUnion>(Arena*);
template<> ::cockroach::roachpb::ReverseScanRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ReverseScanRequest>(Arena*);
template<> ::cockroach::roachpb::ReverseScanResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ReverseScanResponse>(Arena*);
template<> ::cockroach::roachpb::RevertRangeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::RevertRangeRequest>(Arena*);
template<> ::cockroach::roachpb::RevertRangeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::RevertRangeResponse>(Arena*);
template<> ::cockroach::roachpb::ScanOptions* Arena::CreateMaybeMessage<::cockroach::roachpb::ScanOptions>(Arena*);
template<> ::cockroach::roachpb::ScanRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::ScanRequest>(Arena*);
template<> ::cockroach::roachpb::ScanResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::ScanResponse>(Arena*);
template<> ::cockroach::roachpb::SubsumeRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::SubsumeRequest>(Arena*);
template<> ::cockroach::roachpb::SubsumeResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::SubsumeResponse>(Arena*);
template<> ::cockroach::roachpb::TransferLeaseRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::TransferLeaseRequest>(Arena*);
template<> ::cockroach::roachpb::TruncateLogRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::TruncateLogRequest>(Arena*);
template<> ::cockroach::roachpb::TruncateLogResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::TruncateLogResponse>(Arena*);
template<> ::cockroach::roachpb::WriteBatchRequest* Arena::CreateMaybeMessage<::cockroach::roachpb::WriteBatchRequest>(Arena*);
template<> ::cockroach::roachpb::WriteBatchResponse* Arena::CreateMaybeMessage<::cockroach::roachpb::WriteBatchResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cockroach {
namespace roachpb {

enum ResponseHeader_ResumeReason {
  ResponseHeader_ResumeReason_RESUME_UNKNOWN = 0,
  ResponseHeader_ResumeReason_RESUME_KEY_LIMIT = 1,
  ResponseHeader_ResumeReason_RESUME_RANGE_BOUNDARY = 2,
  ResponseHeader_ResumeReason_ResponseHeader_ResumeReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseHeader_ResumeReason_ResponseHeader_ResumeReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseHeader_ResumeReason_IsValid(int value);
const ResponseHeader_ResumeReason ResponseHeader_ResumeReason_ResumeReason_MIN = ResponseHeader_ResumeReason_RESUME_UNKNOWN;
const ResponseHeader_ResumeReason ResponseHeader_ResumeReason_ResumeReason_MAX = ResponseHeader_ResumeReason_RESUME_RANGE_BOUNDARY;
const int ResponseHeader_ResumeReason_ResumeReason_ARRAYSIZE = ResponseHeader_ResumeReason_ResumeReason_MAX + 1;

enum CheckConsistencyResponse_Status {
  CheckConsistencyResponse_Status_RANGE_INDETERMINATE = 0,
  CheckConsistencyResponse_Status_RANGE_INCONSISTENT = 1,
  CheckConsistencyResponse_Status_RANGE_CONSISTENT = 2,
  CheckConsistencyResponse_Status_RANGE_CONSISTENT_STATS_ESTIMATED = 3,
  CheckConsistencyResponse_Status_RANGE_CONSISTENT_STATS_INCORRECT = 4,
  CheckConsistencyResponse_Status_CheckConsistencyResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CheckConsistencyResponse_Status_CheckConsistencyResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CheckConsistencyResponse_Status_IsValid(int value);
const CheckConsistencyResponse_Status CheckConsistencyResponse_Status_Status_MIN = CheckConsistencyResponse_Status_RANGE_INDETERMINATE;
const CheckConsistencyResponse_Status CheckConsistencyResponse_Status_Status_MAX = CheckConsistencyResponse_Status_RANGE_CONSISTENT_STATS_INCORRECT;
const int CheckConsistencyResponse_Status_Status_ARRAYSIZE = CheckConsistencyResponse_Status_Status_MAX + 1;

enum ReadConsistencyType {
  CONSISTENT = 0,
  READ_UNCOMMITTED = 1,
  INCONSISTENT = 2,
  ReadConsistencyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReadConsistencyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReadConsistencyType_IsValid(int value);
const ReadConsistencyType ReadConsistencyType_MIN = CONSISTENT;
const ReadConsistencyType ReadConsistencyType_MAX = INCONSISTENT;
const int ReadConsistencyType_ARRAYSIZE = ReadConsistencyType_MAX + 1;

enum ScanFormat {
  KEY_VALUES = 0,
  BATCH_RESPONSE = 1,
  ScanFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScanFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScanFormat_IsValid(int value);
const ScanFormat ScanFormat_MIN = KEY_VALUES;
const ScanFormat ScanFormat_MAX = BATCH_RESPONSE;
const int ScanFormat_ARRAYSIZE = ScanFormat_MAX + 1;

enum ChecksumMode {
  CHECK_VIA_QUEUE = 0,
  CHECK_FULL = 1,
  CHECK_STATS = 2,
  ChecksumMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChecksumMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChecksumMode_IsValid(int value);
const ChecksumMode ChecksumMode_MIN = CHECK_VIA_QUEUE;
const ChecksumMode ChecksumMode_MAX = CHECK_STATS;
const int ChecksumMode_ARRAYSIZE = ChecksumMode_MAX + 1;

enum PushTxnType {
  PUSH_TIMESTAMP = 0,
  PUSH_ABORT = 1,
  PUSH_TOUCH = 2,
  PushTxnType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PushTxnType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PushTxnType_IsValid(int value);
const PushTxnType PushTxnType_MIN = PUSH_TIMESTAMP;
const PushTxnType PushTxnType_MAX = PUSH_TOUCH;
const int PushTxnType_ARRAYSIZE = PushTxnType_MAX + 1;

enum ExternalStorageProvider {
  Unknown = 0,
  LocalFile = 1,
  Http = 2,
  S3 = 3,
  GoogleCloud = 4,
  Azure = 5,
  Workload = 6,
  ExternalStorageProvider_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExternalStorageProvider_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExternalStorageProvider_IsValid(int value);
const ExternalStorageProvider ExternalStorageProvider_MIN = Unknown;
const ExternalStorageProvider ExternalStorageProvider_MAX = Workload;
const int ExternalStorageProvider_ARRAYSIZE = ExternalStorageProvider_MAX + 1;

enum MVCCFilter {
  Latest = 0,
  All = 1,
  MVCCFilter_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MVCCFilter_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MVCCFilter_IsValid(int value);
const MVCCFilter MVCCFilter_MIN = Latest;
const MVCCFilter MVCCFilter_MAX = All;
const int MVCCFilter_ARRAYSIZE = MVCCFilter_MAX + 1;

// ===================================================================

class RangeInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeInfo) */ {
 public:
  RangeInfo();
  virtual ~RangeInfo();

  RangeInfo(const RangeInfo& from);

  inline RangeInfo& operator=(const RangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeInfo(RangeInfo&& from) noexcept
    : RangeInfo() {
    *this = ::std::move(from);
  }

  inline RangeInfo& operator=(RangeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeInfo* internal_default_instance() {
    return reinterpret_cast<const RangeInfo*>(
               &_RangeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RangeInfo* other);
  friend void swap(RangeInfo& a, RangeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeInfo* New() const final {
    return CreateMaybeMessage<RangeInfo>(NULL);
  }

  RangeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeInfo& from);
  void MergeFrom(const RangeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RangeDescriptor& _internal_desc() const;
  public:
  const ::cockroach::roachpb::RangeDescriptor& desc() const;
  ::cockroach::roachpb::RangeDescriptor* release_desc();
  ::cockroach::roachpb::RangeDescriptor* mutable_desc();
  void set_allocated_desc(::cockroach::roachpb::RangeDescriptor* desc);

  bool has_lease() const;
  void clear_lease();
  static const int kLeaseFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Lease& _internal_lease() const;
  public:
  const ::cockroach::roachpb::Lease& lease() const;
  ::cockroach::roachpb::Lease* release_lease();
  ::cockroach::roachpb::Lease* mutable_lease();
  void set_allocated_lease(::cockroach::roachpb::Lease* lease);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RangeDescriptor* desc_;
  ::cockroach::roachpb::Lease* lease_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestHeader : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RequestHeader) */ {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestHeader(RequestHeader&& from) noexcept
    : RequestHeader() {
    *this = ::std::move(from);
  }

  inline RequestHeader& operator=(RequestHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RequestHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHeader* internal_default_instance() {
    return reinterpret_cast<const RequestHeader*>(
               &_RequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RequestHeader* other);
  friend void swap(RequestHeader& a, RequestHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestHeader* New() const final {
    return CreateMaybeMessage<RequestHeader>(NULL);
  }

  RequestHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  void clear_end_key();
  static const int kEndKeyFieldNumber = 4;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  void clear_sequence();
  static const int kSequenceFieldNumber = 5;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RequestHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::google::protobuf::int32 sequence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseHeader : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ResponseHeader) */ {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResponseHeader* other);
  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const final {
    return CreateMaybeMessage<ResponseHeader>(NULL);
  }

  ResponseHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ResponseHeader_ResumeReason ResumeReason;
  static const ResumeReason RESUME_UNKNOWN =
    ResponseHeader_ResumeReason_RESUME_UNKNOWN;
  static const ResumeReason RESUME_KEY_LIMIT =
    ResponseHeader_ResumeReason_RESUME_KEY_LIMIT;
  static const ResumeReason RESUME_RANGE_BOUNDARY =
    ResponseHeader_ResumeReason_RESUME_RANGE_BOUNDARY;
  static inline bool ResumeReason_IsValid(int value) {
    return ResponseHeader_ResumeReason_IsValid(value);
  }
  static const ResumeReason ResumeReason_MIN =
    ResponseHeader_ResumeReason_ResumeReason_MIN;
  static const ResumeReason ResumeReason_MAX =
    ResponseHeader_ResumeReason_ResumeReason_MAX;
  static const int ResumeReason_ARRAYSIZE =
    ResponseHeader_ResumeReason_ResumeReason_ARRAYSIZE;

  // accessors -------------------------------------------------------

  int range_infos_size() const;
  void clear_range_infos();
  static const int kRangeInfosFieldNumber = 6;
  ::cockroach::roachpb::RangeInfo* mutable_range_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RangeInfo >*
      mutable_range_infos();
  const ::cockroach::roachpb::RangeInfo& range_infos(int index) const;
  ::cockroach::roachpb::RangeInfo* add_range_infos();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RangeInfo >&
      range_infos() const;

  // .cockroach.roachpb.Transaction txn = 3;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 3;
  private:
  const ::cockroach::roachpb::Transaction& _internal_txn() const;
  public:
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* release_txn();
  ::cockroach::roachpb::Transaction* mutable_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  // .cockroach.roachpb.Span resume_span = 4;
  bool has_resume_span() const;
  void clear_resume_span();
  static const int kResumeSpanFieldNumber = 4;
  private:
  const ::cockroach::roachpb::Span& _internal_resume_span() const;
  public:
  const ::cockroach::roachpb::Span& resume_span() const;
  ::cockroach::roachpb::Span* release_resume_span();
  ::cockroach::roachpb::Span* mutable_resume_span();
  void set_allocated_resume_span(::cockroach::roachpb::Span* resume_span);

  // int64 num_keys = 5;
  void clear_num_keys();
  static const int kNumKeysFieldNumber = 5;
  ::google::protobuf::int64 num_keys() const;
  void set_num_keys(::google::protobuf::int64 value);

  // .cockroach.roachpb.ResponseHeader.ResumeReason resume_reason = 7;
  void clear_resume_reason();
  static const int kResumeReasonFieldNumber = 7;
  ::cockroach::roachpb::ResponseHeader_ResumeReason resume_reason() const;
  void set_resume_reason(::cockroach::roachpb::ResponseHeader_ResumeReason value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ResponseHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RangeInfo > range_infos_;
  ::cockroach::roachpb::Transaction* txn_;
  ::cockroach::roachpb::Span* resume_span_;
  ::google::protobuf::int64 num_keys_;
  int resume_reason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(NULL);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(NULL);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // .cockroach.roachpb.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Value& _internal_value() const;
  public:
  const ::cockroach::roachpb::Value& value() const;
  ::cockroach::roachpb::Value* release_value();
  ::cockroach::roachpb::Value* mutable_value();
  void set_allocated_value(::cockroach::roachpb::Value* value);

  // .cockroach.roachpb.Value intent_value = 3;
  bool has_intent_value() const;
  void clear_intent_value();
  static const int kIntentValueFieldNumber = 3;
  private:
  const ::cockroach::roachpb::Value& _internal_intent_value() const;
  public:
  const ::cockroach::roachpb::Value& intent_value() const;
  ::cockroach::roachpb::Value* release_intent_value();
  ::cockroach::roachpb::Value* mutable_intent_value();
  void set_allocated_intent_value(::cockroach::roachpb::Value* intent_value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::roachpb::Value* value_;
  ::cockroach::roachpb::Value* intent_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(NULL);
  }

  PutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Value& _internal_value() const;
  public:
  const ::cockroach::roachpb::Value& value() const;
  ::cockroach::roachpb::Value* release_value();
  ::cockroach::roachpb::Value* mutable_value();
  void set_allocated_value(::cockroach::roachpb::Value* value);

  // bool inline = 3;
  void clear_inline_();
  static const int kInlineFieldNumber = 3;
  bool inline_() const;
  void set_inline_(bool value);

  // bool blind = 4;
  void clear_blind();
  static const int kBlindFieldNumber = 4;
  bool blind() const;
  void set_blind(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.PutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Value* value_;
  bool inline__;
  bool blind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PutResponse* other);
  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(NULL);
  }

  PutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.PutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionalPutRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ConditionalPutRequest) */ {
 public:
  ConditionalPutRequest();
  virtual ~ConditionalPutRequest();

  ConditionalPutRequest(const ConditionalPutRequest& from);

  inline ConditionalPutRequest& operator=(const ConditionalPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionalPutRequest(ConditionalPutRequest&& from) noexcept
    : ConditionalPutRequest() {
    *this = ::std::move(from);
  }

  inline ConditionalPutRequest& operator=(ConditionalPutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ConditionalPutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionalPutRequest* internal_default_instance() {
    return reinterpret_cast<const ConditionalPutRequest*>(
               &_ConditionalPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ConditionalPutRequest* other);
  friend void swap(ConditionalPutRequest& a, ConditionalPutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionalPutRequest* New() const final {
    return CreateMaybeMessage<ConditionalPutRequest>(NULL);
  }

  ConditionalPutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionalPutRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ConditionalPutRequest& from);
  void MergeFrom(const ConditionalPutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConditionalPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Value& _internal_value() const;
  public:
  const ::cockroach::roachpb::Value& value() const;
  ::cockroach::roachpb::Value* release_value();
  ::cockroach::roachpb::Value* mutable_value();
  void set_allocated_value(::cockroach::roachpb::Value* value);

  // .cockroach.roachpb.Value exp_value = 3;
  bool has_exp_value() const;
  void clear_exp_value();
  static const int kExpValueFieldNumber = 3;
  private:
  const ::cockroach::roachpb::Value& _internal_exp_value() const;
  public:
  const ::cockroach::roachpb::Value& exp_value() const;
  ::cockroach::roachpb::Value* release_exp_value();
  ::cockroach::roachpb::Value* mutable_exp_value();
  void set_allocated_exp_value(::cockroach::roachpb::Value* exp_value);

  // bool blind = 4;
  void clear_blind();
  static const int kBlindFieldNumber = 4;
  bool blind() const;
  void set_blind(bool value);

  // bool allow_if_does_not_exist = 5;
  void clear_allow_if_does_not_exist();
  static const int kAllowIfDoesNotExistFieldNumber = 5;
  bool allow_if_does_not_exist() const;
  void set_allow_if_does_not_exist(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ConditionalPutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Value* value_;
  ::cockroach::roachpb::Value* exp_value_;
  bool blind_;
  bool allow_if_does_not_exist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionalPutResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ConditionalPutResponse) */ {
 public:
  ConditionalPutResponse();
  virtual ~ConditionalPutResponse();

  ConditionalPutResponse(const ConditionalPutResponse& from);

  inline ConditionalPutResponse& operator=(const ConditionalPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionalPutResponse(ConditionalPutResponse&& from) noexcept
    : ConditionalPutResponse() {
    *this = ::std::move(from);
  }

  inline ConditionalPutResponse& operator=(ConditionalPutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ConditionalPutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionalPutResponse* internal_default_instance() {
    return reinterpret_cast<const ConditionalPutResponse*>(
               &_ConditionalPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ConditionalPutResponse* other);
  friend void swap(ConditionalPutResponse& a, ConditionalPutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionalPutResponse* New() const final {
    return CreateMaybeMessage<ConditionalPutResponse>(NULL);
  }

  ConditionalPutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionalPutResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ConditionalPutResponse& from);
  void MergeFrom(const ConditionalPutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConditionalPutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ConditionalPutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InitPutRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.InitPutRequest) */ {
 public:
  InitPutRequest();
  virtual ~InitPutRequest();

  InitPutRequest(const InitPutRequest& from);

  inline InitPutRequest& operator=(const InitPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitPutRequest(InitPutRequest&& from) noexcept
    : InitPutRequest() {
    *this = ::std::move(from);
  }

  inline InitPutRequest& operator=(InitPutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const InitPutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitPutRequest* internal_default_instance() {
    return reinterpret_cast<const InitPutRequest*>(
               &_InitPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(InitPutRequest* other);
  friend void swap(InitPutRequest& a, InitPutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitPutRequest* New() const final {
    return CreateMaybeMessage<InitPutRequest>(NULL);
  }

  InitPutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitPutRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const InitPutRequest& from);
  void MergeFrom(const InitPutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Value& _internal_value() const;
  public:
  const ::cockroach::roachpb::Value& value() const;
  ::cockroach::roachpb::Value* release_value();
  ::cockroach::roachpb::Value* mutable_value();
  void set_allocated_value(::cockroach::roachpb::Value* value);

  // bool blind = 3;
  void clear_blind();
  static const int kBlindFieldNumber = 3;
  bool blind() const;
  void set_blind(bool value);

  // bool failOnTombstones = 4;
  void clear_failontombstones();
  static const int kFailOnTombstonesFieldNumber = 4;
  bool failontombstones() const;
  void set_failontombstones(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.InitPutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Value* value_;
  bool blind_;
  bool failontombstones_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InitPutResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.InitPutResponse) */ {
 public:
  InitPutResponse();
  virtual ~InitPutResponse();

  InitPutResponse(const InitPutResponse& from);

  inline InitPutResponse& operator=(const InitPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitPutResponse(InitPutResponse&& from) noexcept
    : InitPutResponse() {
    *this = ::std::move(from);
  }

  inline InitPutResponse& operator=(InitPutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const InitPutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitPutResponse* internal_default_instance() {
    return reinterpret_cast<const InitPutResponse*>(
               &_InitPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(InitPutResponse* other);
  friend void swap(InitPutResponse& a, InitPutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitPutResponse* New() const final {
    return CreateMaybeMessage<InitPutResponse>(NULL);
  }

  InitPutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitPutResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const InitPutResponse& from);
  void MergeFrom(const InitPutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitPutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.InitPutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncrementRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.IncrementRequest) */ {
 public:
  IncrementRequest();
  virtual ~IncrementRequest();

  IncrementRequest(const IncrementRequest& from);

  inline IncrementRequest& operator=(const IncrementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementRequest(IncrementRequest&& from) noexcept
    : IncrementRequest() {
    *this = ::std::move(from);
  }

  inline IncrementRequest& operator=(IncrementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IncrementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementRequest* internal_default_instance() {
    return reinterpret_cast<const IncrementRequest*>(
               &_IncrementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(IncrementRequest* other);
  friend void swap(IncrementRequest& a, IncrementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementRequest* New() const final {
    return CreateMaybeMessage<IncrementRequest>(NULL);
  }

  IncrementRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IncrementRequest& from);
  void MergeFrom(const IncrementRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncrementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // int64 increment = 2;
  void clear_increment();
  static const int kIncrementFieldNumber = 2;
  ::google::protobuf::int64 increment() const;
  void set_increment(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.IncrementRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::google::protobuf::int64 increment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncrementResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.IncrementResponse) */ {
 public:
  IncrementResponse();
  virtual ~IncrementResponse();

  IncrementResponse(const IncrementResponse& from);

  inline IncrementResponse& operator=(const IncrementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementResponse(IncrementResponse&& from) noexcept
    : IncrementResponse() {
    *this = ::std::move(from);
  }

  inline IncrementResponse& operator=(IncrementResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IncrementResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementResponse* internal_default_instance() {
    return reinterpret_cast<const IncrementResponse*>(
               &_IncrementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(IncrementResponse* other);
  friend void swap(IncrementResponse& a, IncrementResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementResponse* New() const final {
    return CreateMaybeMessage<IncrementResponse>(NULL);
  }

  IncrementResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IncrementResponse& from);
  void MergeFrom(const IncrementResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncrementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // int64 new_value = 2;
  void clear_new_value();
  static const int kNewValueFieldNumber = 2;
  ::google::protobuf::int64 new_value() const;
  void set_new_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.IncrementResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::google::protobuf::int64 new_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DeleteRequest* other);
  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(NULL);
  }

  DeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.DeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.DeleteResponse) */ {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DeleteResponse* other);
  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(NULL);
  }

  DeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.DeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRangeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.DeleteRangeRequest) */ {
 public:
  DeleteRangeRequest();
  virtual ~DeleteRangeRequest();

  DeleteRangeRequest(const DeleteRangeRequest& from);

  inline DeleteRangeRequest& operator=(const DeleteRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRangeRequest(DeleteRangeRequest&& from) noexcept
    : DeleteRangeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRangeRequest& operator=(DeleteRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DeleteRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRangeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeRequest*>(
               &_DeleteRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DeleteRangeRequest* other);
  friend void swap(DeleteRangeRequest& a, DeleteRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeRequest* New() const final {
    return CreateMaybeMessage<DeleteRangeRequest>(NULL);
  }

  DeleteRangeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRangeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DeleteRangeRequest& from);
  void MergeFrom(const DeleteRangeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // bool return_keys = 3;
  void clear_return_keys();
  static const int kReturnKeysFieldNumber = 3;
  bool return_keys() const;
  void set_return_keys(bool value);

  // bool inline = 4;
  void clear_inline_();
  static const int kInlineFieldNumber = 4;
  bool inline_() const;
  void set_inline_(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.DeleteRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  bool return_keys_;
  bool inline__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRangeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.DeleteRangeResponse) */ {
 public:
  DeleteRangeResponse();
  virtual ~DeleteRangeResponse();

  DeleteRangeResponse(const DeleteRangeResponse& from);

  inline DeleteRangeResponse& operator=(const DeleteRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRangeResponse(DeleteRangeResponse&& from) noexcept
    : DeleteRangeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRangeResponse& operator=(DeleteRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DeleteRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRangeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeResponse*>(
               &_DeleteRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(DeleteRangeResponse* other);
  friend void swap(DeleteRangeResponse& a, DeleteRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeResponse* New() const final {
    return CreateMaybeMessage<DeleteRangeResponse>(NULL);
  }

  DeleteRangeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRangeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DeleteRangeResponse& from);
  void MergeFrom(const DeleteRangeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.DeleteRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearRangeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ClearRangeRequest) */ {
 public:
  ClearRangeRequest();
  virtual ~ClearRangeRequest();

  ClearRangeRequest(const ClearRangeRequest& from);

  inline ClearRangeRequest& operator=(const ClearRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearRangeRequest(ClearRangeRequest&& from) noexcept
    : ClearRangeRequest() {
    *this = ::std::move(from);
  }

  inline ClearRangeRequest& operator=(ClearRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ClearRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearRangeRequest* internal_default_instance() {
    return reinterpret_cast<const ClearRangeRequest*>(
               &_ClearRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ClearRangeRequest* other);
  friend void swap(ClearRangeRequest& a, ClearRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearRangeRequest* New() const final {
    return CreateMaybeMessage<ClearRangeRequest>(NULL);
  }

  ClearRangeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearRangeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ClearRangeRequest& from);
  void MergeFrom(const ClearRangeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ClearRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearRangeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ClearRangeResponse) */ {
 public:
  ClearRangeResponse();
  virtual ~ClearRangeResponse();

  ClearRangeResponse(const ClearRangeResponse& from);

  inline ClearRangeResponse& operator=(const ClearRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearRangeResponse(ClearRangeResponse&& from) noexcept
    : ClearRangeResponse() {
    *this = ::std::move(from);
  }

  inline ClearRangeResponse& operator=(ClearRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ClearRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearRangeResponse* internal_default_instance() {
    return reinterpret_cast<const ClearRangeResponse*>(
               &_ClearRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ClearRangeResponse* other);
  friend void swap(ClearRangeResponse& a, ClearRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearRangeResponse* New() const final {
    return CreateMaybeMessage<ClearRangeResponse>(NULL);
  }

  ClearRangeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearRangeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ClearRangeResponse& from);
  void MergeFrom(const ClearRangeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ClearRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RevertRangeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RevertRangeRequest) */ {
 public:
  RevertRangeRequest();
  virtual ~RevertRangeRequest();

  RevertRangeRequest(const RevertRangeRequest& from);

  inline RevertRangeRequest& operator=(const RevertRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RevertRangeRequest(RevertRangeRequest&& from) noexcept
    : RevertRangeRequest() {
    *this = ::std::move(from);
  }

  inline RevertRangeRequest& operator=(RevertRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RevertRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevertRangeRequest* internal_default_instance() {
    return reinterpret_cast<const RevertRangeRequest*>(
               &_RevertRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(RevertRangeRequest* other);
  friend void swap(RevertRangeRequest& a, RevertRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RevertRangeRequest* New() const final {
    return CreateMaybeMessage<RevertRangeRequest>(NULL);
  }

  RevertRangeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RevertRangeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RevertRangeRequest& from);
  void MergeFrom(const RevertRangeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RevertRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_target_time() const;
  void clear_target_time();
  static const int kTargetTimeFieldNumber = 2;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_target_time() const;
  public:
  const ::cockroach::util::hlc::Timestamp& target_time() const;
  ::cockroach::util::hlc::Timestamp* release_target_time();
  ::cockroach::util::hlc::Timestamp* mutable_target_time();
  void set_allocated_target_time(::cockroach::util::hlc::Timestamp* target_time);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RevertRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::util::hlc::Timestamp* target_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RevertRangeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RevertRangeResponse) */ {
 public:
  RevertRangeResponse();
  virtual ~RevertRangeResponse();

  RevertRangeResponse(const RevertRangeResponse& from);

  inline RevertRangeResponse& operator=(const RevertRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RevertRangeResponse(RevertRangeResponse&& from) noexcept
    : RevertRangeResponse() {
    *this = ::std::move(from);
  }

  inline RevertRangeResponse& operator=(RevertRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RevertRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevertRangeResponse* internal_default_instance() {
    return reinterpret_cast<const RevertRangeResponse*>(
               &_RevertRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(RevertRangeResponse* other);
  friend void swap(RevertRangeResponse& a, RevertRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RevertRangeResponse* New() const final {
    return CreateMaybeMessage<RevertRangeResponse>(NULL);
  }

  RevertRangeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RevertRangeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RevertRangeResponse& from);
  void MergeFrom(const RevertRangeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RevertRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RevertRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanOptions : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ScanOptions) */ {
 public:
  ScanOptions();
  virtual ~ScanOptions();

  ScanOptions(const ScanOptions& from);

  inline ScanOptions& operator=(const ScanOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanOptions(ScanOptions&& from) noexcept
    : ScanOptions() {
    *this = ::std::move(from);
  }

  inline ScanOptions& operator=(ScanOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ScanOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanOptions* internal_default_instance() {
    return reinterpret_cast<const ScanOptions*>(
               &_ScanOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ScanOptions* other);
  friend void swap(ScanOptions& a, ScanOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanOptions* New() const final {
    return CreateMaybeMessage<ScanOptions>(NULL);
  }

  ScanOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ScanOptions& from);
  void MergeFrom(const ScanOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 min_results = 2;
  void clear_min_results();
  static const int kMinResultsFieldNumber = 2;
  ::google::protobuf::int64 min_results() const;
  void set_min_results(::google::protobuf::int64 value);

  // bool stop_at_range_boundary = 1;
  void clear_stop_at_range_boundary();
  static const int kStopAtRangeBoundaryFieldNumber = 1;
  bool stop_at_range_boundary() const;
  void set_stop_at_range_boundary(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ScanOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 min_results_;
  bool stop_at_range_boundary_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ScanRequest) */ {
 public:
  ScanRequest();
  virtual ~ScanRequest();

  ScanRequest(const ScanRequest& from);

  inline ScanRequest& operator=(const ScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanRequest(ScanRequest&& from) noexcept
    : ScanRequest() {
    *this = ::std::move(from);
  }

  inline ScanRequest& operator=(ScanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ScanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanRequest* internal_default_instance() {
    return reinterpret_cast<const ScanRequest*>(
               &_ScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ScanRequest* other);
  friend void swap(ScanRequest& a, ScanRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanRequest* New() const final {
    return CreateMaybeMessage<ScanRequest>(NULL);
  }

  ScanRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ScanRequest& from);
  void MergeFrom(const ScanRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // .cockroach.roachpb.ScanFormat scan_format = 4;
  void clear_scan_format();
  static const int kScanFormatFieldNumber = 4;
  ::cockroach::roachpb::ScanFormat scan_format() const;
  void set_scan_format(::cockroach::roachpb::ScanFormat value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ScanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  int scan_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ScanResponse) */ {
 public:
  ScanResponse();
  virtual ~ScanResponse();

  ScanResponse(const ScanResponse& from);

  inline ScanResponse& operator=(const ScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanResponse(ScanResponse&& from) noexcept
    : ScanResponse() {
    *this = ::std::move(from);
  }

  inline ScanResponse& operator=(ScanResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ScanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanResponse* internal_default_instance() {
    return reinterpret_cast<const ScanResponse*>(
               &_ScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ScanResponse* other);
  friend void swap(ScanResponse& a, ScanResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanResponse* New() const final {
    return CreateMaybeMessage<ScanResponse>(NULL);
  }

  ScanResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ScanResponse& from);
  void MergeFrom(const ScanResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::cockroach::roachpb::KeyValue* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >*
      mutable_rows();
  const ::cockroach::roachpb::KeyValue& rows(int index) const;
  ::cockroach::roachpb::KeyValue* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >&
      rows() const;

  int intent_rows_size() const;
  void clear_intent_rows();
  static const int kIntentRowsFieldNumber = 3;
  ::cockroach::roachpb::KeyValue* mutable_intent_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >*
      mutable_intent_rows();
  const ::cockroach::roachpb::KeyValue& intent_rows(int index) const;
  ::cockroach::roachpb::KeyValue* add_intent_rows();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >&
      intent_rows() const;

  // repeated bytes batch_responses = 4;
  int batch_responses_size() const;
  void clear_batch_responses();
  static const int kBatchResponsesFieldNumber = 4;
  const ::std::string& batch_responses(int index) const;
  ::std::string* mutable_batch_responses(int index);
  void set_batch_responses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_batch_responses(int index, ::std::string&& value);
  #endif
  void set_batch_responses(int index, const char* value);
  void set_batch_responses(int index, const void* value, size_t size);
  ::std::string* add_batch_responses();
  void add_batch_responses(const ::std::string& value);
  #if LANG_CXX11
  void add_batch_responses(::std::string&& value);
  #endif
  void add_batch_responses(const char* value);
  void add_batch_responses(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_responses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_responses();

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ScanResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue > rows_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue > intent_rows_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_responses_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReverseScanRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ReverseScanRequest) */ {
 public:
  ReverseScanRequest();
  virtual ~ReverseScanRequest();

  ReverseScanRequest(const ReverseScanRequest& from);

  inline ReverseScanRequest& operator=(const ReverseScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReverseScanRequest(ReverseScanRequest&& from) noexcept
    : ReverseScanRequest() {
    *this = ::std::move(from);
  }

  inline ReverseScanRequest& operator=(ReverseScanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ReverseScanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReverseScanRequest* internal_default_instance() {
    return reinterpret_cast<const ReverseScanRequest*>(
               &_ReverseScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ReverseScanRequest* other);
  friend void swap(ReverseScanRequest& a, ReverseScanRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReverseScanRequest* New() const final {
    return CreateMaybeMessage<ReverseScanRequest>(NULL);
  }

  ReverseScanRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReverseScanRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ReverseScanRequest& from);
  void MergeFrom(const ReverseScanRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReverseScanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // .cockroach.roachpb.ScanFormat scan_format = 4;
  void clear_scan_format();
  static const int kScanFormatFieldNumber = 4;
  ::cockroach::roachpb::ScanFormat scan_format() const;
  void set_scan_format(::cockroach::roachpb::ScanFormat value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReverseScanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  int scan_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReverseScanResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ReverseScanResponse) */ {
 public:
  ReverseScanResponse();
  virtual ~ReverseScanResponse();

  ReverseScanResponse(const ReverseScanResponse& from);

  inline ReverseScanResponse& operator=(const ReverseScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReverseScanResponse(ReverseScanResponse&& from) noexcept
    : ReverseScanResponse() {
    *this = ::std::move(from);
  }

  inline ReverseScanResponse& operator=(ReverseScanResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ReverseScanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReverseScanResponse* internal_default_instance() {
    return reinterpret_cast<const ReverseScanResponse*>(
               &_ReverseScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ReverseScanResponse* other);
  friend void swap(ReverseScanResponse& a, ReverseScanResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReverseScanResponse* New() const final {
    return CreateMaybeMessage<ReverseScanResponse>(NULL);
  }

  ReverseScanResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReverseScanResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ReverseScanResponse& from);
  void MergeFrom(const ReverseScanResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReverseScanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::cockroach::roachpb::KeyValue* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >*
      mutable_rows();
  const ::cockroach::roachpb::KeyValue& rows(int index) const;
  ::cockroach::roachpb::KeyValue* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >&
      rows() const;

  int intent_rows_size() const;
  void clear_intent_rows();
  static const int kIntentRowsFieldNumber = 3;
  ::cockroach::roachpb::KeyValue* mutable_intent_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >*
      mutable_intent_rows();
  const ::cockroach::roachpb::KeyValue& intent_rows(int index) const;
  ::cockroach::roachpb::KeyValue* add_intent_rows();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >&
      intent_rows() const;

  // repeated bytes batch_responses = 4;
  int batch_responses_size() const;
  void clear_batch_responses();
  static const int kBatchResponsesFieldNumber = 4;
  const ::std::string& batch_responses(int index) const;
  ::std::string* mutable_batch_responses(int index);
  void set_batch_responses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_batch_responses(int index, ::std::string&& value);
  #endif
  void set_batch_responses(int index, const char* value);
  void set_batch_responses(int index, const void* value, size_t size);
  ::std::string* add_batch_responses();
  void add_batch_responses(const ::std::string& value);
  #if LANG_CXX11
  void add_batch_responses(::std::string&& value);
  #endif
  void add_batch_responses(const char* value);
  void add_batch_responses(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_responses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_responses();

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReverseScanResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue > rows_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue > intent_rows_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_responses_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckConsistencyRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.CheckConsistencyRequest) */ {
 public:
  CheckConsistencyRequest();
  virtual ~CheckConsistencyRequest();

  CheckConsistencyRequest(const CheckConsistencyRequest& from);

  inline CheckConsistencyRequest& operator=(const CheckConsistencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckConsistencyRequest(CheckConsistencyRequest&& from) noexcept
    : CheckConsistencyRequest() {
    *this = ::std::move(from);
  }

  inline CheckConsistencyRequest& operator=(CheckConsistencyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CheckConsistencyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckConsistencyRequest* internal_default_instance() {
    return reinterpret_cast<const CheckConsistencyRequest*>(
               &_CheckConsistencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CheckConsistencyRequest* other);
  friend void swap(CheckConsistencyRequest& a, CheckConsistencyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckConsistencyRequest* New() const final {
    return CreateMaybeMessage<CheckConsistencyRequest>(NULL);
  }

  CheckConsistencyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckConsistencyRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CheckConsistencyRequest& from);
  void MergeFrom(const CheckConsistencyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckConsistencyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // .cockroach.roachpb.ChecksumMode mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::cockroach::roachpb::ChecksumMode mode() const;
  void set_mode(::cockroach::roachpb::ChecksumMode value);

  // bool with_diff = 2;
  void clear_with_diff();
  static const int kWithDiffFieldNumber = 2;
  bool with_diff() const;
  void set_with_diff(bool value);

  // bool checkpoint = 4;
  void clear_checkpoint();
  static const int kCheckpointFieldNumber = 4;
  bool checkpoint() const;
  void set_checkpoint(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.CheckConsistencyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  int mode_;
  bool with_diff_;
  bool checkpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckConsistencyResponse_Result : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.CheckConsistencyResponse.Result) */ {
 public:
  CheckConsistencyResponse_Result();
  virtual ~CheckConsistencyResponse_Result();

  CheckConsistencyResponse_Result(const CheckConsistencyResponse_Result& from);

  inline CheckConsistencyResponse_Result& operator=(const CheckConsistencyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckConsistencyResponse_Result(CheckConsistencyResponse_Result&& from) noexcept
    : CheckConsistencyResponse_Result() {
    *this = ::std::move(from);
  }

  inline CheckConsistencyResponse_Result& operator=(CheckConsistencyResponse_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CheckConsistencyResponse_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckConsistencyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CheckConsistencyResponse_Result*>(
               &_CheckConsistencyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CheckConsistencyResponse_Result* other);
  friend void swap(CheckConsistencyResponse_Result& a, CheckConsistencyResponse_Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckConsistencyResponse_Result* New() const final {
    return CreateMaybeMessage<CheckConsistencyResponse_Result>(NULL);
  }

  CheckConsistencyResponse_Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckConsistencyResponse_Result>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CheckConsistencyResponse_Result& from);
  void MergeFrom(const CheckConsistencyResponse_Result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckConsistencyResponse_Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes start_key = 2;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // string detail = 4;
  void clear_detail();
  static const int kDetailFieldNumber = 4;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // .cockroach.roachpb.CheckConsistencyResponse.Status status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::cockroach::roachpb::CheckConsistencyResponse_Status status() const;
  void set_status(::cockroach::roachpb::CheckConsistencyResponse_Status value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.CheckConsistencyResponse.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::int64 range_id_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckConsistencyResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.CheckConsistencyResponse) */ {
 public:
  CheckConsistencyResponse();
  virtual ~CheckConsistencyResponse();

  CheckConsistencyResponse(const CheckConsistencyResponse& from);

  inline CheckConsistencyResponse& operator=(const CheckConsistencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckConsistencyResponse(CheckConsistencyResponse&& from) noexcept
    : CheckConsistencyResponse() {
    *this = ::std::move(from);
  }

  inline CheckConsistencyResponse& operator=(CheckConsistencyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CheckConsistencyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckConsistencyResponse* internal_default_instance() {
    return reinterpret_cast<const CheckConsistencyResponse*>(
               &_CheckConsistencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CheckConsistencyResponse* other);
  friend void swap(CheckConsistencyResponse& a, CheckConsistencyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckConsistencyResponse* New() const final {
    return CreateMaybeMessage<CheckConsistencyResponse>(NULL);
  }

  CheckConsistencyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckConsistencyResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CheckConsistencyResponse& from);
  void MergeFrom(const CheckConsistencyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckConsistencyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CheckConsistencyResponse_Result Result;

  typedef CheckConsistencyResponse_Status Status;
  static const Status RANGE_INDETERMINATE =
    CheckConsistencyResponse_Status_RANGE_INDETERMINATE;
  static const Status RANGE_INCONSISTENT =
    CheckConsistencyResponse_Status_RANGE_INCONSISTENT;
  static const Status RANGE_CONSISTENT =
    CheckConsistencyResponse_Status_RANGE_CONSISTENT;
  static const Status RANGE_CONSISTENT_STATS_ESTIMATED =
    CheckConsistencyResponse_Status_RANGE_CONSISTENT_STATS_ESTIMATED;
  static const Status RANGE_CONSISTENT_STATS_INCORRECT =
    CheckConsistencyResponse_Status_RANGE_CONSISTENT_STATS_INCORRECT;
  static inline bool Status_IsValid(int value) {
    return CheckConsistencyResponse_Status_IsValid(value);
  }
  static const Status Status_MIN =
    CheckConsistencyResponse_Status_Status_MIN;
  static const Status Status_MAX =
    CheckConsistencyResponse_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    CheckConsistencyResponse_Status_Status_ARRAYSIZE;

  // accessors -------------------------------------------------------

  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::cockroach::roachpb::CheckConsistencyResponse_Result* mutable_result(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::CheckConsistencyResponse_Result >*
      mutable_result();
  const ::cockroach::roachpb::CheckConsistencyResponse_Result& result(int index) const;
  ::cockroach::roachpb::CheckConsistencyResponse_Result* add_result();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::CheckConsistencyResponse_Result >&
      result() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.CheckConsistencyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::CheckConsistencyResponse_Result > result_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecomputeStatsRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RecomputeStatsRequest) */ {
 public:
  RecomputeStatsRequest();
  virtual ~RecomputeStatsRequest();

  RecomputeStatsRequest(const RecomputeStatsRequest& from);

  inline RecomputeStatsRequest& operator=(const RecomputeStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecomputeStatsRequest(RecomputeStatsRequest&& from) noexcept
    : RecomputeStatsRequest() {
    *this = ::std::move(from);
  }

  inline RecomputeStatsRequest& operator=(RecomputeStatsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RecomputeStatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecomputeStatsRequest* internal_default_instance() {
    return reinterpret_cast<const RecomputeStatsRequest*>(
               &_RecomputeStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(RecomputeStatsRequest* other);
  friend void swap(RecomputeStatsRequest& a, RecomputeStatsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecomputeStatsRequest* New() const final {
    return CreateMaybeMessage<RecomputeStatsRequest>(NULL);
  }

  RecomputeStatsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecomputeStatsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RecomputeStatsRequest& from);
  void MergeFrom(const RecomputeStatsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecomputeStatsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // bool dry_run = 2;
  void clear_dry_run();
  static const int kDryRunFieldNumber = 2;
  bool dry_run() const;
  void set_dry_run(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RecomputeStatsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  bool dry_run_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecomputeStatsResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RecomputeStatsResponse) */ {
 public:
  RecomputeStatsResponse();
  virtual ~RecomputeStatsResponse();

  RecomputeStatsResponse(const RecomputeStatsResponse& from);

  inline RecomputeStatsResponse& operator=(const RecomputeStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecomputeStatsResponse(RecomputeStatsResponse&& from) noexcept
    : RecomputeStatsResponse() {
    *this = ::std::move(from);
  }

  inline RecomputeStatsResponse& operator=(RecomputeStatsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RecomputeStatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecomputeStatsResponse* internal_default_instance() {
    return reinterpret_cast<const RecomputeStatsResponse*>(
               &_RecomputeStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(RecomputeStatsResponse* other);
  friend void swap(RecomputeStatsResponse& a, RecomputeStatsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecomputeStatsResponse* New() const final {
    return CreateMaybeMessage<RecomputeStatsResponse>(NULL);
  }

  RecomputeStatsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecomputeStatsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RecomputeStatsResponse& from);
  void MergeFrom(const RecomputeStatsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecomputeStatsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_added_delta() const;
  void clear_added_delta();
  static const int kAddedDeltaFieldNumber = 2;
  private:
  const ::cockroach::storage::engine::enginepb::MVCCStatsDelta& _internal_added_delta() const;
  public:
  const ::cockroach::storage::engine::enginepb::MVCCStatsDelta& added_delta() const;
  ::cockroach::storage::engine::enginepb::MVCCStatsDelta* release_added_delta();
  ::cockroach::storage::engine::enginepb::MVCCStatsDelta* mutable_added_delta();
  void set_allocated_added_delta(::cockroach::storage::engine::enginepb::MVCCStatsDelta* added_delta);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RecomputeStatsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::storage::engine::enginepb::MVCCStatsDelta* added_delta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BeginTransactionRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.BeginTransactionRequest) */ {
 public:
  BeginTransactionRequest();
  virtual ~BeginTransactionRequest();

  BeginTransactionRequest(const BeginTransactionRequest& from);

  inline BeginTransactionRequest& operator=(const BeginTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeginTransactionRequest(BeginTransactionRequest&& from) noexcept
    : BeginTransactionRequest() {
    *this = ::std::move(from);
  }

  inline BeginTransactionRequest& operator=(BeginTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const BeginTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeginTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const BeginTransactionRequest*>(
               &_BeginTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(BeginTransactionRequest* other);
  friend void swap(BeginTransactionRequest& a, BeginTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeginTransactionRequest* New() const final {
    return CreateMaybeMessage<BeginTransactionRequest>(NULL);
  }

  BeginTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeginTransactionRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BeginTransactionRequest& from);
  void MergeFrom(const BeginTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.BeginTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BeginTransactionResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.BeginTransactionResponse) */ {
 public:
  BeginTransactionResponse();
  virtual ~BeginTransactionResponse();

  BeginTransactionResponse(const BeginTransactionResponse& from);

  inline BeginTransactionResponse& operator=(const BeginTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeginTransactionResponse(BeginTransactionResponse&& from) noexcept
    : BeginTransactionResponse() {
    *this = ::std::move(from);
  }

  inline BeginTransactionResponse& operator=(BeginTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const BeginTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeginTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const BeginTransactionResponse*>(
               &_BeginTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(BeginTransactionResponse* other);
  friend void swap(BeginTransactionResponse& a, BeginTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeginTransactionResponse* New() const final {
    return CreateMaybeMessage<BeginTransactionResponse>(NULL);
  }

  BeginTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeginTransactionResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BeginTransactionResponse& from);
  void MergeFrom(const BeginTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.BeginTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EndTransactionRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.EndTransactionRequest) */ {
 public:
  EndTransactionRequest();
  virtual ~EndTransactionRequest();

  EndTransactionRequest(const EndTransactionRequest& from);

  inline EndTransactionRequest& operator=(const EndTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndTransactionRequest(EndTransactionRequest&& from) noexcept
    : EndTransactionRequest() {
    *this = ::std::move(from);
  }

  inline EndTransactionRequest& operator=(EndTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const EndTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const EndTransactionRequest*>(
               &_EndTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(EndTransactionRequest* other);
  friend void swap(EndTransactionRequest& a, EndTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndTransactionRequest* New() const final {
    return CreateMaybeMessage<EndTransactionRequest>(NULL);
  }

  EndTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EndTransactionRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EndTransactionRequest& from);
  void MergeFrom(const EndTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EndTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int intent_spans_size() const;
  void clear_intent_spans();
  static const int kIntentSpansFieldNumber = 5;
  ::cockroach::roachpb::Span* mutable_intent_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
      mutable_intent_spans();
  const ::cockroach::roachpb::Span& intent_spans(int index) const;
  ::cockroach::roachpb::Span* add_intent_spans();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
      intent_spans() const;

  int in_flight_writes_size() const;
  void clear_in_flight_writes();
  static const int kInFlightWritesFieldNumber = 17;
  ::cockroach::roachpb::SequencedWrite* mutable_in_flight_writes(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::SequencedWrite >*
      mutable_in_flight_writes();
  const ::cockroach::roachpb::SequencedWrite& in_flight_writes(int index) const;
  ::cockroach::roachpb::SequencedWrite* add_in_flight_writes();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::SequencedWrite >&
      in_flight_writes() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // .cockroach.util.hlc.Timestamp deadline = 3;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 3;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_deadline() const;
  public:
  const ::cockroach::util::hlc::Timestamp& deadline() const;
  ::cockroach::util::hlc::Timestamp* release_deadline();
  ::cockroach::util::hlc::Timestamp* mutable_deadline();
  void set_allocated_deadline(::cockroach::util::hlc::Timestamp* deadline);

  // .cockroach.roachpb.InternalCommitTrigger internal_commit_trigger = 4;
  bool has_internal_commit_trigger() const;
  void clear_internal_commit_trigger();
  static const int kInternalCommitTriggerFieldNumber = 4;
  private:
  const ::cockroach::roachpb::InternalCommitTrigger& _internal_internal_commit_trigger() const;
  public:
  const ::cockroach::roachpb::InternalCommitTrigger& internal_commit_trigger() const;
  ::cockroach::roachpb::InternalCommitTrigger* release_internal_commit_trigger();
  ::cockroach::roachpb::InternalCommitTrigger* mutable_internal_commit_trigger();
  void set_allocated_internal_commit_trigger(::cockroach::roachpb::InternalCommitTrigger* internal_commit_trigger);

  // bool commit = 2;
  void clear_commit();
  static const int kCommitFieldNumber = 2;
  bool commit() const;
  void set_commit(bool value);

  void clear_require_1pc();
  static const int kRequire1PcFieldNumber = 6;
  bool require_1pc() const;
  void set_require_1pc(bool value);

  // bool no_refresh_spans = 8;
  void clear_no_refresh_spans();
  static const int kNoRefreshSpansFieldNumber = 8;
  bool no_refresh_spans() const;
  void set_no_refresh_spans(bool value);

  // bool poison = 9;
  void clear_poison();
  static const int kPoisonFieldNumber = 9;
  bool poison() const;
  void set_poison(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.EndTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span > intent_spans_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::SequencedWrite > in_flight_writes_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::util::hlc::Timestamp* deadline_;
  ::cockroach::roachpb::InternalCommitTrigger* internal_commit_trigger_;
  bool commit_;
  bool require_1pc_;
  bool no_refresh_spans_;
  bool poison_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EndTransactionResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.EndTransactionResponse) */ {
 public:
  EndTransactionResponse();
  virtual ~EndTransactionResponse();

  EndTransactionResponse(const EndTransactionResponse& from);

  inline EndTransactionResponse& operator=(const EndTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndTransactionResponse(EndTransactionResponse&& from) noexcept
    : EndTransactionResponse() {
    *this = ::std::move(from);
  }

  inline EndTransactionResponse& operator=(EndTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const EndTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const EndTransactionResponse*>(
               &_EndTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(EndTransactionResponse* other);
  friend void swap(EndTransactionResponse& a, EndTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndTransactionResponse* New() const final {
    return CreateMaybeMessage<EndTransactionResponse>(NULL);
  }

  EndTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EndTransactionResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EndTransactionResponse& from);
  void MergeFrom(const EndTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EndTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_staging_timestamp() const;
  void clear_staging_timestamp();
  static const int kStagingTimestampFieldNumber = 5;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_staging_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& staging_timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_staging_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_staging_timestamp();
  void set_allocated_staging_timestamp(::cockroach::util::hlc::Timestamp* staging_timestamp);

  // bool one_phase_commit = 4;
  void clear_one_phase_commit();
  static const int kOnePhaseCommitFieldNumber = 4;
  bool one_phase_commit() const;
  void set_one_phase_commit(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.EndTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::util::hlc::Timestamp* staging_timestamp_;
  bool one_phase_commit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminSplitRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminSplitRequest) */ {
 public:
  AdminSplitRequest();
  virtual ~AdminSplitRequest();

  AdminSplitRequest(const AdminSplitRequest& from);

  inline AdminSplitRequest& operator=(const AdminSplitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminSplitRequest(AdminSplitRequest&& from) noexcept
    : AdminSplitRequest() {
    *this = ::std::move(from);
  }

  inline AdminSplitRequest& operator=(AdminSplitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminSplitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminSplitRequest* internal_default_instance() {
    return reinterpret_cast<const AdminSplitRequest*>(
               &_AdminSplitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(AdminSplitRequest* other);
  friend void swap(AdminSplitRequest& a, AdminSplitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminSplitRequest* New() const final {
    return CreateMaybeMessage<AdminSplitRequest>(NULL);
  }

  AdminSplitRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminSplitRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminSplitRequest& from);
  void MergeFrom(const AdminSplitRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminSplitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_split_key();
  static const int kSplitKeyFieldNumber = 2;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  #if LANG_CXX11
  void set_split_key(::std::string&& value);
  #endif
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_expiration_time() const;
  void clear_expiration_time();
  static const int kExpirationTimeFieldNumber = 4;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_expiration_time() const;
  public:
  const ::cockroach::util::hlc::Timestamp& expiration_time() const;
  ::cockroach::util::hlc::Timestamp* release_expiration_time();
  ::cockroach::util::hlc::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::cockroach::util::hlc::Timestamp* expiration_time);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminSplitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::util::hlc::Timestamp* expiration_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminSplitResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminSplitResponse) */ {
 public:
  AdminSplitResponse();
  virtual ~AdminSplitResponse();

  AdminSplitResponse(const AdminSplitResponse& from);

  inline AdminSplitResponse& operator=(const AdminSplitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminSplitResponse(AdminSplitResponse&& from) noexcept
    : AdminSplitResponse() {
    *this = ::std::move(from);
  }

  inline AdminSplitResponse& operator=(AdminSplitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminSplitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminSplitResponse* internal_default_instance() {
    return reinterpret_cast<const AdminSplitResponse*>(
               &_AdminSplitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(AdminSplitResponse* other);
  friend void swap(AdminSplitResponse& a, AdminSplitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminSplitResponse* New() const final {
    return CreateMaybeMessage<AdminSplitResponse>(NULL);
  }

  AdminSplitResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminSplitResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminSplitResponse& from);
  void MergeFrom(const AdminSplitResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminSplitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminSplitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminUnsplitRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminUnsplitRequest) */ {
 public:
  AdminUnsplitRequest();
  virtual ~AdminUnsplitRequest();

  AdminUnsplitRequest(const AdminUnsplitRequest& from);

  inline AdminUnsplitRequest& operator=(const AdminUnsplitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminUnsplitRequest(AdminUnsplitRequest&& from) noexcept
    : AdminUnsplitRequest() {
    *this = ::std::move(from);
  }

  inline AdminUnsplitRequest& operator=(AdminUnsplitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminUnsplitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminUnsplitRequest* internal_default_instance() {
    return reinterpret_cast<const AdminUnsplitRequest*>(
               &_AdminUnsplitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(AdminUnsplitRequest* other);
  friend void swap(AdminUnsplitRequest& a, AdminUnsplitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminUnsplitRequest* New() const final {
    return CreateMaybeMessage<AdminUnsplitRequest>(NULL);
  }

  AdminUnsplitRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminUnsplitRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminUnsplitRequest& from);
  void MergeFrom(const AdminUnsplitRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminUnsplitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminUnsplitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminUnsplitResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminUnsplitResponse) */ {
 public:
  AdminUnsplitResponse();
  virtual ~AdminUnsplitResponse();

  AdminUnsplitResponse(const AdminUnsplitResponse& from);

  inline AdminUnsplitResponse& operator=(const AdminUnsplitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminUnsplitResponse(AdminUnsplitResponse&& from) noexcept
    : AdminUnsplitResponse() {
    *this = ::std::move(from);
  }

  inline AdminUnsplitResponse& operator=(AdminUnsplitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminUnsplitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminUnsplitResponse* internal_default_instance() {
    return reinterpret_cast<const AdminUnsplitResponse*>(
               &_AdminUnsplitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(AdminUnsplitResponse* other);
  friend void swap(AdminUnsplitResponse& a, AdminUnsplitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminUnsplitResponse* New() const final {
    return CreateMaybeMessage<AdminUnsplitResponse>(NULL);
  }

  AdminUnsplitResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminUnsplitResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminUnsplitResponse& from);
  void MergeFrom(const AdminUnsplitResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminUnsplitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminUnsplitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminMergeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminMergeRequest) */ {
 public:
  AdminMergeRequest();
  virtual ~AdminMergeRequest();

  AdminMergeRequest(const AdminMergeRequest& from);

  inline AdminMergeRequest& operator=(const AdminMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminMergeRequest(AdminMergeRequest&& from) noexcept
    : AdminMergeRequest() {
    *this = ::std::move(from);
  }

  inline AdminMergeRequest& operator=(AdminMergeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminMergeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminMergeRequest* internal_default_instance() {
    return reinterpret_cast<const AdminMergeRequest*>(
               &_AdminMergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(AdminMergeRequest* other);
  friend void swap(AdminMergeRequest& a, AdminMergeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminMergeRequest* New() const final {
    return CreateMaybeMessage<AdminMergeRequest>(NULL);
  }

  AdminMergeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminMergeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminMergeRequest& from);
  void MergeFrom(const AdminMergeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminMergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminMergeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminMergeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminMergeResponse) */ {
 public:
  AdminMergeResponse();
  virtual ~AdminMergeResponse();

  AdminMergeResponse(const AdminMergeResponse& from);

  inline AdminMergeResponse& operator=(const AdminMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminMergeResponse(AdminMergeResponse&& from) noexcept
    : AdminMergeResponse() {
    *this = ::std::move(from);
  }

  inline AdminMergeResponse& operator=(AdminMergeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminMergeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminMergeResponse* internal_default_instance() {
    return reinterpret_cast<const AdminMergeResponse*>(
               &_AdminMergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(AdminMergeResponse* other);
  friend void swap(AdminMergeResponse& a, AdminMergeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminMergeResponse* New() const final {
    return CreateMaybeMessage<AdminMergeResponse>(NULL);
  }

  AdminMergeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminMergeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminMergeResponse& from);
  void MergeFrom(const AdminMergeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminMergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminMergeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminTransferLeaseRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminTransferLeaseRequest) */ {
 public:
  AdminTransferLeaseRequest();
  virtual ~AdminTransferLeaseRequest();

  AdminTransferLeaseRequest(const AdminTransferLeaseRequest& from);

  inline AdminTransferLeaseRequest& operator=(const AdminTransferLeaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminTransferLeaseRequest(AdminTransferLeaseRequest&& from) noexcept
    : AdminTransferLeaseRequest() {
    *this = ::std::move(from);
  }

  inline AdminTransferLeaseRequest& operator=(AdminTransferLeaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminTransferLeaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminTransferLeaseRequest* internal_default_instance() {
    return reinterpret_cast<const AdminTransferLeaseRequest*>(
               &_AdminTransferLeaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(AdminTransferLeaseRequest* other);
  friend void swap(AdminTransferLeaseRequest& a, AdminTransferLeaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminTransferLeaseRequest* New() const final {
    return CreateMaybeMessage<AdminTransferLeaseRequest>(NULL);
  }

  AdminTransferLeaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminTransferLeaseRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminTransferLeaseRequest& from);
  void MergeFrom(const AdminTransferLeaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminTransferLeaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  void clear_target();
  static const int kTargetFieldNumber = 2;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminTransferLeaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::google::protobuf::int32 target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminTransferLeaseResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminTransferLeaseResponse) */ {
 public:
  AdminTransferLeaseResponse();
  virtual ~AdminTransferLeaseResponse();

  AdminTransferLeaseResponse(const AdminTransferLeaseResponse& from);

  inline AdminTransferLeaseResponse& operator=(const AdminTransferLeaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminTransferLeaseResponse(AdminTransferLeaseResponse&& from) noexcept
    : AdminTransferLeaseResponse() {
    *this = ::std::move(from);
  }

  inline AdminTransferLeaseResponse& operator=(AdminTransferLeaseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminTransferLeaseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminTransferLeaseResponse* internal_default_instance() {
    return reinterpret_cast<const AdminTransferLeaseResponse*>(
               &_AdminTransferLeaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(AdminTransferLeaseResponse* other);
  friend void swap(AdminTransferLeaseResponse& a, AdminTransferLeaseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminTransferLeaseResponse* New() const final {
    return CreateMaybeMessage<AdminTransferLeaseResponse>(NULL);
  }

  AdminTransferLeaseResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminTransferLeaseResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminTransferLeaseResponse& from);
  void MergeFrom(const AdminTransferLeaseResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminTransferLeaseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminTransferLeaseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplicationChange : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ReplicationChange) */ {
 public:
  ReplicationChange();
  virtual ~ReplicationChange();

  ReplicationChange(const ReplicationChange& from);

  inline ReplicationChange& operator=(const ReplicationChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplicationChange(ReplicationChange&& from) noexcept
    : ReplicationChange() {
    *this = ::std::move(from);
  }

  inline ReplicationChange& operator=(ReplicationChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ReplicationChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicationChange* internal_default_instance() {
    return reinterpret_cast<const ReplicationChange*>(
               &_ReplicationChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(ReplicationChange* other);
  friend void swap(ReplicationChange& a, ReplicationChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplicationChange* New() const final {
    return CreateMaybeMessage<ReplicationChange>(NULL);
  }

  ReplicationChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReplicationChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ReplicationChange& from);
  void MergeFrom(const ReplicationChange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReplicationChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  private:
  const ::cockroach::roachpb::ReplicationTarget& _internal_target() const;
  public:
  const ::cockroach::roachpb::ReplicationTarget& target() const;
  ::cockroach::roachpb::ReplicationTarget* release_target();
  ::cockroach::roachpb::ReplicationTarget* mutable_target();
  void set_allocated_target(::cockroach::roachpb::ReplicationTarget* target);

  // .cockroach.roachpb.ReplicaChangeType change_type = 1;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  ::cockroach::roachpb::ReplicaChangeType change_type() const;
  void set_change_type(::cockroach::roachpb::ReplicaChangeType value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReplicationChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ReplicationTarget* target_;
  int change_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminChangeReplicasRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminChangeReplicasRequest) */ {
 public:
  AdminChangeReplicasRequest();
  virtual ~AdminChangeReplicasRequest();

  AdminChangeReplicasRequest(const AdminChangeReplicasRequest& from);

  inline AdminChangeReplicasRequest& operator=(const AdminChangeReplicasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminChangeReplicasRequest(AdminChangeReplicasRequest&& from) noexcept
    : AdminChangeReplicasRequest() {
    *this = ::std::move(from);
  }

  inline AdminChangeReplicasRequest& operator=(AdminChangeReplicasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminChangeReplicasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminChangeReplicasRequest* internal_default_instance() {
    return reinterpret_cast<const AdminChangeReplicasRequest*>(
               &_AdminChangeReplicasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(AdminChangeReplicasRequest* other);
  friend void swap(AdminChangeReplicasRequest& a, AdminChangeReplicasRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminChangeReplicasRequest* New() const final {
    return CreateMaybeMessage<AdminChangeReplicasRequest>(NULL);
  }

  AdminChangeReplicasRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminChangeReplicasRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminChangeReplicasRequest& from);
  void MergeFrom(const AdminChangeReplicasRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminChangeReplicasRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int deprecated_targets_size() const;
  void clear_deprecated_targets();
  static const int kDeprecatedTargetsFieldNumber = 3;
  ::cockroach::roachpb::ReplicationTarget* mutable_deprecated_targets(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget >*
      mutable_deprecated_targets();
  const ::cockroach::roachpb::ReplicationTarget& deprecated_targets(int index) const;
  ::cockroach::roachpb::ReplicationTarget* add_deprecated_targets();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget >&
      deprecated_targets() const;

  int internal_changes_size() const;
  void clear_internal_changes();
  static const int kInternalChangesFieldNumber = 5;
  ::cockroach::roachpb::ReplicationChange* mutable_internal_changes(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationChange >*
      mutable_internal_changes();
  const ::cockroach::roachpb::ReplicationChange& internal_changes(int index) const;
  ::cockroach::roachpb::ReplicationChange* add_internal_changes();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationChange >&
      internal_changes() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_exp_desc() const;
  void clear_exp_desc();
  static const int kExpDescFieldNumber = 4;
  private:
  const ::cockroach::roachpb::RangeDescriptor& _internal_exp_desc() const;
  public:
  const ::cockroach::roachpb::RangeDescriptor& exp_desc() const;
  ::cockroach::roachpb::RangeDescriptor* release_exp_desc();
  ::cockroach::roachpb::RangeDescriptor* mutable_exp_desc();
  void set_allocated_exp_desc(::cockroach::roachpb::RangeDescriptor* exp_desc);

  // .cockroach.roachpb.ReplicaChangeType deprecated_change_type = 2;
  void clear_deprecated_change_type();
  static const int kDeprecatedChangeTypeFieldNumber = 2;
  ::cockroach::roachpb::ReplicaChangeType deprecated_change_type() const;
  void set_deprecated_change_type(::cockroach::roachpb::ReplicaChangeType value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminChangeReplicasRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget > deprecated_targets_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationChange > internal_changes_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::RangeDescriptor* exp_desc_;
  int deprecated_change_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminChangeReplicasResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminChangeReplicasResponse) */ {
 public:
  AdminChangeReplicasResponse();
  virtual ~AdminChangeReplicasResponse();

  AdminChangeReplicasResponse(const AdminChangeReplicasResponse& from);

  inline AdminChangeReplicasResponse& operator=(const AdminChangeReplicasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminChangeReplicasResponse(AdminChangeReplicasResponse&& from) noexcept
    : AdminChangeReplicasResponse() {
    *this = ::std::move(from);
  }

  inline AdminChangeReplicasResponse& operator=(AdminChangeReplicasResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminChangeReplicasResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminChangeReplicasResponse* internal_default_instance() {
    return reinterpret_cast<const AdminChangeReplicasResponse*>(
               &_AdminChangeReplicasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(AdminChangeReplicasResponse* other);
  friend void swap(AdminChangeReplicasResponse& a, AdminChangeReplicasResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminChangeReplicasResponse* New() const final {
    return CreateMaybeMessage<AdminChangeReplicasResponse>(NULL);
  }

  AdminChangeReplicasResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminChangeReplicasResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminChangeReplicasResponse& from);
  void MergeFrom(const AdminChangeReplicasResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminChangeReplicasResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  private:
  const ::cockroach::roachpb::RangeDescriptor& _internal_desc() const;
  public:
  const ::cockroach::roachpb::RangeDescriptor& desc() const;
  ::cockroach::roachpb::RangeDescriptor* release_desc();
  ::cockroach::roachpb::RangeDescriptor* mutable_desc();
  void set_allocated_desc(::cockroach::roachpb::RangeDescriptor* desc);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminChangeReplicasResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::roachpb::RangeDescriptor* desc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminRelocateRangeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminRelocateRangeRequest) */ {
 public:
  AdminRelocateRangeRequest();
  virtual ~AdminRelocateRangeRequest();

  AdminRelocateRangeRequest(const AdminRelocateRangeRequest& from);

  inline AdminRelocateRangeRequest& operator=(const AdminRelocateRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminRelocateRangeRequest(AdminRelocateRangeRequest&& from) noexcept
    : AdminRelocateRangeRequest() {
    *this = ::std::move(from);
  }

  inline AdminRelocateRangeRequest& operator=(AdminRelocateRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminRelocateRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminRelocateRangeRequest* internal_default_instance() {
    return reinterpret_cast<const AdminRelocateRangeRequest*>(
               &_AdminRelocateRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(AdminRelocateRangeRequest* other);
  friend void swap(AdminRelocateRangeRequest& a, AdminRelocateRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminRelocateRangeRequest* New() const final {
    return CreateMaybeMessage<AdminRelocateRangeRequest>(NULL);
  }

  AdminRelocateRangeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminRelocateRangeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminRelocateRangeRequest& from);
  void MergeFrom(const AdminRelocateRangeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminRelocateRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int targets_size() const;
  void clear_targets();
  static const int kTargetsFieldNumber = 2;
  ::cockroach::roachpb::ReplicationTarget* mutable_targets(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget >*
      mutable_targets();
  const ::cockroach::roachpb::ReplicationTarget& targets(int index) const;
  ::cockroach::roachpb::ReplicationTarget* add_targets();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget >&
      targets() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminRelocateRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget > targets_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminRelocateRangeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminRelocateRangeResponse) */ {
 public:
  AdminRelocateRangeResponse();
  virtual ~AdminRelocateRangeResponse();

  AdminRelocateRangeResponse(const AdminRelocateRangeResponse& from);

  inline AdminRelocateRangeResponse& operator=(const AdminRelocateRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminRelocateRangeResponse(AdminRelocateRangeResponse&& from) noexcept
    : AdminRelocateRangeResponse() {
    *this = ::std::move(from);
  }

  inline AdminRelocateRangeResponse& operator=(AdminRelocateRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminRelocateRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminRelocateRangeResponse* internal_default_instance() {
    return reinterpret_cast<const AdminRelocateRangeResponse*>(
               &_AdminRelocateRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(AdminRelocateRangeResponse* other);
  friend void swap(AdminRelocateRangeResponse& a, AdminRelocateRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminRelocateRangeResponse* New() const final {
    return CreateMaybeMessage<AdminRelocateRangeResponse>(NULL);
  }

  AdminRelocateRangeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminRelocateRangeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminRelocateRangeResponse& from);
  void MergeFrom(const AdminRelocateRangeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminRelocateRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminRelocateRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatTxnRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.HeartbeatTxnRequest) */ {
 public:
  HeartbeatTxnRequest();
  virtual ~HeartbeatTxnRequest();

  HeartbeatTxnRequest(const HeartbeatTxnRequest& from);

  inline HeartbeatTxnRequest& operator=(const HeartbeatTxnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatTxnRequest(HeartbeatTxnRequest&& from) noexcept
    : HeartbeatTxnRequest() {
    *this = ::std::move(from);
  }

  inline HeartbeatTxnRequest& operator=(HeartbeatTxnRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const HeartbeatTxnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatTxnRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatTxnRequest*>(
               &_HeartbeatTxnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(HeartbeatTxnRequest* other);
  friend void swap(HeartbeatTxnRequest& a, HeartbeatTxnRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatTxnRequest* New() const final {
    return CreateMaybeMessage<HeartbeatTxnRequest>(NULL);
  }

  HeartbeatTxnRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatTxnRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const HeartbeatTxnRequest& from);
  void MergeFrom(const HeartbeatTxnRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartbeatTxnRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_now() const;
  void clear_now();
  static const int kNowFieldNumber = 2;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_now() const;
  public:
  const ::cockroach::util::hlc::Timestamp& now() const;
  ::cockroach::util::hlc::Timestamp* release_now();
  ::cockroach::util::hlc::Timestamp* mutable_now();
  void set_allocated_now(::cockroach::util::hlc::Timestamp* now);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.HeartbeatTxnRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::util::hlc::Timestamp* now_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatTxnResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.HeartbeatTxnResponse) */ {
 public:
  HeartbeatTxnResponse();
  virtual ~HeartbeatTxnResponse();

  HeartbeatTxnResponse(const HeartbeatTxnResponse& from);

  inline HeartbeatTxnResponse& operator=(const HeartbeatTxnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatTxnResponse(HeartbeatTxnResponse&& from) noexcept
    : HeartbeatTxnResponse() {
    *this = ::std::move(from);
  }

  inline HeartbeatTxnResponse& operator=(HeartbeatTxnResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const HeartbeatTxnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatTxnResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatTxnResponse*>(
               &_HeartbeatTxnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(HeartbeatTxnResponse* other);
  friend void swap(HeartbeatTxnResponse& a, HeartbeatTxnResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatTxnResponse* New() const final {
    return CreateMaybeMessage<HeartbeatTxnResponse>(NULL);
  }

  HeartbeatTxnResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatTxnResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const HeartbeatTxnResponse& from);
  void MergeFrom(const HeartbeatTxnResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartbeatTxnResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.HeartbeatTxnResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCRequest_GCKey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.GCRequest.GCKey) */ {
 public:
  GCRequest_GCKey();
  virtual ~GCRequest_GCKey();

  GCRequest_GCKey(const GCRequest_GCKey& from);

  inline GCRequest_GCKey& operator=(const GCRequest_GCKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCRequest_GCKey(GCRequest_GCKey&& from) noexcept
    : GCRequest_GCKey() {
    *this = ::std::move(from);
  }

  inline GCRequest_GCKey& operator=(GCRequest_GCKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GCRequest_GCKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GCRequest_GCKey* internal_default_instance() {
    return reinterpret_cast<const GCRequest_GCKey*>(
               &_GCRequest_GCKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(GCRequest_GCKey* other);
  friend void swap(GCRequest_GCKey& a, GCRequest_GCKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCRequest_GCKey* New() const final {
    return CreateMaybeMessage<GCRequest_GCKey>(NULL);
  }

  GCRequest_GCKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GCRequest_GCKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GCRequest_GCKey& from);
  void MergeFrom(const GCRequest_GCKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GCRequest_GCKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.GCRequest.GCKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.GCRequest) */ {
 public:
  GCRequest();
  virtual ~GCRequest();

  GCRequest(const GCRequest& from);

  inline GCRequest& operator=(const GCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCRequest(GCRequest&& from) noexcept
    : GCRequest() {
    *this = ::std::move(from);
  }

  inline GCRequest& operator=(GCRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GCRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GCRequest* internal_default_instance() {
    return reinterpret_cast<const GCRequest*>(
               &_GCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(GCRequest* other);
  friend void swap(GCRequest& a, GCRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCRequest* New() const final {
    return CreateMaybeMessage<GCRequest>(NULL);
  }

  GCRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GCRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GCRequest& from);
  void MergeFrom(const GCRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GCRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GCRequest_GCKey GCKey;

  // accessors -------------------------------------------------------

  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  ::cockroach::roachpb::GCRequest_GCKey* mutable_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::GCRequest_GCKey >*
      mutable_keys();
  const ::cockroach::roachpb::GCRequest_GCKey& keys(int index) const;
  ::cockroach::roachpb::GCRequest_GCKey* add_keys();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::GCRequest_GCKey >&
      keys() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 4;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_threshold() const;
  public:
  const ::cockroach::util::hlc::Timestamp& threshold() const;
  ::cockroach::util::hlc::Timestamp* release_threshold();
  ::cockroach::util::hlc::Timestamp* mutable_threshold();
  void set_allocated_threshold(::cockroach::util::hlc::Timestamp* threshold);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.GCRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::GCRequest_GCKey > keys_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::util::hlc::Timestamp* threshold_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.GCResponse) */ {
 public:
  GCResponse();
  virtual ~GCResponse();

  GCResponse(const GCResponse& from);

  inline GCResponse& operator=(const GCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCResponse(GCResponse&& from) noexcept
    : GCResponse() {
    *this = ::std::move(from);
  }

  inline GCResponse& operator=(GCResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GCResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GCResponse* internal_default_instance() {
    return reinterpret_cast<const GCResponse*>(
               &_GCResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(GCResponse* other);
  friend void swap(GCResponse& a, GCResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCResponse* New() const final {
    return CreateMaybeMessage<GCResponse>(NULL);
  }

  GCResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GCResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GCResponse& from);
  void MergeFrom(const GCResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GCResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.GCResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushTxnRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.PushTxnRequest) */ {
 public:
  PushTxnRequest();
  virtual ~PushTxnRequest();

  PushTxnRequest(const PushTxnRequest& from);

  inline PushTxnRequest& operator=(const PushTxnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushTxnRequest(PushTxnRequest&& from) noexcept
    : PushTxnRequest() {
    *this = ::std::move(from);
  }

  inline PushTxnRequest& operator=(PushTxnRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PushTxnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushTxnRequest* internal_default_instance() {
    return reinterpret_cast<const PushTxnRequest*>(
               &_PushTxnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(PushTxnRequest* other);
  friend void swap(PushTxnRequest& a, PushTxnRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushTxnRequest* New() const final {
    return CreateMaybeMessage<PushTxnRequest>(NULL);
  }

  PushTxnRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushTxnRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PushTxnRequest& from);
  void MergeFrom(const PushTxnRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PushTxnRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_pusher_txn() const;
  void clear_pusher_txn();
  static const int kPusherTxnFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Transaction& _internal_pusher_txn() const;
  public:
  const ::cockroach::roachpb::Transaction& pusher_txn() const;
  ::cockroach::roachpb::Transaction* release_pusher_txn();
  ::cockroach::roachpb::Transaction* mutable_pusher_txn();
  void set_allocated_pusher_txn(::cockroach::roachpb::Transaction* pusher_txn);

  bool has_pushee_txn() const;
  void clear_pushee_txn();
  static const int kPusheeTxnFieldNumber = 3;
  private:
  const ::cockroach::storage::engine::enginepb::TxnMeta& _internal_pushee_txn() const;
  public:
  const ::cockroach::storage::engine::enginepb::TxnMeta& pushee_txn() const;
  ::cockroach::storage::engine::enginepb::TxnMeta* release_pushee_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* mutable_pushee_txn();
  void set_allocated_pushee_txn(::cockroach::storage::engine::enginepb::TxnMeta* pushee_txn);

  bool has_push_to() const;
  void clear_push_to();
  static const int kPushToFieldNumber = 4;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_push_to() const;
  public:
  const ::cockroach::util::hlc::Timestamp& push_to() const;
  ::cockroach::util::hlc::Timestamp* release_push_to();
  ::cockroach::util::hlc::Timestamp* mutable_push_to();
  void set_allocated_push_to(::cockroach::util::hlc::Timestamp* push_to);

  // .cockroach.roachpb.PushTxnType push_type = 6;
  void clear_push_type();
  static const int kPushTypeFieldNumber = 6;
  ::cockroach::roachpb::PushTxnType push_type() const;
  void set_push_type(::cockroach::roachpb::PushTxnType value);

  // bool inclusive_push_to = 9;
  void clear_inclusive_push_to();
  static const int kInclusivePushToFieldNumber = 9;
  bool inclusive_push_to() const;
  void set_inclusive_push_to(bool value);

  // bool force = 7;
  void clear_force();
  static const int kForceFieldNumber = 7;
  bool force() const;
  void set_force(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.PushTxnRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Transaction* pusher_txn_;
  ::cockroach::storage::engine::enginepb::TxnMeta* pushee_txn_;
  ::cockroach::util::hlc::Timestamp* push_to_;
  int push_type_;
  bool inclusive_push_to_;
  bool force_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushTxnResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.PushTxnResponse) */ {
 public:
  PushTxnResponse();
  virtual ~PushTxnResponse();

  PushTxnResponse(const PushTxnResponse& from);

  inline PushTxnResponse& operator=(const PushTxnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushTxnResponse(PushTxnResponse&& from) noexcept
    : PushTxnResponse() {
    *this = ::std::move(from);
  }

  inline PushTxnResponse& operator=(PushTxnResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PushTxnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushTxnResponse* internal_default_instance() {
    return reinterpret_cast<const PushTxnResponse*>(
               &_PushTxnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(PushTxnResponse* other);
  friend void swap(PushTxnResponse& a, PushTxnResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushTxnResponse* New() const final {
    return CreateMaybeMessage<PushTxnResponse>(NULL);
  }

  PushTxnResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushTxnResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PushTxnResponse& from);
  void MergeFrom(const PushTxnResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PushTxnResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_pushee_txn() const;
  void clear_pushee_txn();
  static const int kPusheeTxnFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Transaction& _internal_pushee_txn() const;
  public:
  const ::cockroach::roachpb::Transaction& pushee_txn() const;
  ::cockroach::roachpb::Transaction* release_pushee_txn();
  ::cockroach::roachpb::Transaction* mutable_pushee_txn();
  void set_allocated_pushee_txn(::cockroach::roachpb::Transaction* pushee_txn);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.PushTxnResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::roachpb::Transaction* pushee_txn_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecoverTxnRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RecoverTxnRequest) */ {
 public:
  RecoverTxnRequest();
  virtual ~RecoverTxnRequest();

  RecoverTxnRequest(const RecoverTxnRequest& from);

  inline RecoverTxnRequest& operator=(const RecoverTxnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoverTxnRequest(RecoverTxnRequest&& from) noexcept
    : RecoverTxnRequest() {
    *this = ::std::move(from);
  }

  inline RecoverTxnRequest& operator=(RecoverTxnRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RecoverTxnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverTxnRequest* internal_default_instance() {
    return reinterpret_cast<const RecoverTxnRequest*>(
               &_RecoverTxnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(RecoverTxnRequest* other);
  friend void swap(RecoverTxnRequest& a, RecoverTxnRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverTxnRequest* New() const final {
    return CreateMaybeMessage<RecoverTxnRequest>(NULL);
  }

  RecoverTxnRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecoverTxnRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RecoverTxnRequest& from);
  void MergeFrom(const RecoverTxnRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecoverTxnRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 2;
  private:
  const ::cockroach::storage::engine::enginepb::TxnMeta& _internal_txn() const;
  public:
  const ::cockroach::storage::engine::enginepb::TxnMeta& txn() const;
  ::cockroach::storage::engine::enginepb::TxnMeta* release_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* mutable_txn();
  void set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn);

  // bool implicitly_committed = 3;
  void clear_implicitly_committed();
  static const int kImplicitlyCommittedFieldNumber = 3;
  bool implicitly_committed() const;
  void set_implicitly_committed(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RecoverTxnRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::storage::engine::enginepb::TxnMeta* txn_;
  bool implicitly_committed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecoverTxnResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RecoverTxnResponse) */ {
 public:
  RecoverTxnResponse();
  virtual ~RecoverTxnResponse();

  RecoverTxnResponse(const RecoverTxnResponse& from);

  inline RecoverTxnResponse& operator=(const RecoverTxnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoverTxnResponse(RecoverTxnResponse&& from) noexcept
    : RecoverTxnResponse() {
    *this = ::std::move(from);
  }

  inline RecoverTxnResponse& operator=(RecoverTxnResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RecoverTxnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverTxnResponse* internal_default_instance() {
    return reinterpret_cast<const RecoverTxnResponse*>(
               &_RecoverTxnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(RecoverTxnResponse* other);
  friend void swap(RecoverTxnResponse& a, RecoverTxnResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverTxnResponse* New() const final {
    return CreateMaybeMessage<RecoverTxnResponse>(NULL);
  }

  RecoverTxnResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecoverTxnResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RecoverTxnResponse& from);
  void MergeFrom(const RecoverTxnResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecoverTxnResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_recovered_txn() const;
  void clear_recovered_txn();
  static const int kRecoveredTxnFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Transaction& _internal_recovered_txn() const;
  public:
  const ::cockroach::roachpb::Transaction& recovered_txn() const;
  ::cockroach::roachpb::Transaction* release_recovered_txn();
  ::cockroach::roachpb::Transaction* mutable_recovered_txn();
  void set_allocated_recovered_txn(::cockroach::roachpb::Transaction* recovered_txn);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RecoverTxnResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::roachpb::Transaction* recovered_txn_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryTxnRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.QueryTxnRequest) */ {
 public:
  QueryTxnRequest();
  virtual ~QueryTxnRequest();

  QueryTxnRequest(const QueryTxnRequest& from);

  inline QueryTxnRequest& operator=(const QueryTxnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryTxnRequest(QueryTxnRequest&& from) noexcept
    : QueryTxnRequest() {
    *this = ::std::move(from);
  }

  inline QueryTxnRequest& operator=(QueryTxnRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const QueryTxnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTxnRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTxnRequest*>(
               &_QueryTxnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(QueryTxnRequest* other);
  friend void swap(QueryTxnRequest& a, QueryTxnRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryTxnRequest* New() const final {
    return CreateMaybeMessage<QueryTxnRequest>(NULL);
  }

  QueryTxnRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryTxnRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const QueryTxnRequest& from);
  void MergeFrom(const QueryTxnRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryTxnRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int known_waiting_txns_size() const;
  void clear_known_waiting_txns();
  static const int kKnownWaitingTxnsFieldNumber = 4;
  const ::std::string& known_waiting_txns(int index) const;
  ::std::string* mutable_known_waiting_txns(int index);
  void set_known_waiting_txns(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_known_waiting_txns(int index, ::std::string&& value);
  #endif
  void set_known_waiting_txns(int index, const char* value);
  void set_known_waiting_txns(int index, const void* value, size_t size);
  ::std::string* add_known_waiting_txns();
  void add_known_waiting_txns(const ::std::string& value);
  #if LANG_CXX11
  void add_known_waiting_txns(::std::string&& value);
  #endif
  void add_known_waiting_txns(const char* value);
  void add_known_waiting_txns(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& known_waiting_txns() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_known_waiting_txns();

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 2;
  private:
  const ::cockroach::storage::engine::enginepb::TxnMeta& _internal_txn() const;
  public:
  const ::cockroach::storage::engine::enginepb::TxnMeta& txn() const;
  ::cockroach::storage::engine::enginepb::TxnMeta* release_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* mutable_txn();
  void set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn);

  // bool wait_for_update = 3;
  void clear_wait_for_update();
  static const int kWaitForUpdateFieldNumber = 3;
  bool wait_for_update() const;
  void set_wait_for_update(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.QueryTxnRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> known_waiting_txns_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::storage::engine::enginepb::TxnMeta* txn_;
  bool wait_for_update_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryTxnResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.QueryTxnResponse) */ {
 public:
  QueryTxnResponse();
  virtual ~QueryTxnResponse();

  QueryTxnResponse(const QueryTxnResponse& from);

  inline QueryTxnResponse& operator=(const QueryTxnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryTxnResponse(QueryTxnResponse&& from) noexcept
    : QueryTxnResponse() {
    *this = ::std::move(from);
  }

  inline QueryTxnResponse& operator=(QueryTxnResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const QueryTxnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTxnResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTxnResponse*>(
               &_QueryTxnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(QueryTxnResponse* other);
  friend void swap(QueryTxnResponse& a, QueryTxnResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryTxnResponse* New() const final {
    return CreateMaybeMessage<QueryTxnResponse>(NULL);
  }

  QueryTxnResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryTxnResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const QueryTxnResponse& from);
  void MergeFrom(const QueryTxnResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryTxnResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int waiting_txns_size() const;
  void clear_waiting_txns();
  static const int kWaitingTxnsFieldNumber = 3;
  const ::std::string& waiting_txns(int index) const;
  ::std::string* mutable_waiting_txns(int index);
  void set_waiting_txns(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_waiting_txns(int index, ::std::string&& value);
  #endif
  void set_waiting_txns(int index, const char* value);
  void set_waiting_txns(int index, const void* value, size_t size);
  ::std::string* add_waiting_txns();
  void add_waiting_txns(const ::std::string& value);
  #if LANG_CXX11
  void add_waiting_txns(::std::string&& value);
  #endif
  void add_waiting_txns(const char* value);
  void add_waiting_txns(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& waiting_txns() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_waiting_txns();

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_queried_txn() const;
  void clear_queried_txn();
  static const int kQueriedTxnFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Transaction& _internal_queried_txn() const;
  public:
  const ::cockroach::roachpb::Transaction& queried_txn() const;
  ::cockroach::roachpb::Transaction* release_queried_txn();
  ::cockroach::roachpb::Transaction* mutable_queried_txn();
  void set_allocated_queried_txn(::cockroach::roachpb::Transaction* queried_txn);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.QueryTxnResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> waiting_txns_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::roachpb::Transaction* queried_txn_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryIntentRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.QueryIntentRequest) */ {
 public:
  QueryIntentRequest();
  virtual ~QueryIntentRequest();

  QueryIntentRequest(const QueryIntentRequest& from);

  inline QueryIntentRequest& operator=(const QueryIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryIntentRequest(QueryIntentRequest&& from) noexcept
    : QueryIntentRequest() {
    *this = ::std::move(from);
  }

  inline QueryIntentRequest& operator=(QueryIntentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const QueryIntentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryIntentRequest* internal_default_instance() {
    return reinterpret_cast<const QueryIntentRequest*>(
               &_QueryIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(QueryIntentRequest* other);
  friend void swap(QueryIntentRequest& a, QueryIntentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryIntentRequest* New() const final {
    return CreateMaybeMessage<QueryIntentRequest>(NULL);
  }

  QueryIntentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryIntentRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const QueryIntentRequest& from);
  void MergeFrom(const QueryIntentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryIntentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 2;
  private:
  const ::cockroach::storage::engine::enginepb::TxnMeta& _internal_txn() const;
  public:
  const ::cockroach::storage::engine::enginepb::TxnMeta& txn() const;
  ::cockroach::storage::engine::enginepb::TxnMeta* release_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* mutable_txn();
  void set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn);

  // bool error_if_missing = 3;
  void clear_error_if_missing();
  static const int kErrorIfMissingFieldNumber = 3;
  bool error_if_missing() const;
  void set_error_if_missing(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.QueryIntentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::storage::engine::enginepb::TxnMeta* txn_;
  bool error_if_missing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryIntentResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.QueryIntentResponse) */ {
 public:
  QueryIntentResponse();
  virtual ~QueryIntentResponse();

  QueryIntentResponse(const QueryIntentResponse& from);

  inline QueryIntentResponse& operator=(const QueryIntentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryIntentResponse(QueryIntentResponse&& from) noexcept
    : QueryIntentResponse() {
    *this = ::std::move(from);
  }

  inline QueryIntentResponse& operator=(QueryIntentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const QueryIntentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryIntentResponse* internal_default_instance() {
    return reinterpret_cast<const QueryIntentResponse*>(
               &_QueryIntentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(QueryIntentResponse* other);
  friend void swap(QueryIntentResponse& a, QueryIntentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryIntentResponse* New() const final {
    return CreateMaybeMessage<QueryIntentResponse>(NULL);
  }

  QueryIntentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryIntentResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const QueryIntentResponse& from);
  void MergeFrom(const QueryIntentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryIntentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // bool found_intent = 2;
  void clear_found_intent();
  static const int kFoundIntentFieldNumber = 2;
  bool found_intent() const;
  void set_found_intent(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.QueryIntentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  bool found_intent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolveIntentRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ResolveIntentRequest) */ {
 public:
  ResolveIntentRequest();
  virtual ~ResolveIntentRequest();

  ResolveIntentRequest(const ResolveIntentRequest& from);

  inline ResolveIntentRequest& operator=(const ResolveIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolveIntentRequest(ResolveIntentRequest&& from) noexcept
    : ResolveIntentRequest() {
    *this = ::std::move(from);
  }

  inline ResolveIntentRequest& operator=(ResolveIntentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ResolveIntentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveIntentRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveIntentRequest*>(
               &_ResolveIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(ResolveIntentRequest* other);
  friend void swap(ResolveIntentRequest& a, ResolveIntentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolveIntentRequest* New() const final {
    return CreateMaybeMessage<ResolveIntentRequest>(NULL);
  }

  ResolveIntentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolveIntentRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ResolveIntentRequest& from);
  void MergeFrom(const ResolveIntentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResolveIntentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_intent_txn() const;
  void clear_intent_txn();
  static const int kIntentTxnFieldNumber = 2;
  private:
  const ::cockroach::storage::engine::enginepb::TxnMeta& _internal_intent_txn() const;
  public:
  const ::cockroach::storage::engine::enginepb::TxnMeta& intent_txn() const;
  ::cockroach::storage::engine::enginepb::TxnMeta* release_intent_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* mutable_intent_txn();
  void set_allocated_intent_txn(::cockroach::storage::engine::enginepb::TxnMeta* intent_txn);

  // .cockroach.roachpb.TransactionStatus status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::cockroach::roachpb::TransactionStatus status() const;
  void set_status(::cockroach::roachpb::TransactionStatus value);

  // bool poison = 4;
  void clear_poison();
  static const int kPoisonFieldNumber = 4;
  bool poison() const;
  void set_poison(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ResolveIntentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::storage::engine::enginepb::TxnMeta* intent_txn_;
  int status_;
  bool poison_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolveIntentResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ResolveIntentResponse) */ {
 public:
  ResolveIntentResponse();
  virtual ~ResolveIntentResponse();

  ResolveIntentResponse(const ResolveIntentResponse& from);

  inline ResolveIntentResponse& operator=(const ResolveIntentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolveIntentResponse(ResolveIntentResponse&& from) noexcept
    : ResolveIntentResponse() {
    *this = ::std::move(from);
  }

  inline ResolveIntentResponse& operator=(ResolveIntentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ResolveIntentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveIntentResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveIntentResponse*>(
               &_ResolveIntentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(ResolveIntentResponse* other);
  friend void swap(ResolveIntentResponse& a, ResolveIntentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolveIntentResponse* New() const final {
    return CreateMaybeMessage<ResolveIntentResponse>(NULL);
  }

  ResolveIntentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolveIntentResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ResolveIntentResponse& from);
  void MergeFrom(const ResolveIntentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResolveIntentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ResolveIntentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolveIntentRangeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ResolveIntentRangeRequest) */ {
 public:
  ResolveIntentRangeRequest();
  virtual ~ResolveIntentRangeRequest();

  ResolveIntentRangeRequest(const ResolveIntentRangeRequest& from);

  inline ResolveIntentRangeRequest& operator=(const ResolveIntentRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolveIntentRangeRequest(ResolveIntentRangeRequest&& from) noexcept
    : ResolveIntentRangeRequest() {
    *this = ::std::move(from);
  }

  inline ResolveIntentRangeRequest& operator=(ResolveIntentRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ResolveIntentRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveIntentRangeRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveIntentRangeRequest*>(
               &_ResolveIntentRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(ResolveIntentRangeRequest* other);
  friend void swap(ResolveIntentRangeRequest& a, ResolveIntentRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolveIntentRangeRequest* New() const final {
    return CreateMaybeMessage<ResolveIntentRangeRequest>(NULL);
  }

  ResolveIntentRangeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolveIntentRangeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ResolveIntentRangeRequest& from);
  void MergeFrom(const ResolveIntentRangeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResolveIntentRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_intent_txn() const;
  void clear_intent_txn();
  static const int kIntentTxnFieldNumber = 2;
  private:
  const ::cockroach::storage::engine::enginepb::TxnMeta& _internal_intent_txn() const;
  public:
  const ::cockroach::storage::engine::enginepb::TxnMeta& intent_txn() const;
  ::cockroach::storage::engine::enginepb::TxnMeta* release_intent_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* mutable_intent_txn();
  void set_allocated_intent_txn(::cockroach::storage::engine::enginepb::TxnMeta* intent_txn);

  bool has_min_timestamp() const;
  void clear_min_timestamp();
  static const int kMinTimestampFieldNumber = 5;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_min_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& min_timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_min_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_min_timestamp();
  void set_allocated_min_timestamp(::cockroach::util::hlc::Timestamp* min_timestamp);

  // .cockroach.roachpb.TransactionStatus status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::cockroach::roachpb::TransactionStatus status() const;
  void set_status(::cockroach::roachpb::TransactionStatus value);

  // bool poison = 4;
  void clear_poison();
  static const int kPoisonFieldNumber = 4;
  bool poison() const;
  void set_poison(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ResolveIntentRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::storage::engine::enginepb::TxnMeta* intent_txn_;
  ::cockroach::util::hlc::Timestamp* min_timestamp_;
  int status_;
  bool poison_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolveIntentRangeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ResolveIntentRangeResponse) */ {
 public:
  ResolveIntentRangeResponse();
  virtual ~ResolveIntentRangeResponse();

  ResolveIntentRangeResponse(const ResolveIntentRangeResponse& from);

  inline ResolveIntentRangeResponse& operator=(const ResolveIntentRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolveIntentRangeResponse(ResolveIntentRangeResponse&& from) noexcept
    : ResolveIntentRangeResponse() {
    *this = ::std::move(from);
  }

  inline ResolveIntentRangeResponse& operator=(ResolveIntentRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ResolveIntentRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveIntentRangeResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveIntentRangeResponse*>(
               &_ResolveIntentRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(ResolveIntentRangeResponse* other);
  friend void swap(ResolveIntentRangeResponse& a, ResolveIntentRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolveIntentRangeResponse* New() const final {
    return CreateMaybeMessage<ResolveIntentRangeResponse>(NULL);
  }

  ResolveIntentRangeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolveIntentRangeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ResolveIntentRangeResponse& from);
  void MergeFrom(const ResolveIntentRangeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResolveIntentRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ResolveIntentRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MergeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.MergeRequest) */ {
 public:
  MergeRequest();
  virtual ~MergeRequest();

  MergeRequest(const MergeRequest& from);

  inline MergeRequest& operator=(const MergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MergeRequest(MergeRequest&& from) noexcept
    : MergeRequest() {
    *this = ::std::move(from);
  }

  inline MergeRequest& operator=(MergeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MergeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeRequest* internal_default_instance() {
    return reinterpret_cast<const MergeRequest*>(
               &_MergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(MergeRequest* other);
  friend void swap(MergeRequest& a, MergeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MergeRequest* New() const final {
    return CreateMaybeMessage<MergeRequest>(NULL);
  }

  MergeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MergeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MergeRequest& from);
  void MergeFrom(const MergeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Value& _internal_value() const;
  public:
  const ::cockroach::roachpb::Value& value() const;
  ::cockroach::roachpb::Value* release_value();
  ::cockroach::roachpb::Value* mutable_value();
  void set_allocated_value(::cockroach::roachpb::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.MergeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MergeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.MergeResponse) */ {
 public:
  MergeResponse();
  virtual ~MergeResponse();

  MergeResponse(const MergeResponse& from);

  inline MergeResponse& operator=(const MergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MergeResponse(MergeResponse&& from) noexcept
    : MergeResponse() {
    *this = ::std::move(from);
  }

  inline MergeResponse& operator=(MergeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MergeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeResponse* internal_default_instance() {
    return reinterpret_cast<const MergeResponse*>(
               &_MergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(MergeResponse* other);
  friend void swap(MergeResponse& a, MergeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MergeResponse* New() const final {
    return CreateMaybeMessage<MergeResponse>(NULL);
  }

  MergeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MergeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MergeResponse& from);
  void MergeFrom(const MergeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.MergeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TruncateLogRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TruncateLogRequest) */ {
 public:
  TruncateLogRequest();
  virtual ~TruncateLogRequest();

  TruncateLogRequest(const TruncateLogRequest& from);

  inline TruncateLogRequest& operator=(const TruncateLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TruncateLogRequest(TruncateLogRequest&& from) noexcept
    : TruncateLogRequest() {
    *this = ::std::move(from);
  }

  inline TruncateLogRequest& operator=(TruncateLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TruncateLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncateLogRequest* internal_default_instance() {
    return reinterpret_cast<const TruncateLogRequest*>(
               &_TruncateLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(TruncateLogRequest* other);
  friend void swap(TruncateLogRequest& a, TruncateLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TruncateLogRequest* New() const final {
    return CreateMaybeMessage<TruncateLogRequest>(NULL);
  }

  TruncateLogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TruncateLogRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TruncateLogRequest& from);
  void MergeFrom(const TruncateLogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TruncateLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // uint64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  void clear_range_id();
  static const int kRangeIdFieldNumber = 3;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TruncateLogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::int64 range_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TruncateLogResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TruncateLogResponse) */ {
 public:
  TruncateLogResponse();
  virtual ~TruncateLogResponse();

  TruncateLogResponse(const TruncateLogResponse& from);

  inline TruncateLogResponse& operator=(const TruncateLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TruncateLogResponse(TruncateLogResponse&& from) noexcept
    : TruncateLogResponse() {
    *this = ::std::move(from);
  }

  inline TruncateLogResponse& operator=(TruncateLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TruncateLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncateLogResponse* internal_default_instance() {
    return reinterpret_cast<const TruncateLogResponse*>(
               &_TruncateLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(TruncateLogResponse* other);
  friend void swap(TruncateLogResponse& a, TruncateLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TruncateLogResponse* New() const final {
    return CreateMaybeMessage<TruncateLogResponse>(NULL);
  }

  TruncateLogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TruncateLogResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TruncateLogResponse& from);
  void MergeFrom(const TruncateLogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TruncateLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TruncateLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestLeaseRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RequestLeaseRequest) */ {
 public:
  RequestLeaseRequest();
  virtual ~RequestLeaseRequest();

  RequestLeaseRequest(const RequestLeaseRequest& from);

  inline RequestLeaseRequest& operator=(const RequestLeaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestLeaseRequest(RequestLeaseRequest&& from) noexcept
    : RequestLeaseRequest() {
    *this = ::std::move(from);
  }

  inline RequestLeaseRequest& operator=(RequestLeaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RequestLeaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestLeaseRequest* internal_default_instance() {
    return reinterpret_cast<const RequestLeaseRequest*>(
               &_RequestLeaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(RequestLeaseRequest* other);
  friend void swap(RequestLeaseRequest& a, RequestLeaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestLeaseRequest* New() const final {
    return CreateMaybeMessage<RequestLeaseRequest>(NULL);
  }

  RequestLeaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestLeaseRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RequestLeaseRequest& from);
  void MergeFrom(const RequestLeaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestLeaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_lease() const;
  void clear_lease();
  static const int kLeaseFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Lease& _internal_lease() const;
  public:
  const ::cockroach::roachpb::Lease& lease() const;
  ::cockroach::roachpb::Lease* release_lease();
  ::cockroach::roachpb::Lease* mutable_lease();
  void set_allocated_lease(::cockroach::roachpb::Lease* lease);

  bool has_prev_lease() const;
  void clear_prev_lease();
  static const int kPrevLeaseFieldNumber = 3;
  private:
  const ::cockroach::roachpb::Lease& _internal_prev_lease() const;
  public:
  const ::cockroach::roachpb::Lease& prev_lease() const;
  ::cockroach::roachpb::Lease* release_prev_lease();
  ::cockroach::roachpb::Lease* mutable_prev_lease();
  void set_allocated_prev_lease(::cockroach::roachpb::Lease* prev_lease);

  bool has_min_proposed_ts() const;
  void clear_min_proposed_ts();
  static const int kMinProposedTsFieldNumber = 4;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_min_proposed_ts() const;
  public:
  const ::cockroach::util::hlc::Timestamp& min_proposed_ts() const;
  ::cockroach::util::hlc::Timestamp* release_min_proposed_ts();
  ::cockroach::util::hlc::Timestamp* mutable_min_proposed_ts();
  void set_allocated_min_proposed_ts(::cockroach::util::hlc::Timestamp* min_proposed_ts);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RequestLeaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Lease* lease_;
  ::cockroach::roachpb::Lease* prev_lease_;
  ::cockroach::util::hlc::Timestamp* min_proposed_ts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferLeaseRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TransferLeaseRequest) */ {
 public:
  TransferLeaseRequest();
  virtual ~TransferLeaseRequest();

  TransferLeaseRequest(const TransferLeaseRequest& from);

  inline TransferLeaseRequest& operator=(const TransferLeaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferLeaseRequest(TransferLeaseRequest&& from) noexcept
    : TransferLeaseRequest() {
    *this = ::std::move(from);
  }

  inline TransferLeaseRequest& operator=(TransferLeaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TransferLeaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferLeaseRequest* internal_default_instance() {
    return reinterpret_cast<const TransferLeaseRequest*>(
               &_TransferLeaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(TransferLeaseRequest* other);
  friend void swap(TransferLeaseRequest& a, TransferLeaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferLeaseRequest* New() const final {
    return CreateMaybeMessage<TransferLeaseRequest>(NULL);
  }

  TransferLeaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferLeaseRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TransferLeaseRequest& from);
  void MergeFrom(const TransferLeaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferLeaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_lease() const;
  void clear_lease();
  static const int kLeaseFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Lease& _internal_lease() const;
  public:
  const ::cockroach::roachpb::Lease& lease() const;
  ::cockroach::roachpb::Lease* release_lease();
  ::cockroach::roachpb::Lease* mutable_lease();
  void set_allocated_lease(::cockroach::roachpb::Lease* lease);

  bool has_prev_lease() const;
  void clear_prev_lease();
  static const int kPrevLeaseFieldNumber = 3;
  private:
  const ::cockroach::roachpb::Lease& _internal_prev_lease() const;
  public:
  const ::cockroach::roachpb::Lease& prev_lease() const;
  ::cockroach::roachpb::Lease* release_prev_lease();
  ::cockroach::roachpb::Lease* mutable_prev_lease();
  void set_allocated_prev_lease(::cockroach::roachpb::Lease* prev_lease);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransferLeaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Lease* lease_;
  ::cockroach::roachpb::Lease* prev_lease_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaseInfoRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.LeaseInfoRequest) */ {
 public:
  LeaseInfoRequest();
  virtual ~LeaseInfoRequest();

  LeaseInfoRequest(const LeaseInfoRequest& from);

  inline LeaseInfoRequest& operator=(const LeaseInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaseInfoRequest(LeaseInfoRequest&& from) noexcept
    : LeaseInfoRequest() {
    *this = ::std::move(from);
  }

  inline LeaseInfoRequest& operator=(LeaseInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LeaseInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseInfoRequest* internal_default_instance() {
    return reinterpret_cast<const LeaseInfoRequest*>(
               &_LeaseInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(LeaseInfoRequest* other);
  friend void swap(LeaseInfoRequest& a, LeaseInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaseInfoRequest* New() const final {
    return CreateMaybeMessage<LeaseInfoRequest>(NULL);
  }

  LeaseInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaseInfoRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LeaseInfoRequest& from);
  void MergeFrom(const LeaseInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaseInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.LeaseInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaseInfoResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.LeaseInfoResponse) */ {
 public:
  LeaseInfoResponse();
  virtual ~LeaseInfoResponse();

  LeaseInfoResponse(const LeaseInfoResponse& from);

  inline LeaseInfoResponse& operator=(const LeaseInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaseInfoResponse(LeaseInfoResponse&& from) noexcept
    : LeaseInfoResponse() {
    *this = ::std::move(from);
  }

  inline LeaseInfoResponse& operator=(LeaseInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LeaseInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseInfoResponse* internal_default_instance() {
    return reinterpret_cast<const LeaseInfoResponse*>(
               &_LeaseInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(LeaseInfoResponse* other);
  friend void swap(LeaseInfoResponse& a, LeaseInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaseInfoResponse* New() const final {
    return CreateMaybeMessage<LeaseInfoResponse>(NULL);
  }

  LeaseInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaseInfoResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LeaseInfoResponse& from);
  void MergeFrom(const LeaseInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaseInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_lease() const;
  void clear_lease();
  static const int kLeaseFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Lease& _internal_lease() const;
  public:
  const ::cockroach::roachpb::Lease& lease() const;
  ::cockroach::roachpb::Lease* release_lease();
  ::cockroach::roachpb::Lease* mutable_lease();
  void set_allocated_lease(::cockroach::roachpb::Lease* lease);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.LeaseInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::roachpb::Lease* lease_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestLeaseResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RequestLeaseResponse) */ {
 public:
  RequestLeaseResponse();
  virtual ~RequestLeaseResponse();

  RequestLeaseResponse(const RequestLeaseResponse& from);

  inline RequestLeaseResponse& operator=(const RequestLeaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestLeaseResponse(RequestLeaseResponse&& from) noexcept
    : RequestLeaseResponse() {
    *this = ::std::move(from);
  }

  inline RequestLeaseResponse& operator=(RequestLeaseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RequestLeaseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestLeaseResponse* internal_default_instance() {
    return reinterpret_cast<const RequestLeaseResponse*>(
               &_RequestLeaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(RequestLeaseResponse* other);
  friend void swap(RequestLeaseResponse& a, RequestLeaseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestLeaseResponse* New() const final {
    return CreateMaybeMessage<RequestLeaseResponse>(NULL);
  }

  RequestLeaseResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestLeaseResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RequestLeaseResponse& from);
  void MergeFrom(const RequestLeaseResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestLeaseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RequestLeaseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComputeChecksumRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ComputeChecksumRequest) */ {
 public:
  ComputeChecksumRequest();
  virtual ~ComputeChecksumRequest();

  ComputeChecksumRequest(const ComputeChecksumRequest& from);

  inline ComputeChecksumRequest& operator=(const ComputeChecksumRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComputeChecksumRequest(ComputeChecksumRequest&& from) noexcept
    : ComputeChecksumRequest() {
    *this = ::std::move(from);
  }

  inline ComputeChecksumRequest& operator=(ComputeChecksumRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ComputeChecksumRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComputeChecksumRequest* internal_default_instance() {
    return reinterpret_cast<const ComputeChecksumRequest*>(
               &_ComputeChecksumRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(ComputeChecksumRequest* other);
  friend void swap(ComputeChecksumRequest& a, ComputeChecksumRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComputeChecksumRequest* New() const final {
    return CreateMaybeMessage<ComputeChecksumRequest>(NULL);
  }

  ComputeChecksumRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ComputeChecksumRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ComputeChecksumRequest& from);
  void MergeFrom(const ComputeChecksumRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComputeChecksumRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // .cockroach.roachpb.ChecksumMode mode = 5;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::cockroach::roachpb::ChecksumMode mode() const;
  void set_mode(::cockroach::roachpb::ChecksumMode value);

  // bool snapshot = 4;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 4;
  bool snapshot() const;
  void set_snapshot(bool value);

  // bool checkpoint = 6;
  void clear_checkpoint();
  static const int kCheckpointFieldNumber = 6;
  bool checkpoint() const;
  void set_checkpoint(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ComputeChecksumRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::google::protobuf::uint32 version_;
  int mode_;
  bool snapshot_;
  bool checkpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComputeChecksumResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ComputeChecksumResponse) */ {
 public:
  ComputeChecksumResponse();
  virtual ~ComputeChecksumResponse();

  ComputeChecksumResponse(const ComputeChecksumResponse& from);

  inline ComputeChecksumResponse& operator=(const ComputeChecksumResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComputeChecksumResponse(ComputeChecksumResponse&& from) noexcept
    : ComputeChecksumResponse() {
    *this = ::std::move(from);
  }

  inline ComputeChecksumResponse& operator=(ComputeChecksumResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ComputeChecksumResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComputeChecksumResponse* internal_default_instance() {
    return reinterpret_cast<const ComputeChecksumResponse*>(
               &_ComputeChecksumResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(ComputeChecksumResponse* other);
  friend void swap(ComputeChecksumResponse& a, ComputeChecksumResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComputeChecksumResponse* New() const final {
    return CreateMaybeMessage<ComputeChecksumResponse>(NULL);
  }

  ComputeChecksumResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ComputeChecksumResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ComputeChecksumResponse& from);
  void MergeFrom(const ComputeChecksumResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComputeChecksumResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_checksum_id();
  static const int kChecksumIdFieldNumber = 2;
  const ::std::string& checksum_id() const;
  void set_checksum_id(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum_id(::std::string&& value);
  #endif
  void set_checksum_id(const char* value);
  void set_checksum_id(const void* value, size_t size);
  ::std::string* mutable_checksum_id();
  ::std::string* release_checksum_id();
  void set_allocated_checksum_id(::std::string* checksum_id);

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ComputeChecksumResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr checksum_id_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalStorage_LocalFilePath : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExternalStorage.LocalFilePath) */ {
 public:
  ExternalStorage_LocalFilePath();
  virtual ~ExternalStorage_LocalFilePath();

  ExternalStorage_LocalFilePath(const ExternalStorage_LocalFilePath& from);

  inline ExternalStorage_LocalFilePath& operator=(const ExternalStorage_LocalFilePath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalStorage_LocalFilePath(ExternalStorage_LocalFilePath&& from) noexcept
    : ExternalStorage_LocalFilePath() {
    *this = ::std::move(from);
  }

  inline ExternalStorage_LocalFilePath& operator=(ExternalStorage_LocalFilePath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExternalStorage_LocalFilePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalStorage_LocalFilePath* internal_default_instance() {
    return reinterpret_cast<const ExternalStorage_LocalFilePath*>(
               &_ExternalStorage_LocalFilePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(ExternalStorage_LocalFilePath* other);
  friend void swap(ExternalStorage_LocalFilePath& a, ExternalStorage_LocalFilePath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalStorage_LocalFilePath* New() const final {
    return CreateMaybeMessage<ExternalStorage_LocalFilePath>(NULL);
  }

  ExternalStorage_LocalFilePath* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalStorage_LocalFilePath>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExternalStorage_LocalFilePath& from);
  void MergeFrom(const ExternalStorage_LocalFilePath& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExternalStorage_LocalFilePath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint32 node_id() const;
  void set_node_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExternalStorage.LocalFilePath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalStorage_Http : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExternalStorage.Http) */ {
 public:
  ExternalStorage_Http();
  virtual ~ExternalStorage_Http();

  ExternalStorage_Http(const ExternalStorage_Http& from);

  inline ExternalStorage_Http& operator=(const ExternalStorage_Http& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalStorage_Http(ExternalStorage_Http&& from) noexcept
    : ExternalStorage_Http() {
    *this = ::std::move(from);
  }

  inline ExternalStorage_Http& operator=(ExternalStorage_Http&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExternalStorage_Http& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalStorage_Http* internal_default_instance() {
    return reinterpret_cast<const ExternalStorage_Http*>(
               &_ExternalStorage_Http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(ExternalStorage_Http* other);
  friend void swap(ExternalStorage_Http& a, ExternalStorage_Http& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalStorage_Http* New() const final {
    return CreateMaybeMessage<ExternalStorage_Http>(NULL);
  }

  ExternalStorage_Http* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalStorage_Http>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExternalStorage_Http& from);
  void MergeFrom(const ExternalStorage_Http& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExternalStorage_Http* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string baseUri = 1;
  void clear_baseuri();
  static const int kBaseUriFieldNumber = 1;
  const ::std::string& baseuri() const;
  void set_baseuri(const ::std::string& value);
  #if LANG_CXX11
  void set_baseuri(::std::string&& value);
  #endif
  void set_baseuri(const char* value);
  void set_baseuri(const char* value, size_t size);
  ::std::string* mutable_baseuri();
  ::std::string* release_baseuri();
  void set_allocated_baseuri(::std::string* baseuri);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExternalStorage.Http)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr baseuri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalStorage_S3 : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExternalStorage.S3) */ {
 public:
  ExternalStorage_S3();
  virtual ~ExternalStorage_S3();

  ExternalStorage_S3(const ExternalStorage_S3& from);

  inline ExternalStorage_S3& operator=(const ExternalStorage_S3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalStorage_S3(ExternalStorage_S3&& from) noexcept
    : ExternalStorage_S3() {
    *this = ::std::move(from);
  }

  inline ExternalStorage_S3& operator=(ExternalStorage_S3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExternalStorage_S3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalStorage_S3* internal_default_instance() {
    return reinterpret_cast<const ExternalStorage_S3*>(
               &_ExternalStorage_S3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(ExternalStorage_S3* other);
  friend void swap(ExternalStorage_S3& a, ExternalStorage_S3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalStorage_S3* New() const final {
    return CreateMaybeMessage<ExternalStorage_S3>(NULL);
  }

  ExternalStorage_S3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalStorage_S3>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExternalStorage_S3& from);
  void MergeFrom(const ExternalStorage_S3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExternalStorage_S3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // string prefix = 2;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string access_key = 3;
  void clear_access_key();
  static const int kAccessKeyFieldNumber = 3;
  const ::std::string& access_key() const;
  void set_access_key(const ::std::string& value);
  #if LANG_CXX11
  void set_access_key(::std::string&& value);
  #endif
  void set_access_key(const char* value);
  void set_access_key(const char* value, size_t size);
  ::std::string* mutable_access_key();
  ::std::string* release_access_key();
  void set_allocated_access_key(::std::string* access_key);

  // string secret = 4;
  void clear_secret();
  static const int kSecretFieldNumber = 4;
  const ::std::string& secret() const;
  void set_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_secret(::std::string&& value);
  #endif
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  ::std::string* mutable_secret();
  ::std::string* release_secret();
  void set_allocated_secret(::std::string* secret);

  // string temp_token = 5;
  void clear_temp_token();
  static const int kTempTokenFieldNumber = 5;
  const ::std::string& temp_token() const;
  void set_temp_token(const ::std::string& value);
  #if LANG_CXX11
  void set_temp_token(::std::string&& value);
  #endif
  void set_temp_token(const char* value);
  void set_temp_token(const char* value, size_t size);
  ::std::string* mutable_temp_token();
  ::std::string* release_temp_token();
  void set_allocated_temp_token(::std::string* temp_token);

  // string endpoint = 6;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 6;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // string region = 7;
  void clear_region();
  static const int kRegionFieldNumber = 7;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string auth = 8;
  void clear_auth();
  static const int kAuthFieldNumber = 8;
  const ::std::string& auth() const;
  void set_auth(const ::std::string& value);
  #if LANG_CXX11
  void set_auth(::std::string&& value);
  #endif
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  ::std::string* mutable_auth();
  ::std::string* release_auth();
  void set_allocated_auth(::std::string* auth);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExternalStorage.S3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr access_key_;
  ::google::protobuf::internal::ArenaStringPtr secret_;
  ::google::protobuf::internal::ArenaStringPtr temp_token_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalStorage_GCS : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExternalStorage.GCS) */ {
 public:
  ExternalStorage_GCS();
  virtual ~ExternalStorage_GCS();

  ExternalStorage_GCS(const ExternalStorage_GCS& from);

  inline ExternalStorage_GCS& operator=(const ExternalStorage_GCS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalStorage_GCS(ExternalStorage_GCS&& from) noexcept
    : ExternalStorage_GCS() {
    *this = ::std::move(from);
  }

  inline ExternalStorage_GCS& operator=(ExternalStorage_GCS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExternalStorage_GCS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalStorage_GCS* internal_default_instance() {
    return reinterpret_cast<const ExternalStorage_GCS*>(
               &_ExternalStorage_GCS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(ExternalStorage_GCS* other);
  friend void swap(ExternalStorage_GCS& a, ExternalStorage_GCS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalStorage_GCS* New() const final {
    return CreateMaybeMessage<ExternalStorage_GCS>(NULL);
  }

  ExternalStorage_GCS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalStorage_GCS>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExternalStorage_GCS& from);
  void MergeFrom(const ExternalStorage_GCS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExternalStorage_GCS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // string prefix = 2;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string auth = 3;
  void clear_auth();
  static const int kAuthFieldNumber = 3;
  const ::std::string& auth() const;
  void set_auth(const ::std::string& value);
  #if LANG_CXX11
  void set_auth(::std::string&& value);
  #endif
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  ::std::string* mutable_auth();
  ::std::string* release_auth();
  void set_allocated_auth(::std::string* auth);

  // string billing_project = 4;
  void clear_billing_project();
  static const int kBillingProjectFieldNumber = 4;
  const ::std::string& billing_project() const;
  void set_billing_project(const ::std::string& value);
  #if LANG_CXX11
  void set_billing_project(::std::string&& value);
  #endif
  void set_billing_project(const char* value);
  void set_billing_project(const char* value, size_t size);
  ::std::string* mutable_billing_project();
  ::std::string* release_billing_project();
  void set_allocated_billing_project(::std::string* billing_project);

  // string credentials = 5;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 5;
  const ::std::string& credentials() const;
  void set_credentials(const ::std::string& value);
  #if LANG_CXX11
  void set_credentials(::std::string&& value);
  #endif
  void set_credentials(const char* value);
  void set_credentials(const char* value, size_t size);
  ::std::string* mutable_credentials();
  ::std::string* release_credentials();
  void set_allocated_credentials(::std::string* credentials);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExternalStorage.GCS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr auth_;
  ::google::protobuf::internal::ArenaStringPtr billing_project_;
  ::google::protobuf::internal::ArenaStringPtr credentials_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalStorage_Azure : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExternalStorage.Azure) */ {
 public:
  ExternalStorage_Azure();
  virtual ~ExternalStorage_Azure();

  ExternalStorage_Azure(const ExternalStorage_Azure& from);

  inline ExternalStorage_Azure& operator=(const ExternalStorage_Azure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalStorage_Azure(ExternalStorage_Azure&& from) noexcept
    : ExternalStorage_Azure() {
    *this = ::std::move(from);
  }

  inline ExternalStorage_Azure& operator=(ExternalStorage_Azure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExternalStorage_Azure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalStorage_Azure* internal_default_instance() {
    return reinterpret_cast<const ExternalStorage_Azure*>(
               &_ExternalStorage_Azure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(ExternalStorage_Azure* other);
  friend void swap(ExternalStorage_Azure& a, ExternalStorage_Azure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalStorage_Azure* New() const final {
    return CreateMaybeMessage<ExternalStorage_Azure>(NULL);
  }

  ExternalStorage_Azure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalStorage_Azure>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExternalStorage_Azure& from);
  void MergeFrom(const ExternalStorage_Azure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExternalStorage_Azure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string container = 1;
  void clear_container();
  static const int kContainerFieldNumber = 1;
  const ::std::string& container() const;
  void set_container(const ::std::string& value);
  #if LANG_CXX11
  void set_container(::std::string&& value);
  #endif
  void set_container(const char* value);
  void set_container(const char* value, size_t size);
  ::std::string* mutable_container();
  ::std::string* release_container();
  void set_allocated_container(::std::string* container);

  // string prefix = 2;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string account_name = 3;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 3;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // string account_key = 4;
  void clear_account_key();
  static const int kAccountKeyFieldNumber = 4;
  const ::std::string& account_key() const;
  void set_account_key(const ::std::string& value);
  #if LANG_CXX11
  void set_account_key(::std::string&& value);
  #endif
  void set_account_key(const char* value);
  void set_account_key(const char* value, size_t size);
  ::std::string* mutable_account_key();
  ::std::string* release_account_key();
  void set_allocated_account_key(::std::string* account_key);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExternalStorage.Azure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr container_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr account_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalStorage_Workload : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExternalStorage.Workload) */ {
 public:
  ExternalStorage_Workload();
  virtual ~ExternalStorage_Workload();

  ExternalStorage_Workload(const ExternalStorage_Workload& from);

  inline ExternalStorage_Workload& operator=(const ExternalStorage_Workload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalStorage_Workload(ExternalStorage_Workload&& from) noexcept
    : ExternalStorage_Workload() {
    *this = ::std::move(from);
  }

  inline ExternalStorage_Workload& operator=(ExternalStorage_Workload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExternalStorage_Workload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalStorage_Workload* internal_default_instance() {
    return reinterpret_cast<const ExternalStorage_Workload*>(
               &_ExternalStorage_Workload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(ExternalStorage_Workload* other);
  friend void swap(ExternalStorage_Workload& a, ExternalStorage_Workload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalStorage_Workload* New() const final {
    return CreateMaybeMessage<ExternalStorage_Workload>(NULL);
  }

  ExternalStorage_Workload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalStorage_Workload>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExternalStorage_Workload& from);
  void MergeFrom(const ExternalStorage_Workload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExternalStorage_Workload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string flags = 4;
  int flags_size() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 4;
  const ::std::string& flags(int index) const;
  ::std::string* mutable_flags(int index);
  void set_flags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_flags(int index, ::std::string&& value);
  #endif
  void set_flags(int index, const char* value);
  void set_flags(int index, const char* value, size_t size);
  ::std::string* add_flags();
  void add_flags(const ::std::string& value);
  #if LANG_CXX11
  void add_flags(::std::string&& value);
  #endif
  void add_flags(const char* value);
  void add_flags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& flags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_flags();

  // string generator = 1;
  void clear_generator();
  static const int kGeneratorFieldNumber = 1;
  const ::std::string& generator() const;
  void set_generator(const ::std::string& value);
  #if LANG_CXX11
  void set_generator(::std::string&& value);
  #endif
  void set_generator(const char* value);
  void set_generator(const char* value, size_t size);
  ::std::string* mutable_generator();
  ::std::string* release_generator();
  void set_allocated_generator(::std::string* generator);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string table = 3;
  void clear_table();
  static const int kTableFieldNumber = 3;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string format = 5;
  void clear_format();
  static const int kFormatFieldNumber = 5;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // int64 batch_begin = 6;
  void clear_batch_begin();
  static const int kBatchBeginFieldNumber = 6;
  ::google::protobuf::int64 batch_begin() const;
  void set_batch_begin(::google::protobuf::int64 value);

  // int64 batch_end = 7;
  void clear_batch_end();
  static const int kBatchEndFieldNumber = 7;
  ::google::protobuf::int64 batch_end() const;
  void set_batch_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExternalStorage.Workload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> flags_;
  ::google::protobuf::internal::ArenaStringPtr generator_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::int64 batch_begin_;
  ::google::protobuf::int64 batch_end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalStorage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExternalStorage) */ {
 public:
  ExternalStorage();
  virtual ~ExternalStorage();

  ExternalStorage(const ExternalStorage& from);

  inline ExternalStorage& operator=(const ExternalStorage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalStorage(ExternalStorage&& from) noexcept
    : ExternalStorage() {
    *this = ::std::move(from);
  }

  inline ExternalStorage& operator=(ExternalStorage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExternalStorage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalStorage* internal_default_instance() {
    return reinterpret_cast<const ExternalStorage*>(
               &_ExternalStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(ExternalStorage* other);
  friend void swap(ExternalStorage& a, ExternalStorage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalStorage* New() const final {
    return CreateMaybeMessage<ExternalStorage>(NULL);
  }

  ExternalStorage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalStorage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExternalStorage& from);
  void MergeFrom(const ExternalStorage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExternalStorage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExternalStorage_LocalFilePath LocalFilePath;
  typedef ExternalStorage_Http Http;
  typedef ExternalStorage_S3 S3;
  typedef ExternalStorage_GCS GCS;
  typedef ExternalStorage_Azure Azure;
  typedef ExternalStorage_Workload Workload;

  // accessors -------------------------------------------------------

  bool has_localfile() const;
  void clear_localfile();
  static const int kLocalFileFieldNumber = 2;
  private:
  const ::cockroach::roachpb::ExternalStorage_LocalFilePath& _internal_localfile() const;
  public:
  const ::cockroach::roachpb::ExternalStorage_LocalFilePath& localfile() const;
  ::cockroach::roachpb::ExternalStorage_LocalFilePath* release_localfile();
  ::cockroach::roachpb::ExternalStorage_LocalFilePath* mutable_localfile();
  void set_allocated_localfile(::cockroach::roachpb::ExternalStorage_LocalFilePath* localfile);

  bool has_httppath() const;
  void clear_httppath();
  static const int kHttpPathFieldNumber = 3;
  private:
  const ::cockroach::roachpb::ExternalStorage_Http& _internal_httppath() const;
  public:
  const ::cockroach::roachpb::ExternalStorage_Http& httppath() const;
  ::cockroach::roachpb::ExternalStorage_Http* release_httppath();
  ::cockroach::roachpb::ExternalStorage_Http* mutable_httppath();
  void set_allocated_httppath(::cockroach::roachpb::ExternalStorage_Http* httppath);

  // .cockroach.roachpb.ExternalStorage.GCS GoogleCloudConfig = 4;
  bool has_googlecloudconfig() const;
  void clear_googlecloudconfig();
  static const int kGoogleCloudConfigFieldNumber = 4;
  private:
  const ::cockroach::roachpb::ExternalStorage_GCS& _internal_googlecloudconfig() const;
  public:
  const ::cockroach::roachpb::ExternalStorage_GCS& googlecloudconfig() const;
  ::cockroach::roachpb::ExternalStorage_GCS* release_googlecloudconfig();
  ::cockroach::roachpb::ExternalStorage_GCS* mutable_googlecloudconfig();
  void set_allocated_googlecloudconfig(::cockroach::roachpb::ExternalStorage_GCS* googlecloudconfig);

  // .cockroach.roachpb.ExternalStorage.S3 S3Config = 5;
  bool has_s3config() const;
  void clear_s3config();
  static const int kS3ConfigFieldNumber = 5;
  private:
  const ::cockroach::roachpb::ExternalStorage_S3& _internal_s3config() const;
  public:
  const ::cockroach::roachpb::ExternalStorage_S3& s3config() const;
  ::cockroach::roachpb::ExternalStorage_S3* release_s3config();
  ::cockroach::roachpb::ExternalStorage_S3* mutable_s3config();
  void set_allocated_s3config(::cockroach::roachpb::ExternalStorage_S3* s3config);

  // .cockroach.roachpb.ExternalStorage.Azure AzureConfig = 6;
  bool has_azureconfig() const;
  void clear_azureconfig();
  static const int kAzureConfigFieldNumber = 6;
  private:
  const ::cockroach::roachpb::ExternalStorage_Azure& _internal_azureconfig() const;
  public:
  const ::cockroach::roachpb::ExternalStorage_Azure& azureconfig() const;
  ::cockroach::roachpb::ExternalStorage_Azure* release_azureconfig();
  ::cockroach::roachpb::ExternalStorage_Azure* mutable_azureconfig();
  void set_allocated_azureconfig(::cockroach::roachpb::ExternalStorage_Azure* azureconfig);

  // .cockroach.roachpb.ExternalStorage.Workload WorkloadConfig = 7;
  bool has_workloadconfig() const;
  void clear_workloadconfig();
  static const int kWorkloadConfigFieldNumber = 7;
  private:
  const ::cockroach::roachpb::ExternalStorage_Workload& _internal_workloadconfig() const;
  public:
  const ::cockroach::roachpb::ExternalStorage_Workload& workloadconfig() const;
  ::cockroach::roachpb::ExternalStorage_Workload* release_workloadconfig();
  ::cockroach::roachpb::ExternalStorage_Workload* mutable_workloadconfig();
  void set_allocated_workloadconfig(::cockroach::roachpb::ExternalStorage_Workload* workloadconfig);

  // .cockroach.roachpb.ExternalStorageProvider provider = 1;
  void clear_provider();
  static const int kProviderFieldNumber = 1;
  ::cockroach::roachpb::ExternalStorageProvider provider() const;
  void set_provider(::cockroach::roachpb::ExternalStorageProvider value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExternalStorage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ExternalStorage_LocalFilePath* localfile_;
  ::cockroach::roachpb::ExternalStorage_Http* httppath_;
  ::cockroach::roachpb::ExternalStorage_GCS* googlecloudconfig_;
  ::cockroach::roachpb::ExternalStorage_S3* s3config_;
  ::cockroach::roachpb::ExternalStorage_Azure* azureconfig_;
  ::cockroach::roachpb::ExternalStorage_Workload* workloadconfig_;
  int provider_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteBatchRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.WriteBatchRequest) */ {
 public:
  WriteBatchRequest();
  virtual ~WriteBatchRequest();

  WriteBatchRequest(const WriteBatchRequest& from);

  inline WriteBatchRequest& operator=(const WriteBatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteBatchRequest(WriteBatchRequest&& from) noexcept
    : WriteBatchRequest() {
    *this = ::std::move(from);
  }

  inline WriteBatchRequest& operator=(WriteBatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const WriteBatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteBatchRequest* internal_default_instance() {
    return reinterpret_cast<const WriteBatchRequest*>(
               &_WriteBatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(WriteBatchRequest* other);
  friend void swap(WriteBatchRequest& a, WriteBatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteBatchRequest* New() const final {
    return CreateMaybeMessage<WriteBatchRequest>(NULL);
  }

  WriteBatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteBatchRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const WriteBatchRequest& from);
  void MergeFrom(const WriteBatchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteBatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_data_span() const;
  void clear_data_span();
  static const int kDataSpanFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Span& _internal_data_span() const;
  public:
  const ::cockroach::roachpb::Span& data_span() const;
  ::cockroach::roachpb::Span* release_data_span();
  ::cockroach::roachpb::Span* mutable_data_span();
  void set_allocated_data_span(::cockroach::roachpb::Span* data_span);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.WriteBatchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Span* data_span_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteBatchResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.WriteBatchResponse) */ {
 public:
  WriteBatchResponse();
  virtual ~WriteBatchResponse();

  WriteBatchResponse(const WriteBatchResponse& from);

  inline WriteBatchResponse& operator=(const WriteBatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteBatchResponse(WriteBatchResponse&& from) noexcept
    : WriteBatchResponse() {
    *this = ::std::move(from);
  }

  inline WriteBatchResponse& operator=(WriteBatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const WriteBatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteBatchResponse* internal_default_instance() {
    return reinterpret_cast<const WriteBatchResponse*>(
               &_WriteBatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(WriteBatchResponse* other);
  friend void swap(WriteBatchResponse& a, WriteBatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteBatchResponse* New() const final {
    return CreateMaybeMessage<WriteBatchResponse>(NULL);
  }

  WriteBatchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteBatchResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const WriteBatchResponse& from);
  void MergeFrom(const WriteBatchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteBatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.WriteBatchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExportRequest_StorageByLocalityKvEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<ExportRequest_StorageByLocalityKvEntry_DoNotUse, 
    ::std::string, ::cockroach::roachpb::ExternalStorage,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<ExportRequest_StorageByLocalityKvEntry_DoNotUse, 
    ::std::string, ::cockroach::roachpb::ExternalStorage,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ExportRequest_StorageByLocalityKvEntry_DoNotUse();
  ExportRequest_StorageByLocalityKvEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ExportRequest_StorageByLocalityKvEntry_DoNotUse& other);
  static const ExportRequest_StorageByLocalityKvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExportRequest_StorageByLocalityKvEntry_DoNotUse*>(&_ExportRequest_StorageByLocalityKvEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class ExportRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExportRequest) */ {
 public:
  ExportRequest();
  virtual ~ExportRequest();

  ExportRequest(const ExportRequest& from);

  inline ExportRequest& operator=(const ExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExportRequest(ExportRequest&& from) noexcept
    : ExportRequest() {
    *this = ::std::move(from);
  }

  inline ExportRequest& operator=(ExportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportRequest* internal_default_instance() {
    return reinterpret_cast<const ExportRequest*>(
               &_ExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(ExportRequest* other);
  friend void swap(ExportRequest& a, ExportRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExportRequest* New() const final {
    return CreateMaybeMessage<ExportRequest>(NULL);
  }

  ExportRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExportRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExportRequest& from);
  void MergeFrom(const ExportRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  int storage_by_locality_kv_size() const;
  void clear_storage_by_locality_kv();
  static const int kStorageByLocalityKvFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >&
      storage_by_locality_kv() const;
  ::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >*
      mutable_storage_by_locality_kv();

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_storage() const;
  void clear_storage();
  static const int kStorageFieldNumber = 2;
  private:
  const ::cockroach::roachpb::ExternalStorage& _internal_storage() const;
  public:
  const ::cockroach::roachpb::ExternalStorage& storage() const;
  ::cockroach::roachpb::ExternalStorage* release_storage();
  ::cockroach::roachpb::ExternalStorage* mutable_storage();
  void set_allocated_storage(::cockroach::roachpb::ExternalStorage* storage);

  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_start_time() const;
  public:
  const ::cockroach::util::hlc::Timestamp& start_time() const;
  ::cockroach::util::hlc::Timestamp* release_start_time();
  ::cockroach::util::hlc::Timestamp* mutable_start_time();
  void set_allocated_start_time(::cockroach::util::hlc::Timestamp* start_time);

  void clear_mvcc_filter();
  static const int kMvccFilterFieldNumber = 4;
  ::cockroach::roachpb::MVCCFilter mvcc_filter() const;
  void set_mvcc_filter(::cockroach::roachpb::MVCCFilter value);

  void clear_return_sst();
  static const int kReturnSstFieldNumber = 5;
  bool return_sst() const;
  void set_return_sst(bool value);

  // bool omit_checksum = 6;
  void clear_omit_checksum();
  static const int kOmitChecksumFieldNumber = 6;
  bool omit_checksum() const;
  void set_omit_checksum(bool value);

  // bool enable_time_bound_iterator_optimization = 7;
  void clear_enable_time_bound_iterator_optimization();
  static const int kEnableTimeBoundIteratorOptimizationFieldNumber = 7;
  bool enable_time_bound_iterator_optimization() const;
  void set_enable_time_bound_iterator_optimization(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExportRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      ExportRequest_StorageByLocalityKvEntry_DoNotUse,
      ::std::string, ::cockroach::roachpb::ExternalStorage,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > storage_by_locality_kv_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::ExternalStorage* storage_;
  ::cockroach::util::hlc::Timestamp* start_time_;
  int mvcc_filter_;
  bool return_sst_;
  bool omit_checksum_;
  bool enable_time_bound_iterator_optimization_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulkOpSummary : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.BulkOpSummary) */ {
 public:
  BulkOpSummary();
  virtual ~BulkOpSummary();

  BulkOpSummary(const BulkOpSummary& from);

  inline BulkOpSummary& operator=(const BulkOpSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulkOpSummary(BulkOpSummary&& from) noexcept
    : BulkOpSummary() {
    *this = ::std::move(from);
  }

  inline BulkOpSummary& operator=(BulkOpSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const BulkOpSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkOpSummary* internal_default_instance() {
    return reinterpret_cast<const BulkOpSummary*>(
               &_BulkOpSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(BulkOpSummary* other);
  friend void swap(BulkOpSummary& a, BulkOpSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulkOpSummary* New() const final {
    return CreateMaybeMessage<BulkOpSummary>(NULL);
  }

  BulkOpSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulkOpSummary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BulkOpSummary& from);
  void MergeFrom(const BulkOpSummary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BulkOpSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 data_size = 1;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 1;
  ::google::protobuf::int64 data_size() const;
  void set_data_size(::google::protobuf::int64 value);

  // int64 rows = 2;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::google::protobuf::int64 rows() const;
  void set_rows(::google::protobuf::int64 value);

  // int64 index_entries = 3;
  void clear_index_entries();
  static const int kIndexEntriesFieldNumber = 3;
  ::google::protobuf::int64 index_entries() const;
  void set_index_entries(::google::protobuf::int64 value);

  // int64 system_records = 4;
  void clear_system_records();
  static const int kSystemRecordsFieldNumber = 4;
  ::google::protobuf::int64 system_records() const;
  void set_system_records(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.BulkOpSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 data_size_;
  ::google::protobuf::int64 rows_;
  ::google::protobuf::int64 index_entries_;
  ::google::protobuf::int64 system_records_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExportResponse_File : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExportResponse.File) */ {
 public:
  ExportResponse_File();
  virtual ~ExportResponse_File();

  ExportResponse_File(const ExportResponse_File& from);

  inline ExportResponse_File& operator=(const ExportResponse_File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExportResponse_File(ExportResponse_File&& from) noexcept
    : ExportResponse_File() {
    *this = ::std::move(from);
  }

  inline ExportResponse_File& operator=(ExportResponse_File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExportResponse_File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportResponse_File* internal_default_instance() {
    return reinterpret_cast<const ExportResponse_File*>(
               &_ExportResponse_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(ExportResponse_File* other);
  friend void swap(ExportResponse_File& a, ExportResponse_File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExportResponse_File* New() const final {
    return CreateMaybeMessage<ExportResponse_File>(NULL);
  }

  ExportResponse_File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExportResponse_File>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExportResponse_File& from);
  void MergeFrom(const ExportResponse_File& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportResponse_File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes sha512 = 5;
  void clear_sha512();
  static const int kSha512FieldNumber = 5;
  const ::std::string& sha512() const;
  void set_sha512(const ::std::string& value);
  #if LANG_CXX11
  void set_sha512(::std::string&& value);
  #endif
  void set_sha512(const char* value);
  void set_sha512(const void* value, size_t size);
  ::std::string* mutable_sha512();
  ::std::string* release_sha512();
  void set_allocated_sha512(::std::string* sha512);

  void clear_sst();
  static const int kSstFieldNumber = 7;
  const ::std::string& sst() const;
  void set_sst(const ::std::string& value);
  #if LANG_CXX11
  void set_sst(::std::string&& value);
  #endif
  void set_sst(const char* value);
  void set_sst(const void* value, size_t size);
  ::std::string* mutable_sst();
  ::std::string* release_sst();
  void set_allocated_sst(::std::string* sst);

  void clear_locality_kv();
  static const int kLocalityKvFieldNumber = 8;
  const ::std::string& locality_kv() const;
  void set_locality_kv(const ::std::string& value);
  #if LANG_CXX11
  void set_locality_kv(::std::string&& value);
  #endif
  void set_locality_kv(const char* value);
  void set_locality_kv(const char* value, size_t size);
  ::std::string* mutable_locality_kv();
  ::std::string* release_locality_kv();
  void set_allocated_locality_kv(::std::string* locality_kv);

  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 1;
  private:
  const ::cockroach::roachpb::Span& _internal_span() const;
  public:
  const ::cockroach::roachpb::Span& span() const;
  ::cockroach::roachpb::Span* release_span();
  ::cockroach::roachpb::Span* mutable_span();
  void set_allocated_span(::cockroach::roachpb::Span* span);

  bool has_exported() const;
  void clear_exported();
  static const int kExportedFieldNumber = 6;
  private:
  const ::cockroach::roachpb::BulkOpSummary& _internal_exported() const;
  public:
  const ::cockroach::roachpb::BulkOpSummary& exported() const;
  ::cockroach::roachpb::BulkOpSummary* release_exported();
  ::cockroach::roachpb::BulkOpSummary* mutable_exported();
  void set_allocated_exported(::cockroach::roachpb::BulkOpSummary* exported);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExportResponse.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr sha512_;
  ::google::protobuf::internal::ArenaStringPtr sst_;
  ::google::protobuf::internal::ArenaStringPtr locality_kv_;
  ::cockroach::roachpb::Span* span_;
  ::cockroach::roachpb::BulkOpSummary* exported_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExportResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ExportResponse) */ {
 public:
  ExportResponse();
  virtual ~ExportResponse();

  ExportResponse(const ExportResponse& from);

  inline ExportResponse& operator=(const ExportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExportResponse(ExportResponse&& from) noexcept
    : ExportResponse() {
    *this = ::std::move(from);
  }

  inline ExportResponse& operator=(ExportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ExportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportResponse* internal_default_instance() {
    return reinterpret_cast<const ExportResponse*>(
               &_ExportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(ExportResponse* other);
  friend void swap(ExportResponse& a, ExportResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExportResponse* New() const final {
    return CreateMaybeMessage<ExportResponse>(NULL);
  }

  ExportResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExportResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ExportResponse& from);
  void MergeFrom(const ExportResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExportResponse_File File;

  // accessors -------------------------------------------------------

  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 2;
  ::cockroach::roachpb::ExportResponse_File* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ExportResponse_File >*
      mutable_files();
  const ::cockroach::roachpb::ExportResponse_File& files(int index) const;
  ::cockroach::roachpb::ExportResponse_File* add_files();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ExportResponse_File >&
      files() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_start_time() const;
  public:
  const ::cockroach::util::hlc::Timestamp& start_time() const;
  ::cockroach::util::hlc::Timestamp* release_start_time();
  ::cockroach::util::hlc::Timestamp* mutable_start_time();
  void set_allocated_start_time(::cockroach::util::hlc::Timestamp* start_time);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExportResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ExportResponse_File > files_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::util::hlc::Timestamp* start_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportRequest_File : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ImportRequest.File) */ {
 public:
  ImportRequest_File();
  virtual ~ImportRequest_File();

  ImportRequest_File(const ImportRequest_File& from);

  inline ImportRequest_File& operator=(const ImportRequest_File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImportRequest_File(ImportRequest_File&& from) noexcept
    : ImportRequest_File() {
    *this = ::std::move(from);
  }

  inline ImportRequest_File& operator=(ImportRequest_File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ImportRequest_File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportRequest_File* internal_default_instance() {
    return reinterpret_cast<const ImportRequest_File*>(
               &_ImportRequest_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(ImportRequest_File* other);
  friend void swap(ImportRequest_File& a, ImportRequest_File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImportRequest_File* New() const final {
    return CreateMaybeMessage<ImportRequest_File>(NULL);
  }

  ImportRequest_File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImportRequest_File>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ImportRequest_File& from);
  void MergeFrom(const ImportRequest_File& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportRequest_File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes sha512 = 4;
  void clear_sha512();
  static const int kSha512FieldNumber = 4;
  const ::std::string& sha512() const;
  void set_sha512(const ::std::string& value);
  #if LANG_CXX11
  void set_sha512(::std::string&& value);
  #endif
  void set_sha512(const char* value);
  void set_sha512(const void* value, size_t size);
  ::std::string* mutable_sha512();
  ::std::string* release_sha512();
  void set_allocated_sha512(::std::string* sha512);

  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ExternalStorage& _internal_dir() const;
  public:
  const ::cockroach::roachpb::ExternalStorage& dir() const;
  ::cockroach::roachpb::ExternalStorage* release_dir();
  ::cockroach::roachpb::ExternalStorage* mutable_dir();
  void set_allocated_dir(::cockroach::roachpb::ExternalStorage* dir);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ImportRequest.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr sha512_;
  ::cockroach::roachpb::ExternalStorage* dir_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportRequest_TableRekey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ImportRequest.TableRekey) */ {
 public:
  ImportRequest_TableRekey();
  virtual ~ImportRequest_TableRekey();

  ImportRequest_TableRekey(const ImportRequest_TableRekey& from);

  inline ImportRequest_TableRekey& operator=(const ImportRequest_TableRekey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImportRequest_TableRekey(ImportRequest_TableRekey&& from) noexcept
    : ImportRequest_TableRekey() {
    *this = ::std::move(from);
  }

  inline ImportRequest_TableRekey& operator=(ImportRequest_TableRekey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ImportRequest_TableRekey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportRequest_TableRekey* internal_default_instance() {
    return reinterpret_cast<const ImportRequest_TableRekey*>(
               &_ImportRequest_TableRekey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(ImportRequest_TableRekey* other);
  friend void swap(ImportRequest_TableRekey& a, ImportRequest_TableRekey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImportRequest_TableRekey* New() const final {
    return CreateMaybeMessage<ImportRequest_TableRekey>(NULL);
  }

  ImportRequest_TableRekey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImportRequest_TableRekey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ImportRequest_TableRekey& from);
  void MergeFrom(const ImportRequest_TableRekey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportRequest_TableRekey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes new_desc = 2;
  void clear_new_desc();
  static const int kNewDescFieldNumber = 2;
  const ::std::string& new_desc() const;
  void set_new_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_new_desc(::std::string&& value);
  #endif
  void set_new_desc(const char* value);
  void set_new_desc(const void* value, size_t size);
  ::std::string* mutable_new_desc();
  ::std::string* release_new_desc();
  void set_allocated_new_desc(::std::string* new_desc);

  void clear_old_id();
  static const int kOldIdFieldNumber = 1;
  ::google::protobuf::uint32 old_id() const;
  void set_old_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ImportRequest.TableRekey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr new_desc_;
  ::google::protobuf::uint32 old_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ImportRequest) */ {
 public:
  ImportRequest();
  virtual ~ImportRequest();

  ImportRequest(const ImportRequest& from);

  inline ImportRequest& operator=(const ImportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImportRequest(ImportRequest&& from) noexcept
    : ImportRequest() {
    *this = ::std::move(from);
  }

  inline ImportRequest& operator=(ImportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ImportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportRequest* internal_default_instance() {
    return reinterpret_cast<const ImportRequest*>(
               &_ImportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(ImportRequest* other);
  friend void swap(ImportRequest& a, ImportRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImportRequest* New() const final {
    return CreateMaybeMessage<ImportRequest>(NULL);
  }

  ImportRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImportRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ImportRequest& from);
  void MergeFrom(const ImportRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ImportRequest_File File;
  typedef ImportRequest_TableRekey TableRekey;

  // accessors -------------------------------------------------------

  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 2;
  ::cockroach::roachpb::ImportRequest_File* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_File >*
      mutable_files();
  const ::cockroach::roachpb::ImportRequest_File& files(int index) const;
  ::cockroach::roachpb::ImportRequest_File* add_files();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_File >&
      files() const;

  int rekeys_size() const;
  void clear_rekeys();
  static const int kRekeysFieldNumber = 5;
  ::cockroach::roachpb::ImportRequest_TableRekey* mutable_rekeys(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_TableRekey >*
      mutable_rekeys();
  const ::cockroach::roachpb::ImportRequest_TableRekey& rekeys(int index) const;
  ::cockroach::roachpb::ImportRequest_TableRekey* add_rekeys();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_TableRekey >&
      rekeys() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_data_span() const;
  void clear_data_span();
  static const int kDataSpanFieldNumber = 3;
  private:
  const ::cockroach::roachpb::Span& _internal_data_span() const;
  public:
  const ::cockroach::roachpb::Span& data_span() const;
  ::cockroach::roachpb::Span* release_data_span();
  ::cockroach::roachpb::Span* mutable_data_span();
  void set_allocated_data_span(::cockroach::roachpb::Span* data_span);

  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_end_time() const;
  public:
  const ::cockroach::util::hlc::Timestamp& end_time() const;
  ::cockroach::util::hlc::Timestamp* release_end_time();
  ::cockroach::util::hlc::Timestamp* mutable_end_time();
  void set_allocated_end_time(::cockroach::util::hlc::Timestamp* end_time);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ImportRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_File > files_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_TableRekey > rekeys_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::Span* data_span_;
  ::cockroach::util::hlc::Timestamp* end_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ImportResponse) */ {
 public:
  ImportResponse();
  virtual ~ImportResponse();

  ImportResponse(const ImportResponse& from);

  inline ImportResponse& operator=(const ImportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImportResponse(ImportResponse&& from) noexcept
    : ImportResponse() {
    *this = ::std::move(from);
  }

  inline ImportResponse& operator=(ImportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ImportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportResponse* internal_default_instance() {
    return reinterpret_cast<const ImportResponse*>(
               &_ImportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(ImportResponse* other);
  friend void swap(ImportResponse& a, ImportResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImportResponse* New() const final {
    return CreateMaybeMessage<ImportResponse>(NULL);
  }

  ImportResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImportResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ImportResponse& from);
  void MergeFrom(const ImportResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_imported() const;
  void clear_imported();
  static const int kImportedFieldNumber = 3;
  private:
  const ::cockroach::roachpb::BulkOpSummary& _internal_imported() const;
  public:
  const ::cockroach::roachpb::BulkOpSummary& imported() const;
  ::cockroach::roachpb::BulkOpSummary* release_imported();
  ::cockroach::roachpb::BulkOpSummary* mutable_imported();
  void set_allocated_imported(::cockroach::roachpb::BulkOpSummary* imported);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ImportResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::roachpb::BulkOpSummary* imported_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminScatterRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminScatterRequest) */ {
 public:
  AdminScatterRequest();
  virtual ~AdminScatterRequest();

  AdminScatterRequest(const AdminScatterRequest& from);

  inline AdminScatterRequest& operator=(const AdminScatterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminScatterRequest(AdminScatterRequest&& from) noexcept
    : AdminScatterRequest() {
    *this = ::std::move(from);
  }

  inline AdminScatterRequest& operator=(AdminScatterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminScatterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminScatterRequest* internal_default_instance() {
    return reinterpret_cast<const AdminScatterRequest*>(
               &_AdminScatterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(AdminScatterRequest* other);
  friend void swap(AdminScatterRequest& a, AdminScatterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminScatterRequest* New() const final {
    return CreateMaybeMessage<AdminScatterRequest>(NULL);
  }

  AdminScatterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminScatterRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminScatterRequest& from);
  void MergeFrom(const AdminScatterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminScatterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // bool randomize_leases = 2;
  void clear_randomize_leases();
  static const int kRandomizeLeasesFieldNumber = 2;
  bool randomize_leases() const;
  void set_randomize_leases(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminScatterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  bool randomize_leases_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminScatterResponse_Range : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminScatterResponse.Range) */ {
 public:
  AdminScatterResponse_Range();
  virtual ~AdminScatterResponse_Range();

  AdminScatterResponse_Range(const AdminScatterResponse_Range& from);

  inline AdminScatterResponse_Range& operator=(const AdminScatterResponse_Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminScatterResponse_Range(AdminScatterResponse_Range&& from) noexcept
    : AdminScatterResponse_Range() {
    *this = ::std::move(from);
  }

  inline AdminScatterResponse_Range& operator=(AdminScatterResponse_Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminScatterResponse_Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminScatterResponse_Range* internal_default_instance() {
    return reinterpret_cast<const AdminScatterResponse_Range*>(
               &_AdminScatterResponse_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(AdminScatterResponse_Range* other);
  friend void swap(AdminScatterResponse_Range& a, AdminScatterResponse_Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminScatterResponse_Range* New() const final {
    return CreateMaybeMessage<AdminScatterResponse_Range>(NULL);
  }

  AdminScatterResponse_Range* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminScatterResponse_Range>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminScatterResponse_Range& from);
  void MergeFrom(const AdminScatterResponse_Range& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminScatterResponse_Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 1;
  private:
  const ::cockroach::roachpb::Span& _internal_span() const;
  public:
  const ::cockroach::roachpb::Span& span() const;
  ::cockroach::roachpb::Span* release_span();
  ::cockroach::roachpb::Span* mutable_span();
  void set_allocated_span(::cockroach::roachpb::Span* span);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminScatterResponse.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::Span* span_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminScatterResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AdminScatterResponse) */ {
 public:
  AdminScatterResponse();
  virtual ~AdminScatterResponse();

  AdminScatterResponse(const AdminScatterResponse& from);

  inline AdminScatterResponse& operator=(const AdminScatterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminScatterResponse(AdminScatterResponse&& from) noexcept
    : AdminScatterResponse() {
    *this = ::std::move(from);
  }

  inline AdminScatterResponse& operator=(AdminScatterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdminScatterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminScatterResponse* internal_default_instance() {
    return reinterpret_cast<const AdminScatterResponse*>(
               &_AdminScatterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(AdminScatterResponse* other);
  friend void swap(AdminScatterResponse& a, AdminScatterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminScatterResponse* New() const final {
    return CreateMaybeMessage<AdminScatterResponse>(NULL);
  }

  AdminScatterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminScatterResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdminScatterResponse& from);
  void MergeFrom(const AdminScatterResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminScatterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AdminScatterResponse_Range Range;

  // accessors -------------------------------------------------------

  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 2;
  ::cockroach::roachpb::AdminScatterResponse_Range* mutable_ranges(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::AdminScatterResponse_Range >*
      mutable_ranges();
  const ::cockroach::roachpb::AdminScatterResponse_Range& ranges(int index) const;
  ::cockroach::roachpb::AdminScatterResponse_Range* add_ranges();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::AdminScatterResponse_Range >&
      ranges() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AdminScatterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::AdminScatterResponse_Range > ranges_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddSSTableRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AddSSTableRequest) */ {
 public:
  AddSSTableRequest();
  virtual ~AddSSTableRequest();

  AddSSTableRequest(const AddSSTableRequest& from);

  inline AddSSTableRequest& operator=(const AddSSTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddSSTableRequest(AddSSTableRequest&& from) noexcept
    : AddSSTableRequest() {
    *this = ::std::move(from);
  }

  inline AddSSTableRequest& operator=(AddSSTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AddSSTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddSSTableRequest* internal_default_instance() {
    return reinterpret_cast<const AddSSTableRequest*>(
               &_AddSSTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(AddSSTableRequest* other);
  friend void swap(AddSSTableRequest& a, AddSSTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddSSTableRequest* New() const final {
    return CreateMaybeMessage<AddSSTableRequest>(NULL);
  }

  AddSSTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddSSTableRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AddSSTableRequest& from);
  void MergeFrom(const AddSSTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddSSTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_mvcc_stats() const;
  void clear_mvcc_stats();
  static const int kMvccStatsFieldNumber = 4;
  private:
  const ::cockroach::storage::engine::enginepb::MVCCStats& _internal_mvcc_stats() const;
  public:
  const ::cockroach::storage::engine::enginepb::MVCCStats& mvcc_stats() const;
  ::cockroach::storage::engine::enginepb::MVCCStats* release_mvcc_stats();
  ::cockroach::storage::engine::enginepb::MVCCStats* mutable_mvcc_stats();
  void set_allocated_mvcc_stats(::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats);

  // bool disallow_shadowing = 3;
  void clear_disallow_shadowing();
  static const int kDisallowShadowingFieldNumber = 3;
  bool disallow_shadowing() const;
  void set_disallow_shadowing(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AddSSTableRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats_;
  bool disallow_shadowing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddSSTableResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AddSSTableResponse) */ {
 public:
  AddSSTableResponse();
  virtual ~AddSSTableResponse();

  AddSSTableResponse(const AddSSTableResponse& from);

  inline AddSSTableResponse& operator=(const AddSSTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddSSTableResponse(AddSSTableResponse&& from) noexcept
    : AddSSTableResponse() {
    *this = ::std::move(from);
  }

  inline AddSSTableResponse& operator=(AddSSTableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AddSSTableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddSSTableResponse* internal_default_instance() {
    return reinterpret_cast<const AddSSTableResponse*>(
               &_AddSSTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(AddSSTableResponse* other);
  friend void swap(AddSSTableResponse& a, AddSSTableResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddSSTableResponse* New() const final {
    return CreateMaybeMessage<AddSSTableResponse>(NULL);
  }

  AddSSTableResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddSSTableResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AddSSTableResponse& from);
  void MergeFrom(const AddSSTableResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddSSTableResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AddSSTableResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RefreshRequest) */ {
 public:
  RefreshRequest();
  virtual ~RefreshRequest();

  RefreshRequest(const RefreshRequest& from);

  inline RefreshRequest& operator=(const RefreshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshRequest(RefreshRequest&& from) noexcept
    : RefreshRequest() {
    *this = ::std::move(from);
  }

  inline RefreshRequest& operator=(RefreshRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RefreshRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshRequest*>(
               &_RefreshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(RefreshRequest* other);
  friend void swap(RefreshRequest& a, RefreshRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshRequest* New() const final {
    return CreateMaybeMessage<RefreshRequest>(NULL);
  }

  RefreshRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefreshRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RefreshRequest& from);
  void MergeFrom(const RefreshRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RefreshRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // bool write = 2;
  void clear_write();
  static const int kWriteFieldNumber = 2;
  bool write() const;
  void set_write(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RefreshRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  bool write_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RefreshResponse) */ {
 public:
  RefreshResponse();
  virtual ~RefreshResponse();

  RefreshResponse(const RefreshResponse& from);

  inline RefreshResponse& operator=(const RefreshResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshResponse(RefreshResponse&& from) noexcept
    : RefreshResponse() {
    *this = ::std::move(from);
  }

  inline RefreshResponse& operator=(RefreshResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RefreshResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshResponse* internal_default_instance() {
    return reinterpret_cast<const RefreshResponse*>(
               &_RefreshResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(RefreshResponse* other);
  friend void swap(RefreshResponse& a, RefreshResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshResponse* New() const final {
    return CreateMaybeMessage<RefreshResponse>(NULL);
  }

  RefreshResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefreshResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RefreshResponse& from);
  void MergeFrom(const RefreshResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RefreshResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RefreshResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshRangeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RefreshRangeRequest) */ {
 public:
  RefreshRangeRequest();
  virtual ~RefreshRangeRequest();

  RefreshRangeRequest(const RefreshRangeRequest& from);

  inline RefreshRangeRequest& operator=(const RefreshRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshRangeRequest(RefreshRangeRequest&& from) noexcept
    : RefreshRangeRequest() {
    *this = ::std::move(from);
  }

  inline RefreshRangeRequest& operator=(RefreshRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RefreshRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshRangeRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshRangeRequest*>(
               &_RefreshRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(RefreshRangeRequest* other);
  friend void swap(RefreshRangeRequest& a, RefreshRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshRangeRequest* New() const final {
    return CreateMaybeMessage<RefreshRangeRequest>(NULL);
  }

  RefreshRangeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefreshRangeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RefreshRangeRequest& from);
  void MergeFrom(const RefreshRangeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RefreshRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // bool write = 2;
  void clear_write();
  static const int kWriteFieldNumber = 2;
  bool write() const;
  void set_write(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RefreshRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  bool write_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshRangeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RefreshRangeResponse) */ {
 public:
  RefreshRangeResponse();
  virtual ~RefreshRangeResponse();

  RefreshRangeResponse(const RefreshRangeResponse& from);

  inline RefreshRangeResponse& operator=(const RefreshRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshRangeResponse(RefreshRangeResponse&& from) noexcept
    : RefreshRangeResponse() {
    *this = ::std::move(from);
  }

  inline RefreshRangeResponse& operator=(RefreshRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RefreshRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshRangeResponse* internal_default_instance() {
    return reinterpret_cast<const RefreshRangeResponse*>(
               &_RefreshRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(RefreshRangeResponse* other);
  friend void swap(RefreshRangeResponse& a, RefreshRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshRangeResponse* New() const final {
    return CreateMaybeMessage<RefreshRangeResponse>(NULL);
  }

  RefreshRangeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefreshRangeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RefreshRangeResponse& from);
  void MergeFrom(const RefreshRangeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RefreshRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RefreshRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubsumeRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.SubsumeRequest) */ {
 public:
  SubsumeRequest();
  virtual ~SubsumeRequest();

  SubsumeRequest(const SubsumeRequest& from);

  inline SubsumeRequest& operator=(const SubsumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubsumeRequest(SubsumeRequest&& from) noexcept
    : SubsumeRequest() {
    *this = ::std::move(from);
  }

  inline SubsumeRequest& operator=(SubsumeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SubsumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubsumeRequest* internal_default_instance() {
    return reinterpret_cast<const SubsumeRequest*>(
               &_SubsumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(SubsumeRequest* other);
  friend void swap(SubsumeRequest& a, SubsumeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubsumeRequest* New() const final {
    return CreateMaybeMessage<SubsumeRequest>(NULL);
  }

  SubsumeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubsumeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SubsumeRequest& from);
  void MergeFrom(const SubsumeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubsumeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  bool has_left_desc() const;
  void clear_left_desc();
  static const int kLeftDescFieldNumber = 2;
  private:
  const ::cockroach::roachpb::RangeDescriptor& _internal_left_desc() const;
  public:
  const ::cockroach::roachpb::RangeDescriptor& left_desc() const;
  ::cockroach::roachpb::RangeDescriptor* release_left_desc();
  ::cockroach::roachpb::RangeDescriptor* mutable_left_desc();
  void set_allocated_left_desc(::cockroach::roachpb::RangeDescriptor* left_desc);

  // .cockroach.roachpb.RangeDescriptor right_desc = 3;
  bool has_right_desc() const;
  void clear_right_desc();
  static const int kRightDescFieldNumber = 3;
  private:
  const ::cockroach::roachpb::RangeDescriptor& _internal_right_desc() const;
  public:
  const ::cockroach::roachpb::RangeDescriptor& right_desc() const;
  ::cockroach::roachpb::RangeDescriptor* release_right_desc();
  ::cockroach::roachpb::RangeDescriptor* mutable_right_desc();
  void set_allocated_right_desc(::cockroach::roachpb::RangeDescriptor* right_desc);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.SubsumeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  ::cockroach::roachpb::RangeDescriptor* left_desc_;
  ::cockroach::roachpb::RangeDescriptor* right_desc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubsumeResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.SubsumeResponse) */ {
 public:
  SubsumeResponse();
  virtual ~SubsumeResponse();

  SubsumeResponse(const SubsumeResponse& from);

  inline SubsumeResponse& operator=(const SubsumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubsumeResponse(SubsumeResponse&& from) noexcept
    : SubsumeResponse() {
    *this = ::std::move(from);
  }

  inline SubsumeResponse& operator=(SubsumeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SubsumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubsumeResponse* internal_default_instance() {
    return reinterpret_cast<const SubsumeResponse*>(
               &_SubsumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(SubsumeResponse* other);
  friend void swap(SubsumeResponse& a, SubsumeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubsumeResponse* New() const final {
    return CreateMaybeMessage<SubsumeResponse>(NULL);
  }

  SubsumeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubsumeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SubsumeResponse& from);
  void MergeFrom(const SubsumeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubsumeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_mvcc_stats() const;
  void clear_mvcc_stats();
  static const int kMvccStatsFieldNumber = 3;
  private:
  const ::cockroach::storage::engine::enginepb::MVCCStats& _internal_mvcc_stats() const;
  public:
  const ::cockroach::storage::engine::enginepb::MVCCStats& mvcc_stats() const;
  ::cockroach::storage::engine::enginepb::MVCCStats* release_mvcc_stats();
  ::cockroach::storage::engine::enginepb::MVCCStats* mutable_mvcc_stats();
  void set_allocated_mvcc_stats(::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats);

  bool has_freeze_start() const;
  void clear_freeze_start();
  static const int kFreezeStartFieldNumber = 5;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_freeze_start() const;
  public:
  const ::cockroach::util::hlc::Timestamp& freeze_start() const;
  ::cockroach::util::hlc::Timestamp* release_freeze_start();
  ::cockroach::util::hlc::Timestamp* mutable_freeze_start();
  void set_allocated_freeze_start(::cockroach::util::hlc::Timestamp* freeze_start);

  // uint64 lease_applied_index = 4;
  void clear_lease_applied_index();
  static const int kLeaseAppliedIndexFieldNumber = 4;
  ::google::protobuf::uint64 lease_applied_index() const;
  void set_lease_applied_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.SubsumeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats_;
  ::cockroach::util::hlc::Timestamp* freeze_start_;
  ::google::protobuf::uint64 lease_applied_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeStatsRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeStatsRequest) */ {
 public:
  RangeStatsRequest();
  virtual ~RangeStatsRequest();

  RangeStatsRequest(const RangeStatsRequest& from);

  inline RangeStatsRequest& operator=(const RangeStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeStatsRequest(RangeStatsRequest&& from) noexcept
    : RangeStatsRequest() {
    *this = ::std::move(from);
  }

  inline RangeStatsRequest& operator=(RangeStatsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeStatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeStatsRequest* internal_default_instance() {
    return reinterpret_cast<const RangeStatsRequest*>(
               &_RangeStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(RangeStatsRequest* other);
  friend void swap(RangeStatsRequest& a, RangeStatsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeStatsRequest* New() const final {
    return CreateMaybeMessage<RangeStatsRequest>(NULL);
  }

  RangeStatsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeStatsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeStatsRequest& from);
  void MergeFrom(const RangeStatsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeStatsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RequestHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::RequestHeader& header() const;
  ::cockroach::roachpb::RequestHeader* release_header();
  ::cockroach::roachpb::RequestHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeStatsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeStatsResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeStatsResponse) */ {
 public:
  RangeStatsResponse();
  virtual ~RangeStatsResponse();

  RangeStatsResponse(const RangeStatsResponse& from);

  inline RangeStatsResponse& operator=(const RangeStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeStatsResponse(RangeStatsResponse&& from) noexcept
    : RangeStatsResponse() {
    *this = ::std::move(from);
  }

  inline RangeStatsResponse& operator=(RangeStatsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeStatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeStatsResponse* internal_default_instance() {
    return reinterpret_cast<const RangeStatsResponse*>(
               &_RangeStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(RangeStatsResponse* other);
  friend void swap(RangeStatsResponse& a, RangeStatsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeStatsResponse* New() const final {
    return CreateMaybeMessage<RangeStatsResponse>(NULL);
  }

  RangeStatsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeStatsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeStatsResponse& from);
  void MergeFrom(const RangeStatsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeStatsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::ResponseHeader& _internal_header() const;
  public:
  const ::cockroach::roachpb::ResponseHeader& header() const;
  ::cockroach::roachpb::ResponseHeader* release_header();
  ::cockroach::roachpb::ResponseHeader* mutable_header();
  void set_allocated_header(::cockroach::roachpb::ResponseHeader* header);

  bool has_mvcc_stats() const;
  void clear_mvcc_stats();
  static const int kMvccStatsFieldNumber = 2;
  private:
  const ::cockroach::storage::engine::enginepb::MVCCStats& _internal_mvcc_stats() const;
  public:
  const ::cockroach::storage::engine::enginepb::MVCCStats& mvcc_stats() const;
  ::cockroach::storage::engine::enginepb::MVCCStats* release_mvcc_stats();
  ::cockroach::storage::engine::enginepb::MVCCStats* mutable_mvcc_stats();
  void set_allocated_mvcc_stats(::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats);

  // double queries_per_second = 3;
  void clear_queries_per_second();
  static const int kQueriesPerSecondFieldNumber = 3;
  double queries_per_second() const;
  void set_queries_per_second(double value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeStatsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::ResponseHeader* header_;
  ::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats_;
  double queries_per_second_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestUnion : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RequestUnion) */ {
 public:
  RequestUnion();
  virtual ~RequestUnion();

  RequestUnion(const RequestUnion& from);

  inline RequestUnion& operator=(const RequestUnion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestUnion(RequestUnion&& from) noexcept
    : RequestUnion() {
    *this = ::std::move(from);
  }

  inline RequestUnion& operator=(RequestUnion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RequestUnion& default_instance();

  enum ValueCase {
    kGet = 1,
    kPut = 2,
    kConditionalPut = 3,
    kIncrement = 4,
    kDelete = 5,
    kDeleteRange = 6,
    kClearRange = 38,
    kRevertRange = 48,
    kScan = 7,
    kBeginTransaction = 8,
    kEndTransaction = 9,
    kAdminSplit = 10,
    kAdminUnsplit = 47,
    kAdminMerge = 11,
    kAdminTransferLease = 29,
    kAdminChangeReplicas = 35,
    kAdminRelocateRange = 45,
    kHeartbeatTxn = 12,
    kGc = 13,
    kPushTxn = 14,
    kRecoverTxn = 46,
    kResolveIntent = 16,
    kResolveIntentRange = 17,
    kMerge = 18,
    kTruncateLog = 19,
    kRequestLease = 20,
    kReverseScan = 21,
    kComputeChecksum = 22,
    kCheckConsistency = 24,
    kInitPut = 26,
    kTransferLease = 28,
    kLeaseInfo = 30,
    kWriteBatch = 31,
    kExport = 32,
    kImport = 34,
    kQueryTxn = 33,
    kQueryIntent = 42,
    kAdminScatter = 36,
    kAddSstable = 37,
    kRecomputeStats = 39,
    kRefresh = 40,
    kRefreshRange = 41,
    kSubsume = 43,
    kRangeStats = 44,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestUnion* internal_default_instance() {
    return reinterpret_cast<const RequestUnion*>(
               &_RequestUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(RequestUnion* other);
  friend void swap(RequestUnion& a, RequestUnion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestUnion* New() const final {
    return CreateMaybeMessage<RequestUnion>(NULL);
  }

  RequestUnion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestUnion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RequestUnion& from);
  void MergeFrom(const RequestUnion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestUnion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cockroach.roachpb.GetRequest get = 1;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 1;
  private:
  const ::cockroach::roachpb::GetRequest& _internal_get() const;
  public:
  const ::cockroach::roachpb::GetRequest& get() const;
  ::cockroach::roachpb::GetRequest* release_get();
  ::cockroach::roachpb::GetRequest* mutable_get();
  void set_allocated_get(::cockroach::roachpb::GetRequest* get);

  // .cockroach.roachpb.PutRequest put = 2;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 2;
  private:
  const ::cockroach::roachpb::PutRequest& _internal_put() const;
  public:
  const ::cockroach::roachpb::PutRequest& put() const;
  ::cockroach::roachpb::PutRequest* release_put();
  ::cockroach::roachpb::PutRequest* mutable_put();
  void set_allocated_put(::cockroach::roachpb::PutRequest* put);

  // .cockroach.roachpb.ConditionalPutRequest conditional_put = 3;
  bool has_conditional_put() const;
  void clear_conditional_put();
  static const int kConditionalPutFieldNumber = 3;
  private:
  const ::cockroach::roachpb::ConditionalPutRequest& _internal_conditional_put() const;
  public:
  const ::cockroach::roachpb::ConditionalPutRequest& conditional_put() const;
  ::cockroach::roachpb::ConditionalPutRequest* release_conditional_put();
  ::cockroach::roachpb::ConditionalPutRequest* mutable_conditional_put();
  void set_allocated_conditional_put(::cockroach::roachpb::ConditionalPutRequest* conditional_put);

  // .cockroach.roachpb.IncrementRequest increment = 4;
  bool has_increment() const;
  void clear_increment();
  static const int kIncrementFieldNumber = 4;
  private:
  const ::cockroach::roachpb::IncrementRequest& _internal_increment() const;
  public:
  const ::cockroach::roachpb::IncrementRequest& increment() const;
  ::cockroach::roachpb::IncrementRequest* release_increment();
  ::cockroach::roachpb::IncrementRequest* mutable_increment();
  void set_allocated_increment(::cockroach::roachpb::IncrementRequest* increment);

  // .cockroach.roachpb.DeleteRequest delete = 5;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  private:
  const ::cockroach::roachpb::DeleteRequest& _internal_delete_() const;
  public:
  const ::cockroach::roachpb::DeleteRequest& delete_() const;
  ::cockroach::roachpb::DeleteRequest* release_delete_();
  ::cockroach::roachpb::DeleteRequest* mutable_delete_();
  void set_allocated_delete_(::cockroach::roachpb::DeleteRequest* delete_);

  // .cockroach.roachpb.DeleteRangeRequest delete_range = 6;
  bool has_delete_range() const;
  void clear_delete_range();
  static const int kDeleteRangeFieldNumber = 6;
  private:
  const ::cockroach::roachpb::DeleteRangeRequest& _internal_delete_range() const;
  public:
  const ::cockroach::roachpb::DeleteRangeRequest& delete_range() const;
  ::cockroach::roachpb::DeleteRangeRequest* release_delete_range();
  ::cockroach::roachpb::DeleteRangeRequest* mutable_delete_range();
  void set_allocated_delete_range(::cockroach::roachpb::DeleteRangeRequest* delete_range);

  // .cockroach.roachpb.ClearRangeRequest clear_range = 38;
  bool has_clear_range() const;
  void clear_clear_range();
  static const int kClearRangeFieldNumber = 38;
  private:
  const ::cockroach::roachpb::ClearRangeRequest& _internal_clear_range() const;
  public:
  const ::cockroach::roachpb::ClearRangeRequest& clear_range() const;
  ::cockroach::roachpb::ClearRangeRequest* release_clear_range();
  ::cockroach::roachpb::ClearRangeRequest* mutable_clear_range();
  void set_allocated_clear_range(::cockroach::roachpb::ClearRangeRequest* clear_range);

  // .cockroach.roachpb.RevertRangeRequest revert_range = 48;
  bool has_revert_range() const;
  void clear_revert_range();
  static const int kRevertRangeFieldNumber = 48;
  private:
  const ::cockroach::roachpb::RevertRangeRequest& _internal_revert_range() const;
  public:
  const ::cockroach::roachpb::RevertRangeRequest& revert_range() const;
  ::cockroach::roachpb::RevertRangeRequest* release_revert_range();
  ::cockroach::roachpb::RevertRangeRequest* mutable_revert_range();
  void set_allocated_revert_range(::cockroach::roachpb::RevertRangeRequest* revert_range);

  // .cockroach.roachpb.ScanRequest scan = 7;
  bool has_scan() const;
  void clear_scan();
  static const int kScanFieldNumber = 7;
  private:
  const ::cockroach::roachpb::ScanRequest& _internal_scan() const;
  public:
  const ::cockroach::roachpb::ScanRequest& scan() const;
  ::cockroach::roachpb::ScanRequest* release_scan();
  ::cockroach::roachpb::ScanRequest* mutable_scan();
  void set_allocated_scan(::cockroach::roachpb::ScanRequest* scan);

  // .cockroach.roachpb.BeginTransactionRequest begin_transaction = 8;
  bool has_begin_transaction() const;
  void clear_begin_transaction();
  static const int kBeginTransactionFieldNumber = 8;
  private:
  const ::cockroach::roachpb::BeginTransactionRequest& _internal_begin_transaction() const;
  public:
  const ::cockroach::roachpb::BeginTransactionRequest& begin_transaction() const;
  ::cockroach::roachpb::BeginTransactionRequest* release_begin_transaction();
  ::cockroach::roachpb::BeginTransactionRequest* mutable_begin_transaction();
  void set_allocated_begin_transaction(::cockroach::roachpb::BeginTransactionRequest* begin_transaction);

  // .cockroach.roachpb.EndTransactionRequest end_transaction = 9;
  bool has_end_transaction() const;
  void clear_end_transaction();
  static const int kEndTransactionFieldNumber = 9;
  private:
  const ::cockroach::roachpb::EndTransactionRequest& _internal_end_transaction() const;
  public:
  const ::cockroach::roachpb::EndTransactionRequest& end_transaction() const;
  ::cockroach::roachpb::EndTransactionRequest* release_end_transaction();
  ::cockroach::roachpb::EndTransactionRequest* mutable_end_transaction();
  void set_allocated_end_transaction(::cockroach::roachpb::EndTransactionRequest* end_transaction);

  // .cockroach.roachpb.AdminSplitRequest admin_split = 10;
  bool has_admin_split() const;
  void clear_admin_split();
  static const int kAdminSplitFieldNumber = 10;
  private:
  const ::cockroach::roachpb::AdminSplitRequest& _internal_admin_split() const;
  public:
  const ::cockroach::roachpb::AdminSplitRequest& admin_split() const;
  ::cockroach::roachpb::AdminSplitRequest* release_admin_split();
  ::cockroach::roachpb::AdminSplitRequest* mutable_admin_split();
  void set_allocated_admin_split(::cockroach::roachpb::AdminSplitRequest* admin_split);

  // .cockroach.roachpb.AdminUnsplitRequest admin_unsplit = 47;
  bool has_admin_unsplit() const;
  void clear_admin_unsplit();
  static const int kAdminUnsplitFieldNumber = 47;
  private:
  const ::cockroach::roachpb::AdminUnsplitRequest& _internal_admin_unsplit() const;
  public:
  const ::cockroach::roachpb::AdminUnsplitRequest& admin_unsplit() const;
  ::cockroach::roachpb::AdminUnsplitRequest* release_admin_unsplit();
  ::cockroach::roachpb::AdminUnsplitRequest* mutable_admin_unsplit();
  void set_allocated_admin_unsplit(::cockroach::roachpb::AdminUnsplitRequest* admin_unsplit);

  // .cockroach.roachpb.AdminMergeRequest admin_merge = 11;
  bool has_admin_merge() const;
  void clear_admin_merge();
  static const int kAdminMergeFieldNumber = 11;
  private:
  const ::cockroach::roachpb::AdminMergeRequest& _internal_admin_merge() const;
  public:
  const ::cockroach::roachpb::AdminMergeRequest& admin_merge() const;
  ::cockroach::roachpb::AdminMergeRequest* release_admin_merge();
  ::cockroach::roachpb::AdminMergeRequest* mutable_admin_merge();
  void set_allocated_admin_merge(::cockroach::roachpb::AdminMergeRequest* admin_merge);

  // .cockroach.roachpb.AdminTransferLeaseRequest admin_transfer_lease = 29;
  bool has_admin_transfer_lease() const;
  void clear_admin_transfer_lease();
  static const int kAdminTransferLeaseFieldNumber = 29;
  private:
  const ::cockroach::roachpb::AdminTransferLeaseRequest& _internal_admin_transfer_lease() const;
  public:
  const ::cockroach::roachpb::AdminTransferLeaseRequest& admin_transfer_lease() const;
  ::cockroach::roachpb::AdminTransferLeaseRequest* release_admin_transfer_lease();
  ::cockroach::roachpb::AdminTransferLeaseRequest* mutable_admin_transfer_lease();
  void set_allocated_admin_transfer_lease(::cockroach::roachpb::AdminTransferLeaseRequest* admin_transfer_lease);

  // .cockroach.roachpb.AdminChangeReplicasRequest admin_change_replicas = 35;
  bool has_admin_change_replicas() const;
  void clear_admin_change_replicas();
  static const int kAdminChangeReplicasFieldNumber = 35;
  private:
  const ::cockroach::roachpb::AdminChangeReplicasRequest& _internal_admin_change_replicas() const;
  public:
  const ::cockroach::roachpb::AdminChangeReplicasRequest& admin_change_replicas() const;
  ::cockroach::roachpb::AdminChangeReplicasRequest* release_admin_change_replicas();
  ::cockroach::roachpb::AdminChangeReplicasRequest* mutable_admin_change_replicas();
  void set_allocated_admin_change_replicas(::cockroach::roachpb::AdminChangeReplicasRequest* admin_change_replicas);

  // .cockroach.roachpb.AdminRelocateRangeRequest admin_relocate_range = 45;
  bool has_admin_relocate_range() const;
  void clear_admin_relocate_range();
  static const int kAdminRelocateRangeFieldNumber = 45;
  private:
  const ::cockroach::roachpb::AdminRelocateRangeRequest& _internal_admin_relocate_range() const;
  public:
  const ::cockroach::roachpb::AdminRelocateRangeRequest& admin_relocate_range() const;
  ::cockroach::roachpb::AdminRelocateRangeRequest* release_admin_relocate_range();
  ::cockroach::roachpb::AdminRelocateRangeRequest* mutable_admin_relocate_range();
  void set_allocated_admin_relocate_range(::cockroach::roachpb::AdminRelocateRangeRequest* admin_relocate_range);

  // .cockroach.roachpb.HeartbeatTxnRequest heartbeat_txn = 12;
  bool has_heartbeat_txn() const;
  void clear_heartbeat_txn();
  static const int kHeartbeatTxnFieldNumber = 12;
  private:
  const ::cockroach::roachpb::HeartbeatTxnRequest& _internal_heartbeat_txn() const;
  public:
  const ::cockroach::roachpb::HeartbeatTxnRequest& heartbeat_txn() const;
  ::cockroach::roachpb::HeartbeatTxnRequest* release_heartbeat_txn();
  ::cockroach::roachpb::HeartbeatTxnRequest* mutable_heartbeat_txn();
  void set_allocated_heartbeat_txn(::cockroach::roachpb::HeartbeatTxnRequest* heartbeat_txn);

  // .cockroach.roachpb.GCRequest gc = 13;
  bool has_gc() const;
  void clear_gc();
  static const int kGcFieldNumber = 13;
  private:
  const ::cockroach::roachpb::GCRequest& _internal_gc() const;
  public:
  const ::cockroach::roachpb::GCRequest& gc() const;
  ::cockroach::roachpb::GCRequest* release_gc();
  ::cockroach::roachpb::GCRequest* mutable_gc();
  void set_allocated_gc(::cockroach::roachpb::GCRequest* gc);

  // .cockroach.roachpb.PushTxnRequest push_txn = 14;
  bool has_push_txn() const;
  void clear_push_txn();
  static const int kPushTxnFieldNumber = 14;
  private:
  const ::cockroach::roachpb::PushTxnRequest& _internal_push_txn() const;
  public:
  const ::cockroach::roachpb::PushTxnRequest& push_txn() const;
  ::cockroach::roachpb::PushTxnRequest* release_push_txn();
  ::cockroach::roachpb::PushTxnRequest* mutable_push_txn();
  void set_allocated_push_txn(::cockroach::roachpb::PushTxnRequest* push_txn);

  // .cockroach.roachpb.RecoverTxnRequest recover_txn = 46;
  bool has_recover_txn() const;
  void clear_recover_txn();
  static const int kRecoverTxnFieldNumber = 46;
  private:
  const ::cockroach::roachpb::RecoverTxnRequest& _internal_recover_txn() const;
  public:
  const ::cockroach::roachpb::RecoverTxnRequest& recover_txn() const;
  ::cockroach::roachpb::RecoverTxnRequest* release_recover_txn();
  ::cockroach::roachpb::RecoverTxnRequest* mutable_recover_txn();
  void set_allocated_recover_txn(::cockroach::roachpb::RecoverTxnRequest* recover_txn);

  // .cockroach.roachpb.ResolveIntentRequest resolve_intent = 16;
  bool has_resolve_intent() const;
  void clear_resolve_intent();
  static const int kResolveIntentFieldNumber = 16;
  private:
  const ::cockroach::roachpb::ResolveIntentRequest& _internal_resolve_intent() const;
  public:
  const ::cockroach::roachpb::ResolveIntentRequest& resolve_intent() const;
  ::cockroach::roachpb::ResolveIntentRequest* release_resolve_intent();
  ::cockroach::roachpb::ResolveIntentRequest* mutable_resolve_intent();
  void set_allocated_resolve_intent(::cockroach::roachpb::ResolveIntentRequest* resolve_intent);

  // .cockroach.roachpb.ResolveIntentRangeRequest resolve_intent_range = 17;
  bool has_resolve_intent_range() const;
  void clear_resolve_intent_range();
  static const int kResolveIntentRangeFieldNumber = 17;
  private:
  const ::cockroach::roachpb::ResolveIntentRangeRequest& _internal_resolve_intent_range() const;
  public:
  const ::cockroach::roachpb::ResolveIntentRangeRequest& resolve_intent_range() const;
  ::cockroach::roachpb::ResolveIntentRangeRequest* release_resolve_intent_range();
  ::cockroach::roachpb::ResolveIntentRangeRequest* mutable_resolve_intent_range();
  void set_allocated_resolve_intent_range(::cockroach::roachpb::ResolveIntentRangeRequest* resolve_intent_range);

  // .cockroach.roachpb.MergeRequest merge = 18;
  bool has_merge() const;
  void clear_merge();
  static const int kMergeFieldNumber = 18;
  private:
  const ::cockroach::roachpb::MergeRequest& _internal_merge() const;
  public:
  const ::cockroach::roachpb::MergeRequest& merge() const;
  ::cockroach::roachpb::MergeRequest* release_merge();
  ::cockroach::roachpb::MergeRequest* mutable_merge();
  void set_allocated_merge(::cockroach::roachpb::MergeRequest* merge);

  // .cockroach.roachpb.TruncateLogRequest truncate_log = 19;
  bool has_truncate_log() const;
  void clear_truncate_log();
  static const int kTruncateLogFieldNumber = 19;
  private:
  const ::cockroach::roachpb::TruncateLogRequest& _internal_truncate_log() const;
  public:
  const ::cockroach::roachpb::TruncateLogRequest& truncate_log() const;
  ::cockroach::roachpb::TruncateLogRequest* release_truncate_log();
  ::cockroach::roachpb::TruncateLogRequest* mutable_truncate_log();
  void set_allocated_truncate_log(::cockroach::roachpb::TruncateLogRequest* truncate_log);

  // .cockroach.roachpb.RequestLeaseRequest request_lease = 20;
  bool has_request_lease() const;
  void clear_request_lease();
  static const int kRequestLeaseFieldNumber = 20;
  private:
  const ::cockroach::roachpb::RequestLeaseRequest& _internal_request_lease() const;
  public:
  const ::cockroach::roachpb::RequestLeaseRequest& request_lease() const;
  ::cockroach::roachpb::RequestLeaseRequest* release_request_lease();
  ::cockroach::roachpb::RequestLeaseRequest* mutable_request_lease();
  void set_allocated_request_lease(::cockroach::roachpb::RequestLeaseRequest* request_lease);

  // .cockroach.roachpb.ReverseScanRequest reverse_scan = 21;
  bool has_reverse_scan() const;
  void clear_reverse_scan();
  static const int kReverseScanFieldNumber = 21;
  private:
  const ::cockroach::roachpb::ReverseScanRequest& _internal_reverse_scan() const;
  public:
  const ::cockroach::roachpb::ReverseScanRequest& reverse_scan() const;
  ::cockroach::roachpb::ReverseScanRequest* release_reverse_scan();
  ::cockroach::roachpb::ReverseScanRequest* mutable_reverse_scan();
  void set_allocated_reverse_scan(::cockroach::roachpb::ReverseScanRequest* reverse_scan);

  // .cockroach.roachpb.ComputeChecksumRequest compute_checksum = 22;
  bool has_compute_checksum() const;
  void clear_compute_checksum();
  static const int kComputeChecksumFieldNumber = 22;
  private:
  const ::cockroach::roachpb::ComputeChecksumRequest& _internal_compute_checksum() const;
  public:
  const ::cockroach::roachpb::ComputeChecksumRequest& compute_checksum() const;
  ::cockroach::roachpb::ComputeChecksumRequest* release_compute_checksum();
  ::cockroach::roachpb::ComputeChecksumRequest* mutable_compute_checksum();
  void set_allocated_compute_checksum(::cockroach::roachpb::ComputeChecksumRequest* compute_checksum);

  // .cockroach.roachpb.CheckConsistencyRequest check_consistency = 24;
  bool has_check_consistency() const;
  void clear_check_consistency();
  static const int kCheckConsistencyFieldNumber = 24;
  private:
  const ::cockroach::roachpb::CheckConsistencyRequest& _internal_check_consistency() const;
  public:
  const ::cockroach::roachpb::CheckConsistencyRequest& check_consistency() const;
  ::cockroach::roachpb::CheckConsistencyRequest* release_check_consistency();
  ::cockroach::roachpb::CheckConsistencyRequest* mutable_check_consistency();
  void set_allocated_check_consistency(::cockroach::roachpb::CheckConsistencyRequest* check_consistency);

  // .cockroach.roachpb.InitPutRequest init_put = 26;
  bool has_init_put() const;
  void clear_init_put();
  static const int kInitPutFieldNumber = 26;
  private:
  const ::cockroach::roachpb::InitPutRequest& _internal_init_put() const;
  public:
  const ::cockroach::roachpb::InitPutRequest& init_put() const;
  ::cockroach::roachpb::InitPutRequest* release_init_put();
  ::cockroach::roachpb::InitPutRequest* mutable_init_put();
  void set_allocated_init_put(::cockroach::roachpb::InitPutRequest* init_put);

  // .cockroach.roachpb.TransferLeaseRequest transfer_lease = 28;
  bool has_transfer_lease() const;
  void clear_transfer_lease();
  static const int kTransferLeaseFieldNumber = 28;
  private:
  const ::cockroach::roachpb::TransferLeaseRequest& _internal_transfer_lease() const;
  public:
  const ::cockroach::roachpb::TransferLeaseRequest& transfer_lease() const;
  ::cockroach::roachpb::TransferLeaseRequest* release_transfer_lease();
  ::cockroach::roachpb::TransferLeaseRequest* mutable_transfer_lease();
  void set_allocated_transfer_lease(::cockroach::roachpb::TransferLeaseRequest* transfer_lease);

  // .cockroach.roachpb.LeaseInfoRequest lease_info = 30;
  bool has_lease_info() const;
  void clear_lease_info();
  static const int kLeaseInfoFieldNumber = 30;
  private:
  const ::cockroach::roachpb::LeaseInfoRequest& _internal_lease_info() const;
  public:
  const ::cockroach::roachpb::LeaseInfoRequest& lease_info() const;
  ::cockroach::roachpb::LeaseInfoRequest* release_lease_info();
  ::cockroach::roachpb::LeaseInfoRequest* mutable_lease_info();
  void set_allocated_lease_info(::cockroach::roachpb::LeaseInfoRequest* lease_info);

  // .cockroach.roachpb.WriteBatchRequest write_batch = 31;
  bool has_write_batch() const;
  void clear_write_batch();
  static const int kWriteBatchFieldNumber = 31;
  private:
  const ::cockroach::roachpb::WriteBatchRequest& _internal_write_batch() const;
  public:
  const ::cockroach::roachpb::WriteBatchRequest& write_batch() const;
  ::cockroach::roachpb::WriteBatchRequest* release_write_batch();
  ::cockroach::roachpb::WriteBatchRequest* mutable_write_batch();
  void set_allocated_write_batch(::cockroach::roachpb::WriteBatchRequest* write_batch);

  // .cockroach.roachpb.ExportRequest export = 32;
  bool has_export_() const;
  void clear_export_();
  static const int kExportFieldNumber = 32;
  private:
  const ::cockroach::roachpb::ExportRequest& _internal_export_() const;
  public:
  const ::cockroach::roachpb::ExportRequest& export_() const;
  ::cockroach::roachpb::ExportRequest* release_export_();
  ::cockroach::roachpb::ExportRequest* mutable_export_();
  void set_allocated_export_(::cockroach::roachpb::ExportRequest* export_);

  // .cockroach.roachpb.ImportRequest import = 34;
  bool has_import() const;
  void clear_import();
  static const int kImportFieldNumber = 34;
  private:
  const ::cockroach::roachpb::ImportRequest& _internal_import() const;
  public:
  const ::cockroach::roachpb::ImportRequest& import() const;
  ::cockroach::roachpb::ImportRequest* release_import();
  ::cockroach::roachpb::ImportRequest* mutable_import();
  void set_allocated_import(::cockroach::roachpb::ImportRequest* import);

  // .cockroach.roachpb.QueryTxnRequest query_txn = 33;
  bool has_query_txn() const;
  void clear_query_txn();
  static const int kQueryTxnFieldNumber = 33;
  private:
  const ::cockroach::roachpb::QueryTxnRequest& _internal_query_txn() const;
  public:
  const ::cockroach::roachpb::QueryTxnRequest& query_txn() const;
  ::cockroach::roachpb::QueryTxnRequest* release_query_txn();
  ::cockroach::roachpb::QueryTxnRequest* mutable_query_txn();
  void set_allocated_query_txn(::cockroach::roachpb::QueryTxnRequest* query_txn);

  // .cockroach.roachpb.QueryIntentRequest query_intent = 42;
  bool has_query_intent() const;
  void clear_query_intent();
  static const int kQueryIntentFieldNumber = 42;
  private:
  const ::cockroach::roachpb::QueryIntentRequest& _internal_query_intent() const;
  public:
  const ::cockroach::roachpb::QueryIntentRequest& query_intent() const;
  ::cockroach::roachpb::QueryIntentRequest* release_query_intent();
  ::cockroach::roachpb::QueryIntentRequest* mutable_query_intent();
  void set_allocated_query_intent(::cockroach::roachpb::QueryIntentRequest* query_intent);

  // .cockroach.roachpb.AdminScatterRequest admin_scatter = 36;
  bool has_admin_scatter() const;
  void clear_admin_scatter();
  static const int kAdminScatterFieldNumber = 36;
  private:
  const ::cockroach::roachpb::AdminScatterRequest& _internal_admin_scatter() const;
  public:
  const ::cockroach::roachpb::AdminScatterRequest& admin_scatter() const;
  ::cockroach::roachpb::AdminScatterRequest* release_admin_scatter();
  ::cockroach::roachpb::AdminScatterRequest* mutable_admin_scatter();
  void set_allocated_admin_scatter(::cockroach::roachpb::AdminScatterRequest* admin_scatter);

  // .cockroach.roachpb.AddSSTableRequest add_sstable = 37;
  bool has_add_sstable() const;
  void clear_add_sstable();
  static const int kAddSstableFieldNumber = 37;
  private:
  const ::cockroach::roachpb::AddSSTableRequest& _internal_add_sstable() const;
  public:
  const ::cockroach::roachpb::AddSSTableRequest& add_sstable() const;
  ::cockroach::roachpb::AddSSTableRequest* release_add_sstable();
  ::cockroach::roachpb::AddSSTableRequest* mutable_add_sstable();
  void set_allocated_add_sstable(::cockroach::roachpb::AddSSTableRequest* add_sstable);

  // .cockroach.roachpb.RecomputeStatsRequest recompute_stats = 39;
  bool has_recompute_stats() const;
  void clear_recompute_stats();
  static const int kRecomputeStatsFieldNumber = 39;
  private:
  const ::cockroach::roachpb::RecomputeStatsRequest& _internal_recompute_stats() const;
  public:
  const ::cockroach::roachpb::RecomputeStatsRequest& recompute_stats() const;
  ::cockroach::roachpb::RecomputeStatsRequest* release_recompute_stats();
  ::cockroach::roachpb::RecomputeStatsRequest* mutable_recompute_stats();
  void set_allocated_recompute_stats(::cockroach::roachpb::RecomputeStatsRequest* recompute_stats);

  // .cockroach.roachpb.RefreshRequest refresh = 40;
  bool has_refresh() const;
  void clear_refresh();
  static const int kRefreshFieldNumber = 40;
  private:
  const ::cockroach::roachpb::RefreshRequest& _internal_refresh() const;
  public:
  const ::cockroach::roachpb::RefreshRequest& refresh() const;
  ::cockroach::roachpb::RefreshRequest* release_refresh();
  ::cockroach::roachpb::RefreshRequest* mutable_refresh();
  void set_allocated_refresh(::cockroach::roachpb::RefreshRequest* refresh);

  // .cockroach.roachpb.RefreshRangeRequest refresh_range = 41;
  bool has_refresh_range() const;
  void clear_refresh_range();
  static const int kRefreshRangeFieldNumber = 41;
  private:
  const ::cockroach::roachpb::RefreshRangeRequest& _internal_refresh_range() const;
  public:
  const ::cockroach::roachpb::RefreshRangeRequest& refresh_range() const;
  ::cockroach::roachpb::RefreshRangeRequest* release_refresh_range();
  ::cockroach::roachpb::RefreshRangeRequest* mutable_refresh_range();
  void set_allocated_refresh_range(::cockroach::roachpb::RefreshRangeRequest* refresh_range);

  // .cockroach.roachpb.SubsumeRequest subsume = 43;
  bool has_subsume() const;
  void clear_subsume();
  static const int kSubsumeFieldNumber = 43;
  private:
  const ::cockroach::roachpb::SubsumeRequest& _internal_subsume() const;
  public:
  const ::cockroach::roachpb::SubsumeRequest& subsume() const;
  ::cockroach::roachpb::SubsumeRequest* release_subsume();
  ::cockroach::roachpb::SubsumeRequest* mutable_subsume();
  void set_allocated_subsume(::cockroach::roachpb::SubsumeRequest* subsume);

  // .cockroach.roachpb.RangeStatsRequest range_stats = 44;
  bool has_range_stats() const;
  void clear_range_stats();
  static const int kRangeStatsFieldNumber = 44;
  private:
  const ::cockroach::roachpb::RangeStatsRequest& _internal_range_stats() const;
  public:
  const ::cockroach::roachpb::RangeStatsRequest& range_stats() const;
  ::cockroach::roachpb::RangeStatsRequest* release_range_stats();
  ::cockroach::roachpb::RangeStatsRequest* mutable_range_stats();
  void set_allocated_range_stats(::cockroach::roachpb::RangeStatsRequest* range_stats);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RequestUnion)
 private:
  void set_has_get();
  void set_has_put();
  void set_has_conditional_put();
  void set_has_increment();
  void set_has_delete_();
  void set_has_delete_range();
  void set_has_clear_range();
  void set_has_revert_range();
  void set_has_scan();
  void set_has_begin_transaction();
  void set_has_end_transaction();
  void set_has_admin_split();
  void set_has_admin_unsplit();
  void set_has_admin_merge();
  void set_has_admin_transfer_lease();
  void set_has_admin_change_replicas();
  void set_has_admin_relocate_range();
  void set_has_heartbeat_txn();
  void set_has_gc();
  void set_has_push_txn();
  void set_has_recover_txn();
  void set_has_resolve_intent();
  void set_has_resolve_intent_range();
  void set_has_merge();
  void set_has_truncate_log();
  void set_has_request_lease();
  void set_has_reverse_scan();
  void set_has_compute_checksum();
  void set_has_check_consistency();
  void set_has_init_put();
  void set_has_transfer_lease();
  void set_has_lease_info();
  void set_has_write_batch();
  void set_has_export_();
  void set_has_import();
  void set_has_query_txn();
  void set_has_query_intent();
  void set_has_admin_scatter();
  void set_has_add_sstable();
  void set_has_recompute_stats();
  void set_has_refresh();
  void set_has_refresh_range();
  void set_has_subsume();
  void set_has_range_stats();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::cockroach::roachpb::GetRequest* get_;
    ::cockroach::roachpb::PutRequest* put_;
    ::cockroach::roachpb::ConditionalPutRequest* conditional_put_;
    ::cockroach::roachpb::IncrementRequest* increment_;
    ::cockroach::roachpb::DeleteRequest* delete__;
    ::cockroach::roachpb::DeleteRangeRequest* delete_range_;
    ::cockroach::roachpb::ClearRangeRequest* clear_range_;
    ::cockroach::roachpb::RevertRangeRequest* revert_range_;
    ::cockroach::roachpb::ScanRequest* scan_;
    ::cockroach::roachpb::BeginTransactionRequest* begin_transaction_;
    ::cockroach::roachpb::EndTransactionRequest* end_transaction_;
    ::cockroach::roachpb::AdminSplitRequest* admin_split_;
    ::cockroach::roachpb::AdminUnsplitRequest* admin_unsplit_;
    ::cockroach::roachpb::AdminMergeRequest* admin_merge_;
    ::cockroach::roachpb::AdminTransferLeaseRequest* admin_transfer_lease_;
    ::cockroach::roachpb::AdminChangeReplicasRequest* admin_change_replicas_;
    ::cockroach::roachpb::AdminRelocateRangeRequest* admin_relocate_range_;
    ::cockroach::roachpb::HeartbeatTxnRequest* heartbeat_txn_;
    ::cockroach::roachpb::GCRequest* gc_;
    ::cockroach::roachpb::PushTxnRequest* push_txn_;
    ::cockroach::roachpb::RecoverTxnRequest* recover_txn_;
    ::cockroach::roachpb::ResolveIntentRequest* resolve_intent_;
    ::cockroach::roachpb::ResolveIntentRangeRequest* resolve_intent_range_;
    ::cockroach::roachpb::MergeRequest* merge_;
    ::cockroach::roachpb::TruncateLogRequest* truncate_log_;
    ::cockroach::roachpb::RequestLeaseRequest* request_lease_;
    ::cockroach::roachpb::ReverseScanRequest* reverse_scan_;
    ::cockroach::roachpb::ComputeChecksumRequest* compute_checksum_;
    ::cockroach::roachpb::CheckConsistencyRequest* check_consistency_;
    ::cockroach::roachpb::InitPutRequest* init_put_;
    ::cockroach::roachpb::TransferLeaseRequest* transfer_lease_;
    ::cockroach::roachpb::LeaseInfoRequest* lease_info_;
    ::cockroach::roachpb::WriteBatchRequest* write_batch_;
    ::cockroach::roachpb::ExportRequest* export__;
    ::cockroach::roachpb::ImportRequest* import_;
    ::cockroach::roachpb::QueryTxnRequest* query_txn_;
    ::cockroach::roachpb::QueryIntentRequest* query_intent_;
    ::cockroach::roachpb::AdminScatterRequest* admin_scatter_;
    ::cockroach::roachpb::AddSSTableRequest* add_sstable_;
    ::cockroach::roachpb::RecomputeStatsRequest* recompute_stats_;
    ::cockroach::roachpb::RefreshRequest* refresh_;
    ::cockroach::roachpb::RefreshRangeRequest* refresh_range_;
    ::cockroach::roachpb::SubsumeRequest* subsume_;
    ::cockroach::roachpb::RangeStatsRequest* range_stats_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseUnion : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ResponseUnion) */ {
 public:
  ResponseUnion();
  virtual ~ResponseUnion();

  ResponseUnion(const ResponseUnion& from);

  inline ResponseUnion& operator=(const ResponseUnion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseUnion(ResponseUnion&& from) noexcept
    : ResponseUnion() {
    *this = ::std::move(from);
  }

  inline ResponseUnion& operator=(ResponseUnion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ResponseUnion& default_instance();

  enum ValueCase {
    kGet = 1,
    kPut = 2,
    kConditionalPut = 3,
    kIncrement = 4,
    kDelete = 5,
    kDeleteRange = 6,
    kClearRange = 38,
    kRevertRange = 48,
    kScan = 7,
    kBeginTransaction = 8,
    kEndTransaction = 9,
    kAdminSplit = 10,
    kAdminUnsplit = 47,
    kAdminMerge = 11,
    kAdminTransferLease = 29,
    kAdminChangeReplicas = 35,
    kAdminRelocateRange = 45,
    kHeartbeatTxn = 12,
    kGc = 13,
    kPushTxn = 14,
    kRecoverTxn = 46,
    kResolveIntent = 16,
    kResolveIntentRange = 17,
    kMerge = 18,
    kTruncateLog = 19,
    kRequestLease = 20,
    kReverseScan = 21,
    kComputeChecksum = 22,
    kCheckConsistency = 24,
    kInitPut = 26,
    kLeaseInfo = 30,
    kWriteBatch = 31,
    kExport = 32,
    kImport = 34,
    kQueryTxn = 33,
    kQueryIntent = 42,
    kAdminScatter = 36,
    kAddSstable = 37,
    kRecomputeStats = 39,
    kRefresh = 40,
    kRefreshRange = 41,
    kSubsume = 43,
    kRangeStats = 44,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseUnion* internal_default_instance() {
    return reinterpret_cast<const ResponseUnion*>(
               &_ResponseUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(ResponseUnion* other);
  friend void swap(ResponseUnion& a, ResponseUnion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseUnion* New() const final {
    return CreateMaybeMessage<ResponseUnion>(NULL);
  }

  ResponseUnion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseUnion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ResponseUnion& from);
  void MergeFrom(const ResponseUnion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseUnion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cockroach.roachpb.GetResponse get = 1;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 1;
  private:
  const ::cockroach::roachpb::GetResponse& _internal_get() const;
  public:
  const ::cockroach::roachpb::GetResponse& get() const;
  ::cockroach::roachpb::GetResponse* release_get();
  ::cockroach::roachpb::GetResponse* mutable_get();
  void set_allocated_get(::cockroach::roachpb::GetResponse* get);

  // .cockroach.roachpb.PutResponse put = 2;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 2;
  private:
  const ::cockroach::roachpb::PutResponse& _internal_put() const;
  public:
  const ::cockroach::roachpb::PutResponse& put() const;
  ::cockroach::roachpb::PutResponse* release_put();
  ::cockroach::roachpb::PutResponse* mutable_put();
  void set_allocated_put(::cockroach::roachpb::PutResponse* put);

  // .cockroach.roachpb.ConditionalPutResponse conditional_put = 3;
  bool has_conditional_put() const;
  void clear_conditional_put();
  static const int kConditionalPutFieldNumber = 3;
  private:
  const ::cockroach::roachpb::ConditionalPutResponse& _internal_conditional_put() const;
  public:
  const ::cockroach::roachpb::ConditionalPutResponse& conditional_put() const;
  ::cockroach::roachpb::ConditionalPutResponse* release_conditional_put();
  ::cockroach::roachpb::ConditionalPutResponse* mutable_conditional_put();
  void set_allocated_conditional_put(::cockroach::roachpb::ConditionalPutResponse* conditional_put);

  // .cockroach.roachpb.IncrementResponse increment = 4;
  bool has_increment() const;
  void clear_increment();
  static const int kIncrementFieldNumber = 4;
  private:
  const ::cockroach::roachpb::IncrementResponse& _internal_increment() const;
  public:
  const ::cockroach::roachpb::IncrementResponse& increment() const;
  ::cockroach::roachpb::IncrementResponse* release_increment();
  ::cockroach::roachpb::IncrementResponse* mutable_increment();
  void set_allocated_increment(::cockroach::roachpb::IncrementResponse* increment);

  // .cockroach.roachpb.DeleteResponse delete = 5;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  private:
  const ::cockroach::roachpb::DeleteResponse& _internal_delete_() const;
  public:
  const ::cockroach::roachpb::DeleteResponse& delete_() const;
  ::cockroach::roachpb::DeleteResponse* release_delete_();
  ::cockroach::roachpb::DeleteResponse* mutable_delete_();
  void set_allocated_delete_(::cockroach::roachpb::DeleteResponse* delete_);

  // .cockroach.roachpb.DeleteRangeResponse delete_range = 6;
  bool has_delete_range() const;
  void clear_delete_range();
  static const int kDeleteRangeFieldNumber = 6;
  private:
  const ::cockroach::roachpb::DeleteRangeResponse& _internal_delete_range() const;
  public:
  const ::cockroach::roachpb::DeleteRangeResponse& delete_range() const;
  ::cockroach::roachpb::DeleteRangeResponse* release_delete_range();
  ::cockroach::roachpb::DeleteRangeResponse* mutable_delete_range();
  void set_allocated_delete_range(::cockroach::roachpb::DeleteRangeResponse* delete_range);

  // .cockroach.roachpb.ClearRangeResponse clear_range = 38;
  bool has_clear_range() const;
  void clear_clear_range();
  static const int kClearRangeFieldNumber = 38;
  private:
  const ::cockroach::roachpb::ClearRangeResponse& _internal_clear_range() const;
  public:
  const ::cockroach::roachpb::ClearRangeResponse& clear_range() const;
  ::cockroach::roachpb::ClearRangeResponse* release_clear_range();
  ::cockroach::roachpb::ClearRangeResponse* mutable_clear_range();
  void set_allocated_clear_range(::cockroach::roachpb::ClearRangeResponse* clear_range);

  // .cockroach.roachpb.RevertRangeResponse revert_range = 48;
  bool has_revert_range() const;
  void clear_revert_range();
  static const int kRevertRangeFieldNumber = 48;
  private:
  const ::cockroach::roachpb::RevertRangeResponse& _internal_revert_range() const;
  public:
  const ::cockroach::roachpb::RevertRangeResponse& revert_range() const;
  ::cockroach::roachpb::RevertRangeResponse* release_revert_range();
  ::cockroach::roachpb::RevertRangeResponse* mutable_revert_range();
  void set_allocated_revert_range(::cockroach::roachpb::RevertRangeResponse* revert_range);

  // .cockroach.roachpb.ScanResponse scan = 7;
  bool has_scan() const;
  void clear_scan();
  static const int kScanFieldNumber = 7;
  private:
  const ::cockroach::roachpb::ScanResponse& _internal_scan() const;
  public:
  const ::cockroach::roachpb::ScanResponse& scan() const;
  ::cockroach::roachpb::ScanResponse* release_scan();
  ::cockroach::roachpb::ScanResponse* mutable_scan();
  void set_allocated_scan(::cockroach::roachpb::ScanResponse* scan);

  // .cockroach.roachpb.BeginTransactionResponse begin_transaction = 8;
  bool has_begin_transaction() const;
  void clear_begin_transaction();
  static const int kBeginTransactionFieldNumber = 8;
  private:
  const ::cockroach::roachpb::BeginTransactionResponse& _internal_begin_transaction() const;
  public:
  const ::cockroach::roachpb::BeginTransactionResponse& begin_transaction() const;
  ::cockroach::roachpb::BeginTransactionResponse* release_begin_transaction();
  ::cockroach::roachpb::BeginTransactionResponse* mutable_begin_transaction();
  void set_allocated_begin_transaction(::cockroach::roachpb::BeginTransactionResponse* begin_transaction);

  // .cockroach.roachpb.EndTransactionResponse end_transaction = 9;
  bool has_end_transaction() const;
  void clear_end_transaction();
  static const int kEndTransactionFieldNumber = 9;
  private:
  const ::cockroach::roachpb::EndTransactionResponse& _internal_end_transaction() const;
  public:
  const ::cockroach::roachpb::EndTransactionResponse& end_transaction() const;
  ::cockroach::roachpb::EndTransactionResponse* release_end_transaction();
  ::cockroach::roachpb::EndTransactionResponse* mutable_end_transaction();
  void set_allocated_end_transaction(::cockroach::roachpb::EndTransactionResponse* end_transaction);

  // .cockroach.roachpb.AdminSplitResponse admin_split = 10;
  bool has_admin_split() const;
  void clear_admin_split();
  static const int kAdminSplitFieldNumber = 10;
  private:
  const ::cockroach::roachpb::AdminSplitResponse& _internal_admin_split() const;
  public:
  const ::cockroach::roachpb::AdminSplitResponse& admin_split() const;
  ::cockroach::roachpb::AdminSplitResponse* release_admin_split();
  ::cockroach::roachpb::AdminSplitResponse* mutable_admin_split();
  void set_allocated_admin_split(::cockroach::roachpb::AdminSplitResponse* admin_split);

  // .cockroach.roachpb.AdminUnsplitResponse admin_unsplit = 47;
  bool has_admin_unsplit() const;
  void clear_admin_unsplit();
  static const int kAdminUnsplitFieldNumber = 47;
  private:
  const ::cockroach::roachpb::AdminUnsplitResponse& _internal_admin_unsplit() const;
  public:
  const ::cockroach::roachpb::AdminUnsplitResponse& admin_unsplit() const;
  ::cockroach::roachpb::AdminUnsplitResponse* release_admin_unsplit();
  ::cockroach::roachpb::AdminUnsplitResponse* mutable_admin_unsplit();
  void set_allocated_admin_unsplit(::cockroach::roachpb::AdminUnsplitResponse* admin_unsplit);

  // .cockroach.roachpb.AdminMergeResponse admin_merge = 11;
  bool has_admin_merge() const;
  void clear_admin_merge();
  static const int kAdminMergeFieldNumber = 11;
  private:
  const ::cockroach::roachpb::AdminMergeResponse& _internal_admin_merge() const;
  public:
  const ::cockroach::roachpb::AdminMergeResponse& admin_merge() const;
  ::cockroach::roachpb::AdminMergeResponse* release_admin_merge();
  ::cockroach::roachpb::AdminMergeResponse* mutable_admin_merge();
  void set_allocated_admin_merge(::cockroach::roachpb::AdminMergeResponse* admin_merge);

  // .cockroach.roachpb.AdminTransferLeaseResponse admin_transfer_lease = 29;
  bool has_admin_transfer_lease() const;
  void clear_admin_transfer_lease();
  static const int kAdminTransferLeaseFieldNumber = 29;
  private:
  const ::cockroach::roachpb::AdminTransferLeaseResponse& _internal_admin_transfer_lease() const;
  public:
  const ::cockroach::roachpb::AdminTransferLeaseResponse& admin_transfer_lease() const;
  ::cockroach::roachpb::AdminTransferLeaseResponse* release_admin_transfer_lease();
  ::cockroach::roachpb::AdminTransferLeaseResponse* mutable_admin_transfer_lease();
  void set_allocated_admin_transfer_lease(::cockroach::roachpb::AdminTransferLeaseResponse* admin_transfer_lease);

  // .cockroach.roachpb.AdminChangeReplicasResponse admin_change_replicas = 35;
  bool has_admin_change_replicas() const;
  void clear_admin_change_replicas();
  static const int kAdminChangeReplicasFieldNumber = 35;
  private:
  const ::cockroach::roachpb::AdminChangeReplicasResponse& _internal_admin_change_replicas() const;
  public:
  const ::cockroach::roachpb::AdminChangeReplicasResponse& admin_change_replicas() const;
  ::cockroach::roachpb::AdminChangeReplicasResponse* release_admin_change_replicas();
  ::cockroach::roachpb::AdminChangeReplicasResponse* mutable_admin_change_replicas();
  void set_allocated_admin_change_replicas(::cockroach::roachpb::AdminChangeReplicasResponse* admin_change_replicas);

  // .cockroach.roachpb.AdminRelocateRangeResponse admin_relocate_range = 45;
  bool has_admin_relocate_range() const;
  void clear_admin_relocate_range();
  static const int kAdminRelocateRangeFieldNumber = 45;
  private:
  const ::cockroach::roachpb::AdminRelocateRangeResponse& _internal_admin_relocate_range() const;
  public:
  const ::cockroach::roachpb::AdminRelocateRangeResponse& admin_relocate_range() const;
  ::cockroach::roachpb::AdminRelocateRangeResponse* release_admin_relocate_range();
  ::cockroach::roachpb::AdminRelocateRangeResponse* mutable_admin_relocate_range();
  void set_allocated_admin_relocate_range(::cockroach::roachpb::AdminRelocateRangeResponse* admin_relocate_range);

  // .cockroach.roachpb.HeartbeatTxnResponse heartbeat_txn = 12;
  bool has_heartbeat_txn() const;
  void clear_heartbeat_txn();
  static const int kHeartbeatTxnFieldNumber = 12;
  private:
  const ::cockroach::roachpb::HeartbeatTxnResponse& _internal_heartbeat_txn() const;
  public:
  const ::cockroach::roachpb::HeartbeatTxnResponse& heartbeat_txn() const;
  ::cockroach::roachpb::HeartbeatTxnResponse* release_heartbeat_txn();
  ::cockroach::roachpb::HeartbeatTxnResponse* mutable_heartbeat_txn();
  void set_allocated_heartbeat_txn(::cockroach::roachpb::HeartbeatTxnResponse* heartbeat_txn);

  // .cockroach.roachpb.GCResponse gc = 13;
  bool has_gc() const;
  void clear_gc();
  static const int kGcFieldNumber = 13;
  private:
  const ::cockroach::roachpb::GCResponse& _internal_gc() const;
  public:
  const ::cockroach::roachpb::GCResponse& gc() const;
  ::cockroach::roachpb::GCResponse* release_gc();
  ::cockroach::roachpb::GCResponse* mutable_gc();
  void set_allocated_gc(::cockroach::roachpb::GCResponse* gc);

  // .cockroach.roachpb.PushTxnResponse push_txn = 14;
  bool has_push_txn() const;
  void clear_push_txn();
  static const int kPushTxnFieldNumber = 14;
  private:
  const ::cockroach::roachpb::PushTxnResponse& _internal_push_txn() const;
  public:
  const ::cockroach::roachpb::PushTxnResponse& push_txn() const;
  ::cockroach::roachpb::PushTxnResponse* release_push_txn();
  ::cockroach::roachpb::PushTxnResponse* mutable_push_txn();
  void set_allocated_push_txn(::cockroach::roachpb::PushTxnResponse* push_txn);

  // .cockroach.roachpb.RecoverTxnResponse recover_txn = 46;
  bool has_recover_txn() const;
  void clear_recover_txn();
  static const int kRecoverTxnFieldNumber = 46;
  private:
  const ::cockroach::roachpb::RecoverTxnResponse& _internal_recover_txn() const;
  public:
  const ::cockroach::roachpb::RecoverTxnResponse& recover_txn() const;
  ::cockroach::roachpb::RecoverTxnResponse* release_recover_txn();
  ::cockroach::roachpb::RecoverTxnResponse* mutable_recover_txn();
  void set_allocated_recover_txn(::cockroach::roachpb::RecoverTxnResponse* recover_txn);

  // .cockroach.roachpb.ResolveIntentResponse resolve_intent = 16;
  bool has_resolve_intent() const;
  void clear_resolve_intent();
  static const int kResolveIntentFieldNumber = 16;
  private:
  const ::cockroach::roachpb::ResolveIntentResponse& _internal_resolve_intent() const;
  public:
  const ::cockroach::roachpb::ResolveIntentResponse& resolve_intent() const;
  ::cockroach::roachpb::ResolveIntentResponse* release_resolve_intent();
  ::cockroach::roachpb::ResolveIntentResponse* mutable_resolve_intent();
  void set_allocated_resolve_intent(::cockroach::roachpb::ResolveIntentResponse* resolve_intent);

  // .cockroach.roachpb.ResolveIntentRangeResponse resolve_intent_range = 17;
  bool has_resolve_intent_range() const;
  void clear_resolve_intent_range();
  static const int kResolveIntentRangeFieldNumber = 17;
  private:
  const ::cockroach::roachpb::ResolveIntentRangeResponse& _internal_resolve_intent_range() const;
  public:
  const ::cockroach::roachpb::ResolveIntentRangeResponse& resolve_intent_range() const;
  ::cockroach::roachpb::ResolveIntentRangeResponse* release_resolve_intent_range();
  ::cockroach::roachpb::ResolveIntentRangeResponse* mutable_resolve_intent_range();
  void set_allocated_resolve_intent_range(::cockroach::roachpb::ResolveIntentRangeResponse* resolve_intent_range);

  // .cockroach.roachpb.MergeResponse merge = 18;
  bool has_merge() const;
  void clear_merge();
  static const int kMergeFieldNumber = 18;
  private:
  const ::cockroach::roachpb::MergeResponse& _internal_merge() const;
  public:
  const ::cockroach::roachpb::MergeResponse& merge() const;
  ::cockroach::roachpb::MergeResponse* release_merge();
  ::cockroach::roachpb::MergeResponse* mutable_merge();
  void set_allocated_merge(::cockroach::roachpb::MergeResponse* merge);

  // .cockroach.roachpb.TruncateLogResponse truncate_log = 19;
  bool has_truncate_log() const;
  void clear_truncate_log();
  static const int kTruncateLogFieldNumber = 19;
  private:
  const ::cockroach::roachpb::TruncateLogResponse& _internal_truncate_log() const;
  public:
  const ::cockroach::roachpb::TruncateLogResponse& truncate_log() const;
  ::cockroach::roachpb::TruncateLogResponse* release_truncate_log();
  ::cockroach::roachpb::TruncateLogResponse* mutable_truncate_log();
  void set_allocated_truncate_log(::cockroach::roachpb::TruncateLogResponse* truncate_log);

  // .cockroach.roachpb.RequestLeaseResponse request_lease = 20;
  bool has_request_lease() const;
  void clear_request_lease();
  static const int kRequestLeaseFieldNumber = 20;
  private:
  const ::cockroach::roachpb::RequestLeaseResponse& _internal_request_lease() const;
  public:
  const ::cockroach::roachpb::RequestLeaseResponse& request_lease() const;
  ::cockroach::roachpb::RequestLeaseResponse* release_request_lease();
  ::cockroach::roachpb::RequestLeaseResponse* mutable_request_lease();
  void set_allocated_request_lease(::cockroach::roachpb::RequestLeaseResponse* request_lease);

  // .cockroach.roachpb.ReverseScanResponse reverse_scan = 21;
  bool has_reverse_scan() const;
  void clear_reverse_scan();
  static const int kReverseScanFieldNumber = 21;
  private:
  const ::cockroach::roachpb::ReverseScanResponse& _internal_reverse_scan() const;
  public:
  const ::cockroach::roachpb::ReverseScanResponse& reverse_scan() const;
  ::cockroach::roachpb::ReverseScanResponse* release_reverse_scan();
  ::cockroach::roachpb::ReverseScanResponse* mutable_reverse_scan();
  void set_allocated_reverse_scan(::cockroach::roachpb::ReverseScanResponse* reverse_scan);

  // .cockroach.roachpb.ComputeChecksumResponse compute_checksum = 22;
  bool has_compute_checksum() const;
  void clear_compute_checksum();
  static const int kComputeChecksumFieldNumber = 22;
  private:
  const ::cockroach::roachpb::ComputeChecksumResponse& _internal_compute_checksum() const;
  public:
  const ::cockroach::roachpb::ComputeChecksumResponse& compute_checksum() const;
  ::cockroach::roachpb::ComputeChecksumResponse* release_compute_checksum();
  ::cockroach::roachpb::ComputeChecksumResponse* mutable_compute_checksum();
  void set_allocated_compute_checksum(::cockroach::roachpb::ComputeChecksumResponse* compute_checksum);

  // .cockroach.roachpb.CheckConsistencyResponse check_consistency = 24;
  bool has_check_consistency() const;
  void clear_check_consistency();
  static const int kCheckConsistencyFieldNumber = 24;
  private:
  const ::cockroach::roachpb::CheckConsistencyResponse& _internal_check_consistency() const;
  public:
  const ::cockroach::roachpb::CheckConsistencyResponse& check_consistency() const;
  ::cockroach::roachpb::CheckConsistencyResponse* release_check_consistency();
  ::cockroach::roachpb::CheckConsistencyResponse* mutable_check_consistency();
  void set_allocated_check_consistency(::cockroach::roachpb::CheckConsistencyResponse* check_consistency);

  // .cockroach.roachpb.InitPutResponse init_put = 26;
  bool has_init_put() const;
  void clear_init_put();
  static const int kInitPutFieldNumber = 26;
  private:
  const ::cockroach::roachpb::InitPutResponse& _internal_init_put() const;
  public:
  const ::cockroach::roachpb::InitPutResponse& init_put() const;
  ::cockroach::roachpb::InitPutResponse* release_init_put();
  ::cockroach::roachpb::InitPutResponse* mutable_init_put();
  void set_allocated_init_put(::cockroach::roachpb::InitPutResponse* init_put);

  // .cockroach.roachpb.LeaseInfoResponse lease_info = 30;
  bool has_lease_info() const;
  void clear_lease_info();
  static const int kLeaseInfoFieldNumber = 30;
  private:
  const ::cockroach::roachpb::LeaseInfoResponse& _internal_lease_info() const;
  public:
  const ::cockroach::roachpb::LeaseInfoResponse& lease_info() const;
  ::cockroach::roachpb::LeaseInfoResponse* release_lease_info();
  ::cockroach::roachpb::LeaseInfoResponse* mutable_lease_info();
  void set_allocated_lease_info(::cockroach::roachpb::LeaseInfoResponse* lease_info);

  // .cockroach.roachpb.WriteBatchResponse write_batch = 31;
  bool has_write_batch() const;
  void clear_write_batch();
  static const int kWriteBatchFieldNumber = 31;
  private:
  const ::cockroach::roachpb::WriteBatchResponse& _internal_write_batch() const;
  public:
  const ::cockroach::roachpb::WriteBatchResponse& write_batch() const;
  ::cockroach::roachpb::WriteBatchResponse* release_write_batch();
  ::cockroach::roachpb::WriteBatchResponse* mutable_write_batch();
  void set_allocated_write_batch(::cockroach::roachpb::WriteBatchResponse* write_batch);

  // .cockroach.roachpb.ExportResponse export = 32;
  bool has_export_() const;
  void clear_export_();
  static const int kExportFieldNumber = 32;
  private:
  const ::cockroach::roachpb::ExportResponse& _internal_export_() const;
  public:
  const ::cockroach::roachpb::ExportResponse& export_() const;
  ::cockroach::roachpb::ExportResponse* release_export_();
  ::cockroach::roachpb::ExportResponse* mutable_export_();
  void set_allocated_export_(::cockroach::roachpb::ExportResponse* export_);

  // .cockroach.roachpb.ImportResponse import = 34;
  bool has_import() const;
  void clear_import();
  static const int kImportFieldNumber = 34;
  private:
  const ::cockroach::roachpb::ImportResponse& _internal_import() const;
  public:
  const ::cockroach::roachpb::ImportResponse& import() const;
  ::cockroach::roachpb::ImportResponse* release_import();
  ::cockroach::roachpb::ImportResponse* mutable_import();
  void set_allocated_import(::cockroach::roachpb::ImportResponse* import);

  // .cockroach.roachpb.QueryTxnResponse query_txn = 33;
  bool has_query_txn() const;
  void clear_query_txn();
  static const int kQueryTxnFieldNumber = 33;
  private:
  const ::cockroach::roachpb::QueryTxnResponse& _internal_query_txn() const;
  public:
  const ::cockroach::roachpb::QueryTxnResponse& query_txn() const;
  ::cockroach::roachpb::QueryTxnResponse* release_query_txn();
  ::cockroach::roachpb::QueryTxnResponse* mutable_query_txn();
  void set_allocated_query_txn(::cockroach::roachpb::QueryTxnResponse* query_txn);

  // .cockroach.roachpb.QueryIntentResponse query_intent = 42;
  bool has_query_intent() const;
  void clear_query_intent();
  static const int kQueryIntentFieldNumber = 42;
  private:
  const ::cockroach::roachpb::QueryIntentResponse& _internal_query_intent() const;
  public:
  const ::cockroach::roachpb::QueryIntentResponse& query_intent() const;
  ::cockroach::roachpb::QueryIntentResponse* release_query_intent();
  ::cockroach::roachpb::QueryIntentResponse* mutable_query_intent();
  void set_allocated_query_intent(::cockroach::roachpb::QueryIntentResponse* query_intent);

  // .cockroach.roachpb.AdminScatterResponse admin_scatter = 36;
  bool has_admin_scatter() const;
  void clear_admin_scatter();
  static const int kAdminScatterFieldNumber = 36;
  private:
  const ::cockroach::roachpb::AdminScatterResponse& _internal_admin_scatter() const;
  public:
  const ::cockroach::roachpb::AdminScatterResponse& admin_scatter() const;
  ::cockroach::roachpb::AdminScatterResponse* release_admin_scatter();
  ::cockroach::roachpb::AdminScatterResponse* mutable_admin_scatter();
  void set_allocated_admin_scatter(::cockroach::roachpb::AdminScatterResponse* admin_scatter);

  // .cockroach.roachpb.AddSSTableResponse add_sstable = 37;
  bool has_add_sstable() const;
  void clear_add_sstable();
  static const int kAddSstableFieldNumber = 37;
  private:
  const ::cockroach::roachpb::AddSSTableResponse& _internal_add_sstable() const;
  public:
  const ::cockroach::roachpb::AddSSTableResponse& add_sstable() const;
  ::cockroach::roachpb::AddSSTableResponse* release_add_sstable();
  ::cockroach::roachpb::AddSSTableResponse* mutable_add_sstable();
  void set_allocated_add_sstable(::cockroach::roachpb::AddSSTableResponse* add_sstable);

  // .cockroach.roachpb.RecomputeStatsResponse recompute_stats = 39;
  bool has_recompute_stats() const;
  void clear_recompute_stats();
  static const int kRecomputeStatsFieldNumber = 39;
  private:
  const ::cockroach::roachpb::RecomputeStatsResponse& _internal_recompute_stats() const;
  public:
  const ::cockroach::roachpb::RecomputeStatsResponse& recompute_stats() const;
  ::cockroach::roachpb::RecomputeStatsResponse* release_recompute_stats();
  ::cockroach::roachpb::RecomputeStatsResponse* mutable_recompute_stats();
  void set_allocated_recompute_stats(::cockroach::roachpb::RecomputeStatsResponse* recompute_stats);

  // .cockroach.roachpb.RefreshResponse refresh = 40;
  bool has_refresh() const;
  void clear_refresh();
  static const int kRefreshFieldNumber = 40;
  private:
  const ::cockroach::roachpb::RefreshResponse& _internal_refresh() const;
  public:
  const ::cockroach::roachpb::RefreshResponse& refresh() const;
  ::cockroach::roachpb::RefreshResponse* release_refresh();
  ::cockroach::roachpb::RefreshResponse* mutable_refresh();
  void set_allocated_refresh(::cockroach::roachpb::RefreshResponse* refresh);

  // .cockroach.roachpb.RefreshRangeResponse refresh_range = 41;
  bool has_refresh_range() const;
  void clear_refresh_range();
  static const int kRefreshRangeFieldNumber = 41;
  private:
  const ::cockroach::roachpb::RefreshRangeResponse& _internal_refresh_range() const;
  public:
  const ::cockroach::roachpb::RefreshRangeResponse& refresh_range() const;
  ::cockroach::roachpb::RefreshRangeResponse* release_refresh_range();
  ::cockroach::roachpb::RefreshRangeResponse* mutable_refresh_range();
  void set_allocated_refresh_range(::cockroach::roachpb::RefreshRangeResponse* refresh_range);

  // .cockroach.roachpb.SubsumeResponse subsume = 43;
  bool has_subsume() const;
  void clear_subsume();
  static const int kSubsumeFieldNumber = 43;
  private:
  const ::cockroach::roachpb::SubsumeResponse& _internal_subsume() const;
  public:
  const ::cockroach::roachpb::SubsumeResponse& subsume() const;
  ::cockroach::roachpb::SubsumeResponse* release_subsume();
  ::cockroach::roachpb::SubsumeResponse* mutable_subsume();
  void set_allocated_subsume(::cockroach::roachpb::SubsumeResponse* subsume);

  // .cockroach.roachpb.RangeStatsResponse range_stats = 44;
  bool has_range_stats() const;
  void clear_range_stats();
  static const int kRangeStatsFieldNumber = 44;
  private:
  const ::cockroach::roachpb::RangeStatsResponse& _internal_range_stats() const;
  public:
  const ::cockroach::roachpb::RangeStatsResponse& range_stats() const;
  ::cockroach::roachpb::RangeStatsResponse* release_range_stats();
  ::cockroach::roachpb::RangeStatsResponse* mutable_range_stats();
  void set_allocated_range_stats(::cockroach::roachpb::RangeStatsResponse* range_stats);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ResponseUnion)
 private:
  void set_has_get();
  void set_has_put();
  void set_has_conditional_put();
  void set_has_increment();
  void set_has_delete_();
  void set_has_delete_range();
  void set_has_clear_range();
  void set_has_revert_range();
  void set_has_scan();
  void set_has_begin_transaction();
  void set_has_end_transaction();
  void set_has_admin_split();
  void set_has_admin_unsplit();
  void set_has_admin_merge();
  void set_has_admin_transfer_lease();
  void set_has_admin_change_replicas();
  void set_has_admin_relocate_range();
  void set_has_heartbeat_txn();
  void set_has_gc();
  void set_has_push_txn();
  void set_has_recover_txn();
  void set_has_resolve_intent();
  void set_has_resolve_intent_range();
  void set_has_merge();
  void set_has_truncate_log();
  void set_has_request_lease();
  void set_has_reverse_scan();
  void set_has_compute_checksum();
  void set_has_check_consistency();
  void set_has_init_put();
  void set_has_lease_info();
  void set_has_write_batch();
  void set_has_export_();
  void set_has_import();
  void set_has_query_txn();
  void set_has_query_intent();
  void set_has_admin_scatter();
  void set_has_add_sstable();
  void set_has_recompute_stats();
  void set_has_refresh();
  void set_has_refresh_range();
  void set_has_subsume();
  void set_has_range_stats();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::cockroach::roachpb::GetResponse* get_;
    ::cockroach::roachpb::PutResponse* put_;
    ::cockroach::roachpb::ConditionalPutResponse* conditional_put_;
    ::cockroach::roachpb::IncrementResponse* increment_;
    ::cockroach::roachpb::DeleteResponse* delete__;
    ::cockroach::roachpb::DeleteRangeResponse* delete_range_;
    ::cockroach::roachpb::ClearRangeResponse* clear_range_;
    ::cockroach::roachpb::RevertRangeResponse* revert_range_;
    ::cockroach::roachpb::ScanResponse* scan_;
    ::cockroach::roachpb::BeginTransactionResponse* begin_transaction_;
    ::cockroach::roachpb::EndTransactionResponse* end_transaction_;
    ::cockroach::roachpb::AdminSplitResponse* admin_split_;
    ::cockroach::roachpb::AdminUnsplitResponse* admin_unsplit_;
    ::cockroach::roachpb::AdminMergeResponse* admin_merge_;
    ::cockroach::roachpb::AdminTransferLeaseResponse* admin_transfer_lease_;
    ::cockroach::roachpb::AdminChangeReplicasResponse* admin_change_replicas_;
    ::cockroach::roachpb::AdminRelocateRangeResponse* admin_relocate_range_;
    ::cockroach::roachpb::HeartbeatTxnResponse* heartbeat_txn_;
    ::cockroach::roachpb::GCResponse* gc_;
    ::cockroach::roachpb::PushTxnResponse* push_txn_;
    ::cockroach::roachpb::RecoverTxnResponse* recover_txn_;
    ::cockroach::roachpb::ResolveIntentResponse* resolve_intent_;
    ::cockroach::roachpb::ResolveIntentRangeResponse* resolve_intent_range_;
    ::cockroach::roachpb::MergeResponse* merge_;
    ::cockroach::roachpb::TruncateLogResponse* truncate_log_;
    ::cockroach::roachpb::RequestLeaseResponse* request_lease_;
    ::cockroach::roachpb::ReverseScanResponse* reverse_scan_;
    ::cockroach::roachpb::ComputeChecksumResponse* compute_checksum_;
    ::cockroach::roachpb::CheckConsistencyResponse* check_consistency_;
    ::cockroach::roachpb::InitPutResponse* init_put_;
    ::cockroach::roachpb::LeaseInfoResponse* lease_info_;
    ::cockroach::roachpb::WriteBatchResponse* write_batch_;
    ::cockroach::roachpb::ExportResponse* export__;
    ::cockroach::roachpb::ImportResponse* import_;
    ::cockroach::roachpb::QueryTxnResponse* query_txn_;
    ::cockroach::roachpb::QueryIntentResponse* query_intent_;
    ::cockroach::roachpb::AdminScatterResponse* admin_scatter_;
    ::cockroach::roachpb::AddSSTableResponse* add_sstable_;
    ::cockroach::roachpb::RecomputeStatsResponse* recompute_stats_;
    ::cockroach::roachpb::RefreshResponse* refresh_;
    ::cockroach::roachpb::RefreshRangeResponse* refresh_range_;
    ::cockroach::roachpb::SubsumeResponse* subsume_;
    ::cockroach::roachpb::RangeStatsResponse* range_stats_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 2;
  private:
  const ::cockroach::roachpb::ReplicaDescriptor& _internal_replica() const;
  public:
  const ::cockroach::roachpb::ReplicaDescriptor& replica() const;
  ::cockroach::roachpb::ReplicaDescriptor* release_replica();
  ::cockroach::roachpb::ReplicaDescriptor* mutable_replica();
  void set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica);

  // .cockroach.roachpb.Transaction txn = 5;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 5;
  private:
  const ::cockroach::roachpb::Transaction& _internal_txn() const;
  public:
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* release_txn();
  ::cockroach::roachpb::Transaction* mutable_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  // .cockroach.roachpb.ScanOptions scan_options = 12;
  bool has_scan_options() const;
  void clear_scan_options();
  static const int kScanOptionsFieldNumber = 12;
  private:
  const ::cockroach::roachpb::ScanOptions& _internal_scan_options() const;
  public:
  const ::cockroach::roachpb::ScanOptions& scan_options() const;
  ::cockroach::roachpb::ScanOptions* release_scan_options();
  ::cockroach::roachpb::ScanOptions* mutable_scan_options();
  void set_allocated_scan_options(::cockroach::roachpb::ScanOptions* scan_options);

  void clear_range_id();
  static const int kRangeIdFieldNumber = 3;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  void clear_user_priority();
  static const int kUserPriorityFieldNumber = 4;
  double user_priority() const;
  void set_user_priority(double value);

  // int64 max_span_request_keys = 8;
  void clear_max_span_request_keys();
  static const int kMaxSpanRequestKeysFieldNumber = 8;
  ::google::protobuf::int64 max_span_request_keys() const;
  void set_max_span_request_keys(::google::protobuf::int64 value);

  // .cockroach.roachpb.ReadConsistencyType read_consistency = 6;
  void clear_read_consistency();
  static const int kReadConsistencyFieldNumber = 6;
  ::cockroach::roachpb::ReadConsistencyType read_consistency() const;
  void set_read_consistency(::cockroach::roachpb::ReadConsistencyType value);

  void clear_gateway_node_id();
  static const int kGatewayNodeIdFieldNumber = 11;
  ::google::protobuf::int32 gateway_node_id() const;
  void set_gateway_node_id(::google::protobuf::int32 value);

  // bool distinct_spans = 9;
  void clear_distinct_spans();
  static const int kDistinctSpansFieldNumber = 9;
  bool distinct_spans() const;
  void set_distinct_spans(bool value);

  // bool return_range_info = 10;
  void clear_return_range_info();
  static const int kReturnRangeInfoFieldNumber = 10;
  bool return_range_info() const;
  void set_return_range_info(bool value);

  // bool async_consensus = 13;
  void clear_async_consensus();
  static const int kAsyncConsensusFieldNumber = 13;
  bool async_consensus() const;
  void set_async_consensus(bool value);

  // bool defer_write_too_old_error = 14;
  void clear_defer_write_too_old_error();
  static const int kDeferWriteTooOldErrorFieldNumber = 14;
  bool defer_write_too_old_error() const;
  void set_defer_write_too_old_error(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  ::cockroach::roachpb::ReplicaDescriptor* replica_;
  ::cockroach::roachpb::Transaction* txn_;
  ::cockroach::roachpb::ScanOptions* scan_options_;
  ::google::protobuf::int64 range_id_;
  double user_priority_;
  ::google::protobuf::int64 max_span_request_keys_;
  int read_consistency_;
  ::google::protobuf::int32 gateway_node_id_;
  bool distinct_spans_;
  bool return_range_info_;
  bool async_consensus_;
  bool defer_write_too_old_error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.BatchRequest) */ {
 public:
  BatchRequest();
  virtual ~BatchRequest();

  BatchRequest(const BatchRequest& from);

  inline BatchRequest& operator=(const BatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchRequest(BatchRequest&& from) noexcept
    : BatchRequest() {
    *this = ::std::move(from);
  }

  inline BatchRequest& operator=(BatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const BatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchRequest* internal_default_instance() {
    return reinterpret_cast<const BatchRequest*>(
               &_BatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  void Swap(BatchRequest* other);
  friend void swap(BatchRequest& a, BatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchRequest* New() const final {
    return CreateMaybeMessage<BatchRequest>(NULL);
  }

  BatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BatchRequest& from);
  void MergeFrom(const BatchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 2;
  ::cockroach::roachpb::RequestUnion* mutable_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RequestUnion >*
      mutable_requests();
  const ::cockroach::roachpb::RequestUnion& requests(int index) const;
  ::cockroach::roachpb::RequestUnion* add_requests();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RequestUnion >&
      requests() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::Header& _internal_header() const;
  public:
  const ::cockroach::roachpb::Header& header() const;
  ::cockroach::roachpb::Header* release_header();
  ::cockroach::roachpb::Header* mutable_header();
  void set_allocated_header(::cockroach::roachpb::Header* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.BatchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RequestUnion > requests_;
  ::cockroach::roachpb::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchResponse_Header : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.BatchResponse.Header) */ {
 public:
  BatchResponse_Header();
  virtual ~BatchResponse_Header();

  BatchResponse_Header(const BatchResponse_Header& from);

  inline BatchResponse_Header& operator=(const BatchResponse_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchResponse_Header(BatchResponse_Header&& from) noexcept
    : BatchResponse_Header() {
    *this = ::std::move(from);
  }

  inline BatchResponse_Header& operator=(BatchResponse_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const BatchResponse_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchResponse_Header* internal_default_instance() {
    return reinterpret_cast<const BatchResponse_Header*>(
               &_BatchResponse_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  void Swap(BatchResponse_Header* other);
  friend void swap(BatchResponse_Header& a, BatchResponse_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchResponse_Header* New() const final {
    return CreateMaybeMessage<BatchResponse_Header>(NULL);
  }

  BatchResponse_Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchResponse_Header>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BatchResponse_Header& from);
  void MergeFrom(const BatchResponse_Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchResponse_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int collected_spans_size() const;
  void clear_collected_spans();
  static const int kCollectedSpansFieldNumber = 6;
  ::cockroach::util::tracing::RecordedSpan* mutable_collected_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::util::tracing::RecordedSpan >*
      mutable_collected_spans();
  const ::cockroach::util::tracing::RecordedSpan& collected_spans(int index) const;
  ::cockroach::util::tracing::RecordedSpan* add_collected_spans();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::util::tracing::RecordedSpan >&
      collected_spans() const;

  // .cockroach.roachpb.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::cockroach::roachpb::Error& _internal_error() const;
  public:
  const ::cockroach::roachpb::Error& error() const;
  ::cockroach::roachpb::Error* release_error();
  ::cockroach::roachpb::Error* mutable_error();
  void set_allocated_error(::cockroach::roachpb::Error* error);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  // .cockroach.roachpb.Transaction txn = 3;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 3;
  private:
  const ::cockroach::roachpb::Transaction& _internal_txn() const;
  public:
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* release_txn();
  ::cockroach::roachpb::Transaction* mutable_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  bool has_now() const;
  void clear_now();
  static const int kNowFieldNumber = 5;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_now() const;
  public:
  const ::cockroach::util::hlc::Timestamp& now() const;
  ::cockroach::util::hlc::Timestamp* release_now();
  ::cockroach::util::hlc::Timestamp* mutable_now();
  void set_allocated_now(::cockroach::util::hlc::Timestamp* now);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.BatchResponse.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::util::tracing::RecordedSpan > collected_spans_;
  ::cockroach::roachpb::Error* error_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  ::cockroach::roachpb::Transaction* txn_;
  ::cockroach::util::hlc::Timestamp* now_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.BatchResponse) */ {
 public:
  BatchResponse();
  virtual ~BatchResponse();

  BatchResponse(const BatchResponse& from);

  inline BatchResponse& operator=(const BatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchResponse(BatchResponse&& from) noexcept
    : BatchResponse() {
    *this = ::std::move(from);
  }

  inline BatchResponse& operator=(BatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const BatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchResponse* internal_default_instance() {
    return reinterpret_cast<const BatchResponse*>(
               &_BatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  void Swap(BatchResponse* other);
  friend void swap(BatchResponse& a, BatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchResponse* New() const final {
    return CreateMaybeMessage<BatchResponse>(NULL);
  }

  BatchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BatchResponse& from);
  void MergeFrom(const BatchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BatchResponse_Header Header;

  // accessors -------------------------------------------------------

  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 2;
  ::cockroach::roachpb::ResponseUnion* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ResponseUnion >*
      mutable_responses();
  const ::cockroach::roachpb::ResponseUnion& responses(int index) const;
  ::cockroach::roachpb::ResponseUnion* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ResponseUnion >&
      responses() const;

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::BatchResponse_Header& _internal_header() const;
  public:
  const ::cockroach::roachpb::BatchResponse_Header& header() const;
  ::cockroach::roachpb::BatchResponse_Header* release_header();
  ::cockroach::roachpb::BatchResponse_Header* mutable_header();
  void set_allocated_header(::cockroach::roachpb::BatchResponse_Header* header);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.BatchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ResponseUnion > responses_;
  ::cockroach::roachpb::BatchResponse_Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeFeedRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeFeedRequest) */ {
 public:
  RangeFeedRequest();
  virtual ~RangeFeedRequest();

  RangeFeedRequest(const RangeFeedRequest& from);

  inline RangeFeedRequest& operator=(const RangeFeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeFeedRequest(RangeFeedRequest&& from) noexcept
    : RangeFeedRequest() {
    *this = ::std::move(from);
  }

  inline RangeFeedRequest& operator=(RangeFeedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeFeedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeFeedRequest* internal_default_instance() {
    return reinterpret_cast<const RangeFeedRequest*>(
               &_RangeFeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  void Swap(RangeFeedRequest* other);
  friend void swap(RangeFeedRequest& a, RangeFeedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeFeedRequest* New() const final {
    return CreateMaybeMessage<RangeFeedRequest>(NULL);
  }

  RangeFeedRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeFeedRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeFeedRequest& from);
  void MergeFrom(const RangeFeedRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeFeedRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::cockroach::roachpb::Header& _internal_header() const;
  public:
  const ::cockroach::roachpb::Header& header() const;
  ::cockroach::roachpb::Header* release_header();
  ::cockroach::roachpb::Header* mutable_header();
  void set_allocated_header(::cockroach::roachpb::Header* header);

  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Span& _internal_span() const;
  public:
  const ::cockroach::roachpb::Span& span() const;
  ::cockroach::roachpb::Span* release_span();
  ::cockroach::roachpb::Span* mutable_span();
  void set_allocated_span(::cockroach::roachpb::Span* span);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeFeedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::Header* header_;
  ::cockroach::roachpb::Span* span_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeFeedValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeFeedValue) */ {
 public:
  RangeFeedValue();
  virtual ~RangeFeedValue();

  RangeFeedValue(const RangeFeedValue& from);

  inline RangeFeedValue& operator=(const RangeFeedValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeFeedValue(RangeFeedValue&& from) noexcept
    : RangeFeedValue() {
    *this = ::std::move(from);
  }

  inline RangeFeedValue& operator=(RangeFeedValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeFeedValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeFeedValue* internal_default_instance() {
    return reinterpret_cast<const RangeFeedValue*>(
               &_RangeFeedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  void Swap(RangeFeedValue* other);
  friend void swap(RangeFeedValue& a, RangeFeedValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeFeedValue* New() const final {
    return CreateMaybeMessage<RangeFeedValue>(NULL);
  }

  RangeFeedValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeFeedValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeFeedValue& from);
  void MergeFrom(const RangeFeedValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeFeedValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::cockroach::roachpb::Value& _internal_value() const;
  public:
  const ::cockroach::roachpb::Value& value() const;
  ::cockroach::roachpb::Value* release_value();
  ::cockroach::roachpb::Value* mutable_value();
  void set_allocated_value(::cockroach::roachpb::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeFeedValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::cockroach::roachpb::Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeFeedCheckpoint : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeFeedCheckpoint) */ {
 public:
  RangeFeedCheckpoint();
  virtual ~RangeFeedCheckpoint();

  RangeFeedCheckpoint(const RangeFeedCheckpoint& from);

  inline RangeFeedCheckpoint& operator=(const RangeFeedCheckpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeFeedCheckpoint(RangeFeedCheckpoint&& from) noexcept
    : RangeFeedCheckpoint() {
    *this = ::std::move(from);
  }

  inline RangeFeedCheckpoint& operator=(RangeFeedCheckpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeFeedCheckpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeFeedCheckpoint* internal_default_instance() {
    return reinterpret_cast<const RangeFeedCheckpoint*>(
               &_RangeFeedCheckpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  void Swap(RangeFeedCheckpoint* other);
  friend void swap(RangeFeedCheckpoint& a, RangeFeedCheckpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeFeedCheckpoint* New() const final {
    return CreateMaybeMessage<RangeFeedCheckpoint>(NULL);
  }

  RangeFeedCheckpoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeFeedCheckpoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeFeedCheckpoint& from);
  void MergeFrom(const RangeFeedCheckpoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeFeedCheckpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 1;
  private:
  const ::cockroach::roachpb::Span& _internal_span() const;
  public:
  const ::cockroach::roachpb::Span& span() const;
  ::cockroach::roachpb::Span* release_span();
  ::cockroach::roachpb::Span* mutable_span();
  void set_allocated_span(::cockroach::roachpb::Span* span);

  bool has_resolved_ts() const;
  void clear_resolved_ts();
  static const int kResolvedTsFieldNumber = 2;
  private:
  const ::cockroach::util::hlc::Timestamp& _internal_resolved_ts() const;
  public:
  const ::cockroach::util::hlc::Timestamp& resolved_ts() const;
  ::cockroach::util::hlc::Timestamp* release_resolved_ts();
  ::cockroach::util::hlc::Timestamp* mutable_resolved_ts();
  void set_allocated_resolved_ts(::cockroach::util::hlc::Timestamp* resolved_ts);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeFeedCheckpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::Span* span_;
  ::cockroach::util::hlc::Timestamp* resolved_ts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeFeedError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeFeedError) */ {
 public:
  RangeFeedError();
  virtual ~RangeFeedError();

  RangeFeedError(const RangeFeedError& from);

  inline RangeFeedError& operator=(const RangeFeedError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeFeedError(RangeFeedError&& from) noexcept
    : RangeFeedError() {
    *this = ::std::move(from);
  }

  inline RangeFeedError& operator=(RangeFeedError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeFeedError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeFeedError* internal_default_instance() {
    return reinterpret_cast<const RangeFeedError*>(
               &_RangeFeedError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  void Swap(RangeFeedError* other);
  friend void swap(RangeFeedError& a, RangeFeedError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeFeedError* New() const final {
    return CreateMaybeMessage<RangeFeedError>(NULL);
  }

  RangeFeedError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeFeedError>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeFeedError& from);
  void MergeFrom(const RangeFeedError& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeFeedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::cockroach::roachpb::Error& _internal_error() const;
  public:
  const ::cockroach::roachpb::Error& error() const;
  ::cockroach::roachpb::Error* release_error();
  ::cockroach::roachpb::Error* mutable_error();
  void set_allocated_error(::cockroach::roachpb::Error* error);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeFeedError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::Error* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeFeedEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeFeedEvent) */ {
 public:
  RangeFeedEvent();
  virtual ~RangeFeedEvent();

  RangeFeedEvent(const RangeFeedEvent& from);

  inline RangeFeedEvent& operator=(const RangeFeedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeFeedEvent(RangeFeedEvent&& from) noexcept
    : RangeFeedEvent() {
    *this = ::std::move(from);
  }

  inline RangeFeedEvent& operator=(RangeFeedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeFeedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeFeedEvent* internal_default_instance() {
    return reinterpret_cast<const RangeFeedEvent*>(
               &_RangeFeedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  void Swap(RangeFeedEvent* other);
  friend void swap(RangeFeedEvent& a, RangeFeedEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeFeedEvent* New() const final {
    return CreateMaybeMessage<RangeFeedEvent>(NULL);
  }

  RangeFeedEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeFeedEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeFeedEvent& from);
  void MergeFrom(const RangeFeedEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeFeedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cockroach.roachpb.RangeFeedValue val = 1;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  private:
  const ::cockroach::roachpb::RangeFeedValue& _internal_val() const;
  public:
  const ::cockroach::roachpb::RangeFeedValue& val() const;
  ::cockroach::roachpb::RangeFeedValue* release_val();
  ::cockroach::roachpb::RangeFeedValue* mutable_val();
  void set_allocated_val(::cockroach::roachpb::RangeFeedValue* val);

  // .cockroach.roachpb.RangeFeedCheckpoint checkpoint = 2;
  bool has_checkpoint() const;
  void clear_checkpoint();
  static const int kCheckpointFieldNumber = 2;
  private:
  const ::cockroach::roachpb::RangeFeedCheckpoint& _internal_checkpoint() const;
  public:
  const ::cockroach::roachpb::RangeFeedCheckpoint& checkpoint() const;
  ::cockroach::roachpb::RangeFeedCheckpoint* release_checkpoint();
  ::cockroach::roachpb::RangeFeedCheckpoint* mutable_checkpoint();
  void set_allocated_checkpoint(::cockroach::roachpb::RangeFeedCheckpoint* checkpoint);

  // .cockroach.roachpb.RangeFeedError error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  private:
  const ::cockroach::roachpb::RangeFeedError& _internal_error() const;
  public:
  const ::cockroach::roachpb::RangeFeedError& error() const;
  ::cockroach::roachpb::RangeFeedError* release_error();
  ::cockroach::roachpb::RangeFeedError* mutable_error();
  void set_allocated_error(::cockroach::roachpb::RangeFeedError* error);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeFeedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::cockroach::roachpb::RangeFeedValue* val_;
  ::cockroach::roachpb::RangeFeedCheckpoint* checkpoint_;
  ::cockroach::roachpb::RangeFeedError* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fapi_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RangeInfo

inline bool RangeInfo::has_desc() const {
  return this != internal_default_instance() && desc_ != NULL;
}
inline const ::cockroach::roachpb::RangeDescriptor& RangeInfo::_internal_desc() const {
  return *desc_;
}
inline const ::cockroach::roachpb::RangeDescriptor& RangeInfo::desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeInfo.desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
inline ::cockroach::roachpb::RangeDescriptor* RangeInfo::release_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeInfo.desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = desc_;
  desc_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RangeDescriptor* RangeInfo::mutable_desc() {
  
  if (desc_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeInfo.desc)
  return desc_;
}
inline void RangeInfo::set_allocated_desc(::cockroach::roachpb::RangeDescriptor* desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(desc_);
  }
  if (desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    
  } else {
    
  }
  desc_ = desc;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeInfo.desc)
}

inline bool RangeInfo::has_lease() const {
  return this != internal_default_instance() && lease_ != NULL;
}
inline const ::cockroach::roachpb::Lease& RangeInfo::_internal_lease() const {
  return *lease_;
}
inline const ::cockroach::roachpb::Lease& RangeInfo::lease() const {
  const ::cockroach::roachpb::Lease* p = lease_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeInfo.lease)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* RangeInfo::release_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeInfo.lease)
  
  ::cockroach::roachpb::Lease* temp = lease_;
  lease_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Lease* RangeInfo::mutable_lease() {
  
  if (lease_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Lease>(GetArenaNoVirtual());
    lease_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeInfo.lease)
  return lease_;
}
inline void RangeInfo::set_allocated_lease(::cockroach::roachpb::Lease* lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lease_);
  }
  if (lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeInfo.lease)
}

// -------------------------------------------------------------------

// RequestHeader

inline void RequestHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestHeader::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestHeader.key)
  return key_.GetNoArena();
}
inline void RequestHeader::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RequestHeader.key)
}
#if LANG_CXX11
inline void RequestHeader::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RequestHeader.key)
}
#endif
inline void RequestHeader::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RequestHeader.key)
}
inline void RequestHeader::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RequestHeader.key)
}
inline ::std::string* RequestHeader::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestHeader.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHeader::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestHeader.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestHeader.key)
}

inline void RequestHeader::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestHeader::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestHeader.end_key)
  return end_key_.GetNoArena();
}
inline void RequestHeader::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RequestHeader.end_key)
}
#if LANG_CXX11
inline void RequestHeader::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RequestHeader.end_key)
}
#endif
inline void RequestHeader::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RequestHeader.end_key)
}
inline void RequestHeader::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RequestHeader.end_key)
}
inline ::std::string* RequestHeader::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestHeader.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHeader::release_end_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestHeader.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeader::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestHeader.end_key)
}

inline void RequestHeader::clear_sequence() {
  sequence_ = 0;
}
inline ::google::protobuf::int32 RequestHeader::sequence() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestHeader.sequence)
  return sequence_;
}
inline void RequestHeader::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RequestHeader.sequence)
}

// -------------------------------------------------------------------

// ResponseHeader

// .cockroach.roachpb.Transaction txn = 3;
inline bool ResponseHeader::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::cockroach::roachpb::Transaction& ResponseHeader::_internal_txn() const {
  return *txn_;
}
inline const ::cockroach::roachpb::Transaction& ResponseHeader::txn() const {
  const ::cockroach::roachpb::Transaction* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseHeader.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* ResponseHeader::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseHeader.txn)
  
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Transaction* ResponseHeader::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Transaction>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseHeader.txn)
  return txn_;
}
inline void ResponseHeader::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseHeader.txn)
}

// .cockroach.roachpb.Span resume_span = 4;
inline bool ResponseHeader::has_resume_span() const {
  return this != internal_default_instance() && resume_span_ != NULL;
}
inline const ::cockroach::roachpb::Span& ResponseHeader::_internal_resume_span() const {
  return *resume_span_;
}
inline const ::cockroach::roachpb::Span& ResponseHeader::resume_span() const {
  const ::cockroach::roachpb::Span* p = resume_span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseHeader.resume_span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
inline ::cockroach::roachpb::Span* ResponseHeader::release_resume_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseHeader.resume_span)
  
  ::cockroach::roachpb::Span* temp = resume_span_;
  resume_span_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Span* ResponseHeader::mutable_resume_span() {
  
  if (resume_span_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Span>(GetArenaNoVirtual());
    resume_span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseHeader.resume_span)
  return resume_span_;
}
inline void ResponseHeader::set_allocated_resume_span(::cockroach::roachpb::Span* resume_span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resume_span_);
  }
  if (resume_span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resume_span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resume_span, submessage_arena);
    }
    
  } else {
    
  }
  resume_span_ = resume_span;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResponseHeader.resume_span)
}

// .cockroach.roachpb.ResponseHeader.ResumeReason resume_reason = 7;
inline void ResponseHeader::clear_resume_reason() {
  resume_reason_ = 0;
}
inline ::cockroach::roachpb::ResponseHeader_ResumeReason ResponseHeader::resume_reason() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseHeader.resume_reason)
  return static_cast< ::cockroach::roachpb::ResponseHeader_ResumeReason >(resume_reason_);
}
inline void ResponseHeader::set_resume_reason(::cockroach::roachpb::ResponseHeader_ResumeReason value) {
  
  resume_reason_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ResponseHeader.resume_reason)
}

// int64 num_keys = 5;
inline void ResponseHeader::clear_num_keys() {
  num_keys_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ResponseHeader::num_keys() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseHeader.num_keys)
  return num_keys_;
}
inline void ResponseHeader::set_num_keys(::google::protobuf::int64 value) {
  
  num_keys_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ResponseHeader.num_keys)
}

inline int ResponseHeader::range_infos_size() const {
  return range_infos_.size();
}
inline void ResponseHeader::clear_range_infos() {
  range_infos_.Clear();
}
inline ::cockroach::roachpb::RangeInfo* ResponseHeader::mutable_range_infos(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseHeader.range_infos)
  return range_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RangeInfo >*
ResponseHeader::mutable_range_infos() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ResponseHeader.range_infos)
  return &range_infos_;
}
inline const ::cockroach::roachpb::RangeInfo& ResponseHeader::range_infos(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseHeader.range_infos)
  return range_infos_.Get(index);
}
inline ::cockroach::roachpb::RangeInfo* ResponseHeader::add_range_infos() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ResponseHeader.range_infos)
  return range_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RangeInfo >&
ResponseHeader::range_infos() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ResponseHeader.range_infos)
  return range_infos_;
}

// -------------------------------------------------------------------

// GetRequest

inline bool GetRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GetRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& GetRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& GetRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GetRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* GetRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GetRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* GetRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GetRequest.header)
  return header_;
}
inline void GetRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GetRequest.header)
}

// -------------------------------------------------------------------

// GetResponse

inline bool GetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& GetResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& GetResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GetResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* GetResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GetResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* GetResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GetResponse.header)
  return header_;
}
inline void GetResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GetResponse.header)
}

// .cockroach.roachpb.Value value = 2;
inline bool GetResponse::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::cockroach::roachpb::Value& GetResponse::_internal_value() const {
  return *value_;
}
inline const ::cockroach::roachpb::Value& GetResponse::value() const {
  const ::cockroach::roachpb::Value* p = value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GetResponse.value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GetResponse.value)
  
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Value* GetResponse::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GetResponse.value)
  return value_;
}
inline void GetResponse::set_allocated_value(::cockroach::roachpb::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GetResponse.value)
}

// .cockroach.roachpb.Value intent_value = 3;
inline bool GetResponse::has_intent_value() const {
  return this != internal_default_instance() && intent_value_ != NULL;
}
inline const ::cockroach::roachpb::Value& GetResponse::_internal_intent_value() const {
  return *intent_value_;
}
inline const ::cockroach::roachpb::Value& GetResponse::intent_value() const {
  const ::cockroach::roachpb::Value* p = intent_value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GetResponse.intent_value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* GetResponse::release_intent_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GetResponse.intent_value)
  
  ::cockroach::roachpb::Value* temp = intent_value_;
  intent_value_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Value* GetResponse::mutable_intent_value() {
  
  if (intent_value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Value>(GetArenaNoVirtual());
    intent_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GetResponse.intent_value)
  return intent_value_;
}
inline void GetResponse::set_allocated_intent_value(::cockroach::roachpb::Value* intent_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(intent_value_);
  }
  if (intent_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intent_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent_value, submessage_arena);
    }
    
  } else {
    
  }
  intent_value_ = intent_value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GetResponse.intent_value)
}

// -------------------------------------------------------------------

// PutRequest

inline bool PutRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void PutRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& PutRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& PutRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PutRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* PutRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PutRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* PutRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PutRequest.header)
  return header_;
}
inline void PutRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PutRequest.header)
}

inline bool PutRequest::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::cockroach::roachpb::Value& PutRequest::_internal_value() const {
  return *value_;
}
inline const ::cockroach::roachpb::Value& PutRequest::value() const {
  const ::cockroach::roachpb::Value* p = value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PutRequest.value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PutRequest.value)
  
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Value* PutRequest::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PutRequest.value)
  return value_;
}
inline void PutRequest::set_allocated_value(::cockroach::roachpb::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PutRequest.value)
}

// bool inline = 3;
inline void PutRequest::clear_inline_() {
  inline__ = false;
}
inline bool PutRequest::inline_() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PutRequest.inline)
  return inline__;
}
inline void PutRequest::set_inline_(bool value) {
  
  inline__ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.PutRequest.inline)
}

// bool blind = 4;
inline void PutRequest::clear_blind() {
  blind_ = false;
}
inline bool PutRequest::blind() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PutRequest.blind)
  return blind_;
}
inline void PutRequest::set_blind(bool value) {
  
  blind_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.PutRequest.blind)
}

// -------------------------------------------------------------------

// PutResponse

inline bool PutResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void PutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& PutResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& PutResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PutResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* PutResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PutResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* PutResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PutResponse.header)
  return header_;
}
inline void PutResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PutResponse.header)
}

// -------------------------------------------------------------------

// ConditionalPutRequest

inline bool ConditionalPutRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ConditionalPutRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ConditionalPutRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ConditionalPutRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionalPutRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ConditionalPutRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ConditionalPutRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ConditionalPutRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ConditionalPutRequest.header)
  return header_;
}
inline void ConditionalPutRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ConditionalPutRequest.header)
}

inline bool ConditionalPutRequest::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::cockroach::roachpb::Value& ConditionalPutRequest::_internal_value() const {
  return *value_;
}
inline const ::cockroach::roachpb::Value& ConditionalPutRequest::value() const {
  const ::cockroach::roachpb::Value* p = value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionalPutRequest.value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* ConditionalPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ConditionalPutRequest.value)
  
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Value* ConditionalPutRequest::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ConditionalPutRequest.value)
  return value_;
}
inline void ConditionalPutRequest::set_allocated_value(::cockroach::roachpb::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ConditionalPutRequest.value)
}

// .cockroach.roachpb.Value exp_value = 3;
inline bool ConditionalPutRequest::has_exp_value() const {
  return this != internal_default_instance() && exp_value_ != NULL;
}
inline const ::cockroach::roachpb::Value& ConditionalPutRequest::_internal_exp_value() const {
  return *exp_value_;
}
inline const ::cockroach::roachpb::Value& ConditionalPutRequest::exp_value() const {
  const ::cockroach::roachpb::Value* p = exp_value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionalPutRequest.exp_value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* ConditionalPutRequest::release_exp_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ConditionalPutRequest.exp_value)
  
  ::cockroach::roachpb::Value* temp = exp_value_;
  exp_value_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Value* ConditionalPutRequest::mutable_exp_value() {
  
  if (exp_value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Value>(GetArenaNoVirtual());
    exp_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ConditionalPutRequest.exp_value)
  return exp_value_;
}
inline void ConditionalPutRequest::set_allocated_exp_value(::cockroach::roachpb::Value* exp_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exp_value_);
  }
  if (exp_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_value, submessage_arena);
    }
    
  } else {
    
  }
  exp_value_ = exp_value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ConditionalPutRequest.exp_value)
}

// bool blind = 4;
inline void ConditionalPutRequest::clear_blind() {
  blind_ = false;
}
inline bool ConditionalPutRequest::blind() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionalPutRequest.blind)
  return blind_;
}
inline void ConditionalPutRequest::set_blind(bool value) {
  
  blind_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ConditionalPutRequest.blind)
}

// bool allow_if_does_not_exist = 5;
inline void ConditionalPutRequest::clear_allow_if_does_not_exist() {
  allow_if_does_not_exist_ = false;
}
inline bool ConditionalPutRequest::allow_if_does_not_exist() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionalPutRequest.allow_if_does_not_exist)
  return allow_if_does_not_exist_;
}
inline void ConditionalPutRequest::set_allow_if_does_not_exist(bool value) {
  
  allow_if_does_not_exist_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ConditionalPutRequest.allow_if_does_not_exist)
}

// -------------------------------------------------------------------

// ConditionalPutResponse

inline bool ConditionalPutResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ConditionalPutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ConditionalPutResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ConditionalPutResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionalPutResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ConditionalPutResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ConditionalPutResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ConditionalPutResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ConditionalPutResponse.header)
  return header_;
}
inline void ConditionalPutResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ConditionalPutResponse.header)
}

// -------------------------------------------------------------------

// InitPutRequest

inline bool InitPutRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void InitPutRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& InitPutRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& InitPutRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InitPutRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* InitPutRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InitPutRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* InitPutRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InitPutRequest.header)
  return header_;
}
inline void InitPutRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InitPutRequest.header)
}

inline bool InitPutRequest::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::cockroach::roachpb::Value& InitPutRequest::_internal_value() const {
  return *value_;
}
inline const ::cockroach::roachpb::Value& InitPutRequest::value() const {
  const ::cockroach::roachpb::Value* p = value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InitPutRequest.value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* InitPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InitPutRequest.value)
  
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Value* InitPutRequest::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InitPutRequest.value)
  return value_;
}
inline void InitPutRequest::set_allocated_value(::cockroach::roachpb::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InitPutRequest.value)
}

// bool blind = 3;
inline void InitPutRequest::clear_blind() {
  blind_ = false;
}
inline bool InitPutRequest::blind() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InitPutRequest.blind)
  return blind_;
}
inline void InitPutRequest::set_blind(bool value) {
  
  blind_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InitPutRequest.blind)
}

// bool failOnTombstones = 4;
inline void InitPutRequest::clear_failontombstones() {
  failontombstones_ = false;
}
inline bool InitPutRequest::failontombstones() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InitPutRequest.failOnTombstones)
  return failontombstones_;
}
inline void InitPutRequest::set_failontombstones(bool value) {
  
  failontombstones_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InitPutRequest.failOnTombstones)
}

// -------------------------------------------------------------------

// InitPutResponse

inline bool InitPutResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void InitPutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& InitPutResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& InitPutResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InitPutResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* InitPutResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InitPutResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* InitPutResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InitPutResponse.header)
  return header_;
}
inline void InitPutResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InitPutResponse.header)
}

// -------------------------------------------------------------------

// IncrementRequest

inline bool IncrementRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void IncrementRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& IncrementRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& IncrementRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.IncrementRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* IncrementRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.IncrementRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* IncrementRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.IncrementRequest.header)
  return header_;
}
inline void IncrementRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.IncrementRequest.header)
}

// int64 increment = 2;
inline void IncrementRequest::clear_increment() {
  increment_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IncrementRequest::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.IncrementRequest.increment)
  return increment_;
}
inline void IncrementRequest::set_increment(::google::protobuf::int64 value) {
  
  increment_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.IncrementRequest.increment)
}

// -------------------------------------------------------------------

// IncrementResponse

inline bool IncrementResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void IncrementResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& IncrementResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& IncrementResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.IncrementResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* IncrementResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.IncrementResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* IncrementResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.IncrementResponse.header)
  return header_;
}
inline void IncrementResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.IncrementResponse.header)
}

// int64 new_value = 2;
inline void IncrementResponse::clear_new_value() {
  new_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IncrementResponse::new_value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.IncrementResponse.new_value)
  return new_value_;
}
inline void IncrementResponse::set_new_value(::google::protobuf::int64 value) {
  
  new_value_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.IncrementResponse.new_value)
}

// -------------------------------------------------------------------

// DeleteRequest

inline bool DeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& DeleteRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& DeleteRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.DeleteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* DeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.DeleteRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* DeleteRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.DeleteRequest.header)
  return header_;
}
inline void DeleteRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.DeleteRequest.header)
}

// -------------------------------------------------------------------

// DeleteResponse

inline bool DeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& DeleteResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& DeleteResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.DeleteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* DeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.DeleteResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* DeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.DeleteResponse.header)
  return header_;
}
inline void DeleteResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.DeleteResponse.header)
}

// -------------------------------------------------------------------

// DeleteRangeRequest

inline bool DeleteRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DeleteRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& DeleteRangeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& DeleteRangeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.DeleteRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* DeleteRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.DeleteRangeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* DeleteRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.DeleteRangeRequest.header)
  return header_;
}
inline void DeleteRangeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.DeleteRangeRequest.header)
}

// bool return_keys = 3;
inline void DeleteRangeRequest::clear_return_keys() {
  return_keys_ = false;
}
inline bool DeleteRangeRequest::return_keys() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.DeleteRangeRequest.return_keys)
  return return_keys_;
}
inline void DeleteRangeRequest::set_return_keys(bool value) {
  
  return_keys_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.DeleteRangeRequest.return_keys)
}

// bool inline = 4;
inline void DeleteRangeRequest::clear_inline_() {
  inline__ = false;
}
inline bool DeleteRangeRequest::inline_() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.DeleteRangeRequest.inline)
  return inline__;
}
inline void DeleteRangeRequest::set_inline_(bool value) {
  
  inline__ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.DeleteRangeRequest.inline)
}

// -------------------------------------------------------------------

// DeleteRangeResponse

inline bool DeleteRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DeleteRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& DeleteRangeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& DeleteRangeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.DeleteRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* DeleteRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.DeleteRangeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* DeleteRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.DeleteRangeResponse.header)
  return header_;
}
inline void DeleteRangeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.DeleteRangeResponse.header)
}

inline int DeleteRangeResponse::keys_size() const {
  return keys_.size();
}
inline void DeleteRangeResponse::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& DeleteRangeResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.DeleteRangeResponse.keys)
  return keys_.Get(index);
}
inline ::std::string* DeleteRangeResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.DeleteRangeResponse.keys)
  return keys_.Mutable(index);
}
inline void DeleteRangeResponse::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.DeleteRangeResponse.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeleteRangeResponse::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.DeleteRangeResponse.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeleteRangeResponse::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.DeleteRangeResponse.keys)
}
inline void DeleteRangeResponse::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.DeleteRangeResponse.keys)
}
inline ::std::string* DeleteRangeResponse::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.DeleteRangeResponse.keys)
  return keys_.Add();
}
inline void DeleteRangeResponse::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.DeleteRangeResponse.keys)
}
#if LANG_CXX11
inline void DeleteRangeResponse::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cockroach.roachpb.DeleteRangeResponse.keys)
}
#endif
inline void DeleteRangeResponse::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.DeleteRangeResponse.keys)
}
inline void DeleteRangeResponse::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.DeleteRangeResponse.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteRangeResponse::keys() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.DeleteRangeResponse.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteRangeResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.DeleteRangeResponse.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// ClearRangeRequest

inline bool ClearRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ClearRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ClearRangeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ClearRangeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ClearRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ClearRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ClearRangeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ClearRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ClearRangeRequest.header)
  return header_;
}
inline void ClearRangeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ClearRangeRequest.header)
}

// -------------------------------------------------------------------

// ClearRangeResponse

inline bool ClearRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ClearRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ClearRangeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ClearRangeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ClearRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ClearRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ClearRangeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ClearRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ClearRangeResponse.header)
  return header_;
}
inline void ClearRangeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ClearRangeResponse.header)
}

// -------------------------------------------------------------------

// RevertRangeRequest

inline bool RevertRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RevertRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& RevertRangeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& RevertRangeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RevertRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* RevertRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RevertRangeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* RevertRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RevertRangeRequest.header)
  return header_;
}
inline void RevertRangeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RevertRangeRequest.header)
}

inline bool RevertRangeRequest::has_target_time() const {
  return this != internal_default_instance() && target_time_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& RevertRangeRequest::_internal_target_time() const {
  return *target_time_;
}
inline const ::cockroach::util::hlc::Timestamp& RevertRangeRequest::target_time() const {
  const ::cockroach::util::hlc::Timestamp* p = target_time_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RevertRangeRequest.target_time)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* RevertRangeRequest::release_target_time() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RevertRangeRequest.target_time)
  
  ::cockroach::util::hlc::Timestamp* temp = target_time_;
  target_time_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* RevertRangeRequest::mutable_target_time() {
  
  if (target_time_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    target_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RevertRangeRequest.target_time)
  return target_time_;
}
inline void RevertRangeRequest::set_allocated_target_time(::cockroach::util::hlc::Timestamp* target_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_time_);
  }
  if (target_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_time, submessage_arena);
    }
    
  } else {
    
  }
  target_time_ = target_time;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RevertRangeRequest.target_time)
}

// -------------------------------------------------------------------

// RevertRangeResponse

inline bool RevertRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RevertRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& RevertRangeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& RevertRangeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RevertRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* RevertRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RevertRangeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* RevertRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RevertRangeResponse.header)
  return header_;
}
inline void RevertRangeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RevertRangeResponse.header)
}

// -------------------------------------------------------------------

// ScanOptions

// bool stop_at_range_boundary = 1;
inline void ScanOptions::clear_stop_at_range_boundary() {
  stop_at_range_boundary_ = false;
}
inline bool ScanOptions::stop_at_range_boundary() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ScanOptions.stop_at_range_boundary)
  return stop_at_range_boundary_;
}
inline void ScanOptions::set_stop_at_range_boundary(bool value) {
  
  stop_at_range_boundary_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ScanOptions.stop_at_range_boundary)
}

// int64 min_results = 2;
inline void ScanOptions::clear_min_results() {
  min_results_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ScanOptions::min_results() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ScanOptions.min_results)
  return min_results_;
}
inline void ScanOptions::set_min_results(::google::protobuf::int64 value) {
  
  min_results_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ScanOptions.min_results)
}

// -------------------------------------------------------------------

// ScanRequest

inline bool ScanRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ScanRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ScanRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ScanRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ScanRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ScanRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ScanRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ScanRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ScanRequest.header)
  return header_;
}
inline void ScanRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ScanRequest.header)
}

// .cockroach.roachpb.ScanFormat scan_format = 4;
inline void ScanRequest::clear_scan_format() {
  scan_format_ = 0;
}
inline ::cockroach::roachpb::ScanFormat ScanRequest::scan_format() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ScanRequest.scan_format)
  return static_cast< ::cockroach::roachpb::ScanFormat >(scan_format_);
}
inline void ScanRequest::set_scan_format(::cockroach::roachpb::ScanFormat value) {
  
  scan_format_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ScanRequest.scan_format)
}

// -------------------------------------------------------------------

// ScanResponse

inline bool ScanResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ScanResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ScanResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ScanResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ScanResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ScanResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ScanResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ScanResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ScanResponse.header)
  return header_;
}
inline void ScanResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ScanResponse.header)
}

inline int ScanResponse::rows_size() const {
  return rows_.size();
}
inline ::cockroach::roachpb::KeyValue* ScanResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ScanResponse.rows)
  return rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >*
ScanResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ScanResponse.rows)
  return &rows_;
}
inline const ::cockroach::roachpb::KeyValue& ScanResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ScanResponse.rows)
  return rows_.Get(index);
}
inline ::cockroach::roachpb::KeyValue* ScanResponse::add_rows() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ScanResponse.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >&
ScanResponse::rows() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ScanResponse.rows)
  return rows_;
}

inline int ScanResponse::intent_rows_size() const {
  return intent_rows_.size();
}
inline ::cockroach::roachpb::KeyValue* ScanResponse::mutable_intent_rows(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ScanResponse.intent_rows)
  return intent_rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >*
ScanResponse::mutable_intent_rows() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ScanResponse.intent_rows)
  return &intent_rows_;
}
inline const ::cockroach::roachpb::KeyValue& ScanResponse::intent_rows(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ScanResponse.intent_rows)
  return intent_rows_.Get(index);
}
inline ::cockroach::roachpb::KeyValue* ScanResponse::add_intent_rows() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ScanResponse.intent_rows)
  return intent_rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >&
ScanResponse::intent_rows() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ScanResponse.intent_rows)
  return intent_rows_;
}

// repeated bytes batch_responses = 4;
inline int ScanResponse::batch_responses_size() const {
  return batch_responses_.size();
}
inline void ScanResponse::clear_batch_responses() {
  batch_responses_.Clear();
}
inline const ::std::string& ScanResponse::batch_responses(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ScanResponse.batch_responses)
  return batch_responses_.Get(index);
}
inline ::std::string* ScanResponse::mutable_batch_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ScanResponse.batch_responses)
  return batch_responses_.Mutable(index);
}
inline void ScanResponse::set_batch_responses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ScanResponse.batch_responses)
  batch_responses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ScanResponse::set_batch_responses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ScanResponse.batch_responses)
  batch_responses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ScanResponse::set_batch_responses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  batch_responses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ScanResponse.batch_responses)
}
inline void ScanResponse::set_batch_responses(int index, const void* value, size_t size) {
  batch_responses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ScanResponse.batch_responses)
}
inline ::std::string* ScanResponse::add_batch_responses() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.ScanResponse.batch_responses)
  return batch_responses_.Add();
}
inline void ScanResponse::add_batch_responses(const ::std::string& value) {
  batch_responses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ScanResponse.batch_responses)
}
#if LANG_CXX11
inline void ScanResponse::add_batch_responses(::std::string&& value) {
  batch_responses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ScanResponse.batch_responses)
}
#endif
inline void ScanResponse::add_batch_responses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  batch_responses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.ScanResponse.batch_responses)
}
inline void ScanResponse::add_batch_responses(const void* value, size_t size) {
  batch_responses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.ScanResponse.batch_responses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScanResponse::batch_responses() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ScanResponse.batch_responses)
  return batch_responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ScanResponse::mutable_batch_responses() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ScanResponse.batch_responses)
  return &batch_responses_;
}

// -------------------------------------------------------------------

// ReverseScanRequest

inline bool ReverseScanRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ReverseScanRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ReverseScanRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ReverseScanRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReverseScanRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ReverseScanRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReverseScanRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ReverseScanRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReverseScanRequest.header)
  return header_;
}
inline void ReverseScanRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReverseScanRequest.header)
}

// .cockroach.roachpb.ScanFormat scan_format = 4;
inline void ReverseScanRequest::clear_scan_format() {
  scan_format_ = 0;
}
inline ::cockroach::roachpb::ScanFormat ReverseScanRequest::scan_format() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReverseScanRequest.scan_format)
  return static_cast< ::cockroach::roachpb::ScanFormat >(scan_format_);
}
inline void ReverseScanRequest::set_scan_format(::cockroach::roachpb::ScanFormat value) {
  
  scan_format_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReverseScanRequest.scan_format)
}

// -------------------------------------------------------------------

// ReverseScanResponse

inline bool ReverseScanResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ReverseScanResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ReverseScanResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ReverseScanResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReverseScanResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ReverseScanResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReverseScanResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ReverseScanResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReverseScanResponse.header)
  return header_;
}
inline void ReverseScanResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReverseScanResponse.header)
}

inline int ReverseScanResponse::rows_size() const {
  return rows_.size();
}
inline ::cockroach::roachpb::KeyValue* ReverseScanResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReverseScanResponse.rows)
  return rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >*
ReverseScanResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ReverseScanResponse.rows)
  return &rows_;
}
inline const ::cockroach::roachpb::KeyValue& ReverseScanResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReverseScanResponse.rows)
  return rows_.Get(index);
}
inline ::cockroach::roachpb::KeyValue* ReverseScanResponse::add_rows() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ReverseScanResponse.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >&
ReverseScanResponse::rows() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ReverseScanResponse.rows)
  return rows_;
}

inline int ReverseScanResponse::intent_rows_size() const {
  return intent_rows_.size();
}
inline ::cockroach::roachpb::KeyValue* ReverseScanResponse::mutable_intent_rows(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReverseScanResponse.intent_rows)
  return intent_rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >*
ReverseScanResponse::mutable_intent_rows() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ReverseScanResponse.intent_rows)
  return &intent_rows_;
}
inline const ::cockroach::roachpb::KeyValue& ReverseScanResponse::intent_rows(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReverseScanResponse.intent_rows)
  return intent_rows_.Get(index);
}
inline ::cockroach::roachpb::KeyValue* ReverseScanResponse::add_intent_rows() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ReverseScanResponse.intent_rows)
  return intent_rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::KeyValue >&
ReverseScanResponse::intent_rows() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ReverseScanResponse.intent_rows)
  return intent_rows_;
}

// repeated bytes batch_responses = 4;
inline int ReverseScanResponse::batch_responses_size() const {
  return batch_responses_.size();
}
inline void ReverseScanResponse::clear_batch_responses() {
  batch_responses_.Clear();
}
inline const ::std::string& ReverseScanResponse::batch_responses(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReverseScanResponse.batch_responses)
  return batch_responses_.Get(index);
}
inline ::std::string* ReverseScanResponse::mutable_batch_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReverseScanResponse.batch_responses)
  return batch_responses_.Mutable(index);
}
inline void ReverseScanResponse::set_batch_responses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReverseScanResponse.batch_responses)
  batch_responses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReverseScanResponse::set_batch_responses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReverseScanResponse.batch_responses)
  batch_responses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReverseScanResponse::set_batch_responses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  batch_responses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ReverseScanResponse.batch_responses)
}
inline void ReverseScanResponse::set_batch_responses(int index, const void* value, size_t size) {
  batch_responses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ReverseScanResponse.batch_responses)
}
inline ::std::string* ReverseScanResponse::add_batch_responses() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.ReverseScanResponse.batch_responses)
  return batch_responses_.Add();
}
inline void ReverseScanResponse::add_batch_responses(const ::std::string& value) {
  batch_responses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ReverseScanResponse.batch_responses)
}
#if LANG_CXX11
inline void ReverseScanResponse::add_batch_responses(::std::string&& value) {
  batch_responses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ReverseScanResponse.batch_responses)
}
#endif
inline void ReverseScanResponse::add_batch_responses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  batch_responses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.ReverseScanResponse.batch_responses)
}
inline void ReverseScanResponse::add_batch_responses(const void* value, size_t size) {
  batch_responses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.ReverseScanResponse.batch_responses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReverseScanResponse::batch_responses() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ReverseScanResponse.batch_responses)
  return batch_responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReverseScanResponse::mutable_batch_responses() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ReverseScanResponse.batch_responses)
  return &batch_responses_;
}

// -------------------------------------------------------------------

// CheckConsistencyRequest

inline bool CheckConsistencyRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void CheckConsistencyRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& CheckConsistencyRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& CheckConsistencyRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* CheckConsistencyRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.CheckConsistencyRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* CheckConsistencyRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.CheckConsistencyRequest.header)
  return header_;
}
inline void CheckConsistencyRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.CheckConsistencyRequest.header)
}

// bool with_diff = 2;
inline void CheckConsistencyRequest::clear_with_diff() {
  with_diff_ = false;
}
inline bool CheckConsistencyRequest::with_diff() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyRequest.with_diff)
  return with_diff_;
}
inline void CheckConsistencyRequest::set_with_diff(bool value) {
  
  with_diff_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.CheckConsistencyRequest.with_diff)
}

// .cockroach.roachpb.ChecksumMode mode = 3;
inline void CheckConsistencyRequest::clear_mode() {
  mode_ = 0;
}
inline ::cockroach::roachpb::ChecksumMode CheckConsistencyRequest::mode() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyRequest.mode)
  return static_cast< ::cockroach::roachpb::ChecksumMode >(mode_);
}
inline void CheckConsistencyRequest::set_mode(::cockroach::roachpb::ChecksumMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.CheckConsistencyRequest.mode)
}

// bool checkpoint = 4;
inline void CheckConsistencyRequest::clear_checkpoint() {
  checkpoint_ = false;
}
inline bool CheckConsistencyRequest::checkpoint() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyRequest.checkpoint)
  return checkpoint_;
}
inline void CheckConsistencyRequest::set_checkpoint(bool value) {
  
  checkpoint_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.CheckConsistencyRequest.checkpoint)
}

// -------------------------------------------------------------------

// CheckConsistencyResponse_Result

inline void CheckConsistencyResponse_Result::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CheckConsistencyResponse_Result::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyResponse.Result.range_id)
  return range_id_;
}
inline void CheckConsistencyResponse_Result::set_range_id(::google::protobuf::int64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.CheckConsistencyResponse.Result.range_id)
}

// bytes start_key = 2;
inline void CheckConsistencyResponse_Result::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckConsistencyResponse_Result::start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyResponse.Result.start_key)
  return start_key_.GetNoArena();
}
inline void CheckConsistencyResponse_Result::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.CheckConsistencyResponse.Result.start_key)
}
#if LANG_CXX11
inline void CheckConsistencyResponse_Result::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.CheckConsistencyResponse.Result.start_key)
}
#endif
inline void CheckConsistencyResponse_Result::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.CheckConsistencyResponse.Result.start_key)
}
inline void CheckConsistencyResponse_Result::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.CheckConsistencyResponse.Result.start_key)
}
inline ::std::string* CheckConsistencyResponse_Result::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.CheckConsistencyResponse.Result.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckConsistencyResponse_Result::release_start_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.CheckConsistencyResponse.Result.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckConsistencyResponse_Result::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.CheckConsistencyResponse.Result.start_key)
}

// .cockroach.roachpb.CheckConsistencyResponse.Status status = 3;
inline void CheckConsistencyResponse_Result::clear_status() {
  status_ = 0;
}
inline ::cockroach::roachpb::CheckConsistencyResponse_Status CheckConsistencyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyResponse.Result.status)
  return static_cast< ::cockroach::roachpb::CheckConsistencyResponse_Status >(status_);
}
inline void CheckConsistencyResponse_Result::set_status(::cockroach::roachpb::CheckConsistencyResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.CheckConsistencyResponse.Result.status)
}

// string detail = 4;
inline void CheckConsistencyResponse_Result::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckConsistencyResponse_Result::detail() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyResponse.Result.detail)
  return detail_.GetNoArena();
}
inline void CheckConsistencyResponse_Result::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.CheckConsistencyResponse.Result.detail)
}
#if LANG_CXX11
inline void CheckConsistencyResponse_Result::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.CheckConsistencyResponse.Result.detail)
}
#endif
inline void CheckConsistencyResponse_Result::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.CheckConsistencyResponse.Result.detail)
}
inline void CheckConsistencyResponse_Result::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.CheckConsistencyResponse.Result.detail)
}
inline ::std::string* CheckConsistencyResponse_Result::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.CheckConsistencyResponse.Result.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckConsistencyResponse_Result::release_detail() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.CheckConsistencyResponse.Result.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckConsistencyResponse_Result::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.CheckConsistencyResponse.Result.detail)
}

// -------------------------------------------------------------------

// CheckConsistencyResponse

inline bool CheckConsistencyResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void CheckConsistencyResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& CheckConsistencyResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& CheckConsistencyResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* CheckConsistencyResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.CheckConsistencyResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* CheckConsistencyResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.CheckConsistencyResponse.header)
  return header_;
}
inline void CheckConsistencyResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.CheckConsistencyResponse.header)
}

inline int CheckConsistencyResponse::result_size() const {
  return result_.size();
}
inline void CheckConsistencyResponse::clear_result() {
  result_.Clear();
}
inline ::cockroach::roachpb::CheckConsistencyResponse_Result* CheckConsistencyResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.CheckConsistencyResponse.result)
  return result_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::CheckConsistencyResponse_Result >*
CheckConsistencyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.CheckConsistencyResponse.result)
  return &result_;
}
inline const ::cockroach::roachpb::CheckConsistencyResponse_Result& CheckConsistencyResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.CheckConsistencyResponse.result)
  return result_.Get(index);
}
inline ::cockroach::roachpb::CheckConsistencyResponse_Result* CheckConsistencyResponse::add_result() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.CheckConsistencyResponse.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::CheckConsistencyResponse_Result >&
CheckConsistencyResponse::result() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.CheckConsistencyResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// RecomputeStatsRequest

inline bool RecomputeStatsRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RecomputeStatsRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& RecomputeStatsRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& RecomputeStatsRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecomputeStatsRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* RecomputeStatsRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RecomputeStatsRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* RecomputeStatsRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RecomputeStatsRequest.header)
  return header_;
}
inline void RecomputeStatsRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RecomputeStatsRequest.header)
}

// bool dry_run = 2;
inline void RecomputeStatsRequest::clear_dry_run() {
  dry_run_ = false;
}
inline bool RecomputeStatsRequest::dry_run() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecomputeStatsRequest.dry_run)
  return dry_run_;
}
inline void RecomputeStatsRequest::set_dry_run(bool value) {
  
  dry_run_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RecomputeStatsRequest.dry_run)
}

// -------------------------------------------------------------------

// RecomputeStatsResponse

inline bool RecomputeStatsResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RecomputeStatsResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& RecomputeStatsResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& RecomputeStatsResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecomputeStatsResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* RecomputeStatsResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RecomputeStatsResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* RecomputeStatsResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RecomputeStatsResponse.header)
  return header_;
}
inline void RecomputeStatsResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RecomputeStatsResponse.header)
}

inline bool RecomputeStatsResponse::has_added_delta() const {
  return this != internal_default_instance() && added_delta_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::MVCCStatsDelta& RecomputeStatsResponse::_internal_added_delta() const {
  return *added_delta_;
}
inline const ::cockroach::storage::engine::enginepb::MVCCStatsDelta& RecomputeStatsResponse::added_delta() const {
  const ::cockroach::storage::engine::enginepb::MVCCStatsDelta* p = added_delta_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecomputeStatsResponse.added_delta)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::MVCCStatsDelta*>(
      &::cockroach::storage::engine::enginepb::_MVCCStatsDelta_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::MVCCStatsDelta* RecomputeStatsResponse::release_added_delta() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RecomputeStatsResponse.added_delta)
  
  ::cockroach::storage::engine::enginepb::MVCCStatsDelta* temp = added_delta_;
  added_delta_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::MVCCStatsDelta* RecomputeStatsResponse::mutable_added_delta() {
  
  if (added_delta_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::MVCCStatsDelta>(GetArenaNoVirtual());
    added_delta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RecomputeStatsResponse.added_delta)
  return added_delta_;
}
inline void RecomputeStatsResponse::set_allocated_added_delta(::cockroach::storage::engine::enginepb::MVCCStatsDelta* added_delta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(added_delta_);
  }
  if (added_delta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      added_delta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, added_delta, submessage_arena);
    }
    
  } else {
    
  }
  added_delta_ = added_delta;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RecomputeStatsResponse.added_delta)
}

// -------------------------------------------------------------------

// BeginTransactionRequest

inline bool BeginTransactionRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void BeginTransactionRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& BeginTransactionRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& BeginTransactionRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BeginTransactionRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* BeginTransactionRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.BeginTransactionRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* BeginTransactionRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BeginTransactionRequest.header)
  return header_;
}
inline void BeginTransactionRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.BeginTransactionRequest.header)
}

// -------------------------------------------------------------------

// BeginTransactionResponse

inline bool BeginTransactionResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void BeginTransactionResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& BeginTransactionResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& BeginTransactionResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BeginTransactionResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* BeginTransactionResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.BeginTransactionResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* BeginTransactionResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BeginTransactionResponse.header)
  return header_;
}
inline void BeginTransactionResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.BeginTransactionResponse.header)
}

// -------------------------------------------------------------------

// EndTransactionRequest

inline bool EndTransactionRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void EndTransactionRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& EndTransactionRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& EndTransactionRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* EndTransactionRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.EndTransactionRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* EndTransactionRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.EndTransactionRequest.header)
  return header_;
}
inline void EndTransactionRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.EndTransactionRequest.header)
}

// bool commit = 2;
inline void EndTransactionRequest::clear_commit() {
  commit_ = false;
}
inline bool EndTransactionRequest::commit() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.commit)
  return commit_;
}
inline void EndTransactionRequest::set_commit(bool value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.EndTransactionRequest.commit)
}

// .cockroach.util.hlc.Timestamp deadline = 3;
inline bool EndTransactionRequest::has_deadline() const {
  return this != internal_default_instance() && deadline_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& EndTransactionRequest::_internal_deadline() const {
  return *deadline_;
}
inline const ::cockroach::util::hlc::Timestamp& EndTransactionRequest::deadline() const {
  const ::cockroach::util::hlc::Timestamp* p = deadline_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.deadline)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* EndTransactionRequest::release_deadline() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.EndTransactionRequest.deadline)
  
  ::cockroach::util::hlc::Timestamp* temp = deadline_;
  deadline_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* EndTransactionRequest::mutable_deadline() {
  
  if (deadline_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    deadline_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.EndTransactionRequest.deadline)
  return deadline_;
}
inline void EndTransactionRequest::set_allocated_deadline(::cockroach::util::hlc::Timestamp* deadline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(deadline_);
  }
  if (deadline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deadline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deadline, submessage_arena);
    }
    
  } else {
    
  }
  deadline_ = deadline;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.EndTransactionRequest.deadline)
}

// .cockroach.roachpb.InternalCommitTrigger internal_commit_trigger = 4;
inline bool EndTransactionRequest::has_internal_commit_trigger() const {
  return this != internal_default_instance() && internal_commit_trigger_ != NULL;
}
inline const ::cockroach::roachpb::InternalCommitTrigger& EndTransactionRequest::_internal_internal_commit_trigger() const {
  return *internal_commit_trigger_;
}
inline const ::cockroach::roachpb::InternalCommitTrigger& EndTransactionRequest::internal_commit_trigger() const {
  const ::cockroach::roachpb::InternalCommitTrigger* p = internal_commit_trigger_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.internal_commit_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::InternalCommitTrigger*>(
      &::cockroach::roachpb::_InternalCommitTrigger_default_instance_);
}
inline ::cockroach::roachpb::InternalCommitTrigger* EndTransactionRequest::release_internal_commit_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.EndTransactionRequest.internal_commit_trigger)
  
  ::cockroach::roachpb::InternalCommitTrigger* temp = internal_commit_trigger_;
  internal_commit_trigger_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::InternalCommitTrigger* EndTransactionRequest::mutable_internal_commit_trigger() {
  
  if (internal_commit_trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::InternalCommitTrigger>(GetArenaNoVirtual());
    internal_commit_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.EndTransactionRequest.internal_commit_trigger)
  return internal_commit_trigger_;
}
inline void EndTransactionRequest::set_allocated_internal_commit_trigger(::cockroach::roachpb::InternalCommitTrigger* internal_commit_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(internal_commit_trigger_);
  }
  if (internal_commit_trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      internal_commit_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, internal_commit_trigger, submessage_arena);
    }
    
  } else {
    
  }
  internal_commit_trigger_ = internal_commit_trigger;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.EndTransactionRequest.internal_commit_trigger)
}

inline int EndTransactionRequest::intent_spans_size() const {
  return intent_spans_.size();
}
inline ::cockroach::roachpb::Span* EndTransactionRequest::mutable_intent_spans(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.EndTransactionRequest.intent_spans)
  return intent_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
EndTransactionRequest::mutable_intent_spans() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.EndTransactionRequest.intent_spans)
  return &intent_spans_;
}
inline const ::cockroach::roachpb::Span& EndTransactionRequest::intent_spans(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.intent_spans)
  return intent_spans_.Get(index);
}
inline ::cockroach::roachpb::Span* EndTransactionRequest::add_intent_spans() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.EndTransactionRequest.intent_spans)
  return intent_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
EndTransactionRequest::intent_spans() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.EndTransactionRequest.intent_spans)
  return intent_spans_;
}

inline int EndTransactionRequest::in_flight_writes_size() const {
  return in_flight_writes_.size();
}
inline ::cockroach::roachpb::SequencedWrite* EndTransactionRequest::mutable_in_flight_writes(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.EndTransactionRequest.in_flight_writes)
  return in_flight_writes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::SequencedWrite >*
EndTransactionRequest::mutable_in_flight_writes() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.EndTransactionRequest.in_flight_writes)
  return &in_flight_writes_;
}
inline const ::cockroach::roachpb::SequencedWrite& EndTransactionRequest::in_flight_writes(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.in_flight_writes)
  return in_flight_writes_.Get(index);
}
inline ::cockroach::roachpb::SequencedWrite* EndTransactionRequest::add_in_flight_writes() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.EndTransactionRequest.in_flight_writes)
  return in_flight_writes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::SequencedWrite >&
EndTransactionRequest::in_flight_writes() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.EndTransactionRequest.in_flight_writes)
  return in_flight_writes_;
}

inline void EndTransactionRequest::clear_require_1pc() {
  require_1pc_ = false;
}
inline bool EndTransactionRequest::require_1pc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.require_1pc)
  return require_1pc_;
}
inline void EndTransactionRequest::set_require_1pc(bool value) {
  
  require_1pc_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.EndTransactionRequest.require_1pc)
}

// bool no_refresh_spans = 8;
inline void EndTransactionRequest::clear_no_refresh_spans() {
  no_refresh_spans_ = false;
}
inline bool EndTransactionRequest::no_refresh_spans() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.no_refresh_spans)
  return no_refresh_spans_;
}
inline void EndTransactionRequest::set_no_refresh_spans(bool value) {
  
  no_refresh_spans_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.EndTransactionRequest.no_refresh_spans)
}

// bool poison = 9;
inline void EndTransactionRequest::clear_poison() {
  poison_ = false;
}
inline bool EndTransactionRequest::poison() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionRequest.poison)
  return poison_;
}
inline void EndTransactionRequest::set_poison(bool value) {
  
  poison_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.EndTransactionRequest.poison)
}

// -------------------------------------------------------------------

// EndTransactionResponse

inline bool EndTransactionResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void EndTransactionResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& EndTransactionResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& EndTransactionResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* EndTransactionResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.EndTransactionResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* EndTransactionResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.EndTransactionResponse.header)
  return header_;
}
inline void EndTransactionResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.EndTransactionResponse.header)
}

// bool one_phase_commit = 4;
inline void EndTransactionResponse::clear_one_phase_commit() {
  one_phase_commit_ = false;
}
inline bool EndTransactionResponse::one_phase_commit() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionResponse.one_phase_commit)
  return one_phase_commit_;
}
inline void EndTransactionResponse::set_one_phase_commit(bool value) {
  
  one_phase_commit_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.EndTransactionResponse.one_phase_commit)
}

inline bool EndTransactionResponse::has_staging_timestamp() const {
  return this != internal_default_instance() && staging_timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& EndTransactionResponse::_internal_staging_timestamp() const {
  return *staging_timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& EndTransactionResponse::staging_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = staging_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.EndTransactionResponse.staging_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* EndTransactionResponse::release_staging_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.EndTransactionResponse.staging_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = staging_timestamp_;
  staging_timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* EndTransactionResponse::mutable_staging_timestamp() {
  
  if (staging_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    staging_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.EndTransactionResponse.staging_timestamp)
  return staging_timestamp_;
}
inline void EndTransactionResponse::set_allocated_staging_timestamp(::cockroach::util::hlc::Timestamp* staging_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(staging_timestamp_);
  }
  if (staging_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      staging_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, staging_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  staging_timestamp_ = staging_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.EndTransactionResponse.staging_timestamp)
}

// -------------------------------------------------------------------

// AdminSplitRequest

inline bool AdminSplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminSplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& AdminSplitRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& AdminSplitRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminSplitRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* AdminSplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminSplitRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* AdminSplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminSplitRequest.header)
  return header_;
}
inline void AdminSplitRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminSplitRequest.header)
}

inline void AdminSplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdminSplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminSplitRequest.split_key)
  return split_key_.GetNoArena();
}
inline void AdminSplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AdminSplitRequest.split_key)
}
#if LANG_CXX11
inline void AdminSplitRequest::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.AdminSplitRequest.split_key)
}
#endif
inline void AdminSplitRequest::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.AdminSplitRequest.split_key)
}
inline void AdminSplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.AdminSplitRequest.split_key)
}
inline ::std::string* AdminSplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminSplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdminSplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminSplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdminSplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminSplitRequest.split_key)
}

inline bool AdminSplitRequest::has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& AdminSplitRequest::_internal_expiration_time() const {
  return *expiration_time_;
}
inline const ::cockroach::util::hlc::Timestamp& AdminSplitRequest::expiration_time() const {
  const ::cockroach::util::hlc::Timestamp* p = expiration_time_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminSplitRequest.expiration_time)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* AdminSplitRequest::release_expiration_time() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminSplitRequest.expiration_time)
  
  ::cockroach::util::hlc::Timestamp* temp = expiration_time_;
  expiration_time_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* AdminSplitRequest::mutable_expiration_time() {
  
  if (expiration_time_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    expiration_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminSplitRequest.expiration_time)
  return expiration_time_;
}
inline void AdminSplitRequest::set_allocated_expiration_time(::cockroach::util::hlc::Timestamp* expiration_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expiration_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminSplitRequest.expiration_time)
}

// -------------------------------------------------------------------

// AdminSplitResponse

inline bool AdminSplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminSplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminSplitResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminSplitResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminSplitResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* AdminSplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminSplitResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* AdminSplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminSplitResponse.header)
  return header_;
}
inline void AdminSplitResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminSplitResponse.header)
}

// -------------------------------------------------------------------

// AdminUnsplitRequest

inline bool AdminUnsplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminUnsplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& AdminUnsplitRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& AdminUnsplitRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminUnsplitRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* AdminUnsplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminUnsplitRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* AdminUnsplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminUnsplitRequest.header)
  return header_;
}
inline void AdminUnsplitRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminUnsplitRequest.header)
}

// -------------------------------------------------------------------

// AdminUnsplitResponse

inline bool AdminUnsplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminUnsplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminUnsplitResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminUnsplitResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminUnsplitResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* AdminUnsplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminUnsplitResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* AdminUnsplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminUnsplitResponse.header)
  return header_;
}
inline void AdminUnsplitResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminUnsplitResponse.header)
}

// -------------------------------------------------------------------

// AdminMergeRequest

inline bool AdminMergeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminMergeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& AdminMergeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& AdminMergeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminMergeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* AdminMergeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminMergeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* AdminMergeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminMergeRequest.header)
  return header_;
}
inline void AdminMergeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminMergeRequest.header)
}

// -------------------------------------------------------------------

// AdminMergeResponse

inline bool AdminMergeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminMergeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminMergeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminMergeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminMergeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* AdminMergeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminMergeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* AdminMergeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminMergeResponse.header)
  return header_;
}
inline void AdminMergeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminMergeResponse.header)
}

// -------------------------------------------------------------------

// AdminTransferLeaseRequest

inline bool AdminTransferLeaseRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminTransferLeaseRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& AdminTransferLeaseRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& AdminTransferLeaseRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminTransferLeaseRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* AdminTransferLeaseRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminTransferLeaseRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* AdminTransferLeaseRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminTransferLeaseRequest.header)
  return header_;
}
inline void AdminTransferLeaseRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminTransferLeaseRequest.header)
}

inline void AdminTransferLeaseRequest::clear_target() {
  target_ = 0;
}
inline ::google::protobuf::int32 AdminTransferLeaseRequest::target() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminTransferLeaseRequest.target)
  return target_;
}
inline void AdminTransferLeaseRequest::set_target(::google::protobuf::int32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AdminTransferLeaseRequest.target)
}

// -------------------------------------------------------------------

// AdminTransferLeaseResponse

inline bool AdminTransferLeaseResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminTransferLeaseResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminTransferLeaseResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminTransferLeaseResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminTransferLeaseResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* AdminTransferLeaseResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminTransferLeaseResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* AdminTransferLeaseResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminTransferLeaseResponse.header)
  return header_;
}
inline void AdminTransferLeaseResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminTransferLeaseResponse.header)
}

// -------------------------------------------------------------------

// ReplicationChange

// .cockroach.roachpb.ReplicaChangeType change_type = 1;
inline void ReplicationChange::clear_change_type() {
  change_type_ = 0;
}
inline ::cockroach::roachpb::ReplicaChangeType ReplicationChange::change_type() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicationChange.change_type)
  return static_cast< ::cockroach::roachpb::ReplicaChangeType >(change_type_);
}
inline void ReplicationChange::set_change_type(::cockroach::roachpb::ReplicaChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicationChange.change_type)
}

inline bool ReplicationChange::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline const ::cockroach::roachpb::ReplicationTarget& ReplicationChange::_internal_target() const {
  return *target_;
}
inline const ::cockroach::roachpb::ReplicationTarget& ReplicationChange::target() const {
  const ::cockroach::roachpb::ReplicationTarget* p = target_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicationChange.target)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReplicationTarget*>(
      &::cockroach::roachpb::_ReplicationTarget_default_instance_);
}
inline ::cockroach::roachpb::ReplicationTarget* ReplicationChange::release_target() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReplicationChange.target)
  
  ::cockroach::roachpb::ReplicationTarget* temp = target_;
  target_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ReplicationTarget* ReplicationChange::mutable_target() {
  
  if (target_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ReplicationTarget>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReplicationChange.target)
  return target_;
}
inline void ReplicationChange::set_allocated_target(::cockroach::roachpb::ReplicationTarget* target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_);
  }
  if (target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReplicationChange.target)
}

// -------------------------------------------------------------------

// AdminChangeReplicasRequest

inline bool AdminChangeReplicasRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminChangeReplicasRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& AdminChangeReplicasRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& AdminChangeReplicasRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminChangeReplicasRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* AdminChangeReplicasRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminChangeReplicasRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* AdminChangeReplicasRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminChangeReplicasRequest.header)
  return header_;
}
inline void AdminChangeReplicasRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminChangeReplicasRequest.header)
}

// .cockroach.roachpb.ReplicaChangeType deprecated_change_type = 2;
inline void AdminChangeReplicasRequest::clear_deprecated_change_type() {
  deprecated_change_type_ = 0;
}
inline ::cockroach::roachpb::ReplicaChangeType AdminChangeReplicasRequest::deprecated_change_type() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminChangeReplicasRequest.deprecated_change_type)
  return static_cast< ::cockroach::roachpb::ReplicaChangeType >(deprecated_change_type_);
}
inline void AdminChangeReplicasRequest::set_deprecated_change_type(::cockroach::roachpb::ReplicaChangeType value) {
  
  deprecated_change_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AdminChangeReplicasRequest.deprecated_change_type)
}

inline int AdminChangeReplicasRequest::deprecated_targets_size() const {
  return deprecated_targets_.size();
}
inline ::cockroach::roachpb::ReplicationTarget* AdminChangeReplicasRequest::mutable_deprecated_targets(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminChangeReplicasRequest.deprecated_targets)
  return deprecated_targets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget >*
AdminChangeReplicasRequest::mutable_deprecated_targets() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.AdminChangeReplicasRequest.deprecated_targets)
  return &deprecated_targets_;
}
inline const ::cockroach::roachpb::ReplicationTarget& AdminChangeReplicasRequest::deprecated_targets(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminChangeReplicasRequest.deprecated_targets)
  return deprecated_targets_.Get(index);
}
inline ::cockroach::roachpb::ReplicationTarget* AdminChangeReplicasRequest::add_deprecated_targets() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.AdminChangeReplicasRequest.deprecated_targets)
  return deprecated_targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget >&
AdminChangeReplicasRequest::deprecated_targets() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.AdminChangeReplicasRequest.deprecated_targets)
  return deprecated_targets_;
}

inline bool AdminChangeReplicasRequest::has_exp_desc() const {
  return this != internal_default_instance() && exp_desc_ != NULL;
}
inline const ::cockroach::roachpb::RangeDescriptor& AdminChangeReplicasRequest::_internal_exp_desc() const {
  return *exp_desc_;
}
inline const ::cockroach::roachpb::RangeDescriptor& AdminChangeReplicasRequest::exp_desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = exp_desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminChangeReplicasRequest.exp_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
inline ::cockroach::roachpb::RangeDescriptor* AdminChangeReplicasRequest::release_exp_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminChangeReplicasRequest.exp_desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = exp_desc_;
  exp_desc_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RangeDescriptor* AdminChangeReplicasRequest::mutable_exp_desc() {
  
  if (exp_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    exp_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminChangeReplicasRequest.exp_desc)
  return exp_desc_;
}
inline void AdminChangeReplicasRequest::set_allocated_exp_desc(::cockroach::roachpb::RangeDescriptor* exp_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exp_desc_);
  }
  if (exp_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_desc, submessage_arena);
    }
    
  } else {
    
  }
  exp_desc_ = exp_desc;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminChangeReplicasRequest.exp_desc)
}

inline int AdminChangeReplicasRequest::internal_changes_size() const {
  return internal_changes_.size();
}
inline void AdminChangeReplicasRequest::clear_internal_changes() {
  internal_changes_.Clear();
}
inline ::cockroach::roachpb::ReplicationChange* AdminChangeReplicasRequest::mutable_internal_changes(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminChangeReplicasRequest.internal_changes)
  return internal_changes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationChange >*
AdminChangeReplicasRequest::mutable_internal_changes() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.AdminChangeReplicasRequest.internal_changes)
  return &internal_changes_;
}
inline const ::cockroach::roachpb::ReplicationChange& AdminChangeReplicasRequest::internal_changes(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminChangeReplicasRequest.internal_changes)
  return internal_changes_.Get(index);
}
inline ::cockroach::roachpb::ReplicationChange* AdminChangeReplicasRequest::add_internal_changes() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.AdminChangeReplicasRequest.internal_changes)
  return internal_changes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationChange >&
AdminChangeReplicasRequest::internal_changes() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.AdminChangeReplicasRequest.internal_changes)
  return internal_changes_;
}

// -------------------------------------------------------------------

// AdminChangeReplicasResponse

inline bool AdminChangeReplicasResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminChangeReplicasResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminChangeReplicasResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminChangeReplicasResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminChangeReplicasResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* AdminChangeReplicasResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminChangeReplicasResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* AdminChangeReplicasResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminChangeReplicasResponse.header)
  return header_;
}
inline void AdminChangeReplicasResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminChangeReplicasResponse.header)
}

inline bool AdminChangeReplicasResponse::has_desc() const {
  return this != internal_default_instance() && desc_ != NULL;
}
inline const ::cockroach::roachpb::RangeDescriptor& AdminChangeReplicasResponse::_internal_desc() const {
  return *desc_;
}
inline const ::cockroach::roachpb::RangeDescriptor& AdminChangeReplicasResponse::desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminChangeReplicasResponse.desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
inline ::cockroach::roachpb::RangeDescriptor* AdminChangeReplicasResponse::release_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminChangeReplicasResponse.desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = desc_;
  desc_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RangeDescriptor* AdminChangeReplicasResponse::mutable_desc() {
  
  if (desc_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminChangeReplicasResponse.desc)
  return desc_;
}
inline void AdminChangeReplicasResponse::set_allocated_desc(::cockroach::roachpb::RangeDescriptor* desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(desc_);
  }
  if (desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    
  } else {
    
  }
  desc_ = desc;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminChangeReplicasResponse.desc)
}

// -------------------------------------------------------------------

// AdminRelocateRangeRequest

inline bool AdminRelocateRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminRelocateRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& AdminRelocateRangeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& AdminRelocateRangeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminRelocateRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* AdminRelocateRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminRelocateRangeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* AdminRelocateRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminRelocateRangeRequest.header)
  return header_;
}
inline void AdminRelocateRangeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminRelocateRangeRequest.header)
}

inline int AdminRelocateRangeRequest::targets_size() const {
  return targets_.size();
}
inline ::cockroach::roachpb::ReplicationTarget* AdminRelocateRangeRequest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminRelocateRangeRequest.targets)
  return targets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget >*
AdminRelocateRangeRequest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.AdminRelocateRangeRequest.targets)
  return &targets_;
}
inline const ::cockroach::roachpb::ReplicationTarget& AdminRelocateRangeRequest::targets(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminRelocateRangeRequest.targets)
  return targets_.Get(index);
}
inline ::cockroach::roachpb::ReplicationTarget* AdminRelocateRangeRequest::add_targets() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.AdminRelocateRangeRequest.targets)
  return targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicationTarget >&
AdminRelocateRangeRequest::targets() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.AdminRelocateRangeRequest.targets)
  return targets_;
}

// -------------------------------------------------------------------

// AdminRelocateRangeResponse

inline bool AdminRelocateRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminRelocateRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminRelocateRangeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminRelocateRangeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminRelocateRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* AdminRelocateRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminRelocateRangeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* AdminRelocateRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminRelocateRangeResponse.header)
  return header_;
}
inline void AdminRelocateRangeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminRelocateRangeResponse.header)
}

// -------------------------------------------------------------------

// HeartbeatTxnRequest

inline bool HeartbeatTxnRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void HeartbeatTxnRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& HeartbeatTxnRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& HeartbeatTxnRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.HeartbeatTxnRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* HeartbeatTxnRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.HeartbeatTxnRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* HeartbeatTxnRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.HeartbeatTxnRequest.header)
  return header_;
}
inline void HeartbeatTxnRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.HeartbeatTxnRequest.header)
}

inline bool HeartbeatTxnRequest::has_now() const {
  return this != internal_default_instance() && now_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& HeartbeatTxnRequest::_internal_now() const {
  return *now_;
}
inline const ::cockroach::util::hlc::Timestamp& HeartbeatTxnRequest::now() const {
  const ::cockroach::util::hlc::Timestamp* p = now_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.HeartbeatTxnRequest.now)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* HeartbeatTxnRequest::release_now() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.HeartbeatTxnRequest.now)
  
  ::cockroach::util::hlc::Timestamp* temp = now_;
  now_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* HeartbeatTxnRequest::mutable_now() {
  
  if (now_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    now_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.HeartbeatTxnRequest.now)
  return now_;
}
inline void HeartbeatTxnRequest::set_allocated_now(::cockroach::util::hlc::Timestamp* now) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(now_);
  }
  if (now) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      now = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, now, submessage_arena);
    }
    
  } else {
    
  }
  now_ = now;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.HeartbeatTxnRequest.now)
}

// -------------------------------------------------------------------

// HeartbeatTxnResponse

inline bool HeartbeatTxnResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void HeartbeatTxnResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& HeartbeatTxnResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& HeartbeatTxnResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.HeartbeatTxnResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* HeartbeatTxnResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.HeartbeatTxnResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* HeartbeatTxnResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.HeartbeatTxnResponse.header)
  return header_;
}
inline void HeartbeatTxnResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.HeartbeatTxnResponse.header)
}

// -------------------------------------------------------------------

// GCRequest_GCKey

inline void GCRequest_GCKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCRequest_GCKey::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GCRequest.GCKey.key)
  return key_.GetNoArena();
}
inline void GCRequest_GCKey::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.GCRequest.GCKey.key)
}
#if LANG_CXX11
inline void GCRequest_GCKey::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.GCRequest.GCKey.key)
}
#endif
inline void GCRequest_GCKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.GCRequest.GCKey.key)
}
inline void GCRequest_GCKey::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.GCRequest.GCKey.key)
}
inline ::std::string* GCRequest_GCKey::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GCRequest.GCKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCRequest_GCKey::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GCRequest.GCKey.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCRequest_GCKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GCRequest.GCKey.key)
}

inline bool GCRequest_GCKey::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& GCRequest_GCKey::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& GCRequest_GCKey::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GCRequest.GCKey.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* GCRequest_GCKey::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GCRequest.GCKey.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* GCRequest_GCKey::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GCRequest.GCKey.timestamp)
  return timestamp_;
}
inline void GCRequest_GCKey::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GCRequest.GCKey.timestamp)
}

// -------------------------------------------------------------------

// GCRequest

inline bool GCRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GCRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& GCRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& GCRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GCRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* GCRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GCRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* GCRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GCRequest.header)
  return header_;
}
inline void GCRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GCRequest.header)
}

inline int GCRequest::keys_size() const {
  return keys_.size();
}
inline void GCRequest::clear_keys() {
  keys_.Clear();
}
inline ::cockroach::roachpb::GCRequest_GCKey* GCRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GCRequest.keys)
  return keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::GCRequest_GCKey >*
GCRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.GCRequest.keys)
  return &keys_;
}
inline const ::cockroach::roachpb::GCRequest_GCKey& GCRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GCRequest.keys)
  return keys_.Get(index);
}
inline ::cockroach::roachpb::GCRequest_GCKey* GCRequest::add_keys() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.GCRequest.keys)
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::GCRequest_GCKey >&
GCRequest::keys() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.GCRequest.keys)
  return keys_;
}

inline bool GCRequest::has_threshold() const {
  return this != internal_default_instance() && threshold_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& GCRequest::_internal_threshold() const {
  return *threshold_;
}
inline const ::cockroach::util::hlc::Timestamp& GCRequest::threshold() const {
  const ::cockroach::util::hlc::Timestamp* p = threshold_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GCRequest.threshold)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* GCRequest::release_threshold() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GCRequest.threshold)
  
  ::cockroach::util::hlc::Timestamp* temp = threshold_;
  threshold_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* GCRequest::mutable_threshold() {
  
  if (threshold_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GCRequest.threshold)
  return threshold_;
}
inline void GCRequest::set_allocated_threshold(::cockroach::util::hlc::Timestamp* threshold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(threshold_);
  }
  if (threshold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      threshold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, threshold, submessage_arena);
    }
    
  } else {
    
  }
  threshold_ = threshold;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GCRequest.threshold)
}

// -------------------------------------------------------------------

// GCResponse

inline bool GCResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GCResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& GCResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& GCResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GCResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* GCResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.GCResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* GCResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.GCResponse.header)
  return header_;
}
inline void GCResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.GCResponse.header)
}

// -------------------------------------------------------------------

// PushTxnRequest

inline bool PushTxnRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void PushTxnRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& PushTxnRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& PushTxnRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* PushTxnRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PushTxnRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* PushTxnRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PushTxnRequest.header)
  return header_;
}
inline void PushTxnRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PushTxnRequest.header)
}

inline bool PushTxnRequest::has_pusher_txn() const {
  return this != internal_default_instance() && pusher_txn_ != NULL;
}
inline const ::cockroach::roachpb::Transaction& PushTxnRequest::_internal_pusher_txn() const {
  return *pusher_txn_;
}
inline const ::cockroach::roachpb::Transaction& PushTxnRequest::pusher_txn() const {
  const ::cockroach::roachpb::Transaction* p = pusher_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnRequest.pusher_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* PushTxnRequest::release_pusher_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PushTxnRequest.pusher_txn)
  
  ::cockroach::roachpb::Transaction* temp = pusher_txn_;
  pusher_txn_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Transaction* PushTxnRequest::mutable_pusher_txn() {
  
  if (pusher_txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Transaction>(GetArenaNoVirtual());
    pusher_txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PushTxnRequest.pusher_txn)
  return pusher_txn_;
}
inline void PushTxnRequest::set_allocated_pusher_txn(::cockroach::roachpb::Transaction* pusher_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pusher_txn_);
  }
  if (pusher_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pusher_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pusher_txn, submessage_arena);
    }
    
  } else {
    
  }
  pusher_txn_ = pusher_txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PushTxnRequest.pusher_txn)
}

inline bool PushTxnRequest::has_pushee_txn() const {
  return this != internal_default_instance() && pushee_txn_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& PushTxnRequest::_internal_pushee_txn() const {
  return *pushee_txn_;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& PushTxnRequest::pushee_txn() const {
  const ::cockroach::storage::engine::enginepb::TxnMeta* p = pushee_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnRequest.pushee_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::TxnMeta*>(
      &::cockroach::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* PushTxnRequest::release_pushee_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PushTxnRequest.pushee_txn)
  
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* PushTxnRequest::mutable_pushee_txn() {
  
  if (pushee_txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    pushee_txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PushTxnRequest.pushee_txn)
  return pushee_txn_;
}
inline void PushTxnRequest::set_allocated_pushee_txn(::cockroach::storage::engine::enginepb::TxnMeta* pushee_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pushee_txn_);
  }
  if (pushee_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pushee_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pushee_txn, submessage_arena);
    }
    
  } else {
    
  }
  pushee_txn_ = pushee_txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PushTxnRequest.pushee_txn)
}

inline bool PushTxnRequest::has_push_to() const {
  return this != internal_default_instance() && push_to_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& PushTxnRequest::_internal_push_to() const {
  return *push_to_;
}
inline const ::cockroach::util::hlc::Timestamp& PushTxnRequest::push_to() const {
  const ::cockroach::util::hlc::Timestamp* p = push_to_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnRequest.push_to)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* PushTxnRequest::release_push_to() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PushTxnRequest.push_to)
  
  ::cockroach::util::hlc::Timestamp* temp = push_to_;
  push_to_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* PushTxnRequest::mutable_push_to() {
  
  if (push_to_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    push_to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PushTxnRequest.push_to)
  return push_to_;
}
inline void PushTxnRequest::set_allocated_push_to(::cockroach::util::hlc::Timestamp* push_to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(push_to_);
  }
  if (push_to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      push_to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_to, submessage_arena);
    }
    
  } else {
    
  }
  push_to_ = push_to;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PushTxnRequest.push_to)
}

// bool inclusive_push_to = 9;
inline void PushTxnRequest::clear_inclusive_push_to() {
  inclusive_push_to_ = false;
}
inline bool PushTxnRequest::inclusive_push_to() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnRequest.inclusive_push_to)
  return inclusive_push_to_;
}
inline void PushTxnRequest::set_inclusive_push_to(bool value) {
  
  inclusive_push_to_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.PushTxnRequest.inclusive_push_to)
}

// .cockroach.roachpb.PushTxnType push_type = 6;
inline void PushTxnRequest::clear_push_type() {
  push_type_ = 0;
}
inline ::cockroach::roachpb::PushTxnType PushTxnRequest::push_type() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnRequest.push_type)
  return static_cast< ::cockroach::roachpb::PushTxnType >(push_type_);
}
inline void PushTxnRequest::set_push_type(::cockroach::roachpb::PushTxnType value) {
  
  push_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.PushTxnRequest.push_type)
}

// bool force = 7;
inline void PushTxnRequest::clear_force() {
  force_ = false;
}
inline bool PushTxnRequest::force() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnRequest.force)
  return force_;
}
inline void PushTxnRequest::set_force(bool value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.PushTxnRequest.force)
}

// -------------------------------------------------------------------

// PushTxnResponse

inline bool PushTxnResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void PushTxnResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& PushTxnResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& PushTxnResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* PushTxnResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PushTxnResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* PushTxnResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PushTxnResponse.header)
  return header_;
}
inline void PushTxnResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PushTxnResponse.header)
}

inline bool PushTxnResponse::has_pushee_txn() const {
  return this != internal_default_instance() && pushee_txn_ != NULL;
}
inline const ::cockroach::roachpb::Transaction& PushTxnResponse::_internal_pushee_txn() const {
  return *pushee_txn_;
}
inline const ::cockroach::roachpb::Transaction& PushTxnResponse::pushee_txn() const {
  const ::cockroach::roachpb::Transaction* p = pushee_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.PushTxnResponse.pushee_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* PushTxnResponse::release_pushee_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.PushTxnResponse.pushee_txn)
  
  ::cockroach::roachpb::Transaction* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Transaction* PushTxnResponse::mutable_pushee_txn() {
  
  if (pushee_txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Transaction>(GetArenaNoVirtual());
    pushee_txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.PushTxnResponse.pushee_txn)
  return pushee_txn_;
}
inline void PushTxnResponse::set_allocated_pushee_txn(::cockroach::roachpb::Transaction* pushee_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pushee_txn_);
  }
  if (pushee_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pushee_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pushee_txn, submessage_arena);
    }
    
  } else {
    
  }
  pushee_txn_ = pushee_txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.PushTxnResponse.pushee_txn)
}

// -------------------------------------------------------------------

// RecoverTxnRequest

inline bool RecoverTxnRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RecoverTxnRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& RecoverTxnRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& RecoverTxnRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecoverTxnRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* RecoverTxnRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RecoverTxnRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* RecoverTxnRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RecoverTxnRequest.header)
  return header_;
}
inline void RecoverTxnRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RecoverTxnRequest.header)
}

inline bool RecoverTxnRequest::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& RecoverTxnRequest::_internal_txn() const {
  return *txn_;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& RecoverTxnRequest::txn() const {
  const ::cockroach::storage::engine::enginepb::TxnMeta* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecoverTxnRequest.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::TxnMeta*>(
      &::cockroach::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* RecoverTxnRequest::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RecoverTxnRequest.txn)
  
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* RecoverTxnRequest::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RecoverTxnRequest.txn)
  return txn_;
}
inline void RecoverTxnRequest::set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RecoverTxnRequest.txn)
}

// bool implicitly_committed = 3;
inline void RecoverTxnRequest::clear_implicitly_committed() {
  implicitly_committed_ = false;
}
inline bool RecoverTxnRequest::implicitly_committed() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecoverTxnRequest.implicitly_committed)
  return implicitly_committed_;
}
inline void RecoverTxnRequest::set_implicitly_committed(bool value) {
  
  implicitly_committed_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RecoverTxnRequest.implicitly_committed)
}

// -------------------------------------------------------------------

// RecoverTxnResponse

inline bool RecoverTxnResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RecoverTxnResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& RecoverTxnResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& RecoverTxnResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecoverTxnResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* RecoverTxnResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RecoverTxnResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* RecoverTxnResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RecoverTxnResponse.header)
  return header_;
}
inline void RecoverTxnResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RecoverTxnResponse.header)
}

inline bool RecoverTxnResponse::has_recovered_txn() const {
  return this != internal_default_instance() && recovered_txn_ != NULL;
}
inline const ::cockroach::roachpb::Transaction& RecoverTxnResponse::_internal_recovered_txn() const {
  return *recovered_txn_;
}
inline const ::cockroach::roachpb::Transaction& RecoverTxnResponse::recovered_txn() const {
  const ::cockroach::roachpb::Transaction* p = recovered_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RecoverTxnResponse.recovered_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* RecoverTxnResponse::release_recovered_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RecoverTxnResponse.recovered_txn)
  
  ::cockroach::roachpb::Transaction* temp = recovered_txn_;
  recovered_txn_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Transaction* RecoverTxnResponse::mutable_recovered_txn() {
  
  if (recovered_txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Transaction>(GetArenaNoVirtual());
    recovered_txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RecoverTxnResponse.recovered_txn)
  return recovered_txn_;
}
inline void RecoverTxnResponse::set_allocated_recovered_txn(::cockroach::roachpb::Transaction* recovered_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(recovered_txn_);
  }
  if (recovered_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recovered_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recovered_txn, submessage_arena);
    }
    
  } else {
    
  }
  recovered_txn_ = recovered_txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RecoverTxnResponse.recovered_txn)
}

// -------------------------------------------------------------------

// QueryTxnRequest

inline bool QueryTxnRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void QueryTxnRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& QueryTxnRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& QueryTxnRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryTxnRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* QueryTxnRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.QueryTxnRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* QueryTxnRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryTxnRequest.header)
  return header_;
}
inline void QueryTxnRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.QueryTxnRequest.header)
}

inline bool QueryTxnRequest::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& QueryTxnRequest::_internal_txn() const {
  return *txn_;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& QueryTxnRequest::txn() const {
  const ::cockroach::storage::engine::enginepb::TxnMeta* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryTxnRequest.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::TxnMeta*>(
      &::cockroach::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* QueryTxnRequest::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.QueryTxnRequest.txn)
  
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* QueryTxnRequest::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryTxnRequest.txn)
  return txn_;
}
inline void QueryTxnRequest::set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.QueryTxnRequest.txn)
}

// bool wait_for_update = 3;
inline void QueryTxnRequest::clear_wait_for_update() {
  wait_for_update_ = false;
}
inline bool QueryTxnRequest::wait_for_update() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryTxnRequest.wait_for_update)
  return wait_for_update_;
}
inline void QueryTxnRequest::set_wait_for_update(bool value) {
  
  wait_for_update_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.QueryTxnRequest.wait_for_update)
}

inline int QueryTxnRequest::known_waiting_txns_size() const {
  return known_waiting_txns_.size();
}
inline void QueryTxnRequest::clear_known_waiting_txns() {
  known_waiting_txns_.Clear();
}
inline const ::std::string& QueryTxnRequest::known_waiting_txns(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
  return known_waiting_txns_.Get(index);
}
inline ::std::string* QueryTxnRequest::mutable_known_waiting_txns(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
  return known_waiting_txns_.Mutable(index);
}
inline void QueryTxnRequest::set_known_waiting_txns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
  known_waiting_txns_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryTxnRequest::set_known_waiting_txns(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
  known_waiting_txns_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryTxnRequest::set_known_waiting_txns(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  known_waiting_txns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
}
inline void QueryTxnRequest::set_known_waiting_txns(int index, const void* value, size_t size) {
  known_waiting_txns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
}
inline ::std::string* QueryTxnRequest::add_known_waiting_txns() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
  return known_waiting_txns_.Add();
}
inline void QueryTxnRequest::add_known_waiting_txns(const ::std::string& value) {
  known_waiting_txns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
}
#if LANG_CXX11
inline void QueryTxnRequest::add_known_waiting_txns(::std::string&& value) {
  known_waiting_txns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
}
#endif
inline void QueryTxnRequest::add_known_waiting_txns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  known_waiting_txns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
}
inline void QueryTxnRequest::add_known_waiting_txns(const void* value, size_t size) {
  known_waiting_txns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryTxnRequest::known_waiting_txns() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
  return known_waiting_txns_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryTxnRequest::mutable_known_waiting_txns() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.QueryTxnRequest.known_waiting_txns)
  return &known_waiting_txns_;
}

// -------------------------------------------------------------------

// QueryTxnResponse

inline bool QueryTxnResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void QueryTxnResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& QueryTxnResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& QueryTxnResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryTxnResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* QueryTxnResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.QueryTxnResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* QueryTxnResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryTxnResponse.header)
  return header_;
}
inline void QueryTxnResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.QueryTxnResponse.header)
}

inline bool QueryTxnResponse::has_queried_txn() const {
  return this != internal_default_instance() && queried_txn_ != NULL;
}
inline const ::cockroach::roachpb::Transaction& QueryTxnResponse::_internal_queried_txn() const {
  return *queried_txn_;
}
inline const ::cockroach::roachpb::Transaction& QueryTxnResponse::queried_txn() const {
  const ::cockroach::roachpb::Transaction* p = queried_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryTxnResponse.queried_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* QueryTxnResponse::release_queried_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.QueryTxnResponse.queried_txn)
  
  ::cockroach::roachpb::Transaction* temp = queried_txn_;
  queried_txn_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Transaction* QueryTxnResponse::mutable_queried_txn() {
  
  if (queried_txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Transaction>(GetArenaNoVirtual());
    queried_txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryTxnResponse.queried_txn)
  return queried_txn_;
}
inline void QueryTxnResponse::set_allocated_queried_txn(::cockroach::roachpb::Transaction* queried_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(queried_txn_);
  }
  if (queried_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queried_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queried_txn, submessage_arena);
    }
    
  } else {
    
  }
  queried_txn_ = queried_txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.QueryTxnResponse.queried_txn)
}

inline int QueryTxnResponse::waiting_txns_size() const {
  return waiting_txns_.size();
}
inline void QueryTxnResponse::clear_waiting_txns() {
  waiting_txns_.Clear();
}
inline const ::std::string& QueryTxnResponse::waiting_txns(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryTxnResponse.waiting_txns)
  return waiting_txns_.Get(index);
}
inline ::std::string* QueryTxnResponse::mutable_waiting_txns(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryTxnResponse.waiting_txns)
  return waiting_txns_.Mutable(index);
}
inline void QueryTxnResponse::set_waiting_txns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.QueryTxnResponse.waiting_txns)
  waiting_txns_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryTxnResponse::set_waiting_txns(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.QueryTxnResponse.waiting_txns)
  waiting_txns_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryTxnResponse::set_waiting_txns(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  waiting_txns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.QueryTxnResponse.waiting_txns)
}
inline void QueryTxnResponse::set_waiting_txns(int index, const void* value, size_t size) {
  waiting_txns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.QueryTxnResponse.waiting_txns)
}
inline ::std::string* QueryTxnResponse::add_waiting_txns() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.QueryTxnResponse.waiting_txns)
  return waiting_txns_.Add();
}
inline void QueryTxnResponse::add_waiting_txns(const ::std::string& value) {
  waiting_txns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.QueryTxnResponse.waiting_txns)
}
#if LANG_CXX11
inline void QueryTxnResponse::add_waiting_txns(::std::string&& value) {
  waiting_txns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cockroach.roachpb.QueryTxnResponse.waiting_txns)
}
#endif
inline void QueryTxnResponse::add_waiting_txns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  waiting_txns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.QueryTxnResponse.waiting_txns)
}
inline void QueryTxnResponse::add_waiting_txns(const void* value, size_t size) {
  waiting_txns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.QueryTxnResponse.waiting_txns)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryTxnResponse::waiting_txns() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.QueryTxnResponse.waiting_txns)
  return waiting_txns_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryTxnResponse::mutable_waiting_txns() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.QueryTxnResponse.waiting_txns)
  return &waiting_txns_;
}

// -------------------------------------------------------------------

// QueryIntentRequest

inline bool QueryIntentRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void QueryIntentRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& QueryIntentRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& QueryIntentRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryIntentRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* QueryIntentRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.QueryIntentRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* QueryIntentRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryIntentRequest.header)
  return header_;
}
inline void QueryIntentRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.QueryIntentRequest.header)
}

inline bool QueryIntentRequest::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& QueryIntentRequest::_internal_txn() const {
  return *txn_;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& QueryIntentRequest::txn() const {
  const ::cockroach::storage::engine::enginepb::TxnMeta* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryIntentRequest.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::TxnMeta*>(
      &::cockroach::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* QueryIntentRequest::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.QueryIntentRequest.txn)
  
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* QueryIntentRequest::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryIntentRequest.txn)
  return txn_;
}
inline void QueryIntentRequest::set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.QueryIntentRequest.txn)
}

// bool error_if_missing = 3;
inline void QueryIntentRequest::clear_error_if_missing() {
  error_if_missing_ = false;
}
inline bool QueryIntentRequest::error_if_missing() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryIntentRequest.error_if_missing)
  return error_if_missing_;
}
inline void QueryIntentRequest::set_error_if_missing(bool value) {
  
  error_if_missing_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.QueryIntentRequest.error_if_missing)
}

// -------------------------------------------------------------------

// QueryIntentResponse

inline bool QueryIntentResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void QueryIntentResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& QueryIntentResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& QueryIntentResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryIntentResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* QueryIntentResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.QueryIntentResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* QueryIntentResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.QueryIntentResponse.header)
  return header_;
}
inline void QueryIntentResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.QueryIntentResponse.header)
}

// bool found_intent = 2;
inline void QueryIntentResponse::clear_found_intent() {
  found_intent_ = false;
}
inline bool QueryIntentResponse::found_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.QueryIntentResponse.found_intent)
  return found_intent_;
}
inline void QueryIntentResponse::set_found_intent(bool value) {
  
  found_intent_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.QueryIntentResponse.found_intent)
}

// -------------------------------------------------------------------

// ResolveIntentRequest

inline bool ResolveIntentRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ResolveIntentRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ResolveIntentRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ResolveIntentRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ResolveIntentRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResolveIntentRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ResolveIntentRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResolveIntentRequest.header)
  return header_;
}
inline void ResolveIntentRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResolveIntentRequest.header)
}

inline bool ResolveIntentRequest::has_intent_txn() const {
  return this != internal_default_instance() && intent_txn_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& ResolveIntentRequest::_internal_intent_txn() const {
  return *intent_txn_;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& ResolveIntentRequest::intent_txn() const {
  const ::cockroach::storage::engine::enginepb::TxnMeta* p = intent_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRequest.intent_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::TxnMeta*>(
      &::cockroach::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* ResolveIntentRequest::release_intent_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResolveIntentRequest.intent_txn)
  
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = intent_txn_;
  intent_txn_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* ResolveIntentRequest::mutable_intent_txn() {
  
  if (intent_txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    intent_txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResolveIntentRequest.intent_txn)
  return intent_txn_;
}
inline void ResolveIntentRequest::set_allocated_intent_txn(::cockroach::storage::engine::enginepb::TxnMeta* intent_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(intent_txn_);
  }
  if (intent_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intent_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent_txn, submessage_arena);
    }
    
  } else {
    
  }
  intent_txn_ = intent_txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResolveIntentRequest.intent_txn)
}

// .cockroach.roachpb.TransactionStatus status = 3;
inline void ResolveIntentRequest::clear_status() {
  status_ = 0;
}
inline ::cockroach::roachpb::TransactionStatus ResolveIntentRequest::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRequest.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
inline void ResolveIntentRequest::set_status(::cockroach::roachpb::TransactionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ResolveIntentRequest.status)
}

// bool poison = 4;
inline void ResolveIntentRequest::clear_poison() {
  poison_ = false;
}
inline bool ResolveIntentRequest::poison() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRequest.poison)
  return poison_;
}
inline void ResolveIntentRequest::set_poison(bool value) {
  
  poison_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ResolveIntentRequest.poison)
}

// -------------------------------------------------------------------

// ResolveIntentResponse

inline bool ResolveIntentResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ResolveIntentResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ResolveIntentResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ResolveIntentResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ResolveIntentResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResolveIntentResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ResolveIntentResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResolveIntentResponse.header)
  return header_;
}
inline void ResolveIntentResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResolveIntentResponse.header)
}

// -------------------------------------------------------------------

// ResolveIntentRangeRequest

inline bool ResolveIntentRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ResolveIntentRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ResolveIntentRangeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ResolveIntentRangeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ResolveIntentRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResolveIntentRangeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ResolveIntentRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResolveIntentRangeRequest.header)
  return header_;
}
inline void ResolveIntentRangeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResolveIntentRangeRequest.header)
}

inline bool ResolveIntentRangeRequest::has_intent_txn() const {
  return this != internal_default_instance() && intent_txn_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& ResolveIntentRangeRequest::_internal_intent_txn() const {
  return *intent_txn_;
}
inline const ::cockroach::storage::engine::enginepb::TxnMeta& ResolveIntentRangeRequest::intent_txn() const {
  const ::cockroach::storage::engine::enginepb::TxnMeta* p = intent_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRangeRequest.intent_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::TxnMeta*>(
      &::cockroach::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* ResolveIntentRangeRequest::release_intent_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResolveIntentRangeRequest.intent_txn)
  
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = intent_txn_;
  intent_txn_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::TxnMeta* ResolveIntentRangeRequest::mutable_intent_txn() {
  
  if (intent_txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    intent_txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResolveIntentRangeRequest.intent_txn)
  return intent_txn_;
}
inline void ResolveIntentRangeRequest::set_allocated_intent_txn(::cockroach::storage::engine::enginepb::TxnMeta* intent_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(intent_txn_);
  }
  if (intent_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intent_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent_txn, submessage_arena);
    }
    
  } else {
    
  }
  intent_txn_ = intent_txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResolveIntentRangeRequest.intent_txn)
}

// .cockroach.roachpb.TransactionStatus status = 3;
inline void ResolveIntentRangeRequest::clear_status() {
  status_ = 0;
}
inline ::cockroach::roachpb::TransactionStatus ResolveIntentRangeRequest::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRangeRequest.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
inline void ResolveIntentRangeRequest::set_status(::cockroach::roachpb::TransactionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ResolveIntentRangeRequest.status)
}

// bool poison = 4;
inline void ResolveIntentRangeRequest::clear_poison() {
  poison_ = false;
}
inline bool ResolveIntentRangeRequest::poison() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRangeRequest.poison)
  return poison_;
}
inline void ResolveIntentRangeRequest::set_poison(bool value) {
  
  poison_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ResolveIntentRangeRequest.poison)
}

inline bool ResolveIntentRangeRequest::has_min_timestamp() const {
  return this != internal_default_instance() && min_timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& ResolveIntentRangeRequest::_internal_min_timestamp() const {
  return *min_timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& ResolveIntentRangeRequest::min_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = min_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRangeRequest.min_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* ResolveIntentRangeRequest::release_min_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResolveIntentRangeRequest.min_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = min_timestamp_;
  min_timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* ResolveIntentRangeRequest::mutable_min_timestamp() {
  
  if (min_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    min_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResolveIntentRangeRequest.min_timestamp)
  return min_timestamp_;
}
inline void ResolveIntentRangeRequest::set_allocated_min_timestamp(::cockroach::util::hlc::Timestamp* min_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_timestamp_);
  }
  if (min_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  min_timestamp_ = min_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResolveIntentRangeRequest.min_timestamp)
}

// -------------------------------------------------------------------

// ResolveIntentRangeResponse

inline bool ResolveIntentRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ResolveIntentRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ResolveIntentRangeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ResolveIntentRangeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResolveIntentRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ResolveIntentRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResolveIntentRangeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ResolveIntentRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResolveIntentRangeResponse.header)
  return header_;
}
inline void ResolveIntentRangeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ResolveIntentRangeResponse.header)
}

// -------------------------------------------------------------------

// MergeRequest

inline bool MergeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void MergeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& MergeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& MergeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* MergeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.MergeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* MergeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeRequest.header)
  return header_;
}
inline void MergeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeRequest.header)
}

inline bool MergeRequest::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::cockroach::roachpb::Value& MergeRequest::_internal_value() const {
  return *value_;
}
inline const ::cockroach::roachpb::Value& MergeRequest::value() const {
  const ::cockroach::roachpb::Value* p = value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeRequest.value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* MergeRequest::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.MergeRequest.value)
  
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Value* MergeRequest::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeRequest.value)
  return value_;
}
inline void MergeRequest::set_allocated_value(::cockroach::roachpb::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeRequest.value)
}

// -------------------------------------------------------------------

// MergeResponse

inline bool MergeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void MergeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& MergeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& MergeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* MergeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.MergeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* MergeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeResponse.header)
  return header_;
}
inline void MergeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeResponse.header)
}

// -------------------------------------------------------------------

// TruncateLogRequest

inline bool TruncateLogRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void TruncateLogRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& TruncateLogRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& TruncateLogRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TruncateLogRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* TruncateLogRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.TruncateLogRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* TruncateLogRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TruncateLogRequest.header)
  return header_;
}
inline void TruncateLogRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TruncateLogRequest.header)
}

// uint64 index = 2;
inline void TruncateLogRequest::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TruncateLogRequest::index() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TruncateLogRequest.index)
  return index_;
}
inline void TruncateLogRequest::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TruncateLogRequest.index)
}

inline void TruncateLogRequest::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TruncateLogRequest::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TruncateLogRequest.range_id)
  return range_id_;
}
inline void TruncateLogRequest::set_range_id(::google::protobuf::int64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TruncateLogRequest.range_id)
}

// -------------------------------------------------------------------

// TruncateLogResponse

inline bool TruncateLogResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void TruncateLogResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& TruncateLogResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& TruncateLogResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TruncateLogResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* TruncateLogResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.TruncateLogResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* TruncateLogResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TruncateLogResponse.header)
  return header_;
}
inline void TruncateLogResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TruncateLogResponse.header)
}

// -------------------------------------------------------------------

// RequestLeaseRequest

inline bool RequestLeaseRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RequestLeaseRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& RequestLeaseRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& RequestLeaseRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestLeaseRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* RequestLeaseRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestLeaseRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* RequestLeaseRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestLeaseRequest.header)
  return header_;
}
inline void RequestLeaseRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestLeaseRequest.header)
}

inline bool RequestLeaseRequest::has_lease() const {
  return this != internal_default_instance() && lease_ != NULL;
}
inline const ::cockroach::roachpb::Lease& RequestLeaseRequest::_internal_lease() const {
  return *lease_;
}
inline const ::cockroach::roachpb::Lease& RequestLeaseRequest::lease() const {
  const ::cockroach::roachpb::Lease* p = lease_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestLeaseRequest.lease)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* RequestLeaseRequest::release_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestLeaseRequest.lease)
  
  ::cockroach::roachpb::Lease* temp = lease_;
  lease_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Lease* RequestLeaseRequest::mutable_lease() {
  
  if (lease_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Lease>(GetArenaNoVirtual());
    lease_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestLeaseRequest.lease)
  return lease_;
}
inline void RequestLeaseRequest::set_allocated_lease(::cockroach::roachpb::Lease* lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lease_);
  }
  if (lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestLeaseRequest.lease)
}

inline bool RequestLeaseRequest::has_prev_lease() const {
  return this != internal_default_instance() && prev_lease_ != NULL;
}
inline const ::cockroach::roachpb::Lease& RequestLeaseRequest::_internal_prev_lease() const {
  return *prev_lease_;
}
inline const ::cockroach::roachpb::Lease& RequestLeaseRequest::prev_lease() const {
  const ::cockroach::roachpb::Lease* p = prev_lease_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestLeaseRequest.prev_lease)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* RequestLeaseRequest::release_prev_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestLeaseRequest.prev_lease)
  
  ::cockroach::roachpb::Lease* temp = prev_lease_;
  prev_lease_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Lease* RequestLeaseRequest::mutable_prev_lease() {
  
  if (prev_lease_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Lease>(GetArenaNoVirtual());
    prev_lease_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestLeaseRequest.prev_lease)
  return prev_lease_;
}
inline void RequestLeaseRequest::set_allocated_prev_lease(::cockroach::roachpb::Lease* prev_lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(prev_lease_);
  }
  if (prev_lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prev_lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prev_lease, submessage_arena);
    }
    
  } else {
    
  }
  prev_lease_ = prev_lease;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestLeaseRequest.prev_lease)
}

inline bool RequestLeaseRequest::has_min_proposed_ts() const {
  return this != internal_default_instance() && min_proposed_ts_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& RequestLeaseRequest::_internal_min_proposed_ts() const {
  return *min_proposed_ts_;
}
inline const ::cockroach::util::hlc::Timestamp& RequestLeaseRequest::min_proposed_ts() const {
  const ::cockroach::util::hlc::Timestamp* p = min_proposed_ts_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestLeaseRequest.min_proposed_ts)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* RequestLeaseRequest::release_min_proposed_ts() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestLeaseRequest.min_proposed_ts)
  
  ::cockroach::util::hlc::Timestamp* temp = min_proposed_ts_;
  min_proposed_ts_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* RequestLeaseRequest::mutable_min_proposed_ts() {
  
  if (min_proposed_ts_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    min_proposed_ts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestLeaseRequest.min_proposed_ts)
  return min_proposed_ts_;
}
inline void RequestLeaseRequest::set_allocated_min_proposed_ts(::cockroach::util::hlc::Timestamp* min_proposed_ts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_proposed_ts_);
  }
  if (min_proposed_ts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_proposed_ts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_proposed_ts, submessage_arena);
    }
    
  } else {
    
  }
  min_proposed_ts_ = min_proposed_ts;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestLeaseRequest.min_proposed_ts)
}

// -------------------------------------------------------------------

// TransferLeaseRequest

inline bool TransferLeaseRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void TransferLeaseRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& TransferLeaseRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& TransferLeaseRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransferLeaseRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* TransferLeaseRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.TransferLeaseRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* TransferLeaseRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransferLeaseRequest.header)
  return header_;
}
inline void TransferLeaseRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransferLeaseRequest.header)
}

inline bool TransferLeaseRequest::has_lease() const {
  return this != internal_default_instance() && lease_ != NULL;
}
inline const ::cockroach::roachpb::Lease& TransferLeaseRequest::_internal_lease() const {
  return *lease_;
}
inline const ::cockroach::roachpb::Lease& TransferLeaseRequest::lease() const {
  const ::cockroach::roachpb::Lease* p = lease_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransferLeaseRequest.lease)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* TransferLeaseRequest::release_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.TransferLeaseRequest.lease)
  
  ::cockroach::roachpb::Lease* temp = lease_;
  lease_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Lease* TransferLeaseRequest::mutable_lease() {
  
  if (lease_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Lease>(GetArenaNoVirtual());
    lease_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransferLeaseRequest.lease)
  return lease_;
}
inline void TransferLeaseRequest::set_allocated_lease(::cockroach::roachpb::Lease* lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lease_);
  }
  if (lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransferLeaseRequest.lease)
}

inline bool TransferLeaseRequest::has_prev_lease() const {
  return this != internal_default_instance() && prev_lease_ != NULL;
}
inline const ::cockroach::roachpb::Lease& TransferLeaseRequest::_internal_prev_lease() const {
  return *prev_lease_;
}
inline const ::cockroach::roachpb::Lease& TransferLeaseRequest::prev_lease() const {
  const ::cockroach::roachpb::Lease* p = prev_lease_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransferLeaseRequest.prev_lease)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* TransferLeaseRequest::release_prev_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.TransferLeaseRequest.prev_lease)
  
  ::cockroach::roachpb::Lease* temp = prev_lease_;
  prev_lease_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Lease* TransferLeaseRequest::mutable_prev_lease() {
  
  if (prev_lease_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Lease>(GetArenaNoVirtual());
    prev_lease_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransferLeaseRequest.prev_lease)
  return prev_lease_;
}
inline void TransferLeaseRequest::set_allocated_prev_lease(::cockroach::roachpb::Lease* prev_lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(prev_lease_);
  }
  if (prev_lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prev_lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prev_lease, submessage_arena);
    }
    
  } else {
    
  }
  prev_lease_ = prev_lease;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransferLeaseRequest.prev_lease)
}

// -------------------------------------------------------------------

// LeaseInfoRequest

inline bool LeaseInfoRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void LeaseInfoRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& LeaseInfoRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& LeaseInfoRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseInfoRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* LeaseInfoRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.LeaseInfoRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* LeaseInfoRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseInfoRequest.header)
  return header_;
}
inline void LeaseInfoRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseInfoRequest.header)
}

// -------------------------------------------------------------------

// LeaseInfoResponse

inline bool LeaseInfoResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void LeaseInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& LeaseInfoResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& LeaseInfoResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseInfoResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* LeaseInfoResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.LeaseInfoResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* LeaseInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseInfoResponse.header)
  return header_;
}
inline void LeaseInfoResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseInfoResponse.header)
}

inline bool LeaseInfoResponse::has_lease() const {
  return this != internal_default_instance() && lease_ != NULL;
}
inline const ::cockroach::roachpb::Lease& LeaseInfoResponse::_internal_lease() const {
  return *lease_;
}
inline const ::cockroach::roachpb::Lease& LeaseInfoResponse::lease() const {
  const ::cockroach::roachpb::Lease* p = lease_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseInfoResponse.lease)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* LeaseInfoResponse::release_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.LeaseInfoResponse.lease)
  
  ::cockroach::roachpb::Lease* temp = lease_;
  lease_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Lease* LeaseInfoResponse::mutable_lease() {
  
  if (lease_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Lease>(GetArenaNoVirtual());
    lease_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseInfoResponse.lease)
  return lease_;
}
inline void LeaseInfoResponse::set_allocated_lease(::cockroach::roachpb::Lease* lease) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lease_);
  }
  if (lease) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lease = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseInfoResponse.lease)
}

// -------------------------------------------------------------------

// RequestLeaseResponse

inline bool RequestLeaseResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RequestLeaseResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& RequestLeaseResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& RequestLeaseResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestLeaseResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* RequestLeaseResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestLeaseResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* RequestLeaseResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestLeaseResponse.header)
  return header_;
}
inline void RequestLeaseResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RequestLeaseResponse.header)
}

// -------------------------------------------------------------------

// ComputeChecksumRequest

inline bool ComputeChecksumRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ComputeChecksumRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ComputeChecksumRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ComputeChecksumRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ComputeChecksumRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ComputeChecksumRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ComputeChecksumRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ComputeChecksumRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ComputeChecksumRequest.header)
  return header_;
}
inline void ComputeChecksumRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ComputeChecksumRequest.header)
}

// uint32 version = 2;
inline void ComputeChecksumRequest::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 ComputeChecksumRequest::version() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ComputeChecksumRequest.version)
  return version_;
}
inline void ComputeChecksumRequest::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ComputeChecksumRequest.version)
}

// bool snapshot = 4;
inline void ComputeChecksumRequest::clear_snapshot() {
  snapshot_ = false;
}
inline bool ComputeChecksumRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ComputeChecksumRequest.snapshot)
  return snapshot_;
}
inline void ComputeChecksumRequest::set_snapshot(bool value) {
  
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ComputeChecksumRequest.snapshot)
}

// .cockroach.roachpb.ChecksumMode mode = 5;
inline void ComputeChecksumRequest::clear_mode() {
  mode_ = 0;
}
inline ::cockroach::roachpb::ChecksumMode ComputeChecksumRequest::mode() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ComputeChecksumRequest.mode)
  return static_cast< ::cockroach::roachpb::ChecksumMode >(mode_);
}
inline void ComputeChecksumRequest::set_mode(::cockroach::roachpb::ChecksumMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ComputeChecksumRequest.mode)
}

// bool checkpoint = 6;
inline void ComputeChecksumRequest::clear_checkpoint() {
  checkpoint_ = false;
}
inline bool ComputeChecksumRequest::checkpoint() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ComputeChecksumRequest.checkpoint)
  return checkpoint_;
}
inline void ComputeChecksumRequest::set_checkpoint(bool value) {
  
  checkpoint_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ComputeChecksumRequest.checkpoint)
}

// -------------------------------------------------------------------

// ComputeChecksumResponse

inline bool ComputeChecksumResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ComputeChecksumResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ComputeChecksumResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ComputeChecksumResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ComputeChecksumResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ComputeChecksumResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ComputeChecksumResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ComputeChecksumResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ComputeChecksumResponse.header)
  return header_;
}
inline void ComputeChecksumResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ComputeChecksumResponse.header)
}

inline void ComputeChecksumResponse::clear_checksum_id() {
  checksum_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputeChecksumResponse::checksum_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ComputeChecksumResponse.checksum_id)
  return checksum_id_.GetNoArena();
}
inline void ComputeChecksumResponse::set_checksum_id(const ::std::string& value) {
  
  checksum_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ComputeChecksumResponse.checksum_id)
}
#if LANG_CXX11
inline void ComputeChecksumResponse::set_checksum_id(::std::string&& value) {
  
  checksum_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ComputeChecksumResponse.checksum_id)
}
#endif
inline void ComputeChecksumResponse::set_checksum_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ComputeChecksumResponse.checksum_id)
}
inline void ComputeChecksumResponse::set_checksum_id(const void* value, size_t size) {
  
  checksum_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ComputeChecksumResponse.checksum_id)
}
inline ::std::string* ComputeChecksumResponse::mutable_checksum_id() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ComputeChecksumResponse.checksum_id)
  return checksum_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputeChecksumResponse::release_checksum_id() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ComputeChecksumResponse.checksum_id)
  
  return checksum_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputeChecksumResponse::set_allocated_checksum_id(::std::string* checksum_id) {
  if (checksum_id != NULL) {
    
  } else {
    
  }
  checksum_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ComputeChecksumResponse.checksum_id)
}

// -------------------------------------------------------------------

// ExternalStorage_LocalFilePath

// string path = 1;
inline void ExternalStorage_LocalFilePath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_LocalFilePath::path() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.LocalFilePath.path)
  return path_.GetNoArena();
}
inline void ExternalStorage_LocalFilePath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.LocalFilePath.path)
}
#if LANG_CXX11
inline void ExternalStorage_LocalFilePath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.LocalFilePath.path)
}
#endif
inline void ExternalStorage_LocalFilePath::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.LocalFilePath.path)
}
inline void ExternalStorage_LocalFilePath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.LocalFilePath.path)
}
inline ::std::string* ExternalStorage_LocalFilePath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.LocalFilePath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_LocalFilePath::release_path() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.LocalFilePath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_LocalFilePath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.LocalFilePath.path)
}

inline void ExternalStorage_LocalFilePath::clear_node_id() {
  node_id_ = 0u;
}
inline ::google::protobuf::uint32 ExternalStorage_LocalFilePath::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.LocalFilePath.node_id)
  return node_id_;
}
inline void ExternalStorage_LocalFilePath::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.LocalFilePath.node_id)
}

// -------------------------------------------------------------------

// ExternalStorage_Http

// string baseUri = 1;
inline void ExternalStorage_Http::clear_baseuri() {
  baseuri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Http::baseuri() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Http.baseUri)
  return baseuri_.GetNoArena();
}
inline void ExternalStorage_Http::set_baseuri(const ::std::string& value) {
  
  baseuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Http.baseUri)
}
#if LANG_CXX11
inline void ExternalStorage_Http::set_baseuri(::std::string&& value) {
  
  baseuri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Http.baseUri)
}
#endif
inline void ExternalStorage_Http::set_baseuri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  baseuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Http.baseUri)
}
inline void ExternalStorage_Http::set_baseuri(const char* value, size_t size) {
  
  baseuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Http.baseUri)
}
inline ::std::string* ExternalStorage_Http::mutable_baseuri() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Http.baseUri)
  return baseuri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Http::release_baseuri() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Http.baseUri)
  
  return baseuri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Http::set_allocated_baseuri(::std::string* baseuri) {
  if (baseuri != NULL) {
    
  } else {
    
  }
  baseuri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baseuri);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Http.baseUri)
}

// -------------------------------------------------------------------

// ExternalStorage_S3

// string bucket = 1;
inline void ExternalStorage_S3::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_S3::bucket() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3.bucket)
  return bucket_.GetNoArena();
}
inline void ExternalStorage_S3::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.S3.bucket)
}
#if LANG_CXX11
inline void ExternalStorage_S3::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.S3.bucket)
}
#endif
inline void ExternalStorage_S3::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.S3.bucket)
}
inline void ExternalStorage_S3::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.S3.bucket)
}
inline ::std::string* ExternalStorage_S3::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_S3::release_bucket() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_S3::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3.bucket)
}

// string prefix = 2;
inline void ExternalStorage_S3::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_S3::prefix() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3.prefix)
  return prefix_.GetNoArena();
}
inline void ExternalStorage_S3::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.S3.prefix)
}
#if LANG_CXX11
inline void ExternalStorage_S3::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.S3.prefix)
}
#endif
inline void ExternalStorage_S3::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.S3.prefix)
}
inline void ExternalStorage_S3::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.S3.prefix)
}
inline ::std::string* ExternalStorage_S3::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_S3::release_prefix() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_S3::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3.prefix)
}

// string access_key = 3;
inline void ExternalStorage_S3::clear_access_key() {
  access_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_S3::access_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3.access_key)
  return access_key_.GetNoArena();
}
inline void ExternalStorage_S3::set_access_key(const ::std::string& value) {
  
  access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.S3.access_key)
}
#if LANG_CXX11
inline void ExternalStorage_S3::set_access_key(::std::string&& value) {
  
  access_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.S3.access_key)
}
#endif
inline void ExternalStorage_S3::set_access_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.S3.access_key)
}
inline void ExternalStorage_S3::set_access_key(const char* value, size_t size) {
  
  access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.S3.access_key)
}
inline ::std::string* ExternalStorage_S3::mutable_access_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3.access_key)
  return access_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_S3::release_access_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3.access_key)
  
  return access_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_S3::set_allocated_access_key(::std::string* access_key) {
  if (access_key != NULL) {
    
  } else {
    
  }
  access_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3.access_key)
}

// string secret = 4;
inline void ExternalStorage_S3::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_S3::secret() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3.secret)
  return secret_.GetNoArena();
}
inline void ExternalStorage_S3::set_secret(const ::std::string& value) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.S3.secret)
}
#if LANG_CXX11
inline void ExternalStorage_S3::set_secret(::std::string&& value) {
  
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.S3.secret)
}
#endif
inline void ExternalStorage_S3::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.S3.secret)
}
inline void ExternalStorage_S3::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.S3.secret)
}
inline ::std::string* ExternalStorage_S3::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_S3::release_secret() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3.secret)
  
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_S3::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3.secret)
}

// string temp_token = 5;
inline void ExternalStorage_S3::clear_temp_token() {
  temp_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_S3::temp_token() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3.temp_token)
  return temp_token_.GetNoArena();
}
inline void ExternalStorage_S3::set_temp_token(const ::std::string& value) {
  
  temp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.S3.temp_token)
}
#if LANG_CXX11
inline void ExternalStorage_S3::set_temp_token(::std::string&& value) {
  
  temp_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.S3.temp_token)
}
#endif
inline void ExternalStorage_S3::set_temp_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  temp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.S3.temp_token)
}
inline void ExternalStorage_S3::set_temp_token(const char* value, size_t size) {
  
  temp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.S3.temp_token)
}
inline ::std::string* ExternalStorage_S3::mutable_temp_token() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3.temp_token)
  return temp_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_S3::release_temp_token() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3.temp_token)
  
  return temp_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_S3::set_allocated_temp_token(::std::string* temp_token) {
  if (temp_token != NULL) {
    
  } else {
    
  }
  temp_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), temp_token);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3.temp_token)
}

// string endpoint = 6;
inline void ExternalStorage_S3::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_S3::endpoint() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3.endpoint)
  return endpoint_.GetNoArena();
}
inline void ExternalStorage_S3::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.S3.endpoint)
}
#if LANG_CXX11
inline void ExternalStorage_S3::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.S3.endpoint)
}
#endif
inline void ExternalStorage_S3::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.S3.endpoint)
}
inline void ExternalStorage_S3::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.S3.endpoint)
}
inline ::std::string* ExternalStorage_S3::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_S3::release_endpoint() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3.endpoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_S3::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3.endpoint)
}

// string region = 7;
inline void ExternalStorage_S3::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_S3::region() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3.region)
  return region_.GetNoArena();
}
inline void ExternalStorage_S3::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.S3.region)
}
#if LANG_CXX11
inline void ExternalStorage_S3::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.S3.region)
}
#endif
inline void ExternalStorage_S3::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.S3.region)
}
inline void ExternalStorage_S3::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.S3.region)
}
inline ::std::string* ExternalStorage_S3::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_S3::release_region() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_S3::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3.region)
}

// string auth = 8;
inline void ExternalStorage_S3::clear_auth() {
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_S3::auth() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3.auth)
  return auth_.GetNoArena();
}
inline void ExternalStorage_S3::set_auth(const ::std::string& value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.S3.auth)
}
#if LANG_CXX11
inline void ExternalStorage_S3::set_auth(::std::string&& value) {
  
  auth_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.S3.auth)
}
#endif
inline void ExternalStorage_S3::set_auth(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.S3.auth)
}
inline void ExternalStorage_S3::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.S3.auth)
}
inline ::std::string* ExternalStorage_S3::mutable_auth() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3.auth)
  return auth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_S3::release_auth() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3.auth)
  
  return auth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_S3::set_allocated_auth(::std::string* auth) {
  if (auth != NULL) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3.auth)
}

// -------------------------------------------------------------------

// ExternalStorage_GCS

// string bucket = 1;
inline void ExternalStorage_GCS::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_GCS::bucket() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.GCS.bucket)
  return bucket_.GetNoArena();
}
inline void ExternalStorage_GCS::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.GCS.bucket)
}
#if LANG_CXX11
inline void ExternalStorage_GCS::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.GCS.bucket)
}
#endif
inline void ExternalStorage_GCS::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.GCS.bucket)
}
inline void ExternalStorage_GCS::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.GCS.bucket)
}
inline ::std::string* ExternalStorage_GCS::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.GCS.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_GCS::release_bucket() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.GCS.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_GCS::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.GCS.bucket)
}

// string prefix = 2;
inline void ExternalStorage_GCS::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_GCS::prefix() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.GCS.prefix)
  return prefix_.GetNoArena();
}
inline void ExternalStorage_GCS::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.GCS.prefix)
}
#if LANG_CXX11
inline void ExternalStorage_GCS::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.GCS.prefix)
}
#endif
inline void ExternalStorage_GCS::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.GCS.prefix)
}
inline void ExternalStorage_GCS::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.GCS.prefix)
}
inline ::std::string* ExternalStorage_GCS::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.GCS.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_GCS::release_prefix() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.GCS.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_GCS::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.GCS.prefix)
}

// string auth = 3;
inline void ExternalStorage_GCS::clear_auth() {
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_GCS::auth() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.GCS.auth)
  return auth_.GetNoArena();
}
inline void ExternalStorage_GCS::set_auth(const ::std::string& value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.GCS.auth)
}
#if LANG_CXX11
inline void ExternalStorage_GCS::set_auth(::std::string&& value) {
  
  auth_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.GCS.auth)
}
#endif
inline void ExternalStorage_GCS::set_auth(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.GCS.auth)
}
inline void ExternalStorage_GCS::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.GCS.auth)
}
inline ::std::string* ExternalStorage_GCS::mutable_auth() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.GCS.auth)
  return auth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_GCS::release_auth() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.GCS.auth)
  
  return auth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_GCS::set_allocated_auth(::std::string* auth) {
  if (auth != NULL) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.GCS.auth)
}

// string billing_project = 4;
inline void ExternalStorage_GCS::clear_billing_project() {
  billing_project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_GCS::billing_project() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.GCS.billing_project)
  return billing_project_.GetNoArena();
}
inline void ExternalStorage_GCS::set_billing_project(const ::std::string& value) {
  
  billing_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.GCS.billing_project)
}
#if LANG_CXX11
inline void ExternalStorage_GCS::set_billing_project(::std::string&& value) {
  
  billing_project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.GCS.billing_project)
}
#endif
inline void ExternalStorage_GCS::set_billing_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  billing_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.GCS.billing_project)
}
inline void ExternalStorage_GCS::set_billing_project(const char* value, size_t size) {
  
  billing_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.GCS.billing_project)
}
inline ::std::string* ExternalStorage_GCS::mutable_billing_project() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.GCS.billing_project)
  return billing_project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_GCS::release_billing_project() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.GCS.billing_project)
  
  return billing_project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_GCS::set_allocated_billing_project(::std::string* billing_project) {
  if (billing_project != NULL) {
    
  } else {
    
  }
  billing_project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), billing_project);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.GCS.billing_project)
}

// string credentials = 5;
inline void ExternalStorage_GCS::clear_credentials() {
  credentials_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_GCS::credentials() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.GCS.credentials)
  return credentials_.GetNoArena();
}
inline void ExternalStorage_GCS::set_credentials(const ::std::string& value) {
  
  credentials_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.GCS.credentials)
}
#if LANG_CXX11
inline void ExternalStorage_GCS::set_credentials(::std::string&& value) {
  
  credentials_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.GCS.credentials)
}
#endif
inline void ExternalStorage_GCS::set_credentials(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  credentials_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.GCS.credentials)
}
inline void ExternalStorage_GCS::set_credentials(const char* value, size_t size) {
  
  credentials_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.GCS.credentials)
}
inline ::std::string* ExternalStorage_GCS::mutable_credentials() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.GCS.credentials)
  return credentials_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_GCS::release_credentials() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.GCS.credentials)
  
  return credentials_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_GCS::set_allocated_credentials(::std::string* credentials) {
  if (credentials != NULL) {
    
  } else {
    
  }
  credentials_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), credentials);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.GCS.credentials)
}

// -------------------------------------------------------------------

// ExternalStorage_Azure

// string container = 1;
inline void ExternalStorage_Azure::clear_container() {
  container_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Azure::container() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Azure.container)
  return container_.GetNoArena();
}
inline void ExternalStorage_Azure::set_container(const ::std::string& value) {
  
  container_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Azure.container)
}
#if LANG_CXX11
inline void ExternalStorage_Azure::set_container(::std::string&& value) {
  
  container_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Azure.container)
}
#endif
inline void ExternalStorage_Azure::set_container(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Azure.container)
}
inline void ExternalStorage_Azure::set_container(const char* value, size_t size) {
  
  container_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Azure.container)
}
inline ::std::string* ExternalStorage_Azure::mutable_container() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Azure.container)
  return container_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Azure::release_container() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Azure.container)
  
  return container_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Azure::set_allocated_container(::std::string* container) {
  if (container != NULL) {
    
  } else {
    
  }
  container_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Azure.container)
}

// string prefix = 2;
inline void ExternalStorage_Azure::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Azure::prefix() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Azure.prefix)
  return prefix_.GetNoArena();
}
inline void ExternalStorage_Azure::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Azure.prefix)
}
#if LANG_CXX11
inline void ExternalStorage_Azure::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Azure.prefix)
}
#endif
inline void ExternalStorage_Azure::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Azure.prefix)
}
inline void ExternalStorage_Azure::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Azure.prefix)
}
inline ::std::string* ExternalStorage_Azure::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Azure.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Azure::release_prefix() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Azure.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Azure::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Azure.prefix)
}

// string account_name = 3;
inline void ExternalStorage_Azure::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Azure::account_name() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Azure.account_name)
  return account_name_.GetNoArena();
}
inline void ExternalStorage_Azure::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Azure.account_name)
}
#if LANG_CXX11
inline void ExternalStorage_Azure::set_account_name(::std::string&& value) {
  
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Azure.account_name)
}
#endif
inline void ExternalStorage_Azure::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Azure.account_name)
}
inline void ExternalStorage_Azure::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Azure.account_name)
}
inline ::std::string* ExternalStorage_Azure::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Azure.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Azure::release_account_name() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Azure.account_name)
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Azure::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Azure.account_name)
}

// string account_key = 4;
inline void ExternalStorage_Azure::clear_account_key() {
  account_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Azure::account_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Azure.account_key)
  return account_key_.GetNoArena();
}
inline void ExternalStorage_Azure::set_account_key(const ::std::string& value) {
  
  account_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Azure.account_key)
}
#if LANG_CXX11
inline void ExternalStorage_Azure::set_account_key(::std::string&& value) {
  
  account_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Azure.account_key)
}
#endif
inline void ExternalStorage_Azure::set_account_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Azure.account_key)
}
inline void ExternalStorage_Azure::set_account_key(const char* value, size_t size) {
  
  account_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Azure.account_key)
}
inline ::std::string* ExternalStorage_Azure::mutable_account_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Azure.account_key)
  return account_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Azure::release_account_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Azure.account_key)
  
  return account_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Azure::set_allocated_account_key(::std::string* account_key) {
  if (account_key != NULL) {
    
  } else {
    
  }
  account_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Azure.account_key)
}

// -------------------------------------------------------------------

// ExternalStorage_Workload

// string generator = 1;
inline void ExternalStorage_Workload::clear_generator() {
  generator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Workload::generator() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Workload.generator)
  return generator_.GetNoArena();
}
inline void ExternalStorage_Workload::set_generator(const ::std::string& value) {
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Workload.generator)
}
#if LANG_CXX11
inline void ExternalStorage_Workload::set_generator(::std::string&& value) {
  
  generator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Workload.generator)
}
#endif
inline void ExternalStorage_Workload::set_generator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Workload.generator)
}
inline void ExternalStorage_Workload::set_generator(const char* value, size_t size) {
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Workload.generator)
}
inline ::std::string* ExternalStorage_Workload::mutable_generator() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Workload.generator)
  return generator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Workload::release_generator() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Workload.generator)
  
  return generator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Workload::set_allocated_generator(::std::string* generator) {
  if (generator != NULL) {
    
  } else {
    
  }
  generator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generator);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Workload.generator)
}

// string version = 2;
inline void ExternalStorage_Workload::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Workload::version() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Workload.version)
  return version_.GetNoArena();
}
inline void ExternalStorage_Workload::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Workload.version)
}
#if LANG_CXX11
inline void ExternalStorage_Workload::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Workload.version)
}
#endif
inline void ExternalStorage_Workload::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Workload.version)
}
inline void ExternalStorage_Workload::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Workload.version)
}
inline ::std::string* ExternalStorage_Workload::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Workload.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Workload::release_version() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Workload.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Workload::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Workload.version)
}

// string table = 3;
inline void ExternalStorage_Workload::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Workload::table() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Workload.table)
  return table_.GetNoArena();
}
inline void ExternalStorage_Workload::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Workload.table)
}
#if LANG_CXX11
inline void ExternalStorage_Workload::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Workload.table)
}
#endif
inline void ExternalStorage_Workload::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Workload.table)
}
inline void ExternalStorage_Workload::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Workload.table)
}
inline ::std::string* ExternalStorage_Workload::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Workload.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Workload::release_table() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Workload.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Workload::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Workload.table)
}

// repeated string flags = 4;
inline int ExternalStorage_Workload::flags_size() const {
  return flags_.size();
}
inline void ExternalStorage_Workload::clear_flags() {
  flags_.Clear();
}
inline const ::std::string& ExternalStorage_Workload::flags(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Workload.flags)
  return flags_.Get(index);
}
inline ::std::string* ExternalStorage_Workload::mutable_flags(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Workload.flags)
  return flags_.Mutable(index);
}
inline void ExternalStorage_Workload::set_flags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Workload.flags)
  flags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ExternalStorage_Workload::set_flags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Workload.flags)
  flags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ExternalStorage_Workload::set_flags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Workload.flags)
}
inline void ExternalStorage_Workload::set_flags(int index, const char* value, size_t size) {
  flags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Workload.flags)
}
inline ::std::string* ExternalStorage_Workload::add_flags() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.ExternalStorage.Workload.flags)
  return flags_.Add();
}
inline void ExternalStorage_Workload::add_flags(const ::std::string& value) {
  flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ExternalStorage.Workload.flags)
}
#if LANG_CXX11
inline void ExternalStorage_Workload::add_flags(::std::string&& value) {
  flags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ExternalStorage.Workload.flags)
}
#endif
inline void ExternalStorage_Workload::add_flags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.ExternalStorage.Workload.flags)
}
inline void ExternalStorage_Workload::add_flags(const char* value, size_t size) {
  flags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.ExternalStorage.Workload.flags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExternalStorage_Workload::flags() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ExternalStorage.Workload.flags)
  return flags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExternalStorage_Workload::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ExternalStorage.Workload.flags)
  return &flags_;
}

// string format = 5;
inline void ExternalStorage_Workload::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalStorage_Workload::format() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Workload.format)
  return format_.GetNoArena();
}
inline void ExternalStorage_Workload::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Workload.format)
}
#if LANG_CXX11
inline void ExternalStorage_Workload::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExternalStorage.Workload.format)
}
#endif
inline void ExternalStorage_Workload::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExternalStorage.Workload.format)
}
inline void ExternalStorage_Workload::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExternalStorage.Workload.format)
}
inline ::std::string* ExternalStorage_Workload::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.Workload.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalStorage_Workload::release_format() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.Workload.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalStorage_Workload::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.Workload.format)
}

// int64 batch_begin = 6;
inline void ExternalStorage_Workload::clear_batch_begin() {
  batch_begin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExternalStorage_Workload::batch_begin() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Workload.batch_begin)
  return batch_begin_;
}
inline void ExternalStorage_Workload::set_batch_begin(::google::protobuf::int64 value) {
  
  batch_begin_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Workload.batch_begin)
}

// int64 batch_end = 7;
inline void ExternalStorage_Workload::clear_batch_end() {
  batch_end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExternalStorage_Workload::batch_end() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.Workload.batch_end)
  return batch_end_;
}
inline void ExternalStorage_Workload::set_batch_end(::google::protobuf::int64 value) {
  
  batch_end_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.Workload.batch_end)
}

// -------------------------------------------------------------------

// ExternalStorage

// .cockroach.roachpb.ExternalStorageProvider provider = 1;
inline void ExternalStorage::clear_provider() {
  provider_ = 0;
}
inline ::cockroach::roachpb::ExternalStorageProvider ExternalStorage::provider() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.provider)
  return static_cast< ::cockroach::roachpb::ExternalStorageProvider >(provider_);
}
inline void ExternalStorage::set_provider(::cockroach::roachpb::ExternalStorageProvider value) {
  
  provider_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExternalStorage.provider)
}

inline bool ExternalStorage::has_localfile() const {
  return this != internal_default_instance() && localfile_ != NULL;
}
inline void ExternalStorage::clear_localfile() {
  if (GetArenaNoVirtual() == NULL && localfile_ != NULL) {
    delete localfile_;
  }
  localfile_ = NULL;
}
inline const ::cockroach::roachpb::ExternalStorage_LocalFilePath& ExternalStorage::_internal_localfile() const {
  return *localfile_;
}
inline const ::cockroach::roachpb::ExternalStorage_LocalFilePath& ExternalStorage::localfile() const {
  const ::cockroach::roachpb::ExternalStorage_LocalFilePath* p = localfile_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.LocalFile)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ExternalStorage_LocalFilePath*>(
      &::cockroach::roachpb::_ExternalStorage_LocalFilePath_default_instance_);
}
inline ::cockroach::roachpb::ExternalStorage_LocalFilePath* ExternalStorage::release_localfile() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.LocalFile)
  
  ::cockroach::roachpb::ExternalStorage_LocalFilePath* temp = localfile_;
  localfile_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ExternalStorage_LocalFilePath* ExternalStorage::mutable_localfile() {
  
  if (localfile_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_LocalFilePath>(GetArenaNoVirtual());
    localfile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.LocalFile)
  return localfile_;
}
inline void ExternalStorage::set_allocated_localfile(::cockroach::roachpb::ExternalStorage_LocalFilePath* localfile) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete localfile_;
  }
  if (localfile) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      localfile = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, localfile, submessage_arena);
    }
    
  } else {
    
  }
  localfile_ = localfile;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.LocalFile)
}

inline bool ExternalStorage::has_httppath() const {
  return this != internal_default_instance() && httppath_ != NULL;
}
inline void ExternalStorage::clear_httppath() {
  if (GetArenaNoVirtual() == NULL && httppath_ != NULL) {
    delete httppath_;
  }
  httppath_ = NULL;
}
inline const ::cockroach::roachpb::ExternalStorage_Http& ExternalStorage::_internal_httppath() const {
  return *httppath_;
}
inline const ::cockroach::roachpb::ExternalStorage_Http& ExternalStorage::httppath() const {
  const ::cockroach::roachpb::ExternalStorage_Http* p = httppath_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.HttpPath)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ExternalStorage_Http*>(
      &::cockroach::roachpb::_ExternalStorage_Http_default_instance_);
}
inline ::cockroach::roachpb::ExternalStorage_Http* ExternalStorage::release_httppath() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.HttpPath)
  
  ::cockroach::roachpb::ExternalStorage_Http* temp = httppath_;
  httppath_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ExternalStorage_Http* ExternalStorage::mutable_httppath() {
  
  if (httppath_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_Http>(GetArenaNoVirtual());
    httppath_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.HttpPath)
  return httppath_;
}
inline void ExternalStorage::set_allocated_httppath(::cockroach::roachpb::ExternalStorage_Http* httppath) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete httppath_;
  }
  if (httppath) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      httppath = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, httppath, submessage_arena);
    }
    
  } else {
    
  }
  httppath_ = httppath;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.HttpPath)
}

// .cockroach.roachpb.ExternalStorage.GCS GoogleCloudConfig = 4;
inline bool ExternalStorage::has_googlecloudconfig() const {
  return this != internal_default_instance() && googlecloudconfig_ != NULL;
}
inline void ExternalStorage::clear_googlecloudconfig() {
  if (GetArenaNoVirtual() == NULL && googlecloudconfig_ != NULL) {
    delete googlecloudconfig_;
  }
  googlecloudconfig_ = NULL;
}
inline const ::cockroach::roachpb::ExternalStorage_GCS& ExternalStorage::_internal_googlecloudconfig() const {
  return *googlecloudconfig_;
}
inline const ::cockroach::roachpb::ExternalStorage_GCS& ExternalStorage::googlecloudconfig() const {
  const ::cockroach::roachpb::ExternalStorage_GCS* p = googlecloudconfig_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.GoogleCloudConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ExternalStorage_GCS*>(
      &::cockroach::roachpb::_ExternalStorage_GCS_default_instance_);
}
inline ::cockroach::roachpb::ExternalStorage_GCS* ExternalStorage::release_googlecloudconfig() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.GoogleCloudConfig)
  
  ::cockroach::roachpb::ExternalStorage_GCS* temp = googlecloudconfig_;
  googlecloudconfig_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ExternalStorage_GCS* ExternalStorage::mutable_googlecloudconfig() {
  
  if (googlecloudconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_GCS>(GetArenaNoVirtual());
    googlecloudconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.GoogleCloudConfig)
  return googlecloudconfig_;
}
inline void ExternalStorage::set_allocated_googlecloudconfig(::cockroach::roachpb::ExternalStorage_GCS* googlecloudconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete googlecloudconfig_;
  }
  if (googlecloudconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      googlecloudconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, googlecloudconfig, submessage_arena);
    }
    
  } else {
    
  }
  googlecloudconfig_ = googlecloudconfig;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.GoogleCloudConfig)
}

// .cockroach.roachpb.ExternalStorage.S3 S3Config = 5;
inline bool ExternalStorage::has_s3config() const {
  return this != internal_default_instance() && s3config_ != NULL;
}
inline void ExternalStorage::clear_s3config() {
  if (GetArenaNoVirtual() == NULL && s3config_ != NULL) {
    delete s3config_;
  }
  s3config_ = NULL;
}
inline const ::cockroach::roachpb::ExternalStorage_S3& ExternalStorage::_internal_s3config() const {
  return *s3config_;
}
inline const ::cockroach::roachpb::ExternalStorage_S3& ExternalStorage::s3config() const {
  const ::cockroach::roachpb::ExternalStorage_S3* p = s3config_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.S3Config)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ExternalStorage_S3*>(
      &::cockroach::roachpb::_ExternalStorage_S3_default_instance_);
}
inline ::cockroach::roachpb::ExternalStorage_S3* ExternalStorage::release_s3config() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.S3Config)
  
  ::cockroach::roachpb::ExternalStorage_S3* temp = s3config_;
  s3config_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ExternalStorage_S3* ExternalStorage::mutable_s3config() {
  
  if (s3config_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_S3>(GetArenaNoVirtual());
    s3config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.S3Config)
  return s3config_;
}
inline void ExternalStorage::set_allocated_s3config(::cockroach::roachpb::ExternalStorage_S3* s3config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete s3config_;
  }
  if (s3config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      s3config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, s3config, submessage_arena);
    }
    
  } else {
    
  }
  s3config_ = s3config;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.S3Config)
}

// .cockroach.roachpb.ExternalStorage.Azure AzureConfig = 6;
inline bool ExternalStorage::has_azureconfig() const {
  return this != internal_default_instance() && azureconfig_ != NULL;
}
inline void ExternalStorage::clear_azureconfig() {
  if (GetArenaNoVirtual() == NULL && azureconfig_ != NULL) {
    delete azureconfig_;
  }
  azureconfig_ = NULL;
}
inline const ::cockroach::roachpb::ExternalStorage_Azure& ExternalStorage::_internal_azureconfig() const {
  return *azureconfig_;
}
inline const ::cockroach::roachpb::ExternalStorage_Azure& ExternalStorage::azureconfig() const {
  const ::cockroach::roachpb::ExternalStorage_Azure* p = azureconfig_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.AzureConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ExternalStorage_Azure*>(
      &::cockroach::roachpb::_ExternalStorage_Azure_default_instance_);
}
inline ::cockroach::roachpb::ExternalStorage_Azure* ExternalStorage::release_azureconfig() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.AzureConfig)
  
  ::cockroach::roachpb::ExternalStorage_Azure* temp = azureconfig_;
  azureconfig_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ExternalStorage_Azure* ExternalStorage::mutable_azureconfig() {
  
  if (azureconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_Azure>(GetArenaNoVirtual());
    azureconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.AzureConfig)
  return azureconfig_;
}
inline void ExternalStorage::set_allocated_azureconfig(::cockroach::roachpb::ExternalStorage_Azure* azureconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete azureconfig_;
  }
  if (azureconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      azureconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, azureconfig, submessage_arena);
    }
    
  } else {
    
  }
  azureconfig_ = azureconfig;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.AzureConfig)
}

// .cockroach.roachpb.ExternalStorage.Workload WorkloadConfig = 7;
inline bool ExternalStorage::has_workloadconfig() const {
  return this != internal_default_instance() && workloadconfig_ != NULL;
}
inline void ExternalStorage::clear_workloadconfig() {
  if (GetArenaNoVirtual() == NULL && workloadconfig_ != NULL) {
    delete workloadconfig_;
  }
  workloadconfig_ = NULL;
}
inline const ::cockroach::roachpb::ExternalStorage_Workload& ExternalStorage::_internal_workloadconfig() const {
  return *workloadconfig_;
}
inline const ::cockroach::roachpb::ExternalStorage_Workload& ExternalStorage::workloadconfig() const {
  const ::cockroach::roachpb::ExternalStorage_Workload* p = workloadconfig_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExternalStorage.WorkloadConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ExternalStorage_Workload*>(
      &::cockroach::roachpb::_ExternalStorage_Workload_default_instance_);
}
inline ::cockroach::roachpb::ExternalStorage_Workload* ExternalStorage::release_workloadconfig() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExternalStorage.WorkloadConfig)
  
  ::cockroach::roachpb::ExternalStorage_Workload* temp = workloadconfig_;
  workloadconfig_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ExternalStorage_Workload* ExternalStorage::mutable_workloadconfig() {
  
  if (workloadconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ExternalStorage_Workload>(GetArenaNoVirtual());
    workloadconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExternalStorage.WorkloadConfig)
  return workloadconfig_;
}
inline void ExternalStorage::set_allocated_workloadconfig(::cockroach::roachpb::ExternalStorage_Workload* workloadconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete workloadconfig_;
  }
  if (workloadconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      workloadconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workloadconfig, submessage_arena);
    }
    
  } else {
    
  }
  workloadconfig_ = workloadconfig;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExternalStorage.WorkloadConfig)
}

// -------------------------------------------------------------------

// WriteBatchRequest

inline bool WriteBatchRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void WriteBatchRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& WriteBatchRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& WriteBatchRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteBatchRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* WriteBatchRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.WriteBatchRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* WriteBatchRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteBatchRequest.header)
  return header_;
}
inline void WriteBatchRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteBatchRequest.header)
}

inline bool WriteBatchRequest::has_data_span() const {
  return this != internal_default_instance() && data_span_ != NULL;
}
inline const ::cockroach::roachpb::Span& WriteBatchRequest::_internal_data_span() const {
  return *data_span_;
}
inline const ::cockroach::roachpb::Span& WriteBatchRequest::data_span() const {
  const ::cockroach::roachpb::Span* p = data_span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteBatchRequest.data_span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
inline ::cockroach::roachpb::Span* WriteBatchRequest::release_data_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.WriteBatchRequest.data_span)
  
  ::cockroach::roachpb::Span* temp = data_span_;
  data_span_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Span* WriteBatchRequest::mutable_data_span() {
  
  if (data_span_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Span>(GetArenaNoVirtual());
    data_span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteBatchRequest.data_span)
  return data_span_;
}
inline void WriteBatchRequest::set_allocated_data_span(::cockroach::roachpb::Span* data_span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_span_);
  }
  if (data_span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_span, submessage_arena);
    }
    
  } else {
    
  }
  data_span_ = data_span;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteBatchRequest.data_span)
}

// bytes data = 3;
inline void WriteBatchRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteBatchRequest::data() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteBatchRequest.data)
  return data_.GetNoArena();
}
inline void WriteBatchRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.WriteBatchRequest.data)
}
#if LANG_CXX11
inline void WriteBatchRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.WriteBatchRequest.data)
}
#endif
inline void WriteBatchRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.WriteBatchRequest.data)
}
inline void WriteBatchRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.WriteBatchRequest.data)
}
inline ::std::string* WriteBatchRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteBatchRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteBatchRequest::release_data() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.WriteBatchRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteBatchRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteBatchRequest.data)
}

// -------------------------------------------------------------------

// WriteBatchResponse

inline bool WriteBatchResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void WriteBatchResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& WriteBatchResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& WriteBatchResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteBatchResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* WriteBatchResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.WriteBatchResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* WriteBatchResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteBatchResponse.header)
  return header_;
}
inline void WriteBatchResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteBatchResponse.header)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExportRequest

inline bool ExportRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ExportRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ExportRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ExportRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ExportRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ExportRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportRequest.header)
  return header_;
}
inline void ExportRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportRequest.header)
}

inline bool ExportRequest::has_storage() const {
  return this != internal_default_instance() && storage_ != NULL;
}
inline void ExportRequest::clear_storage() {
  if (GetArenaNoVirtual() == NULL && storage_ != NULL) {
    delete storage_;
  }
  storage_ = NULL;
}
inline const ::cockroach::roachpb::ExternalStorage& ExportRequest::_internal_storage() const {
  return *storage_;
}
inline const ::cockroach::roachpb::ExternalStorage& ExportRequest::storage() const {
  const ::cockroach::roachpb::ExternalStorage* p = storage_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportRequest.storage)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ExternalStorage*>(
      &::cockroach::roachpb::_ExternalStorage_default_instance_);
}
inline ::cockroach::roachpb::ExternalStorage* ExportRequest::release_storage() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportRequest.storage)
  
  ::cockroach::roachpb::ExternalStorage* temp = storage_;
  storage_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ExternalStorage* ExportRequest::mutable_storage() {
  
  if (storage_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ExternalStorage>(GetArenaNoVirtual());
    storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportRequest.storage)
  return storage_;
}
inline void ExportRequest::set_allocated_storage(::cockroach::roachpb::ExternalStorage* storage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storage_;
  }
  if (storage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportRequest.storage)
}

inline bool ExportRequest::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& ExportRequest::_internal_start_time() const {
  return *start_time_;
}
inline const ::cockroach::util::hlc::Timestamp& ExportRequest::start_time() const {
  const ::cockroach::util::hlc::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportRequest.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* ExportRequest::release_start_time() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportRequest.start_time)
  
  ::cockroach::util::hlc::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* ExportRequest::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportRequest.start_time)
  return start_time_;
}
inline void ExportRequest::set_allocated_start_time(::cockroach::util::hlc::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportRequest.start_time)
}

inline void ExportRequest::clear_mvcc_filter() {
  mvcc_filter_ = 0;
}
inline ::cockroach::roachpb::MVCCFilter ExportRequest::mvcc_filter() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportRequest.mvcc_filter)
  return static_cast< ::cockroach::roachpb::MVCCFilter >(mvcc_filter_);
}
inline void ExportRequest::set_mvcc_filter(::cockroach::roachpb::MVCCFilter value) {
  
  mvcc_filter_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExportRequest.mvcc_filter)
}

inline void ExportRequest::clear_return_sst() {
  return_sst_ = false;
}
inline bool ExportRequest::return_sst() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportRequest.return_sst)
  return return_sst_;
}
inline void ExportRequest::set_return_sst(bool value) {
  
  return_sst_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExportRequest.return_sst)
}

// bool omit_checksum = 6;
inline void ExportRequest::clear_omit_checksum() {
  omit_checksum_ = false;
}
inline bool ExportRequest::omit_checksum() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportRequest.omit_checksum)
  return omit_checksum_;
}
inline void ExportRequest::set_omit_checksum(bool value) {
  
  omit_checksum_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExportRequest.omit_checksum)
}

// bool enable_time_bound_iterator_optimization = 7;
inline void ExportRequest::clear_enable_time_bound_iterator_optimization() {
  enable_time_bound_iterator_optimization_ = false;
}
inline bool ExportRequest::enable_time_bound_iterator_optimization() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportRequest.enable_time_bound_iterator_optimization)
  return enable_time_bound_iterator_optimization_;
}
inline void ExportRequest::set_enable_time_bound_iterator_optimization(bool value) {
  
  enable_time_bound_iterator_optimization_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExportRequest.enable_time_bound_iterator_optimization)
}

inline int ExportRequest::storage_by_locality_kv_size() const {
  return storage_by_locality_kv_.size();
}
inline void ExportRequest::clear_storage_by_locality_kv() {
  storage_by_locality_kv_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >&
ExportRequest::storage_by_locality_kv() const {
  // @@protoc_insertion_point(field_map:cockroach.roachpb.ExportRequest.storage_by_locality_kv)
  return storage_by_locality_kv_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::cockroach::roachpb::ExternalStorage >*
ExportRequest::mutable_storage_by_locality_kv() {
  // @@protoc_insertion_point(field_mutable_map:cockroach.roachpb.ExportRequest.storage_by_locality_kv)
  return storage_by_locality_kv_.MutableMap();
}

// -------------------------------------------------------------------

// BulkOpSummary

// int64 data_size = 1;
inline void BulkOpSummary::clear_data_size() {
  data_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BulkOpSummary::data_size() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BulkOpSummary.data_size)
  return data_size_;
}
inline void BulkOpSummary::set_data_size(::google::protobuf::int64 value) {
  
  data_size_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.BulkOpSummary.data_size)
}

// int64 rows = 2;
inline void BulkOpSummary::clear_rows() {
  rows_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BulkOpSummary::rows() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BulkOpSummary.rows)
  return rows_;
}
inline void BulkOpSummary::set_rows(::google::protobuf::int64 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.BulkOpSummary.rows)
}

// int64 index_entries = 3;
inline void BulkOpSummary::clear_index_entries() {
  index_entries_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BulkOpSummary::index_entries() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BulkOpSummary.index_entries)
  return index_entries_;
}
inline void BulkOpSummary::set_index_entries(::google::protobuf::int64 value) {
  
  index_entries_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.BulkOpSummary.index_entries)
}

// int64 system_records = 4;
inline void BulkOpSummary::clear_system_records() {
  system_records_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BulkOpSummary::system_records() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BulkOpSummary.system_records)
  return system_records_;
}
inline void BulkOpSummary::set_system_records(::google::protobuf::int64 value) {
  
  system_records_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.BulkOpSummary.system_records)
}

// -------------------------------------------------------------------

// ExportResponse_File

inline bool ExportResponse_File::has_span() const {
  return this != internal_default_instance() && span_ != NULL;
}
inline const ::cockroach::roachpb::Span& ExportResponse_File::_internal_span() const {
  return *span_;
}
inline const ::cockroach::roachpb::Span& ExportResponse_File::span() const {
  const ::cockroach::roachpb::Span* p = span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.File.span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
inline ::cockroach::roachpb::Span* ExportResponse_File::release_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportResponse.File.span)
  
  ::cockroach::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Span* ExportResponse_File::mutable_span() {
  
  if (span_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Span>(GetArenaNoVirtual());
    span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.File.span)
  return span_;
}
inline void ExportResponse_File::set_allocated_span(::cockroach::roachpb::Span* span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(span_);
  }
  if (span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportResponse.File.span)
}

// string path = 2;
inline void ExportResponse_File::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExportResponse_File::path() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.File.path)
  return path_.GetNoArena();
}
inline void ExportResponse_File::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExportResponse.File.path)
}
#if LANG_CXX11
inline void ExportResponse_File::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExportResponse.File.path)
}
#endif
inline void ExportResponse_File::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExportResponse.File.path)
}
inline void ExportResponse_File::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExportResponse.File.path)
}
inline ::std::string* ExportResponse_File::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.File.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportResponse_File::release_path() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportResponse.File.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportResponse_File::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportResponse.File.path)
}

// bytes sha512 = 5;
inline void ExportResponse_File::clear_sha512() {
  sha512_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExportResponse_File::sha512() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.File.sha512)
  return sha512_.GetNoArena();
}
inline void ExportResponse_File::set_sha512(const ::std::string& value) {
  
  sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExportResponse.File.sha512)
}
#if LANG_CXX11
inline void ExportResponse_File::set_sha512(::std::string&& value) {
  
  sha512_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExportResponse.File.sha512)
}
#endif
inline void ExportResponse_File::set_sha512(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExportResponse.File.sha512)
}
inline void ExportResponse_File::set_sha512(const void* value, size_t size) {
  
  sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExportResponse.File.sha512)
}
inline ::std::string* ExportResponse_File::mutable_sha512() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.File.sha512)
  return sha512_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportResponse_File::release_sha512() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportResponse.File.sha512)
  
  return sha512_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportResponse_File::set_allocated_sha512(::std::string* sha512) {
  if (sha512 != NULL) {
    
  } else {
    
  }
  sha512_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha512);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportResponse.File.sha512)
}

inline bool ExportResponse_File::has_exported() const {
  return this != internal_default_instance() && exported_ != NULL;
}
inline void ExportResponse_File::clear_exported() {
  if (GetArenaNoVirtual() == NULL && exported_ != NULL) {
    delete exported_;
  }
  exported_ = NULL;
}
inline const ::cockroach::roachpb::BulkOpSummary& ExportResponse_File::_internal_exported() const {
  return *exported_;
}
inline const ::cockroach::roachpb::BulkOpSummary& ExportResponse_File::exported() const {
  const ::cockroach::roachpb::BulkOpSummary* p = exported_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.File.exported)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::BulkOpSummary*>(
      &::cockroach::roachpb::_BulkOpSummary_default_instance_);
}
inline ::cockroach::roachpb::BulkOpSummary* ExportResponse_File::release_exported() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportResponse.File.exported)
  
  ::cockroach::roachpb::BulkOpSummary* temp = exported_;
  exported_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::BulkOpSummary* ExportResponse_File::mutable_exported() {
  
  if (exported_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::BulkOpSummary>(GetArenaNoVirtual());
    exported_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.File.exported)
  return exported_;
}
inline void ExportResponse_File::set_allocated_exported(::cockroach::roachpb::BulkOpSummary* exported) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exported_;
  }
  if (exported) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exported = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exported, submessage_arena);
    }
    
  } else {
    
  }
  exported_ = exported;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportResponse.File.exported)
}

inline void ExportResponse_File::clear_sst() {
  sst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExportResponse_File::sst() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.File.sst)
  return sst_.GetNoArena();
}
inline void ExportResponse_File::set_sst(const ::std::string& value) {
  
  sst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExportResponse.File.sst)
}
#if LANG_CXX11
inline void ExportResponse_File::set_sst(::std::string&& value) {
  
  sst_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExportResponse.File.sst)
}
#endif
inline void ExportResponse_File::set_sst(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExportResponse.File.sst)
}
inline void ExportResponse_File::set_sst(const void* value, size_t size) {
  
  sst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExportResponse.File.sst)
}
inline ::std::string* ExportResponse_File::mutable_sst() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.File.sst)
  return sst_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportResponse_File::release_sst() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportResponse.File.sst)
  
  return sst_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportResponse_File::set_allocated_sst(::std::string* sst) {
  if (sst != NULL) {
    
  } else {
    
  }
  sst_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sst);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportResponse.File.sst)
}

inline void ExportResponse_File::clear_locality_kv() {
  locality_kv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExportResponse_File::locality_kv() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.File.locality_kv)
  return locality_kv_.GetNoArena();
}
inline void ExportResponse_File::set_locality_kv(const ::std::string& value) {
  
  locality_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ExportResponse.File.locality_kv)
}
#if LANG_CXX11
inline void ExportResponse_File::set_locality_kv(::std::string&& value) {
  
  locality_kv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ExportResponse.File.locality_kv)
}
#endif
inline void ExportResponse_File::set_locality_kv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  locality_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ExportResponse.File.locality_kv)
}
inline void ExportResponse_File::set_locality_kv(const char* value, size_t size) {
  
  locality_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ExportResponse.File.locality_kv)
}
inline ::std::string* ExportResponse_File::mutable_locality_kv() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.File.locality_kv)
  return locality_kv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportResponse_File::release_locality_kv() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportResponse.File.locality_kv)
  
  return locality_kv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportResponse_File::set_allocated_locality_kv(::std::string* locality_kv) {
  if (locality_kv != NULL) {
    
  } else {
    
  }
  locality_kv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locality_kv);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportResponse.File.locality_kv)
}

// -------------------------------------------------------------------

// ExportResponse

inline bool ExportResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ExportResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ExportResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ExportResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ExportResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ExportResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.header)
  return header_;
}
inline void ExportResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportResponse.header)
}

inline int ExportResponse::files_size() const {
  return files_.size();
}
inline void ExportResponse::clear_files() {
  files_.Clear();
}
inline ::cockroach::roachpb::ExportResponse_File* ExportResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ExportResponse_File >*
ExportResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ExportResponse.files)
  return &files_;
}
inline const ::cockroach::roachpb::ExportResponse_File& ExportResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.files)
  return files_.Get(index);
}
inline ::cockroach::roachpb::ExportResponse_File* ExportResponse::add_files() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ExportResponse.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ExportResponse_File >&
ExportResponse::files() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ExportResponse.files)
  return files_;
}

inline bool ExportResponse::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& ExportResponse::_internal_start_time() const {
  return *start_time_;
}
inline const ::cockroach::util::hlc::Timestamp& ExportResponse::start_time() const {
  const ::cockroach::util::hlc::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ExportResponse.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* ExportResponse::release_start_time() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ExportResponse.start_time)
  
  ::cockroach::util::hlc::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* ExportResponse::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ExportResponse.start_time)
  return start_time_;
}
inline void ExportResponse::set_allocated_start_time(::cockroach::util::hlc::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ExportResponse.start_time)
}

// -------------------------------------------------------------------

// ImportRequest_File

inline bool ImportRequest_File::has_dir() const {
  return this != internal_default_instance() && dir_ != NULL;
}
inline void ImportRequest_File::clear_dir() {
  if (GetArenaNoVirtual() == NULL && dir_ != NULL) {
    delete dir_;
  }
  dir_ = NULL;
}
inline const ::cockroach::roachpb::ExternalStorage& ImportRequest_File::_internal_dir() const {
  return *dir_;
}
inline const ::cockroach::roachpb::ExternalStorage& ImportRequest_File::dir() const {
  const ::cockroach::roachpb::ExternalStorage* p = dir_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.File.dir)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ExternalStorage*>(
      &::cockroach::roachpb::_ExternalStorage_default_instance_);
}
inline ::cockroach::roachpb::ExternalStorage* ImportRequest_File::release_dir() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportRequest.File.dir)
  
  ::cockroach::roachpb::ExternalStorage* temp = dir_;
  dir_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ExternalStorage* ImportRequest_File::mutable_dir() {
  
  if (dir_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ExternalStorage>(GetArenaNoVirtual());
    dir_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.File.dir)
  return dir_;
}
inline void ImportRequest_File::set_allocated_dir(::cockroach::roachpb::ExternalStorage* dir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dir_;
  }
  if (dir) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dir, submessage_arena);
    }
    
  } else {
    
  }
  dir_ = dir;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportRequest.File.dir)
}

// string path = 2;
inline void ImportRequest_File::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImportRequest_File::path() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.File.path)
  return path_.GetNoArena();
}
inline void ImportRequest_File::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ImportRequest.File.path)
}
#if LANG_CXX11
inline void ImportRequest_File::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ImportRequest.File.path)
}
#endif
inline void ImportRequest_File::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ImportRequest.File.path)
}
inline void ImportRequest_File::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ImportRequest.File.path)
}
inline ::std::string* ImportRequest_File::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.File.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportRequest_File::release_path() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportRequest.File.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportRequest_File::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportRequest.File.path)
}

// bytes sha512 = 4;
inline void ImportRequest_File::clear_sha512() {
  sha512_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImportRequest_File::sha512() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.File.sha512)
  return sha512_.GetNoArena();
}
inline void ImportRequest_File::set_sha512(const ::std::string& value) {
  
  sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ImportRequest.File.sha512)
}
#if LANG_CXX11
inline void ImportRequest_File::set_sha512(::std::string&& value) {
  
  sha512_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ImportRequest.File.sha512)
}
#endif
inline void ImportRequest_File::set_sha512(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ImportRequest.File.sha512)
}
inline void ImportRequest_File::set_sha512(const void* value, size_t size) {
  
  sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ImportRequest.File.sha512)
}
inline ::std::string* ImportRequest_File::mutable_sha512() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.File.sha512)
  return sha512_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportRequest_File::release_sha512() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportRequest.File.sha512)
  
  return sha512_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportRequest_File::set_allocated_sha512(::std::string* sha512) {
  if (sha512 != NULL) {
    
  } else {
    
  }
  sha512_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha512);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportRequest.File.sha512)
}

// -------------------------------------------------------------------

// ImportRequest_TableRekey

inline void ImportRequest_TableRekey::clear_old_id() {
  old_id_ = 0u;
}
inline ::google::protobuf::uint32 ImportRequest_TableRekey::old_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.TableRekey.old_id)
  return old_id_;
}
inline void ImportRequest_TableRekey::set_old_id(::google::protobuf::uint32 value) {
  
  old_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ImportRequest.TableRekey.old_id)
}

// bytes new_desc = 2;
inline void ImportRequest_TableRekey::clear_new_desc() {
  new_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImportRequest_TableRekey::new_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.TableRekey.new_desc)
  return new_desc_.GetNoArena();
}
inline void ImportRequest_TableRekey::set_new_desc(const ::std::string& value) {
  
  new_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ImportRequest.TableRekey.new_desc)
}
#if LANG_CXX11
inline void ImportRequest_TableRekey::set_new_desc(::std::string&& value) {
  
  new_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ImportRequest.TableRekey.new_desc)
}
#endif
inline void ImportRequest_TableRekey::set_new_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ImportRequest.TableRekey.new_desc)
}
inline void ImportRequest_TableRekey::set_new_desc(const void* value, size_t size) {
  
  new_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ImportRequest.TableRekey.new_desc)
}
inline ::std::string* ImportRequest_TableRekey::mutable_new_desc() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.TableRekey.new_desc)
  return new_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportRequest_TableRekey::release_new_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportRequest.TableRekey.new_desc)
  
  return new_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportRequest_TableRekey::set_allocated_new_desc(::std::string* new_desc) {
  if (new_desc != NULL) {
    
  } else {
    
  }
  new_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_desc);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportRequest.TableRekey.new_desc)
}

// -------------------------------------------------------------------

// ImportRequest

inline bool ImportRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ImportRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& ImportRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& ImportRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* ImportRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* ImportRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.header)
  return header_;
}
inline void ImportRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportRequest.header)
}

inline int ImportRequest::files_size() const {
  return files_.size();
}
inline void ImportRequest::clear_files() {
  files_.Clear();
}
inline ::cockroach::roachpb::ImportRequest_File* ImportRequest::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_File >*
ImportRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ImportRequest.files)
  return &files_;
}
inline const ::cockroach::roachpb::ImportRequest_File& ImportRequest::files(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.files)
  return files_.Get(index);
}
inline ::cockroach::roachpb::ImportRequest_File* ImportRequest::add_files() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ImportRequest.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_File >&
ImportRequest::files() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ImportRequest.files)
  return files_;
}

inline bool ImportRequest::has_data_span() const {
  return this != internal_default_instance() && data_span_ != NULL;
}
inline const ::cockroach::roachpb::Span& ImportRequest::_internal_data_span() const {
  return *data_span_;
}
inline const ::cockroach::roachpb::Span& ImportRequest::data_span() const {
  const ::cockroach::roachpb::Span* p = data_span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.data_span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
inline ::cockroach::roachpb::Span* ImportRequest::release_data_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportRequest.data_span)
  
  ::cockroach::roachpb::Span* temp = data_span_;
  data_span_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Span* ImportRequest::mutable_data_span() {
  
  if (data_span_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Span>(GetArenaNoVirtual());
    data_span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.data_span)
  return data_span_;
}
inline void ImportRequest::set_allocated_data_span(::cockroach::roachpb::Span* data_span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_span_);
  }
  if (data_span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_span, submessage_arena);
    }
    
  } else {
    
  }
  data_span_ = data_span;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportRequest.data_span)
}

inline bool ImportRequest::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& ImportRequest::_internal_end_time() const {
  return *end_time_;
}
inline const ::cockroach::util::hlc::Timestamp& ImportRequest::end_time() const {
  const ::cockroach::util::hlc::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* ImportRequest::release_end_time() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportRequest.end_time)
  
  ::cockroach::util::hlc::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* ImportRequest::mutable_end_time() {
  
  if (end_time_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.end_time)
  return end_time_;
}
inline void ImportRequest::set_allocated_end_time(::cockroach::util::hlc::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportRequest.end_time)
}

inline int ImportRequest::rekeys_size() const {
  return rekeys_.size();
}
inline void ImportRequest::clear_rekeys() {
  rekeys_.Clear();
}
inline ::cockroach::roachpb::ImportRequest_TableRekey* ImportRequest::mutable_rekeys(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportRequest.rekeys)
  return rekeys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_TableRekey >*
ImportRequest::mutable_rekeys() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ImportRequest.rekeys)
  return &rekeys_;
}
inline const ::cockroach::roachpb::ImportRequest_TableRekey& ImportRequest::rekeys(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportRequest.rekeys)
  return rekeys_.Get(index);
}
inline ::cockroach::roachpb::ImportRequest_TableRekey* ImportRequest::add_rekeys() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ImportRequest.rekeys)
  return rekeys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ImportRequest_TableRekey >&
ImportRequest::rekeys() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ImportRequest.rekeys)
  return rekeys_;
}

// -------------------------------------------------------------------

// ImportResponse

inline bool ImportResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ImportResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& ImportResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& ImportResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* ImportResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* ImportResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportResponse.header)
  return header_;
}
inline void ImportResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportResponse.header)
}

inline bool ImportResponse::has_imported() const {
  return this != internal_default_instance() && imported_ != NULL;
}
inline void ImportResponse::clear_imported() {
  if (GetArenaNoVirtual() == NULL && imported_ != NULL) {
    delete imported_;
  }
  imported_ = NULL;
}
inline const ::cockroach::roachpb::BulkOpSummary& ImportResponse::_internal_imported() const {
  return *imported_;
}
inline const ::cockroach::roachpb::BulkOpSummary& ImportResponse::imported() const {
  const ::cockroach::roachpb::BulkOpSummary* p = imported_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ImportResponse.imported)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::BulkOpSummary*>(
      &::cockroach::roachpb::_BulkOpSummary_default_instance_);
}
inline ::cockroach::roachpb::BulkOpSummary* ImportResponse::release_imported() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ImportResponse.imported)
  
  ::cockroach::roachpb::BulkOpSummary* temp = imported_;
  imported_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::BulkOpSummary* ImportResponse::mutable_imported() {
  
  if (imported_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::BulkOpSummary>(GetArenaNoVirtual());
    imported_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ImportResponse.imported)
  return imported_;
}
inline void ImportResponse::set_allocated_imported(::cockroach::roachpb::BulkOpSummary* imported) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete imported_;
  }
  if (imported) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imported = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imported, submessage_arena);
    }
    
  } else {
    
  }
  imported_ = imported;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ImportResponse.imported)
}

// -------------------------------------------------------------------

// AdminScatterRequest

inline bool AdminScatterRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminScatterRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& AdminScatterRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& AdminScatterRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminScatterRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* AdminScatterRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminScatterRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* AdminScatterRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminScatterRequest.header)
  return header_;
}
inline void AdminScatterRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminScatterRequest.header)
}

// bool randomize_leases = 2;
inline void AdminScatterRequest::clear_randomize_leases() {
  randomize_leases_ = false;
}
inline bool AdminScatterRequest::randomize_leases() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminScatterRequest.randomize_leases)
  return randomize_leases_;
}
inline void AdminScatterRequest::set_randomize_leases(bool value) {
  
  randomize_leases_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AdminScatterRequest.randomize_leases)
}

// -------------------------------------------------------------------

// AdminScatterResponse_Range

inline bool AdminScatterResponse_Range::has_span() const {
  return this != internal_default_instance() && span_ != NULL;
}
inline const ::cockroach::roachpb::Span& AdminScatterResponse_Range::_internal_span() const {
  return *span_;
}
inline const ::cockroach::roachpb::Span& AdminScatterResponse_Range::span() const {
  const ::cockroach::roachpb::Span* p = span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminScatterResponse.Range.span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
inline ::cockroach::roachpb::Span* AdminScatterResponse_Range::release_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminScatterResponse.Range.span)
  
  ::cockroach::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Span* AdminScatterResponse_Range::mutable_span() {
  
  if (span_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Span>(GetArenaNoVirtual());
    span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminScatterResponse.Range.span)
  return span_;
}
inline void AdminScatterResponse_Range::set_allocated_span(::cockroach::roachpb::Span* span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(span_);
  }
  if (span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminScatterResponse.Range.span)
}

// -------------------------------------------------------------------

// AdminScatterResponse

inline bool AdminScatterResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdminScatterResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminScatterResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& AdminScatterResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminScatterResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* AdminScatterResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AdminScatterResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* AdminScatterResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminScatterResponse.header)
  return header_;
}
inline void AdminScatterResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AdminScatterResponse.header)
}

inline int AdminScatterResponse::ranges_size() const {
  return ranges_.size();
}
inline void AdminScatterResponse::clear_ranges() {
  ranges_.Clear();
}
inline ::cockroach::roachpb::AdminScatterResponse_Range* AdminScatterResponse::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AdminScatterResponse.ranges)
  return ranges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::AdminScatterResponse_Range >*
AdminScatterResponse::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.AdminScatterResponse.ranges)
  return &ranges_;
}
inline const ::cockroach::roachpb::AdminScatterResponse_Range& AdminScatterResponse::ranges(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AdminScatterResponse.ranges)
  return ranges_.Get(index);
}
inline ::cockroach::roachpb::AdminScatterResponse_Range* AdminScatterResponse::add_ranges() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.AdminScatterResponse.ranges)
  return ranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::AdminScatterResponse_Range >&
AdminScatterResponse::ranges() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.AdminScatterResponse.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// AddSSTableRequest

inline bool AddSSTableRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AddSSTableRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& AddSSTableRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& AddSSTableRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AddSSTableRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* AddSSTableRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AddSSTableRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* AddSSTableRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AddSSTableRequest.header)
  return header_;
}
inline void AddSSTableRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AddSSTableRequest.header)
}

// bytes data = 2;
inline void AddSSTableRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddSSTableRequest::data() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AddSSTableRequest.data)
  return data_.GetNoArena();
}
inline void AddSSTableRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AddSSTableRequest.data)
}
#if LANG_CXX11
inline void AddSSTableRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.AddSSTableRequest.data)
}
#endif
inline void AddSSTableRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.AddSSTableRequest.data)
}
inline void AddSSTableRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.AddSSTableRequest.data)
}
inline ::std::string* AddSSTableRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AddSSTableRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddSSTableRequest::release_data() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AddSSTableRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddSSTableRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AddSSTableRequest.data)
}

// bool disallow_shadowing = 3;
inline void AddSSTableRequest::clear_disallow_shadowing() {
  disallow_shadowing_ = false;
}
inline bool AddSSTableRequest::disallow_shadowing() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AddSSTableRequest.disallow_shadowing)
  return disallow_shadowing_;
}
inline void AddSSTableRequest::set_disallow_shadowing(bool value) {
  
  disallow_shadowing_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AddSSTableRequest.disallow_shadowing)
}

inline bool AddSSTableRequest::has_mvcc_stats() const {
  return this != internal_default_instance() && mvcc_stats_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::MVCCStats& AddSSTableRequest::_internal_mvcc_stats() const {
  return *mvcc_stats_;
}
inline const ::cockroach::storage::engine::enginepb::MVCCStats& AddSSTableRequest::mvcc_stats() const {
  const ::cockroach::storage::engine::enginepb::MVCCStats* p = mvcc_stats_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AddSSTableRequest.mvcc_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::MVCCStats*>(
      &::cockroach::storage::engine::enginepb::_MVCCStats_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::MVCCStats* AddSSTableRequest::release_mvcc_stats() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AddSSTableRequest.mvcc_stats)
  
  ::cockroach::storage::engine::enginepb::MVCCStats* temp = mvcc_stats_;
  mvcc_stats_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::MVCCStats* AddSSTableRequest::mutable_mvcc_stats() {
  
  if (mvcc_stats_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::MVCCStats>(GetArenaNoVirtual());
    mvcc_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AddSSTableRequest.mvcc_stats)
  return mvcc_stats_;
}
inline void AddSSTableRequest::set_allocated_mvcc_stats(::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mvcc_stats_);
  }
  if (mvcc_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mvcc_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mvcc_stats, submessage_arena);
    }
    
  } else {
    
  }
  mvcc_stats_ = mvcc_stats;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AddSSTableRequest.mvcc_stats)
}

// -------------------------------------------------------------------

// AddSSTableResponse

inline bool AddSSTableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AddSSTableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& AddSSTableResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& AddSSTableResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AddSSTableResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* AddSSTableResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AddSSTableResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* AddSSTableResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AddSSTableResponse.header)
  return header_;
}
inline void AddSSTableResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AddSSTableResponse.header)
}

// -------------------------------------------------------------------

// RefreshRequest

inline bool RefreshRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RefreshRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& RefreshRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& RefreshRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RefreshRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* RefreshRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RefreshRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* RefreshRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RefreshRequest.header)
  return header_;
}
inline void RefreshRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RefreshRequest.header)
}

// bool write = 2;
inline void RefreshRequest::clear_write() {
  write_ = false;
}
inline bool RefreshRequest::write() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RefreshRequest.write)
  return write_;
}
inline void RefreshRequest::set_write(bool value) {
  
  write_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RefreshRequest.write)
}

// -------------------------------------------------------------------

// RefreshResponse

inline bool RefreshResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RefreshResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& RefreshResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& RefreshResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RefreshResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* RefreshResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RefreshResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* RefreshResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RefreshResponse.header)
  return header_;
}
inline void RefreshResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RefreshResponse.header)
}

// -------------------------------------------------------------------

// RefreshRangeRequest

inline bool RefreshRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RefreshRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& RefreshRangeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& RefreshRangeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RefreshRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* RefreshRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RefreshRangeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* RefreshRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RefreshRangeRequest.header)
  return header_;
}
inline void RefreshRangeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RefreshRangeRequest.header)
}

// bool write = 2;
inline void RefreshRangeRequest::clear_write() {
  write_ = false;
}
inline bool RefreshRangeRequest::write() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RefreshRangeRequest.write)
  return write_;
}
inline void RefreshRangeRequest::set_write(bool value) {
  
  write_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RefreshRangeRequest.write)
}

// -------------------------------------------------------------------

// RefreshRangeResponse

inline bool RefreshRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RefreshRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& RefreshRangeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& RefreshRangeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RefreshRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* RefreshRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RefreshRangeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* RefreshRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RefreshRangeResponse.header)
  return header_;
}
inline void RefreshRangeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RefreshRangeResponse.header)
}

// -------------------------------------------------------------------

// SubsumeRequest

inline bool SubsumeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void SubsumeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& SubsumeRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& SubsumeRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SubsumeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* SubsumeRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SubsumeRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* SubsumeRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SubsumeRequest.header)
  return header_;
}
inline void SubsumeRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SubsumeRequest.header)
}

inline bool SubsumeRequest::has_left_desc() const {
  return this != internal_default_instance() && left_desc_ != NULL;
}
inline const ::cockroach::roachpb::RangeDescriptor& SubsumeRequest::_internal_left_desc() const {
  return *left_desc_;
}
inline const ::cockroach::roachpb::RangeDescriptor& SubsumeRequest::left_desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = left_desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SubsumeRequest.left_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
inline ::cockroach::roachpb::RangeDescriptor* SubsumeRequest::release_left_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SubsumeRequest.left_desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = left_desc_;
  left_desc_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RangeDescriptor* SubsumeRequest::mutable_left_desc() {
  
  if (left_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    left_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SubsumeRequest.left_desc)
  return left_desc_;
}
inline void SubsumeRequest::set_allocated_left_desc(::cockroach::roachpb::RangeDescriptor* left_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_desc_);
  }
  if (left_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_desc, submessage_arena);
    }
    
  } else {
    
  }
  left_desc_ = left_desc;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SubsumeRequest.left_desc)
}

// .cockroach.roachpb.RangeDescriptor right_desc = 3;
inline bool SubsumeRequest::has_right_desc() const {
  return this != internal_default_instance() && right_desc_ != NULL;
}
inline const ::cockroach::roachpb::RangeDescriptor& SubsumeRequest::_internal_right_desc() const {
  return *right_desc_;
}
inline const ::cockroach::roachpb::RangeDescriptor& SubsumeRequest::right_desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = right_desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SubsumeRequest.right_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
inline ::cockroach::roachpb::RangeDescriptor* SubsumeRequest::release_right_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SubsumeRequest.right_desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = right_desc_;
  right_desc_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RangeDescriptor* SubsumeRequest::mutable_right_desc() {
  
  if (right_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    right_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SubsumeRequest.right_desc)
  return right_desc_;
}
inline void SubsumeRequest::set_allocated_right_desc(::cockroach::roachpb::RangeDescriptor* right_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_desc_);
  }
  if (right_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_desc, submessage_arena);
    }
    
  } else {
    
  }
  right_desc_ = right_desc;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SubsumeRequest.right_desc)
}

// -------------------------------------------------------------------

// SubsumeResponse

inline bool SubsumeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void SubsumeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& SubsumeResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& SubsumeResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SubsumeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* SubsumeResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SubsumeResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* SubsumeResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SubsumeResponse.header)
  return header_;
}
inline void SubsumeResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SubsumeResponse.header)
}

inline bool SubsumeResponse::has_mvcc_stats() const {
  return this != internal_default_instance() && mvcc_stats_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::MVCCStats& SubsumeResponse::_internal_mvcc_stats() const {
  return *mvcc_stats_;
}
inline const ::cockroach::storage::engine::enginepb::MVCCStats& SubsumeResponse::mvcc_stats() const {
  const ::cockroach::storage::engine::enginepb::MVCCStats* p = mvcc_stats_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SubsumeResponse.mvcc_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::MVCCStats*>(
      &::cockroach::storage::engine::enginepb::_MVCCStats_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::MVCCStats* SubsumeResponse::release_mvcc_stats() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SubsumeResponse.mvcc_stats)
  
  ::cockroach::storage::engine::enginepb::MVCCStats* temp = mvcc_stats_;
  mvcc_stats_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::MVCCStats* SubsumeResponse::mutable_mvcc_stats() {
  
  if (mvcc_stats_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::MVCCStats>(GetArenaNoVirtual());
    mvcc_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SubsumeResponse.mvcc_stats)
  return mvcc_stats_;
}
inline void SubsumeResponse::set_allocated_mvcc_stats(::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mvcc_stats_);
  }
  if (mvcc_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mvcc_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mvcc_stats, submessage_arena);
    }
    
  } else {
    
  }
  mvcc_stats_ = mvcc_stats;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SubsumeResponse.mvcc_stats)
}

// uint64 lease_applied_index = 4;
inline void SubsumeResponse::clear_lease_applied_index() {
  lease_applied_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SubsumeResponse::lease_applied_index() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SubsumeResponse.lease_applied_index)
  return lease_applied_index_;
}
inline void SubsumeResponse::set_lease_applied_index(::google::protobuf::uint64 value) {
  
  lease_applied_index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SubsumeResponse.lease_applied_index)
}

inline bool SubsumeResponse::has_freeze_start() const {
  return this != internal_default_instance() && freeze_start_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& SubsumeResponse::_internal_freeze_start() const {
  return *freeze_start_;
}
inline const ::cockroach::util::hlc::Timestamp& SubsumeResponse::freeze_start() const {
  const ::cockroach::util::hlc::Timestamp* p = freeze_start_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SubsumeResponse.freeze_start)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* SubsumeResponse::release_freeze_start() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SubsumeResponse.freeze_start)
  
  ::cockroach::util::hlc::Timestamp* temp = freeze_start_;
  freeze_start_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* SubsumeResponse::mutable_freeze_start() {
  
  if (freeze_start_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    freeze_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SubsumeResponse.freeze_start)
  return freeze_start_;
}
inline void SubsumeResponse::set_allocated_freeze_start(::cockroach::util::hlc::Timestamp* freeze_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(freeze_start_);
  }
  if (freeze_start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      freeze_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freeze_start, submessage_arena);
    }
    
  } else {
    
  }
  freeze_start_ = freeze_start;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SubsumeResponse.freeze_start)
}

// -------------------------------------------------------------------

// RangeStatsRequest

inline bool RangeStatsRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RangeStatsRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::RequestHeader& RangeStatsRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::RequestHeader& RangeStatsRequest::header() const {
  const ::cockroach::roachpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeStatsRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RequestHeader*>(
      &::cockroach::roachpb::_RequestHeader_default_instance_);
}
inline ::cockroach::roachpb::RequestHeader* RangeStatsRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeStatsRequest.header)
  
  ::cockroach::roachpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RequestHeader* RangeStatsRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeStatsRequest.header)
  return header_;
}
inline void RangeStatsRequest::set_allocated_header(::cockroach::roachpb::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeStatsRequest.header)
}

// -------------------------------------------------------------------

// RangeStatsResponse

inline bool RangeStatsResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RangeStatsResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::ResponseHeader& RangeStatsResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::ResponseHeader& RangeStatsResponse::header() const {
  const ::cockroach::roachpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeStatsResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ResponseHeader*>(
      &::cockroach::roachpb::_ResponseHeader_default_instance_);
}
inline ::cockroach::roachpb::ResponseHeader* RangeStatsResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeStatsResponse.header)
  
  ::cockroach::roachpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ResponseHeader* RangeStatsResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeStatsResponse.header)
  return header_;
}
inline void RangeStatsResponse::set_allocated_header(::cockroach::roachpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeStatsResponse.header)
}

inline bool RangeStatsResponse::has_mvcc_stats() const {
  return this != internal_default_instance() && mvcc_stats_ != NULL;
}
inline const ::cockroach::storage::engine::enginepb::MVCCStats& RangeStatsResponse::_internal_mvcc_stats() const {
  return *mvcc_stats_;
}
inline const ::cockroach::storage::engine::enginepb::MVCCStats& RangeStatsResponse::mvcc_stats() const {
  const ::cockroach::storage::engine::enginepb::MVCCStats* p = mvcc_stats_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeStatsResponse.mvcc_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::MVCCStats*>(
      &::cockroach::storage::engine::enginepb::_MVCCStats_default_instance_);
}
inline ::cockroach::storage::engine::enginepb::MVCCStats* RangeStatsResponse::release_mvcc_stats() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeStatsResponse.mvcc_stats)
  
  ::cockroach::storage::engine::enginepb::MVCCStats* temp = mvcc_stats_;
  mvcc_stats_ = NULL;
  return temp;
}
inline ::cockroach::storage::engine::enginepb::MVCCStats* RangeStatsResponse::mutable_mvcc_stats() {
  
  if (mvcc_stats_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::storage::engine::enginepb::MVCCStats>(GetArenaNoVirtual());
    mvcc_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeStatsResponse.mvcc_stats)
  return mvcc_stats_;
}
inline void RangeStatsResponse::set_allocated_mvcc_stats(::cockroach::storage::engine::enginepb::MVCCStats* mvcc_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mvcc_stats_);
  }
  if (mvcc_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mvcc_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mvcc_stats, submessage_arena);
    }
    
  } else {
    
  }
  mvcc_stats_ = mvcc_stats;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeStatsResponse.mvcc_stats)
}

// double queries_per_second = 3;
inline void RangeStatsResponse::clear_queries_per_second() {
  queries_per_second_ = 0;
}
inline double RangeStatsResponse::queries_per_second() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeStatsResponse.queries_per_second)
  return queries_per_second_;
}
inline void RangeStatsResponse::set_queries_per_second(double value) {
  
  queries_per_second_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeStatsResponse.queries_per_second)
}

// -------------------------------------------------------------------

// RequestUnion

// .cockroach.roachpb.GetRequest get = 1;
inline bool RequestUnion::has_get() const {
  return value_case() == kGet;
}
inline void RequestUnion::set_has_get() {
  _oneof_case_[0] = kGet;
}
inline void RequestUnion::clear_get() {
  if (has_get()) {
    delete value_.get_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::GetRequest& RequestUnion::_internal_get() const {
  return *value_.get_;
}
inline ::cockroach::roachpb::GetRequest* RequestUnion::release_get() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.get)
  if (has_get()) {
    clear_has_value();
      ::cockroach::roachpb::GetRequest* temp = value_.get_;
    value_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::GetRequest& RequestUnion::get() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.get)
  return has_get()
      ? *value_.get_
      : *reinterpret_cast< ::cockroach::roachpb::GetRequest*>(&::cockroach::roachpb::_GetRequest_default_instance_);
}
inline ::cockroach::roachpb::GetRequest* RequestUnion::mutable_get() {
  if (!has_get()) {
    clear_value();
    set_has_get();
    value_.get_ = CreateMaybeMessage< ::cockroach::roachpb::GetRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.get)
  return value_.get_;
}

// .cockroach.roachpb.PutRequest put = 2;
inline bool RequestUnion::has_put() const {
  return value_case() == kPut;
}
inline void RequestUnion::set_has_put() {
  _oneof_case_[0] = kPut;
}
inline void RequestUnion::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::PutRequest& RequestUnion::_internal_put() const {
  return *value_.put_;
}
inline ::cockroach::roachpb::PutRequest* RequestUnion::release_put() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.put)
  if (has_put()) {
    clear_has_value();
      ::cockroach::roachpb::PutRequest* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::PutRequest& RequestUnion::put() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.put)
  return has_put()
      ? *value_.put_
      : *reinterpret_cast< ::cockroach::roachpb::PutRequest*>(&::cockroach::roachpb::_PutRequest_default_instance_);
}
inline ::cockroach::roachpb::PutRequest* RequestUnion::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = CreateMaybeMessage< ::cockroach::roachpb::PutRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.put)
  return value_.put_;
}

// .cockroach.roachpb.ConditionalPutRequest conditional_put = 3;
inline bool RequestUnion::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
inline void RequestUnion::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
inline void RequestUnion::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ConditionalPutRequest& RequestUnion::_internal_conditional_put() const {
  return *value_.conditional_put_;
}
inline ::cockroach::roachpb::ConditionalPutRequest* RequestUnion::release_conditional_put() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.conditional_put)
  if (has_conditional_put()) {
    clear_has_value();
      ::cockroach::roachpb::ConditionalPutRequest* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ConditionalPutRequest& RequestUnion::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.conditional_put)
  return has_conditional_put()
      ? *value_.conditional_put_
      : *reinterpret_cast< ::cockroach::roachpb::ConditionalPutRequest*>(&::cockroach::roachpb::_ConditionalPutRequest_default_instance_);
}
inline ::cockroach::roachpb::ConditionalPutRequest* RequestUnion::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = CreateMaybeMessage< ::cockroach::roachpb::ConditionalPutRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.conditional_put)
  return value_.conditional_put_;
}

// .cockroach.roachpb.IncrementRequest increment = 4;
inline bool RequestUnion::has_increment() const {
  return value_case() == kIncrement;
}
inline void RequestUnion::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
inline void RequestUnion::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::IncrementRequest& RequestUnion::_internal_increment() const {
  return *value_.increment_;
}
inline ::cockroach::roachpb::IncrementRequest* RequestUnion::release_increment() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.increment)
  if (has_increment()) {
    clear_has_value();
      ::cockroach::roachpb::IncrementRequest* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::IncrementRequest& RequestUnion::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.increment)
  return has_increment()
      ? *value_.increment_
      : *reinterpret_cast< ::cockroach::roachpb::IncrementRequest*>(&::cockroach::roachpb::_IncrementRequest_default_instance_);
}
inline ::cockroach::roachpb::IncrementRequest* RequestUnion::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = CreateMaybeMessage< ::cockroach::roachpb::IncrementRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.increment)
  return value_.increment_;
}

// .cockroach.roachpb.DeleteRequest delete = 5;
inline bool RequestUnion::has_delete_() const {
  return value_case() == kDelete;
}
inline void RequestUnion::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void RequestUnion::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::DeleteRequest& RequestUnion::_internal_delete_() const {
  return *value_.delete__;
}
inline ::cockroach::roachpb::DeleteRequest* RequestUnion::release_delete_() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.delete)
  if (has_delete_()) {
    clear_has_value();
      ::cockroach::roachpb::DeleteRequest* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::DeleteRequest& RequestUnion::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.delete)
  return has_delete_()
      ? *value_.delete__
      : *reinterpret_cast< ::cockroach::roachpb::DeleteRequest*>(&::cockroach::roachpb::_DeleteRequest_default_instance_);
}
inline ::cockroach::roachpb::DeleteRequest* RequestUnion::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = CreateMaybeMessage< ::cockroach::roachpb::DeleteRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.delete)
  return value_.delete__;
}

// .cockroach.roachpb.DeleteRangeRequest delete_range = 6;
inline bool RequestUnion::has_delete_range() const {
  return value_case() == kDeleteRange;
}
inline void RequestUnion::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
inline void RequestUnion::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::DeleteRangeRequest& RequestUnion::_internal_delete_range() const {
  return *value_.delete_range_;
}
inline ::cockroach::roachpb::DeleteRangeRequest* RequestUnion::release_delete_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.delete_range)
  if (has_delete_range()) {
    clear_has_value();
      ::cockroach::roachpb::DeleteRangeRequest* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::DeleteRangeRequest& RequestUnion::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.delete_range)
  return has_delete_range()
      ? *value_.delete_range_
      : *reinterpret_cast< ::cockroach::roachpb::DeleteRangeRequest*>(&::cockroach::roachpb::_DeleteRangeRequest_default_instance_);
}
inline ::cockroach::roachpb::DeleteRangeRequest* RequestUnion::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = CreateMaybeMessage< ::cockroach::roachpb::DeleteRangeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.delete_range)
  return value_.delete_range_;
}

// .cockroach.roachpb.ClearRangeRequest clear_range = 38;
inline bool RequestUnion::has_clear_range() const {
  return value_case() == kClearRange;
}
inline void RequestUnion::set_has_clear_range() {
  _oneof_case_[0] = kClearRange;
}
inline void RequestUnion::clear_clear_range() {
  if (has_clear_range()) {
    delete value_.clear_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ClearRangeRequest& RequestUnion::_internal_clear_range() const {
  return *value_.clear_range_;
}
inline ::cockroach::roachpb::ClearRangeRequest* RequestUnion::release_clear_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.clear_range)
  if (has_clear_range()) {
    clear_has_value();
      ::cockroach::roachpb::ClearRangeRequest* temp = value_.clear_range_;
    value_.clear_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ClearRangeRequest& RequestUnion::clear_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.clear_range)
  return has_clear_range()
      ? *value_.clear_range_
      : *reinterpret_cast< ::cockroach::roachpb::ClearRangeRequest*>(&::cockroach::roachpb::_ClearRangeRequest_default_instance_);
}
inline ::cockroach::roachpb::ClearRangeRequest* RequestUnion::mutable_clear_range() {
  if (!has_clear_range()) {
    clear_value();
    set_has_clear_range();
    value_.clear_range_ = CreateMaybeMessage< ::cockroach::roachpb::ClearRangeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.clear_range)
  return value_.clear_range_;
}

// .cockroach.roachpb.RevertRangeRequest revert_range = 48;
inline bool RequestUnion::has_revert_range() const {
  return value_case() == kRevertRange;
}
inline void RequestUnion::set_has_revert_range() {
  _oneof_case_[0] = kRevertRange;
}
inline void RequestUnion::clear_revert_range() {
  if (has_revert_range()) {
    delete value_.revert_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RevertRangeRequest& RequestUnion::_internal_revert_range() const {
  return *value_.revert_range_;
}
inline ::cockroach::roachpb::RevertRangeRequest* RequestUnion::release_revert_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.revert_range)
  if (has_revert_range()) {
    clear_has_value();
      ::cockroach::roachpb::RevertRangeRequest* temp = value_.revert_range_;
    value_.revert_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RevertRangeRequest& RequestUnion::revert_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.revert_range)
  return has_revert_range()
      ? *value_.revert_range_
      : *reinterpret_cast< ::cockroach::roachpb::RevertRangeRequest*>(&::cockroach::roachpb::_RevertRangeRequest_default_instance_);
}
inline ::cockroach::roachpb::RevertRangeRequest* RequestUnion::mutable_revert_range() {
  if (!has_revert_range()) {
    clear_value();
    set_has_revert_range();
    value_.revert_range_ = CreateMaybeMessage< ::cockroach::roachpb::RevertRangeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.revert_range)
  return value_.revert_range_;
}

// .cockroach.roachpb.ScanRequest scan = 7;
inline bool RequestUnion::has_scan() const {
  return value_case() == kScan;
}
inline void RequestUnion::set_has_scan() {
  _oneof_case_[0] = kScan;
}
inline void RequestUnion::clear_scan() {
  if (has_scan()) {
    delete value_.scan_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ScanRequest& RequestUnion::_internal_scan() const {
  return *value_.scan_;
}
inline ::cockroach::roachpb::ScanRequest* RequestUnion::release_scan() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.scan)
  if (has_scan()) {
    clear_has_value();
      ::cockroach::roachpb::ScanRequest* temp = value_.scan_;
    value_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ScanRequest& RequestUnion::scan() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.scan)
  return has_scan()
      ? *value_.scan_
      : *reinterpret_cast< ::cockroach::roachpb::ScanRequest*>(&::cockroach::roachpb::_ScanRequest_default_instance_);
}
inline ::cockroach::roachpb::ScanRequest* RequestUnion::mutable_scan() {
  if (!has_scan()) {
    clear_value();
    set_has_scan();
    value_.scan_ = CreateMaybeMessage< ::cockroach::roachpb::ScanRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.scan)
  return value_.scan_;
}

// .cockroach.roachpb.BeginTransactionRequest begin_transaction = 8;
inline bool RequestUnion::has_begin_transaction() const {
  return value_case() == kBeginTransaction;
}
inline void RequestUnion::set_has_begin_transaction() {
  _oneof_case_[0] = kBeginTransaction;
}
inline void RequestUnion::clear_begin_transaction() {
  if (has_begin_transaction()) {
    delete value_.begin_transaction_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::BeginTransactionRequest& RequestUnion::_internal_begin_transaction() const {
  return *value_.begin_transaction_;
}
inline ::cockroach::roachpb::BeginTransactionRequest* RequestUnion::release_begin_transaction() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.begin_transaction)
  if (has_begin_transaction()) {
    clear_has_value();
      ::cockroach::roachpb::BeginTransactionRequest* temp = value_.begin_transaction_;
    value_.begin_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::BeginTransactionRequest& RequestUnion::begin_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.begin_transaction)
  return has_begin_transaction()
      ? *value_.begin_transaction_
      : *reinterpret_cast< ::cockroach::roachpb::BeginTransactionRequest*>(&::cockroach::roachpb::_BeginTransactionRequest_default_instance_);
}
inline ::cockroach::roachpb::BeginTransactionRequest* RequestUnion::mutable_begin_transaction() {
  if (!has_begin_transaction()) {
    clear_value();
    set_has_begin_transaction();
    value_.begin_transaction_ = CreateMaybeMessage< ::cockroach::roachpb::BeginTransactionRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.begin_transaction)
  return value_.begin_transaction_;
}

// .cockroach.roachpb.EndTransactionRequest end_transaction = 9;
inline bool RequestUnion::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
inline void RequestUnion::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
inline void RequestUnion::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::EndTransactionRequest& RequestUnion::_internal_end_transaction() const {
  return *value_.end_transaction_;
}
inline ::cockroach::roachpb::EndTransactionRequest* RequestUnion::release_end_transaction() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.end_transaction)
  if (has_end_transaction()) {
    clear_has_value();
      ::cockroach::roachpb::EndTransactionRequest* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::EndTransactionRequest& RequestUnion::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.end_transaction)
  return has_end_transaction()
      ? *value_.end_transaction_
      : *reinterpret_cast< ::cockroach::roachpb::EndTransactionRequest*>(&::cockroach::roachpb::_EndTransactionRequest_default_instance_);
}
inline ::cockroach::roachpb::EndTransactionRequest* RequestUnion::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = CreateMaybeMessage< ::cockroach::roachpb::EndTransactionRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.end_transaction)
  return value_.end_transaction_;
}

// .cockroach.roachpb.AdminSplitRequest admin_split = 10;
inline bool RequestUnion::has_admin_split() const {
  return value_case() == kAdminSplit;
}
inline void RequestUnion::set_has_admin_split() {
  _oneof_case_[0] = kAdminSplit;
}
inline void RequestUnion::clear_admin_split() {
  if (has_admin_split()) {
    delete value_.admin_split_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminSplitRequest& RequestUnion::_internal_admin_split() const {
  return *value_.admin_split_;
}
inline ::cockroach::roachpb::AdminSplitRequest* RequestUnion::release_admin_split() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.admin_split)
  if (has_admin_split()) {
    clear_has_value();
      ::cockroach::roachpb::AdminSplitRequest* temp = value_.admin_split_;
    value_.admin_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminSplitRequest& RequestUnion::admin_split() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.admin_split)
  return has_admin_split()
      ? *value_.admin_split_
      : *reinterpret_cast< ::cockroach::roachpb::AdminSplitRequest*>(&::cockroach::roachpb::_AdminSplitRequest_default_instance_);
}
inline ::cockroach::roachpb::AdminSplitRequest* RequestUnion::mutable_admin_split() {
  if (!has_admin_split()) {
    clear_value();
    set_has_admin_split();
    value_.admin_split_ = CreateMaybeMessage< ::cockroach::roachpb::AdminSplitRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.admin_split)
  return value_.admin_split_;
}

// .cockroach.roachpb.AdminUnsplitRequest admin_unsplit = 47;
inline bool RequestUnion::has_admin_unsplit() const {
  return value_case() == kAdminUnsplit;
}
inline void RequestUnion::set_has_admin_unsplit() {
  _oneof_case_[0] = kAdminUnsplit;
}
inline void RequestUnion::clear_admin_unsplit() {
  if (has_admin_unsplit()) {
    delete value_.admin_unsplit_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminUnsplitRequest& RequestUnion::_internal_admin_unsplit() const {
  return *value_.admin_unsplit_;
}
inline ::cockroach::roachpb::AdminUnsplitRequest* RequestUnion::release_admin_unsplit() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.admin_unsplit)
  if (has_admin_unsplit()) {
    clear_has_value();
      ::cockroach::roachpb::AdminUnsplitRequest* temp = value_.admin_unsplit_;
    value_.admin_unsplit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminUnsplitRequest& RequestUnion::admin_unsplit() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.admin_unsplit)
  return has_admin_unsplit()
      ? *value_.admin_unsplit_
      : *reinterpret_cast< ::cockroach::roachpb::AdminUnsplitRequest*>(&::cockroach::roachpb::_AdminUnsplitRequest_default_instance_);
}
inline ::cockroach::roachpb::AdminUnsplitRequest* RequestUnion::mutable_admin_unsplit() {
  if (!has_admin_unsplit()) {
    clear_value();
    set_has_admin_unsplit();
    value_.admin_unsplit_ = CreateMaybeMessage< ::cockroach::roachpb::AdminUnsplitRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.admin_unsplit)
  return value_.admin_unsplit_;
}

// .cockroach.roachpb.AdminMergeRequest admin_merge = 11;
inline bool RequestUnion::has_admin_merge() const {
  return value_case() == kAdminMerge;
}
inline void RequestUnion::set_has_admin_merge() {
  _oneof_case_[0] = kAdminMerge;
}
inline void RequestUnion::clear_admin_merge() {
  if (has_admin_merge()) {
    delete value_.admin_merge_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminMergeRequest& RequestUnion::_internal_admin_merge() const {
  return *value_.admin_merge_;
}
inline ::cockroach::roachpb::AdminMergeRequest* RequestUnion::release_admin_merge() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.admin_merge)
  if (has_admin_merge()) {
    clear_has_value();
      ::cockroach::roachpb::AdminMergeRequest* temp = value_.admin_merge_;
    value_.admin_merge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminMergeRequest& RequestUnion::admin_merge() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.admin_merge)
  return has_admin_merge()
      ? *value_.admin_merge_
      : *reinterpret_cast< ::cockroach::roachpb::AdminMergeRequest*>(&::cockroach::roachpb::_AdminMergeRequest_default_instance_);
}
inline ::cockroach::roachpb::AdminMergeRequest* RequestUnion::mutable_admin_merge() {
  if (!has_admin_merge()) {
    clear_value();
    set_has_admin_merge();
    value_.admin_merge_ = CreateMaybeMessage< ::cockroach::roachpb::AdminMergeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.admin_merge)
  return value_.admin_merge_;
}

// .cockroach.roachpb.AdminTransferLeaseRequest admin_transfer_lease = 29;
inline bool RequestUnion::has_admin_transfer_lease() const {
  return value_case() == kAdminTransferLease;
}
inline void RequestUnion::set_has_admin_transfer_lease() {
  _oneof_case_[0] = kAdminTransferLease;
}
inline void RequestUnion::clear_admin_transfer_lease() {
  if (has_admin_transfer_lease()) {
    delete value_.admin_transfer_lease_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminTransferLeaseRequest& RequestUnion::_internal_admin_transfer_lease() const {
  return *value_.admin_transfer_lease_;
}
inline ::cockroach::roachpb::AdminTransferLeaseRequest* RequestUnion::release_admin_transfer_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.admin_transfer_lease)
  if (has_admin_transfer_lease()) {
    clear_has_value();
      ::cockroach::roachpb::AdminTransferLeaseRequest* temp = value_.admin_transfer_lease_;
    value_.admin_transfer_lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminTransferLeaseRequest& RequestUnion::admin_transfer_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.admin_transfer_lease)
  return has_admin_transfer_lease()
      ? *value_.admin_transfer_lease_
      : *reinterpret_cast< ::cockroach::roachpb::AdminTransferLeaseRequest*>(&::cockroach::roachpb::_AdminTransferLeaseRequest_default_instance_);
}
inline ::cockroach::roachpb::AdminTransferLeaseRequest* RequestUnion::mutable_admin_transfer_lease() {
  if (!has_admin_transfer_lease()) {
    clear_value();
    set_has_admin_transfer_lease();
    value_.admin_transfer_lease_ = CreateMaybeMessage< ::cockroach::roachpb::AdminTransferLeaseRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.admin_transfer_lease)
  return value_.admin_transfer_lease_;
}

// .cockroach.roachpb.AdminChangeReplicasRequest admin_change_replicas = 35;
inline bool RequestUnion::has_admin_change_replicas() const {
  return value_case() == kAdminChangeReplicas;
}
inline void RequestUnion::set_has_admin_change_replicas() {
  _oneof_case_[0] = kAdminChangeReplicas;
}
inline void RequestUnion::clear_admin_change_replicas() {
  if (has_admin_change_replicas()) {
    delete value_.admin_change_replicas_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminChangeReplicasRequest& RequestUnion::_internal_admin_change_replicas() const {
  return *value_.admin_change_replicas_;
}
inline ::cockroach::roachpb::AdminChangeReplicasRequest* RequestUnion::release_admin_change_replicas() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.admin_change_replicas)
  if (has_admin_change_replicas()) {
    clear_has_value();
      ::cockroach::roachpb::AdminChangeReplicasRequest* temp = value_.admin_change_replicas_;
    value_.admin_change_replicas_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminChangeReplicasRequest& RequestUnion::admin_change_replicas() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.admin_change_replicas)
  return has_admin_change_replicas()
      ? *value_.admin_change_replicas_
      : *reinterpret_cast< ::cockroach::roachpb::AdminChangeReplicasRequest*>(&::cockroach::roachpb::_AdminChangeReplicasRequest_default_instance_);
}
inline ::cockroach::roachpb::AdminChangeReplicasRequest* RequestUnion::mutable_admin_change_replicas() {
  if (!has_admin_change_replicas()) {
    clear_value();
    set_has_admin_change_replicas();
    value_.admin_change_replicas_ = CreateMaybeMessage< ::cockroach::roachpb::AdminChangeReplicasRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.admin_change_replicas)
  return value_.admin_change_replicas_;
}

// .cockroach.roachpb.AdminRelocateRangeRequest admin_relocate_range = 45;
inline bool RequestUnion::has_admin_relocate_range() const {
  return value_case() == kAdminRelocateRange;
}
inline void RequestUnion::set_has_admin_relocate_range() {
  _oneof_case_[0] = kAdminRelocateRange;
}
inline void RequestUnion::clear_admin_relocate_range() {
  if (has_admin_relocate_range()) {
    delete value_.admin_relocate_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminRelocateRangeRequest& RequestUnion::_internal_admin_relocate_range() const {
  return *value_.admin_relocate_range_;
}
inline ::cockroach::roachpb::AdminRelocateRangeRequest* RequestUnion::release_admin_relocate_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.admin_relocate_range)
  if (has_admin_relocate_range()) {
    clear_has_value();
      ::cockroach::roachpb::AdminRelocateRangeRequest* temp = value_.admin_relocate_range_;
    value_.admin_relocate_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminRelocateRangeRequest& RequestUnion::admin_relocate_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.admin_relocate_range)
  return has_admin_relocate_range()
      ? *value_.admin_relocate_range_
      : *reinterpret_cast< ::cockroach::roachpb::AdminRelocateRangeRequest*>(&::cockroach::roachpb::_AdminRelocateRangeRequest_default_instance_);
}
inline ::cockroach::roachpb::AdminRelocateRangeRequest* RequestUnion::mutable_admin_relocate_range() {
  if (!has_admin_relocate_range()) {
    clear_value();
    set_has_admin_relocate_range();
    value_.admin_relocate_range_ = CreateMaybeMessage< ::cockroach::roachpb::AdminRelocateRangeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.admin_relocate_range)
  return value_.admin_relocate_range_;
}

// .cockroach.roachpb.HeartbeatTxnRequest heartbeat_txn = 12;
inline bool RequestUnion::has_heartbeat_txn() const {
  return value_case() == kHeartbeatTxn;
}
inline void RequestUnion::set_has_heartbeat_txn() {
  _oneof_case_[0] = kHeartbeatTxn;
}
inline void RequestUnion::clear_heartbeat_txn() {
  if (has_heartbeat_txn()) {
    delete value_.heartbeat_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::HeartbeatTxnRequest& RequestUnion::_internal_heartbeat_txn() const {
  return *value_.heartbeat_txn_;
}
inline ::cockroach::roachpb::HeartbeatTxnRequest* RequestUnion::release_heartbeat_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.heartbeat_txn)
  if (has_heartbeat_txn()) {
    clear_has_value();
      ::cockroach::roachpb::HeartbeatTxnRequest* temp = value_.heartbeat_txn_;
    value_.heartbeat_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::HeartbeatTxnRequest& RequestUnion::heartbeat_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.heartbeat_txn)
  return has_heartbeat_txn()
      ? *value_.heartbeat_txn_
      : *reinterpret_cast< ::cockroach::roachpb::HeartbeatTxnRequest*>(&::cockroach::roachpb::_HeartbeatTxnRequest_default_instance_);
}
inline ::cockroach::roachpb::HeartbeatTxnRequest* RequestUnion::mutable_heartbeat_txn() {
  if (!has_heartbeat_txn()) {
    clear_value();
    set_has_heartbeat_txn();
    value_.heartbeat_txn_ = CreateMaybeMessage< ::cockroach::roachpb::HeartbeatTxnRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.heartbeat_txn)
  return value_.heartbeat_txn_;
}

// .cockroach.roachpb.GCRequest gc = 13;
inline bool RequestUnion::has_gc() const {
  return value_case() == kGc;
}
inline void RequestUnion::set_has_gc() {
  _oneof_case_[0] = kGc;
}
inline void RequestUnion::clear_gc() {
  if (has_gc()) {
    delete value_.gc_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::GCRequest& RequestUnion::_internal_gc() const {
  return *value_.gc_;
}
inline ::cockroach::roachpb::GCRequest* RequestUnion::release_gc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.gc)
  if (has_gc()) {
    clear_has_value();
      ::cockroach::roachpb::GCRequest* temp = value_.gc_;
    value_.gc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::GCRequest& RequestUnion::gc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.gc)
  return has_gc()
      ? *value_.gc_
      : *reinterpret_cast< ::cockroach::roachpb::GCRequest*>(&::cockroach::roachpb::_GCRequest_default_instance_);
}
inline ::cockroach::roachpb::GCRequest* RequestUnion::mutable_gc() {
  if (!has_gc()) {
    clear_value();
    set_has_gc();
    value_.gc_ = CreateMaybeMessage< ::cockroach::roachpb::GCRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.gc)
  return value_.gc_;
}

// .cockroach.roachpb.PushTxnRequest push_txn = 14;
inline bool RequestUnion::has_push_txn() const {
  return value_case() == kPushTxn;
}
inline void RequestUnion::set_has_push_txn() {
  _oneof_case_[0] = kPushTxn;
}
inline void RequestUnion::clear_push_txn() {
  if (has_push_txn()) {
    delete value_.push_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::PushTxnRequest& RequestUnion::_internal_push_txn() const {
  return *value_.push_txn_;
}
inline ::cockroach::roachpb::PushTxnRequest* RequestUnion::release_push_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.push_txn)
  if (has_push_txn()) {
    clear_has_value();
      ::cockroach::roachpb::PushTxnRequest* temp = value_.push_txn_;
    value_.push_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::PushTxnRequest& RequestUnion::push_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.push_txn)
  return has_push_txn()
      ? *value_.push_txn_
      : *reinterpret_cast< ::cockroach::roachpb::PushTxnRequest*>(&::cockroach::roachpb::_PushTxnRequest_default_instance_);
}
inline ::cockroach::roachpb::PushTxnRequest* RequestUnion::mutable_push_txn() {
  if (!has_push_txn()) {
    clear_value();
    set_has_push_txn();
    value_.push_txn_ = CreateMaybeMessage< ::cockroach::roachpb::PushTxnRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.push_txn)
  return value_.push_txn_;
}

// .cockroach.roachpb.RecoverTxnRequest recover_txn = 46;
inline bool RequestUnion::has_recover_txn() const {
  return value_case() == kRecoverTxn;
}
inline void RequestUnion::set_has_recover_txn() {
  _oneof_case_[0] = kRecoverTxn;
}
inline void RequestUnion::clear_recover_txn() {
  if (has_recover_txn()) {
    delete value_.recover_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RecoverTxnRequest& RequestUnion::_internal_recover_txn() const {
  return *value_.recover_txn_;
}
inline ::cockroach::roachpb::RecoverTxnRequest* RequestUnion::release_recover_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.recover_txn)
  if (has_recover_txn()) {
    clear_has_value();
      ::cockroach::roachpb::RecoverTxnRequest* temp = value_.recover_txn_;
    value_.recover_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RecoverTxnRequest& RequestUnion::recover_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.recover_txn)
  return has_recover_txn()
      ? *value_.recover_txn_
      : *reinterpret_cast< ::cockroach::roachpb::RecoverTxnRequest*>(&::cockroach::roachpb::_RecoverTxnRequest_default_instance_);
}
inline ::cockroach::roachpb::RecoverTxnRequest* RequestUnion::mutable_recover_txn() {
  if (!has_recover_txn()) {
    clear_value();
    set_has_recover_txn();
    value_.recover_txn_ = CreateMaybeMessage< ::cockroach::roachpb::RecoverTxnRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.recover_txn)
  return value_.recover_txn_;
}

// .cockroach.roachpb.ResolveIntentRequest resolve_intent = 16;
inline bool RequestUnion::has_resolve_intent() const {
  return value_case() == kResolveIntent;
}
inline void RequestUnion::set_has_resolve_intent() {
  _oneof_case_[0] = kResolveIntent;
}
inline void RequestUnion::clear_resolve_intent() {
  if (has_resolve_intent()) {
    delete value_.resolve_intent_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ResolveIntentRequest& RequestUnion::_internal_resolve_intent() const {
  return *value_.resolve_intent_;
}
inline ::cockroach::roachpb::ResolveIntentRequest* RequestUnion::release_resolve_intent() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.resolve_intent)
  if (has_resolve_intent()) {
    clear_has_value();
      ::cockroach::roachpb::ResolveIntentRequest* temp = value_.resolve_intent_;
    value_.resolve_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ResolveIntentRequest& RequestUnion::resolve_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.resolve_intent)
  return has_resolve_intent()
      ? *value_.resolve_intent_
      : *reinterpret_cast< ::cockroach::roachpb::ResolveIntentRequest*>(&::cockroach::roachpb::_ResolveIntentRequest_default_instance_);
}
inline ::cockroach::roachpb::ResolveIntentRequest* RequestUnion::mutable_resolve_intent() {
  if (!has_resolve_intent()) {
    clear_value();
    set_has_resolve_intent();
    value_.resolve_intent_ = CreateMaybeMessage< ::cockroach::roachpb::ResolveIntentRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.resolve_intent)
  return value_.resolve_intent_;
}

// .cockroach.roachpb.ResolveIntentRangeRequest resolve_intent_range = 17;
inline bool RequestUnion::has_resolve_intent_range() const {
  return value_case() == kResolveIntentRange;
}
inline void RequestUnion::set_has_resolve_intent_range() {
  _oneof_case_[0] = kResolveIntentRange;
}
inline void RequestUnion::clear_resolve_intent_range() {
  if (has_resolve_intent_range()) {
    delete value_.resolve_intent_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ResolveIntentRangeRequest& RequestUnion::_internal_resolve_intent_range() const {
  return *value_.resolve_intent_range_;
}
inline ::cockroach::roachpb::ResolveIntentRangeRequest* RequestUnion::release_resolve_intent_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.resolve_intent_range)
  if (has_resolve_intent_range()) {
    clear_has_value();
      ::cockroach::roachpb::ResolveIntentRangeRequest* temp = value_.resolve_intent_range_;
    value_.resolve_intent_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ResolveIntentRangeRequest& RequestUnion::resolve_intent_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.resolve_intent_range)
  return has_resolve_intent_range()
      ? *value_.resolve_intent_range_
      : *reinterpret_cast< ::cockroach::roachpb::ResolveIntentRangeRequest*>(&::cockroach::roachpb::_ResolveIntentRangeRequest_default_instance_);
}
inline ::cockroach::roachpb::ResolveIntentRangeRequest* RequestUnion::mutable_resolve_intent_range() {
  if (!has_resolve_intent_range()) {
    clear_value();
    set_has_resolve_intent_range();
    value_.resolve_intent_range_ = CreateMaybeMessage< ::cockroach::roachpb::ResolveIntentRangeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.resolve_intent_range)
  return value_.resolve_intent_range_;
}

// .cockroach.roachpb.MergeRequest merge = 18;
inline bool RequestUnion::has_merge() const {
  return value_case() == kMerge;
}
inline void RequestUnion::set_has_merge() {
  _oneof_case_[0] = kMerge;
}
inline void RequestUnion::clear_merge() {
  if (has_merge()) {
    delete value_.merge_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::MergeRequest& RequestUnion::_internal_merge() const {
  return *value_.merge_;
}
inline ::cockroach::roachpb::MergeRequest* RequestUnion::release_merge() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.merge)
  if (has_merge()) {
    clear_has_value();
      ::cockroach::roachpb::MergeRequest* temp = value_.merge_;
    value_.merge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::MergeRequest& RequestUnion::merge() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.merge)
  return has_merge()
      ? *value_.merge_
      : *reinterpret_cast< ::cockroach::roachpb::MergeRequest*>(&::cockroach::roachpb::_MergeRequest_default_instance_);
}
inline ::cockroach::roachpb::MergeRequest* RequestUnion::mutable_merge() {
  if (!has_merge()) {
    clear_value();
    set_has_merge();
    value_.merge_ = CreateMaybeMessage< ::cockroach::roachpb::MergeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.merge)
  return value_.merge_;
}

// .cockroach.roachpb.TruncateLogRequest truncate_log = 19;
inline bool RequestUnion::has_truncate_log() const {
  return value_case() == kTruncateLog;
}
inline void RequestUnion::set_has_truncate_log() {
  _oneof_case_[0] = kTruncateLog;
}
inline void RequestUnion::clear_truncate_log() {
  if (has_truncate_log()) {
    delete value_.truncate_log_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::TruncateLogRequest& RequestUnion::_internal_truncate_log() const {
  return *value_.truncate_log_;
}
inline ::cockroach::roachpb::TruncateLogRequest* RequestUnion::release_truncate_log() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.truncate_log)
  if (has_truncate_log()) {
    clear_has_value();
      ::cockroach::roachpb::TruncateLogRequest* temp = value_.truncate_log_;
    value_.truncate_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::TruncateLogRequest& RequestUnion::truncate_log() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.truncate_log)
  return has_truncate_log()
      ? *value_.truncate_log_
      : *reinterpret_cast< ::cockroach::roachpb::TruncateLogRequest*>(&::cockroach::roachpb::_TruncateLogRequest_default_instance_);
}
inline ::cockroach::roachpb::TruncateLogRequest* RequestUnion::mutable_truncate_log() {
  if (!has_truncate_log()) {
    clear_value();
    set_has_truncate_log();
    value_.truncate_log_ = CreateMaybeMessage< ::cockroach::roachpb::TruncateLogRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.truncate_log)
  return value_.truncate_log_;
}

// .cockroach.roachpb.RequestLeaseRequest request_lease = 20;
inline bool RequestUnion::has_request_lease() const {
  return value_case() == kRequestLease;
}
inline void RequestUnion::set_has_request_lease() {
  _oneof_case_[0] = kRequestLease;
}
inline void RequestUnion::clear_request_lease() {
  if (has_request_lease()) {
    delete value_.request_lease_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RequestLeaseRequest& RequestUnion::_internal_request_lease() const {
  return *value_.request_lease_;
}
inline ::cockroach::roachpb::RequestLeaseRequest* RequestUnion::release_request_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.request_lease)
  if (has_request_lease()) {
    clear_has_value();
      ::cockroach::roachpb::RequestLeaseRequest* temp = value_.request_lease_;
    value_.request_lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RequestLeaseRequest& RequestUnion::request_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.request_lease)
  return has_request_lease()
      ? *value_.request_lease_
      : *reinterpret_cast< ::cockroach::roachpb::RequestLeaseRequest*>(&::cockroach::roachpb::_RequestLeaseRequest_default_instance_);
}
inline ::cockroach::roachpb::RequestLeaseRequest* RequestUnion::mutable_request_lease() {
  if (!has_request_lease()) {
    clear_value();
    set_has_request_lease();
    value_.request_lease_ = CreateMaybeMessage< ::cockroach::roachpb::RequestLeaseRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.request_lease)
  return value_.request_lease_;
}

// .cockroach.roachpb.ReverseScanRequest reverse_scan = 21;
inline bool RequestUnion::has_reverse_scan() const {
  return value_case() == kReverseScan;
}
inline void RequestUnion::set_has_reverse_scan() {
  _oneof_case_[0] = kReverseScan;
}
inline void RequestUnion::clear_reverse_scan() {
  if (has_reverse_scan()) {
    delete value_.reverse_scan_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ReverseScanRequest& RequestUnion::_internal_reverse_scan() const {
  return *value_.reverse_scan_;
}
inline ::cockroach::roachpb::ReverseScanRequest* RequestUnion::release_reverse_scan() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.reverse_scan)
  if (has_reverse_scan()) {
    clear_has_value();
      ::cockroach::roachpb::ReverseScanRequest* temp = value_.reverse_scan_;
    value_.reverse_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ReverseScanRequest& RequestUnion::reverse_scan() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.reverse_scan)
  return has_reverse_scan()
      ? *value_.reverse_scan_
      : *reinterpret_cast< ::cockroach::roachpb::ReverseScanRequest*>(&::cockroach::roachpb::_ReverseScanRequest_default_instance_);
}
inline ::cockroach::roachpb::ReverseScanRequest* RequestUnion::mutable_reverse_scan() {
  if (!has_reverse_scan()) {
    clear_value();
    set_has_reverse_scan();
    value_.reverse_scan_ = CreateMaybeMessage< ::cockroach::roachpb::ReverseScanRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.reverse_scan)
  return value_.reverse_scan_;
}

// .cockroach.roachpb.ComputeChecksumRequest compute_checksum = 22;
inline bool RequestUnion::has_compute_checksum() const {
  return value_case() == kComputeChecksum;
}
inline void RequestUnion::set_has_compute_checksum() {
  _oneof_case_[0] = kComputeChecksum;
}
inline void RequestUnion::clear_compute_checksum() {
  if (has_compute_checksum()) {
    delete value_.compute_checksum_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ComputeChecksumRequest& RequestUnion::_internal_compute_checksum() const {
  return *value_.compute_checksum_;
}
inline ::cockroach::roachpb::ComputeChecksumRequest* RequestUnion::release_compute_checksum() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.compute_checksum)
  if (has_compute_checksum()) {
    clear_has_value();
      ::cockroach::roachpb::ComputeChecksumRequest* temp = value_.compute_checksum_;
    value_.compute_checksum_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ComputeChecksumRequest& RequestUnion::compute_checksum() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.compute_checksum)
  return has_compute_checksum()
      ? *value_.compute_checksum_
      : *reinterpret_cast< ::cockroach::roachpb::ComputeChecksumRequest*>(&::cockroach::roachpb::_ComputeChecksumRequest_default_instance_);
}
inline ::cockroach::roachpb::ComputeChecksumRequest* RequestUnion::mutable_compute_checksum() {
  if (!has_compute_checksum()) {
    clear_value();
    set_has_compute_checksum();
    value_.compute_checksum_ = CreateMaybeMessage< ::cockroach::roachpb::ComputeChecksumRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.compute_checksum)
  return value_.compute_checksum_;
}

// .cockroach.roachpb.CheckConsistencyRequest check_consistency = 24;
inline bool RequestUnion::has_check_consistency() const {
  return value_case() == kCheckConsistency;
}
inline void RequestUnion::set_has_check_consistency() {
  _oneof_case_[0] = kCheckConsistency;
}
inline void RequestUnion::clear_check_consistency() {
  if (has_check_consistency()) {
    delete value_.check_consistency_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::CheckConsistencyRequest& RequestUnion::_internal_check_consistency() const {
  return *value_.check_consistency_;
}
inline ::cockroach::roachpb::CheckConsistencyRequest* RequestUnion::release_check_consistency() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.check_consistency)
  if (has_check_consistency()) {
    clear_has_value();
      ::cockroach::roachpb::CheckConsistencyRequest* temp = value_.check_consistency_;
    value_.check_consistency_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::CheckConsistencyRequest& RequestUnion::check_consistency() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.check_consistency)
  return has_check_consistency()
      ? *value_.check_consistency_
      : *reinterpret_cast< ::cockroach::roachpb::CheckConsistencyRequest*>(&::cockroach::roachpb::_CheckConsistencyRequest_default_instance_);
}
inline ::cockroach::roachpb::CheckConsistencyRequest* RequestUnion::mutable_check_consistency() {
  if (!has_check_consistency()) {
    clear_value();
    set_has_check_consistency();
    value_.check_consistency_ = CreateMaybeMessage< ::cockroach::roachpb::CheckConsistencyRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.check_consistency)
  return value_.check_consistency_;
}

// .cockroach.roachpb.InitPutRequest init_put = 26;
inline bool RequestUnion::has_init_put() const {
  return value_case() == kInitPut;
}
inline void RequestUnion::set_has_init_put() {
  _oneof_case_[0] = kInitPut;
}
inline void RequestUnion::clear_init_put() {
  if (has_init_put()) {
    delete value_.init_put_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::InitPutRequest& RequestUnion::_internal_init_put() const {
  return *value_.init_put_;
}
inline ::cockroach::roachpb::InitPutRequest* RequestUnion::release_init_put() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.init_put)
  if (has_init_put()) {
    clear_has_value();
      ::cockroach::roachpb::InitPutRequest* temp = value_.init_put_;
    value_.init_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::InitPutRequest& RequestUnion::init_put() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.init_put)
  return has_init_put()
      ? *value_.init_put_
      : *reinterpret_cast< ::cockroach::roachpb::InitPutRequest*>(&::cockroach::roachpb::_InitPutRequest_default_instance_);
}
inline ::cockroach::roachpb::InitPutRequest* RequestUnion::mutable_init_put() {
  if (!has_init_put()) {
    clear_value();
    set_has_init_put();
    value_.init_put_ = CreateMaybeMessage< ::cockroach::roachpb::InitPutRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.init_put)
  return value_.init_put_;
}

// .cockroach.roachpb.TransferLeaseRequest transfer_lease = 28;
inline bool RequestUnion::has_transfer_lease() const {
  return value_case() == kTransferLease;
}
inline void RequestUnion::set_has_transfer_lease() {
  _oneof_case_[0] = kTransferLease;
}
inline void RequestUnion::clear_transfer_lease() {
  if (has_transfer_lease()) {
    delete value_.transfer_lease_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::TransferLeaseRequest& RequestUnion::_internal_transfer_lease() const {
  return *value_.transfer_lease_;
}
inline ::cockroach::roachpb::TransferLeaseRequest* RequestUnion::release_transfer_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.transfer_lease)
  if (has_transfer_lease()) {
    clear_has_value();
      ::cockroach::roachpb::TransferLeaseRequest* temp = value_.transfer_lease_;
    value_.transfer_lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::TransferLeaseRequest& RequestUnion::transfer_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.transfer_lease)
  return has_transfer_lease()
      ? *value_.transfer_lease_
      : *reinterpret_cast< ::cockroach::roachpb::TransferLeaseRequest*>(&::cockroach::roachpb::_TransferLeaseRequest_default_instance_);
}
inline ::cockroach::roachpb::TransferLeaseRequest* RequestUnion::mutable_transfer_lease() {
  if (!has_transfer_lease()) {
    clear_value();
    set_has_transfer_lease();
    value_.transfer_lease_ = CreateMaybeMessage< ::cockroach::roachpb::TransferLeaseRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.transfer_lease)
  return value_.transfer_lease_;
}

// .cockroach.roachpb.LeaseInfoRequest lease_info = 30;
inline bool RequestUnion::has_lease_info() const {
  return value_case() == kLeaseInfo;
}
inline void RequestUnion::set_has_lease_info() {
  _oneof_case_[0] = kLeaseInfo;
}
inline void RequestUnion::clear_lease_info() {
  if (has_lease_info()) {
    delete value_.lease_info_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::LeaseInfoRequest& RequestUnion::_internal_lease_info() const {
  return *value_.lease_info_;
}
inline ::cockroach::roachpb::LeaseInfoRequest* RequestUnion::release_lease_info() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.lease_info)
  if (has_lease_info()) {
    clear_has_value();
      ::cockroach::roachpb::LeaseInfoRequest* temp = value_.lease_info_;
    value_.lease_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::LeaseInfoRequest& RequestUnion::lease_info() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.lease_info)
  return has_lease_info()
      ? *value_.lease_info_
      : *reinterpret_cast< ::cockroach::roachpb::LeaseInfoRequest*>(&::cockroach::roachpb::_LeaseInfoRequest_default_instance_);
}
inline ::cockroach::roachpb::LeaseInfoRequest* RequestUnion::mutable_lease_info() {
  if (!has_lease_info()) {
    clear_value();
    set_has_lease_info();
    value_.lease_info_ = CreateMaybeMessage< ::cockroach::roachpb::LeaseInfoRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.lease_info)
  return value_.lease_info_;
}

// .cockroach.roachpb.WriteBatchRequest write_batch = 31;
inline bool RequestUnion::has_write_batch() const {
  return value_case() == kWriteBatch;
}
inline void RequestUnion::set_has_write_batch() {
  _oneof_case_[0] = kWriteBatch;
}
inline void RequestUnion::clear_write_batch() {
  if (has_write_batch()) {
    delete value_.write_batch_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::WriteBatchRequest& RequestUnion::_internal_write_batch() const {
  return *value_.write_batch_;
}
inline ::cockroach::roachpb::WriteBatchRequest* RequestUnion::release_write_batch() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.write_batch)
  if (has_write_batch()) {
    clear_has_value();
      ::cockroach::roachpb::WriteBatchRequest* temp = value_.write_batch_;
    value_.write_batch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::WriteBatchRequest& RequestUnion::write_batch() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.write_batch)
  return has_write_batch()
      ? *value_.write_batch_
      : *reinterpret_cast< ::cockroach::roachpb::WriteBatchRequest*>(&::cockroach::roachpb::_WriteBatchRequest_default_instance_);
}
inline ::cockroach::roachpb::WriteBatchRequest* RequestUnion::mutable_write_batch() {
  if (!has_write_batch()) {
    clear_value();
    set_has_write_batch();
    value_.write_batch_ = CreateMaybeMessage< ::cockroach::roachpb::WriteBatchRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.write_batch)
  return value_.write_batch_;
}

// .cockroach.roachpb.ExportRequest export = 32;
inline bool RequestUnion::has_export_() const {
  return value_case() == kExport;
}
inline void RequestUnion::set_has_export_() {
  _oneof_case_[0] = kExport;
}
inline void RequestUnion::clear_export_() {
  if (has_export_()) {
    delete value_.export__;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ExportRequest& RequestUnion::_internal_export_() const {
  return *value_.export__;
}
inline ::cockroach::roachpb::ExportRequest* RequestUnion::release_export_() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.export)
  if (has_export_()) {
    clear_has_value();
      ::cockroach::roachpb::ExportRequest* temp = value_.export__;
    value_.export__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ExportRequest& RequestUnion::export_() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.export)
  return has_export_()
      ? *value_.export__
      : *reinterpret_cast< ::cockroach::roachpb::ExportRequest*>(&::cockroach::roachpb::_ExportRequest_default_instance_);
}
inline ::cockroach::roachpb::ExportRequest* RequestUnion::mutable_export_() {
  if (!has_export_()) {
    clear_value();
    set_has_export_();
    value_.export__ = CreateMaybeMessage< ::cockroach::roachpb::ExportRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.export)
  return value_.export__;
}

// .cockroach.roachpb.ImportRequest import = 34;
inline bool RequestUnion::has_import() const {
  return value_case() == kImport;
}
inline void RequestUnion::set_has_import() {
  _oneof_case_[0] = kImport;
}
inline void RequestUnion::clear_import() {
  if (has_import()) {
    delete value_.import_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ImportRequest& RequestUnion::_internal_import() const {
  return *value_.import_;
}
inline ::cockroach::roachpb::ImportRequest* RequestUnion::release_import() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.import)
  if (has_import()) {
    clear_has_value();
      ::cockroach::roachpb::ImportRequest* temp = value_.import_;
    value_.import_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ImportRequest& RequestUnion::import() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.import)
  return has_import()
      ? *value_.import_
      : *reinterpret_cast< ::cockroach::roachpb::ImportRequest*>(&::cockroach::roachpb::_ImportRequest_default_instance_);
}
inline ::cockroach::roachpb::ImportRequest* RequestUnion::mutable_import() {
  if (!has_import()) {
    clear_value();
    set_has_import();
    value_.import_ = CreateMaybeMessage< ::cockroach::roachpb::ImportRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.import)
  return value_.import_;
}

// .cockroach.roachpb.QueryTxnRequest query_txn = 33;
inline bool RequestUnion::has_query_txn() const {
  return value_case() == kQueryTxn;
}
inline void RequestUnion::set_has_query_txn() {
  _oneof_case_[0] = kQueryTxn;
}
inline void RequestUnion::clear_query_txn() {
  if (has_query_txn()) {
    delete value_.query_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::QueryTxnRequest& RequestUnion::_internal_query_txn() const {
  return *value_.query_txn_;
}
inline ::cockroach::roachpb::QueryTxnRequest* RequestUnion::release_query_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.query_txn)
  if (has_query_txn()) {
    clear_has_value();
      ::cockroach::roachpb::QueryTxnRequest* temp = value_.query_txn_;
    value_.query_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::QueryTxnRequest& RequestUnion::query_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.query_txn)
  return has_query_txn()
      ? *value_.query_txn_
      : *reinterpret_cast< ::cockroach::roachpb::QueryTxnRequest*>(&::cockroach::roachpb::_QueryTxnRequest_default_instance_);
}
inline ::cockroach::roachpb::QueryTxnRequest* RequestUnion::mutable_query_txn() {
  if (!has_query_txn()) {
    clear_value();
    set_has_query_txn();
    value_.query_txn_ = CreateMaybeMessage< ::cockroach::roachpb::QueryTxnRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.query_txn)
  return value_.query_txn_;
}

// .cockroach.roachpb.QueryIntentRequest query_intent = 42;
inline bool RequestUnion::has_query_intent() const {
  return value_case() == kQueryIntent;
}
inline void RequestUnion::set_has_query_intent() {
  _oneof_case_[0] = kQueryIntent;
}
inline void RequestUnion::clear_query_intent() {
  if (has_query_intent()) {
    delete value_.query_intent_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::QueryIntentRequest& RequestUnion::_internal_query_intent() const {
  return *value_.query_intent_;
}
inline ::cockroach::roachpb::QueryIntentRequest* RequestUnion::release_query_intent() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.query_intent)
  if (has_query_intent()) {
    clear_has_value();
      ::cockroach::roachpb::QueryIntentRequest* temp = value_.query_intent_;
    value_.query_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::QueryIntentRequest& RequestUnion::query_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.query_intent)
  return has_query_intent()
      ? *value_.query_intent_
      : *reinterpret_cast< ::cockroach::roachpb::QueryIntentRequest*>(&::cockroach::roachpb::_QueryIntentRequest_default_instance_);
}
inline ::cockroach::roachpb::QueryIntentRequest* RequestUnion::mutable_query_intent() {
  if (!has_query_intent()) {
    clear_value();
    set_has_query_intent();
    value_.query_intent_ = CreateMaybeMessage< ::cockroach::roachpb::QueryIntentRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.query_intent)
  return value_.query_intent_;
}

// .cockroach.roachpb.AdminScatterRequest admin_scatter = 36;
inline bool RequestUnion::has_admin_scatter() const {
  return value_case() == kAdminScatter;
}
inline void RequestUnion::set_has_admin_scatter() {
  _oneof_case_[0] = kAdminScatter;
}
inline void RequestUnion::clear_admin_scatter() {
  if (has_admin_scatter()) {
    delete value_.admin_scatter_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminScatterRequest& RequestUnion::_internal_admin_scatter() const {
  return *value_.admin_scatter_;
}
inline ::cockroach::roachpb::AdminScatterRequest* RequestUnion::release_admin_scatter() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.admin_scatter)
  if (has_admin_scatter()) {
    clear_has_value();
      ::cockroach::roachpb::AdminScatterRequest* temp = value_.admin_scatter_;
    value_.admin_scatter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminScatterRequest& RequestUnion::admin_scatter() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.admin_scatter)
  return has_admin_scatter()
      ? *value_.admin_scatter_
      : *reinterpret_cast< ::cockroach::roachpb::AdminScatterRequest*>(&::cockroach::roachpb::_AdminScatterRequest_default_instance_);
}
inline ::cockroach::roachpb::AdminScatterRequest* RequestUnion::mutable_admin_scatter() {
  if (!has_admin_scatter()) {
    clear_value();
    set_has_admin_scatter();
    value_.admin_scatter_ = CreateMaybeMessage< ::cockroach::roachpb::AdminScatterRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.admin_scatter)
  return value_.admin_scatter_;
}

// .cockroach.roachpb.AddSSTableRequest add_sstable = 37;
inline bool RequestUnion::has_add_sstable() const {
  return value_case() == kAddSstable;
}
inline void RequestUnion::set_has_add_sstable() {
  _oneof_case_[0] = kAddSstable;
}
inline void RequestUnion::clear_add_sstable() {
  if (has_add_sstable()) {
    delete value_.add_sstable_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AddSSTableRequest& RequestUnion::_internal_add_sstable() const {
  return *value_.add_sstable_;
}
inline ::cockroach::roachpb::AddSSTableRequest* RequestUnion::release_add_sstable() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.add_sstable)
  if (has_add_sstable()) {
    clear_has_value();
      ::cockroach::roachpb::AddSSTableRequest* temp = value_.add_sstable_;
    value_.add_sstable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AddSSTableRequest& RequestUnion::add_sstable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.add_sstable)
  return has_add_sstable()
      ? *value_.add_sstable_
      : *reinterpret_cast< ::cockroach::roachpb::AddSSTableRequest*>(&::cockroach::roachpb::_AddSSTableRequest_default_instance_);
}
inline ::cockroach::roachpb::AddSSTableRequest* RequestUnion::mutable_add_sstable() {
  if (!has_add_sstable()) {
    clear_value();
    set_has_add_sstable();
    value_.add_sstable_ = CreateMaybeMessage< ::cockroach::roachpb::AddSSTableRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.add_sstable)
  return value_.add_sstable_;
}

// .cockroach.roachpb.RecomputeStatsRequest recompute_stats = 39;
inline bool RequestUnion::has_recompute_stats() const {
  return value_case() == kRecomputeStats;
}
inline void RequestUnion::set_has_recompute_stats() {
  _oneof_case_[0] = kRecomputeStats;
}
inline void RequestUnion::clear_recompute_stats() {
  if (has_recompute_stats()) {
    delete value_.recompute_stats_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RecomputeStatsRequest& RequestUnion::_internal_recompute_stats() const {
  return *value_.recompute_stats_;
}
inline ::cockroach::roachpb::RecomputeStatsRequest* RequestUnion::release_recompute_stats() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.recompute_stats)
  if (has_recompute_stats()) {
    clear_has_value();
      ::cockroach::roachpb::RecomputeStatsRequest* temp = value_.recompute_stats_;
    value_.recompute_stats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RecomputeStatsRequest& RequestUnion::recompute_stats() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.recompute_stats)
  return has_recompute_stats()
      ? *value_.recompute_stats_
      : *reinterpret_cast< ::cockroach::roachpb::RecomputeStatsRequest*>(&::cockroach::roachpb::_RecomputeStatsRequest_default_instance_);
}
inline ::cockroach::roachpb::RecomputeStatsRequest* RequestUnion::mutable_recompute_stats() {
  if (!has_recompute_stats()) {
    clear_value();
    set_has_recompute_stats();
    value_.recompute_stats_ = CreateMaybeMessage< ::cockroach::roachpb::RecomputeStatsRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.recompute_stats)
  return value_.recompute_stats_;
}

// .cockroach.roachpb.RefreshRequest refresh = 40;
inline bool RequestUnion::has_refresh() const {
  return value_case() == kRefresh;
}
inline void RequestUnion::set_has_refresh() {
  _oneof_case_[0] = kRefresh;
}
inline void RequestUnion::clear_refresh() {
  if (has_refresh()) {
    delete value_.refresh_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RefreshRequest& RequestUnion::_internal_refresh() const {
  return *value_.refresh_;
}
inline ::cockroach::roachpb::RefreshRequest* RequestUnion::release_refresh() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.refresh)
  if (has_refresh()) {
    clear_has_value();
      ::cockroach::roachpb::RefreshRequest* temp = value_.refresh_;
    value_.refresh_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RefreshRequest& RequestUnion::refresh() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.refresh)
  return has_refresh()
      ? *value_.refresh_
      : *reinterpret_cast< ::cockroach::roachpb::RefreshRequest*>(&::cockroach::roachpb::_RefreshRequest_default_instance_);
}
inline ::cockroach::roachpb::RefreshRequest* RequestUnion::mutable_refresh() {
  if (!has_refresh()) {
    clear_value();
    set_has_refresh();
    value_.refresh_ = CreateMaybeMessage< ::cockroach::roachpb::RefreshRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.refresh)
  return value_.refresh_;
}

// .cockroach.roachpb.RefreshRangeRequest refresh_range = 41;
inline bool RequestUnion::has_refresh_range() const {
  return value_case() == kRefreshRange;
}
inline void RequestUnion::set_has_refresh_range() {
  _oneof_case_[0] = kRefreshRange;
}
inline void RequestUnion::clear_refresh_range() {
  if (has_refresh_range()) {
    delete value_.refresh_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RefreshRangeRequest& RequestUnion::_internal_refresh_range() const {
  return *value_.refresh_range_;
}
inline ::cockroach::roachpb::RefreshRangeRequest* RequestUnion::release_refresh_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.refresh_range)
  if (has_refresh_range()) {
    clear_has_value();
      ::cockroach::roachpb::RefreshRangeRequest* temp = value_.refresh_range_;
    value_.refresh_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RefreshRangeRequest& RequestUnion::refresh_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.refresh_range)
  return has_refresh_range()
      ? *value_.refresh_range_
      : *reinterpret_cast< ::cockroach::roachpb::RefreshRangeRequest*>(&::cockroach::roachpb::_RefreshRangeRequest_default_instance_);
}
inline ::cockroach::roachpb::RefreshRangeRequest* RequestUnion::mutable_refresh_range() {
  if (!has_refresh_range()) {
    clear_value();
    set_has_refresh_range();
    value_.refresh_range_ = CreateMaybeMessage< ::cockroach::roachpb::RefreshRangeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.refresh_range)
  return value_.refresh_range_;
}

// .cockroach.roachpb.SubsumeRequest subsume = 43;
inline bool RequestUnion::has_subsume() const {
  return value_case() == kSubsume;
}
inline void RequestUnion::set_has_subsume() {
  _oneof_case_[0] = kSubsume;
}
inline void RequestUnion::clear_subsume() {
  if (has_subsume()) {
    delete value_.subsume_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::SubsumeRequest& RequestUnion::_internal_subsume() const {
  return *value_.subsume_;
}
inline ::cockroach::roachpb::SubsumeRequest* RequestUnion::release_subsume() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.subsume)
  if (has_subsume()) {
    clear_has_value();
      ::cockroach::roachpb::SubsumeRequest* temp = value_.subsume_;
    value_.subsume_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::SubsumeRequest& RequestUnion::subsume() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.subsume)
  return has_subsume()
      ? *value_.subsume_
      : *reinterpret_cast< ::cockroach::roachpb::SubsumeRequest*>(&::cockroach::roachpb::_SubsumeRequest_default_instance_);
}
inline ::cockroach::roachpb::SubsumeRequest* RequestUnion::mutable_subsume() {
  if (!has_subsume()) {
    clear_value();
    set_has_subsume();
    value_.subsume_ = CreateMaybeMessage< ::cockroach::roachpb::SubsumeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.subsume)
  return value_.subsume_;
}

// .cockroach.roachpb.RangeStatsRequest range_stats = 44;
inline bool RequestUnion::has_range_stats() const {
  return value_case() == kRangeStats;
}
inline void RequestUnion::set_has_range_stats() {
  _oneof_case_[0] = kRangeStats;
}
inline void RequestUnion::clear_range_stats() {
  if (has_range_stats()) {
    delete value_.range_stats_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RangeStatsRequest& RequestUnion::_internal_range_stats() const {
  return *value_.range_stats_;
}
inline ::cockroach::roachpb::RangeStatsRequest* RequestUnion::release_range_stats() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RequestUnion.range_stats)
  if (has_range_stats()) {
    clear_has_value();
      ::cockroach::roachpb::RangeStatsRequest* temp = value_.range_stats_;
    value_.range_stats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RangeStatsRequest& RequestUnion::range_stats() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RequestUnion.range_stats)
  return has_range_stats()
      ? *value_.range_stats_
      : *reinterpret_cast< ::cockroach::roachpb::RangeStatsRequest*>(&::cockroach::roachpb::_RangeStatsRequest_default_instance_);
}
inline ::cockroach::roachpb::RangeStatsRequest* RequestUnion::mutable_range_stats() {
  if (!has_range_stats()) {
    clear_value();
    set_has_range_stats();
    value_.range_stats_ = CreateMaybeMessage< ::cockroach::roachpb::RangeStatsRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RequestUnion.range_stats)
  return value_.range_stats_;
}

inline bool RequestUnion::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void RequestUnion::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline RequestUnion::ValueCase RequestUnion::value_case() const {
  return RequestUnion::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseUnion

// .cockroach.roachpb.GetResponse get = 1;
inline bool ResponseUnion::has_get() const {
  return value_case() == kGet;
}
inline void ResponseUnion::set_has_get() {
  _oneof_case_[0] = kGet;
}
inline void ResponseUnion::clear_get() {
  if (has_get()) {
    delete value_.get_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::GetResponse& ResponseUnion::_internal_get() const {
  return *value_.get_;
}
inline ::cockroach::roachpb::GetResponse* ResponseUnion::release_get() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.get)
  if (has_get()) {
    clear_has_value();
      ::cockroach::roachpb::GetResponse* temp = value_.get_;
    value_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::GetResponse& ResponseUnion::get() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.get)
  return has_get()
      ? *value_.get_
      : *reinterpret_cast< ::cockroach::roachpb::GetResponse*>(&::cockroach::roachpb::_GetResponse_default_instance_);
}
inline ::cockroach::roachpb::GetResponse* ResponseUnion::mutable_get() {
  if (!has_get()) {
    clear_value();
    set_has_get();
    value_.get_ = CreateMaybeMessage< ::cockroach::roachpb::GetResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.get)
  return value_.get_;
}

// .cockroach.roachpb.PutResponse put = 2;
inline bool ResponseUnion::has_put() const {
  return value_case() == kPut;
}
inline void ResponseUnion::set_has_put() {
  _oneof_case_[0] = kPut;
}
inline void ResponseUnion::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::PutResponse& ResponseUnion::_internal_put() const {
  return *value_.put_;
}
inline ::cockroach::roachpb::PutResponse* ResponseUnion::release_put() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.put)
  if (has_put()) {
    clear_has_value();
      ::cockroach::roachpb::PutResponse* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::PutResponse& ResponseUnion::put() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.put)
  return has_put()
      ? *value_.put_
      : *reinterpret_cast< ::cockroach::roachpb::PutResponse*>(&::cockroach::roachpb::_PutResponse_default_instance_);
}
inline ::cockroach::roachpb::PutResponse* ResponseUnion::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = CreateMaybeMessage< ::cockroach::roachpb::PutResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.put)
  return value_.put_;
}

// .cockroach.roachpb.ConditionalPutResponse conditional_put = 3;
inline bool ResponseUnion::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
inline void ResponseUnion::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
inline void ResponseUnion::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ConditionalPutResponse& ResponseUnion::_internal_conditional_put() const {
  return *value_.conditional_put_;
}
inline ::cockroach::roachpb::ConditionalPutResponse* ResponseUnion::release_conditional_put() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.conditional_put)
  if (has_conditional_put()) {
    clear_has_value();
      ::cockroach::roachpb::ConditionalPutResponse* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ConditionalPutResponse& ResponseUnion::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.conditional_put)
  return has_conditional_put()
      ? *value_.conditional_put_
      : *reinterpret_cast< ::cockroach::roachpb::ConditionalPutResponse*>(&::cockroach::roachpb::_ConditionalPutResponse_default_instance_);
}
inline ::cockroach::roachpb::ConditionalPutResponse* ResponseUnion::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = CreateMaybeMessage< ::cockroach::roachpb::ConditionalPutResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.conditional_put)
  return value_.conditional_put_;
}

// .cockroach.roachpb.IncrementResponse increment = 4;
inline bool ResponseUnion::has_increment() const {
  return value_case() == kIncrement;
}
inline void ResponseUnion::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
inline void ResponseUnion::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::IncrementResponse& ResponseUnion::_internal_increment() const {
  return *value_.increment_;
}
inline ::cockroach::roachpb::IncrementResponse* ResponseUnion::release_increment() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.increment)
  if (has_increment()) {
    clear_has_value();
      ::cockroach::roachpb::IncrementResponse* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::IncrementResponse& ResponseUnion::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.increment)
  return has_increment()
      ? *value_.increment_
      : *reinterpret_cast< ::cockroach::roachpb::IncrementResponse*>(&::cockroach::roachpb::_IncrementResponse_default_instance_);
}
inline ::cockroach::roachpb::IncrementResponse* ResponseUnion::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = CreateMaybeMessage< ::cockroach::roachpb::IncrementResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.increment)
  return value_.increment_;
}

// .cockroach.roachpb.DeleteResponse delete = 5;
inline bool ResponseUnion::has_delete_() const {
  return value_case() == kDelete;
}
inline void ResponseUnion::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void ResponseUnion::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::DeleteResponse& ResponseUnion::_internal_delete_() const {
  return *value_.delete__;
}
inline ::cockroach::roachpb::DeleteResponse* ResponseUnion::release_delete_() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.delete)
  if (has_delete_()) {
    clear_has_value();
      ::cockroach::roachpb::DeleteResponse* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::DeleteResponse& ResponseUnion::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.delete)
  return has_delete_()
      ? *value_.delete__
      : *reinterpret_cast< ::cockroach::roachpb::DeleteResponse*>(&::cockroach::roachpb::_DeleteResponse_default_instance_);
}
inline ::cockroach::roachpb::DeleteResponse* ResponseUnion::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = CreateMaybeMessage< ::cockroach::roachpb::DeleteResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.delete)
  return value_.delete__;
}

// .cockroach.roachpb.DeleteRangeResponse delete_range = 6;
inline bool ResponseUnion::has_delete_range() const {
  return value_case() == kDeleteRange;
}
inline void ResponseUnion::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
inline void ResponseUnion::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::DeleteRangeResponse& ResponseUnion::_internal_delete_range() const {
  return *value_.delete_range_;
}
inline ::cockroach::roachpb::DeleteRangeResponse* ResponseUnion::release_delete_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.delete_range)
  if (has_delete_range()) {
    clear_has_value();
      ::cockroach::roachpb::DeleteRangeResponse* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::DeleteRangeResponse& ResponseUnion::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.delete_range)
  return has_delete_range()
      ? *value_.delete_range_
      : *reinterpret_cast< ::cockroach::roachpb::DeleteRangeResponse*>(&::cockroach::roachpb::_DeleteRangeResponse_default_instance_);
}
inline ::cockroach::roachpb::DeleteRangeResponse* ResponseUnion::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = CreateMaybeMessage< ::cockroach::roachpb::DeleteRangeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.delete_range)
  return value_.delete_range_;
}

// .cockroach.roachpb.ClearRangeResponse clear_range = 38;
inline bool ResponseUnion::has_clear_range() const {
  return value_case() == kClearRange;
}
inline void ResponseUnion::set_has_clear_range() {
  _oneof_case_[0] = kClearRange;
}
inline void ResponseUnion::clear_clear_range() {
  if (has_clear_range()) {
    delete value_.clear_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ClearRangeResponse& ResponseUnion::_internal_clear_range() const {
  return *value_.clear_range_;
}
inline ::cockroach::roachpb::ClearRangeResponse* ResponseUnion::release_clear_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.clear_range)
  if (has_clear_range()) {
    clear_has_value();
      ::cockroach::roachpb::ClearRangeResponse* temp = value_.clear_range_;
    value_.clear_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ClearRangeResponse& ResponseUnion::clear_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.clear_range)
  return has_clear_range()
      ? *value_.clear_range_
      : *reinterpret_cast< ::cockroach::roachpb::ClearRangeResponse*>(&::cockroach::roachpb::_ClearRangeResponse_default_instance_);
}
inline ::cockroach::roachpb::ClearRangeResponse* ResponseUnion::mutable_clear_range() {
  if (!has_clear_range()) {
    clear_value();
    set_has_clear_range();
    value_.clear_range_ = CreateMaybeMessage< ::cockroach::roachpb::ClearRangeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.clear_range)
  return value_.clear_range_;
}

// .cockroach.roachpb.RevertRangeResponse revert_range = 48;
inline bool ResponseUnion::has_revert_range() const {
  return value_case() == kRevertRange;
}
inline void ResponseUnion::set_has_revert_range() {
  _oneof_case_[0] = kRevertRange;
}
inline void ResponseUnion::clear_revert_range() {
  if (has_revert_range()) {
    delete value_.revert_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RevertRangeResponse& ResponseUnion::_internal_revert_range() const {
  return *value_.revert_range_;
}
inline ::cockroach::roachpb::RevertRangeResponse* ResponseUnion::release_revert_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.revert_range)
  if (has_revert_range()) {
    clear_has_value();
      ::cockroach::roachpb::RevertRangeResponse* temp = value_.revert_range_;
    value_.revert_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RevertRangeResponse& ResponseUnion::revert_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.revert_range)
  return has_revert_range()
      ? *value_.revert_range_
      : *reinterpret_cast< ::cockroach::roachpb::RevertRangeResponse*>(&::cockroach::roachpb::_RevertRangeResponse_default_instance_);
}
inline ::cockroach::roachpb::RevertRangeResponse* ResponseUnion::mutable_revert_range() {
  if (!has_revert_range()) {
    clear_value();
    set_has_revert_range();
    value_.revert_range_ = CreateMaybeMessage< ::cockroach::roachpb::RevertRangeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.revert_range)
  return value_.revert_range_;
}

// .cockroach.roachpb.ScanResponse scan = 7;
inline bool ResponseUnion::has_scan() const {
  return value_case() == kScan;
}
inline void ResponseUnion::set_has_scan() {
  _oneof_case_[0] = kScan;
}
inline void ResponseUnion::clear_scan() {
  if (has_scan()) {
    delete value_.scan_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ScanResponse& ResponseUnion::_internal_scan() const {
  return *value_.scan_;
}
inline ::cockroach::roachpb::ScanResponse* ResponseUnion::release_scan() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.scan)
  if (has_scan()) {
    clear_has_value();
      ::cockroach::roachpb::ScanResponse* temp = value_.scan_;
    value_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ScanResponse& ResponseUnion::scan() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.scan)
  return has_scan()
      ? *value_.scan_
      : *reinterpret_cast< ::cockroach::roachpb::ScanResponse*>(&::cockroach::roachpb::_ScanResponse_default_instance_);
}
inline ::cockroach::roachpb::ScanResponse* ResponseUnion::mutable_scan() {
  if (!has_scan()) {
    clear_value();
    set_has_scan();
    value_.scan_ = CreateMaybeMessage< ::cockroach::roachpb::ScanResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.scan)
  return value_.scan_;
}

// .cockroach.roachpb.BeginTransactionResponse begin_transaction = 8;
inline bool ResponseUnion::has_begin_transaction() const {
  return value_case() == kBeginTransaction;
}
inline void ResponseUnion::set_has_begin_transaction() {
  _oneof_case_[0] = kBeginTransaction;
}
inline void ResponseUnion::clear_begin_transaction() {
  if (has_begin_transaction()) {
    delete value_.begin_transaction_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::BeginTransactionResponse& ResponseUnion::_internal_begin_transaction() const {
  return *value_.begin_transaction_;
}
inline ::cockroach::roachpb::BeginTransactionResponse* ResponseUnion::release_begin_transaction() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.begin_transaction)
  if (has_begin_transaction()) {
    clear_has_value();
      ::cockroach::roachpb::BeginTransactionResponse* temp = value_.begin_transaction_;
    value_.begin_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::BeginTransactionResponse& ResponseUnion::begin_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.begin_transaction)
  return has_begin_transaction()
      ? *value_.begin_transaction_
      : *reinterpret_cast< ::cockroach::roachpb::BeginTransactionResponse*>(&::cockroach::roachpb::_BeginTransactionResponse_default_instance_);
}
inline ::cockroach::roachpb::BeginTransactionResponse* ResponseUnion::mutable_begin_transaction() {
  if (!has_begin_transaction()) {
    clear_value();
    set_has_begin_transaction();
    value_.begin_transaction_ = CreateMaybeMessage< ::cockroach::roachpb::BeginTransactionResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.begin_transaction)
  return value_.begin_transaction_;
}

// .cockroach.roachpb.EndTransactionResponse end_transaction = 9;
inline bool ResponseUnion::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
inline void ResponseUnion::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
inline void ResponseUnion::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::EndTransactionResponse& ResponseUnion::_internal_end_transaction() const {
  return *value_.end_transaction_;
}
inline ::cockroach::roachpb::EndTransactionResponse* ResponseUnion::release_end_transaction() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.end_transaction)
  if (has_end_transaction()) {
    clear_has_value();
      ::cockroach::roachpb::EndTransactionResponse* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::EndTransactionResponse& ResponseUnion::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.end_transaction)
  return has_end_transaction()
      ? *value_.end_transaction_
      : *reinterpret_cast< ::cockroach::roachpb::EndTransactionResponse*>(&::cockroach::roachpb::_EndTransactionResponse_default_instance_);
}
inline ::cockroach::roachpb::EndTransactionResponse* ResponseUnion::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = CreateMaybeMessage< ::cockroach::roachpb::EndTransactionResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.end_transaction)
  return value_.end_transaction_;
}

// .cockroach.roachpb.AdminSplitResponse admin_split = 10;
inline bool ResponseUnion::has_admin_split() const {
  return value_case() == kAdminSplit;
}
inline void ResponseUnion::set_has_admin_split() {
  _oneof_case_[0] = kAdminSplit;
}
inline void ResponseUnion::clear_admin_split() {
  if (has_admin_split()) {
    delete value_.admin_split_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminSplitResponse& ResponseUnion::_internal_admin_split() const {
  return *value_.admin_split_;
}
inline ::cockroach::roachpb::AdminSplitResponse* ResponseUnion::release_admin_split() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.admin_split)
  if (has_admin_split()) {
    clear_has_value();
      ::cockroach::roachpb::AdminSplitResponse* temp = value_.admin_split_;
    value_.admin_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminSplitResponse& ResponseUnion::admin_split() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.admin_split)
  return has_admin_split()
      ? *value_.admin_split_
      : *reinterpret_cast< ::cockroach::roachpb::AdminSplitResponse*>(&::cockroach::roachpb::_AdminSplitResponse_default_instance_);
}
inline ::cockroach::roachpb::AdminSplitResponse* ResponseUnion::mutable_admin_split() {
  if (!has_admin_split()) {
    clear_value();
    set_has_admin_split();
    value_.admin_split_ = CreateMaybeMessage< ::cockroach::roachpb::AdminSplitResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.admin_split)
  return value_.admin_split_;
}

// .cockroach.roachpb.AdminUnsplitResponse admin_unsplit = 47;
inline bool ResponseUnion::has_admin_unsplit() const {
  return value_case() == kAdminUnsplit;
}
inline void ResponseUnion::set_has_admin_unsplit() {
  _oneof_case_[0] = kAdminUnsplit;
}
inline void ResponseUnion::clear_admin_unsplit() {
  if (has_admin_unsplit()) {
    delete value_.admin_unsplit_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminUnsplitResponse& ResponseUnion::_internal_admin_unsplit() const {
  return *value_.admin_unsplit_;
}
inline ::cockroach::roachpb::AdminUnsplitResponse* ResponseUnion::release_admin_unsplit() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.admin_unsplit)
  if (has_admin_unsplit()) {
    clear_has_value();
      ::cockroach::roachpb::AdminUnsplitResponse* temp = value_.admin_unsplit_;
    value_.admin_unsplit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminUnsplitResponse& ResponseUnion::admin_unsplit() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.admin_unsplit)
  return has_admin_unsplit()
      ? *value_.admin_unsplit_
      : *reinterpret_cast< ::cockroach::roachpb::AdminUnsplitResponse*>(&::cockroach::roachpb::_AdminUnsplitResponse_default_instance_);
}
inline ::cockroach::roachpb::AdminUnsplitResponse* ResponseUnion::mutable_admin_unsplit() {
  if (!has_admin_unsplit()) {
    clear_value();
    set_has_admin_unsplit();
    value_.admin_unsplit_ = CreateMaybeMessage< ::cockroach::roachpb::AdminUnsplitResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.admin_unsplit)
  return value_.admin_unsplit_;
}

// .cockroach.roachpb.AdminMergeResponse admin_merge = 11;
inline bool ResponseUnion::has_admin_merge() const {
  return value_case() == kAdminMerge;
}
inline void ResponseUnion::set_has_admin_merge() {
  _oneof_case_[0] = kAdminMerge;
}
inline void ResponseUnion::clear_admin_merge() {
  if (has_admin_merge()) {
    delete value_.admin_merge_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminMergeResponse& ResponseUnion::_internal_admin_merge() const {
  return *value_.admin_merge_;
}
inline ::cockroach::roachpb::AdminMergeResponse* ResponseUnion::release_admin_merge() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.admin_merge)
  if (has_admin_merge()) {
    clear_has_value();
      ::cockroach::roachpb::AdminMergeResponse* temp = value_.admin_merge_;
    value_.admin_merge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminMergeResponse& ResponseUnion::admin_merge() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.admin_merge)
  return has_admin_merge()
      ? *value_.admin_merge_
      : *reinterpret_cast< ::cockroach::roachpb::AdminMergeResponse*>(&::cockroach::roachpb::_AdminMergeResponse_default_instance_);
}
inline ::cockroach::roachpb::AdminMergeResponse* ResponseUnion::mutable_admin_merge() {
  if (!has_admin_merge()) {
    clear_value();
    set_has_admin_merge();
    value_.admin_merge_ = CreateMaybeMessage< ::cockroach::roachpb::AdminMergeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.admin_merge)
  return value_.admin_merge_;
}

// .cockroach.roachpb.AdminTransferLeaseResponse admin_transfer_lease = 29;
inline bool ResponseUnion::has_admin_transfer_lease() const {
  return value_case() == kAdminTransferLease;
}
inline void ResponseUnion::set_has_admin_transfer_lease() {
  _oneof_case_[0] = kAdminTransferLease;
}
inline void ResponseUnion::clear_admin_transfer_lease() {
  if (has_admin_transfer_lease()) {
    delete value_.admin_transfer_lease_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminTransferLeaseResponse& ResponseUnion::_internal_admin_transfer_lease() const {
  return *value_.admin_transfer_lease_;
}
inline ::cockroach::roachpb::AdminTransferLeaseResponse* ResponseUnion::release_admin_transfer_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.admin_transfer_lease)
  if (has_admin_transfer_lease()) {
    clear_has_value();
      ::cockroach::roachpb::AdminTransferLeaseResponse* temp = value_.admin_transfer_lease_;
    value_.admin_transfer_lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminTransferLeaseResponse& ResponseUnion::admin_transfer_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.admin_transfer_lease)
  return has_admin_transfer_lease()
      ? *value_.admin_transfer_lease_
      : *reinterpret_cast< ::cockroach::roachpb::AdminTransferLeaseResponse*>(&::cockroach::roachpb::_AdminTransferLeaseResponse_default_instance_);
}
inline ::cockroach::roachpb::AdminTransferLeaseResponse* ResponseUnion::mutable_admin_transfer_lease() {
  if (!has_admin_transfer_lease()) {
    clear_value();
    set_has_admin_transfer_lease();
    value_.admin_transfer_lease_ = CreateMaybeMessage< ::cockroach::roachpb::AdminTransferLeaseResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.admin_transfer_lease)
  return value_.admin_transfer_lease_;
}

// .cockroach.roachpb.AdminChangeReplicasResponse admin_change_replicas = 35;
inline bool ResponseUnion::has_admin_change_replicas() const {
  return value_case() == kAdminChangeReplicas;
}
inline void ResponseUnion::set_has_admin_change_replicas() {
  _oneof_case_[0] = kAdminChangeReplicas;
}
inline void ResponseUnion::clear_admin_change_replicas() {
  if (has_admin_change_replicas()) {
    delete value_.admin_change_replicas_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminChangeReplicasResponse& ResponseUnion::_internal_admin_change_replicas() const {
  return *value_.admin_change_replicas_;
}
inline ::cockroach::roachpb::AdminChangeReplicasResponse* ResponseUnion::release_admin_change_replicas() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.admin_change_replicas)
  if (has_admin_change_replicas()) {
    clear_has_value();
      ::cockroach::roachpb::AdminChangeReplicasResponse* temp = value_.admin_change_replicas_;
    value_.admin_change_replicas_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminChangeReplicasResponse& ResponseUnion::admin_change_replicas() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.admin_change_replicas)
  return has_admin_change_replicas()
      ? *value_.admin_change_replicas_
      : *reinterpret_cast< ::cockroach::roachpb::AdminChangeReplicasResponse*>(&::cockroach::roachpb::_AdminChangeReplicasResponse_default_instance_);
}
inline ::cockroach::roachpb::AdminChangeReplicasResponse* ResponseUnion::mutable_admin_change_replicas() {
  if (!has_admin_change_replicas()) {
    clear_value();
    set_has_admin_change_replicas();
    value_.admin_change_replicas_ = CreateMaybeMessage< ::cockroach::roachpb::AdminChangeReplicasResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.admin_change_replicas)
  return value_.admin_change_replicas_;
}

// .cockroach.roachpb.AdminRelocateRangeResponse admin_relocate_range = 45;
inline bool ResponseUnion::has_admin_relocate_range() const {
  return value_case() == kAdminRelocateRange;
}
inline void ResponseUnion::set_has_admin_relocate_range() {
  _oneof_case_[0] = kAdminRelocateRange;
}
inline void ResponseUnion::clear_admin_relocate_range() {
  if (has_admin_relocate_range()) {
    delete value_.admin_relocate_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminRelocateRangeResponse& ResponseUnion::_internal_admin_relocate_range() const {
  return *value_.admin_relocate_range_;
}
inline ::cockroach::roachpb::AdminRelocateRangeResponse* ResponseUnion::release_admin_relocate_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.admin_relocate_range)
  if (has_admin_relocate_range()) {
    clear_has_value();
      ::cockroach::roachpb::AdminRelocateRangeResponse* temp = value_.admin_relocate_range_;
    value_.admin_relocate_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminRelocateRangeResponse& ResponseUnion::admin_relocate_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.admin_relocate_range)
  return has_admin_relocate_range()
      ? *value_.admin_relocate_range_
      : *reinterpret_cast< ::cockroach::roachpb::AdminRelocateRangeResponse*>(&::cockroach::roachpb::_AdminRelocateRangeResponse_default_instance_);
}
inline ::cockroach::roachpb::AdminRelocateRangeResponse* ResponseUnion::mutable_admin_relocate_range() {
  if (!has_admin_relocate_range()) {
    clear_value();
    set_has_admin_relocate_range();
    value_.admin_relocate_range_ = CreateMaybeMessage< ::cockroach::roachpb::AdminRelocateRangeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.admin_relocate_range)
  return value_.admin_relocate_range_;
}

// .cockroach.roachpb.HeartbeatTxnResponse heartbeat_txn = 12;
inline bool ResponseUnion::has_heartbeat_txn() const {
  return value_case() == kHeartbeatTxn;
}
inline void ResponseUnion::set_has_heartbeat_txn() {
  _oneof_case_[0] = kHeartbeatTxn;
}
inline void ResponseUnion::clear_heartbeat_txn() {
  if (has_heartbeat_txn()) {
    delete value_.heartbeat_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::HeartbeatTxnResponse& ResponseUnion::_internal_heartbeat_txn() const {
  return *value_.heartbeat_txn_;
}
inline ::cockroach::roachpb::HeartbeatTxnResponse* ResponseUnion::release_heartbeat_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.heartbeat_txn)
  if (has_heartbeat_txn()) {
    clear_has_value();
      ::cockroach::roachpb::HeartbeatTxnResponse* temp = value_.heartbeat_txn_;
    value_.heartbeat_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::HeartbeatTxnResponse& ResponseUnion::heartbeat_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.heartbeat_txn)
  return has_heartbeat_txn()
      ? *value_.heartbeat_txn_
      : *reinterpret_cast< ::cockroach::roachpb::HeartbeatTxnResponse*>(&::cockroach::roachpb::_HeartbeatTxnResponse_default_instance_);
}
inline ::cockroach::roachpb::HeartbeatTxnResponse* ResponseUnion::mutable_heartbeat_txn() {
  if (!has_heartbeat_txn()) {
    clear_value();
    set_has_heartbeat_txn();
    value_.heartbeat_txn_ = CreateMaybeMessage< ::cockroach::roachpb::HeartbeatTxnResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.heartbeat_txn)
  return value_.heartbeat_txn_;
}

// .cockroach.roachpb.GCResponse gc = 13;
inline bool ResponseUnion::has_gc() const {
  return value_case() == kGc;
}
inline void ResponseUnion::set_has_gc() {
  _oneof_case_[0] = kGc;
}
inline void ResponseUnion::clear_gc() {
  if (has_gc()) {
    delete value_.gc_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::GCResponse& ResponseUnion::_internal_gc() const {
  return *value_.gc_;
}
inline ::cockroach::roachpb::GCResponse* ResponseUnion::release_gc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.gc)
  if (has_gc()) {
    clear_has_value();
      ::cockroach::roachpb::GCResponse* temp = value_.gc_;
    value_.gc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::GCResponse& ResponseUnion::gc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.gc)
  return has_gc()
      ? *value_.gc_
      : *reinterpret_cast< ::cockroach::roachpb::GCResponse*>(&::cockroach::roachpb::_GCResponse_default_instance_);
}
inline ::cockroach::roachpb::GCResponse* ResponseUnion::mutable_gc() {
  if (!has_gc()) {
    clear_value();
    set_has_gc();
    value_.gc_ = CreateMaybeMessage< ::cockroach::roachpb::GCResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.gc)
  return value_.gc_;
}

// .cockroach.roachpb.PushTxnResponse push_txn = 14;
inline bool ResponseUnion::has_push_txn() const {
  return value_case() == kPushTxn;
}
inline void ResponseUnion::set_has_push_txn() {
  _oneof_case_[0] = kPushTxn;
}
inline void ResponseUnion::clear_push_txn() {
  if (has_push_txn()) {
    delete value_.push_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::PushTxnResponse& ResponseUnion::_internal_push_txn() const {
  return *value_.push_txn_;
}
inline ::cockroach::roachpb::PushTxnResponse* ResponseUnion::release_push_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.push_txn)
  if (has_push_txn()) {
    clear_has_value();
      ::cockroach::roachpb::PushTxnResponse* temp = value_.push_txn_;
    value_.push_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::PushTxnResponse& ResponseUnion::push_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.push_txn)
  return has_push_txn()
      ? *value_.push_txn_
      : *reinterpret_cast< ::cockroach::roachpb::PushTxnResponse*>(&::cockroach::roachpb::_PushTxnResponse_default_instance_);
}
inline ::cockroach::roachpb::PushTxnResponse* ResponseUnion::mutable_push_txn() {
  if (!has_push_txn()) {
    clear_value();
    set_has_push_txn();
    value_.push_txn_ = CreateMaybeMessage< ::cockroach::roachpb::PushTxnResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.push_txn)
  return value_.push_txn_;
}

// .cockroach.roachpb.RecoverTxnResponse recover_txn = 46;
inline bool ResponseUnion::has_recover_txn() const {
  return value_case() == kRecoverTxn;
}
inline void ResponseUnion::set_has_recover_txn() {
  _oneof_case_[0] = kRecoverTxn;
}
inline void ResponseUnion::clear_recover_txn() {
  if (has_recover_txn()) {
    delete value_.recover_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RecoverTxnResponse& ResponseUnion::_internal_recover_txn() const {
  return *value_.recover_txn_;
}
inline ::cockroach::roachpb::RecoverTxnResponse* ResponseUnion::release_recover_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.recover_txn)
  if (has_recover_txn()) {
    clear_has_value();
      ::cockroach::roachpb::RecoverTxnResponse* temp = value_.recover_txn_;
    value_.recover_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RecoverTxnResponse& ResponseUnion::recover_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.recover_txn)
  return has_recover_txn()
      ? *value_.recover_txn_
      : *reinterpret_cast< ::cockroach::roachpb::RecoverTxnResponse*>(&::cockroach::roachpb::_RecoverTxnResponse_default_instance_);
}
inline ::cockroach::roachpb::RecoverTxnResponse* ResponseUnion::mutable_recover_txn() {
  if (!has_recover_txn()) {
    clear_value();
    set_has_recover_txn();
    value_.recover_txn_ = CreateMaybeMessage< ::cockroach::roachpb::RecoverTxnResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.recover_txn)
  return value_.recover_txn_;
}

// .cockroach.roachpb.ResolveIntentResponse resolve_intent = 16;
inline bool ResponseUnion::has_resolve_intent() const {
  return value_case() == kResolveIntent;
}
inline void ResponseUnion::set_has_resolve_intent() {
  _oneof_case_[0] = kResolveIntent;
}
inline void ResponseUnion::clear_resolve_intent() {
  if (has_resolve_intent()) {
    delete value_.resolve_intent_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ResolveIntentResponse& ResponseUnion::_internal_resolve_intent() const {
  return *value_.resolve_intent_;
}
inline ::cockroach::roachpb::ResolveIntentResponse* ResponseUnion::release_resolve_intent() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.resolve_intent)
  if (has_resolve_intent()) {
    clear_has_value();
      ::cockroach::roachpb::ResolveIntentResponse* temp = value_.resolve_intent_;
    value_.resolve_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ResolveIntentResponse& ResponseUnion::resolve_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.resolve_intent)
  return has_resolve_intent()
      ? *value_.resolve_intent_
      : *reinterpret_cast< ::cockroach::roachpb::ResolveIntentResponse*>(&::cockroach::roachpb::_ResolveIntentResponse_default_instance_);
}
inline ::cockroach::roachpb::ResolveIntentResponse* ResponseUnion::mutable_resolve_intent() {
  if (!has_resolve_intent()) {
    clear_value();
    set_has_resolve_intent();
    value_.resolve_intent_ = CreateMaybeMessage< ::cockroach::roachpb::ResolveIntentResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.resolve_intent)
  return value_.resolve_intent_;
}

// .cockroach.roachpb.ResolveIntentRangeResponse resolve_intent_range = 17;
inline bool ResponseUnion::has_resolve_intent_range() const {
  return value_case() == kResolveIntentRange;
}
inline void ResponseUnion::set_has_resolve_intent_range() {
  _oneof_case_[0] = kResolveIntentRange;
}
inline void ResponseUnion::clear_resolve_intent_range() {
  if (has_resolve_intent_range()) {
    delete value_.resolve_intent_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ResolveIntentRangeResponse& ResponseUnion::_internal_resolve_intent_range() const {
  return *value_.resolve_intent_range_;
}
inline ::cockroach::roachpb::ResolveIntentRangeResponse* ResponseUnion::release_resolve_intent_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.resolve_intent_range)
  if (has_resolve_intent_range()) {
    clear_has_value();
      ::cockroach::roachpb::ResolveIntentRangeResponse* temp = value_.resolve_intent_range_;
    value_.resolve_intent_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ResolveIntentRangeResponse& ResponseUnion::resolve_intent_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.resolve_intent_range)
  return has_resolve_intent_range()
      ? *value_.resolve_intent_range_
      : *reinterpret_cast< ::cockroach::roachpb::ResolveIntentRangeResponse*>(&::cockroach::roachpb::_ResolveIntentRangeResponse_default_instance_);
}
inline ::cockroach::roachpb::ResolveIntentRangeResponse* ResponseUnion::mutable_resolve_intent_range() {
  if (!has_resolve_intent_range()) {
    clear_value();
    set_has_resolve_intent_range();
    value_.resolve_intent_range_ = CreateMaybeMessage< ::cockroach::roachpb::ResolveIntentRangeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.resolve_intent_range)
  return value_.resolve_intent_range_;
}

// .cockroach.roachpb.MergeResponse merge = 18;
inline bool ResponseUnion::has_merge() const {
  return value_case() == kMerge;
}
inline void ResponseUnion::set_has_merge() {
  _oneof_case_[0] = kMerge;
}
inline void ResponseUnion::clear_merge() {
  if (has_merge()) {
    delete value_.merge_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::MergeResponse& ResponseUnion::_internal_merge() const {
  return *value_.merge_;
}
inline ::cockroach::roachpb::MergeResponse* ResponseUnion::release_merge() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.merge)
  if (has_merge()) {
    clear_has_value();
      ::cockroach::roachpb::MergeResponse* temp = value_.merge_;
    value_.merge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::MergeResponse& ResponseUnion::merge() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.merge)
  return has_merge()
      ? *value_.merge_
      : *reinterpret_cast< ::cockroach::roachpb::MergeResponse*>(&::cockroach::roachpb::_MergeResponse_default_instance_);
}
inline ::cockroach::roachpb::MergeResponse* ResponseUnion::mutable_merge() {
  if (!has_merge()) {
    clear_value();
    set_has_merge();
    value_.merge_ = CreateMaybeMessage< ::cockroach::roachpb::MergeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.merge)
  return value_.merge_;
}

// .cockroach.roachpb.TruncateLogResponse truncate_log = 19;
inline bool ResponseUnion::has_truncate_log() const {
  return value_case() == kTruncateLog;
}
inline void ResponseUnion::set_has_truncate_log() {
  _oneof_case_[0] = kTruncateLog;
}
inline void ResponseUnion::clear_truncate_log() {
  if (has_truncate_log()) {
    delete value_.truncate_log_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::TruncateLogResponse& ResponseUnion::_internal_truncate_log() const {
  return *value_.truncate_log_;
}
inline ::cockroach::roachpb::TruncateLogResponse* ResponseUnion::release_truncate_log() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.truncate_log)
  if (has_truncate_log()) {
    clear_has_value();
      ::cockroach::roachpb::TruncateLogResponse* temp = value_.truncate_log_;
    value_.truncate_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::TruncateLogResponse& ResponseUnion::truncate_log() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.truncate_log)
  return has_truncate_log()
      ? *value_.truncate_log_
      : *reinterpret_cast< ::cockroach::roachpb::TruncateLogResponse*>(&::cockroach::roachpb::_TruncateLogResponse_default_instance_);
}
inline ::cockroach::roachpb::TruncateLogResponse* ResponseUnion::mutable_truncate_log() {
  if (!has_truncate_log()) {
    clear_value();
    set_has_truncate_log();
    value_.truncate_log_ = CreateMaybeMessage< ::cockroach::roachpb::TruncateLogResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.truncate_log)
  return value_.truncate_log_;
}

// .cockroach.roachpb.RequestLeaseResponse request_lease = 20;
inline bool ResponseUnion::has_request_lease() const {
  return value_case() == kRequestLease;
}
inline void ResponseUnion::set_has_request_lease() {
  _oneof_case_[0] = kRequestLease;
}
inline void ResponseUnion::clear_request_lease() {
  if (has_request_lease()) {
    delete value_.request_lease_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RequestLeaseResponse& ResponseUnion::_internal_request_lease() const {
  return *value_.request_lease_;
}
inline ::cockroach::roachpb::RequestLeaseResponse* ResponseUnion::release_request_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.request_lease)
  if (has_request_lease()) {
    clear_has_value();
      ::cockroach::roachpb::RequestLeaseResponse* temp = value_.request_lease_;
    value_.request_lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RequestLeaseResponse& ResponseUnion::request_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.request_lease)
  return has_request_lease()
      ? *value_.request_lease_
      : *reinterpret_cast< ::cockroach::roachpb::RequestLeaseResponse*>(&::cockroach::roachpb::_RequestLeaseResponse_default_instance_);
}
inline ::cockroach::roachpb::RequestLeaseResponse* ResponseUnion::mutable_request_lease() {
  if (!has_request_lease()) {
    clear_value();
    set_has_request_lease();
    value_.request_lease_ = CreateMaybeMessage< ::cockroach::roachpb::RequestLeaseResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.request_lease)
  return value_.request_lease_;
}

// .cockroach.roachpb.ReverseScanResponse reverse_scan = 21;
inline bool ResponseUnion::has_reverse_scan() const {
  return value_case() == kReverseScan;
}
inline void ResponseUnion::set_has_reverse_scan() {
  _oneof_case_[0] = kReverseScan;
}
inline void ResponseUnion::clear_reverse_scan() {
  if (has_reverse_scan()) {
    delete value_.reverse_scan_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ReverseScanResponse& ResponseUnion::_internal_reverse_scan() const {
  return *value_.reverse_scan_;
}
inline ::cockroach::roachpb::ReverseScanResponse* ResponseUnion::release_reverse_scan() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.reverse_scan)
  if (has_reverse_scan()) {
    clear_has_value();
      ::cockroach::roachpb::ReverseScanResponse* temp = value_.reverse_scan_;
    value_.reverse_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ReverseScanResponse& ResponseUnion::reverse_scan() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.reverse_scan)
  return has_reverse_scan()
      ? *value_.reverse_scan_
      : *reinterpret_cast< ::cockroach::roachpb::ReverseScanResponse*>(&::cockroach::roachpb::_ReverseScanResponse_default_instance_);
}
inline ::cockroach::roachpb::ReverseScanResponse* ResponseUnion::mutable_reverse_scan() {
  if (!has_reverse_scan()) {
    clear_value();
    set_has_reverse_scan();
    value_.reverse_scan_ = CreateMaybeMessage< ::cockroach::roachpb::ReverseScanResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.reverse_scan)
  return value_.reverse_scan_;
}

// .cockroach.roachpb.ComputeChecksumResponse compute_checksum = 22;
inline bool ResponseUnion::has_compute_checksum() const {
  return value_case() == kComputeChecksum;
}
inline void ResponseUnion::set_has_compute_checksum() {
  _oneof_case_[0] = kComputeChecksum;
}
inline void ResponseUnion::clear_compute_checksum() {
  if (has_compute_checksum()) {
    delete value_.compute_checksum_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ComputeChecksumResponse& ResponseUnion::_internal_compute_checksum() const {
  return *value_.compute_checksum_;
}
inline ::cockroach::roachpb::ComputeChecksumResponse* ResponseUnion::release_compute_checksum() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.compute_checksum)
  if (has_compute_checksum()) {
    clear_has_value();
      ::cockroach::roachpb::ComputeChecksumResponse* temp = value_.compute_checksum_;
    value_.compute_checksum_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ComputeChecksumResponse& ResponseUnion::compute_checksum() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.compute_checksum)
  return has_compute_checksum()
      ? *value_.compute_checksum_
      : *reinterpret_cast< ::cockroach::roachpb::ComputeChecksumResponse*>(&::cockroach::roachpb::_ComputeChecksumResponse_default_instance_);
}
inline ::cockroach::roachpb::ComputeChecksumResponse* ResponseUnion::mutable_compute_checksum() {
  if (!has_compute_checksum()) {
    clear_value();
    set_has_compute_checksum();
    value_.compute_checksum_ = CreateMaybeMessage< ::cockroach::roachpb::ComputeChecksumResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.compute_checksum)
  return value_.compute_checksum_;
}

// .cockroach.roachpb.CheckConsistencyResponse check_consistency = 24;
inline bool ResponseUnion::has_check_consistency() const {
  return value_case() == kCheckConsistency;
}
inline void ResponseUnion::set_has_check_consistency() {
  _oneof_case_[0] = kCheckConsistency;
}
inline void ResponseUnion::clear_check_consistency() {
  if (has_check_consistency()) {
    delete value_.check_consistency_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::CheckConsistencyResponse& ResponseUnion::_internal_check_consistency() const {
  return *value_.check_consistency_;
}
inline ::cockroach::roachpb::CheckConsistencyResponse* ResponseUnion::release_check_consistency() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.check_consistency)
  if (has_check_consistency()) {
    clear_has_value();
      ::cockroach::roachpb::CheckConsistencyResponse* temp = value_.check_consistency_;
    value_.check_consistency_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::CheckConsistencyResponse& ResponseUnion::check_consistency() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.check_consistency)
  return has_check_consistency()
      ? *value_.check_consistency_
      : *reinterpret_cast< ::cockroach::roachpb::CheckConsistencyResponse*>(&::cockroach::roachpb::_CheckConsistencyResponse_default_instance_);
}
inline ::cockroach::roachpb::CheckConsistencyResponse* ResponseUnion::mutable_check_consistency() {
  if (!has_check_consistency()) {
    clear_value();
    set_has_check_consistency();
    value_.check_consistency_ = CreateMaybeMessage< ::cockroach::roachpb::CheckConsistencyResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.check_consistency)
  return value_.check_consistency_;
}

// .cockroach.roachpb.InitPutResponse init_put = 26;
inline bool ResponseUnion::has_init_put() const {
  return value_case() == kInitPut;
}
inline void ResponseUnion::set_has_init_put() {
  _oneof_case_[0] = kInitPut;
}
inline void ResponseUnion::clear_init_put() {
  if (has_init_put()) {
    delete value_.init_put_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::InitPutResponse& ResponseUnion::_internal_init_put() const {
  return *value_.init_put_;
}
inline ::cockroach::roachpb::InitPutResponse* ResponseUnion::release_init_put() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.init_put)
  if (has_init_put()) {
    clear_has_value();
      ::cockroach::roachpb::InitPutResponse* temp = value_.init_put_;
    value_.init_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::InitPutResponse& ResponseUnion::init_put() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.init_put)
  return has_init_put()
      ? *value_.init_put_
      : *reinterpret_cast< ::cockroach::roachpb::InitPutResponse*>(&::cockroach::roachpb::_InitPutResponse_default_instance_);
}
inline ::cockroach::roachpb::InitPutResponse* ResponseUnion::mutable_init_put() {
  if (!has_init_put()) {
    clear_value();
    set_has_init_put();
    value_.init_put_ = CreateMaybeMessage< ::cockroach::roachpb::InitPutResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.init_put)
  return value_.init_put_;
}

// .cockroach.roachpb.LeaseInfoResponse lease_info = 30;
inline bool ResponseUnion::has_lease_info() const {
  return value_case() == kLeaseInfo;
}
inline void ResponseUnion::set_has_lease_info() {
  _oneof_case_[0] = kLeaseInfo;
}
inline void ResponseUnion::clear_lease_info() {
  if (has_lease_info()) {
    delete value_.lease_info_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::LeaseInfoResponse& ResponseUnion::_internal_lease_info() const {
  return *value_.lease_info_;
}
inline ::cockroach::roachpb::LeaseInfoResponse* ResponseUnion::release_lease_info() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.lease_info)
  if (has_lease_info()) {
    clear_has_value();
      ::cockroach::roachpb::LeaseInfoResponse* temp = value_.lease_info_;
    value_.lease_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::LeaseInfoResponse& ResponseUnion::lease_info() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.lease_info)
  return has_lease_info()
      ? *value_.lease_info_
      : *reinterpret_cast< ::cockroach::roachpb::LeaseInfoResponse*>(&::cockroach::roachpb::_LeaseInfoResponse_default_instance_);
}
inline ::cockroach::roachpb::LeaseInfoResponse* ResponseUnion::mutable_lease_info() {
  if (!has_lease_info()) {
    clear_value();
    set_has_lease_info();
    value_.lease_info_ = CreateMaybeMessage< ::cockroach::roachpb::LeaseInfoResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.lease_info)
  return value_.lease_info_;
}

// .cockroach.roachpb.WriteBatchResponse write_batch = 31;
inline bool ResponseUnion::has_write_batch() const {
  return value_case() == kWriteBatch;
}
inline void ResponseUnion::set_has_write_batch() {
  _oneof_case_[0] = kWriteBatch;
}
inline void ResponseUnion::clear_write_batch() {
  if (has_write_batch()) {
    delete value_.write_batch_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::WriteBatchResponse& ResponseUnion::_internal_write_batch() const {
  return *value_.write_batch_;
}
inline ::cockroach::roachpb::WriteBatchResponse* ResponseUnion::release_write_batch() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.write_batch)
  if (has_write_batch()) {
    clear_has_value();
      ::cockroach::roachpb::WriteBatchResponse* temp = value_.write_batch_;
    value_.write_batch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::WriteBatchResponse& ResponseUnion::write_batch() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.write_batch)
  return has_write_batch()
      ? *value_.write_batch_
      : *reinterpret_cast< ::cockroach::roachpb::WriteBatchResponse*>(&::cockroach::roachpb::_WriteBatchResponse_default_instance_);
}
inline ::cockroach::roachpb::WriteBatchResponse* ResponseUnion::mutable_write_batch() {
  if (!has_write_batch()) {
    clear_value();
    set_has_write_batch();
    value_.write_batch_ = CreateMaybeMessage< ::cockroach::roachpb::WriteBatchResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.write_batch)
  return value_.write_batch_;
}

// .cockroach.roachpb.ExportResponse export = 32;
inline bool ResponseUnion::has_export_() const {
  return value_case() == kExport;
}
inline void ResponseUnion::set_has_export_() {
  _oneof_case_[0] = kExport;
}
inline void ResponseUnion::clear_export_() {
  if (has_export_()) {
    delete value_.export__;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ExportResponse& ResponseUnion::_internal_export_() const {
  return *value_.export__;
}
inline ::cockroach::roachpb::ExportResponse* ResponseUnion::release_export_() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.export)
  if (has_export_()) {
    clear_has_value();
      ::cockroach::roachpb::ExportResponse* temp = value_.export__;
    value_.export__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ExportResponse& ResponseUnion::export_() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.export)
  return has_export_()
      ? *value_.export__
      : *reinterpret_cast< ::cockroach::roachpb::ExportResponse*>(&::cockroach::roachpb::_ExportResponse_default_instance_);
}
inline ::cockroach::roachpb::ExportResponse* ResponseUnion::mutable_export_() {
  if (!has_export_()) {
    clear_value();
    set_has_export_();
    value_.export__ = CreateMaybeMessage< ::cockroach::roachpb::ExportResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.export)
  return value_.export__;
}

// .cockroach.roachpb.ImportResponse import = 34;
inline bool ResponseUnion::has_import() const {
  return value_case() == kImport;
}
inline void ResponseUnion::set_has_import() {
  _oneof_case_[0] = kImport;
}
inline void ResponseUnion::clear_import() {
  if (has_import()) {
    delete value_.import_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::ImportResponse& ResponseUnion::_internal_import() const {
  return *value_.import_;
}
inline ::cockroach::roachpb::ImportResponse* ResponseUnion::release_import() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.import)
  if (has_import()) {
    clear_has_value();
      ::cockroach::roachpb::ImportResponse* temp = value_.import_;
    value_.import_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::ImportResponse& ResponseUnion::import() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.import)
  return has_import()
      ? *value_.import_
      : *reinterpret_cast< ::cockroach::roachpb::ImportResponse*>(&::cockroach::roachpb::_ImportResponse_default_instance_);
}
inline ::cockroach::roachpb::ImportResponse* ResponseUnion::mutable_import() {
  if (!has_import()) {
    clear_value();
    set_has_import();
    value_.import_ = CreateMaybeMessage< ::cockroach::roachpb::ImportResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.import)
  return value_.import_;
}

// .cockroach.roachpb.QueryTxnResponse query_txn = 33;
inline bool ResponseUnion::has_query_txn() const {
  return value_case() == kQueryTxn;
}
inline void ResponseUnion::set_has_query_txn() {
  _oneof_case_[0] = kQueryTxn;
}
inline void ResponseUnion::clear_query_txn() {
  if (has_query_txn()) {
    delete value_.query_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::QueryTxnResponse& ResponseUnion::_internal_query_txn() const {
  return *value_.query_txn_;
}
inline ::cockroach::roachpb::QueryTxnResponse* ResponseUnion::release_query_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.query_txn)
  if (has_query_txn()) {
    clear_has_value();
      ::cockroach::roachpb::QueryTxnResponse* temp = value_.query_txn_;
    value_.query_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::QueryTxnResponse& ResponseUnion::query_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.query_txn)
  return has_query_txn()
      ? *value_.query_txn_
      : *reinterpret_cast< ::cockroach::roachpb::QueryTxnResponse*>(&::cockroach::roachpb::_QueryTxnResponse_default_instance_);
}
inline ::cockroach::roachpb::QueryTxnResponse* ResponseUnion::mutable_query_txn() {
  if (!has_query_txn()) {
    clear_value();
    set_has_query_txn();
    value_.query_txn_ = CreateMaybeMessage< ::cockroach::roachpb::QueryTxnResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.query_txn)
  return value_.query_txn_;
}

// .cockroach.roachpb.QueryIntentResponse query_intent = 42;
inline bool ResponseUnion::has_query_intent() const {
  return value_case() == kQueryIntent;
}
inline void ResponseUnion::set_has_query_intent() {
  _oneof_case_[0] = kQueryIntent;
}
inline void ResponseUnion::clear_query_intent() {
  if (has_query_intent()) {
    delete value_.query_intent_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::QueryIntentResponse& ResponseUnion::_internal_query_intent() const {
  return *value_.query_intent_;
}
inline ::cockroach::roachpb::QueryIntentResponse* ResponseUnion::release_query_intent() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.query_intent)
  if (has_query_intent()) {
    clear_has_value();
      ::cockroach::roachpb::QueryIntentResponse* temp = value_.query_intent_;
    value_.query_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::QueryIntentResponse& ResponseUnion::query_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.query_intent)
  return has_query_intent()
      ? *value_.query_intent_
      : *reinterpret_cast< ::cockroach::roachpb::QueryIntentResponse*>(&::cockroach::roachpb::_QueryIntentResponse_default_instance_);
}
inline ::cockroach::roachpb::QueryIntentResponse* ResponseUnion::mutable_query_intent() {
  if (!has_query_intent()) {
    clear_value();
    set_has_query_intent();
    value_.query_intent_ = CreateMaybeMessage< ::cockroach::roachpb::QueryIntentResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.query_intent)
  return value_.query_intent_;
}

// .cockroach.roachpb.AdminScatterResponse admin_scatter = 36;
inline bool ResponseUnion::has_admin_scatter() const {
  return value_case() == kAdminScatter;
}
inline void ResponseUnion::set_has_admin_scatter() {
  _oneof_case_[0] = kAdminScatter;
}
inline void ResponseUnion::clear_admin_scatter() {
  if (has_admin_scatter()) {
    delete value_.admin_scatter_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AdminScatterResponse& ResponseUnion::_internal_admin_scatter() const {
  return *value_.admin_scatter_;
}
inline ::cockroach::roachpb::AdminScatterResponse* ResponseUnion::release_admin_scatter() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.admin_scatter)
  if (has_admin_scatter()) {
    clear_has_value();
      ::cockroach::roachpb::AdminScatterResponse* temp = value_.admin_scatter_;
    value_.admin_scatter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AdminScatterResponse& ResponseUnion::admin_scatter() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.admin_scatter)
  return has_admin_scatter()
      ? *value_.admin_scatter_
      : *reinterpret_cast< ::cockroach::roachpb::AdminScatterResponse*>(&::cockroach::roachpb::_AdminScatterResponse_default_instance_);
}
inline ::cockroach::roachpb::AdminScatterResponse* ResponseUnion::mutable_admin_scatter() {
  if (!has_admin_scatter()) {
    clear_value();
    set_has_admin_scatter();
    value_.admin_scatter_ = CreateMaybeMessage< ::cockroach::roachpb::AdminScatterResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.admin_scatter)
  return value_.admin_scatter_;
}

// .cockroach.roachpb.AddSSTableResponse add_sstable = 37;
inline bool ResponseUnion::has_add_sstable() const {
  return value_case() == kAddSstable;
}
inline void ResponseUnion::set_has_add_sstable() {
  _oneof_case_[0] = kAddSstable;
}
inline void ResponseUnion::clear_add_sstable() {
  if (has_add_sstable()) {
    delete value_.add_sstable_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::AddSSTableResponse& ResponseUnion::_internal_add_sstable() const {
  return *value_.add_sstable_;
}
inline ::cockroach::roachpb::AddSSTableResponse* ResponseUnion::release_add_sstable() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.add_sstable)
  if (has_add_sstable()) {
    clear_has_value();
      ::cockroach::roachpb::AddSSTableResponse* temp = value_.add_sstable_;
    value_.add_sstable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::AddSSTableResponse& ResponseUnion::add_sstable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.add_sstable)
  return has_add_sstable()
      ? *value_.add_sstable_
      : *reinterpret_cast< ::cockroach::roachpb::AddSSTableResponse*>(&::cockroach::roachpb::_AddSSTableResponse_default_instance_);
}
inline ::cockroach::roachpb::AddSSTableResponse* ResponseUnion::mutable_add_sstable() {
  if (!has_add_sstable()) {
    clear_value();
    set_has_add_sstable();
    value_.add_sstable_ = CreateMaybeMessage< ::cockroach::roachpb::AddSSTableResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.add_sstable)
  return value_.add_sstable_;
}

// .cockroach.roachpb.RecomputeStatsResponse recompute_stats = 39;
inline bool ResponseUnion::has_recompute_stats() const {
  return value_case() == kRecomputeStats;
}
inline void ResponseUnion::set_has_recompute_stats() {
  _oneof_case_[0] = kRecomputeStats;
}
inline void ResponseUnion::clear_recompute_stats() {
  if (has_recompute_stats()) {
    delete value_.recompute_stats_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RecomputeStatsResponse& ResponseUnion::_internal_recompute_stats() const {
  return *value_.recompute_stats_;
}
inline ::cockroach::roachpb::RecomputeStatsResponse* ResponseUnion::release_recompute_stats() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.recompute_stats)
  if (has_recompute_stats()) {
    clear_has_value();
      ::cockroach::roachpb::RecomputeStatsResponse* temp = value_.recompute_stats_;
    value_.recompute_stats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RecomputeStatsResponse& ResponseUnion::recompute_stats() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.recompute_stats)
  return has_recompute_stats()
      ? *value_.recompute_stats_
      : *reinterpret_cast< ::cockroach::roachpb::RecomputeStatsResponse*>(&::cockroach::roachpb::_RecomputeStatsResponse_default_instance_);
}
inline ::cockroach::roachpb::RecomputeStatsResponse* ResponseUnion::mutable_recompute_stats() {
  if (!has_recompute_stats()) {
    clear_value();
    set_has_recompute_stats();
    value_.recompute_stats_ = CreateMaybeMessage< ::cockroach::roachpb::RecomputeStatsResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.recompute_stats)
  return value_.recompute_stats_;
}

// .cockroach.roachpb.RefreshResponse refresh = 40;
inline bool ResponseUnion::has_refresh() const {
  return value_case() == kRefresh;
}
inline void ResponseUnion::set_has_refresh() {
  _oneof_case_[0] = kRefresh;
}
inline void ResponseUnion::clear_refresh() {
  if (has_refresh()) {
    delete value_.refresh_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RefreshResponse& ResponseUnion::_internal_refresh() const {
  return *value_.refresh_;
}
inline ::cockroach::roachpb::RefreshResponse* ResponseUnion::release_refresh() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.refresh)
  if (has_refresh()) {
    clear_has_value();
      ::cockroach::roachpb::RefreshResponse* temp = value_.refresh_;
    value_.refresh_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RefreshResponse& ResponseUnion::refresh() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.refresh)
  return has_refresh()
      ? *value_.refresh_
      : *reinterpret_cast< ::cockroach::roachpb::RefreshResponse*>(&::cockroach::roachpb::_RefreshResponse_default_instance_);
}
inline ::cockroach::roachpb::RefreshResponse* ResponseUnion::mutable_refresh() {
  if (!has_refresh()) {
    clear_value();
    set_has_refresh();
    value_.refresh_ = CreateMaybeMessage< ::cockroach::roachpb::RefreshResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.refresh)
  return value_.refresh_;
}

// .cockroach.roachpb.RefreshRangeResponse refresh_range = 41;
inline bool ResponseUnion::has_refresh_range() const {
  return value_case() == kRefreshRange;
}
inline void ResponseUnion::set_has_refresh_range() {
  _oneof_case_[0] = kRefreshRange;
}
inline void ResponseUnion::clear_refresh_range() {
  if (has_refresh_range()) {
    delete value_.refresh_range_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RefreshRangeResponse& ResponseUnion::_internal_refresh_range() const {
  return *value_.refresh_range_;
}
inline ::cockroach::roachpb::RefreshRangeResponse* ResponseUnion::release_refresh_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.refresh_range)
  if (has_refresh_range()) {
    clear_has_value();
      ::cockroach::roachpb::RefreshRangeResponse* temp = value_.refresh_range_;
    value_.refresh_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RefreshRangeResponse& ResponseUnion::refresh_range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.refresh_range)
  return has_refresh_range()
      ? *value_.refresh_range_
      : *reinterpret_cast< ::cockroach::roachpb::RefreshRangeResponse*>(&::cockroach::roachpb::_RefreshRangeResponse_default_instance_);
}
inline ::cockroach::roachpb::RefreshRangeResponse* ResponseUnion::mutable_refresh_range() {
  if (!has_refresh_range()) {
    clear_value();
    set_has_refresh_range();
    value_.refresh_range_ = CreateMaybeMessage< ::cockroach::roachpb::RefreshRangeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.refresh_range)
  return value_.refresh_range_;
}

// .cockroach.roachpb.SubsumeResponse subsume = 43;
inline bool ResponseUnion::has_subsume() const {
  return value_case() == kSubsume;
}
inline void ResponseUnion::set_has_subsume() {
  _oneof_case_[0] = kSubsume;
}
inline void ResponseUnion::clear_subsume() {
  if (has_subsume()) {
    delete value_.subsume_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::SubsumeResponse& ResponseUnion::_internal_subsume() const {
  return *value_.subsume_;
}
inline ::cockroach::roachpb::SubsumeResponse* ResponseUnion::release_subsume() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.subsume)
  if (has_subsume()) {
    clear_has_value();
      ::cockroach::roachpb::SubsumeResponse* temp = value_.subsume_;
    value_.subsume_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::SubsumeResponse& ResponseUnion::subsume() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.subsume)
  return has_subsume()
      ? *value_.subsume_
      : *reinterpret_cast< ::cockroach::roachpb::SubsumeResponse*>(&::cockroach::roachpb::_SubsumeResponse_default_instance_);
}
inline ::cockroach::roachpb::SubsumeResponse* ResponseUnion::mutable_subsume() {
  if (!has_subsume()) {
    clear_value();
    set_has_subsume();
    value_.subsume_ = CreateMaybeMessage< ::cockroach::roachpb::SubsumeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.subsume)
  return value_.subsume_;
}

// .cockroach.roachpb.RangeStatsResponse range_stats = 44;
inline bool ResponseUnion::has_range_stats() const {
  return value_case() == kRangeStats;
}
inline void ResponseUnion::set_has_range_stats() {
  _oneof_case_[0] = kRangeStats;
}
inline void ResponseUnion::clear_range_stats() {
  if (has_range_stats()) {
    delete value_.range_stats_;
    clear_has_value();
  }
}
inline const ::cockroach::roachpb::RangeStatsResponse& ResponseUnion::_internal_range_stats() const {
  return *value_.range_stats_;
}
inline ::cockroach::roachpb::RangeStatsResponse* ResponseUnion::release_range_stats() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ResponseUnion.range_stats)
  if (has_range_stats()) {
    clear_has_value();
      ::cockroach::roachpb::RangeStatsResponse* temp = value_.range_stats_;
    value_.range_stats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cockroach::roachpb::RangeStatsResponse& ResponseUnion::range_stats() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ResponseUnion.range_stats)
  return has_range_stats()
      ? *value_.range_stats_
      : *reinterpret_cast< ::cockroach::roachpb::RangeStatsResponse*>(&::cockroach::roachpb::_RangeStatsResponse_default_instance_);
}
inline ::cockroach::roachpb::RangeStatsResponse* ResponseUnion::mutable_range_stats() {
  if (!has_range_stats()) {
    clear_value();
    set_has_range_stats();
    value_.range_stats_ = CreateMaybeMessage< ::cockroach::roachpb::RangeStatsResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ResponseUnion.range_stats)
  return value_.range_stats_;
}

inline bool ResponseUnion::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ResponseUnion::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ResponseUnion::ValueCase ResponseUnion::value_case() const {
  return ResponseUnion::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Header

inline bool Header::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& Header::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& Header::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* Header::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Header.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* Header::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Header.timestamp)
  return timestamp_;
}
inline void Header::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Header.timestamp)
}

inline bool Header::has_replica() const {
  return this != internal_default_instance() && replica_ != NULL;
}
inline const ::cockroach::roachpb::ReplicaDescriptor& Header::_internal_replica() const {
  return *replica_;
}
inline const ::cockroach::roachpb::ReplicaDescriptor& Header::replica() const {
  const ::cockroach::roachpb::ReplicaDescriptor* p = replica_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReplicaDescriptor*>(
      &::cockroach::roachpb::_ReplicaDescriptor_default_instance_);
}
inline ::cockroach::roachpb::ReplicaDescriptor* Header::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Header.replica)
  
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ReplicaDescriptor* Header::mutable_replica() {
  
  if (replica_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ReplicaDescriptor>(GetArenaNoVirtual());
    replica_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Header.replica)
  return replica_;
}
inline void Header::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(replica_);
  }
  if (replica) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replica = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replica, submessage_arena);
    }
    
  } else {
    
  }
  replica_ = replica;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Header.replica)
}

inline void Header::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.range_id)
  return range_id_;
}
inline void Header::set_range_id(::google::protobuf::int64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.range_id)
}

inline void Header::clear_user_priority() {
  user_priority_ = 0;
}
inline double Header::user_priority() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.user_priority)
  return user_priority_;
}
inline void Header::set_user_priority(double value) {
  
  user_priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.user_priority)
}

// .cockroach.roachpb.Transaction txn = 5;
inline bool Header::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::cockroach::roachpb::Transaction& Header::_internal_txn() const {
  return *txn_;
}
inline const ::cockroach::roachpb::Transaction& Header::txn() const {
  const ::cockroach::roachpb::Transaction* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* Header::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Header.txn)
  
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Transaction* Header::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Transaction>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Header.txn)
  return txn_;
}
inline void Header::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Header.txn)
}

// .cockroach.roachpb.ReadConsistencyType read_consistency = 6;
inline void Header::clear_read_consistency() {
  read_consistency_ = 0;
}
inline ::cockroach::roachpb::ReadConsistencyType Header::read_consistency() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.read_consistency)
  return static_cast< ::cockroach::roachpb::ReadConsistencyType >(read_consistency_);
}
inline void Header::set_read_consistency(::cockroach::roachpb::ReadConsistencyType value) {
  
  read_consistency_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.read_consistency)
}

// int64 max_span_request_keys = 8;
inline void Header::clear_max_span_request_keys() {
  max_span_request_keys_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::max_span_request_keys() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.max_span_request_keys)
  return max_span_request_keys_;
}
inline void Header::set_max_span_request_keys(::google::protobuf::int64 value) {
  
  max_span_request_keys_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.max_span_request_keys)
}

// bool distinct_spans = 9;
inline void Header::clear_distinct_spans() {
  distinct_spans_ = false;
}
inline bool Header::distinct_spans() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.distinct_spans)
  return distinct_spans_;
}
inline void Header::set_distinct_spans(bool value) {
  
  distinct_spans_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.distinct_spans)
}

// bool return_range_info = 10;
inline void Header::clear_return_range_info() {
  return_range_info_ = false;
}
inline bool Header::return_range_info() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.return_range_info)
  return return_range_info_;
}
inline void Header::set_return_range_info(bool value) {
  
  return_range_info_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.return_range_info)
}

inline void Header::clear_gateway_node_id() {
  gateway_node_id_ = 0;
}
inline ::google::protobuf::int32 Header::gateway_node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.gateway_node_id)
  return gateway_node_id_;
}
inline void Header::set_gateway_node_id(::google::protobuf::int32 value) {
  
  gateway_node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.gateway_node_id)
}

// .cockroach.roachpb.ScanOptions scan_options = 12;
inline bool Header::has_scan_options() const {
  return this != internal_default_instance() && scan_options_ != NULL;
}
inline void Header::clear_scan_options() {
  if (GetArenaNoVirtual() == NULL && scan_options_ != NULL) {
    delete scan_options_;
  }
  scan_options_ = NULL;
}
inline const ::cockroach::roachpb::ScanOptions& Header::_internal_scan_options() const {
  return *scan_options_;
}
inline const ::cockroach::roachpb::ScanOptions& Header::scan_options() const {
  const ::cockroach::roachpb::ScanOptions* p = scan_options_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.scan_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ScanOptions*>(
      &::cockroach::roachpb::_ScanOptions_default_instance_);
}
inline ::cockroach::roachpb::ScanOptions* Header::release_scan_options() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Header.scan_options)
  
  ::cockroach::roachpb::ScanOptions* temp = scan_options_;
  scan_options_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::ScanOptions* Header::mutable_scan_options() {
  
  if (scan_options_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::ScanOptions>(GetArenaNoVirtual());
    scan_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Header.scan_options)
  return scan_options_;
}
inline void Header::set_allocated_scan_options(::cockroach::roachpb::ScanOptions* scan_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scan_options_;
  }
  if (scan_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scan_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scan_options, submessage_arena);
    }
    
  } else {
    
  }
  scan_options_ = scan_options;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Header.scan_options)
}

// bool async_consensus = 13;
inline void Header::clear_async_consensus() {
  async_consensus_ = false;
}
inline bool Header::async_consensus() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.async_consensus)
  return async_consensus_;
}
inline void Header::set_async_consensus(bool value) {
  
  async_consensus_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.async_consensus)
}

// bool defer_write_too_old_error = 14;
inline void Header::clear_defer_write_too_old_error() {
  defer_write_too_old_error_ = false;
}
inline bool Header::defer_write_too_old_error() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Header.defer_write_too_old_error)
  return defer_write_too_old_error_;
}
inline void Header::set_defer_write_too_old_error(bool value) {
  
  defer_write_too_old_error_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Header.defer_write_too_old_error)
}

// -------------------------------------------------------------------

// BatchRequest

inline bool BatchRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void BatchRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::Header& BatchRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::Header& BatchRequest::header() const {
  const ::cockroach::roachpb::Header* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Header*>(
      &::cockroach::roachpb::_Header_default_instance_);
}
inline ::cockroach::roachpb::Header* BatchRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.BatchRequest.header)
  
  ::cockroach::roachpb::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Header* BatchRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchRequest.header)
  return header_;
}
inline void BatchRequest::set_allocated_header(::cockroach::roachpb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.BatchRequest.header)
}

inline int BatchRequest::requests_size() const {
  return requests_.size();
}
inline void BatchRequest::clear_requests() {
  requests_.Clear();
}
inline ::cockroach::roachpb::RequestUnion* BatchRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchRequest.requests)
  return requests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RequestUnion >*
BatchRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.BatchRequest.requests)
  return &requests_;
}
inline const ::cockroach::roachpb::RequestUnion& BatchRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchRequest.requests)
  return requests_.Get(index);
}
inline ::cockroach::roachpb::RequestUnion* BatchRequest::add_requests() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.BatchRequest.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::RequestUnion >&
BatchRequest::requests() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.BatchRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// BatchResponse_Header

// .cockroach.roachpb.Error error = 1;
inline bool BatchResponse_Header::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::cockroach::roachpb::Error& BatchResponse_Header::_internal_error() const {
  return *error_;
}
inline const ::cockroach::roachpb::Error& BatchResponse_Header::error() const {
  const ::cockroach::roachpb::Error* p = error_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchResponse.Header.error)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Error*>(
      &::cockroach::roachpb::_Error_default_instance_);
}
inline ::cockroach::roachpb::Error* BatchResponse_Header::release_error() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.BatchResponse.Header.error)
  
  ::cockroach::roachpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Error* BatchResponse_Header::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchResponse.Header.error)
  return error_;
}
inline void BatchResponse_Header::set_allocated_error(::cockroach::roachpb::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.BatchResponse.Header.error)
}

inline bool BatchResponse_Header::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& BatchResponse_Header::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::cockroach::util::hlc::Timestamp& BatchResponse_Header::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchResponse.Header.Timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* BatchResponse_Header::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.BatchResponse.Header.Timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* BatchResponse_Header::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchResponse.Header.Timestamp)
  return timestamp_;
}
inline void BatchResponse_Header::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.BatchResponse.Header.Timestamp)
}

// .cockroach.roachpb.Transaction txn = 3;
inline bool BatchResponse_Header::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::cockroach::roachpb::Transaction& BatchResponse_Header::_internal_txn() const {
  return *txn_;
}
inline const ::cockroach::roachpb::Transaction& BatchResponse_Header::txn() const {
  const ::cockroach::roachpb::Transaction* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchResponse.Header.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* BatchResponse_Header::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.BatchResponse.Header.txn)
  
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Transaction* BatchResponse_Header::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Transaction>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchResponse.Header.txn)
  return txn_;
}
inline void BatchResponse_Header::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.BatchResponse.Header.txn)
}

inline bool BatchResponse_Header::has_now() const {
  return this != internal_default_instance() && now_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& BatchResponse_Header::_internal_now() const {
  return *now_;
}
inline const ::cockroach::util::hlc::Timestamp& BatchResponse_Header::now() const {
  const ::cockroach::util::hlc::Timestamp* p = now_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchResponse.Header.now)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* BatchResponse_Header::release_now() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.BatchResponse.Header.now)
  
  ::cockroach::util::hlc::Timestamp* temp = now_;
  now_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* BatchResponse_Header::mutable_now() {
  
  if (now_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    now_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchResponse.Header.now)
  return now_;
}
inline void BatchResponse_Header::set_allocated_now(::cockroach::util::hlc::Timestamp* now) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(now_);
  }
  if (now) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      now = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, now, submessage_arena);
    }
    
  } else {
    
  }
  now_ = now;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.BatchResponse.Header.now)
}

inline int BatchResponse_Header::collected_spans_size() const {
  return collected_spans_.size();
}
inline ::cockroach::util::tracing::RecordedSpan* BatchResponse_Header::mutable_collected_spans(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchResponse.Header.collected_spans)
  return collected_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::util::tracing::RecordedSpan >*
BatchResponse_Header::mutable_collected_spans() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.BatchResponse.Header.collected_spans)
  return &collected_spans_;
}
inline const ::cockroach::util::tracing::RecordedSpan& BatchResponse_Header::collected_spans(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchResponse.Header.collected_spans)
  return collected_spans_.Get(index);
}
inline ::cockroach::util::tracing::RecordedSpan* BatchResponse_Header::add_collected_spans() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.BatchResponse.Header.collected_spans)
  return collected_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::util::tracing::RecordedSpan >&
BatchResponse_Header::collected_spans() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.BatchResponse.Header.collected_spans)
  return collected_spans_;
}

// -------------------------------------------------------------------

// BatchResponse

inline bool BatchResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void BatchResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::BatchResponse_Header& BatchResponse::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::BatchResponse_Header& BatchResponse::header() const {
  const ::cockroach::roachpb::BatchResponse_Header* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::BatchResponse_Header*>(
      &::cockroach::roachpb::_BatchResponse_Header_default_instance_);
}
inline ::cockroach::roachpb::BatchResponse_Header* BatchResponse::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.BatchResponse.header)
  
  ::cockroach::roachpb::BatchResponse_Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::BatchResponse_Header* BatchResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::BatchResponse_Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchResponse.header)
  return header_;
}
inline void BatchResponse::set_allocated_header(::cockroach::roachpb::BatchResponse_Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.BatchResponse.header)
}

inline int BatchResponse::responses_size() const {
  return responses_.size();
}
inline void BatchResponse::clear_responses() {
  responses_.Clear();
}
inline ::cockroach::roachpb::ResponseUnion* BatchResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.BatchResponse.responses)
  return responses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ResponseUnion >*
BatchResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.BatchResponse.responses)
  return &responses_;
}
inline const ::cockroach::roachpb::ResponseUnion& BatchResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.BatchResponse.responses)
  return responses_.Get(index);
}
inline ::cockroach::roachpb::ResponseUnion* BatchResponse::add_responses() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.BatchResponse.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ResponseUnion >&
BatchResponse::responses() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.BatchResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// RangeFeedRequest

inline bool RangeFeedRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RangeFeedRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cockroach::roachpb::Header& RangeFeedRequest::_internal_header() const {
  return *header_;
}
inline const ::cockroach::roachpb::Header& RangeFeedRequest::header() const {
  const ::cockroach::roachpb::Header* p = header_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Header*>(
      &::cockroach::roachpb::_Header_default_instance_);
}
inline ::cockroach::roachpb::Header* RangeFeedRequest::release_header() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedRequest.header)
  
  ::cockroach::roachpb::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Header* RangeFeedRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedRequest.header)
  return header_;
}
inline void RangeFeedRequest::set_allocated_header(::cockroach::roachpb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedRequest.header)
}

inline bool RangeFeedRequest::has_span() const {
  return this != internal_default_instance() && span_ != NULL;
}
inline const ::cockroach::roachpb::Span& RangeFeedRequest::_internal_span() const {
  return *span_;
}
inline const ::cockroach::roachpb::Span& RangeFeedRequest::span() const {
  const ::cockroach::roachpb::Span* p = span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedRequest.span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
inline ::cockroach::roachpb::Span* RangeFeedRequest::release_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedRequest.span)
  
  ::cockroach::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Span* RangeFeedRequest::mutable_span() {
  
  if (span_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Span>(GetArenaNoVirtual());
    span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedRequest.span)
  return span_;
}
inline void RangeFeedRequest::set_allocated_span(::cockroach::roachpb::Span* span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(span_);
  }
  if (span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedRequest.span)
}

// -------------------------------------------------------------------

// RangeFeedValue

inline void RangeFeedValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RangeFeedValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedValue.key)
  return key_.GetNoArena();
}
inline void RangeFeedValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeFeedValue.key)
}
#if LANG_CXX11
inline void RangeFeedValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RangeFeedValue.key)
}
#endif
inline void RangeFeedValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeFeedValue.key)
}
inline void RangeFeedValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeFeedValue.key)
}
inline ::std::string* RangeFeedValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeFeedValue::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeFeedValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedValue.key)
}

inline bool RangeFeedValue::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::cockroach::roachpb::Value& RangeFeedValue::_internal_value() const {
  return *value_;
}
inline const ::cockroach::roachpb::Value& RangeFeedValue::value() const {
  const ::cockroach::roachpb::Value* p = value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedValue.value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* RangeFeedValue::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedValue.value)
  
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Value* RangeFeedValue::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedValue.value)
  return value_;
}
inline void RangeFeedValue::set_allocated_value(::cockroach::roachpb::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedValue.value)
}

// -------------------------------------------------------------------

// RangeFeedCheckpoint

inline bool RangeFeedCheckpoint::has_span() const {
  return this != internal_default_instance() && span_ != NULL;
}
inline const ::cockroach::roachpb::Span& RangeFeedCheckpoint::_internal_span() const {
  return *span_;
}
inline const ::cockroach::roachpb::Span& RangeFeedCheckpoint::span() const {
  const ::cockroach::roachpb::Span* p = span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedCheckpoint.span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
inline ::cockroach::roachpb::Span* RangeFeedCheckpoint::release_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedCheckpoint.span)
  
  ::cockroach::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Span* RangeFeedCheckpoint::mutable_span() {
  
  if (span_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Span>(GetArenaNoVirtual());
    span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedCheckpoint.span)
  return span_;
}
inline void RangeFeedCheckpoint::set_allocated_span(::cockroach::roachpb::Span* span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(span_);
  }
  if (span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedCheckpoint.span)
}

inline bool RangeFeedCheckpoint::has_resolved_ts() const {
  return this != internal_default_instance() && resolved_ts_ != NULL;
}
inline const ::cockroach::util::hlc::Timestamp& RangeFeedCheckpoint::_internal_resolved_ts() const {
  return *resolved_ts_;
}
inline const ::cockroach::util::hlc::Timestamp& RangeFeedCheckpoint::resolved_ts() const {
  const ::cockroach::util::hlc::Timestamp* p = resolved_ts_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedCheckpoint.resolved_ts)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* RangeFeedCheckpoint::release_resolved_ts() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedCheckpoint.resolved_ts)
  
  ::cockroach::util::hlc::Timestamp* temp = resolved_ts_;
  resolved_ts_ = NULL;
  return temp;
}
inline ::cockroach::util::hlc::Timestamp* RangeFeedCheckpoint::mutable_resolved_ts() {
  
  if (resolved_ts_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::util::hlc::Timestamp>(GetArenaNoVirtual());
    resolved_ts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedCheckpoint.resolved_ts)
  return resolved_ts_;
}
inline void RangeFeedCheckpoint::set_allocated_resolved_ts(::cockroach::util::hlc::Timestamp* resolved_ts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resolved_ts_);
  }
  if (resolved_ts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resolved_ts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resolved_ts, submessage_arena);
    }
    
  } else {
    
  }
  resolved_ts_ = resolved_ts;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedCheckpoint.resolved_ts)
}

// -------------------------------------------------------------------

// RangeFeedError

inline bool RangeFeedError::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::cockroach::roachpb::Error& RangeFeedError::_internal_error() const {
  return *error_;
}
inline const ::cockroach::roachpb::Error& RangeFeedError::error() const {
  const ::cockroach::roachpb::Error* p = error_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedError.error)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Error*>(
      &::cockroach::roachpb::_Error_default_instance_);
}
inline ::cockroach::roachpb::Error* RangeFeedError::release_error() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedError.error)
  
  ::cockroach::roachpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::Error* RangeFeedError::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedError.error)
  return error_;
}
inline void RangeFeedError::set_allocated_error(::cockroach::roachpb::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedError.error)
}

// -------------------------------------------------------------------

// RangeFeedEvent

// .cockroach.roachpb.RangeFeedValue val = 1;
inline bool RangeFeedEvent::has_val() const {
  return this != internal_default_instance() && val_ != NULL;
}
inline void RangeFeedEvent::clear_val() {
  if (GetArenaNoVirtual() == NULL && val_ != NULL) {
    delete val_;
  }
  val_ = NULL;
}
inline const ::cockroach::roachpb::RangeFeedValue& RangeFeedEvent::_internal_val() const {
  return *val_;
}
inline const ::cockroach::roachpb::RangeFeedValue& RangeFeedEvent::val() const {
  const ::cockroach::roachpb::RangeFeedValue* p = val_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedEvent.val)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeFeedValue*>(
      &::cockroach::roachpb::_RangeFeedValue_default_instance_);
}
inline ::cockroach::roachpb::RangeFeedValue* RangeFeedEvent::release_val() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedEvent.val)
  
  ::cockroach::roachpb::RangeFeedValue* temp = val_;
  val_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RangeFeedValue* RangeFeedEvent::mutable_val() {
  
  if (val_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RangeFeedValue>(GetArenaNoVirtual());
    val_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedEvent.val)
  return val_;
}
inline void RangeFeedEvent::set_allocated_val(::cockroach::roachpb::RangeFeedValue* val) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete val_;
  }
  if (val) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      val = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, val, submessage_arena);
    }
    
  } else {
    
  }
  val_ = val;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedEvent.val)
}

// .cockroach.roachpb.RangeFeedCheckpoint checkpoint = 2;
inline bool RangeFeedEvent::has_checkpoint() const {
  return this != internal_default_instance() && checkpoint_ != NULL;
}
inline void RangeFeedEvent::clear_checkpoint() {
  if (GetArenaNoVirtual() == NULL && checkpoint_ != NULL) {
    delete checkpoint_;
  }
  checkpoint_ = NULL;
}
inline const ::cockroach::roachpb::RangeFeedCheckpoint& RangeFeedEvent::_internal_checkpoint() const {
  return *checkpoint_;
}
inline const ::cockroach::roachpb::RangeFeedCheckpoint& RangeFeedEvent::checkpoint() const {
  const ::cockroach::roachpb::RangeFeedCheckpoint* p = checkpoint_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedEvent.checkpoint)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeFeedCheckpoint*>(
      &::cockroach::roachpb::_RangeFeedCheckpoint_default_instance_);
}
inline ::cockroach::roachpb::RangeFeedCheckpoint* RangeFeedEvent::release_checkpoint() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedEvent.checkpoint)
  
  ::cockroach::roachpb::RangeFeedCheckpoint* temp = checkpoint_;
  checkpoint_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RangeFeedCheckpoint* RangeFeedEvent::mutable_checkpoint() {
  
  if (checkpoint_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RangeFeedCheckpoint>(GetArenaNoVirtual());
    checkpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedEvent.checkpoint)
  return checkpoint_;
}
inline void RangeFeedEvent::set_allocated_checkpoint(::cockroach::roachpb::RangeFeedCheckpoint* checkpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete checkpoint_;
  }
  if (checkpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      checkpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, checkpoint, submessage_arena);
    }
    
  } else {
    
  }
  checkpoint_ = checkpoint;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedEvent.checkpoint)
}

// .cockroach.roachpb.RangeFeedError error = 3;
inline bool RangeFeedEvent::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void RangeFeedEvent::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::cockroach::roachpb::RangeFeedError& RangeFeedEvent::_internal_error() const {
  return *error_;
}
inline const ::cockroach::roachpb::RangeFeedError& RangeFeedEvent::error() const {
  const ::cockroach::roachpb::RangeFeedError* p = error_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeFeedEvent.error)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeFeedError*>(
      &::cockroach::roachpb::_RangeFeedError_default_instance_);
}
inline ::cockroach::roachpb::RangeFeedError* RangeFeedEvent::release_error() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeFeedEvent.error)
  
  ::cockroach::roachpb::RangeFeedError* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::cockroach::roachpb::RangeFeedError* RangeFeedEvent::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::cockroach::roachpb::RangeFeedError>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeFeedEvent.error)
  return error_;
}
inline void RangeFeedEvent::set_allocated_error(::cockroach::roachpb::RangeFeedError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeFeedEvent.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::roachpb::ResponseHeader_ResumeReason> : ::std::true_type {};
template <> struct is_proto_enum< ::cockroach::roachpb::CheckConsistencyResponse_Status> : ::std::true_type {};
template <> struct is_proto_enum< ::cockroach::roachpb::ReadConsistencyType> : ::std::true_type {};
template <> struct is_proto_enum< ::cockroach::roachpb::ScanFormat> : ::std::true_type {};
template <> struct is_proto_enum< ::cockroach::roachpb::ChecksumMode> : ::std::true_type {};
template <> struct is_proto_enum< ::cockroach::roachpb::PushTxnType> : ::std::true_type {};
template <> struct is_proto_enum< ::cockroach::roachpb::ExternalStorageProvider> : ::std::true_type {};
template <> struct is_proto_enum< ::cockroach::roachpb::MVCCFilter> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_roachpb_2fapi_2eproto
