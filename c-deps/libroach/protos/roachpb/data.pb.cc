// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "roachpb/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {
class SpanDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Span>
     _instance;
} _Span_default_instance_;
class ValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Value>
     _instance;
} _Value_default_instance_;
class KeyValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeyValue>
     _instance;
} _KeyValue_default_instance_;
class StoreIdentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StoreIdent>
     _instance;
} _StoreIdent_default_instance_;
class SplitTriggerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SplitTrigger>
     _instance;
} _SplitTrigger_default_instance_;
class MergeTriggerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MergeTrigger>
     _instance;
} _MergeTrigger_default_instance_;
class ChangeReplicasTriggerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeReplicasTrigger>
     _instance;
} _ChangeReplicasTrigger_default_instance_;
class ModifiedSpanTriggerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ModifiedSpanTrigger>
     _instance;
} _ModifiedSpanTrigger_default_instance_;
class InternalCommitTriggerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InternalCommitTrigger>
     _instance;
} _InternalCommitTrigger_default_instance_;
class ObservedTimestampDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObservedTimestamp>
     _instance;
} _ObservedTimestamp_default_instance_;
class TransactionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transaction>
     _instance;
} _Transaction_default_instance_;
class IntentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Intent>
     _instance;
} _Intent_default_instance_;
class LeaseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Lease>
     _instance;
} _Lease_default_instance_;
class AbortSpanEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbortSpanEntry>
     _instance;
} _AbortSpanEntry_default_instance_;
class TxnCoordMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TxnCoordMeta>
     _instance;
} _TxnCoordMeta_default_instance_;

namespace protobuf_roachpb_2fdata_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cockroach::roachpb::protobuf_roachpb_2fmetadata_2eproto::InitDefaults();
  ::cockroach::storage::engine::enginepb::protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::InitDefaults();
  ::cockroach::util::hlc::protobuf_util_2fhlc_2ftimestamp_2eproto::InitDefaults();
  _Span_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Span_default_instance_);_Value_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Value_default_instance_);_KeyValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeyValue_default_instance_);_StoreIdent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StoreIdent_default_instance_);_SplitTrigger_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SplitTrigger_default_instance_);_MergeTrigger_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MergeTrigger_default_instance_);_ChangeReplicasTrigger_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeReplicasTrigger_default_instance_);_ModifiedSpanTrigger_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ModifiedSpanTrigger_default_instance_);_InternalCommitTrigger_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InternalCommitTrigger_default_instance_);_ObservedTimestamp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObservedTimestamp_default_instance_);_Transaction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transaction_default_instance_);_Intent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Intent_default_instance_);_Lease_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Lease_default_instance_);_AbortSpanEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbortSpanEntry_default_instance_);_TxnCoordMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TxnCoordMeta_default_instance_);_Value_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _KeyValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
  _SplitTrigger_default_instance_._instance.get_mutable()->left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  _SplitTrigger_default_instance_._instance.get_mutable()->right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  _MergeTrigger_default_instance_._instance.get_mutable()->left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  _MergeTrigger_default_instance_._instance.get_mutable()->right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  _ChangeReplicasTrigger_default_instance_._instance.get_mutable()->replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
  _ModifiedSpanTrigger_default_instance_._instance.get_mutable()->node_liveness_span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
  _InternalCommitTrigger_default_instance_._instance.get_mutable()->split_trigger_ = const_cast< ::cockroach::roachpb::SplitTrigger*>(
      ::cockroach::roachpb::SplitTrigger::internal_default_instance());
  _InternalCommitTrigger_default_instance_._instance.get_mutable()->merge_trigger_ = const_cast< ::cockroach::roachpb::MergeTrigger*>(
      ::cockroach::roachpb::MergeTrigger::internal_default_instance());
  _InternalCommitTrigger_default_instance_._instance.get_mutable()->change_replicas_trigger_ = const_cast< ::cockroach::roachpb::ChangeReplicasTrigger*>(
      ::cockroach::roachpb::ChangeReplicasTrigger::internal_default_instance());
  _InternalCommitTrigger_default_instance_._instance.get_mutable()->modified_span_trigger_ = const_cast< ::cockroach::roachpb::ModifiedSpanTrigger*>(
      ::cockroach::roachpb::ModifiedSpanTrigger::internal_default_instance());
  _ObservedTimestamp_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Transaction_default_instance_._instance.get_mutable()->meta_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(
      ::cockroach::storage::engine::enginepb::TxnMeta::internal_default_instance());
  _Transaction_default_instance_._instance.get_mutable()->last_heartbeat_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Transaction_default_instance_._instance.get_mutable()->orig_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Transaction_default_instance_._instance.get_mutable()->max_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Transaction_default_instance_._instance.get_mutable()->refreshed_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Transaction_default_instance_._instance.get_mutable()->epoch_zero_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Intent_default_instance_._instance.get_mutable()->span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
  _Intent_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(
      ::cockroach::storage::engine::enginepb::TxnMeta::internal_default_instance());
  _Lease_default_instance_._instance.get_mutable()->start_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Lease_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Lease_default_instance_._instance.get_mutable()->replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
  _Lease_default_instance_._instance.get_mutable()->deprecated_start_stasis_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _Lease_default_instance_._instance.get_mutable()->proposed_ts_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _AbortSpanEntry_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  _TxnCoordMeta_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  ::cockroach::roachpb::protobuf_roachpb_2fmetadata_2eproto::AddDescriptors();
  ::cockroach::storage::engine::enginepb::protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::AddDescriptors();
  ::cockroach::util::hlc::protobuf_util_2fhlc_2ftimestamp_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_roachpb_2fdata_2eproto

bool ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 100:
      return true;
    default:
      return false;
  }
}

bool ReplicaChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool TransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kKeyFieldNumber;
const int Span::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Span)
}
Span::Span(const Span& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Span)
}

void Span::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Span& Span::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Span)
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Span)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Span*>(&from));
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  using std::swap;
  key_.Swap(&other->key_);
  end_key_.Swap(&other->end_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Span::GetTypeName() const {
  return "cockroach.roachpb.Span";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Span

void Span::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Span::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Span.key)
  return key_.GetNoArena();
}
void Span::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Span.key)
}
#if LANG_CXX11
void Span::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.Span.key)
}
#endif
void Span::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Span.key)
}
void Span::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Span.key)
}
::std::string* Span::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Span.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Span::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Span.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Span::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Span.key)
}

void Span::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Span::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Span.end_key)
  return end_key_.GetNoArena();
}
void Span::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Span.end_key)
}
#if LANG_CXX11
void Span::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.Span.end_key)
}
#endif
void Span::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Span.end_key)
}
void Span::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Span.end_key)
}
::std::string* Span::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Span.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Span::release_end_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Span.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Span::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Span.end_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kRawBytesFieldNumber;
const int Value::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_bytes().size() > 0) {
    raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Value)
}

void Value::SharedCtor() {
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  _cached_size_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  raw_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Value& Value::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes raw_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw_bytes = 1;
  if (this->raw_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw_bytes(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->timestamp_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Value)
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Value)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes raw_bytes = 1;
  if (this->raw_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_bytes());
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Value*>(&from));
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_bytes().size() > 0) {

    raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  using std::swap;
  raw_bytes_.Swap(&other->raw_bytes_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Value::GetTypeName() const {
  return "cockroach.roachpb.Value";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// bytes raw_bytes = 1;
void Value::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Value::raw_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.raw_bytes)
  return raw_bytes_.GetNoArena();
}
void Value::set_raw_bytes(const ::std::string& value) {
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Value.raw_bytes)
}
#if LANG_CXX11
void Value::set_raw_bytes(::std::string&& value) {
  
  raw_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.Value.raw_bytes)
}
#endif
void Value::set_raw_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Value.raw_bytes)
}
void Value::set_raw_bytes(const void* value, size_t size) {
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Value.raw_bytes)
}
::std::string* Value::mutable_raw_bytes() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Value.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Value::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Value.raw_bytes)
  
  return raw_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Value::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    
  } else {
    
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Value.raw_bytes)
}

bool Value::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void Value::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Value::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Value::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Value.timestamp)
  return timestamp_;
}
::cockroach::util::hlc::Timestamp* Value::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Value.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Value::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Value.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::cockroach::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.KeyValue)
}

void KeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeyValue& KeyValue::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->value_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.KeyValue)
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.KeyValue)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyValue*>(&from));
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
  }
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string KeyValue::GetTypeName() const {
  return "cockroach.roachpb.KeyValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.KeyValue.key)
  return key_.GetNoArena();
}
void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.KeyValue.key)
}
#if LANG_CXX11
void KeyValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.KeyValue.key)
}
#endif
void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.KeyValue.key)
}
void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.KeyValue.key)
}
::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.KeyValue.key)
}

bool KeyValue::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void KeyValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::cockroach::roachpb::Value& KeyValue::value() const {
  const ::cockroach::roachpb::Value* p = value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.KeyValue.value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
::cockroach::roachpb::Value* KeyValue::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::cockroach::roachpb::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.KeyValue.value)
  return value_;
}
::cockroach::roachpb::Value* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.KeyValue.value)
  
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void KeyValue::set_allocated_value(::cockroach::roachpb::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.KeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kNodeIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreIdent::StoreIdent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreIdent)
}
StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreIdent)
}

void StoreIdent::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  _cached_size_ = 0;
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoreIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreIdent& StoreIdent::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

StoreIdent* StoreIdent::New(::google::protobuf::Arena* arena) const {
  StoreIdent* n = new StoreIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  _internal_metadata_.Clear();
}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cluster_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cluster_id(), output);
  }

  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->store_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreIdent)
}

size_t StoreIdent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreIdent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cluster_id());
  }

  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreIdent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreIdent*>(&from));
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreIdent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIdent::IsInitialized() const {
  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreIdent::InternalSwap(StoreIdent* other) {
  using std::swap;
  cluster_id_.Swap(&other->cluster_id_);
  swap(node_id_, other->node_id_);
  swap(store_id_, other->store_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string StoreIdent::GetTypeName() const {
  return "cockroach.roachpb.StoreIdent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreIdent

void StoreIdent::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.cluster_id)
  return cluster_id_.GetNoArena();
}
void StoreIdent::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.cluster_id)
}
#if LANG_CXX11
void StoreIdent::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.StoreIdent.cluster_id)
}
#endif
void StoreIdent::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.StoreIdent.cluster_id)
}
void StoreIdent::set_cluster_id(const void* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.StoreIdent.cluster_id)
}
::std::string* StoreIdent::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreIdent.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StoreIdent::release_cluster_id() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreIdent.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StoreIdent::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreIdent.cluster_id)
}

void StoreIdent::clear_node_id() {
  node_id_ = 0;
}
::google::protobuf::int32 StoreIdent::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.node_id)
  return node_id_;
}
void StoreIdent::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.node_id)
}

void StoreIdent::clear_store_id() {
  store_id_ = 0;
}
::google::protobuf::int32 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.store_id)
  return store_id_;
}
void StoreIdent::set_store_id(::google::protobuf::int32 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.store_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitTrigger::kLeftDescFieldNumber;
const int SplitTrigger::kRightDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitTrigger::SplitTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SplitTrigger)
}
SplitTrigger::SplitTrigger(const SplitTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_desc()) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.left_desc_);
  } else {
    left_desc_ = NULL;
  }
  if (from.has_right_desc()) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.right_desc_);
  } else {
    right_desc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SplitTrigger)
}

void SplitTrigger::SharedCtor() {
  ::memset(&left_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_desc_) -
      reinterpret_cast<char*>(&left_desc_)) + sizeof(right_desc_));
  _cached_size_ = 0;
}

SplitTrigger::~SplitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SplitTrigger)
  SharedDtor();
}

void SplitTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete left_desc_;
  if (this != internal_default_instance()) delete right_desc_;
}

void SplitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SplitTrigger& SplitTrigger::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SplitTrigger* SplitTrigger::New(::google::protobuf::Arena* arena) const {
  SplitTrigger* n = new SplitTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.SplitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
  _internal_metadata_.Clear();
}

bool SplitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SplitTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SplitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SplitTrigger)
  return false;
#undef DO_
}

void SplitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SplitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->left_desc_, output);
  }

  if (this->has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->right_desc_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SplitTrigger)
}

size_t SplitTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.SplitTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_left_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_desc_);
  }

  if (this->has_right_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_desc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SplitTrigger*>(&from));
}

void SplitTrigger::MergeFrom(const SplitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.SplitTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_desc()) {
    mutable_left_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
  }
  if (from.has_right_desc()) {
    mutable_right_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
  }
}

void SplitTrigger::CopyFrom(const SplitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.SplitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitTrigger::IsInitialized() const {
  return true;
}

void SplitTrigger::Swap(SplitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitTrigger::InternalSwap(SplitTrigger* other) {
  using std::swap;
  swap(left_desc_, other->left_desc_);
  swap(right_desc_, other->right_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SplitTrigger::GetTypeName() const {
  return "cockroach.roachpb.SplitTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitTrigger

bool SplitTrigger::has_left_desc() const {
  return this != internal_default_instance() && left_desc_ != NULL;
}
void SplitTrigger::clear_left_desc() {
  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) delete left_desc_;
  left_desc_ = NULL;
}
const ::cockroach::roachpb::RangeDescriptor& SplitTrigger::left_desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = left_desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.left_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::mutable_left_desc() {
  
  if (left_desc_ == NULL) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SplitTrigger.left_desc)
  return left_desc_;
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::release_left_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SplitTrigger.left_desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = left_desc_;
  left_desc_ = NULL;
  return temp;
}
void SplitTrigger::set_allocated_left_desc(::cockroach::roachpb::RangeDescriptor* left_desc) {
  delete left_desc_;
  left_desc_ = left_desc;
  if (left_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SplitTrigger.left_desc)
}

bool SplitTrigger::has_right_desc() const {
  return this != internal_default_instance() && right_desc_ != NULL;
}
void SplitTrigger::clear_right_desc() {
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) delete right_desc_;
  right_desc_ = NULL;
}
const ::cockroach::roachpb::RangeDescriptor& SplitTrigger::right_desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = right_desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.right_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::mutable_right_desc() {
  
  if (right_desc_ == NULL) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SplitTrigger.right_desc)
  return right_desc_;
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::release_right_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SplitTrigger.right_desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = right_desc_;
  right_desc_ = NULL;
  return temp;
}
void SplitTrigger::set_allocated_right_desc(::cockroach::roachpb::RangeDescriptor* right_desc) {
  delete right_desc_;
  right_desc_ = right_desc;
  if (right_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SplitTrigger.right_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeTrigger::kLeftDescFieldNumber;
const int MergeTrigger::kRightDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeTrigger::MergeTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.MergeTrigger)
}
MergeTrigger::MergeTrigger(const MergeTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_desc()) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.left_desc_);
  } else {
    left_desc_ = NULL;
  }
  if (from.has_right_desc()) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.right_desc_);
  } else {
    right_desc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.MergeTrigger)
}

void MergeTrigger::SharedCtor() {
  ::memset(&left_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_desc_) -
      reinterpret_cast<char*>(&left_desc_)) + sizeof(right_desc_));
  _cached_size_ = 0;
}

MergeTrigger::~MergeTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.MergeTrigger)
  SharedDtor();
}

void MergeTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete left_desc_;
  if (this != internal_default_instance()) delete right_desc_;
}

void MergeTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MergeTrigger& MergeTrigger::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

MergeTrigger* MergeTrigger::New(::google::protobuf::Arena* arena) const {
  MergeTrigger* n = new MergeTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.MergeTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
  _internal_metadata_.Clear();
}

bool MergeTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.MergeTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.MergeTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.MergeTrigger)
  return false;
#undef DO_
}

void MergeTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.MergeTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->left_desc_, output);
  }

  if (this->has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->right_desc_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.MergeTrigger)
}

size_t MergeTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.MergeTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_left_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_desc_);
  }

  if (this->has_right_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_desc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeTrigger*>(&from));
}

void MergeTrigger::MergeFrom(const MergeTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.MergeTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_desc()) {
    mutable_left_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
  }
  if (from.has_right_desc()) {
    mutable_right_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
  }
}

void MergeTrigger::CopyFrom(const MergeTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.MergeTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTrigger::IsInitialized() const {
  return true;
}

void MergeTrigger::Swap(MergeTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeTrigger::InternalSwap(MergeTrigger* other) {
  using std::swap;
  swap(left_desc_, other->left_desc_);
  swap(right_desc_, other->right_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string MergeTrigger::GetTypeName() const {
  return "cockroach.roachpb.MergeTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeTrigger

bool MergeTrigger::has_left_desc() const {
  return this != internal_default_instance() && left_desc_ != NULL;
}
void MergeTrigger::clear_left_desc() {
  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) delete left_desc_;
  left_desc_ = NULL;
}
const ::cockroach::roachpb::RangeDescriptor& MergeTrigger::left_desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = left_desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeTrigger.left_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::mutable_left_desc() {
  
  if (left_desc_ == NULL) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeTrigger.left_desc)
  return left_desc_;
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::release_left_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.MergeTrigger.left_desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = left_desc_;
  left_desc_ = NULL;
  return temp;
}
void MergeTrigger::set_allocated_left_desc(::cockroach::roachpb::RangeDescriptor* left_desc) {
  delete left_desc_;
  left_desc_ = left_desc;
  if (left_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeTrigger.left_desc)
}

bool MergeTrigger::has_right_desc() const {
  return this != internal_default_instance() && right_desc_ != NULL;
}
void MergeTrigger::clear_right_desc() {
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) delete right_desc_;
  right_desc_ = NULL;
}
const ::cockroach::roachpb::RangeDescriptor& MergeTrigger::right_desc() const {
  const ::cockroach::roachpb::RangeDescriptor* p = right_desc_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeTrigger.right_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::mutable_right_desc() {
  
  if (right_desc_ == NULL) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeTrigger.right_desc)
  return right_desc_;
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::release_right_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.MergeTrigger.right_desc)
  
  ::cockroach::roachpb::RangeDescriptor* temp = right_desc_;
  right_desc_ = NULL;
  return temp;
}
void MergeTrigger::set_allocated_right_desc(::cockroach::roachpb::RangeDescriptor* right_desc) {
  delete right_desc_;
  right_desc_ = right_desc;
  if (right_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeTrigger.right_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeReplicasTrigger::kChangeTypeFieldNumber;
const int ChangeReplicasTrigger::kReplicaFieldNumber;
const int ChangeReplicasTrigger::kUpdatedReplicasFieldNumber;
const int ChangeReplicasTrigger::kNextReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeReplicasTrigger::ChangeReplicasTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ChangeReplicasTrigger)
}
ChangeReplicasTrigger::ChangeReplicasTrigger(const ChangeReplicasTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      updated_replicas_(from.updated_replicas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_replica()) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  ::memcpy(&change_type_, &from.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_replica_id_) -
    reinterpret_cast<char*>(&change_type_)) + sizeof(next_replica_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::SharedCtor() {
  ::memset(&replica_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_replica_id_) -
      reinterpret_cast<char*>(&replica_)) + sizeof(next_replica_id_));
  _cached_size_ = 0;
}

ChangeReplicasTrigger::~ChangeReplicasTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ChangeReplicasTrigger)
  SharedDtor();
}

void ChangeReplicasTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete replica_;
}

void ChangeReplicasTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangeReplicasTrigger& ChangeReplicasTrigger::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeReplicasTrigger* ChangeReplicasTrigger::New(::google::protobuf::Arena* arena) const {
  ChangeReplicasTrigger* n = new ChangeReplicasTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeReplicasTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ChangeReplicasTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_replicas_.Clear();
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_replica_id_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(next_replica_id_));
  _internal_metadata_.Clear();
}

bool ChangeReplicasTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ChangeReplicasTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.ReplicaChangeType change_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::cockroach::roachpb::ReplicaChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updated_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ChangeReplicasTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ChangeReplicasTrigger)
  return false;
#undef DO_
}

void ChangeReplicasTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ChangeReplicasTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.ReplicaChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  if (this->has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->replica_, output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updated_replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->updated_replicas(static_cast<int>(i)), output);
  }

  if (this->next_replica_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->next_replica_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ChangeReplicasTrigger)
}

size_t ChangeReplicasTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ChangeReplicasTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->updated_replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updated_replicas(static_cast<int>(i)));
    }
  }

  if (this->has_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->replica_);
  }

  // .cockroach.roachpb.ReplicaChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  if (this->next_replica_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->next_replica_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeReplicasTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeReplicasTrigger*>(&from));
}

void ChangeReplicasTrigger::MergeFrom(const ChangeReplicasTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ChangeReplicasTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_replicas_.MergeFrom(from.updated_replicas_);
  if (from.has_replica()) {
    mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
  if (from.next_replica_id() != 0) {
    set_next_replica_id(from.next_replica_id());
  }
}

void ChangeReplicasTrigger::CopyFrom(const ChangeReplicasTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ChangeReplicasTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeReplicasTrigger::IsInitialized() const {
  return true;
}

void ChangeReplicasTrigger::Swap(ChangeReplicasTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeReplicasTrigger::InternalSwap(ChangeReplicasTrigger* other) {
  using std::swap;
  updated_replicas_.InternalSwap(&other->updated_replicas_);
  swap(replica_, other->replica_);
  swap(change_type_, other->change_type_);
  swap(next_replica_id_, other->next_replica_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ChangeReplicasTrigger::GetTypeName() const {
  return "cockroach.roachpb.ChangeReplicasTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeReplicasTrigger

// .cockroach.roachpb.ReplicaChangeType change_type = 1;
void ChangeReplicasTrigger::clear_change_type() {
  change_type_ = 0;
}
::cockroach::roachpb::ReplicaChangeType ChangeReplicasTrigger::change_type() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.change_type)
  return static_cast< ::cockroach::roachpb::ReplicaChangeType >(change_type_);
}
void ChangeReplicasTrigger::set_change_type(::cockroach::roachpb::ReplicaChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ChangeReplicasTrigger.change_type)
}

bool ChangeReplicasTrigger::has_replica() const {
  return this != internal_default_instance() && replica_ != NULL;
}
void ChangeReplicasTrigger::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) delete replica_;
  replica_ = NULL;
}
const ::cockroach::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::replica() const {
  const ::cockroach::roachpb::ReplicaDescriptor* p = replica_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReplicaDescriptor*>(
      &::cockroach::roachpb::_ReplicaDescriptor_default_instance_);
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_replica() {
  
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ChangeReplicasTrigger.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ChangeReplicasTrigger.replica)
  
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void ChangeReplicasTrigger::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ChangeReplicasTrigger.replica)
}

int ChangeReplicasTrigger::updated_replicas_size() const {
  return updated_replicas_.size();
}
void ChangeReplicasTrigger::clear_updated_replicas() {
  updated_replicas_.Clear();
}
const ::cockroach::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::updated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Get(index);
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_updated_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Mutable(index);
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::add_updated_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
ChangeReplicasTrigger::mutable_updated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return &updated_replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
ChangeReplicasTrigger::updated_replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_;
}

void ChangeReplicasTrigger::clear_next_replica_id() {
  next_replica_id_ = 0;
}
::google::protobuf::int32 ChangeReplicasTrigger::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.next_replica_id)
  return next_replica_id_;
}
void ChangeReplicasTrigger::set_next_replica_id(::google::protobuf::int32 value) {
  
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ChangeReplicasTrigger.next_replica_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifiedSpanTrigger::kSystemConfigSpanFieldNumber;
const int ModifiedSpanTrigger::kNodeLivenessSpanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifiedSpanTrigger::ModifiedSpanTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ModifiedSpanTrigger)
}
ModifiedSpanTrigger::ModifiedSpanTrigger(const ModifiedSpanTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_liveness_span()) {
    node_liveness_span_ = new ::cockroach::roachpb::Span(*from.node_liveness_span_);
  } else {
    node_liveness_span_ = NULL;
  }
  system_config_span_ = from.system_config_span_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ModifiedSpanTrigger)
}

void ModifiedSpanTrigger::SharedCtor() {
  ::memset(&node_liveness_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_config_span_) -
      reinterpret_cast<char*>(&node_liveness_span_)) + sizeof(system_config_span_));
  _cached_size_ = 0;
}

ModifiedSpanTrigger::~ModifiedSpanTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ModifiedSpanTrigger)
  SharedDtor();
}

void ModifiedSpanTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete node_liveness_span_;
}

void ModifiedSpanTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModifiedSpanTrigger& ModifiedSpanTrigger::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModifiedSpanTrigger* ModifiedSpanTrigger::New(::google::protobuf::Arena* arena) const {
  ModifiedSpanTrigger* n = new ModifiedSpanTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifiedSpanTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ModifiedSpanTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_liveness_span_ != NULL) {
    delete node_liveness_span_;
  }
  node_liveness_span_ = NULL;
  system_config_span_ = false;
  _internal_metadata_.Clear();
}

bool ModifiedSpanTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ModifiedSpanTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool system_config_span = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_config_span_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.Span node_liveness_span = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_liveness_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ModifiedSpanTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ModifiedSpanTrigger)
  return false;
#undef DO_
}

void ModifiedSpanTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ModifiedSpanTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool system_config_span = 1;
  if (this->system_config_span() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->system_config_span(), output);
  }

  // .cockroach.roachpb.Span node_liveness_span = 2;
  if (this->has_node_liveness_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->node_liveness_span_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ModifiedSpanTrigger)
}

size_t ModifiedSpanTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ModifiedSpanTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .cockroach.roachpb.Span node_liveness_span = 2;
  if (this->has_node_liveness_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_liveness_span_);
  }

  // bool system_config_span = 1;
  if (this->system_config_span() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifiedSpanTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModifiedSpanTrigger*>(&from));
}

void ModifiedSpanTrigger::MergeFrom(const ModifiedSpanTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ModifiedSpanTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_liveness_span()) {
    mutable_node_liveness_span()->::cockroach::roachpb::Span::MergeFrom(from.node_liveness_span());
  }
  if (from.system_config_span() != 0) {
    set_system_config_span(from.system_config_span());
  }
}

void ModifiedSpanTrigger::CopyFrom(const ModifiedSpanTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ModifiedSpanTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifiedSpanTrigger::IsInitialized() const {
  return true;
}

void ModifiedSpanTrigger::Swap(ModifiedSpanTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifiedSpanTrigger::InternalSwap(ModifiedSpanTrigger* other) {
  using std::swap;
  swap(node_liveness_span_, other->node_liveness_span_);
  swap(system_config_span_, other->system_config_span_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ModifiedSpanTrigger::GetTypeName() const {
  return "cockroach.roachpb.ModifiedSpanTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifiedSpanTrigger

// bool system_config_span = 1;
void ModifiedSpanTrigger::clear_system_config_span() {
  system_config_span_ = false;
}
bool ModifiedSpanTrigger::system_config_span() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ModifiedSpanTrigger.system_config_span)
  return system_config_span_;
}
void ModifiedSpanTrigger::set_system_config_span(bool value) {
  
  system_config_span_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ModifiedSpanTrigger.system_config_span)
}

// .cockroach.roachpb.Span node_liveness_span = 2;
bool ModifiedSpanTrigger::has_node_liveness_span() const {
  return this != internal_default_instance() && node_liveness_span_ != NULL;
}
void ModifiedSpanTrigger::clear_node_liveness_span() {
  if (GetArenaNoVirtual() == NULL && node_liveness_span_ != NULL) delete node_liveness_span_;
  node_liveness_span_ = NULL;
}
const ::cockroach::roachpb::Span& ModifiedSpanTrigger::node_liveness_span() const {
  const ::cockroach::roachpb::Span* p = node_liveness_span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ModifiedSpanTrigger.node_liveness_span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
::cockroach::roachpb::Span* ModifiedSpanTrigger::mutable_node_liveness_span() {
  
  if (node_liveness_span_ == NULL) {
    node_liveness_span_ = new ::cockroach::roachpb::Span;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ModifiedSpanTrigger.node_liveness_span)
  return node_liveness_span_;
}
::cockroach::roachpb::Span* ModifiedSpanTrigger::release_node_liveness_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ModifiedSpanTrigger.node_liveness_span)
  
  ::cockroach::roachpb::Span* temp = node_liveness_span_;
  node_liveness_span_ = NULL;
  return temp;
}
void ModifiedSpanTrigger::set_allocated_node_liveness_span(::cockroach::roachpb::Span* node_liveness_span) {
  delete node_liveness_span_;
  node_liveness_span_ = node_liveness_span;
  if (node_liveness_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ModifiedSpanTrigger.node_liveness_span)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalCommitTrigger::kSplitTriggerFieldNumber;
const int InternalCommitTrigger::kMergeTriggerFieldNumber;
const int InternalCommitTrigger::kChangeReplicasTriggerFieldNumber;
const int InternalCommitTrigger::kModifiedSpanTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalCommitTrigger::InternalCommitTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.InternalCommitTrigger)
}
InternalCommitTrigger::InternalCommitTrigger(const InternalCommitTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split_trigger()) {
    split_trigger_ = new ::cockroach::roachpb::SplitTrigger(*from.split_trigger_);
  } else {
    split_trigger_ = NULL;
  }
  if (from.has_merge_trigger()) {
    merge_trigger_ = new ::cockroach::roachpb::MergeTrigger(*from.merge_trigger_);
  } else {
    merge_trigger_ = NULL;
  }
  if (from.has_change_replicas_trigger()) {
    change_replicas_trigger_ = new ::cockroach::roachpb::ChangeReplicasTrigger(*from.change_replicas_trigger_);
  } else {
    change_replicas_trigger_ = NULL;
  }
  if (from.has_modified_span_trigger()) {
    modified_span_trigger_ = new ::cockroach::roachpb::ModifiedSpanTrigger(*from.modified_span_trigger_);
  } else {
    modified_span_trigger_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.InternalCommitTrigger)
}

void InternalCommitTrigger::SharedCtor() {
  ::memset(&split_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modified_span_trigger_) -
      reinterpret_cast<char*>(&split_trigger_)) + sizeof(modified_span_trigger_));
  _cached_size_ = 0;
}

InternalCommitTrigger::~InternalCommitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.InternalCommitTrigger)
  SharedDtor();
}

void InternalCommitTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete split_trigger_;
  if (this != internal_default_instance()) delete merge_trigger_;
  if (this != internal_default_instance()) delete change_replicas_trigger_;
  if (this != internal_default_instance()) delete modified_span_trigger_;
}

void InternalCommitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InternalCommitTrigger& InternalCommitTrigger::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

InternalCommitTrigger* InternalCommitTrigger::New(::google::protobuf::Arena* arena) const {
  InternalCommitTrigger* n = new InternalCommitTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalCommitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.InternalCommitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && split_trigger_ != NULL) {
    delete split_trigger_;
  }
  split_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && merge_trigger_ != NULL) {
    delete merge_trigger_;
  }
  merge_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_replicas_trigger_ != NULL) {
    delete change_replicas_trigger_;
  }
  change_replicas_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && modified_span_trigger_ != NULL) {
    delete modified_span_trigger_;
  }
  modified_span_trigger_ = NULL;
  _internal_metadata_.Clear();
}

bool InternalCommitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.InternalCommitTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.SplitTrigger split_trigger = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.MergeTrigger merge_trigger = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_replicas_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modified_span_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.InternalCommitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.InternalCommitTrigger)
  return false;
#undef DO_
}

void InternalCommitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.InternalCommitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.SplitTrigger split_trigger = 1;
  if (this->has_split_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->split_trigger_, output);
  }

  // .cockroach.roachpb.MergeTrigger merge_trigger = 2;
  if (this->has_merge_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->merge_trigger_, output);
  }

  // .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (this->has_change_replicas_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->change_replicas_trigger_, output);
  }

  // .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (this->has_modified_span_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->modified_span_trigger_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.InternalCommitTrigger)
}

size_t InternalCommitTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.InternalCommitTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .cockroach.roachpb.SplitTrigger split_trigger = 1;
  if (this->has_split_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_trigger_);
  }

  // .cockroach.roachpb.MergeTrigger merge_trigger = 2;
  if (this->has_merge_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->merge_trigger_);
  }

  // .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (this->has_change_replicas_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->change_replicas_trigger_);
  }

  // .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (this->has_modified_span_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->modified_span_trigger_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalCommitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InternalCommitTrigger*>(&from));
}

void InternalCommitTrigger::MergeFrom(const InternalCommitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.InternalCommitTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_split_trigger()) {
    mutable_split_trigger()->::cockroach::roachpb::SplitTrigger::MergeFrom(from.split_trigger());
  }
  if (from.has_merge_trigger()) {
    mutable_merge_trigger()->::cockroach::roachpb::MergeTrigger::MergeFrom(from.merge_trigger());
  }
  if (from.has_change_replicas_trigger()) {
    mutable_change_replicas_trigger()->::cockroach::roachpb::ChangeReplicasTrigger::MergeFrom(from.change_replicas_trigger());
  }
  if (from.has_modified_span_trigger()) {
    mutable_modified_span_trigger()->::cockroach::roachpb::ModifiedSpanTrigger::MergeFrom(from.modified_span_trigger());
  }
}

void InternalCommitTrigger::CopyFrom(const InternalCommitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.InternalCommitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCommitTrigger::IsInitialized() const {
  return true;
}

void InternalCommitTrigger::Swap(InternalCommitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalCommitTrigger::InternalSwap(InternalCommitTrigger* other) {
  using std::swap;
  swap(split_trigger_, other->split_trigger_);
  swap(merge_trigger_, other->merge_trigger_);
  swap(change_replicas_trigger_, other->change_replicas_trigger_);
  swap(modified_span_trigger_, other->modified_span_trigger_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string InternalCommitTrigger::GetTypeName() const {
  return "cockroach.roachpb.InternalCommitTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalCommitTrigger

// .cockroach.roachpb.SplitTrigger split_trigger = 1;
bool InternalCommitTrigger::has_split_trigger() const {
  return this != internal_default_instance() && split_trigger_ != NULL;
}
void InternalCommitTrigger::clear_split_trigger() {
  if (GetArenaNoVirtual() == NULL && split_trigger_ != NULL) delete split_trigger_;
  split_trigger_ = NULL;
}
const ::cockroach::roachpb::SplitTrigger& InternalCommitTrigger::split_trigger() const {
  const ::cockroach::roachpb::SplitTrigger* p = split_trigger_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::SplitTrigger*>(
      &::cockroach::roachpb::_SplitTrigger_default_instance_);
}
::cockroach::roachpb::SplitTrigger* InternalCommitTrigger::mutable_split_trigger() {
  
  if (split_trigger_ == NULL) {
    split_trigger_ = new ::cockroach::roachpb::SplitTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  return split_trigger_;
}
::cockroach::roachpb::SplitTrigger* InternalCommitTrigger::release_split_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  
  ::cockroach::roachpb::SplitTrigger* temp = split_trigger_;
  split_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_split_trigger(::cockroach::roachpb::SplitTrigger* split_trigger) {
  delete split_trigger_;
  split_trigger_ = split_trigger;
  if (split_trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.split_trigger)
}

// .cockroach.roachpb.MergeTrigger merge_trigger = 2;
bool InternalCommitTrigger::has_merge_trigger() const {
  return this != internal_default_instance() && merge_trigger_ != NULL;
}
void InternalCommitTrigger::clear_merge_trigger() {
  if (GetArenaNoVirtual() == NULL && merge_trigger_ != NULL) delete merge_trigger_;
  merge_trigger_ = NULL;
}
const ::cockroach::roachpb::MergeTrigger& InternalCommitTrigger::merge_trigger() const {
  const ::cockroach::roachpb::MergeTrigger* p = merge_trigger_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::MergeTrigger*>(
      &::cockroach::roachpb::_MergeTrigger_default_instance_);
}
::cockroach::roachpb::MergeTrigger* InternalCommitTrigger::mutable_merge_trigger() {
  
  if (merge_trigger_ == NULL) {
    merge_trigger_ = new ::cockroach::roachpb::MergeTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  return merge_trigger_;
}
::cockroach::roachpb::MergeTrigger* InternalCommitTrigger::release_merge_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  
  ::cockroach::roachpb::MergeTrigger* temp = merge_trigger_;
  merge_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_merge_trigger(::cockroach::roachpb::MergeTrigger* merge_trigger) {
  delete merge_trigger_;
  merge_trigger_ = merge_trigger;
  if (merge_trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
}

// .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
bool InternalCommitTrigger::has_change_replicas_trigger() const {
  return this != internal_default_instance() && change_replicas_trigger_ != NULL;
}
void InternalCommitTrigger::clear_change_replicas_trigger() {
  if (GetArenaNoVirtual() == NULL && change_replicas_trigger_ != NULL) delete change_replicas_trigger_;
  change_replicas_trigger_ = NULL;
}
const ::cockroach::roachpb::ChangeReplicasTrigger& InternalCommitTrigger::change_replicas_trigger() const {
  const ::cockroach::roachpb::ChangeReplicasTrigger* p = change_replicas_trigger_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ChangeReplicasTrigger*>(
      &::cockroach::roachpb::_ChangeReplicasTrigger_default_instance_);
}
::cockroach::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::mutable_change_replicas_trigger() {
  
  if (change_replicas_trigger_ == NULL) {
    change_replicas_trigger_ = new ::cockroach::roachpb::ChangeReplicasTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_;
}
::cockroach::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::release_change_replicas_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  
  ::cockroach::roachpb::ChangeReplicasTrigger* temp = change_replicas_trigger_;
  change_replicas_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_change_replicas_trigger(::cockroach::roachpb::ChangeReplicasTrigger* change_replicas_trigger) {
  delete change_replicas_trigger_;
  change_replicas_trigger_ = change_replicas_trigger;
  if (change_replicas_trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
}

// .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
bool InternalCommitTrigger::has_modified_span_trigger() const {
  return this != internal_default_instance() && modified_span_trigger_ != NULL;
}
void InternalCommitTrigger::clear_modified_span_trigger() {
  if (GetArenaNoVirtual() == NULL && modified_span_trigger_ != NULL) delete modified_span_trigger_;
  modified_span_trigger_ = NULL;
}
const ::cockroach::roachpb::ModifiedSpanTrigger& InternalCommitTrigger::modified_span_trigger() const {
  const ::cockroach::roachpb::ModifiedSpanTrigger* p = modified_span_trigger_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ModifiedSpanTrigger*>(
      &::cockroach::roachpb::_ModifiedSpanTrigger_default_instance_);
}
::cockroach::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::mutable_modified_span_trigger() {
  
  if (modified_span_trigger_ == NULL) {
    modified_span_trigger_ = new ::cockroach::roachpb::ModifiedSpanTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  return modified_span_trigger_;
}
::cockroach::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::release_modified_span_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  
  ::cockroach::roachpb::ModifiedSpanTrigger* temp = modified_span_trigger_;
  modified_span_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_modified_span_trigger(::cockroach::roachpb::ModifiedSpanTrigger* modified_span_trigger) {
  delete modified_span_trigger_;
  modified_span_trigger_ = modified_span_trigger;
  if (modified_span_trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservedTimestamp::kNodeIdFieldNumber;
const int ObservedTimestamp::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservedTimestamp::ObservedTimestamp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ObservedTimestamp)
}
ObservedTimestamp::ObservedTimestamp(const ObservedTimestamp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ObservedTimestamp)
}

void ObservedTimestamp::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

ObservedTimestamp::~ObservedTimestamp() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ObservedTimestamp)
  SharedDtor();
}

void ObservedTimestamp::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void ObservedTimestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ObservedTimestamp& ObservedTimestamp::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObservedTimestamp* ObservedTimestamp::New(::google::protobuf::Arena* arena) const {
  ObservedTimestamp* n = new ObservedTimestamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObservedTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ObservedTimestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  node_id_ = 0;
  _internal_metadata_.Clear();
}

bool ObservedTimestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ObservedTimestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ObservedTimestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ObservedTimestamp)
  return false;
#undef DO_
}

void ObservedTimestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ObservedTimestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->timestamp_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ObservedTimestamp)
}

size_t ObservedTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ObservedTimestamp)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObservedTimestamp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObservedTimestamp*>(&from));
}

void ObservedTimestamp::MergeFrom(const ObservedTimestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ObservedTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void ObservedTimestamp::CopyFrom(const ObservedTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ObservedTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservedTimestamp::IsInitialized() const {
  return true;
}

void ObservedTimestamp::Swap(ObservedTimestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservedTimestamp::InternalSwap(ObservedTimestamp* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ObservedTimestamp::GetTypeName() const {
  return "cockroach.roachpb.ObservedTimestamp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObservedTimestamp

void ObservedTimestamp::clear_node_id() {
  node_id_ = 0;
}
::google::protobuf::int32 ObservedTimestamp::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ObservedTimestamp.node_id)
  return node_id_;
}
void ObservedTimestamp::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ObservedTimestamp.node_id)
}

bool ObservedTimestamp::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void ObservedTimestamp::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& ObservedTimestamp::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ObservedTimestamp.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* ObservedTimestamp::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ObservedTimestamp.timestamp)
  return timestamp_;
}
::cockroach::util::hlc::Timestamp* ObservedTimestamp::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ObservedTimestamp.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void ObservedTimestamp::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ObservedTimestamp.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kMetaFieldNumber;
const int Transaction::kNameFieldNumber;
const int Transaction::kStatusFieldNumber;
const int Transaction::kLastHeartbeatFieldNumber;
const int Transaction::kOrigTimestampFieldNumber;
const int Transaction::kMaxTimestampFieldNumber;
const int Transaction::kRefreshedTimestampFieldNumber;
const int Transaction::kObservedTimestampsFieldNumber;
const int Transaction::kWritingFieldNumber;
const int Transaction::kWriteTooOldFieldNumber;
const int Transaction::kRetryOnPushFieldNumber;
const int Transaction::kIntentsFieldNumber;
const int Transaction::kEpochZeroTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      observed_timestamps_(from.observed_timestamps_),
      intents_(from.intents_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_meta()) {
    meta_ = new ::cockroach::storage::engine::enginepb::TxnMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  if (from.has_last_heartbeat()) {
    last_heartbeat_ = new ::cockroach::util::hlc::Timestamp(*from.last_heartbeat_);
  } else {
    last_heartbeat_ = NULL;
  }
  if (from.has_orig_timestamp()) {
    orig_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.orig_timestamp_);
  } else {
    orig_timestamp_ = NULL;
  }
  if (from.has_max_timestamp()) {
    max_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.max_timestamp_);
  } else {
    max_timestamp_ = NULL;
  }
  if (from.has_epoch_zero_timestamp()) {
    epoch_zero_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.epoch_zero_timestamp_);
  } else {
    epoch_zero_timestamp_ = NULL;
  }
  if (from.has_refreshed_timestamp()) {
    refreshed_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.refreshed_timestamp_);
  } else {
    refreshed_timestamp_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_on_push_) -
    reinterpret_cast<char*>(&status_)) + sizeof(retry_on_push_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Transaction)
}

void Transaction::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_on_push_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(retry_on_push_));
  _cached_size_ = 0;
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete last_heartbeat_;
  if (this != internal_default_instance()) delete orig_timestamp_;
  if (this != internal_default_instance()) delete max_timestamp_;
  if (this != internal_default_instance()) delete epoch_zero_timestamp_;
  if (this != internal_default_instance()) delete refreshed_timestamp_;
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Transaction& Transaction::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observed_timestamps_.Clear();
  intents_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
  if (GetArenaNoVirtual() == NULL && orig_timestamp_ != NULL) {
    delete orig_timestamp_;
  }
  orig_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_timestamp_ != NULL) {
    delete max_timestamp_;
  }
  max_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && epoch_zero_timestamp_ != NULL) {
    delete epoch_zero_timestamp_;
  }
  epoch_zero_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && refreshed_timestamp_ != NULL) {
    delete refreshed_timestamp_;
  }
  refreshed_timestamp_ = NULL;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_on_push_) -
      reinterpret_cast<char*>(&status_)) + sizeof(retry_on_push_));
  _internal_metadata_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.Transaction.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TransactionStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orig_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_observed_timestamps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool writing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool write_too_old = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_too_old_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool retry_on_push = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retry_on_push_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch_zero_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refreshed_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->meta_, output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.Transaction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .cockroach.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (this->has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->last_heartbeat_, output);
  }

  if (this->has_orig_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->orig_timestamp_, output);
  }

  if (this->has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->max_timestamp_, output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observed_timestamps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->observed_timestamps(static_cast<int>(i)), output);
  }

  // bool writing = 9;
  if (this->writing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->writing(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->intents(static_cast<int>(i)), output);
  }

  // bool write_too_old = 12;
  if (this->write_too_old() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->write_too_old(), output);
  }

  // bool retry_on_push = 13;
  if (this->retry_on_push() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->retry_on_push(), output);
  }

  if (this->has_epoch_zero_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->epoch_zero_timestamp_, output);
  }

  if (this->has_refreshed_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->refreshed_timestamp_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Transaction)
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Transaction)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->observed_timestamps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->observed_timestamps(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->intents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intents(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  if (this->has_last_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->last_heartbeat_);
  }

  if (this->has_orig_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orig_timestamp_);
  }

  if (this->has_max_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_timestamp_);
  }

  if (this->has_epoch_zero_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_zero_timestamp_);
  }

  if (this->has_refreshed_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->refreshed_timestamp_);
  }

  // .cockroach.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool writing = 9;
  if (this->writing() != 0) {
    total_size += 1 + 1;
  }

  // bool write_too_old = 12;
  if (this->write_too_old() != 0) {
    total_size += 1 + 1;
  }

  // bool retry_on_push = 13;
  if (this->retry_on_push() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transaction*>(&from));
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observed_timestamps_.MergeFrom(from.observed_timestamps_);
  intents_.MergeFrom(from.intents_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_meta()) {
    mutable_meta()->::cockroach::storage::engine::enginepb::TxnMeta::MergeFrom(from.meta());
  }
  if (from.has_last_heartbeat()) {
    mutable_last_heartbeat()->::cockroach::util::hlc::Timestamp::MergeFrom(from.last_heartbeat());
  }
  if (from.has_orig_timestamp()) {
    mutable_orig_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.orig_timestamp());
  }
  if (from.has_max_timestamp()) {
    mutable_max_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.max_timestamp());
  }
  if (from.has_epoch_zero_timestamp()) {
    mutable_epoch_zero_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.epoch_zero_timestamp());
  }
  if (from.has_refreshed_timestamp()) {
    mutable_refreshed_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.refreshed_timestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.writing() != 0) {
    set_writing(from.writing());
  }
  if (from.write_too_old() != 0) {
    set_write_too_old(from.write_too_old());
  }
  if (from.retry_on_push() != 0) {
    set_retry_on_push(from.retry_on_push());
  }
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  observed_timestamps_.InternalSwap(&other->observed_timestamps_);
  intents_.InternalSwap(&other->intents_);
  name_.Swap(&other->name_);
  swap(meta_, other->meta_);
  swap(last_heartbeat_, other->last_heartbeat_);
  swap(orig_timestamp_, other->orig_timestamp_);
  swap(max_timestamp_, other->max_timestamp_);
  swap(epoch_zero_timestamp_, other->epoch_zero_timestamp_);
  swap(refreshed_timestamp_, other->refreshed_timestamp_);
  swap(status_, other->status_);
  swap(writing_, other->writing_);
  swap(write_too_old_, other->write_too_old_);
  swap(retry_on_push_, other->retry_on_push_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Transaction::GetTypeName() const {
  return "cockroach.roachpb.Transaction";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

bool Transaction::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
void Transaction::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::cockroach::storage::engine::enginepb::TxnMeta& Transaction::meta() const {
  const ::cockroach::storage::engine::enginepb::TxnMeta* p = meta_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::TxnMeta*>(
      &::cockroach::storage::engine::enginepb::_TxnMeta_default_instance_);
}
::cockroach::storage::engine::enginepb::TxnMeta* Transaction::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::cockroach::storage::engine::enginepb::TxnMeta;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.meta)
  return meta_;
}
::cockroach::storage::engine::enginepb::TxnMeta* Transaction::release_meta() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.meta)
  
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void Transaction::set_allocated_meta(::cockroach::storage::engine::enginepb::TxnMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.meta)
}

// string name = 2;
void Transaction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Transaction::name() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.name)
  return name_.GetNoArena();
}
void Transaction::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.name)
}
#if LANG_CXX11
void Transaction::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.Transaction.name)
}
#endif
void Transaction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Transaction.name)
}
void Transaction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Transaction.name)
}
::std::string* Transaction::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_name() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.name)
}

// .cockroach.roachpb.TransactionStatus status = 4;
void Transaction::clear_status() {
  status_ = 0;
}
::cockroach::roachpb::TransactionStatus Transaction::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
void Transaction::set_status(::cockroach::roachpb::TransactionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.status)
}

bool Transaction::has_last_heartbeat() const {
  return this != internal_default_instance() && last_heartbeat_ != NULL;
}
void Transaction::clear_last_heartbeat() {
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) delete last_heartbeat_;
  last_heartbeat_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Transaction::last_heartbeat() const {
  const ::cockroach::util::hlc::Timestamp* p = last_heartbeat_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.last_heartbeat)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Transaction::mutable_last_heartbeat() {
  
  if (last_heartbeat_ == NULL) {
    last_heartbeat_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.last_heartbeat)
  return last_heartbeat_;
}
::cockroach::util::hlc::Timestamp* Transaction::release_last_heartbeat() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.last_heartbeat)
  
  ::cockroach::util::hlc::Timestamp* temp = last_heartbeat_;
  last_heartbeat_ = NULL;
  return temp;
}
void Transaction::set_allocated_last_heartbeat(::cockroach::util::hlc::Timestamp* last_heartbeat) {
  delete last_heartbeat_;
  last_heartbeat_ = last_heartbeat;
  if (last_heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.last_heartbeat)
}

bool Transaction::has_orig_timestamp() const {
  return this != internal_default_instance() && orig_timestamp_ != NULL;
}
void Transaction::clear_orig_timestamp() {
  if (GetArenaNoVirtual() == NULL && orig_timestamp_ != NULL) delete orig_timestamp_;
  orig_timestamp_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Transaction::orig_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = orig_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.orig_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Transaction::mutable_orig_timestamp() {
  
  if (orig_timestamp_ == NULL) {
    orig_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.orig_timestamp)
  return orig_timestamp_;
}
::cockroach::util::hlc::Timestamp* Transaction::release_orig_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.orig_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = orig_timestamp_;
  orig_timestamp_ = NULL;
  return temp;
}
void Transaction::set_allocated_orig_timestamp(::cockroach::util::hlc::Timestamp* orig_timestamp) {
  delete orig_timestamp_;
  orig_timestamp_ = orig_timestamp;
  if (orig_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.orig_timestamp)
}

bool Transaction::has_max_timestamp() const {
  return this != internal_default_instance() && max_timestamp_ != NULL;
}
void Transaction::clear_max_timestamp() {
  if (GetArenaNoVirtual() == NULL && max_timestamp_ != NULL) delete max_timestamp_;
  max_timestamp_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Transaction::max_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = max_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.max_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Transaction::mutable_max_timestamp() {
  
  if (max_timestamp_ == NULL) {
    max_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.max_timestamp)
  return max_timestamp_;
}
::cockroach::util::hlc::Timestamp* Transaction::release_max_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.max_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = max_timestamp_;
  max_timestamp_ = NULL;
  return temp;
}
void Transaction::set_allocated_max_timestamp(::cockroach::util::hlc::Timestamp* max_timestamp) {
  delete max_timestamp_;
  max_timestamp_ = max_timestamp;
  if (max_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.max_timestamp)
}

bool Transaction::has_refreshed_timestamp() const {
  return this != internal_default_instance() && refreshed_timestamp_ != NULL;
}
void Transaction::clear_refreshed_timestamp() {
  if (GetArenaNoVirtual() == NULL && refreshed_timestamp_ != NULL) delete refreshed_timestamp_;
  refreshed_timestamp_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Transaction::refreshed_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = refreshed_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.refreshed_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Transaction::mutable_refreshed_timestamp() {
  
  if (refreshed_timestamp_ == NULL) {
    refreshed_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.refreshed_timestamp)
  return refreshed_timestamp_;
}
::cockroach::util::hlc::Timestamp* Transaction::release_refreshed_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.refreshed_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = refreshed_timestamp_;
  refreshed_timestamp_ = NULL;
  return temp;
}
void Transaction::set_allocated_refreshed_timestamp(::cockroach::util::hlc::Timestamp* refreshed_timestamp) {
  delete refreshed_timestamp_;
  refreshed_timestamp_ = refreshed_timestamp;
  if (refreshed_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.refreshed_timestamp)
}

int Transaction::observed_timestamps_size() const {
  return observed_timestamps_.size();
}
void Transaction::clear_observed_timestamps() {
  observed_timestamps_.Clear();
}
const ::cockroach::roachpb::ObservedTimestamp& Transaction::observed_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.Get(index);
}
::cockroach::roachpb::ObservedTimestamp* Transaction::mutable_observed_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.Mutable(index);
}
::cockroach::roachpb::ObservedTimestamp* Transaction::add_observed_timestamps() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ObservedTimestamp >*
Transaction::mutable_observed_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Transaction.observed_timestamps)
  return &observed_timestamps_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ObservedTimestamp >&
Transaction::observed_timestamps() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_;
}

// bool writing = 9;
void Transaction::clear_writing() {
  writing_ = false;
}
bool Transaction::writing() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.writing)
  return writing_;
}
void Transaction::set_writing(bool value) {
  
  writing_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.writing)
}

// bool write_too_old = 12;
void Transaction::clear_write_too_old() {
  write_too_old_ = false;
}
bool Transaction::write_too_old() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.write_too_old)
  return write_too_old_;
}
void Transaction::set_write_too_old(bool value) {
  
  write_too_old_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.write_too_old)
}

// bool retry_on_push = 13;
void Transaction::clear_retry_on_push() {
  retry_on_push_ = false;
}
bool Transaction::retry_on_push() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.retry_on_push)
  return retry_on_push_;
}
void Transaction::set_retry_on_push(bool value) {
  
  retry_on_push_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.retry_on_push)
}

int Transaction::intents_size() const {
  return intents_.size();
}
void Transaction::clear_intents() {
  intents_.Clear();
}
const ::cockroach::roachpb::Span& Transaction::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.intents)
  return intents_.Get(index);
}
::cockroach::roachpb::Span* Transaction::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.intents)
  return intents_.Mutable(index);
}
::cockroach::roachpb::Span* Transaction::add_intents() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Transaction.intents)
  return intents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
Transaction::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Transaction.intents)
  return &intents_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
Transaction::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Transaction.intents)
  return intents_;
}

bool Transaction::has_epoch_zero_timestamp() const {
  return this != internal_default_instance() && epoch_zero_timestamp_ != NULL;
}
void Transaction::clear_epoch_zero_timestamp() {
  if (GetArenaNoVirtual() == NULL && epoch_zero_timestamp_ != NULL) delete epoch_zero_timestamp_;
  epoch_zero_timestamp_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Transaction::epoch_zero_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = epoch_zero_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.epoch_zero_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Transaction::mutable_epoch_zero_timestamp() {
  
  if (epoch_zero_timestamp_ == NULL) {
    epoch_zero_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.epoch_zero_timestamp)
  return epoch_zero_timestamp_;
}
::cockroach::util::hlc::Timestamp* Transaction::release_epoch_zero_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.epoch_zero_timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = epoch_zero_timestamp_;
  epoch_zero_timestamp_ = NULL;
  return temp;
}
void Transaction::set_allocated_epoch_zero_timestamp(::cockroach::util::hlc::Timestamp* epoch_zero_timestamp) {
  delete epoch_zero_timestamp_;
  epoch_zero_timestamp_ = epoch_zero_timestamp;
  if (epoch_zero_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.epoch_zero_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent::kSpanFieldNumber;
const int Intent::kTxnFieldNumber;
const int Intent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent::Intent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Intent)
}
Intent::Intent(const Intent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span()) {
    span_ = new ::cockroach::roachpb::Span(*from.span_);
  } else {
    span_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::cockroach::storage::engine::enginepb::TxnMeta(*from.txn_);
  } else {
    txn_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Intent)
}

void Intent::SharedCtor() {
  ::memset(&span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&span_)) + sizeof(status_));
  _cached_size_ = 0;
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
  if (this != internal_default_instance()) delete span_;
  if (this != internal_default_instance()) delete txn_;
}

void Intent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Intent& Intent::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Intent* Intent::New(::google::protobuf::Arena* arena) const {
  Intent* n = new Intent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Intent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TransactionStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Intent)
  return false;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->span_, output);
  }

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->txn_, output);
  }

  // .cockroach.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Intent)
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Intent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->span_);
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_);
  }

  // .cockroach.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Intent*>(&from));
}

void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    mutable_span()->::cockroach::roachpb::Span::MergeFrom(from.span());
  }
  if (from.has_txn()) {
    mutable_txn()->::cockroach::storage::engine::enginepb::TxnMeta::MergeFrom(from.txn());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::Swap(Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent::InternalSwap(Intent* other) {
  using std::swap;
  swap(span_, other->span_);
  swap(txn_, other->txn_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Intent::GetTypeName() const {
  return "cockroach.roachpb.Intent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Intent

bool Intent::has_span() const {
  return this != internal_default_instance() && span_ != NULL;
}
void Intent::clear_span() {
  if (GetArenaNoVirtual() == NULL && span_ != NULL) delete span_;
  span_ = NULL;
}
const ::cockroach::roachpb::Span& Intent::span() const {
  const ::cockroach::roachpb::Span* p = span_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.span)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Span*>(
      &::cockroach::roachpb::_Span_default_instance_);
}
::cockroach::roachpb::Span* Intent::mutable_span() {
  
  if (span_ == NULL) {
    span_ = new ::cockroach::roachpb::Span;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Intent.span)
  return span_;
}
::cockroach::roachpb::Span* Intent::release_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Intent.span)
  
  ::cockroach::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
void Intent::set_allocated_span(::cockroach::roachpb::Span* span) {
  delete span_;
  span_ = span;
  if (span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Intent.span)
}

bool Intent::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
void Intent::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) delete txn_;
  txn_ = NULL;
}
const ::cockroach::storage::engine::enginepb::TxnMeta& Intent::txn() const {
  const ::cockroach::storage::engine::enginepb::TxnMeta* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::storage::engine::enginepb::TxnMeta*>(
      &::cockroach::storage::engine::enginepb::_TxnMeta_default_instance_);
}
::cockroach::storage::engine::enginepb::TxnMeta* Intent::mutable_txn() {
  
  if (txn_ == NULL) {
    txn_ = new ::cockroach::storage::engine::enginepb::TxnMeta;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Intent.txn)
  return txn_;
}
::cockroach::storage::engine::enginepb::TxnMeta* Intent::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Intent.txn)
  
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
void Intent::set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Intent.txn)
}

// .cockroach.roachpb.TransactionStatus status = 3;
void Intent::clear_status() {
  status_ = 0;
}
::cockroach::roachpb::TransactionStatus Intent::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
void Intent::set_status(::cockroach::roachpb::TransactionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Intent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lease::kStartFieldNumber;
const int Lease::kExpirationFieldNumber;
const int Lease::kReplicaFieldNumber;
const int Lease::kDeprecatedStartStasisFieldNumber;
const int Lease::kProposedTsFieldNumber;
const int Lease::kEpochFieldNumber;
const int Lease::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lease::Lease()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Lease)
}
Lease::Lease(const Lease& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::cockroach::util::hlc::Timestamp(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_expiration()) {
    expiration_ = new ::cockroach::util::hlc::Timestamp(*from.expiration_);
  } else {
    expiration_ = NULL;
  }
  if (from.has_replica()) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  if (from.has_deprecated_start_stasis()) {
    deprecated_start_stasis_ = new ::cockroach::util::hlc::Timestamp(*from.deprecated_start_stasis_);
  } else {
    deprecated_start_stasis_ = NULL;
  }
  if (from.has_proposed_ts()) {
    proposed_ts_ = new ::cockroach::util::hlc::Timestamp(*from.proposed_ts_);
  } else {
    proposed_ts_ = NULL;
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Lease)
}

void Lease::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&start_)) + sizeof(sequence_));
  _cached_size_ = 0;
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Lease)
  SharedDtor();
}

void Lease::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete expiration_;
  if (this != internal_default_instance()) delete replica_;
  if (this != internal_default_instance()) delete deprecated_start_stasis_;
  if (this != internal_default_instance()) delete proposed_ts_;
}

void Lease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lease& Lease::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lease* Lease::New(::google::protobuf::Arena* arena) const {
  Lease* n = new Lease;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lease::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) {
    delete expiration_;
  }
  expiration_ = NULL;
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
  if (GetArenaNoVirtual() == NULL && deprecated_start_stasis_ != NULL) {
    delete deprecated_start_stasis_;
  }
  deprecated_start_stasis_ = NULL;
  if (GetArenaNoVirtual() == NULL && proposed_ts_ != NULL) {
    delete proposed_ts_;
  }
  proposed_ts_ = NULL;
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(sequence_));
  _internal_metadata_.Clear();
}

bool Lease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Lease)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_start_stasis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposed_ts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 epoch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Lease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Lease)
  return false;
#undef DO_
}

void Lease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->start_, output);
  }

  if (this->has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->expiration_, output);
  }

  if (this->has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->replica_, output);
  }

  if (this->has_deprecated_start_stasis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->deprecated_start_stasis_, output);
  }

  if (this->has_proposed_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->proposed_ts_, output);
  }

  // int64 epoch = 6;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->epoch(), output);
  }

  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Lease)
}

size_t Lease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Lease)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  if (this->has_expiration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expiration_);
  }

  if (this->has_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->replica_);
  }

  if (this->has_deprecated_start_stasis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deprecated_start_stasis_);
  }

  if (this->has_proposed_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proposed_ts_);
  }

  // int64 epoch = 6;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->epoch());
  }

  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lease::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lease*>(&from));
}

void Lease::MergeFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::cockroach::util::hlc::Timestamp::MergeFrom(from.start());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::cockroach::util::hlc::Timestamp::MergeFrom(from.expiration());
  }
  if (from.has_replica()) {
    mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
  }
  if (from.has_deprecated_start_stasis()) {
    mutable_deprecated_start_stasis()->::cockroach::util::hlc::Timestamp::MergeFrom(from.deprecated_start_stasis());
  }
  if (from.has_proposed_ts()) {
    mutable_proposed_ts()->::cockroach::util::hlc::Timestamp::MergeFrom(from.proposed_ts());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void Lease::CopyFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {
  return true;
}

void Lease::Swap(Lease* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lease::InternalSwap(Lease* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(expiration_, other->expiration_);
  swap(replica_, other->replica_);
  swap(deprecated_start_stasis_, other->deprecated_start_stasis_);
  swap(proposed_ts_, other->proposed_ts_);
  swap(epoch_, other->epoch_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Lease::GetTypeName() const {
  return "cockroach.roachpb.Lease";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lease

bool Lease::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
void Lease::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Lease::start() const {
  const ::cockroach::util::hlc::Timestamp* p = start_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.start)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Lease::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.start)
  return start_;
}
::cockroach::util::hlc::Timestamp* Lease::release_start() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.start)
  
  ::cockroach::util::hlc::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
void Lease::set_allocated_start(::cockroach::util::hlc::Timestamp* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.start)
}

bool Lease::has_expiration() const {
  return this != internal_default_instance() && expiration_ != NULL;
}
void Lease::clear_expiration() {
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) delete expiration_;
  expiration_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Lease::expiration() const {
  const ::cockroach::util::hlc::Timestamp* p = expiration_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.expiration)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Lease::mutable_expiration() {
  
  if (expiration_ == NULL) {
    expiration_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.expiration)
  return expiration_;
}
::cockroach::util::hlc::Timestamp* Lease::release_expiration() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.expiration)
  
  ::cockroach::util::hlc::Timestamp* temp = expiration_;
  expiration_ = NULL;
  return temp;
}
void Lease::set_allocated_expiration(::cockroach::util::hlc::Timestamp* expiration) {
  delete expiration_;
  expiration_ = expiration;
  if (expiration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.expiration)
}

bool Lease::has_replica() const {
  return this != internal_default_instance() && replica_ != NULL;
}
void Lease::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) delete replica_;
  replica_ = NULL;
}
const ::cockroach::roachpb::ReplicaDescriptor& Lease::replica() const {
  const ::cockroach::roachpb::ReplicaDescriptor* p = replica_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReplicaDescriptor*>(
      &::cockroach::roachpb::_ReplicaDescriptor_default_instance_);
}
::cockroach::roachpb::ReplicaDescriptor* Lease::mutable_replica() {
  
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* Lease::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.replica)
  
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void Lease::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.replica)
}

bool Lease::has_deprecated_start_stasis() const {
  return this != internal_default_instance() && deprecated_start_stasis_ != NULL;
}
void Lease::clear_deprecated_start_stasis() {
  if (GetArenaNoVirtual() == NULL && deprecated_start_stasis_ != NULL) delete deprecated_start_stasis_;
  deprecated_start_stasis_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Lease::deprecated_start_stasis() const {
  const ::cockroach::util::hlc::Timestamp* p = deprecated_start_stasis_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.deprecated_start_stasis)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Lease::mutable_deprecated_start_stasis() {
  
  if (deprecated_start_stasis_ == NULL) {
    deprecated_start_stasis_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.deprecated_start_stasis)
  return deprecated_start_stasis_;
}
::cockroach::util::hlc::Timestamp* Lease::release_deprecated_start_stasis() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.deprecated_start_stasis)
  
  ::cockroach::util::hlc::Timestamp* temp = deprecated_start_stasis_;
  deprecated_start_stasis_ = NULL;
  return temp;
}
void Lease::set_allocated_deprecated_start_stasis(::cockroach::util::hlc::Timestamp* deprecated_start_stasis) {
  delete deprecated_start_stasis_;
  deprecated_start_stasis_ = deprecated_start_stasis;
  if (deprecated_start_stasis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.deprecated_start_stasis)
}

bool Lease::has_proposed_ts() const {
  return this != internal_default_instance() && proposed_ts_ != NULL;
}
void Lease::clear_proposed_ts() {
  if (GetArenaNoVirtual() == NULL && proposed_ts_ != NULL) delete proposed_ts_;
  proposed_ts_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& Lease::proposed_ts() const {
  const ::cockroach::util::hlc::Timestamp* p = proposed_ts_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.proposed_ts)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* Lease::mutable_proposed_ts() {
  
  if (proposed_ts_ == NULL) {
    proposed_ts_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.proposed_ts)
  return proposed_ts_;
}
::cockroach::util::hlc::Timestamp* Lease::release_proposed_ts() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.proposed_ts)
  
  ::cockroach::util::hlc::Timestamp* temp = proposed_ts_;
  proposed_ts_ = NULL;
  return temp;
}
void Lease::set_allocated_proposed_ts(::cockroach::util::hlc::Timestamp* proposed_ts) {
  delete proposed_ts_;
  proposed_ts_ = proposed_ts;
  if (proposed_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.proposed_ts)
}

// int64 epoch = 6;
void Lease::clear_epoch() {
  epoch_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Lease::epoch() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.epoch)
  return epoch_;
}
void Lease::set_epoch(::google::protobuf::int64 value) {
  
  epoch_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Lease.epoch)
}

void Lease::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Lease::sequence() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.sequence)
  return sequence_;
}
void Lease::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Lease.sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbortSpanEntry::kKeyFieldNumber;
const int AbortSpanEntry::kTimestampFieldNumber;
const int AbortSpanEntry::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbortSpanEntry::AbortSpanEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AbortSpanEntry)
}
AbortSpanEntry::AbortSpanEntry(const AbortSpanEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AbortSpanEntry)
}

void AbortSpanEntry::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(priority_));
  _cached_size_ = 0;
}

AbortSpanEntry::~AbortSpanEntry() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AbortSpanEntry)
  SharedDtor();
}

void AbortSpanEntry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void AbortSpanEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AbortSpanEntry& AbortSpanEntry::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbortSpanEntry* AbortSpanEntry::New(::google::protobuf::Arena* arena) const {
  AbortSpanEntry* n = new AbortSpanEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbortSpanEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AbortSpanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  priority_ = 0;
  _internal_metadata_.Clear();
}

bool AbortSpanEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AbortSpanEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AbortSpanEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AbortSpanEntry)
  return false;
#undef DO_
}

void AbortSpanEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AbortSpanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->timestamp_, output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AbortSpanEntry)
}

size_t AbortSpanEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AbortSpanEntry)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbortSpanEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AbortSpanEntry*>(&from));
}

void AbortSpanEntry::MergeFrom(const AbortSpanEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AbortSpanEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void AbortSpanEntry::CopyFrom(const AbortSpanEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AbortSpanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSpanEntry::IsInitialized() const {
  return true;
}

void AbortSpanEntry::Swap(AbortSpanEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbortSpanEntry::InternalSwap(AbortSpanEntry* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(timestamp_, other->timestamp_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string AbortSpanEntry::GetTypeName() const {
  return "cockroach.roachpb.AbortSpanEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbortSpanEntry

void AbortSpanEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AbortSpanEntry::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AbortSpanEntry.key)
  return key_.GetNoArena();
}
void AbortSpanEntry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AbortSpanEntry.key)
}
#if LANG_CXX11
void AbortSpanEntry::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.AbortSpanEntry.key)
}
#endif
void AbortSpanEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.AbortSpanEntry.key)
}
void AbortSpanEntry::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.AbortSpanEntry.key)
}
::std::string* AbortSpanEntry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AbortSpanEntry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AbortSpanEntry::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AbortSpanEntry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AbortSpanEntry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AbortSpanEntry.key)
}

bool AbortSpanEntry::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void AbortSpanEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::cockroach::util::hlc::Timestamp& AbortSpanEntry::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AbortSpanEntry.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
::cockroach::util::hlc::Timestamp* AbortSpanEntry::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AbortSpanEntry.timestamp)
  return timestamp_;
}
::cockroach::util::hlc::Timestamp* AbortSpanEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AbortSpanEntry.timestamp)
  
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void AbortSpanEntry::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AbortSpanEntry.timestamp)
}

// int32 priority = 3;
void AbortSpanEntry::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 AbortSpanEntry::priority() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AbortSpanEntry.priority)
  return priority_;
}
void AbortSpanEntry::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AbortSpanEntry.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnCoordMeta::kTxnFieldNumber;
const int TxnCoordMeta::kIntentsFieldNumber;
const int TxnCoordMeta::kCommandCountFieldNumber;
const int TxnCoordMeta::kRefreshReadsFieldNumber;
const int TxnCoordMeta::kRefreshWritesFieldNumber;
const int TxnCoordMeta::kRefreshValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnCoordMeta::TxnCoordMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roachpb_2fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TxnCoordMeta)
}
TxnCoordMeta::TxnCoordMeta(const TxnCoordMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      intents_(from.intents_),
      refresh_reads_(from.refresh_reads_),
      refresh_writes_(from.refresh_writes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_txn()) {
    txn_ = new ::cockroach::roachpb::Transaction(*from.txn_);
  } else {
    txn_ = NULL;
  }
  ::memcpy(&command_count_, &from.command_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_valid_) -
    reinterpret_cast<char*>(&command_count_)) + sizeof(refresh_valid_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TxnCoordMeta)
}

void TxnCoordMeta::SharedCtor() {
  ::memset(&txn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_valid_) -
      reinterpret_cast<char*>(&txn_)) + sizeof(refresh_valid_));
  _cached_size_ = 0;
}

TxnCoordMeta::~TxnCoordMeta() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TxnCoordMeta)
  SharedDtor();
}

void TxnCoordMeta::SharedDtor() {
  if (this != internal_default_instance()) delete txn_;
}

void TxnCoordMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TxnCoordMeta& TxnCoordMeta::default_instance() {
  protobuf_roachpb_2fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnCoordMeta* TxnCoordMeta::New(::google::protobuf::Arena* arena) const {
  TxnCoordMeta* n = new TxnCoordMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnCoordMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TxnCoordMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intents_.Clear();
  refresh_reads_.Clear();
  refresh_writes_.Clear();
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  ::memset(&command_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_valid_) -
      reinterpret_cast<char*>(&command_count_)) + sizeof(refresh_valid_));
  _internal_metadata_.Clear();
}

bool TxnCoordMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TxnCoordMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 command_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refresh_reads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refresh_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool refresh_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TxnCoordMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TxnCoordMeta)
  return false;
#undef DO_
}

void TxnCoordMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TxnCoordMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->txn_, output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->intents(static_cast<int>(i)), output);
  }

  // int32 command_count = 3;
  if (this->command_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->command_count(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refresh_reads_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->refresh_reads(static_cast<int>(i)), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refresh_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->refresh_writes(static_cast<int>(i)), output);
  }

  // bool refresh_valid = 6;
  if (this->refresh_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->refresh_valid(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TxnCoordMeta)
}

size_t TxnCoordMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TxnCoordMeta)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->intents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intents(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->refresh_reads_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refresh_reads(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->refresh_writes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refresh_writes(static_cast<int>(i)));
    }
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_);
  }

  // int32 command_count = 3;
  if (this->command_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command_count());
  }

  // bool refresh_valid = 6;
  if (this->refresh_valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnCoordMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnCoordMeta*>(&from));
}

void TxnCoordMeta::MergeFrom(const TxnCoordMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TxnCoordMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intents_.MergeFrom(from.intents_);
  refresh_reads_.MergeFrom(from.refresh_reads_);
  refresh_writes_.MergeFrom(from.refresh_writes_);
  if (from.has_txn()) {
    mutable_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.txn());
  }
  if (from.command_count() != 0) {
    set_command_count(from.command_count());
  }
  if (from.refresh_valid() != 0) {
    set_refresh_valid(from.refresh_valid());
  }
}

void TxnCoordMeta::CopyFrom(const TxnCoordMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TxnCoordMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnCoordMeta::IsInitialized() const {
  return true;
}

void TxnCoordMeta::Swap(TxnCoordMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnCoordMeta::InternalSwap(TxnCoordMeta* other) {
  using std::swap;
  intents_.InternalSwap(&other->intents_);
  refresh_reads_.InternalSwap(&other->refresh_reads_);
  refresh_writes_.InternalSwap(&other->refresh_writes_);
  swap(txn_, other->txn_);
  swap(command_count_, other->command_count_);
  swap(refresh_valid_, other->refresh_valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TxnCoordMeta::GetTypeName() const {
  return "cockroach.roachpb.TxnCoordMeta";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnCoordMeta

bool TxnCoordMeta::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
void TxnCoordMeta::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) delete txn_;
  txn_ = NULL;
}
const ::cockroach::roachpb::Transaction& TxnCoordMeta::txn() const {
  const ::cockroach::roachpb::Transaction* p = txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnCoordMeta.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
::cockroach::roachpb::Transaction* TxnCoordMeta::mutable_txn() {
  
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TxnCoordMeta.txn)
  return txn_;
}
::cockroach::roachpb::Transaction* TxnCoordMeta::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.TxnCoordMeta.txn)
  
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
void TxnCoordMeta::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TxnCoordMeta.txn)
}

int TxnCoordMeta::intents_size() const {
  return intents_.size();
}
void TxnCoordMeta::clear_intents() {
  intents_.Clear();
}
const ::cockroach::roachpb::Span& TxnCoordMeta::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnCoordMeta.intents)
  return intents_.Get(index);
}
::cockroach::roachpb::Span* TxnCoordMeta::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TxnCoordMeta.intents)
  return intents_.Mutable(index);
}
::cockroach::roachpb::Span* TxnCoordMeta::add_intents() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.TxnCoordMeta.intents)
  return intents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
TxnCoordMeta::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.TxnCoordMeta.intents)
  return &intents_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
TxnCoordMeta::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.TxnCoordMeta.intents)
  return intents_;
}

// int32 command_count = 3;
void TxnCoordMeta::clear_command_count() {
  command_count_ = 0;
}
::google::protobuf::int32 TxnCoordMeta::command_count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnCoordMeta.command_count)
  return command_count_;
}
void TxnCoordMeta::set_command_count(::google::protobuf::int32 value) {
  
  command_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TxnCoordMeta.command_count)
}

int TxnCoordMeta::refresh_reads_size() const {
  return refresh_reads_.size();
}
void TxnCoordMeta::clear_refresh_reads() {
  refresh_reads_.Clear();
}
const ::cockroach::roachpb::Span& TxnCoordMeta::refresh_reads(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnCoordMeta.refresh_reads)
  return refresh_reads_.Get(index);
}
::cockroach::roachpb::Span* TxnCoordMeta::mutable_refresh_reads(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TxnCoordMeta.refresh_reads)
  return refresh_reads_.Mutable(index);
}
::cockroach::roachpb::Span* TxnCoordMeta::add_refresh_reads() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.TxnCoordMeta.refresh_reads)
  return refresh_reads_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
TxnCoordMeta::mutable_refresh_reads() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.TxnCoordMeta.refresh_reads)
  return &refresh_reads_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
TxnCoordMeta::refresh_reads() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.TxnCoordMeta.refresh_reads)
  return refresh_reads_;
}

int TxnCoordMeta::refresh_writes_size() const {
  return refresh_writes_.size();
}
void TxnCoordMeta::clear_refresh_writes() {
  refresh_writes_.Clear();
}
const ::cockroach::roachpb::Span& TxnCoordMeta::refresh_writes(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnCoordMeta.refresh_writes)
  return refresh_writes_.Get(index);
}
::cockroach::roachpb::Span* TxnCoordMeta::mutable_refresh_writes(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TxnCoordMeta.refresh_writes)
  return refresh_writes_.Mutable(index);
}
::cockroach::roachpb::Span* TxnCoordMeta::add_refresh_writes() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.TxnCoordMeta.refresh_writes)
  return refresh_writes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
TxnCoordMeta::mutable_refresh_writes() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.TxnCoordMeta.refresh_writes)
  return &refresh_writes_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
TxnCoordMeta::refresh_writes() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.TxnCoordMeta.refresh_writes)
  return refresh_writes_;
}

// bool refresh_valid = 6;
void TxnCoordMeta::clear_refresh_valid() {
  refresh_valid_ = false;
}
bool TxnCoordMeta::refresh_valid() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnCoordMeta.refresh_valid)
  return refresh_valid_;
}
void TxnCoordMeta::set_refresh_valid(bool value) {
  
  refresh_valid_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TxnCoordMeta.refresh_valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
