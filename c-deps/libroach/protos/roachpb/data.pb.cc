// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/data.proto

#include "roachpb/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_roachpb_2fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SequencedWrite;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Span;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ModifiedSpanTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ObservedTimestamp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SplitTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StickyBitTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ChangeReplicasTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MergeTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Transaction;
}  // namespace protobuf_roachpb_2fdata_2eproto
namespace protobuf_roachpb_2fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaDescriptor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RangeDescriptor;
}  // namespace protobuf_roachpb_2fmetadata_2eproto
namespace protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TxnMeta;
}  // namespace protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto
namespace protobuf_storage_2fengine_2fenginepb_2fmvcc_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fengine_2fenginepb_2fmvcc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MVCCStats;
}  // namespace protobuf_storage_2fengine_2fenginepb_2fmvcc_2eproto
namespace protobuf_util_2fhlc_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2fhlc_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_util_2fhlc_2ftimestamp_2eproto
namespace cockroach {
namespace roachpb {
class SpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span>
      _instance;
} _Span_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value>
      _instance;
} _Value_default_instance_;
class KeyValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyValue>
      _instance;
} _KeyValue_default_instance_;
class StoreIdentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreIdent>
      _instance;
} _StoreIdent_default_instance_;
class SplitTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitTrigger>
      _instance;
} _SplitTrigger_default_instance_;
class MergeTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MergeTrigger>
      _instance;
} _MergeTrigger_default_instance_;
class ChangeReplicasTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeReplicasTrigger>
      _instance;
} _ChangeReplicasTrigger_default_instance_;
class ModifiedSpanTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifiedSpanTrigger>
      _instance;
} _ModifiedSpanTrigger_default_instance_;
class StickyBitTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StickyBitTrigger>
      _instance;
} _StickyBitTrigger_default_instance_;
class InternalCommitTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalCommitTrigger>
      _instance;
} _InternalCommitTrigger_default_instance_;
class ObservedTimestampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservedTimestamp>
      _instance;
} _ObservedTimestamp_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transaction>
      _instance;
} _Transaction_default_instance_;
class TransactionRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionRecord>
      _instance;
} _TransactionRecord_default_instance_;
class IntentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Intent>
      _instance;
} _Intent_default_instance_;
class SequencedWriteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequencedWrite>
      _instance;
} _SequencedWrite_default_instance_;
class LeaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lease>
      _instance;
} _Lease_default_instance_;
class AbortSpanEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AbortSpanEntry>
      _instance;
} _AbortSpanEntry_default_instance_;
class TxnCoordMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxnCoordMeta>
      _instance;
} _TxnCoordMeta_default_instance_;
}  // namespace roachpb
}  // namespace cockroach
namespace protobuf_roachpb_2fdata_2eproto {
static void InitDefaultsSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_Span_default_instance_;
    new (ptr) ::cockroach::roachpb::Span();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::Span::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Span =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpan}, {}};

static void InitDefaultsValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_Value_default_instance_;
    new (ptr) ::cockroach::roachpb::Value();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::Value::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Value =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValue}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsKeyValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_KeyValue_default_instance_;
    new (ptr) ::cockroach::roachpb::KeyValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::KeyValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KeyValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKeyValue}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsStoreIdent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_StoreIdent_default_instance_;
    new (ptr) ::cockroach::roachpb::StoreIdent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::StoreIdent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StoreIdent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStoreIdent}, {}};

static void InitDefaultsSplitTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_SplitTrigger_default_instance_;
    new (ptr) ::cockroach::roachpb::SplitTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::SplitTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SplitTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSplitTrigger}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,}};

static void InitDefaultsMergeTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_MergeTrigger_default_instance_;
    new (ptr) ::cockroach::roachpb::MergeTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::MergeTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MergeTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMergeTrigger}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc_2eproto::scc_info_MVCCStats.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsChangeReplicasTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ChangeReplicasTrigger_default_instance_;
    new (ptr) ::cockroach::roachpb::ChangeReplicasTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ChangeReplicasTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ChangeReplicasTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChangeReplicasTrigger}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,}};

static void InitDefaultsModifiedSpanTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ModifiedSpanTrigger_default_instance_;
    new (ptr) ::cockroach::roachpb::ModifiedSpanTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ModifiedSpanTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ModifiedSpanTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsModifiedSpanTrigger}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,}};

static void InitDefaultsStickyBitTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_StickyBitTrigger_default_instance_;
    new (ptr) ::cockroach::roachpb::StickyBitTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::StickyBitTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StickyBitTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStickyBitTrigger}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsInternalCommitTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_InternalCommitTrigger_default_instance_;
    new (ptr) ::cockroach::roachpb::InternalCommitTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::InternalCommitTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_InternalCommitTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsInternalCommitTrigger}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_SplitTrigger.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_MergeTrigger.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_ChangeReplicasTrigger.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_ModifiedSpanTrigger.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_StickyBitTrigger.base,}};

static void InitDefaultsObservedTimestamp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ObservedTimestamp_default_instance_;
    new (ptr) ::cockroach::roachpb::ObservedTimestamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ObservedTimestamp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObservedTimestamp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObservedTimestamp}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_Transaction_default_instance_;
    new (ptr) ::cockroach::roachpb::Transaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::Transaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Transaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsTransaction}, {
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_ObservedTimestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base,}};

static void InitDefaultsTransactionRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TransactionRecord_default_instance_;
    new (ptr) ::cockroach::roachpb::TransactionRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TransactionRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TransactionRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTransactionRecord}, {
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base,}};

static void InitDefaultsIntent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_Intent_default_instance_;
    new (ptr) ::cockroach::roachpb::Intent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::Intent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Intent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsIntent}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,}};

static void InitDefaultsSequencedWrite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_SequencedWrite_default_instance_;
    new (ptr) ::cockroach::roachpb::SequencedWrite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::SequencedWrite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SequencedWrite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSequencedWrite}, {}};

static void InitDefaultsLease() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_Lease_default_instance_;
    new (ptr) ::cockroach::roachpb::Lease();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::Lease::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Lease =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLease}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,}};

static void InitDefaultsAbortSpanEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AbortSpanEntry_default_instance_;
    new (ptr) ::cockroach::roachpb::AbortSpanEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AbortSpanEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AbortSpanEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAbortSpanEntry}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsTxnCoordMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TxnCoordMeta_default_instance_;
    new (ptr) ::cockroach::roachpb::TxnCoordMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TxnCoordMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TxnCoordMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTxnCoordMeta}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Span.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreIdent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplitTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MergeTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeReplicasTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModifiedSpanTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StickyBitTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InternalCommitTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObservedTimestamp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Intent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequencedWrite.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lease.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AbortSpanEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxnCoordMeta.base);
}

}  // namespace protobuf_roachpb_2fdata_2eproto
namespace cockroach {
namespace roachpb {
bool ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 100:
      return true;
    default:
      return false;
  }
}

bool ReplicaChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool TransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Span::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kKeyFieldNumber;
const int Span::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Span)
}
Span::Span(const Span& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Span)
}

void Span::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span& Span::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Span.base);
  return *internal_default_instance();
}


void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Span)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Span)
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Span)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Span*>(&from));
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_key_.Swap(&other->end_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Span::GetTypeName() const {
  return "cockroach.roachpb.Span";
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::cockroach::roachpb::_Value_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void Value::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kRawBytesFieldNumber;
const int Value::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_bytes().size() > 0) {
    raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Value)
}

void Value::SharedCtor() {
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  raw_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Value.base);
  return *internal_default_instance();
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Value)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes raw_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw_bytes = 1;
  if (this->raw_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw_bytes(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Value)
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Value)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes raw_bytes = 1;
  if (this->raw_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_bytes());
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Value*>(&from));
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_bytes().size() > 0) {

    raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  using std::swap;
  raw_bytes_.Swap(&other->raw_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Value::GetTypeName() const {
  return "cockroach.roachpb.Value";
}


// ===================================================================

void KeyValue::InitAsDefaultInstance() {
  ::cockroach::roachpb::_KeyValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_KeyValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::cockroach::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.KeyValue)
}

void KeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_KeyValue.base);
  return *internal_default_instance();
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.KeyValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.KeyValue)
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.KeyValue)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyValue*>(&from));
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
  }
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string KeyValue::GetTypeName() const {
  return "cockroach.roachpb.KeyValue";
}


// ===================================================================

void StoreIdent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kNodeIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreIdent::StoreIdent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_StoreIdent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreIdent)
}
StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreIdent)
}

void StoreIdent::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoreIdent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreIdent& StoreIdent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_StoreIdent.base);
  return *internal_default_instance();
}


void StoreIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  _internal_metadata_.Clear();
}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreIdent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cluster_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cluster_id(), output);
  }

  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->store_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreIdent)
}

size_t StoreIdent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreIdent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cluster_id());
  }

  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreIdent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreIdent*>(&from));
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreIdent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIdent::IsInitialized() const {
  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreIdent::InternalSwap(StoreIdent* other) {
  using std::swap;
  cluster_id_.Swap(&other->cluster_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(store_id_, other->store_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StoreIdent::GetTypeName() const {
  return "cockroach.roachpb.StoreIdent";
}


// ===================================================================

void SplitTrigger::InitAsDefaultInstance() {
  ::cockroach::roachpb::_SplitTrigger_default_instance_._instance.get_mutable()->left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  ::cockroach::roachpb::_SplitTrigger_default_instance_._instance.get_mutable()->right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
}
void SplitTrigger::clear_left_desc() {
  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
}
void SplitTrigger::clear_right_desc() {
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitTrigger::kLeftDescFieldNumber;
const int SplitTrigger::kRightDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitTrigger::SplitTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_SplitTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SplitTrigger)
}
SplitTrigger::SplitTrigger(const SplitTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_desc()) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.left_desc_);
  } else {
    left_desc_ = NULL;
  }
  if (from.has_right_desc()) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.right_desc_);
  } else {
    right_desc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SplitTrigger)
}

void SplitTrigger::SharedCtor() {
  ::memset(&left_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_desc_) -
      reinterpret_cast<char*>(&left_desc_)) + sizeof(right_desc_));
}

SplitTrigger::~SplitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SplitTrigger)
  SharedDtor();
}

void SplitTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete left_desc_;
  if (this != internal_default_instance()) delete right_desc_;
}

void SplitTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitTrigger& SplitTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_SplitTrigger.base);
  return *internal_default_instance();
}


void SplitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.SplitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
  _internal_metadata_.Clear();
}

bool SplitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SplitTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SplitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SplitTrigger)
  return false;
#undef DO_
}

void SplitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SplitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_left_desc(), output);
  }

  if (this->has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_right_desc(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SplitTrigger)
}

size_t SplitTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.SplitTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_left_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_desc_);
  }

  if (this->has_right_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_desc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SplitTrigger*>(&from));
}

void SplitTrigger::MergeFrom(const SplitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.SplitTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_desc()) {
    mutable_left_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
  }
  if (from.has_right_desc()) {
    mutable_right_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
  }
}

void SplitTrigger::CopyFrom(const SplitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.SplitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitTrigger::IsInitialized() const {
  return true;
}

void SplitTrigger::Swap(SplitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitTrigger::InternalSwap(SplitTrigger* other) {
  using std::swap;
  swap(left_desc_, other->left_desc_);
  swap(right_desc_, other->right_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SplitTrigger::GetTypeName() const {
  return "cockroach.roachpb.SplitTrigger";
}


// ===================================================================

void MergeTrigger::InitAsDefaultInstance() {
  ::cockroach::roachpb::_MergeTrigger_default_instance_._instance.get_mutable()->left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  ::cockroach::roachpb::_MergeTrigger_default_instance_._instance.get_mutable()->right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  ::cockroach::roachpb::_MergeTrigger_default_instance_._instance.get_mutable()->right_mvcc_stats_ = const_cast< ::cockroach::storage::engine::enginepb::MVCCStats*>(
      ::cockroach::storage::engine::enginepb::MVCCStats::internal_default_instance());
  ::cockroach::roachpb::_MergeTrigger_default_instance_._instance.get_mutable()->freeze_start_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void MergeTrigger::clear_left_desc() {
  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
}
void MergeTrigger::clear_right_desc() {
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
}
void MergeTrigger::clear_right_mvcc_stats() {
  if (GetArenaNoVirtual() == NULL && right_mvcc_stats_ != NULL) {
    delete right_mvcc_stats_;
  }
  right_mvcc_stats_ = NULL;
}
void MergeTrigger::clear_freeze_start() {
  if (GetArenaNoVirtual() == NULL && freeze_start_ != NULL) {
    delete freeze_start_;
  }
  freeze_start_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeTrigger::kLeftDescFieldNumber;
const int MergeTrigger::kRightDescFieldNumber;
const int MergeTrigger::kRightMvccStatsFieldNumber;
const int MergeTrigger::kFreezeStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeTrigger::MergeTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_MergeTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.MergeTrigger)
}
MergeTrigger::MergeTrigger(const MergeTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_desc()) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.left_desc_);
  } else {
    left_desc_ = NULL;
  }
  if (from.has_right_desc()) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.right_desc_);
  } else {
    right_desc_ = NULL;
  }
  if (from.has_right_mvcc_stats()) {
    right_mvcc_stats_ = new ::cockroach::storage::engine::enginepb::MVCCStats(*from.right_mvcc_stats_);
  } else {
    right_mvcc_stats_ = NULL;
  }
  if (from.has_freeze_start()) {
    freeze_start_ = new ::cockroach::util::hlc::Timestamp(*from.freeze_start_);
  } else {
    freeze_start_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.MergeTrigger)
}

void MergeTrigger::SharedCtor() {
  ::memset(&left_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freeze_start_) -
      reinterpret_cast<char*>(&left_desc_)) + sizeof(freeze_start_));
}

MergeTrigger::~MergeTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.MergeTrigger)
  SharedDtor();
}

void MergeTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete left_desc_;
  if (this != internal_default_instance()) delete right_desc_;
  if (this != internal_default_instance()) delete right_mvcc_stats_;
  if (this != internal_default_instance()) delete freeze_start_;
}

void MergeTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeTrigger& MergeTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_MergeTrigger.base);
  return *internal_default_instance();
}


void MergeTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.MergeTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_mvcc_stats_ != NULL) {
    delete right_mvcc_stats_;
  }
  right_mvcc_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && freeze_start_ != NULL) {
    delete freeze_start_;
  }
  freeze_start_ = NULL;
  _internal_metadata_.Clear();
}

bool MergeTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.MergeTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_mvcc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freeze_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.MergeTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.MergeTrigger)
  return false;
#undef DO_
}

void MergeTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.MergeTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_left_desc(), output);
  }

  if (this->has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_right_desc(), output);
  }

  if (this->has_right_mvcc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_right_mvcc_stats(), output);
  }

  if (this->has_freeze_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_freeze_start(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.MergeTrigger)
}

size_t MergeTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.MergeTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_left_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_desc_);
  }

  if (this->has_right_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_desc_);
  }

  if (this->has_right_mvcc_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_mvcc_stats_);
  }

  if (this->has_freeze_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freeze_start_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeTrigger*>(&from));
}

void MergeTrigger::MergeFrom(const MergeTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.MergeTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_desc()) {
    mutable_left_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
  }
  if (from.has_right_desc()) {
    mutable_right_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
  }
  if (from.has_right_mvcc_stats()) {
    mutable_right_mvcc_stats()->::cockroach::storage::engine::enginepb::MVCCStats::MergeFrom(from.right_mvcc_stats());
  }
  if (from.has_freeze_start()) {
    mutable_freeze_start()->::cockroach::util::hlc::Timestamp::MergeFrom(from.freeze_start());
  }
}

void MergeTrigger::CopyFrom(const MergeTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.MergeTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTrigger::IsInitialized() const {
  return true;
}

void MergeTrigger::Swap(MergeTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeTrigger::InternalSwap(MergeTrigger* other) {
  using std::swap;
  swap(left_desc_, other->left_desc_);
  swap(right_desc_, other->right_desc_);
  swap(right_mvcc_stats_, other->right_mvcc_stats_);
  swap(freeze_start_, other->freeze_start_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MergeTrigger::GetTypeName() const {
  return "cockroach.roachpb.MergeTrigger";
}


// ===================================================================

void ChangeReplicasTrigger::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ChangeReplicasTrigger_default_instance_._instance.get_mutable()->deprecated_replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
  ::cockroach::roachpb::_ChangeReplicasTrigger_default_instance_._instance.get_mutable()->desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
}
void ChangeReplicasTrigger::clear_deprecated_replica() {
  if (GetArenaNoVirtual() == NULL && deprecated_replica_ != NULL) {
    delete deprecated_replica_;
  }
  deprecated_replica_ = NULL;
}
void ChangeReplicasTrigger::clear_deprecated_updated_replicas() {
  deprecated_updated_replicas_.Clear();
}
void ChangeReplicasTrigger::clear_desc() {
  if (GetArenaNoVirtual() == NULL && desc_ != NULL) {
    delete desc_;
  }
  desc_ = NULL;
}
void ChangeReplicasTrigger::clear_internal_added_replicas() {
  internal_added_replicas_.Clear();
}
void ChangeReplicasTrigger::clear_internal_removed_replicas() {
  internal_removed_replicas_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeReplicasTrigger::kDeprecatedChangeTypeFieldNumber;
const int ChangeReplicasTrigger::kDeprecatedReplicaFieldNumber;
const int ChangeReplicasTrigger::kDeprecatedUpdatedReplicasFieldNumber;
const int ChangeReplicasTrigger::kDeprecatedNextReplicaIdFieldNumber;
const int ChangeReplicasTrigger::kDescFieldNumber;
const int ChangeReplicasTrigger::kInternalAddedReplicasFieldNumber;
const int ChangeReplicasTrigger::kInternalRemovedReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeReplicasTrigger::ChangeReplicasTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_ChangeReplicasTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ChangeReplicasTrigger)
}
ChangeReplicasTrigger::ChangeReplicasTrigger(const ChangeReplicasTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      deprecated_updated_replicas_(from.deprecated_updated_replicas_),
      internal_added_replicas_(from.internal_added_replicas_),
      internal_removed_replicas_(from.internal_removed_replicas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_deprecated_replica()) {
    deprecated_replica_ = new ::cockroach::roachpb::ReplicaDescriptor(*from.deprecated_replica_);
  } else {
    deprecated_replica_ = NULL;
  }
  if (from.has_desc()) {
    desc_ = new ::cockroach::roachpb::RangeDescriptor(*from.desc_);
  } else {
    desc_ = NULL;
  }
  ::memcpy(&deprecated_change_type_, &from.deprecated_change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_next_replica_id_) -
    reinterpret_cast<char*>(&deprecated_change_type_)) + sizeof(deprecated_next_replica_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::SharedCtor() {
  ::memset(&deprecated_replica_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_next_replica_id_) -
      reinterpret_cast<char*>(&deprecated_replica_)) + sizeof(deprecated_next_replica_id_));
}

ChangeReplicasTrigger::~ChangeReplicasTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ChangeReplicasTrigger)
  SharedDtor();
}

void ChangeReplicasTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete deprecated_replica_;
  if (this != internal_default_instance()) delete desc_;
}

void ChangeReplicasTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeReplicasTrigger& ChangeReplicasTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_ChangeReplicasTrigger.base);
  return *internal_default_instance();
}


void ChangeReplicasTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ChangeReplicasTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_updated_replicas_.Clear();
  internal_added_replicas_.Clear();
  internal_removed_replicas_.Clear();
  if (GetArenaNoVirtual() == NULL && deprecated_replica_ != NULL) {
    delete deprecated_replica_;
  }
  deprecated_replica_ = NULL;
  if (GetArenaNoVirtual() == NULL && desc_ != NULL) {
    delete desc_;
  }
  desc_ = NULL;
  ::memset(&deprecated_change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_next_replica_id_) -
      reinterpret_cast<char*>(&deprecated_change_type_)) + sizeof(deprecated_next_replica_id_));
  _internal_metadata_.Clear();
}

bool ChangeReplicasTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ChangeReplicasTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.ReplicaChangeType deprecated_change_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_deprecated_change_type(static_cast< ::cockroach::roachpb::ReplicaChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deprecated_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deprecated_updated_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_next_replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.RangeDescriptor desc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_internal_added_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_internal_removed_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ChangeReplicasTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ChangeReplicasTrigger)
  return false;
#undef DO_
}

void ChangeReplicasTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ChangeReplicasTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.ReplicaChangeType deprecated_change_type = 1;
  if (this->deprecated_change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->deprecated_change_type(), output);
  }

  if (this->has_deprecated_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_deprecated_replica(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deprecated_updated_replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->deprecated_updated_replicas(static_cast<int>(i)),
      output);
  }

  if (this->deprecated_next_replica_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deprecated_next_replica_id(), output);
  }

  // .cockroach.roachpb.RangeDescriptor desc = 5;
  if (this->has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_desc(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_added_replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6,
      this->internal_added_replicas(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_removed_replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->internal_removed_replicas(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ChangeReplicasTrigger)
}

size_t ChangeReplicasTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ChangeReplicasTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->deprecated_updated_replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deprecated_updated_replicas(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->internal_added_replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->internal_added_replicas(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->internal_removed_replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->internal_removed_replicas(static_cast<int>(i)));
    }
  }

  if (this->has_deprecated_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deprecated_replica_);
  }

  // .cockroach.roachpb.RangeDescriptor desc = 5;
  if (this->has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *desc_);
  }

  // .cockroach.roachpb.ReplicaChangeType deprecated_change_type = 1;
  if (this->deprecated_change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->deprecated_change_type());
  }

  if (this->deprecated_next_replica_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deprecated_next_replica_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeReplicasTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeReplicasTrigger*>(&from));
}

void ChangeReplicasTrigger::MergeFrom(const ChangeReplicasTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ChangeReplicasTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_updated_replicas_.MergeFrom(from.deprecated_updated_replicas_);
  internal_added_replicas_.MergeFrom(from.internal_added_replicas_);
  internal_removed_replicas_.MergeFrom(from.internal_removed_replicas_);
  if (from.has_deprecated_replica()) {
    mutable_deprecated_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.deprecated_replica());
  }
  if (from.has_desc()) {
    mutable_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.desc());
  }
  if (from.deprecated_change_type() != 0) {
    set_deprecated_change_type(from.deprecated_change_type());
  }
  if (from.deprecated_next_replica_id() != 0) {
    set_deprecated_next_replica_id(from.deprecated_next_replica_id());
  }
}

void ChangeReplicasTrigger::CopyFrom(const ChangeReplicasTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ChangeReplicasTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeReplicasTrigger::IsInitialized() const {
  return true;
}

void ChangeReplicasTrigger::Swap(ChangeReplicasTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeReplicasTrigger::InternalSwap(ChangeReplicasTrigger* other) {
  using std::swap;
  CastToBase(&deprecated_updated_replicas_)->InternalSwap(CastToBase(&other->deprecated_updated_replicas_));
  CastToBase(&internal_added_replicas_)->InternalSwap(CastToBase(&other->internal_added_replicas_));
  CastToBase(&internal_removed_replicas_)->InternalSwap(CastToBase(&other->internal_removed_replicas_));
  swap(deprecated_replica_, other->deprecated_replica_);
  swap(desc_, other->desc_);
  swap(deprecated_change_type_, other->deprecated_change_type_);
  swap(deprecated_next_replica_id_, other->deprecated_next_replica_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ChangeReplicasTrigger::GetTypeName() const {
  return "cockroach.roachpb.ChangeReplicasTrigger";
}


// ===================================================================

void ModifiedSpanTrigger::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ModifiedSpanTrigger_default_instance_._instance.get_mutable()->node_liveness_span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifiedSpanTrigger::kSystemConfigSpanFieldNumber;
const int ModifiedSpanTrigger::kNodeLivenessSpanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifiedSpanTrigger::ModifiedSpanTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_ModifiedSpanTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ModifiedSpanTrigger)
}
ModifiedSpanTrigger::ModifiedSpanTrigger(const ModifiedSpanTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_liveness_span()) {
    node_liveness_span_ = new ::cockroach::roachpb::Span(*from.node_liveness_span_);
  } else {
    node_liveness_span_ = NULL;
  }
  system_config_span_ = from.system_config_span_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ModifiedSpanTrigger)
}

void ModifiedSpanTrigger::SharedCtor() {
  ::memset(&node_liveness_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_config_span_) -
      reinterpret_cast<char*>(&node_liveness_span_)) + sizeof(system_config_span_));
}

ModifiedSpanTrigger::~ModifiedSpanTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ModifiedSpanTrigger)
  SharedDtor();
}

void ModifiedSpanTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete node_liveness_span_;
}

void ModifiedSpanTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifiedSpanTrigger& ModifiedSpanTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_ModifiedSpanTrigger.base);
  return *internal_default_instance();
}


void ModifiedSpanTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ModifiedSpanTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_liveness_span_ != NULL) {
    delete node_liveness_span_;
  }
  node_liveness_span_ = NULL;
  system_config_span_ = false;
  _internal_metadata_.Clear();
}

bool ModifiedSpanTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ModifiedSpanTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool system_config_span = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_config_span_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.Span node_liveness_span = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_liveness_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ModifiedSpanTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ModifiedSpanTrigger)
  return false;
#undef DO_
}

void ModifiedSpanTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ModifiedSpanTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool system_config_span = 1;
  if (this->system_config_span() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->system_config_span(), output);
  }

  // .cockroach.roachpb.Span node_liveness_span = 2;
  if (this->has_node_liveness_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_node_liveness_span(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ModifiedSpanTrigger)
}

size_t ModifiedSpanTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ModifiedSpanTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .cockroach.roachpb.Span node_liveness_span = 2;
  if (this->has_node_liveness_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_liveness_span_);
  }

  // bool system_config_span = 1;
  if (this->system_config_span() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifiedSpanTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModifiedSpanTrigger*>(&from));
}

void ModifiedSpanTrigger::MergeFrom(const ModifiedSpanTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ModifiedSpanTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_liveness_span()) {
    mutable_node_liveness_span()->::cockroach::roachpb::Span::MergeFrom(from.node_liveness_span());
  }
  if (from.system_config_span() != 0) {
    set_system_config_span(from.system_config_span());
  }
}

void ModifiedSpanTrigger::CopyFrom(const ModifiedSpanTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ModifiedSpanTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifiedSpanTrigger::IsInitialized() const {
  return true;
}

void ModifiedSpanTrigger::Swap(ModifiedSpanTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifiedSpanTrigger::InternalSwap(ModifiedSpanTrigger* other) {
  using std::swap;
  swap(node_liveness_span_, other->node_liveness_span_);
  swap(system_config_span_, other->system_config_span_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ModifiedSpanTrigger::GetTypeName() const {
  return "cockroach.roachpb.ModifiedSpanTrigger";
}


// ===================================================================

void StickyBitTrigger::InitAsDefaultInstance() {
  ::cockroach::roachpb::_StickyBitTrigger_default_instance_._instance.get_mutable()->sticky_bit_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void StickyBitTrigger::clear_sticky_bit() {
  if (GetArenaNoVirtual() == NULL && sticky_bit_ != NULL) {
    delete sticky_bit_;
  }
  sticky_bit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StickyBitTrigger::kStickyBitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StickyBitTrigger::StickyBitTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_StickyBitTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StickyBitTrigger)
}
StickyBitTrigger::StickyBitTrigger(const StickyBitTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sticky_bit()) {
    sticky_bit_ = new ::cockroach::util::hlc::Timestamp(*from.sticky_bit_);
  } else {
    sticky_bit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StickyBitTrigger)
}

void StickyBitTrigger::SharedCtor() {
  sticky_bit_ = NULL;
}

StickyBitTrigger::~StickyBitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StickyBitTrigger)
  SharedDtor();
}

void StickyBitTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete sticky_bit_;
}

void StickyBitTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StickyBitTrigger& StickyBitTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_StickyBitTrigger.base);
  return *internal_default_instance();
}


void StickyBitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StickyBitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sticky_bit_ != NULL) {
    delete sticky_bit_;
  }
  sticky_bit_ = NULL;
  _internal_metadata_.Clear();
}

bool StickyBitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StickyBitTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sticky_bit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StickyBitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StickyBitTrigger)
  return false;
#undef DO_
}

void StickyBitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StickyBitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_sticky_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_sticky_bit(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StickyBitTrigger)
}

size_t StickyBitTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StickyBitTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_sticky_bit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sticky_bit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StickyBitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StickyBitTrigger*>(&from));
}

void StickyBitTrigger::MergeFrom(const StickyBitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StickyBitTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sticky_bit()) {
    mutable_sticky_bit()->::cockroach::util::hlc::Timestamp::MergeFrom(from.sticky_bit());
  }
}

void StickyBitTrigger::CopyFrom(const StickyBitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StickyBitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StickyBitTrigger::IsInitialized() const {
  return true;
}

void StickyBitTrigger::Swap(StickyBitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StickyBitTrigger::InternalSwap(StickyBitTrigger* other) {
  using std::swap;
  swap(sticky_bit_, other->sticky_bit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StickyBitTrigger::GetTypeName() const {
  return "cockroach.roachpb.StickyBitTrigger";
}


// ===================================================================

void InternalCommitTrigger::InitAsDefaultInstance() {
  ::cockroach::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->split_trigger_ = const_cast< ::cockroach::roachpb::SplitTrigger*>(
      ::cockroach::roachpb::SplitTrigger::internal_default_instance());
  ::cockroach::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->merge_trigger_ = const_cast< ::cockroach::roachpb::MergeTrigger*>(
      ::cockroach::roachpb::MergeTrigger::internal_default_instance());
  ::cockroach::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->change_replicas_trigger_ = const_cast< ::cockroach::roachpb::ChangeReplicasTrigger*>(
      ::cockroach::roachpb::ChangeReplicasTrigger::internal_default_instance());
  ::cockroach::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->modified_span_trigger_ = const_cast< ::cockroach::roachpb::ModifiedSpanTrigger*>(
      ::cockroach::roachpb::ModifiedSpanTrigger::internal_default_instance());
  ::cockroach::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->sticky_bit_trigger_ = const_cast< ::cockroach::roachpb::StickyBitTrigger*>(
      ::cockroach::roachpb::StickyBitTrigger::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalCommitTrigger::kSplitTriggerFieldNumber;
const int InternalCommitTrigger::kMergeTriggerFieldNumber;
const int InternalCommitTrigger::kChangeReplicasTriggerFieldNumber;
const int InternalCommitTrigger::kModifiedSpanTriggerFieldNumber;
const int InternalCommitTrigger::kStickyBitTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalCommitTrigger::InternalCommitTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_InternalCommitTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.InternalCommitTrigger)
}
InternalCommitTrigger::InternalCommitTrigger(const InternalCommitTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split_trigger()) {
    split_trigger_ = new ::cockroach::roachpb::SplitTrigger(*from.split_trigger_);
  } else {
    split_trigger_ = NULL;
  }
  if (from.has_merge_trigger()) {
    merge_trigger_ = new ::cockroach::roachpb::MergeTrigger(*from.merge_trigger_);
  } else {
    merge_trigger_ = NULL;
  }
  if (from.has_change_replicas_trigger()) {
    change_replicas_trigger_ = new ::cockroach::roachpb::ChangeReplicasTrigger(*from.change_replicas_trigger_);
  } else {
    change_replicas_trigger_ = NULL;
  }
  if (from.has_modified_span_trigger()) {
    modified_span_trigger_ = new ::cockroach::roachpb::ModifiedSpanTrigger(*from.modified_span_trigger_);
  } else {
    modified_span_trigger_ = NULL;
  }
  if (from.has_sticky_bit_trigger()) {
    sticky_bit_trigger_ = new ::cockroach::roachpb::StickyBitTrigger(*from.sticky_bit_trigger_);
  } else {
    sticky_bit_trigger_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.InternalCommitTrigger)
}

void InternalCommitTrigger::SharedCtor() {
  ::memset(&split_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sticky_bit_trigger_) -
      reinterpret_cast<char*>(&split_trigger_)) + sizeof(sticky_bit_trigger_));
}

InternalCommitTrigger::~InternalCommitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.InternalCommitTrigger)
  SharedDtor();
}

void InternalCommitTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete split_trigger_;
  if (this != internal_default_instance()) delete merge_trigger_;
  if (this != internal_default_instance()) delete change_replicas_trigger_;
  if (this != internal_default_instance()) delete modified_span_trigger_;
  if (this != internal_default_instance()) delete sticky_bit_trigger_;
}

void InternalCommitTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InternalCommitTrigger& InternalCommitTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_InternalCommitTrigger.base);
  return *internal_default_instance();
}


void InternalCommitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.InternalCommitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && split_trigger_ != NULL) {
    delete split_trigger_;
  }
  split_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && merge_trigger_ != NULL) {
    delete merge_trigger_;
  }
  merge_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_replicas_trigger_ != NULL) {
    delete change_replicas_trigger_;
  }
  change_replicas_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && modified_span_trigger_ != NULL) {
    delete modified_span_trigger_;
  }
  modified_span_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && sticky_bit_trigger_ != NULL) {
    delete sticky_bit_trigger_;
  }
  sticky_bit_trigger_ = NULL;
  _internal_metadata_.Clear();
}

bool InternalCommitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.InternalCommitTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cockroach.roachpb.SplitTrigger split_trigger = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.MergeTrigger merge_trigger = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_merge_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_replicas_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modified_span_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.StickyBitTrigger sticky_bit_trigger = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sticky_bit_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.InternalCommitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.InternalCommitTrigger)
  return false;
#undef DO_
}

void InternalCommitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.InternalCommitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cockroach.roachpb.SplitTrigger split_trigger = 1;
  if (this->has_split_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_split_trigger(), output);
  }

  // .cockroach.roachpb.MergeTrigger merge_trigger = 2;
  if (this->has_merge_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_merge_trigger(), output);
  }

  // .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (this->has_change_replicas_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_change_replicas_trigger(), output);
  }

  // .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (this->has_modified_span_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_modified_span_trigger(), output);
  }

  // .cockroach.roachpb.StickyBitTrigger sticky_bit_trigger = 5;
  if (this->has_sticky_bit_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_sticky_bit_trigger(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.InternalCommitTrigger)
}

size_t InternalCommitTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.InternalCommitTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .cockroach.roachpb.SplitTrigger split_trigger = 1;
  if (this->has_split_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_trigger_);
  }

  // .cockroach.roachpb.MergeTrigger merge_trigger = 2;
  if (this->has_merge_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *merge_trigger_);
  }

  // .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (this->has_change_replicas_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *change_replicas_trigger_);
  }

  // .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (this->has_modified_span_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modified_span_trigger_);
  }

  // .cockroach.roachpb.StickyBitTrigger sticky_bit_trigger = 5;
  if (this->has_sticky_bit_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sticky_bit_trigger_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalCommitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InternalCommitTrigger*>(&from));
}

void InternalCommitTrigger::MergeFrom(const InternalCommitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.InternalCommitTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_split_trigger()) {
    mutable_split_trigger()->::cockroach::roachpb::SplitTrigger::MergeFrom(from.split_trigger());
  }
  if (from.has_merge_trigger()) {
    mutable_merge_trigger()->::cockroach::roachpb::MergeTrigger::MergeFrom(from.merge_trigger());
  }
  if (from.has_change_replicas_trigger()) {
    mutable_change_replicas_trigger()->::cockroach::roachpb::ChangeReplicasTrigger::MergeFrom(from.change_replicas_trigger());
  }
  if (from.has_modified_span_trigger()) {
    mutable_modified_span_trigger()->::cockroach::roachpb::ModifiedSpanTrigger::MergeFrom(from.modified_span_trigger());
  }
  if (from.has_sticky_bit_trigger()) {
    mutable_sticky_bit_trigger()->::cockroach::roachpb::StickyBitTrigger::MergeFrom(from.sticky_bit_trigger());
  }
}

void InternalCommitTrigger::CopyFrom(const InternalCommitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.InternalCommitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCommitTrigger::IsInitialized() const {
  return true;
}

void InternalCommitTrigger::Swap(InternalCommitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalCommitTrigger::InternalSwap(InternalCommitTrigger* other) {
  using std::swap;
  swap(split_trigger_, other->split_trigger_);
  swap(merge_trigger_, other->merge_trigger_);
  swap(change_replicas_trigger_, other->change_replicas_trigger_);
  swap(modified_span_trigger_, other->modified_span_trigger_);
  swap(sticky_bit_trigger_, other->sticky_bit_trigger_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string InternalCommitTrigger::GetTypeName() const {
  return "cockroach.roachpb.InternalCommitTrigger";
}


// ===================================================================

void ObservedTimestamp::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ObservedTimestamp_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void ObservedTimestamp::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservedTimestamp::kNodeIdFieldNumber;
const int ObservedTimestamp::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservedTimestamp::ObservedTimestamp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_ObservedTimestamp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ObservedTimestamp)
}
ObservedTimestamp::ObservedTimestamp(const ObservedTimestamp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ObservedTimestamp)
}

void ObservedTimestamp::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(node_id_));
}

ObservedTimestamp::~ObservedTimestamp() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ObservedTimestamp)
  SharedDtor();
}

void ObservedTimestamp::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void ObservedTimestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservedTimestamp& ObservedTimestamp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_ObservedTimestamp.base);
  return *internal_default_instance();
}


void ObservedTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ObservedTimestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  node_id_ = 0;
  _internal_metadata_.Clear();
}

bool ObservedTimestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ObservedTimestamp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ObservedTimestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ObservedTimestamp)
  return false;
#undef DO_
}

void ObservedTimestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ObservedTimestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ObservedTimestamp)
}

size_t ObservedTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ObservedTimestamp)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservedTimestamp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObservedTimestamp*>(&from));
}

void ObservedTimestamp::MergeFrom(const ObservedTimestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ObservedTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void ObservedTimestamp::CopyFrom(const ObservedTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ObservedTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservedTimestamp::IsInitialized() const {
  return true;
}

void ObservedTimestamp::Swap(ObservedTimestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservedTimestamp::InternalSwap(ObservedTimestamp* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ObservedTimestamp::GetTypeName() const {
  return "cockroach.roachpb.ObservedTimestamp";
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::cockroach::roachpb::_Transaction_default_instance_._instance.get_mutable()->meta_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(
      ::cockroach::storage::engine::enginepb::TxnMeta::internal_default_instance());
  ::cockroach::roachpb::_Transaction_default_instance_._instance.get_mutable()->last_heartbeat_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_Transaction_default_instance_._instance.get_mutable()->orig_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_Transaction_default_instance_._instance.get_mutable()->refreshed_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_Transaction_default_instance_._instance.get_mutable()->deprecated_min_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_Transaction_default_instance_._instance.get_mutable()->max_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void Transaction::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
}
void Transaction::clear_last_heartbeat() {
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
}
void Transaction::clear_orig_timestamp() {
  if (GetArenaNoVirtual() == NULL && orig_timestamp_ != NULL) {
    delete orig_timestamp_;
  }
  orig_timestamp_ = NULL;
}
void Transaction::clear_refreshed_timestamp() {
  if (GetArenaNoVirtual() == NULL && refreshed_timestamp_ != NULL) {
    delete refreshed_timestamp_;
  }
  refreshed_timestamp_ = NULL;
}
void Transaction::clear_deprecated_min_timestamp() {
  if (GetArenaNoVirtual() == NULL && deprecated_min_timestamp_ != NULL) {
    delete deprecated_min_timestamp_;
  }
  deprecated_min_timestamp_ = NULL;
}
void Transaction::clear_max_timestamp() {
  if (GetArenaNoVirtual() == NULL && max_timestamp_ != NULL) {
    delete max_timestamp_;
  }
  max_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kMetaFieldNumber;
const int Transaction::kNameFieldNumber;
const int Transaction::kStatusFieldNumber;
const int Transaction::kLastHeartbeatFieldNumber;
const int Transaction::kOrigTimestampFieldNumber;
const int Transaction::kOrigTimestampWasObservedFieldNumber;
const int Transaction::kRefreshedTimestampFieldNumber;
const int Transaction::kDeprecatedMinTimestampFieldNumber;
const int Transaction::kMaxTimestampFieldNumber;
const int Transaction::kObservedTimestampsFieldNumber;
const int Transaction::kWriteTooOldFieldNumber;
const int Transaction::kIntentSpansFieldNumber;
const int Transaction::kInFlightWritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      observed_timestamps_(from.observed_timestamps_),
      intent_spans_(from.intent_spans_),
      in_flight_writes_(from.in_flight_writes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_meta()) {
    meta_ = new ::cockroach::storage::engine::enginepb::TxnMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  if (from.has_last_heartbeat()) {
    last_heartbeat_ = new ::cockroach::util::hlc::Timestamp(*from.last_heartbeat_);
  } else {
    last_heartbeat_ = NULL;
  }
  if (from.has_orig_timestamp()) {
    orig_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.orig_timestamp_);
  } else {
    orig_timestamp_ = NULL;
  }
  if (from.has_max_timestamp()) {
    max_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.max_timestamp_);
  } else {
    max_timestamp_ = NULL;
  }
  if (from.has_deprecated_min_timestamp()) {
    deprecated_min_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.deprecated_min_timestamp_);
  } else {
    deprecated_min_timestamp_ = NULL;
  }
  if (from.has_refreshed_timestamp()) {
    refreshed_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.refreshed_timestamp_);
  } else {
    refreshed_timestamp_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_too_old_) -
    reinterpret_cast<char*>(&status_)) + sizeof(write_too_old_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Transaction)
}

void Transaction::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_too_old_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(write_too_old_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete last_heartbeat_;
  if (this != internal_default_instance()) delete orig_timestamp_;
  if (this != internal_default_instance()) delete max_timestamp_;
  if (this != internal_default_instance()) delete deprecated_min_timestamp_;
  if (this != internal_default_instance()) delete refreshed_timestamp_;
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observed_timestamps_.Clear();
  intent_spans_.Clear();
  in_flight_writes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
  if (GetArenaNoVirtual() == NULL && orig_timestamp_ != NULL) {
    delete orig_timestamp_;
  }
  orig_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_timestamp_ != NULL) {
    delete max_timestamp_;
  }
  max_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && deprecated_min_timestamp_ != NULL) {
    delete deprecated_min_timestamp_;
  }
  deprecated_min_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && refreshed_timestamp_ != NULL) {
    delete refreshed_timestamp_;
  }
  refreshed_timestamp_ = NULL;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_too_old_) -
      reinterpret_cast<char*>(&status_)) + sizeof(write_too_old_));
  _internal_metadata_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Transaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.roachpb.Transaction.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TransactionStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orig_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_observed_timestamps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intent_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool write_too_old = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_too_old_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deprecated_min_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refreshed_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool orig_timestamp_was_observed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orig_timestamp_was_observed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_flight_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_meta(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.roachpb.Transaction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .cockroach.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (this->has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_last_heartbeat(), output);
  }

  if (this->has_orig_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_orig_timestamp(), output);
  }

  if (this->has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_max_timestamp(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observed_timestamps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->observed_timestamps(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intent_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11,
      this->intent_spans(static_cast<int>(i)),
      output);
  }

  // bool write_too_old = 12;
  if (this->write_too_old() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->write_too_old(), output);
  }

  if (this->has_deprecated_min_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->_internal_deprecated_min_timestamp(), output);
  }

  if (this->has_refreshed_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->_internal_refreshed_timestamp(), output);
  }

  // bool orig_timestamp_was_observed = 16;
  if (this->orig_timestamp_was_observed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->orig_timestamp_was_observed(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_flight_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17,
      this->in_flight_writes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Transaction)
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Transaction)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->observed_timestamps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->observed_timestamps(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->intent_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intent_spans(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->in_flight_writes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_flight_writes(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (this->has_last_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_heartbeat_);
  }

  if (this->has_orig_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orig_timestamp_);
  }

  if (this->has_max_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_timestamp_);
  }

  if (this->has_deprecated_min_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deprecated_min_timestamp_);
  }

  if (this->has_refreshed_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *refreshed_timestamp_);
  }

  // .cockroach.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool orig_timestamp_was_observed = 16;
  if (this->orig_timestamp_was_observed() != 0) {
    total_size += 2 + 1;
  }

  // bool write_too_old = 12;
  if (this->write_too_old() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transaction*>(&from));
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observed_timestamps_.MergeFrom(from.observed_timestamps_);
  intent_spans_.MergeFrom(from.intent_spans_);
  in_flight_writes_.MergeFrom(from.in_flight_writes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_meta()) {
    mutable_meta()->::cockroach::storage::engine::enginepb::TxnMeta::MergeFrom(from.meta());
  }
  if (from.has_last_heartbeat()) {
    mutable_last_heartbeat()->::cockroach::util::hlc::Timestamp::MergeFrom(from.last_heartbeat());
  }
  if (from.has_orig_timestamp()) {
    mutable_orig_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.orig_timestamp());
  }
  if (from.has_max_timestamp()) {
    mutable_max_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.max_timestamp());
  }
  if (from.has_deprecated_min_timestamp()) {
    mutable_deprecated_min_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.deprecated_min_timestamp());
  }
  if (from.has_refreshed_timestamp()) {
    mutable_refreshed_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.refreshed_timestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.orig_timestamp_was_observed() != 0) {
    set_orig_timestamp_was_observed(from.orig_timestamp_was_observed());
  }
  if (from.write_too_old() != 0) {
    set_write_too_old(from.write_too_old());
  }
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  CastToBase(&observed_timestamps_)->InternalSwap(CastToBase(&other->observed_timestamps_));
  CastToBase(&intent_spans_)->InternalSwap(CastToBase(&other->intent_spans_));
  CastToBase(&in_flight_writes_)->InternalSwap(CastToBase(&other->in_flight_writes_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(last_heartbeat_, other->last_heartbeat_);
  swap(orig_timestamp_, other->orig_timestamp_);
  swap(max_timestamp_, other->max_timestamp_);
  swap(deprecated_min_timestamp_, other->deprecated_min_timestamp_);
  swap(refreshed_timestamp_, other->refreshed_timestamp_);
  swap(status_, other->status_);
  swap(orig_timestamp_was_observed_, other->orig_timestamp_was_observed_);
  swap(write_too_old_, other->write_too_old_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Transaction::GetTypeName() const {
  return "cockroach.roachpb.Transaction";
}


// ===================================================================

void TransactionRecord::InitAsDefaultInstance() {
  ::cockroach::roachpb::_TransactionRecord_default_instance_._instance.get_mutable()->meta_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(
      ::cockroach::storage::engine::enginepb::TxnMeta::internal_default_instance());
  ::cockroach::roachpb::_TransactionRecord_default_instance_._instance.get_mutable()->last_heartbeat_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void TransactionRecord::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
}
void TransactionRecord::clear_last_heartbeat() {
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRecord::kMetaFieldNumber;
const int TransactionRecord::kStatusFieldNumber;
const int TransactionRecord::kLastHeartbeatFieldNumber;
const int TransactionRecord::kIntentSpansFieldNumber;
const int TransactionRecord::kInFlightWritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRecord::TransactionRecord()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_TransactionRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionRecord)
}
TransactionRecord::TransactionRecord(const TransactionRecord& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      intent_spans_(from.intent_spans_),
      in_flight_writes_(from.in_flight_writes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::cockroach::storage::engine::enginepb::TxnMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  if (from.has_last_heartbeat()) {
    last_heartbeat_ = new ::cockroach::util::hlc::Timestamp(*from.last_heartbeat_);
  } else {
    last_heartbeat_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionRecord)
}

void TransactionRecord::SharedCtor() {
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(status_));
}

TransactionRecord::~TransactionRecord() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionRecord)
  SharedDtor();
}

void TransactionRecord::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete last_heartbeat_;
}

void TransactionRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionRecord& TransactionRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_TransactionRecord.base);
  return *internal_default_instance();
}


void TransactionRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TransactionRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intent_spans_.Clear();
  in_flight_writes_.Clear();
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

bool TransactionRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TransactionStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intent_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_flight_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionRecord)
  return false;
#undef DO_
}

void TransactionRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_meta(), output);
  }

  // .cockroach.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (this->has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_last_heartbeat(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intent_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11,
      this->intent_spans(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_flight_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17,
      this->in_flight_writes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionRecord)
}

size_t TransactionRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TransactionRecord)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->intent_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intent_spans(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->in_flight_writes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_flight_writes(static_cast<int>(i)));
    }
  }

  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (this->has_last_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_heartbeat_);
  }

  // .cockroach.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionRecord*>(&from));
}

void TransactionRecord::MergeFrom(const TransactionRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TransactionRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intent_spans_.MergeFrom(from.intent_spans_);
  in_flight_writes_.MergeFrom(from.in_flight_writes_);
  if (from.has_meta()) {
    mutable_meta()->::cockroach::storage::engine::enginepb::TxnMeta::MergeFrom(from.meta());
  }
  if (from.has_last_heartbeat()) {
    mutable_last_heartbeat()->::cockroach::util::hlc::Timestamp::MergeFrom(from.last_heartbeat());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransactionRecord::CopyFrom(const TransactionRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TransactionRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRecord::IsInitialized() const {
  return true;
}

void TransactionRecord::Swap(TransactionRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRecord::InternalSwap(TransactionRecord* other) {
  using std::swap;
  CastToBase(&intent_spans_)->InternalSwap(CastToBase(&other->intent_spans_));
  CastToBase(&in_flight_writes_)->InternalSwap(CastToBase(&other->in_flight_writes_));
  swap(meta_, other->meta_);
  swap(last_heartbeat_, other->last_heartbeat_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TransactionRecord::GetTypeName() const {
  return "cockroach.roachpb.TransactionRecord";
}


// ===================================================================

void Intent::InitAsDefaultInstance() {
  ::cockroach::roachpb::_Intent_default_instance_._instance.get_mutable()->span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
  ::cockroach::roachpb::_Intent_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(
      ::cockroach::storage::engine::enginepb::TxnMeta::internal_default_instance());
}
void Intent::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent::kSpanFieldNumber;
const int Intent::kTxnFieldNumber;
const int Intent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent::Intent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Intent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Intent)
}
Intent::Intent(const Intent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span()) {
    span_ = new ::cockroach::roachpb::Span(*from.span_);
  } else {
    span_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::cockroach::storage::engine::enginepb::TxnMeta(*from.txn_);
  } else {
    txn_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Intent)
}

void Intent::SharedCtor() {
  ::memset(&span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&span_)) + sizeof(status_));
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
  if (this != internal_default_instance()) delete span_;
  if (this != internal_default_instance()) delete txn_;
}

void Intent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Intent& Intent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Intent.base);
  return *internal_default_instance();
}


void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Intent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cockroach.roachpb.TransactionStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Intent)
  return false;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_span(), output);
  }

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_txn(), output);
  }

  // .cockroach.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Intent)
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Intent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *span_);
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // .cockroach.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Intent*>(&from));
}

void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    mutable_span()->::cockroach::roachpb::Span::MergeFrom(from.span());
  }
  if (from.has_txn()) {
    mutable_txn()->::cockroach::storage::engine::enginepb::TxnMeta::MergeFrom(from.txn());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::Swap(Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent::InternalSwap(Intent* other) {
  using std::swap;
  swap(span_, other->span_);
  swap(txn_, other->txn_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Intent::GetTypeName() const {
  return "cockroach.roachpb.Intent";
}


// ===================================================================

void SequencedWrite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequencedWrite::kKeyFieldNumber;
const int SequencedWrite::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequencedWrite::SequencedWrite()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SequencedWrite)
}
SequencedWrite::SequencedWrite(const SequencedWrite& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SequencedWrite)
}

void SequencedWrite::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = 0;
}

SequencedWrite::~SequencedWrite() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SequencedWrite)
  SharedDtor();
}

void SequencedWrite::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SequencedWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SequencedWrite& SequencedWrite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base);
  return *internal_default_instance();
}


void SequencedWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.SequencedWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = 0;
  _internal_metadata_.Clear();
}

bool SequencedWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SequencedWrite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SequencedWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SequencedWrite)
  return false;
#undef DO_
}

void SequencedWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SequencedWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SequencedWrite)
}

size_t SequencedWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.SequencedWrite)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequencedWrite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SequencedWrite*>(&from));
}

void SequencedWrite::MergeFrom(const SequencedWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.SequencedWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void SequencedWrite::CopyFrom(const SequencedWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.SequencedWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequencedWrite::IsInitialized() const {
  return true;
}

void SequencedWrite::Swap(SequencedWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequencedWrite::InternalSwap(SequencedWrite* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SequencedWrite::GetTypeName() const {
  return "cockroach.roachpb.SequencedWrite";
}


// ===================================================================

void Lease::InitAsDefaultInstance() {
  ::cockroach::roachpb::_Lease_default_instance_._instance.get_mutable()->start_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_Lease_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_Lease_default_instance_._instance.get_mutable()->replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
  ::cockroach::roachpb::_Lease_default_instance_._instance.get_mutable()->deprecated_start_stasis_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_Lease_default_instance_._instance.get_mutable()->proposed_ts_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void Lease::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
void Lease::clear_expiration() {
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) {
    delete expiration_;
  }
  expiration_ = NULL;
}
void Lease::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
}
void Lease::clear_deprecated_start_stasis() {
  if (GetArenaNoVirtual() == NULL && deprecated_start_stasis_ != NULL) {
    delete deprecated_start_stasis_;
  }
  deprecated_start_stasis_ = NULL;
}
void Lease::clear_proposed_ts() {
  if (GetArenaNoVirtual() == NULL && proposed_ts_ != NULL) {
    delete proposed_ts_;
  }
  proposed_ts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lease::kStartFieldNumber;
const int Lease::kExpirationFieldNumber;
const int Lease::kReplicaFieldNumber;
const int Lease::kDeprecatedStartStasisFieldNumber;
const int Lease::kProposedTsFieldNumber;
const int Lease::kEpochFieldNumber;
const int Lease::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lease::Lease()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Lease)
}
Lease::Lease(const Lease& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::cockroach::util::hlc::Timestamp(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_expiration()) {
    expiration_ = new ::cockroach::util::hlc::Timestamp(*from.expiration_);
  } else {
    expiration_ = NULL;
  }
  if (from.has_replica()) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  if (from.has_deprecated_start_stasis()) {
    deprecated_start_stasis_ = new ::cockroach::util::hlc::Timestamp(*from.deprecated_start_stasis_);
  } else {
    deprecated_start_stasis_ = NULL;
  }
  if (from.has_proposed_ts()) {
    proposed_ts_ = new ::cockroach::util::hlc::Timestamp(*from.proposed_ts_);
  } else {
    proposed_ts_ = NULL;
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Lease)
}

void Lease::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&start_)) + sizeof(sequence_));
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Lease)
  SharedDtor();
}

void Lease::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete expiration_;
  if (this != internal_default_instance()) delete replica_;
  if (this != internal_default_instance()) delete deprecated_start_stasis_;
  if (this != internal_default_instance()) delete proposed_ts_;
}

void Lease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lease& Lease::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base);
  return *internal_default_instance();
}


void Lease::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) {
    delete expiration_;
  }
  expiration_ = NULL;
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
  if (GetArenaNoVirtual() == NULL && deprecated_start_stasis_ != NULL) {
    delete deprecated_start_stasis_;
  }
  deprecated_start_stasis_ = NULL;
  if (GetArenaNoVirtual() == NULL && proposed_ts_ != NULL) {
    delete proposed_ts_;
  }
  proposed_ts_ = NULL;
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(sequence_));
  _internal_metadata_.Clear();
}

bool Lease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Lease)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deprecated_start_stasis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposed_ts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 epoch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Lease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Lease)
  return false;
#undef DO_
}

void Lease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_start(), output);
  }

  if (this->has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_expiration(), output);
  }

  if (this->has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_replica(), output);
  }

  if (this->has_deprecated_start_stasis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_deprecated_start_stasis(), output);
  }

  if (this->has_proposed_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_proposed_ts(), output);
  }

  // int64 epoch = 6;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->epoch(), output);
  }

  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Lease)
}

size_t Lease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Lease)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  if (this->has_expiration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  if (this->has_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *replica_);
  }

  if (this->has_deprecated_start_stasis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deprecated_start_stasis_);
  }

  if (this->has_proposed_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proposed_ts_);
  }

  // int64 epoch = 6;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->epoch());
  }

  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lease::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lease*>(&from));
}

void Lease::MergeFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::cockroach::util::hlc::Timestamp::MergeFrom(from.start());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::cockroach::util::hlc::Timestamp::MergeFrom(from.expiration());
  }
  if (from.has_replica()) {
    mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
  }
  if (from.has_deprecated_start_stasis()) {
    mutable_deprecated_start_stasis()->::cockroach::util::hlc::Timestamp::MergeFrom(from.deprecated_start_stasis());
  }
  if (from.has_proposed_ts()) {
    mutable_proposed_ts()->::cockroach::util::hlc::Timestamp::MergeFrom(from.proposed_ts());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void Lease::CopyFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {
  return true;
}

void Lease::Swap(Lease* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lease::InternalSwap(Lease* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(expiration_, other->expiration_);
  swap(replica_, other->replica_);
  swap(deprecated_start_stasis_, other->deprecated_start_stasis_);
  swap(proposed_ts_, other->proposed_ts_);
  swap(epoch_, other->epoch_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Lease::GetTypeName() const {
  return "cockroach.roachpb.Lease";
}


// ===================================================================

void AbortSpanEntry::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AbortSpanEntry_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void AbortSpanEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbortSpanEntry::kKeyFieldNumber;
const int AbortSpanEntry::kTimestampFieldNumber;
const int AbortSpanEntry::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbortSpanEntry::AbortSpanEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_AbortSpanEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AbortSpanEntry)
}
AbortSpanEntry::AbortSpanEntry(const AbortSpanEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AbortSpanEntry)
}

void AbortSpanEntry::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(priority_));
}

AbortSpanEntry::~AbortSpanEntry() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AbortSpanEntry)
  SharedDtor();
}

void AbortSpanEntry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void AbortSpanEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbortSpanEntry& AbortSpanEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_AbortSpanEntry.base);
  return *internal_default_instance();
}


void AbortSpanEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AbortSpanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  priority_ = 0;
  _internal_metadata_.Clear();
}

bool AbortSpanEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AbortSpanEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AbortSpanEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AbortSpanEntry)
  return false;
#undef DO_
}

void AbortSpanEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AbortSpanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_timestamp(), output);
  }

  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AbortSpanEntry)
}

size_t AbortSpanEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AbortSpanEntry)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbortSpanEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AbortSpanEntry*>(&from));
}

void AbortSpanEntry::MergeFrom(const AbortSpanEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AbortSpanEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void AbortSpanEntry::CopyFrom(const AbortSpanEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AbortSpanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSpanEntry::IsInitialized() const {
  return true;
}

void AbortSpanEntry::Swap(AbortSpanEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbortSpanEntry::InternalSwap(AbortSpanEntry* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AbortSpanEntry::GetTypeName() const {
  return "cockroach.roachpb.AbortSpanEntry";
}


// ===================================================================

void TxnCoordMeta::InitAsDefaultInstance() {
  ::cockroach::roachpb::_TxnCoordMeta_default_instance_._instance.get_mutable()->txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnCoordMeta::kTxnFieldNumber;
const int TxnCoordMeta::kCommandCountFieldNumber;
const int TxnCoordMeta::kRefreshReadsFieldNumber;
const int TxnCoordMeta::kRefreshWritesFieldNumber;
const int TxnCoordMeta::kRefreshInvalidFieldNumber;
const int TxnCoordMeta::kInFlightWritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnCoordMeta::TxnCoordMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_TxnCoordMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TxnCoordMeta)
}
TxnCoordMeta::TxnCoordMeta(const TxnCoordMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      refresh_reads_(from.refresh_reads_),
      refresh_writes_(from.refresh_writes_),
      in_flight_writes_(from.in_flight_writes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_txn()) {
    txn_ = new ::cockroach::roachpb::Transaction(*from.txn_);
  } else {
    txn_ = NULL;
  }
  ::memcpy(&command_count_, &from.command_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_invalid_) -
    reinterpret_cast<char*>(&command_count_)) + sizeof(refresh_invalid_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TxnCoordMeta)
}

void TxnCoordMeta::SharedCtor() {
  ::memset(&txn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_invalid_) -
      reinterpret_cast<char*>(&txn_)) + sizeof(refresh_invalid_));
}

TxnCoordMeta::~TxnCoordMeta() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TxnCoordMeta)
  SharedDtor();
}

void TxnCoordMeta::SharedDtor() {
  if (this != internal_default_instance()) delete txn_;
}

void TxnCoordMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxnCoordMeta& TxnCoordMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_TxnCoordMeta.base);
  return *internal_default_instance();
}


void TxnCoordMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TxnCoordMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refresh_reads_.Clear();
  refresh_writes_.Clear();
  in_flight_writes_.Clear();
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  ::memset(&command_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_invalid_) -
      reinterpret_cast<char*>(&command_count_)) + sizeof(refresh_invalid_));
  _internal_metadata_.Clear();
}

bool TxnCoordMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TxnCoordMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 command_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_refresh_reads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_refresh_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool refresh_invalid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_invalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_flight_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TxnCoordMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TxnCoordMeta)
  return false;
#undef DO_
}

void TxnCoordMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TxnCoordMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_txn(), output);
  }

  // int32 command_count = 3;
  if (this->command_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->command_count(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refresh_reads_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->refresh_reads(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refresh_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->refresh_writes(static_cast<int>(i)),
      output);
  }

  // bool refresh_invalid = 7;
  if (this->refresh_invalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->refresh_invalid(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_flight_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->in_flight_writes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TxnCoordMeta)
}

size_t TxnCoordMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TxnCoordMeta)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->refresh_reads_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->refresh_reads(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->refresh_writes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->refresh_writes(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->in_flight_writes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_flight_writes(static_cast<int>(i)));
    }
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // int32 command_count = 3;
  if (this->command_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command_count());
  }

  // bool refresh_invalid = 7;
  if (this->refresh_invalid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxnCoordMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnCoordMeta*>(&from));
}

void TxnCoordMeta::MergeFrom(const TxnCoordMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TxnCoordMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refresh_reads_.MergeFrom(from.refresh_reads_);
  refresh_writes_.MergeFrom(from.refresh_writes_);
  in_flight_writes_.MergeFrom(from.in_flight_writes_);
  if (from.has_txn()) {
    mutable_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.txn());
  }
  if (from.command_count() != 0) {
    set_command_count(from.command_count());
  }
  if (from.refresh_invalid() != 0) {
    set_refresh_invalid(from.refresh_invalid());
  }
}

void TxnCoordMeta::CopyFrom(const TxnCoordMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TxnCoordMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnCoordMeta::IsInitialized() const {
  return true;
}

void TxnCoordMeta::Swap(TxnCoordMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnCoordMeta::InternalSwap(TxnCoordMeta* other) {
  using std::swap;
  CastToBase(&refresh_reads_)->InternalSwap(CastToBase(&other->refresh_reads_));
  CastToBase(&refresh_writes_)->InternalSwap(CastToBase(&other->refresh_writes_));
  CastToBase(&in_flight_writes_)->InternalSwap(CastToBase(&other->in_flight_writes_));
  swap(txn_, other->txn_);
  swap(command_count_, other->command_count_);
  swap(refresh_invalid_, other->refresh_invalid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TxnCoordMeta::GetTypeName() const {
  return "cockroach.roachpb.TxnCoordMeta";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roachpb
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::Span* Arena::CreateMaybeMessage< ::cockroach::roachpb::Span >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::Span >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::Value* Arena::CreateMaybeMessage< ::cockroach::roachpb::Value >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::Value >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::KeyValue* Arena::CreateMaybeMessage< ::cockroach::roachpb::KeyValue >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::KeyValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::StoreIdent* Arena::CreateMaybeMessage< ::cockroach::roachpb::StoreIdent >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::StoreIdent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::SplitTrigger* Arena::CreateMaybeMessage< ::cockroach::roachpb::SplitTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::SplitTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::MergeTrigger* Arena::CreateMaybeMessage< ::cockroach::roachpb::MergeTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::MergeTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ChangeReplicasTrigger* Arena::CreateMaybeMessage< ::cockroach::roachpb::ChangeReplicasTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ChangeReplicasTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ModifiedSpanTrigger* Arena::CreateMaybeMessage< ::cockroach::roachpb::ModifiedSpanTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ModifiedSpanTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::StickyBitTrigger* Arena::CreateMaybeMessage< ::cockroach::roachpb::StickyBitTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::StickyBitTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::InternalCommitTrigger* Arena::CreateMaybeMessage< ::cockroach::roachpb::InternalCommitTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::InternalCommitTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ObservedTimestamp* Arena::CreateMaybeMessage< ::cockroach::roachpb::ObservedTimestamp >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ObservedTimestamp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::Transaction* Arena::CreateMaybeMessage< ::cockroach::roachpb::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::Transaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TransactionRecord* Arena::CreateMaybeMessage< ::cockroach::roachpb::TransactionRecord >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TransactionRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::Intent* Arena::CreateMaybeMessage< ::cockroach::roachpb::Intent >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::Intent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::SequencedWrite* Arena::CreateMaybeMessage< ::cockroach::roachpb::SequencedWrite >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::SequencedWrite >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::Lease* Arena::CreateMaybeMessage< ::cockroach::roachpb::Lease >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::Lease >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AbortSpanEntry* Arena::CreateMaybeMessage< ::cockroach::roachpb::AbortSpanEntry >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AbortSpanEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TxnCoordMeta* Arena::CreateMaybeMessage< ::cockroach::roachpb::TxnCoordMeta >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TxnCoordMeta >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
