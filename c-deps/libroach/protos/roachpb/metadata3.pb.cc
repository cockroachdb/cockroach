// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/metadata3.proto

#include "roachpb/metadata3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_roachpb_2fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaDescriptor;
}  // namespace protobuf_roachpb_2fmetadata_2eproto
namespace cockroach {
namespace roachpb {
class RangeDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeDescriptor>
      _instance;
} _RangeDescriptor_default_instance_;
}  // namespace roachpb
}  // namespace cockroach
namespace protobuf_roachpb_2fmetadata3_2eproto {
static void InitDefaultsRangeDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeDescriptor_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RangeDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRangeDescriptor}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RangeDescriptor.base);
}

}  // namespace protobuf_roachpb_2fmetadata3_2eproto
namespace cockroach {
namespace roachpb {

// ===================================================================

void RangeDescriptor::InitAsDefaultInstance() {
}
void RangeDescriptor::clear_replicas() {
  replicas_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeDescriptor::kRangeIdFieldNumber;
const int RangeDescriptor::kStartKeyFieldNumber;
const int RangeDescriptor::kEndKeyFieldNumber;
const int RangeDescriptor::kReplicasFieldNumber;
const int RangeDescriptor::kNextReplicaIdFieldNumber;
const int RangeDescriptor::kGenerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeDescriptor::RangeDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata3_2eproto::scc_info_RangeDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeDescriptor)
}
RangeDescriptor::RangeDescriptor(const RangeDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_replica_id_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(next_replica_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeDescriptor)
}

void RangeDescriptor::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_replica_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(next_replica_id_));
}

RangeDescriptor::~RangeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeDescriptor)
  SharedDtor();
}

void RangeDescriptor::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RangeDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeDescriptor& RangeDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata3_2eproto::scc_info_RangeDescriptor.base);
  return *internal_default_instance();
}


void RangeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_replica_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(next_replica_id_));
  _internal_metadata_.Clear();
}

bool RangeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 generation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &generation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeDescriptor)
  return false;
#undef DO_
}

void RangeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->replicas(static_cast<int>(i)),
      output);
  }

  if (this->next_replica_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->next_replica_id(), output);
  }

  // int64 generation = 6;
  if (this->generation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->generation(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeDescriptor)
}

size_t RangeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeDescriptor)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->replicas(static_cast<int>(i)));
    }
  }

  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->range_id());
  }

  // int64 generation = 6;
  if (this->generation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->generation());
  }

  if (this->next_replica_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->next_replica_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeDescriptor*>(&from));
}

void RangeDescriptor::MergeFrom(const RangeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.generation() != 0) {
    set_generation(from.generation());
  }
  if (from.next_replica_id() != 0) {
    set_next_replica_id(from.next_replica_id());
  }
}

void RangeDescriptor::CopyFrom(const RangeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDescriptor::IsInitialized() const {
  return true;
}

void RangeDescriptor::Swap(RangeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeDescriptor::InternalSwap(RangeDescriptor* other) {
  using std::swap;
  CastToBase(&replicas_)->InternalSwap(CastToBase(&other->replicas_));
  start_key_.Swap(&other->start_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_key_.Swap(&other->end_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(range_id_, other->range_id_);
  swap(generation_, other->generation_);
  swap(next_replica_id_, other->next_replica_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeDescriptor::GetTypeName() const {
  return "cockroach.roachpb.RangeDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roachpb
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeDescriptor* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeDescriptor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
