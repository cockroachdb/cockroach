// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/errors.proto

#include "roachpb/errors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_roachpb_2fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ObservedTimestamp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Intent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Lease;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Transaction;
}  // namespace protobuf_roachpb_2fdata_2eproto
namespace protobuf_roachpb_2ferrors_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ErrPosition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IntegerOverflowError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MergeInProgressError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeUnavailableError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OpRequiresTxnError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RaftGroupDeletedError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RangeFeedRetryError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RangeNotFoundError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaCorruptionError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaTooOldError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StoreNotFoundError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransactionAbortedError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransactionRetryError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransactionStatusError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TxnAlreadyEncounteredErrorError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnsupportedRequestError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BatchTimestampBeforeGCError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConditionFailedError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IndeterminateCommitError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IntentMissingError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LeaseRejectedError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RangeKeyMismatchError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TransactionPushError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TransactionRetryWithProtoRefreshError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WriteIntentError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WriteTooOldError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_NotLeaseHolderError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ReadWithinUncertaintyIntervalError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2ferrors_2eproto ::google::protobuf::internal::SCCInfo<30> scc_info_AmbiguousResultError;
}  // namespace protobuf_roachpb_2ferrors_2eproto
namespace protobuf_roachpb_2fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaDescriptor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RangeDescriptor;
}  // namespace protobuf_roachpb_2fmetadata_2eproto
namespace protobuf_util_2fhlc_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2fhlc_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_util_2fhlc_2ftimestamp_2eproto
namespace cockroach {
namespace roachpb {
class NotLeaseHolderErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotLeaseHolderError>
      _instance;
} _NotLeaseHolderError_default_instance_;
class NodeUnavailableErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeUnavailableError>
      _instance;
} _NodeUnavailableError_default_instance_;
class UnsupportedRequestErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnsupportedRequestError>
      _instance;
} _UnsupportedRequestError_default_instance_;
class RangeNotFoundErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeNotFoundError>
      _instance;
} _RangeNotFoundError_default_instance_;
class RangeKeyMismatchErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeKeyMismatchError>
      _instance;
} _RangeKeyMismatchError_default_instance_;
class ReadWithinUncertaintyIntervalErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadWithinUncertaintyIntervalError>
      _instance;
} _ReadWithinUncertaintyIntervalError_default_instance_;
class TransactionAbortedErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionAbortedError>
      _instance;
} _TransactionAbortedError_default_instance_;
class TransactionPushErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionPushError>
      _instance;
} _TransactionPushError_default_instance_;
class TransactionRetryErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionRetryError>
      _instance;
} _TransactionRetryError_default_instance_;
class TransactionStatusErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionStatusError>
      _instance;
} _TransactionStatusError_default_instance_;
class WriteIntentErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteIntentError>
      _instance;
} _WriteIntentError_default_instance_;
class WriteTooOldErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteTooOldError>
      _instance;
} _WriteTooOldError_default_instance_;
class OpRequiresTxnErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpRequiresTxnError>
      _instance;
} _OpRequiresTxnError_default_instance_;
class ConditionFailedErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionFailedError>
      _instance;
} _ConditionFailedError_default_instance_;
class LeaseRejectedErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaseRejectedError>
      _instance;
} _LeaseRejectedError_default_instance_;
class AmbiguousResultErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AmbiguousResultError>
      _instance;
} _AmbiguousResultError_default_instance_;
class RaftGroupDeletedErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaftGroupDeletedError>
      _instance;
} _RaftGroupDeletedError_default_instance_;
class ReplicaCorruptionErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplicaCorruptionError>
      _instance;
} _ReplicaCorruptionError_default_instance_;
class ReplicaTooOldErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplicaTooOldError>
      _instance;
} _ReplicaTooOldError_default_instance_;
class StoreNotFoundErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreNotFoundError>
      _instance;
} _StoreNotFoundError_default_instance_;
class UnhandledRetryableErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnhandledRetryableError>
      _instance;
} _UnhandledRetryableError_default_instance_;
class TransactionRetryWithProtoRefreshErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionRetryWithProtoRefreshError>
      _instance;
} _TransactionRetryWithProtoRefreshError_default_instance_;
class TxnAlreadyEncounteredErrorErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxnAlreadyEncounteredErrorError>
      _instance;
} _TxnAlreadyEncounteredErrorError_default_instance_;
class IntegerOverflowErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntegerOverflowError>
      _instance;
} _IntegerOverflowError_default_instance_;
class BatchTimestampBeforeGCErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchTimestampBeforeGCError>
      _instance;
} _BatchTimestampBeforeGCError_default_instance_;
class IntentMissingErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntentMissingError>
      _instance;
} _IntentMissingError_default_instance_;
class MergeInProgressErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MergeInProgressError>
      _instance;
} _MergeInProgressError_default_instance_;
class RangeFeedRetryErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeFeedRetryError>
      _instance;
} _RangeFeedRetryError_default_instance_;
class IndeterminateCommitErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndeterminateCommitError>
      _instance;
} _IndeterminateCommitError_default_instance_;
class ErrorDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ErrorDetail>
      _instance;
  const ::cockroach::roachpb::NotLeaseHolderError* not_lease_holder_;
  const ::cockroach::roachpb::RangeNotFoundError* range_not_found_;
  const ::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch_;
  const ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval_;
  const ::cockroach::roachpb::TransactionAbortedError* transaction_aborted_;
  const ::cockroach::roachpb::TransactionPushError* transaction_push_;
  const ::cockroach::roachpb::TransactionRetryError* transaction_retry_;
  const ::cockroach::roachpb::TransactionStatusError* transaction_status_;
  const ::cockroach::roachpb::WriteIntentError* write_intent_;
  const ::cockroach::roachpb::WriteTooOldError* write_too_old_;
  const ::cockroach::roachpb::OpRequiresTxnError* op_requires_txn_;
  const ::cockroach::roachpb::ConditionFailedError* condition_failed_;
  const ::cockroach::roachpb::LeaseRejectedError* lease_rejected_;
  const ::cockroach::roachpb::NodeUnavailableError* node_unavailable_;
  const ::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted_;
  const ::cockroach::roachpb::ReplicaCorruptionError* replica_corruption_;
  const ::cockroach::roachpb::ReplicaTooOldError* replica_too_old_;
  const ::cockroach::roachpb::AmbiguousResultError* ambiguous_result_;
  const ::cockroach::roachpb::StoreNotFoundError* store_not_found_;
  const ::cockroach::roachpb::TransactionRetryWithProtoRefreshError* transaction_retry_with_proto_refresh_;
  const ::cockroach::roachpb::IntegerOverflowError* integer_overflow_;
  const ::cockroach::roachpb::UnsupportedRequestError* unsupported_request_;
  const ::cockroach::roachpb::BatchTimestampBeforeGCError* timestamp_before_;
  const ::cockroach::roachpb::TxnAlreadyEncounteredErrorError* txn_already_encountered_error_;
  const ::cockroach::roachpb::IntentMissingError* intent_missing_;
  const ::cockroach::roachpb::MergeInProgressError* merge_in_progress_;
  const ::cockroach::roachpb::RangeFeedRetryError* rangefeed_retry_;
  const ::cockroach::roachpb::IndeterminateCommitError* indeterminate_commit_;
} _ErrorDetail_default_instance_;
class ErrPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ErrPosition>
      _instance;
} _ErrPosition_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Error>
      _instance;
} _Error_default_instance_;
}  // namespace roachpb
}  // namespace cockroach
namespace protobuf_roachpb_2ferrors_2eproto {
static void InitDefaultsNotLeaseHolderError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_NotLeaseHolderError_default_instance_;
    new (ptr) ::cockroach::roachpb::NotLeaseHolderError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::NotLeaseHolderError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NotLeaseHolderError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNotLeaseHolderError}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base,}};

static void InitDefaultsNodeUnavailableError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_NodeUnavailableError_default_instance_;
    new (ptr) ::cockroach::roachpb::NodeUnavailableError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::NodeUnavailableError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeUnavailableError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeUnavailableError}, {}};

static void InitDefaultsUnsupportedRequestError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_UnsupportedRequestError_default_instance_;
    new (ptr) ::cockroach::roachpb::UnsupportedRequestError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::UnsupportedRequestError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnsupportedRequestError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnsupportedRequestError}, {}};

static void InitDefaultsRangeNotFoundError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeNotFoundError_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeNotFoundError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeNotFoundError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RangeNotFoundError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRangeNotFoundError}, {}};

static void InitDefaultsRangeKeyMismatchError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeKeyMismatchError_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeKeyMismatchError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeKeyMismatchError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RangeKeyMismatchError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRangeKeyMismatchError}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,}};

static void InitDefaultsReadWithinUncertaintyIntervalError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ReadWithinUncertaintyIntervalError_default_instance_;
    new (ptr) ::cockroach::roachpb::ReadWithinUncertaintyIntervalError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReadWithinUncertaintyIntervalError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReadWithinUncertaintyIntervalError}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_ObservedTimestamp.base,}};

static void InitDefaultsTransactionAbortedError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TransactionAbortedError_default_instance_;
    new (ptr) ::cockroach::roachpb::TransactionAbortedError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TransactionAbortedError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransactionAbortedError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransactionAbortedError}, {}};

static void InitDefaultsTransactionPushError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TransactionPushError_default_instance_;
    new (ptr) ::cockroach::roachpb::TransactionPushError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TransactionPushError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransactionPushError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransactionPushError}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,}};

static void InitDefaultsTransactionRetryError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TransactionRetryError_default_instance_;
    new (ptr) ::cockroach::roachpb::TransactionRetryError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TransactionRetryError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransactionRetryError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransactionRetryError}, {}};

static void InitDefaultsTransactionStatusError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TransactionStatusError_default_instance_;
    new (ptr) ::cockroach::roachpb::TransactionStatusError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TransactionStatusError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransactionStatusError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransactionStatusError}, {}};

static void InitDefaultsWriteIntentError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_WriteIntentError_default_instance_;
    new (ptr) ::cockroach::roachpb::WriteIntentError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::WriteIntentError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WriteIntentError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWriteIntentError}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Intent.base,}};

static void InitDefaultsWriteTooOldError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_WriteTooOldError_default_instance_;
    new (ptr) ::cockroach::roachpb::WriteTooOldError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::WriteTooOldError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WriteTooOldError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWriteTooOldError}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsOpRequiresTxnError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_OpRequiresTxnError_default_instance_;
    new (ptr) ::cockroach::roachpb::OpRequiresTxnError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::OpRequiresTxnError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpRequiresTxnError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpRequiresTxnError}, {}};

static void InitDefaultsConditionFailedError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ConditionFailedError_default_instance_;
    new (ptr) ::cockroach::roachpb::ConditionFailedError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ConditionFailedError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConditionFailedError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConditionFailedError}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsLeaseRejectedError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_LeaseRejectedError_default_instance_;
    new (ptr) ::cockroach::roachpb::LeaseRejectedError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::LeaseRejectedError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeaseRejectedError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeaseRejectedError}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base,}};

static void InitDefaultsAmbiguousResultError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_AmbiguousResultError_default_instance_;
    new (ptr) ::cockroach::roachpb::AmbiguousResultError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::cockroach::roachpb::_ErrorDetail_default_instance_;
    new (ptr) ::cockroach::roachpb::ErrorDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::cockroach::roachpb::_Error_default_instance_;
    new (ptr) ::cockroach::roachpb::Error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::AmbiguousResultError::InitAsDefaultInstance();
  ::cockroach::roachpb::ErrorDetail::InitAsDefaultInstance();
  ::cockroach::roachpb::Error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<30> scc_info_AmbiguousResultError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 30, InitDefaultsAmbiguousResultError}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ErrPosition.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_NotLeaseHolderError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_RangeNotFoundError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_RangeKeyMismatchError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ReadWithinUncertaintyIntervalError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionAbortedError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionPushError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionRetryError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionStatusError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_WriteIntentError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_WriteTooOldError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_OpRequiresTxnError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ConditionFailedError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_LeaseRejectedError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_NodeUnavailableError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_RaftGroupDeletedError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ReplicaCorruptionError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ReplicaTooOldError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_StoreNotFoundError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionRetryWithProtoRefreshError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_IntegerOverflowError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_UnsupportedRequestError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_BatchTimestampBeforeGCError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TxnAlreadyEncounteredErrorError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_IntentMissingError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_MergeInProgressError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_RangeFeedRetryError.base,
      &protobuf_roachpb_2ferrors_2eproto::scc_info_IndeterminateCommitError.base,}};

static void InitDefaultsRaftGroupDeletedError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RaftGroupDeletedError_default_instance_;
    new (ptr) ::cockroach::roachpb::RaftGroupDeletedError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RaftGroupDeletedError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RaftGroupDeletedError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRaftGroupDeletedError}, {}};

static void InitDefaultsReplicaCorruptionError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ReplicaCorruptionError_default_instance_;
    new (ptr) ::cockroach::roachpb::ReplicaCorruptionError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ReplicaCorruptionError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaCorruptionError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReplicaCorruptionError}, {}};

static void InitDefaultsReplicaTooOldError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ReplicaTooOldError_default_instance_;
    new (ptr) ::cockroach::roachpb::ReplicaTooOldError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ReplicaTooOldError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaTooOldError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReplicaTooOldError}, {}};

static void InitDefaultsStoreNotFoundError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_StoreNotFoundError_default_instance_;
    new (ptr) ::cockroach::roachpb::StoreNotFoundError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::StoreNotFoundError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StoreNotFoundError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStoreNotFoundError}, {}};

static void InitDefaultsUnhandledRetryableError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_UnhandledRetryableError_default_instance_;
    new (ptr) ::cockroach::roachpb::UnhandledRetryableError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::UnhandledRetryableError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UnhandledRetryableError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUnhandledRetryableError}, {
      &protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base,}};

static void InitDefaultsTransactionRetryWithProtoRefreshError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TransactionRetryWithProtoRefreshError_default_instance_;
    new (ptr) ::cockroach::roachpb::TransactionRetryWithProtoRefreshError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TransactionRetryWithProtoRefreshError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransactionRetryWithProtoRefreshError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransactionRetryWithProtoRefreshError}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,}};

static void InitDefaultsTxnAlreadyEncounteredErrorError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_TxnAlreadyEncounteredErrorError_default_instance_;
    new (ptr) ::cockroach::roachpb::TxnAlreadyEncounteredErrorError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::TxnAlreadyEncounteredErrorError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxnAlreadyEncounteredErrorError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxnAlreadyEncounteredErrorError}, {}};

static void InitDefaultsIntegerOverflowError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_IntegerOverflowError_default_instance_;
    new (ptr) ::cockroach::roachpb::IntegerOverflowError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::IntegerOverflowError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntegerOverflowError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntegerOverflowError}, {}};

static void InitDefaultsBatchTimestampBeforeGCError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_BatchTimestampBeforeGCError_default_instance_;
    new (ptr) ::cockroach::roachpb::BatchTimestampBeforeGCError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::BatchTimestampBeforeGCError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatchTimestampBeforeGCError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatchTimestampBeforeGCError}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsIntentMissingError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_IntentMissingError_default_instance_;
    new (ptr) ::cockroach::roachpb::IntentMissingError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::IntentMissingError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IntentMissingError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIntentMissingError}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Intent.base,}};

static void InitDefaultsMergeInProgressError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_MergeInProgressError_default_instance_;
    new (ptr) ::cockroach::roachpb::MergeInProgressError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::MergeInProgressError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MergeInProgressError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMergeInProgressError}, {}};

static void InitDefaultsRangeFeedRetryError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_RangeFeedRetryError_default_instance_;
    new (ptr) ::cockroach::roachpb::RangeFeedRetryError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::RangeFeedRetryError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RangeFeedRetryError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRangeFeedRetryError}, {}};

static void InitDefaultsIndeterminateCommitError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_IndeterminateCommitError_default_instance_;
    new (ptr) ::cockroach::roachpb::IndeterminateCommitError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::IndeterminateCommitError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IndeterminateCommitError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIndeterminateCommitError}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,}};

static void InitDefaultsErrPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cockroach::roachpb::_ErrPosition_default_instance_;
    new (ptr) ::cockroach::roachpb::ErrPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cockroach::roachpb::ErrPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ErrPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErrPosition}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NotLeaseHolderError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeUnavailableError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnsupportedRequestError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeNotFoundError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeKeyMismatchError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadWithinUncertaintyIntervalError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionAbortedError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionPushError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionRetryError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionStatusError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteIntentError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteTooOldError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpRequiresTxnError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionFailedError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaseRejectedError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AmbiguousResultError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RaftGroupDeletedError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplicaCorruptionError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplicaTooOldError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreNotFoundError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnhandledRetryableError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionRetryWithProtoRefreshError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxnAlreadyEncounteredErrorError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntegerOverflowError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchTimestampBeforeGCError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntentMissingError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MergeInProgressError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeFeedRetryError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndeterminateCommitError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ErrPosition.base);
}

}  // namespace protobuf_roachpb_2ferrors_2eproto
namespace cockroach {
namespace roachpb {
bool TransactionStatusError_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransactionStatusError_Reason TransactionStatusError::REASON_UNKNOWN;
const TransactionStatusError_Reason TransactionStatusError::REASON_TXN_COMMITTED;
const TransactionStatusError_Reason TransactionStatusError::Reason_MIN;
const TransactionStatusError_Reason TransactionStatusError::Reason_MAX;
const int TransactionStatusError::Reason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RangeFeedRetryError_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RangeFeedRetryError_Reason RangeFeedRetryError::REASON_REPLICA_REMOVED;
const RangeFeedRetryError_Reason RangeFeedRetryError::REASON_RANGE_SPLIT;
const RangeFeedRetryError_Reason RangeFeedRetryError::REASON_RANGE_MERGED;
const RangeFeedRetryError_Reason RangeFeedRetryError::REASON_RAFT_SNAPSHOT;
const RangeFeedRetryError_Reason RangeFeedRetryError::REASON_LOGICAL_OPS_MISSING;
const RangeFeedRetryError_Reason RangeFeedRetryError::REASON_SLOW_CONSUMER;
const RangeFeedRetryError_Reason RangeFeedRetryError::Reason_MIN;
const RangeFeedRetryError_Reason RangeFeedRetryError::Reason_MAX;
const int RangeFeedRetryError::Reason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TransactionAbortedReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

bool TransactionRetryReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool TransactionRestart_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NotLeaseHolderError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_NotLeaseHolderError_default_instance_._instance.get_mutable()->replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
  ::cockroach::roachpb::_NotLeaseHolderError_default_instance_._instance.get_mutable()->lease_holder_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
  ::cockroach::roachpb::_NotLeaseHolderError_default_instance_._instance.get_mutable()->lease_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
}
void NotLeaseHolderError::clear_replica() {
  if (replica_ != NULL) replica_->Clear();
  clear_has_replica();
}
void NotLeaseHolderError::clear_lease_holder() {
  if (lease_holder_ != NULL) lease_holder_->Clear();
  clear_has_lease_holder();
}
void NotLeaseHolderError::clear_lease() {
  if (lease_ != NULL) lease_->Clear();
  clear_has_lease();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotLeaseHolderError::kReplicaFieldNumber;
const int NotLeaseHolderError::kLeaseHolderFieldNumber;
const int NotLeaseHolderError::kLeaseFieldNumber;
const int NotLeaseHolderError::kRangeIdFieldNumber;
const int NotLeaseHolderError::kCustomMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotLeaseHolderError::NotLeaseHolderError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_NotLeaseHolderError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.NotLeaseHolderError)
}
NotLeaseHolderError::NotLeaseHolderError(const NotLeaseHolderError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_msg()) {
    custom_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_msg_);
  }
  if (from.has_replica()) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  if (from.has_lease_holder()) {
    lease_holder_ = new ::cockroach::roachpb::ReplicaDescriptor(*from.lease_holder_);
  } else {
    lease_holder_ = NULL;
  }
  if (from.has_lease()) {
    lease_ = new ::cockroach::roachpb::Lease(*from.lease_);
  } else {
    lease_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.NotLeaseHolderError)
}

void NotLeaseHolderError::SharedCtor() {
  custom_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&replica_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&replica_)) + sizeof(range_id_));
}

NotLeaseHolderError::~NotLeaseHolderError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.NotLeaseHolderError)
  SharedDtor();
}

void NotLeaseHolderError::SharedDtor() {
  custom_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete replica_;
  if (this != internal_default_instance()) delete lease_holder_;
  if (this != internal_default_instance()) delete lease_;
}

void NotLeaseHolderError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotLeaseHolderError& NotLeaseHolderError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_NotLeaseHolderError.base);
  return *internal_default_instance();
}


void NotLeaseHolderError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.NotLeaseHolderError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      custom_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(replica_ != NULL);
      replica_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lease_holder_ != NULL);
      lease_holder_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lease_ != NULL);
      lease_->Clear();
    }
  }
  range_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NotLeaseHolderError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.NotLeaseHolderError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.ReplicaDescriptor lease_holder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease_holder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_range_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.Lease lease = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.NotLeaseHolderError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.NotLeaseHolderError)
  return false;
#undef DO_
}

void NotLeaseHolderError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.NotLeaseHolderError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_replica(), output);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor lease_holder = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_lease_holder(), output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->range_id(), output);
  }

  // optional .cockroach.roachpb.Lease lease = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_lease(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->custom_msg(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.NotLeaseHolderError)
}

size_t NotLeaseHolderError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.NotLeaseHolderError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    if (has_custom_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_msg());
    }

    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *replica_);
    }

    // optional .cockroach.roachpb.ReplicaDescriptor lease_holder = 2;
    if (has_lease_holder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lease_holder_);
    }

    // optional .cockroach.roachpb.Lease lease = 4;
    if (has_lease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lease_);
    }

    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotLeaseHolderError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotLeaseHolderError*>(&from));
}

void NotLeaseHolderError::MergeFrom(const NotLeaseHolderError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.NotLeaseHolderError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_custom_msg();
      custom_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lease_holder()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.lease_holder());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_lease()->::cockroach::roachpb::Lease::MergeFrom(from.lease());
    }
    if (cached_has_bits & 0x00000010u) {
      range_id_ = from.range_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NotLeaseHolderError::CopyFrom(const NotLeaseHolderError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.NotLeaseHolderError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotLeaseHolderError::IsInitialized() const {
  return true;
}

void NotLeaseHolderError::Swap(NotLeaseHolderError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotLeaseHolderError::InternalSwap(NotLeaseHolderError* other) {
  using std::swap;
  custom_msg_.Swap(&other->custom_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(replica_, other->replica_);
  swap(lease_holder_, other->lease_holder_);
  swap(lease_, other->lease_);
  swap(range_id_, other->range_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string NotLeaseHolderError::GetTypeName() const {
  return "cockroach.roachpb.NotLeaseHolderError";
}


// ===================================================================

void NodeUnavailableError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeUnavailableError::NodeUnavailableError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_NodeUnavailableError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.NodeUnavailableError)
}
NodeUnavailableError::NodeUnavailableError(const NodeUnavailableError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.NodeUnavailableError)
}

void NodeUnavailableError::SharedCtor() {
}

NodeUnavailableError::~NodeUnavailableError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.NodeUnavailableError)
  SharedDtor();
}

void NodeUnavailableError::SharedDtor() {
}

void NodeUnavailableError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeUnavailableError& NodeUnavailableError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_NodeUnavailableError.base);
  return *internal_default_instance();
}


void NodeUnavailableError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.NodeUnavailableError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeUnavailableError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.NodeUnavailableError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.NodeUnavailableError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.NodeUnavailableError)
  return false;
#undef DO_
}

void NodeUnavailableError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.NodeUnavailableError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.NodeUnavailableError)
}

size_t NodeUnavailableError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.NodeUnavailableError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeUnavailableError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeUnavailableError*>(&from));
}

void NodeUnavailableError::MergeFrom(const NodeUnavailableError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.NodeUnavailableError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeUnavailableError::CopyFrom(const NodeUnavailableError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.NodeUnavailableError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeUnavailableError::IsInitialized() const {
  return true;
}

void NodeUnavailableError::Swap(NodeUnavailableError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeUnavailableError::InternalSwap(NodeUnavailableError* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string NodeUnavailableError::GetTypeName() const {
  return "cockroach.roachpb.NodeUnavailableError";
}


// ===================================================================

void UnsupportedRequestError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsupportedRequestError::UnsupportedRequestError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_UnsupportedRequestError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.UnsupportedRequestError)
}
UnsupportedRequestError::UnsupportedRequestError(const UnsupportedRequestError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.UnsupportedRequestError)
}

void UnsupportedRequestError::SharedCtor() {
}

UnsupportedRequestError::~UnsupportedRequestError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.UnsupportedRequestError)
  SharedDtor();
}

void UnsupportedRequestError::SharedDtor() {
}

void UnsupportedRequestError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsupportedRequestError& UnsupportedRequestError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_UnsupportedRequestError.base);
  return *internal_default_instance();
}


void UnsupportedRequestError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.UnsupportedRequestError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnsupportedRequestError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.UnsupportedRequestError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.UnsupportedRequestError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.UnsupportedRequestError)
  return false;
#undef DO_
}

void UnsupportedRequestError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.UnsupportedRequestError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.UnsupportedRequestError)
}

size_t UnsupportedRequestError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.UnsupportedRequestError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsupportedRequestError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnsupportedRequestError*>(&from));
}

void UnsupportedRequestError::MergeFrom(const UnsupportedRequestError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.UnsupportedRequestError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnsupportedRequestError::CopyFrom(const UnsupportedRequestError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.UnsupportedRequestError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsupportedRequestError::IsInitialized() const {
  return true;
}

void UnsupportedRequestError::Swap(UnsupportedRequestError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsupportedRequestError::InternalSwap(UnsupportedRequestError* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string UnsupportedRequestError::GetTypeName() const {
  return "cockroach.roachpb.UnsupportedRequestError";
}


// ===================================================================

void RangeNotFoundError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeNotFoundError::kRangeIdFieldNumber;
const int RangeNotFoundError::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeNotFoundError::RangeNotFoundError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_RangeNotFoundError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeNotFoundError)
}
RangeNotFoundError::RangeNotFoundError(const RangeNotFoundError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(store_id_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeNotFoundError)
}

void RangeNotFoundError::SharedCtor() {
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(store_id_));
}

RangeNotFoundError::~RangeNotFoundError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeNotFoundError)
  SharedDtor();
}

void RangeNotFoundError::SharedDtor() {
}

void RangeNotFoundError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeNotFoundError& RangeNotFoundError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_RangeNotFoundError.base);
  return *internal_default_instance();
}


void RangeNotFoundError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeNotFoundError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&range_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&store_id_) -
        reinterpret_cast<char*>(&range_id_)) + sizeof(store_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RangeNotFoundError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeNotFoundError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_range_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeNotFoundError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeNotFoundError)
  return false;
#undef DO_
}

void RangeNotFoundError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeNotFoundError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->store_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeNotFoundError)
}

size_t RangeNotFoundError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeNotFoundError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->store_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeNotFoundError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeNotFoundError*>(&from));
}

void RangeNotFoundError::MergeFrom(const RangeNotFoundError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeNotFoundError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      range_id_ = from.range_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      store_id_ = from.store_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RangeNotFoundError::CopyFrom(const RangeNotFoundError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeNotFoundError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeNotFoundError::IsInitialized() const {
  return true;
}

void RangeNotFoundError::Swap(RangeNotFoundError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeNotFoundError::InternalSwap(RangeNotFoundError* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  swap(store_id_, other->store_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeNotFoundError::GetTypeName() const {
  return "cockroach.roachpb.RangeNotFoundError";
}


// ===================================================================

void RangeKeyMismatchError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_RangeKeyMismatchError_default_instance_._instance.get_mutable()->mismatched_range_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
  ::cockroach::roachpb::_RangeKeyMismatchError_default_instance_._instance.get_mutable()->suggested_range_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
}
void RangeKeyMismatchError::clear_mismatched_range() {
  if (mismatched_range_ != NULL) mismatched_range_->Clear();
  clear_has_mismatched_range();
}
void RangeKeyMismatchError::clear_suggested_range() {
  if (suggested_range_ != NULL) suggested_range_->Clear();
  clear_has_suggested_range();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeKeyMismatchError::kRequestStartKeyFieldNumber;
const int RangeKeyMismatchError::kRequestEndKeyFieldNumber;
const int RangeKeyMismatchError::kMismatchedRangeFieldNumber;
const int RangeKeyMismatchError::kSuggestedRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeKeyMismatchError::RangeKeyMismatchError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_RangeKeyMismatchError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeKeyMismatchError)
}
RangeKeyMismatchError::RangeKeyMismatchError(const RangeKeyMismatchError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_start_key()) {
    request_start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_start_key_);
  }
  request_end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_end_key()) {
    request_end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_end_key_);
  }
  if (from.has_mismatched_range()) {
    mismatched_range_ = new ::cockroach::roachpb::RangeDescriptor(*from.mismatched_range_);
  } else {
    mismatched_range_ = NULL;
  }
  if (from.has_suggested_range()) {
    suggested_range_ = new ::cockroach::roachpb::RangeDescriptor(*from.suggested_range_);
  } else {
    suggested_range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeKeyMismatchError)
}

void RangeKeyMismatchError::SharedCtor() {
  request_start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mismatched_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suggested_range_) -
      reinterpret_cast<char*>(&mismatched_range_)) + sizeof(suggested_range_));
}

RangeKeyMismatchError::~RangeKeyMismatchError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeKeyMismatchError)
  SharedDtor();
}

void RangeKeyMismatchError::SharedDtor() {
  request_start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mismatched_range_;
  if (this != internal_default_instance()) delete suggested_range_;
}

void RangeKeyMismatchError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeKeyMismatchError& RangeKeyMismatchError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_RangeKeyMismatchError.base);
  return *internal_default_instance();
}


void RangeKeyMismatchError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeKeyMismatchError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      request_start_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_end_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mismatched_range_ != NULL);
      mismatched_range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(suggested_range_ != NULL);
      suggested_range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RangeKeyMismatchError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeKeyMismatchError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mismatched_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.RangeDescriptor suggested_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_suggested_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeKeyMismatchError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeKeyMismatchError)
  return false;
#undef DO_
}

void RangeKeyMismatchError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeKeyMismatchError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->request_start_key(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request_end_key(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_mismatched_range(), output);
  }

  // optional .cockroach.roachpb.RangeDescriptor suggested_range = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_suggested_range(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeKeyMismatchError)
}

size_t RangeKeyMismatchError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeKeyMismatchError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    if (has_request_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_start_key());
    }

    if (has_request_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_end_key());
    }

    if (has_mismatched_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mismatched_range_);
    }

    // optional .cockroach.roachpb.RangeDescriptor suggested_range = 4;
    if (has_suggested_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *suggested_range_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeKeyMismatchError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeKeyMismatchError*>(&from));
}

void RangeKeyMismatchError::MergeFrom(const RangeKeyMismatchError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeKeyMismatchError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_start_key();
      request_start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_start_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_end_key();
      request_end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_end_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mismatched_range()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.mismatched_range());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_suggested_range()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.suggested_range());
    }
  }
}

void RangeKeyMismatchError::CopyFrom(const RangeKeyMismatchError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeKeyMismatchError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeKeyMismatchError::IsInitialized() const {
  return true;
}

void RangeKeyMismatchError::Swap(RangeKeyMismatchError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeKeyMismatchError::InternalSwap(RangeKeyMismatchError* other) {
  using std::swap;
  request_start_key_.Swap(&other->request_start_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_end_key_.Swap(&other->request_end_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mismatched_range_, other->mismatched_range_);
  swap(suggested_range_, other->suggested_range_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeKeyMismatchError::GetTypeName() const {
  return "cockroach.roachpb.RangeKeyMismatchError";
}


// ===================================================================

void ReadWithinUncertaintyIntervalError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ReadWithinUncertaintyIntervalError_default_instance_._instance.get_mutable()->read_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_ReadWithinUncertaintyIntervalError_default_instance_._instance.get_mutable()->existing_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_ReadWithinUncertaintyIntervalError_default_instance_._instance.get_mutable()->max_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void ReadWithinUncertaintyIntervalError::clear_read_timestamp() {
  if (read_timestamp_ != NULL) read_timestamp_->Clear();
  clear_has_read_timestamp();
}
void ReadWithinUncertaintyIntervalError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->Clear();
  clear_has_existing_timestamp();
}
void ReadWithinUncertaintyIntervalError::clear_max_timestamp() {
  if (max_timestamp_ != NULL) max_timestamp_->Clear();
  clear_has_max_timestamp();
}
void ReadWithinUncertaintyIntervalError::clear_observed_timestamps() {
  observed_timestamps_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadWithinUncertaintyIntervalError::kReadTimestampFieldNumber;
const int ReadWithinUncertaintyIntervalError::kExistingTimestampFieldNumber;
const int ReadWithinUncertaintyIntervalError::kMaxTimestampFieldNumber;
const int ReadWithinUncertaintyIntervalError::kObservedTimestampsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadWithinUncertaintyIntervalError::ReadWithinUncertaintyIntervalError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ReadWithinUncertaintyIntervalError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
}
ReadWithinUncertaintyIntervalError::ReadWithinUncertaintyIntervalError(const ReadWithinUncertaintyIntervalError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      observed_timestamps_(from.observed_timestamps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_read_timestamp()) {
    read_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.read_timestamp_);
  } else {
    read_timestamp_ = NULL;
  }
  if (from.has_existing_timestamp()) {
    existing_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.existing_timestamp_);
  } else {
    existing_timestamp_ = NULL;
  }
  if (from.has_max_timestamp()) {
    max_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.max_timestamp_);
  } else {
    max_timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
}

void ReadWithinUncertaintyIntervalError::SharedCtor() {
  ::memset(&read_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_timestamp_) -
      reinterpret_cast<char*>(&read_timestamp_)) + sizeof(max_timestamp_));
}

ReadWithinUncertaintyIntervalError::~ReadWithinUncertaintyIntervalError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  SharedDtor();
}

void ReadWithinUncertaintyIntervalError::SharedDtor() {
  if (this != internal_default_instance()) delete read_timestamp_;
  if (this != internal_default_instance()) delete existing_timestamp_;
  if (this != internal_default_instance()) delete max_timestamp_;
}

void ReadWithinUncertaintyIntervalError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadWithinUncertaintyIntervalError& ReadWithinUncertaintyIntervalError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_ReadWithinUncertaintyIntervalError.base);
  return *internal_default_instance();
}


void ReadWithinUncertaintyIntervalError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observed_timestamps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(read_timestamp_ != NULL);
      read_timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(existing_timestamp_ != NULL);
      existing_timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(max_timestamp_ != NULL);
      max_timestamp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReadWithinUncertaintyIntervalError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existing_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.util.hlc.Timestamp max_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_observed_timestamps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  return false;
#undef DO_
}

void ReadWithinUncertaintyIntervalError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_read_timestamp(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_existing_timestamp(), output);
  }

  // optional .cockroach.util.hlc.Timestamp max_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_max_timestamp(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observed_timestamps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->observed_timestamps(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
}

size_t ReadWithinUncertaintyIntervalError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  {
    unsigned int count = static_cast<unsigned int>(this->observed_timestamps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->observed_timestamps(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    if (has_read_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *read_timestamp_);
    }

    if (has_existing_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *existing_timestamp_);
    }

    // optional .cockroach.util.hlc.Timestamp max_timestamp = 3;
    if (has_max_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *max_timestamp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadWithinUncertaintyIntervalError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReadWithinUncertaintyIntervalError*>(&from));
}

void ReadWithinUncertaintyIntervalError::MergeFrom(const ReadWithinUncertaintyIntervalError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observed_timestamps_.MergeFrom(from.observed_timestamps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_read_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.read_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_existing_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.existing_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_max_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.max_timestamp());
    }
  }
}

void ReadWithinUncertaintyIntervalError::CopyFrom(const ReadWithinUncertaintyIntervalError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWithinUncertaintyIntervalError::IsInitialized() const {
  return true;
}

void ReadWithinUncertaintyIntervalError::Swap(ReadWithinUncertaintyIntervalError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadWithinUncertaintyIntervalError::InternalSwap(ReadWithinUncertaintyIntervalError* other) {
  using std::swap;
  CastToBase(&observed_timestamps_)->InternalSwap(CastToBase(&other->observed_timestamps_));
  swap(read_timestamp_, other->read_timestamp_);
  swap(existing_timestamp_, other->existing_timestamp_);
  swap(max_timestamp_, other->max_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReadWithinUncertaintyIntervalError::GetTypeName() const {
  return "cockroach.roachpb.ReadWithinUncertaintyIntervalError";
}


// ===================================================================

void TransactionAbortedError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionAbortedError::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionAbortedError::TransactionAbortedError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionAbortedError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionAbortedError)
}
TransactionAbortedError::TransactionAbortedError(const TransactionAbortedError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionAbortedError)
}

void TransactionAbortedError::SharedCtor() {
  reason_ = 0;
}

TransactionAbortedError::~TransactionAbortedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionAbortedError)
  SharedDtor();
}

void TransactionAbortedError::SharedDtor() {
}

void TransactionAbortedError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionAbortedError& TransactionAbortedError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionAbortedError.base);
  return *internal_default_instance();
}


void TransactionAbortedError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TransactionAbortedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionAbortedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionAbortedError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionAbortedReason_IsValid(value)) {
            set_reason(static_cast< ::cockroach::roachpb::TransactionAbortedReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionAbortedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionAbortedError)
  return false;
#undef DO_
}

void TransactionAbortedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionAbortedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionAbortedError)
}

size_t TransactionAbortedError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TransactionAbortedError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionAbortedError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionAbortedError*>(&from));
}

void TransactionAbortedError::MergeFrom(const TransactionAbortedError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TransactionAbortedError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    set_reason(from.reason());
  }
}

void TransactionAbortedError::CopyFrom(const TransactionAbortedError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TransactionAbortedError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAbortedError::IsInitialized() const {
  return true;
}

void TransactionAbortedError::Swap(TransactionAbortedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionAbortedError::InternalSwap(TransactionAbortedError* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TransactionAbortedError::GetTypeName() const {
  return "cockroach.roachpb.TransactionAbortedError";
}


// ===================================================================

void TransactionPushError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_TransactionPushError_default_instance_._instance.get_mutable()->pushee_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}
void TransactionPushError::clear_pushee_txn() {
  if (pushee_txn_ != NULL) pushee_txn_->Clear();
  clear_has_pushee_txn();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPushError::kPusheeTxnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPushError::TransactionPushError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionPushError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionPushError)
}
TransactionPushError::TransactionPushError(const TransactionPushError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pushee_txn()) {
    pushee_txn_ = new ::cockroach::roachpb::Transaction(*from.pushee_txn_);
  } else {
    pushee_txn_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionPushError)
}

void TransactionPushError::SharedCtor() {
  pushee_txn_ = NULL;
}

TransactionPushError::~TransactionPushError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionPushError)
  SharedDtor();
}

void TransactionPushError::SharedDtor() {
  if (this != internal_default_instance()) delete pushee_txn_;
}

void TransactionPushError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionPushError& TransactionPushError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionPushError.base);
  return *internal_default_instance();
}


void TransactionPushError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TransactionPushError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pushee_txn_ != NULL);
    pushee_txn_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionPushError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionPushError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionPushError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionPushError)
  return false;
#undef DO_
}

void TransactionPushError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionPushError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_pushee_txn(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionPushError)
}

size_t TransactionPushError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TransactionPushError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_pushee_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pushee_txn_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionPushError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionPushError*>(&from));
}

void TransactionPushError::MergeFrom(const TransactionPushError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TransactionPushError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pushee_txn()) {
    mutable_pushee_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.pushee_txn());
  }
}

void TransactionPushError::CopyFrom(const TransactionPushError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TransactionPushError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPushError::IsInitialized() const {
  return true;
}

void TransactionPushError::Swap(TransactionPushError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPushError::InternalSwap(TransactionPushError* other) {
  using std::swap;
  swap(pushee_txn_, other->pushee_txn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TransactionPushError::GetTypeName() const {
  return "cockroach.roachpb.TransactionPushError";
}


// ===================================================================

void TransactionRetryError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRetryError::kReasonFieldNumber;
const int TransactionRetryError::kExtraMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRetryError::TransactionRetryError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionRetryError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionRetryError)
}
TransactionRetryError::TransactionRetryError(const TransactionRetryError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_msg()) {
    extra_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_msg_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionRetryError)
}

void TransactionRetryError::SharedCtor() {
  extra_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = 0;
}

TransactionRetryError::~TransactionRetryError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionRetryError)
  SharedDtor();
}

void TransactionRetryError::SharedDtor() {
  extra_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionRetryError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionRetryError& TransactionRetryError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionRetryError.base);
  return *internal_default_instance();
}


void TransactionRetryError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TransactionRetryError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extra_msg_.ClearNonDefaultToEmptyNoArena();
  }
  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionRetryError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionRetryError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionRetryReason_IsValid(value)) {
            set_reason(static_cast< ::cockroach::roachpb::TransactionRetryReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionRetryError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionRetryError)
  return false;
#undef DO_
}

void TransactionRetryError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionRetryError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extra_msg(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionRetryError)
}

size_t TransactionRetryError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TransactionRetryError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_extra_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_msg());
    }

    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionRetryError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionRetryError*>(&from));
}

void TransactionRetryError::MergeFrom(const TransactionRetryError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TransactionRetryError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extra_msg();
      extra_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionRetryError::CopyFrom(const TransactionRetryError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TransactionRetryError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRetryError::IsInitialized() const {
  return true;
}

void TransactionRetryError::Swap(TransactionRetryError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRetryError::InternalSwap(TransactionRetryError* other) {
  using std::swap;
  extra_msg_.Swap(&other->extra_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_, other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TransactionRetryError::GetTypeName() const {
  return "cockroach.roachpb.TransactionRetryError";
}


// ===================================================================

void TransactionStatusError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionStatusError::kMsgFieldNumber;
const int TransactionStatusError::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionStatusError::TransactionStatusError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionStatusError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionStatusError)
}
TransactionStatusError::TransactionStatusError(const TransactionStatusError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionStatusError)
}

void TransactionStatusError::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = 0;
}

TransactionStatusError::~TransactionStatusError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionStatusError)
  SharedDtor();
}

void TransactionStatusError::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionStatusError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionStatusError& TransactionStatusError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionStatusError.base);
  return *internal_default_instance();
}


void TransactionStatusError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TransactionStatusError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionStatusError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionStatusError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionStatusError_Reason_IsValid(value)) {
            set_reason(static_cast< ::cockroach::roachpb::TransactionStatusError_Reason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionStatusError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionStatusError)
  return false;
#undef DO_
}

void TransactionStatusError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionStatusError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionStatusError)
}

size_t TransactionStatusError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TransactionStatusError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionStatusError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionStatusError*>(&from));
}

void TransactionStatusError::MergeFrom(const TransactionStatusError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TransactionStatusError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionStatusError::CopyFrom(const TransactionStatusError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TransactionStatusError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStatusError::IsInitialized() const {
  return true;
}

void TransactionStatusError::Swap(TransactionStatusError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionStatusError::InternalSwap(TransactionStatusError* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_, other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TransactionStatusError::GetTypeName() const {
  return "cockroach.roachpb.TransactionStatusError";
}


// ===================================================================

void WriteIntentError::InitAsDefaultInstance() {
}
void WriteIntentError::clear_intents() {
  intents_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteIntentError::kIntentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteIntentError::WriteIntentError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_WriteIntentError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.WriteIntentError)
}
WriteIntentError::WriteIntentError(const WriteIntentError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      intents_(from.intents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.WriteIntentError)
}

void WriteIntentError::SharedCtor() {
}

WriteIntentError::~WriteIntentError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.WriteIntentError)
  SharedDtor();
}

void WriteIntentError::SharedDtor() {
}

void WriteIntentError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteIntentError& WriteIntentError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_WriteIntentError.base);
  return *internal_default_instance();
}


void WriteIntentError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.WriteIntentError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intents_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WriteIntentError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.WriteIntentError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.WriteIntentError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.WriteIntentError)
  return false;
#undef DO_
}

void WriteIntentError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.WriteIntentError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->intents(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.WriteIntentError)
}

size_t WriteIntentError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.WriteIntentError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  {
    unsigned int count = static_cast<unsigned int>(this->intents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intents(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteIntentError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WriteIntentError*>(&from));
}

void WriteIntentError::MergeFrom(const WriteIntentError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.WriteIntentError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intents_.MergeFrom(from.intents_);
}

void WriteIntentError::CopyFrom(const WriteIntentError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.WriteIntentError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteIntentError::IsInitialized() const {
  return true;
}

void WriteIntentError::Swap(WriteIntentError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteIntentError::InternalSwap(WriteIntentError* other) {
  using std::swap;
  CastToBase(&intents_)->InternalSwap(CastToBase(&other->intents_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string WriteIntentError::GetTypeName() const {
  return "cockroach.roachpb.WriteIntentError";
}


// ===================================================================

void WriteTooOldError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_WriteTooOldError_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_WriteTooOldError_default_instance_._instance.get_mutable()->actual_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void WriteTooOldError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->Clear();
  clear_has_timestamp();
}
void WriteTooOldError::clear_actual_timestamp() {
  if (actual_timestamp_ != NULL) actual_timestamp_->Clear();
  clear_has_actual_timestamp();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteTooOldError::kTimestampFieldNumber;
const int WriteTooOldError::kActualTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteTooOldError::WriteTooOldError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_WriteTooOldError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.WriteTooOldError)
}
WriteTooOldError::WriteTooOldError(const WriteTooOldError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_actual_timestamp()) {
    actual_timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.actual_timestamp_);
  } else {
    actual_timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.WriteTooOldError)
}

void WriteTooOldError::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_timestamp_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(actual_timestamp_));
}

WriteTooOldError::~WriteTooOldError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.WriteTooOldError)
  SharedDtor();
}

void WriteTooOldError::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete actual_timestamp_;
}

void WriteTooOldError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteTooOldError& WriteTooOldError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_WriteTooOldError.base);
  return *internal_default_instance();
}


void WriteTooOldError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.WriteTooOldError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timestamp_ != NULL);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(actual_timestamp_ != NULL);
      actual_timestamp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WriteTooOldError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.WriteTooOldError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actual_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.WriteTooOldError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.WriteTooOldError)
  return false;
#undef DO_
}

void WriteTooOldError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.WriteTooOldError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_timestamp(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_actual_timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.WriteTooOldError)
}

size_t WriteTooOldError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.WriteTooOldError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    if (has_actual_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *actual_timestamp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteTooOldError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WriteTooOldError*>(&from));
}

void WriteTooOldError::MergeFrom(const WriteTooOldError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.WriteTooOldError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_actual_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.actual_timestamp());
    }
  }
}

void WriteTooOldError::CopyFrom(const WriteTooOldError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.WriteTooOldError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTooOldError::IsInitialized() const {
  return true;
}

void WriteTooOldError::Swap(WriteTooOldError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteTooOldError::InternalSwap(WriteTooOldError* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(actual_timestamp_, other->actual_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string WriteTooOldError::GetTypeName() const {
  return "cockroach.roachpb.WriteTooOldError";
}


// ===================================================================

void OpRequiresTxnError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpRequiresTxnError::OpRequiresTxnError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_OpRequiresTxnError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.OpRequiresTxnError)
}
OpRequiresTxnError::OpRequiresTxnError(const OpRequiresTxnError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.OpRequiresTxnError)
}

void OpRequiresTxnError::SharedCtor() {
}

OpRequiresTxnError::~OpRequiresTxnError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.OpRequiresTxnError)
  SharedDtor();
}

void OpRequiresTxnError::SharedDtor() {
}

void OpRequiresTxnError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpRequiresTxnError& OpRequiresTxnError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_OpRequiresTxnError.base);
  return *internal_default_instance();
}


void OpRequiresTxnError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.OpRequiresTxnError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpRequiresTxnError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.OpRequiresTxnError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.OpRequiresTxnError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.OpRequiresTxnError)
  return false;
#undef DO_
}

void OpRequiresTxnError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.OpRequiresTxnError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.OpRequiresTxnError)
}

size_t OpRequiresTxnError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.OpRequiresTxnError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpRequiresTxnError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpRequiresTxnError*>(&from));
}

void OpRequiresTxnError::MergeFrom(const OpRequiresTxnError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.OpRequiresTxnError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OpRequiresTxnError::CopyFrom(const OpRequiresTxnError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.OpRequiresTxnError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpRequiresTxnError::IsInitialized() const {
  return true;
}

void OpRequiresTxnError::Swap(OpRequiresTxnError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpRequiresTxnError::InternalSwap(OpRequiresTxnError* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string OpRequiresTxnError::GetTypeName() const {
  return "cockroach.roachpb.OpRequiresTxnError";
}


// ===================================================================

void ConditionFailedError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_ConditionFailedError_default_instance_._instance.get_mutable()->actual_value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
}
void ConditionFailedError::clear_actual_value() {
  if (actual_value_ != NULL) actual_value_->Clear();
  clear_has_actual_value();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionFailedError::kActualValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionFailedError::ConditionFailedError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ConditionFailedError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ConditionFailedError)
}
ConditionFailedError::ConditionFailedError(const ConditionFailedError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_actual_value()) {
    actual_value_ = new ::cockroach::roachpb::Value(*from.actual_value_);
  } else {
    actual_value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ConditionFailedError)
}

void ConditionFailedError::SharedCtor() {
  actual_value_ = NULL;
}

ConditionFailedError::~ConditionFailedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ConditionFailedError)
  SharedDtor();
}

void ConditionFailedError::SharedDtor() {
  if (this != internal_default_instance()) delete actual_value_;
}

void ConditionFailedError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionFailedError& ConditionFailedError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_ConditionFailedError.base);
  return *internal_default_instance();
}


void ConditionFailedError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ConditionFailedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(actual_value_ != NULL);
    actual_value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConditionFailedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ConditionFailedError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Value actual_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actual_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ConditionFailedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ConditionFailedError)
  return false;
#undef DO_
}

void ConditionFailedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ConditionFailedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cockroach.roachpb.Value actual_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_actual_value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ConditionFailedError)
}

size_t ConditionFailedError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ConditionFailedError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional .cockroach.roachpb.Value actual_value = 1;
  if (has_actual_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *actual_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionFailedError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConditionFailedError*>(&from));
}

void ConditionFailedError::MergeFrom(const ConditionFailedError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ConditionFailedError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actual_value()) {
    mutable_actual_value()->::cockroach::roachpb::Value::MergeFrom(from.actual_value());
  }
}

void ConditionFailedError::CopyFrom(const ConditionFailedError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ConditionFailedError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionFailedError::IsInitialized() const {
  return true;
}

void ConditionFailedError::Swap(ConditionFailedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionFailedError::InternalSwap(ConditionFailedError* other) {
  using std::swap;
  swap(actual_value_, other->actual_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ConditionFailedError::GetTypeName() const {
  return "cockroach.roachpb.ConditionFailedError";
}


// ===================================================================

void LeaseRejectedError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_LeaseRejectedError_default_instance_._instance.get_mutable()->requested_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
  ::cockroach::roachpb::_LeaseRejectedError_default_instance_._instance.get_mutable()->existing_ = const_cast< ::cockroach::roachpb::Lease*>(
      ::cockroach::roachpb::Lease::internal_default_instance());
}
void LeaseRejectedError::clear_requested() {
  if (requested_ != NULL) requested_->Clear();
  clear_has_requested();
}
void LeaseRejectedError::clear_existing() {
  if (existing_ != NULL) existing_->Clear();
  clear_has_existing();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseRejectedError::kMessageFieldNumber;
const int LeaseRejectedError::kRequestedFieldNumber;
const int LeaseRejectedError::kExistingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseRejectedError::LeaseRejectedError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_LeaseRejectedError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.LeaseRejectedError)
}
LeaseRejectedError::LeaseRejectedError(const LeaseRejectedError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_requested()) {
    requested_ = new ::cockroach::roachpb::Lease(*from.requested_);
  } else {
    requested_ = NULL;
  }
  if (from.has_existing()) {
    existing_ = new ::cockroach::roachpb::Lease(*from.existing_);
  } else {
    existing_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.LeaseRejectedError)
}

void LeaseRejectedError::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&existing_) -
      reinterpret_cast<char*>(&requested_)) + sizeof(existing_));
}

LeaseRejectedError::~LeaseRejectedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.LeaseRejectedError)
  SharedDtor();
}

void LeaseRejectedError::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requested_;
  if (this != internal_default_instance()) delete existing_;
}

void LeaseRejectedError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseRejectedError& LeaseRejectedError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_LeaseRejectedError.base);
  return *internal_default_instance();
}


void LeaseRejectedError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.LeaseRejectedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(requested_ != NULL);
      requested_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(existing_ != NULL);
      existing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaseRejectedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.LeaseRejectedError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requested()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.LeaseRejectedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.LeaseRejectedError)
  return false;
#undef DO_
}

void LeaseRejectedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.LeaseRejectedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_requested(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_existing(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.LeaseRejectedError)
}

size_t LeaseRejectedError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.LeaseRejectedError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    if (has_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *requested_);
    }

    if (has_existing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *existing_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseRejectedError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeaseRejectedError*>(&from));
}

void LeaseRejectedError::MergeFrom(const LeaseRejectedError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.LeaseRejectedError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_requested()->::cockroach::roachpb::Lease::MergeFrom(from.requested());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_existing()->::cockroach::roachpb::Lease::MergeFrom(from.existing());
    }
  }
}

void LeaseRejectedError::CopyFrom(const LeaseRejectedError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.LeaseRejectedError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseRejectedError::IsInitialized() const {
  return true;
}

void LeaseRejectedError::Swap(LeaseRejectedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseRejectedError::InternalSwap(LeaseRejectedError* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requested_, other->requested_);
  swap(existing_, other->existing_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LeaseRejectedError::GetTypeName() const {
  return "cockroach.roachpb.LeaseRejectedError";
}


// ===================================================================

void AmbiguousResultError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_AmbiguousResultError_default_instance_._instance.get_mutable()->wrapped_err_ = const_cast< ::cockroach::roachpb::Error*>(
      ::cockroach::roachpb::Error::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmbiguousResultError::kMessageFieldNumber;
const int AmbiguousResultError::kWrappedErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmbiguousResultError::AmbiguousResultError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AmbiguousResultError)
}
AmbiguousResultError::AmbiguousResultError(const AmbiguousResultError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_wrapped_err()) {
    wrapped_err_ = new ::cockroach::roachpb::Error(*from.wrapped_err_);
  } else {
    wrapped_err_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AmbiguousResultError)
}

void AmbiguousResultError::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wrapped_err_ = NULL;
}

AmbiguousResultError::~AmbiguousResultError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AmbiguousResultError)
  SharedDtor();
}

void AmbiguousResultError::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wrapped_err_;
}

void AmbiguousResultError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmbiguousResultError& AmbiguousResultError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base);
  return *internal_default_instance();
}


void AmbiguousResultError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AmbiguousResultError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wrapped_err_ != NULL);
      wrapped_err_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AmbiguousResultError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AmbiguousResultError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.Error wrapped_err = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wrapped_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AmbiguousResultError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AmbiguousResultError)
  return false;
#undef DO_
}

void AmbiguousResultError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AmbiguousResultError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional .cockroach.roachpb.Error wrapped_err = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_wrapped_err(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AmbiguousResultError)
}

size_t AmbiguousResultError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AmbiguousResultError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .cockroach.roachpb.Error wrapped_err = 2;
    if (has_wrapped_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wrapped_err_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmbiguousResultError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AmbiguousResultError*>(&from));
}

void AmbiguousResultError::MergeFrom(const AmbiguousResultError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AmbiguousResultError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wrapped_err()->::cockroach::roachpb::Error::MergeFrom(from.wrapped_err());
    }
  }
}

void AmbiguousResultError::CopyFrom(const AmbiguousResultError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AmbiguousResultError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmbiguousResultError::IsInitialized() const {
  return true;
}

void AmbiguousResultError::Swap(AmbiguousResultError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmbiguousResultError::InternalSwap(AmbiguousResultError* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(wrapped_err_, other->wrapped_err_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AmbiguousResultError::GetTypeName() const {
  return "cockroach.roachpb.AmbiguousResultError";
}


// ===================================================================

void RaftGroupDeletedError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftGroupDeletedError::RaftGroupDeletedError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_RaftGroupDeletedError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RaftGroupDeletedError)
}
RaftGroupDeletedError::RaftGroupDeletedError(const RaftGroupDeletedError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RaftGroupDeletedError)
}

void RaftGroupDeletedError::SharedCtor() {
}

RaftGroupDeletedError::~RaftGroupDeletedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RaftGroupDeletedError)
  SharedDtor();
}

void RaftGroupDeletedError::SharedDtor() {
}

void RaftGroupDeletedError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftGroupDeletedError& RaftGroupDeletedError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_RaftGroupDeletedError.base);
  return *internal_default_instance();
}


void RaftGroupDeletedError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RaftGroupDeletedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RaftGroupDeletedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RaftGroupDeletedError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RaftGroupDeletedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RaftGroupDeletedError)
  return false;
#undef DO_
}

void RaftGroupDeletedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RaftGroupDeletedError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RaftGroupDeletedError)
}

size_t RaftGroupDeletedError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RaftGroupDeletedError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftGroupDeletedError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RaftGroupDeletedError*>(&from));
}

void RaftGroupDeletedError::MergeFrom(const RaftGroupDeletedError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RaftGroupDeletedError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RaftGroupDeletedError::CopyFrom(const RaftGroupDeletedError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RaftGroupDeletedError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftGroupDeletedError::IsInitialized() const {
  return true;
}

void RaftGroupDeletedError::Swap(RaftGroupDeletedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftGroupDeletedError::InternalSwap(RaftGroupDeletedError* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RaftGroupDeletedError::GetTypeName() const {
  return "cockroach.roachpb.RaftGroupDeletedError";
}


// ===================================================================

void ReplicaCorruptionError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaCorruptionError::kErrorMsgFieldNumber;
const int ReplicaCorruptionError::kProcessedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaCorruptionError::ReplicaCorruptionError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ReplicaCorruptionError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicaCorruptionError)
}
ReplicaCorruptionError::ReplicaCorruptionError(const ReplicaCorruptionError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  processed_ = from.processed_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicaCorruptionError)
}

void ReplicaCorruptionError::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processed_ = false;
}

ReplicaCorruptionError::~ReplicaCorruptionError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicaCorruptionError)
  SharedDtor();
}

void ReplicaCorruptionError::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReplicaCorruptionError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaCorruptionError& ReplicaCorruptionError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_ReplicaCorruptionError.base);
  return *internal_default_instance();
}


void ReplicaCorruptionError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReplicaCorruptionError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  processed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicaCorruptionError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicaCorruptionError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_processed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicaCorruptionError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicaCorruptionError)
  return false;
#undef DO_
}

void ReplicaCorruptionError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicaCorruptionError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_msg(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->processed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicaCorruptionError)
}

size_t ReplicaCorruptionError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReplicaCorruptionError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    if (has_processed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaCorruptionError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicaCorruptionError*>(&from));
}

void ReplicaCorruptionError::MergeFrom(const ReplicaCorruptionError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReplicaCorruptionError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      processed_ = from.processed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicaCorruptionError::CopyFrom(const ReplicaCorruptionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReplicaCorruptionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaCorruptionError::IsInitialized() const {
  return true;
}

void ReplicaCorruptionError::Swap(ReplicaCorruptionError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaCorruptionError::InternalSwap(ReplicaCorruptionError* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(processed_, other->processed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReplicaCorruptionError::GetTypeName() const {
  return "cockroach.roachpb.ReplicaCorruptionError";
}


// ===================================================================

void ReplicaTooOldError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaTooOldError::kReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaTooOldError::ReplicaTooOldError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ReplicaTooOldError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicaTooOldError)
}
ReplicaTooOldError::ReplicaTooOldError(const ReplicaTooOldError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replica_id_ = from.replica_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicaTooOldError)
}

void ReplicaTooOldError::SharedCtor() {
  replica_id_ = 0;
}

ReplicaTooOldError::~ReplicaTooOldError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicaTooOldError)
  SharedDtor();
}

void ReplicaTooOldError::SharedDtor() {
}

void ReplicaTooOldError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaTooOldError& ReplicaTooOldError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_ReplicaTooOldError.base);
  return *internal_default_instance();
}


void ReplicaTooOldError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReplicaTooOldError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replica_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicaTooOldError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicaTooOldError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicaTooOldError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicaTooOldError)
  return false;
#undef DO_
}

void ReplicaTooOldError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicaTooOldError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->replica_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicaTooOldError)
}

size_t ReplicaTooOldError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReplicaTooOldError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_replica_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaTooOldError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicaTooOldError*>(&from));
}

void ReplicaTooOldError::MergeFrom(const ReplicaTooOldError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReplicaTooOldError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_replica_id()) {
    set_replica_id(from.replica_id());
  }
}

void ReplicaTooOldError::CopyFrom(const ReplicaTooOldError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReplicaTooOldError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaTooOldError::IsInitialized() const {
  return true;
}

void ReplicaTooOldError::Swap(ReplicaTooOldError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaTooOldError::InternalSwap(ReplicaTooOldError* other) {
  using std::swap;
  swap(replica_id_, other->replica_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReplicaTooOldError::GetTypeName() const {
  return "cockroach.roachpb.ReplicaTooOldError";
}


// ===================================================================

void StoreNotFoundError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreNotFoundError::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreNotFoundError::StoreNotFoundError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_StoreNotFoundError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreNotFoundError)
}
StoreNotFoundError::StoreNotFoundError(const StoreNotFoundError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_id_ = from.store_id_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreNotFoundError)
}

void StoreNotFoundError::SharedCtor() {
  store_id_ = GOOGLE_LONGLONG(0);
}

StoreNotFoundError::~StoreNotFoundError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreNotFoundError)
  SharedDtor();
}

void StoreNotFoundError::SharedDtor() {
}

void StoreNotFoundError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreNotFoundError& StoreNotFoundError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_StoreNotFoundError.base);
  return *internal_default_instance();
}


void StoreNotFoundError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreNotFoundError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StoreNotFoundError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreNotFoundError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreNotFoundError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreNotFoundError)
  return false;
#undef DO_
}

void StoreNotFoundError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreNotFoundError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->store_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreNotFoundError)
}

size_t StoreNotFoundError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreNotFoundError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_store_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreNotFoundError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreNotFoundError*>(&from));
}

void StoreNotFoundError::MergeFrom(const StoreNotFoundError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreNotFoundError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_store_id()) {
    set_store_id(from.store_id());
  }
}

void StoreNotFoundError::CopyFrom(const StoreNotFoundError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreNotFoundError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreNotFoundError::IsInitialized() const {
  return true;
}

void StoreNotFoundError::Swap(StoreNotFoundError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreNotFoundError::InternalSwap(StoreNotFoundError* other) {
  using std::swap;
  swap(store_id_, other->store_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StoreNotFoundError::GetTypeName() const {
  return "cockroach.roachpb.StoreNotFoundError";
}


// ===================================================================

void UnhandledRetryableError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_UnhandledRetryableError_default_instance_._instance.get_mutable()->perr_ = const_cast< ::cockroach::roachpb::Error*>(
      ::cockroach::roachpb::Error::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnhandledRetryableError::kPErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnhandledRetryableError::UnhandledRetryableError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_UnhandledRetryableError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.UnhandledRetryableError)
}
UnhandledRetryableError::UnhandledRetryableError(const UnhandledRetryableError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_perr()) {
    perr_ = new ::cockroach::roachpb::Error(*from.perr_);
  } else {
    perr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.UnhandledRetryableError)
}

void UnhandledRetryableError::SharedCtor() {
  perr_ = NULL;
}

UnhandledRetryableError::~UnhandledRetryableError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.UnhandledRetryableError)
  SharedDtor();
}

void UnhandledRetryableError::SharedDtor() {
  if (this != internal_default_instance()) delete perr_;
}

void UnhandledRetryableError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnhandledRetryableError& UnhandledRetryableError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_UnhandledRetryableError.base);
  return *internal_default_instance();
}


void UnhandledRetryableError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.UnhandledRetryableError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(perr_ != NULL);
    perr_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnhandledRetryableError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.UnhandledRetryableError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_perr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.UnhandledRetryableError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.UnhandledRetryableError)
  return false;
#undef DO_
}

void UnhandledRetryableError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.UnhandledRetryableError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_perr(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.UnhandledRetryableError)
}

size_t UnhandledRetryableError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.UnhandledRetryableError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_perr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *perr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnhandledRetryableError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnhandledRetryableError*>(&from));
}

void UnhandledRetryableError::MergeFrom(const UnhandledRetryableError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.UnhandledRetryableError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_perr()) {
    mutable_perr()->::cockroach::roachpb::Error::MergeFrom(from.perr());
  }
}

void UnhandledRetryableError::CopyFrom(const UnhandledRetryableError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.UnhandledRetryableError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnhandledRetryableError::IsInitialized() const {
  return true;
}

void UnhandledRetryableError::Swap(UnhandledRetryableError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnhandledRetryableError::InternalSwap(UnhandledRetryableError* other) {
  using std::swap;
  swap(perr_, other->perr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string UnhandledRetryableError::GetTypeName() const {
  return "cockroach.roachpb.UnhandledRetryableError";
}


// ===================================================================

void TransactionRetryWithProtoRefreshError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_TransactionRetryWithProtoRefreshError_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}
void TransactionRetryWithProtoRefreshError::clear_transaction() {
  if (transaction_ != NULL) transaction_->Clear();
  clear_has_transaction();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRetryWithProtoRefreshError::kMsgFieldNumber;
const int TransactionRetryWithProtoRefreshError::kTxnIdFieldNumber;
const int TransactionRetryWithProtoRefreshError::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRetryWithProtoRefreshError::TransactionRetryWithProtoRefreshError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionRetryWithProtoRefreshError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
}
TransactionRetryWithProtoRefreshError::TransactionRetryWithProtoRefreshError(const TransactionRetryWithProtoRefreshError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txn_id()) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.has_transaction()) {
    transaction_ = new ::cockroach::roachpb::Transaction(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
}

void TransactionRetryWithProtoRefreshError::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_ = NULL;
}

TransactionRetryWithProtoRefreshError::~TransactionRetryWithProtoRefreshError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  SharedDtor();
}

void TransactionRetryWithProtoRefreshError::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
}

void TransactionRetryWithProtoRefreshError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionRetryWithProtoRefreshError& TransactionRetryWithProtoRefreshError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_TransactionRetryWithProtoRefreshError.base);
  return *internal_default_instance();
}


void TransactionRetryWithProtoRefreshError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      txn_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transaction_ != NULL);
      transaction_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionRetryWithProtoRefreshError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txn_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  return false;
#undef DO_
}

void TransactionRetryWithProtoRefreshError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->txn_id(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_transaction(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
}

size_t TransactionRetryWithProtoRefreshError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    if (has_txn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txn_id());
    }

    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionRetryWithProtoRefreshError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionRetryWithProtoRefreshError*>(&from));
}

void TransactionRetryWithProtoRefreshError::MergeFrom(const TransactionRetryWithProtoRefreshError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_txn_id();
      txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_transaction()->::cockroach::roachpb::Transaction::MergeFrom(from.transaction());
    }
  }
}

void TransactionRetryWithProtoRefreshError::CopyFrom(const TransactionRetryWithProtoRefreshError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TransactionRetryWithProtoRefreshError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRetryWithProtoRefreshError::IsInitialized() const {
  return true;
}

void TransactionRetryWithProtoRefreshError::Swap(TransactionRetryWithProtoRefreshError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRetryWithProtoRefreshError::InternalSwap(TransactionRetryWithProtoRefreshError* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txn_id_.Swap(&other->txn_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_, other->transaction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TransactionRetryWithProtoRefreshError::GetTypeName() const {
  return "cockroach.roachpb.TransactionRetryWithProtoRefreshError";
}


// ===================================================================

void TxnAlreadyEncounteredErrorError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnAlreadyEncounteredErrorError::kPrevErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnAlreadyEncounteredErrorError::TxnAlreadyEncounteredErrorError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_TxnAlreadyEncounteredErrorError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
}
TxnAlreadyEncounteredErrorError::TxnAlreadyEncounteredErrorError(const TxnAlreadyEncounteredErrorError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prev_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prev_error()) {
    prev_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_error_);
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
}

void TxnAlreadyEncounteredErrorError::SharedCtor() {
  prev_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TxnAlreadyEncounteredErrorError::~TxnAlreadyEncounteredErrorError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  SharedDtor();
}

void TxnAlreadyEncounteredErrorError::SharedDtor() {
  prev_error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxnAlreadyEncounteredErrorError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxnAlreadyEncounteredErrorError& TxnAlreadyEncounteredErrorError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_TxnAlreadyEncounteredErrorError.base);
  return *internal_default_instance();
}


void TxnAlreadyEncounteredErrorError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    prev_error_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxnAlreadyEncounteredErrorError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  return false;
#undef DO_
}

void TxnAlreadyEncounteredErrorError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prev_error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
}

size_t TxnAlreadyEncounteredErrorError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_prev_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxnAlreadyEncounteredErrorError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnAlreadyEncounteredErrorError*>(&from));
}

void TxnAlreadyEncounteredErrorError::MergeFrom(const TxnAlreadyEncounteredErrorError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prev_error()) {
    set_has_prev_error();
    prev_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_error_);
  }
}

void TxnAlreadyEncounteredErrorError::CopyFrom(const TxnAlreadyEncounteredErrorError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.TxnAlreadyEncounteredErrorError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnAlreadyEncounteredErrorError::IsInitialized() const {
  return true;
}

void TxnAlreadyEncounteredErrorError::Swap(TxnAlreadyEncounteredErrorError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnAlreadyEncounteredErrorError::InternalSwap(TxnAlreadyEncounteredErrorError* other) {
  using std::swap;
  prev_error_.Swap(&other->prev_error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TxnAlreadyEncounteredErrorError::GetTypeName() const {
  return "cockroach.roachpb.TxnAlreadyEncounteredErrorError";
}


// ===================================================================

void IntegerOverflowError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegerOverflowError::kKeyFieldNumber;
const int IntegerOverflowError::kCurrentValueFieldNumber;
const int IntegerOverflowError::kIncrementValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegerOverflowError::IntegerOverflowError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_IntegerOverflowError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.IntegerOverflowError)
}
IntegerOverflowError::IntegerOverflowError(const IntegerOverflowError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&current_value_, &from.current_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&increment_value_) -
    reinterpret_cast<char*>(&current_value_)) + sizeof(increment_value_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.IntegerOverflowError)
}

void IntegerOverflowError::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&increment_value_) -
      reinterpret_cast<char*>(&current_value_)) + sizeof(increment_value_));
}

IntegerOverflowError::~IntegerOverflowError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.IntegerOverflowError)
  SharedDtor();
}

void IntegerOverflowError::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IntegerOverflowError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegerOverflowError& IntegerOverflowError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_IntegerOverflowError.base);
  return *internal_default_instance();
}


void IntegerOverflowError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.IntegerOverflowError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&current_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&increment_value_) -
        reinterpret_cast<char*>(&current_value_)) + sizeof(increment_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntegerOverflowError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.IntegerOverflowError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_current_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_increment_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &increment_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.IntegerOverflowError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.IntegerOverflowError)
  return false;
#undef DO_
}

void IntegerOverflowError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.IntegerOverflowError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->current_value(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->increment_value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.IntegerOverflowError)
}

size_t IntegerOverflowError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.IntegerOverflowError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    if (has_current_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->current_value());
    }

    if (has_increment_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->increment_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerOverflowError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IntegerOverflowError*>(&from));
}

void IntegerOverflowError::MergeFrom(const IntegerOverflowError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.IntegerOverflowError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      current_value_ = from.current_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      increment_value_ = from.increment_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntegerOverflowError::CopyFrom(const IntegerOverflowError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.IntegerOverflowError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerOverflowError::IsInitialized() const {
  return true;
}

void IntegerOverflowError::Swap(IntegerOverflowError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegerOverflowError::InternalSwap(IntegerOverflowError* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(current_value_, other->current_value_);
  swap(increment_value_, other->increment_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IntegerOverflowError::GetTypeName() const {
  return "cockroach.roachpb.IntegerOverflowError";
}


// ===================================================================

void BatchTimestampBeforeGCError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_BatchTimestampBeforeGCError_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
  ::cockroach::roachpb::_BatchTimestampBeforeGCError_default_instance_._instance.get_mutable()->threshold_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void BatchTimestampBeforeGCError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->Clear();
  clear_has_timestamp();
}
void BatchTimestampBeforeGCError::clear_threshold() {
  if (threshold_ != NULL) threshold_->Clear();
  clear_has_threshold();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchTimestampBeforeGCError::kTimestampFieldNumber;
const int BatchTimestampBeforeGCError::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchTimestampBeforeGCError::BatchTimestampBeforeGCError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_BatchTimestampBeforeGCError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.BatchTimestampBeforeGCError)
}
BatchTimestampBeforeGCError::BatchTimestampBeforeGCError(const BatchTimestampBeforeGCError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_threshold()) {
    threshold_ = new ::cockroach::util::hlc::Timestamp(*from.threshold_);
  } else {
    threshold_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.BatchTimestampBeforeGCError)
}

void BatchTimestampBeforeGCError::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(threshold_));
}

BatchTimestampBeforeGCError::~BatchTimestampBeforeGCError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.BatchTimestampBeforeGCError)
  SharedDtor();
}

void BatchTimestampBeforeGCError::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete threshold_;
}

void BatchTimestampBeforeGCError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchTimestampBeforeGCError& BatchTimestampBeforeGCError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_BatchTimestampBeforeGCError.base);
  return *internal_default_instance();
}


void BatchTimestampBeforeGCError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.BatchTimestampBeforeGCError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timestamp_ != NULL);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(threshold_ != NULL);
      threshold_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchTimestampBeforeGCError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.BatchTimestampBeforeGCError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.BatchTimestampBeforeGCError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.BatchTimestampBeforeGCError)
  return false;
#undef DO_
}

void BatchTimestampBeforeGCError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.BatchTimestampBeforeGCError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_timestamp(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_threshold(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.BatchTimestampBeforeGCError)
}

size_t BatchTimestampBeforeGCError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.BatchTimestampBeforeGCError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *threshold_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchTimestampBeforeGCError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BatchTimestampBeforeGCError*>(&from));
}

void BatchTimestampBeforeGCError::MergeFrom(const BatchTimestampBeforeGCError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.BatchTimestampBeforeGCError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_threshold()->::cockroach::util::hlc::Timestamp::MergeFrom(from.threshold());
    }
  }
}

void BatchTimestampBeforeGCError::CopyFrom(const BatchTimestampBeforeGCError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.BatchTimestampBeforeGCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTimestampBeforeGCError::IsInitialized() const {
  return true;
}

void BatchTimestampBeforeGCError::Swap(BatchTimestampBeforeGCError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchTimestampBeforeGCError::InternalSwap(BatchTimestampBeforeGCError* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(threshold_, other->threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BatchTimestampBeforeGCError::GetTypeName() const {
  return "cockroach.roachpb.BatchTimestampBeforeGCError";
}


// ===================================================================

void IntentMissingError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_IntentMissingError_default_instance_._instance.get_mutable()->wrong_intent_ = const_cast< ::cockroach::roachpb::Intent*>(
      ::cockroach::roachpb::Intent::internal_default_instance());
}
void IntentMissingError::clear_wrong_intent() {
  if (wrong_intent_ != NULL) wrong_intent_->Clear();
  clear_has_wrong_intent();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntentMissingError::kWrongIntentFieldNumber;
const int IntentMissingError::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntentMissingError::IntentMissingError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_IntentMissingError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.IntentMissingError)
}
IntentMissingError::IntentMissingError(const IntentMissingError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_wrong_intent()) {
    wrong_intent_ = new ::cockroach::roachpb::Intent(*from.wrong_intent_);
  } else {
    wrong_intent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.IntentMissingError)
}

void IntentMissingError::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wrong_intent_ = NULL;
}

IntentMissingError::~IntentMissingError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.IntentMissingError)
  SharedDtor();
}

void IntentMissingError::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wrong_intent_;
}

void IntentMissingError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntentMissingError& IntentMissingError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_IntentMissingError.base);
  return *internal_default_instance();
}


void IntentMissingError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.IntentMissingError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wrong_intent_ != NULL);
      wrong_intent_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntentMissingError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.IntentMissingError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Intent wrong_intent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wrong_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.IntentMissingError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.IntentMissingError)
  return false;
#undef DO_
}

void IntentMissingError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.IntentMissingError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cockroach.roachpb.Intent wrong_intent = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_wrong_intent(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.IntentMissingError)
}

size_t IntentMissingError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.IntentMissingError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .cockroach.roachpb.Intent wrong_intent = 1;
    if (has_wrong_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wrong_intent_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntentMissingError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IntentMissingError*>(&from));
}

void IntentMissingError::MergeFrom(const IntentMissingError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.IntentMissingError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wrong_intent()->::cockroach::roachpb::Intent::MergeFrom(from.wrong_intent());
    }
  }
}

void IntentMissingError::CopyFrom(const IntentMissingError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.IntentMissingError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntentMissingError::IsInitialized() const {
  return true;
}

void IntentMissingError::Swap(IntentMissingError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntentMissingError::InternalSwap(IntentMissingError* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(wrong_intent_, other->wrong_intent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IntentMissingError::GetTypeName() const {
  return "cockroach.roachpb.IntentMissingError";
}


// ===================================================================

void MergeInProgressError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeInProgressError::MergeInProgressError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_MergeInProgressError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.MergeInProgressError)
}
MergeInProgressError::MergeInProgressError(const MergeInProgressError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.MergeInProgressError)
}

void MergeInProgressError::SharedCtor() {
}

MergeInProgressError::~MergeInProgressError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.MergeInProgressError)
  SharedDtor();
}

void MergeInProgressError::SharedDtor() {
}

void MergeInProgressError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeInProgressError& MergeInProgressError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_MergeInProgressError.base);
  return *internal_default_instance();
}


void MergeInProgressError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.MergeInProgressError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MergeInProgressError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.MergeInProgressError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.MergeInProgressError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.MergeInProgressError)
  return false;
#undef DO_
}

void MergeInProgressError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.MergeInProgressError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.MergeInProgressError)
}

size_t MergeInProgressError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.MergeInProgressError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeInProgressError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeInProgressError*>(&from));
}

void MergeInProgressError::MergeFrom(const MergeInProgressError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.MergeInProgressError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MergeInProgressError::CopyFrom(const MergeInProgressError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.MergeInProgressError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeInProgressError::IsInitialized() const {
  return true;
}

void MergeInProgressError::Swap(MergeInProgressError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeInProgressError::InternalSwap(MergeInProgressError* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MergeInProgressError::GetTypeName() const {
  return "cockroach.roachpb.MergeInProgressError";
}


// ===================================================================

void RangeFeedRetryError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeFeedRetryError::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeFeedRetryError::RangeFeedRetryError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_RangeFeedRetryError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeFeedRetryError)
}
RangeFeedRetryError::RangeFeedRetryError(const RangeFeedRetryError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeFeedRetryError)
}

void RangeFeedRetryError::SharedCtor() {
  reason_ = 0;
}

RangeFeedRetryError::~RangeFeedRetryError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeFeedRetryError)
  SharedDtor();
}

void RangeFeedRetryError::SharedDtor() {
}

void RangeFeedRetryError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeFeedRetryError& RangeFeedRetryError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_RangeFeedRetryError.base);
  return *internal_default_instance();
}


void RangeFeedRetryError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeFeedRetryError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RangeFeedRetryError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeFeedRetryError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::RangeFeedRetryError_Reason_IsValid(value)) {
            set_reason(static_cast< ::cockroach::roachpb::RangeFeedRetryError_Reason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeFeedRetryError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeFeedRetryError)
  return false;
#undef DO_
}

void RangeFeedRetryError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeFeedRetryError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeFeedRetryError)
}

size_t RangeFeedRetryError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeFeedRetryError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeFeedRetryError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeFeedRetryError*>(&from));
}

void RangeFeedRetryError::MergeFrom(const RangeFeedRetryError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeFeedRetryError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    set_reason(from.reason());
  }
}

void RangeFeedRetryError::CopyFrom(const RangeFeedRetryError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeFeedRetryError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFeedRetryError::IsInitialized() const {
  return true;
}

void RangeFeedRetryError::Swap(RangeFeedRetryError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeFeedRetryError::InternalSwap(RangeFeedRetryError* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeFeedRetryError::GetTypeName() const {
  return "cockroach.roachpb.RangeFeedRetryError";
}


// ===================================================================

void IndeterminateCommitError::InitAsDefaultInstance() {
  ::cockroach::roachpb::_IndeterminateCommitError_default_instance_._instance.get_mutable()->staging_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
}
void IndeterminateCommitError::clear_staging_txn() {
  if (staging_txn_ != NULL) staging_txn_->Clear();
  clear_has_staging_txn();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndeterminateCommitError::kStagingTxnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndeterminateCommitError::IndeterminateCommitError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_IndeterminateCommitError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.IndeterminateCommitError)
}
IndeterminateCommitError::IndeterminateCommitError(const IndeterminateCommitError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_staging_txn()) {
    staging_txn_ = new ::cockroach::roachpb::Transaction(*from.staging_txn_);
  } else {
    staging_txn_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.IndeterminateCommitError)
}

void IndeterminateCommitError::SharedCtor() {
  staging_txn_ = NULL;
}

IndeterminateCommitError::~IndeterminateCommitError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.IndeterminateCommitError)
  SharedDtor();
}

void IndeterminateCommitError::SharedDtor() {
  if (this != internal_default_instance()) delete staging_txn_;
}

void IndeterminateCommitError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndeterminateCommitError& IndeterminateCommitError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_IndeterminateCommitError.base);
  return *internal_default_instance();
}


void IndeterminateCommitError::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.IndeterminateCommitError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(staging_txn_ != NULL);
    staging_txn_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndeterminateCommitError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.IndeterminateCommitError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_staging_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.IndeterminateCommitError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.IndeterminateCommitError)
  return false;
#undef DO_
}

void IndeterminateCommitError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.IndeterminateCommitError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_staging_txn(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.IndeterminateCommitError)
}

size_t IndeterminateCommitError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.IndeterminateCommitError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_staging_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *staging_txn_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndeterminateCommitError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IndeterminateCommitError*>(&from));
}

void IndeterminateCommitError::MergeFrom(const IndeterminateCommitError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.IndeterminateCommitError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_staging_txn()) {
    mutable_staging_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.staging_txn());
  }
}

void IndeterminateCommitError::CopyFrom(const IndeterminateCommitError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.IndeterminateCommitError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndeterminateCommitError::IsInitialized() const {
  return true;
}

void IndeterminateCommitError::Swap(IndeterminateCommitError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndeterminateCommitError::InternalSwap(IndeterminateCommitError* other) {
  using std::swap;
  swap(staging_txn_, other->staging_txn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IndeterminateCommitError::GetTypeName() const {
  return "cockroach.roachpb.IndeterminateCommitError";
}


// ===================================================================

void ErrorDetail::InitAsDefaultInstance() {
}
void ErrorDetail::set_allocated_not_lease_holder(::cockroach::roachpb::NotLeaseHolderError* not_lease_holder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (not_lease_holder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      not_lease_holder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, not_lease_holder, submessage_arena);
    }
    set_has_not_lease_holder();
    value_.not_lease_holder_ = not_lease_holder;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.not_lease_holder)
}
void ErrorDetail::set_allocated_range_not_found(::cockroach::roachpb::RangeNotFoundError* range_not_found) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (range_not_found) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range_not_found = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range_not_found, submessage_arena);
    }
    set_has_range_not_found();
    value_.range_not_found_ = range_not_found;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.range_not_found)
}
void ErrorDetail::set_allocated_range_key_mismatch(::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (range_key_mismatch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range_key_mismatch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range_key_mismatch, submessage_arena);
    }
    set_has_range_key_mismatch();
    value_.range_key_mismatch_ = range_key_mismatch;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.range_key_mismatch)
}
void ErrorDetail::set_allocated_read_within_uncertainty_interval(::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (read_within_uncertainty_interval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      read_within_uncertainty_interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_within_uncertainty_interval, submessage_arena);
    }
    set_has_read_within_uncertainty_interval();
    value_.read_within_uncertainty_interval_ = read_within_uncertainty_interval;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
}
void ErrorDetail::set_allocated_transaction_aborted(::cockroach::roachpb::TransactionAbortedError* transaction_aborted) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (transaction_aborted) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transaction_aborted = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction_aborted, submessage_arena);
    }
    set_has_transaction_aborted();
    value_.transaction_aborted_ = transaction_aborted;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_aborted)
}
void ErrorDetail::set_allocated_transaction_push(::cockroach::roachpb::TransactionPushError* transaction_push) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (transaction_push) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transaction_push = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction_push, submessage_arena);
    }
    set_has_transaction_push();
    value_.transaction_push_ = transaction_push;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_push)
}
void ErrorDetail::set_allocated_transaction_retry(::cockroach::roachpb::TransactionRetryError* transaction_retry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (transaction_retry) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transaction_retry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction_retry, submessage_arena);
    }
    set_has_transaction_retry();
    value_.transaction_retry_ = transaction_retry;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_retry)
}
void ErrorDetail::set_allocated_transaction_status(::cockroach::roachpb::TransactionStatusError* transaction_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (transaction_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transaction_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction_status, submessage_arena);
    }
    set_has_transaction_status();
    value_.transaction_status_ = transaction_status;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_status)
}
void ErrorDetail::set_allocated_write_intent(::cockroach::roachpb::WriteIntentError* write_intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (write_intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_intent, submessage_arena);
    }
    set_has_write_intent();
    value_.write_intent_ = write_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.write_intent)
}
void ErrorDetail::set_allocated_write_too_old(::cockroach::roachpb::WriteTooOldError* write_too_old) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (write_too_old) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_too_old = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_too_old, submessage_arena);
    }
    set_has_write_too_old();
    value_.write_too_old_ = write_too_old;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.write_too_old)
}
void ErrorDetail::set_allocated_op_requires_txn(::cockroach::roachpb::OpRequiresTxnError* op_requires_txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (op_requires_txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      op_requires_txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, op_requires_txn, submessage_arena);
    }
    set_has_op_requires_txn();
    value_.op_requires_txn_ = op_requires_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.op_requires_txn)
}
void ErrorDetail::set_allocated_condition_failed(::cockroach::roachpb::ConditionFailedError* condition_failed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (condition_failed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      condition_failed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition_failed, submessage_arena);
    }
    set_has_condition_failed();
    value_.condition_failed_ = condition_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.condition_failed)
}
void ErrorDetail::set_allocated_lease_rejected(::cockroach::roachpb::LeaseRejectedError* lease_rejected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (lease_rejected) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lease_rejected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease_rejected, submessage_arena);
    }
    set_has_lease_rejected();
    value_.lease_rejected_ = lease_rejected;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.lease_rejected)
}
void ErrorDetail::set_allocated_node_unavailable(::cockroach::roachpb::NodeUnavailableError* node_unavailable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (node_unavailable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node_unavailable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node_unavailable, submessage_arena);
    }
    set_has_node_unavailable();
    value_.node_unavailable_ = node_unavailable;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.node_unavailable)
}
void ErrorDetail::set_allocated_raft_group_deleted(::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (raft_group_deleted) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      raft_group_deleted = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raft_group_deleted, submessage_arena);
    }
    set_has_raft_group_deleted();
    value_.raft_group_deleted_ = raft_group_deleted;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.raft_group_deleted)
}
void ErrorDetail::set_allocated_replica_corruption(::cockroach::roachpb::ReplicaCorruptionError* replica_corruption) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (replica_corruption) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replica_corruption = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replica_corruption, submessage_arena);
    }
    set_has_replica_corruption();
    value_.replica_corruption_ = replica_corruption;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.replica_corruption)
}
void ErrorDetail::set_allocated_replica_too_old(::cockroach::roachpb::ReplicaTooOldError* replica_too_old) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (replica_too_old) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replica_too_old = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replica_too_old, submessage_arena);
    }
    set_has_replica_too_old();
    value_.replica_too_old_ = replica_too_old;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.replica_too_old)
}
void ErrorDetail::set_allocated_ambiguous_result(::cockroach::roachpb::AmbiguousResultError* ambiguous_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (ambiguous_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ambiguous_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ambiguous_result, submessage_arena);
    }
    set_has_ambiguous_result();
    value_.ambiguous_result_ = ambiguous_result;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.ambiguous_result)
}
void ErrorDetail::set_allocated_store_not_found(::cockroach::roachpb::StoreNotFoundError* store_not_found) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (store_not_found) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      store_not_found = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, store_not_found, submessage_arena);
    }
    set_has_store_not_found();
    value_.store_not_found_ = store_not_found;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.store_not_found)
}
void ErrorDetail::set_allocated_transaction_retry_with_proto_refresh(::cockroach::roachpb::TransactionRetryWithProtoRefreshError* transaction_retry_with_proto_refresh) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (transaction_retry_with_proto_refresh) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transaction_retry_with_proto_refresh = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction_retry_with_proto_refresh, submessage_arena);
    }
    set_has_transaction_retry_with_proto_refresh();
    value_.transaction_retry_with_proto_refresh_ = transaction_retry_with_proto_refresh;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_retry_with_proto_refresh)
}
void ErrorDetail::set_allocated_integer_overflow(::cockroach::roachpb::IntegerOverflowError* integer_overflow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (integer_overflow) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      integer_overflow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, integer_overflow, submessage_arena);
    }
    set_has_integer_overflow();
    value_.integer_overflow_ = integer_overflow;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.integer_overflow)
}
void ErrorDetail::set_allocated_unsupported_request(::cockroach::roachpb::UnsupportedRequestError* unsupported_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (unsupported_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unsupported_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unsupported_request, submessage_arena);
    }
    set_has_unsupported_request();
    value_.unsupported_request_ = unsupported_request;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.unsupported_request)
}
void ErrorDetail::set_allocated_timestamp_before(::cockroach::roachpb::BatchTimestampBeforeGCError* timestamp_before) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (timestamp_before) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp_before = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp_before, submessage_arena);
    }
    set_has_timestamp_before();
    value_.timestamp_before_ = timestamp_before;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.timestamp_before)
}
void ErrorDetail::set_allocated_txn_already_encountered_error(::cockroach::roachpb::TxnAlreadyEncounteredErrorError* txn_already_encountered_error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (txn_already_encountered_error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn_already_encountered_error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn_already_encountered_error, submessage_arena);
    }
    set_has_txn_already_encountered_error();
    value_.txn_already_encountered_error_ = txn_already_encountered_error;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.txn_already_encountered_error)
}
void ErrorDetail::set_allocated_intent_missing(::cockroach::roachpb::IntentMissingError* intent_missing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (intent_missing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intent_missing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent_missing, submessage_arena);
    }
    set_has_intent_missing();
    value_.intent_missing_ = intent_missing;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.intent_missing)
}
void ErrorDetail::set_allocated_merge_in_progress(::cockroach::roachpb::MergeInProgressError* merge_in_progress) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (merge_in_progress) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      merge_in_progress = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, merge_in_progress, submessage_arena);
    }
    set_has_merge_in_progress();
    value_.merge_in_progress_ = merge_in_progress;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.merge_in_progress)
}
void ErrorDetail::set_allocated_rangefeed_retry(::cockroach::roachpb::RangeFeedRetryError* rangefeed_retry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (rangefeed_retry) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rangefeed_retry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rangefeed_retry, submessage_arena);
    }
    set_has_rangefeed_retry();
    value_.rangefeed_retry_ = rangefeed_retry;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.rangefeed_retry)
}
void ErrorDetail::set_allocated_indeterminate_commit(::cockroach::roachpb::IndeterminateCommitError* indeterminate_commit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (indeterminate_commit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      indeterminate_commit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indeterminate_commit, submessage_arena);
    }
    set_has_indeterminate_commit();
    value_.indeterminate_commit_ = indeterminate_commit;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.indeterminate_commit)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorDetail::kNotLeaseHolderFieldNumber;
const int ErrorDetail::kRangeNotFoundFieldNumber;
const int ErrorDetail::kRangeKeyMismatchFieldNumber;
const int ErrorDetail::kReadWithinUncertaintyIntervalFieldNumber;
const int ErrorDetail::kTransactionAbortedFieldNumber;
const int ErrorDetail::kTransactionPushFieldNumber;
const int ErrorDetail::kTransactionRetryFieldNumber;
const int ErrorDetail::kTransactionStatusFieldNumber;
const int ErrorDetail::kWriteIntentFieldNumber;
const int ErrorDetail::kWriteTooOldFieldNumber;
const int ErrorDetail::kOpRequiresTxnFieldNumber;
const int ErrorDetail::kConditionFailedFieldNumber;
const int ErrorDetail::kLeaseRejectedFieldNumber;
const int ErrorDetail::kNodeUnavailableFieldNumber;
const int ErrorDetail::kRaftGroupDeletedFieldNumber;
const int ErrorDetail::kReplicaCorruptionFieldNumber;
const int ErrorDetail::kReplicaTooOldFieldNumber;
const int ErrorDetail::kAmbiguousResultFieldNumber;
const int ErrorDetail::kStoreNotFoundFieldNumber;
const int ErrorDetail::kTransactionRetryWithProtoRefreshFieldNumber;
const int ErrorDetail::kIntegerOverflowFieldNumber;
const int ErrorDetail::kUnsupportedRequestFieldNumber;
const int ErrorDetail::kTimestampBeforeFieldNumber;
const int ErrorDetail::kTxnAlreadyEncounteredErrorFieldNumber;
const int ErrorDetail::kIntentMissingFieldNumber;
const int ErrorDetail::kMergeInProgressFieldNumber;
const int ErrorDetail::kRangefeedRetryFieldNumber;
const int ErrorDetail::kIndeterminateCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorDetail::ErrorDetail()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ErrorDetail)
}
ErrorDetail::ErrorDetail(const ErrorDetail& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kNotLeaseHolder: {
      mutable_not_lease_holder()->::cockroach::roachpb::NotLeaseHolderError::MergeFrom(from.not_lease_holder());
      break;
    }
    case kRangeNotFound: {
      mutable_range_not_found()->::cockroach::roachpb::RangeNotFoundError::MergeFrom(from.range_not_found());
      break;
    }
    case kRangeKeyMismatch: {
      mutable_range_key_mismatch()->::cockroach::roachpb::RangeKeyMismatchError::MergeFrom(from.range_key_mismatch());
      break;
    }
    case kReadWithinUncertaintyInterval: {
      mutable_read_within_uncertainty_interval()->::cockroach::roachpb::ReadWithinUncertaintyIntervalError::MergeFrom(from.read_within_uncertainty_interval());
      break;
    }
    case kTransactionAborted: {
      mutable_transaction_aborted()->::cockroach::roachpb::TransactionAbortedError::MergeFrom(from.transaction_aborted());
      break;
    }
    case kTransactionPush: {
      mutable_transaction_push()->::cockroach::roachpb::TransactionPushError::MergeFrom(from.transaction_push());
      break;
    }
    case kTransactionRetry: {
      mutable_transaction_retry()->::cockroach::roachpb::TransactionRetryError::MergeFrom(from.transaction_retry());
      break;
    }
    case kTransactionStatus: {
      mutable_transaction_status()->::cockroach::roachpb::TransactionStatusError::MergeFrom(from.transaction_status());
      break;
    }
    case kWriteIntent: {
      mutable_write_intent()->::cockroach::roachpb::WriteIntentError::MergeFrom(from.write_intent());
      break;
    }
    case kWriteTooOld: {
      mutable_write_too_old()->::cockroach::roachpb::WriteTooOldError::MergeFrom(from.write_too_old());
      break;
    }
    case kOpRequiresTxn: {
      mutable_op_requires_txn()->::cockroach::roachpb::OpRequiresTxnError::MergeFrom(from.op_requires_txn());
      break;
    }
    case kConditionFailed: {
      mutable_condition_failed()->::cockroach::roachpb::ConditionFailedError::MergeFrom(from.condition_failed());
      break;
    }
    case kLeaseRejected: {
      mutable_lease_rejected()->::cockroach::roachpb::LeaseRejectedError::MergeFrom(from.lease_rejected());
      break;
    }
    case kNodeUnavailable: {
      mutable_node_unavailable()->::cockroach::roachpb::NodeUnavailableError::MergeFrom(from.node_unavailable());
      break;
    }
    case kRaftGroupDeleted: {
      mutable_raft_group_deleted()->::cockroach::roachpb::RaftGroupDeletedError::MergeFrom(from.raft_group_deleted());
      break;
    }
    case kReplicaCorruption: {
      mutable_replica_corruption()->::cockroach::roachpb::ReplicaCorruptionError::MergeFrom(from.replica_corruption());
      break;
    }
    case kReplicaTooOld: {
      mutable_replica_too_old()->::cockroach::roachpb::ReplicaTooOldError::MergeFrom(from.replica_too_old());
      break;
    }
    case kAmbiguousResult: {
      mutable_ambiguous_result()->::cockroach::roachpb::AmbiguousResultError::MergeFrom(from.ambiguous_result());
      break;
    }
    case kStoreNotFound: {
      mutable_store_not_found()->::cockroach::roachpb::StoreNotFoundError::MergeFrom(from.store_not_found());
      break;
    }
    case kTransactionRetryWithProtoRefresh: {
      mutable_transaction_retry_with_proto_refresh()->::cockroach::roachpb::TransactionRetryWithProtoRefreshError::MergeFrom(from.transaction_retry_with_proto_refresh());
      break;
    }
    case kIntegerOverflow: {
      mutable_integer_overflow()->::cockroach::roachpb::IntegerOverflowError::MergeFrom(from.integer_overflow());
      break;
    }
    case kUnsupportedRequest: {
      mutable_unsupported_request()->::cockroach::roachpb::UnsupportedRequestError::MergeFrom(from.unsupported_request());
      break;
    }
    case kTimestampBefore: {
      mutable_timestamp_before()->::cockroach::roachpb::BatchTimestampBeforeGCError::MergeFrom(from.timestamp_before());
      break;
    }
    case kTxnAlreadyEncounteredError: {
      mutable_txn_already_encountered_error()->::cockroach::roachpb::TxnAlreadyEncounteredErrorError::MergeFrom(from.txn_already_encountered_error());
      break;
    }
    case kIntentMissing: {
      mutable_intent_missing()->::cockroach::roachpb::IntentMissingError::MergeFrom(from.intent_missing());
      break;
    }
    case kMergeInProgress: {
      mutable_merge_in_progress()->::cockroach::roachpb::MergeInProgressError::MergeFrom(from.merge_in_progress());
      break;
    }
    case kRangefeedRetry: {
      mutable_rangefeed_retry()->::cockroach::roachpb::RangeFeedRetryError::MergeFrom(from.rangefeed_retry());
      break;
    }
    case kIndeterminateCommit: {
      mutable_indeterminate_commit()->::cockroach::roachpb::IndeterminateCommitError::MergeFrom(from.indeterminate_commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ErrorDetail)
}

void ErrorDetail::SharedCtor() {
  clear_has_value();
}

ErrorDetail::~ErrorDetail() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ErrorDetail)
  SharedDtor();
}

void ErrorDetail::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void ErrorDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorDetail& ErrorDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base);
  return *internal_default_instance();
}


void ErrorDetail::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cockroach.roachpb.ErrorDetail)
  switch (value_case()) {
    case kNotLeaseHolder: {
      delete value_.not_lease_holder_;
      break;
    }
    case kRangeNotFound: {
      delete value_.range_not_found_;
      break;
    }
    case kRangeKeyMismatch: {
      delete value_.range_key_mismatch_;
      break;
    }
    case kReadWithinUncertaintyInterval: {
      delete value_.read_within_uncertainty_interval_;
      break;
    }
    case kTransactionAborted: {
      delete value_.transaction_aborted_;
      break;
    }
    case kTransactionPush: {
      delete value_.transaction_push_;
      break;
    }
    case kTransactionRetry: {
      delete value_.transaction_retry_;
      break;
    }
    case kTransactionStatus: {
      delete value_.transaction_status_;
      break;
    }
    case kWriteIntent: {
      delete value_.write_intent_;
      break;
    }
    case kWriteTooOld: {
      delete value_.write_too_old_;
      break;
    }
    case kOpRequiresTxn: {
      delete value_.op_requires_txn_;
      break;
    }
    case kConditionFailed: {
      delete value_.condition_failed_;
      break;
    }
    case kLeaseRejected: {
      delete value_.lease_rejected_;
      break;
    }
    case kNodeUnavailable: {
      delete value_.node_unavailable_;
      break;
    }
    case kRaftGroupDeleted: {
      delete value_.raft_group_deleted_;
      break;
    }
    case kReplicaCorruption: {
      delete value_.replica_corruption_;
      break;
    }
    case kReplicaTooOld: {
      delete value_.replica_too_old_;
      break;
    }
    case kAmbiguousResult: {
      delete value_.ambiguous_result_;
      break;
    }
    case kStoreNotFound: {
      delete value_.store_not_found_;
      break;
    }
    case kTransactionRetryWithProtoRefresh: {
      delete value_.transaction_retry_with_proto_refresh_;
      break;
    }
    case kIntegerOverflow: {
      delete value_.integer_overflow_;
      break;
    }
    case kUnsupportedRequest: {
      delete value_.unsupported_request_;
      break;
    }
    case kTimestampBefore: {
      delete value_.timestamp_before_;
      break;
    }
    case kTxnAlreadyEncounteredError: {
      delete value_.txn_already_encountered_error_;
      break;
    }
    case kIntentMissing: {
      delete value_.intent_missing_;
      break;
    }
    case kMergeInProgress: {
      delete value_.merge_in_progress_;
      break;
    }
    case kRangefeedRetry: {
      delete value_.rangefeed_retry_;
      break;
    }
    case kIndeterminateCommit: {
      delete value_.indeterminate_commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ErrorDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ErrorDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ErrorDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ErrorDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.NotLeaseHolderError not_lease_holder = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_not_lease_holder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range_not_found()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range_key_mismatch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_within_uncertainty_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction_aborted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction_push()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction_retry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.WriteIntentError write_intent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_write_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_write_too_old()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_op_requires_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition_failed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease_rejected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_unavailable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raft_group_deleted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replica_corruption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.ReplicaTooOldError replica_too_old = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replica_too_old()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.AmbiguousResultError ambiguous_result = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambiguous_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.StoreNotFoundError store_not_found = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_store_not_found()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.TransactionRetryWithProtoRefreshError transaction_retry_with_proto_refresh = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction_retry_with_proto_refresh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.IntegerOverflowError integer_overflow = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_integer_overflow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.UnsupportedRequestError unsupported_request = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unsupported_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.BatchTimestampBeforeGCError timestamp_before = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp_before()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.TxnAlreadyEncounteredErrorError txn_already_encountered_error = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn_already_encountered_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.IntentMissingError intent_missing = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intent_missing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.MergeInProgressError merge_in_progress = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_merge_in_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.RangeFeedRetryError rangefeed_retry = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rangefeed_retry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.IndeterminateCommitError indeterminate_commit = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_indeterminate_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ErrorDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ErrorDetail)
  return false;
#undef DO_
}

void ErrorDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ErrorDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kNotLeaseHolder:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        1, this->_internal_not_lease_holder(), output);
      break;
    case kRangeNotFound:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        2, this->_internal_range_not_found(), output);
      break;
    case kRangeKeyMismatch:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        3, this->_internal_range_key_mismatch(), output);
      break;
    case kReadWithinUncertaintyInterval:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        4, this->_internal_read_within_uncertainty_interval(), output);
      break;
    case kTransactionAborted:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        5, this->_internal_transaction_aborted(), output);
      break;
    case kTransactionPush:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        6, this->_internal_transaction_push(), output);
      break;
    case kTransactionRetry:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        7, this->_internal_transaction_retry(), output);
      break;
    case kTransactionStatus:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        8, this->_internal_transaction_status(), output);
      break;
    case kWriteIntent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        9, this->_internal_write_intent(), output);
      break;
    case kWriteTooOld:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        10, this->_internal_write_too_old(), output);
      break;
    case kOpRequiresTxn:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        11, this->_internal_op_requires_txn(), output);
      break;
    case kConditionFailed:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        12, this->_internal_condition_failed(), output);
      break;
    case kLeaseRejected:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        13, this->_internal_lease_rejected(), output);
      break;
    case kNodeUnavailable:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        14, this->_internal_node_unavailable(), output);
      break;
    case kRaftGroupDeleted:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        16, this->_internal_raft_group_deleted(), output);
      break;
    case kReplicaCorruption:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        17, this->_internal_replica_corruption(), output);
      break;
    case kReplicaTooOld:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        18, this->_internal_replica_too_old(), output);
      break;
    case kAmbiguousResult:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        26, this->_internal_ambiguous_result(), output);
      break;
    case kStoreNotFound:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        27, this->_internal_store_not_found(), output);
      break;
    case kTransactionRetryWithProtoRefresh:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        28, this->_internal_transaction_retry_with_proto_refresh(), output);
      break;
    case kIntegerOverflow:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        31, this->_internal_integer_overflow(), output);
      break;
    case kUnsupportedRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        32, this->_internal_unsupported_request(), output);
      break;
    case kTimestampBefore:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        34, this->_internal_timestamp_before(), output);
      break;
    case kTxnAlreadyEncounteredError:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        35, this->_internal_txn_already_encountered_error(), output);
      break;
    case kIntentMissing:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        36, this->_internal_intent_missing(), output);
      break;
    case kMergeInProgress:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        37, this->_internal_merge_in_progress(), output);
      break;
    case kRangefeedRetry:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        38, this->_internal_rangefeed_retry(), output);
      break;
    case kIndeterminateCommit:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        39, this->_internal_indeterminate_commit(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ErrorDetail)
}

size_t ErrorDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ErrorDetail)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  switch (value_case()) {
    // optional .cockroach.roachpb.NotLeaseHolderError not_lease_holder = 1;
    case kNotLeaseHolder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.not_lease_holder_);
      break;
    }
    // optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
    case kRangeNotFound: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.range_not_found_);
      break;
    }
    // optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
    case kRangeKeyMismatch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.range_key_mismatch_);
      break;
    }
    // optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
    case kReadWithinUncertaintyInterval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.read_within_uncertainty_interval_);
      break;
    }
    // optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
    case kTransactionAborted: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.transaction_aborted_);
      break;
    }
    // optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
    case kTransactionPush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.transaction_push_);
      break;
    }
    // optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
    case kTransactionRetry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.transaction_retry_);
      break;
    }
    // optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
    case kTransactionStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.transaction_status_);
      break;
    }
    // optional .cockroach.roachpb.WriteIntentError write_intent = 9;
    case kWriteIntent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.write_intent_);
      break;
    }
    // optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
    case kWriteTooOld: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.write_too_old_);
      break;
    }
    // optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
    case kOpRequiresTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.op_requires_txn_);
      break;
    }
    // optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
    case kConditionFailed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.condition_failed_);
      break;
    }
    // optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
    case kLeaseRejected: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.lease_rejected_);
      break;
    }
    // optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
    case kNodeUnavailable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.node_unavailable_);
      break;
    }
    // optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
    case kRaftGroupDeleted: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.raft_group_deleted_);
      break;
    }
    // optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
    case kReplicaCorruption: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.replica_corruption_);
      break;
    }
    // optional .cockroach.roachpb.ReplicaTooOldError replica_too_old = 18;
    case kReplicaTooOld: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.replica_too_old_);
      break;
    }
    // optional .cockroach.roachpb.AmbiguousResultError ambiguous_result = 26;
    case kAmbiguousResult: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.ambiguous_result_);
      break;
    }
    // optional .cockroach.roachpb.StoreNotFoundError store_not_found = 27;
    case kStoreNotFound: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.store_not_found_);
      break;
    }
    // optional .cockroach.roachpb.TransactionRetryWithProtoRefreshError transaction_retry_with_proto_refresh = 28;
    case kTransactionRetryWithProtoRefresh: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.transaction_retry_with_proto_refresh_);
      break;
    }
    // optional .cockroach.roachpb.IntegerOverflowError integer_overflow = 31;
    case kIntegerOverflow: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.integer_overflow_);
      break;
    }
    // optional .cockroach.roachpb.UnsupportedRequestError unsupported_request = 32;
    case kUnsupportedRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.unsupported_request_);
      break;
    }
    // optional .cockroach.roachpb.BatchTimestampBeforeGCError timestamp_before = 34;
    case kTimestampBefore: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.timestamp_before_);
      break;
    }
    // optional .cockroach.roachpb.TxnAlreadyEncounteredErrorError txn_already_encountered_error = 35;
    case kTxnAlreadyEncounteredError: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.txn_already_encountered_error_);
      break;
    }
    // optional .cockroach.roachpb.IntentMissingError intent_missing = 36;
    case kIntentMissing: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.intent_missing_);
      break;
    }
    // optional .cockroach.roachpb.MergeInProgressError merge_in_progress = 37;
    case kMergeInProgress: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.merge_in_progress_);
      break;
    }
    // optional .cockroach.roachpb.RangeFeedRetryError rangefeed_retry = 38;
    case kRangefeedRetry: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.rangefeed_retry_);
      break;
    }
    // optional .cockroach.roachpb.IndeterminateCommitError indeterminate_commit = 39;
    case kIndeterminateCommit: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.indeterminate_commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ErrorDetail*>(&from));
}

void ErrorDetail::MergeFrom(const ErrorDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ErrorDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kNotLeaseHolder: {
      mutable_not_lease_holder()->::cockroach::roachpb::NotLeaseHolderError::MergeFrom(from.not_lease_holder());
      break;
    }
    case kRangeNotFound: {
      mutable_range_not_found()->::cockroach::roachpb::RangeNotFoundError::MergeFrom(from.range_not_found());
      break;
    }
    case kRangeKeyMismatch: {
      mutable_range_key_mismatch()->::cockroach::roachpb::RangeKeyMismatchError::MergeFrom(from.range_key_mismatch());
      break;
    }
    case kReadWithinUncertaintyInterval: {
      mutable_read_within_uncertainty_interval()->::cockroach::roachpb::ReadWithinUncertaintyIntervalError::MergeFrom(from.read_within_uncertainty_interval());
      break;
    }
    case kTransactionAborted: {
      mutable_transaction_aborted()->::cockroach::roachpb::TransactionAbortedError::MergeFrom(from.transaction_aborted());
      break;
    }
    case kTransactionPush: {
      mutable_transaction_push()->::cockroach::roachpb::TransactionPushError::MergeFrom(from.transaction_push());
      break;
    }
    case kTransactionRetry: {
      mutable_transaction_retry()->::cockroach::roachpb::TransactionRetryError::MergeFrom(from.transaction_retry());
      break;
    }
    case kTransactionStatus: {
      mutable_transaction_status()->::cockroach::roachpb::TransactionStatusError::MergeFrom(from.transaction_status());
      break;
    }
    case kWriteIntent: {
      mutable_write_intent()->::cockroach::roachpb::WriteIntentError::MergeFrom(from.write_intent());
      break;
    }
    case kWriteTooOld: {
      mutable_write_too_old()->::cockroach::roachpb::WriteTooOldError::MergeFrom(from.write_too_old());
      break;
    }
    case kOpRequiresTxn: {
      mutable_op_requires_txn()->::cockroach::roachpb::OpRequiresTxnError::MergeFrom(from.op_requires_txn());
      break;
    }
    case kConditionFailed: {
      mutable_condition_failed()->::cockroach::roachpb::ConditionFailedError::MergeFrom(from.condition_failed());
      break;
    }
    case kLeaseRejected: {
      mutable_lease_rejected()->::cockroach::roachpb::LeaseRejectedError::MergeFrom(from.lease_rejected());
      break;
    }
    case kNodeUnavailable: {
      mutable_node_unavailable()->::cockroach::roachpb::NodeUnavailableError::MergeFrom(from.node_unavailable());
      break;
    }
    case kRaftGroupDeleted: {
      mutable_raft_group_deleted()->::cockroach::roachpb::RaftGroupDeletedError::MergeFrom(from.raft_group_deleted());
      break;
    }
    case kReplicaCorruption: {
      mutable_replica_corruption()->::cockroach::roachpb::ReplicaCorruptionError::MergeFrom(from.replica_corruption());
      break;
    }
    case kReplicaTooOld: {
      mutable_replica_too_old()->::cockroach::roachpb::ReplicaTooOldError::MergeFrom(from.replica_too_old());
      break;
    }
    case kAmbiguousResult: {
      mutable_ambiguous_result()->::cockroach::roachpb::AmbiguousResultError::MergeFrom(from.ambiguous_result());
      break;
    }
    case kStoreNotFound: {
      mutable_store_not_found()->::cockroach::roachpb::StoreNotFoundError::MergeFrom(from.store_not_found());
      break;
    }
    case kTransactionRetryWithProtoRefresh: {
      mutable_transaction_retry_with_proto_refresh()->::cockroach::roachpb::TransactionRetryWithProtoRefreshError::MergeFrom(from.transaction_retry_with_proto_refresh());
      break;
    }
    case kIntegerOverflow: {
      mutable_integer_overflow()->::cockroach::roachpb::IntegerOverflowError::MergeFrom(from.integer_overflow());
      break;
    }
    case kUnsupportedRequest: {
      mutable_unsupported_request()->::cockroach::roachpb::UnsupportedRequestError::MergeFrom(from.unsupported_request());
      break;
    }
    case kTimestampBefore: {
      mutable_timestamp_before()->::cockroach::roachpb::BatchTimestampBeforeGCError::MergeFrom(from.timestamp_before());
      break;
    }
    case kTxnAlreadyEncounteredError: {
      mutable_txn_already_encountered_error()->::cockroach::roachpb::TxnAlreadyEncounteredErrorError::MergeFrom(from.txn_already_encountered_error());
      break;
    }
    case kIntentMissing: {
      mutable_intent_missing()->::cockroach::roachpb::IntentMissingError::MergeFrom(from.intent_missing());
      break;
    }
    case kMergeInProgress: {
      mutable_merge_in_progress()->::cockroach::roachpb::MergeInProgressError::MergeFrom(from.merge_in_progress());
      break;
    }
    case kRangefeedRetry: {
      mutable_rangefeed_retry()->::cockroach::roachpb::RangeFeedRetryError::MergeFrom(from.rangefeed_retry());
      break;
    }
    case kIndeterminateCommit: {
      mutable_indeterminate_commit()->::cockroach::roachpb::IndeterminateCommitError::MergeFrom(from.indeterminate_commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ErrorDetail::CopyFrom(const ErrorDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ErrorDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorDetail::IsInitialized() const {
  return true;
}

void ErrorDetail::Swap(ErrorDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorDetail::InternalSwap(ErrorDetail* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ErrorDetail::GetTypeName() const {
  return "cockroach.roachpb.ErrorDetail";
}


// ===================================================================

void ErrPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrPosition::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrPosition::ErrPosition()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_ErrPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ErrPosition)
}
ErrPosition::ErrPosition(const ErrPosition& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ErrPosition)
}

void ErrPosition::SharedCtor() {
  index_ = 0;
}

ErrPosition::~ErrPosition() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ErrPosition)
  SharedDtor();
}

void ErrPosition::SharedDtor() {
}

void ErrPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrPosition& ErrPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_ErrPosition.base);
  return *internal_default_instance();
}


void ErrPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ErrPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ErrPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ErrPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ErrPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ErrPosition)
  return false;
#undef DO_
}

void ErrPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ErrPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ErrPosition)
}

size_t ErrPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ErrPosition)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrPosition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ErrPosition*>(&from));
}

void ErrPosition::MergeFrom(const ErrPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ErrPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_index()) {
    set_index(from.index());
  }
}

void ErrPosition::CopyFrom(const ErrPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ErrPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrPosition::IsInitialized() const {
  return true;
}

void ErrPosition::Swap(ErrPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrPosition::InternalSwap(ErrPosition* other) {
  using std::swap;
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ErrPosition::GetTypeName() const {
  return "cockroach.roachpb.ErrPosition";
}


// ===================================================================

void Error::InitAsDefaultInstance() {
  ::cockroach::roachpb::_Error_default_instance_._instance.get_mutable()->unexposed_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(
      ::cockroach::roachpb::Transaction::internal_default_instance());
  ::cockroach::roachpb::_Error_default_instance_._instance.get_mutable()->detail_ = const_cast< ::cockroach::roachpb::ErrorDetail*>(
      ::cockroach::roachpb::ErrorDetail::internal_default_instance());
  ::cockroach::roachpb::_Error_default_instance_._instance.get_mutable()->index_ = const_cast< ::cockroach::roachpb::ErrPosition*>(
      ::cockroach::roachpb::ErrPosition::internal_default_instance());
  ::cockroach::roachpb::_Error_default_instance_._instance.get_mutable()->now_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
}
void Error::clear_unexposed_txn() {
  if (unexposed_txn_ != NULL) unexposed_txn_->Clear();
  clear_has_unexposed_txn();
}
void Error::clear_now() {
  if (now_ != NULL) now_->Clear();
  clear_has_now();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kMessageFieldNumber;
const int Error::kTransactionRestartFieldNumber;
const int Error::kUnexposedTxnFieldNumber;
const int Error::kOriginNodeFieldNumber;
const int Error::kDetailFieldNumber;
const int Error::kIndexFieldNumber;
const int Error::kNowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_unexposed_txn()) {
    unexposed_txn_ = new ::cockroach::roachpb::Transaction(*from.unexposed_txn_);
  } else {
    unexposed_txn_ = NULL;
  }
  if (from.has_detail()) {
    detail_ = new ::cockroach::roachpb::ErrorDetail(*from.detail_);
  } else {
    detail_ = NULL;
  }
  if (from.has_index()) {
    index_ = new ::cockroach::roachpb::ErrPosition(*from.index_);
  } else {
    index_ = NULL;
  }
  if (from.has_now()) {
    now_ = new ::cockroach::util::hlc::Timestamp(*from.now_);
  } else {
    now_ = NULL;
  }
  ::memcpy(&transaction_restart_, &from.transaction_restart_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_node_) -
    reinterpret_cast<char*>(&transaction_restart_)) + sizeof(origin_node_));
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Error)
}

void Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unexposed_txn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_node_) -
      reinterpret_cast<char*>(&unexposed_txn_)) + sizeof(origin_node_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete unexposed_txn_;
  if (this != internal_default_instance()) delete detail_;
  if (this != internal_default_instance()) delete index_;
  if (this != internal_default_instance()) delete now_;
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2ferrors_2eproto::scc_info_AmbiguousResultError.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(unexposed_txn_ != NULL);
      unexposed_txn_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detail_ != NULL);
      detail_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(index_ != NULL);
      index_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(now_ != NULL);
      now_->Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&transaction_restart_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_node_) -
        reinterpret_cast<char*>(&transaction_restart_)) + sizeof(origin_node_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionRestart_IsValid(value)) {
            set_transaction_restart(static_cast< ::cockroach::roachpb::TransactionRestart >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.Transaction unexposed_txn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unexposed_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_origin_node();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cockroach.roachpb.ErrPosition index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->transaction_restart(), output);
  }

  // optional .cockroach.roachpb.Transaction unexposed_txn = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_unexposed_txn(), output);
  }

  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->origin_node(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_detail(), output);
  }

  // optional .cockroach.roachpb.ErrPosition index = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_index(), output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_now(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Error)
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Error)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .cockroach.roachpb.Transaction unexposed_txn = 4;
    if (has_unexposed_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unexposed_txn_);
    }

    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *detail_);
    }

    // optional .cockroach.roachpb.ErrPosition index = 7;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *index_);
    }

    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *now_);
    }

    if (has_transaction_restart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transaction_restart());
    }

    if (has_origin_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_node());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Error*>(&from));
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_unexposed_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.unexposed_txn());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_detail()->::cockroach::roachpb::ErrorDetail::MergeFrom(from.detail());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_index()->::cockroach::roachpb::ErrPosition::MergeFrom(from.index());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_now()->::cockroach::util::hlc::Timestamp::MergeFrom(from.now());
    }
    if (cached_has_bits & 0x00000020u) {
      transaction_restart_ = from.transaction_restart_;
    }
    if (cached_has_bits & 0x00000040u) {
      origin_node_ = from.origin_node_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(unexposed_txn_, other->unexposed_txn_);
  swap(detail_, other->detail_);
  swap(index_, other->index_);
  swap(now_, other->now_);
  swap(transaction_restart_, other->transaction_restart_);
  swap(origin_node_, other->origin_node_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Error::GetTypeName() const {
  return "cockroach.roachpb.Error";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roachpb
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::NotLeaseHolderError* Arena::CreateMaybeMessage< ::cockroach::roachpb::NotLeaseHolderError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::NotLeaseHolderError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::NodeUnavailableError* Arena::CreateMaybeMessage< ::cockroach::roachpb::NodeUnavailableError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::NodeUnavailableError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::UnsupportedRequestError* Arena::CreateMaybeMessage< ::cockroach::roachpb::UnsupportedRequestError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::UnsupportedRequestError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeNotFoundError* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeNotFoundError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeNotFoundError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeKeyMismatchError* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeKeyMismatchError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeKeyMismatchError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* Arena::CreateMaybeMessage< ::cockroach::roachpb::ReadWithinUncertaintyIntervalError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ReadWithinUncertaintyIntervalError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TransactionAbortedError* Arena::CreateMaybeMessage< ::cockroach::roachpb::TransactionAbortedError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TransactionAbortedError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TransactionPushError* Arena::CreateMaybeMessage< ::cockroach::roachpb::TransactionPushError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TransactionPushError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TransactionRetryError* Arena::CreateMaybeMessage< ::cockroach::roachpb::TransactionRetryError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TransactionRetryError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TransactionStatusError* Arena::CreateMaybeMessage< ::cockroach::roachpb::TransactionStatusError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TransactionStatusError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::WriteIntentError* Arena::CreateMaybeMessage< ::cockroach::roachpb::WriteIntentError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::WriteIntentError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::WriteTooOldError* Arena::CreateMaybeMessage< ::cockroach::roachpb::WriteTooOldError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::WriteTooOldError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::OpRequiresTxnError* Arena::CreateMaybeMessage< ::cockroach::roachpb::OpRequiresTxnError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::OpRequiresTxnError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ConditionFailedError* Arena::CreateMaybeMessage< ::cockroach::roachpb::ConditionFailedError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ConditionFailedError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::LeaseRejectedError* Arena::CreateMaybeMessage< ::cockroach::roachpb::LeaseRejectedError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::LeaseRejectedError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::AmbiguousResultError* Arena::CreateMaybeMessage< ::cockroach::roachpb::AmbiguousResultError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::AmbiguousResultError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RaftGroupDeletedError* Arena::CreateMaybeMessage< ::cockroach::roachpb::RaftGroupDeletedError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RaftGroupDeletedError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ReplicaCorruptionError* Arena::CreateMaybeMessage< ::cockroach::roachpb::ReplicaCorruptionError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ReplicaCorruptionError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ReplicaTooOldError* Arena::CreateMaybeMessage< ::cockroach::roachpb::ReplicaTooOldError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ReplicaTooOldError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::StoreNotFoundError* Arena::CreateMaybeMessage< ::cockroach::roachpb::StoreNotFoundError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::StoreNotFoundError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::UnhandledRetryableError* Arena::CreateMaybeMessage< ::cockroach::roachpb::UnhandledRetryableError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::UnhandledRetryableError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TransactionRetryWithProtoRefreshError* Arena::CreateMaybeMessage< ::cockroach::roachpb::TransactionRetryWithProtoRefreshError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TransactionRetryWithProtoRefreshError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::TxnAlreadyEncounteredErrorError* Arena::CreateMaybeMessage< ::cockroach::roachpb::TxnAlreadyEncounteredErrorError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::TxnAlreadyEncounteredErrorError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::IntegerOverflowError* Arena::CreateMaybeMessage< ::cockroach::roachpb::IntegerOverflowError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::IntegerOverflowError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::BatchTimestampBeforeGCError* Arena::CreateMaybeMessage< ::cockroach::roachpb::BatchTimestampBeforeGCError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::BatchTimestampBeforeGCError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::IntentMissingError* Arena::CreateMaybeMessage< ::cockroach::roachpb::IntentMissingError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::IntentMissingError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::MergeInProgressError* Arena::CreateMaybeMessage< ::cockroach::roachpb::MergeInProgressError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::MergeInProgressError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::RangeFeedRetryError* Arena::CreateMaybeMessage< ::cockroach::roachpb::RangeFeedRetryError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::RangeFeedRetryError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::IndeterminateCommitError* Arena::CreateMaybeMessage< ::cockroach::roachpb::IndeterminateCommitError >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::IndeterminateCommitError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ErrorDetail* Arena::CreateMaybeMessage< ::cockroach::roachpb::ErrorDetail >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ErrorDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::ErrPosition* Arena::CreateMaybeMessage< ::cockroach::roachpb::ErrPosition >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::ErrPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cockroach::roachpb::Error* Arena::CreateMaybeMessage< ::cockroach::roachpb::Error >(Arena* arena) {
  return Arena::CreateInternal< ::cockroach::roachpb::Error >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
