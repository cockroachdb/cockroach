// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/internal.proto

#ifndef PROTOBUF_INCLUDED_roachpb_2finternal_2eproto
#define PROTOBUF_INCLUDED_roachpb_2finternal_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2finternal_2eproto 

namespace protobuf_roachpb_2finternal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_roachpb_2finternal_2eproto
namespace cockroach {
namespace roachpb {
class InternalTimeSeriesData;
class InternalTimeSeriesDataDefaultTypeInternal;
extern InternalTimeSeriesDataDefaultTypeInternal _InternalTimeSeriesData_default_instance_;
class InternalTimeSeriesSample;
class InternalTimeSeriesSampleDefaultTypeInternal;
extern InternalTimeSeriesSampleDefaultTypeInternal _InternalTimeSeriesSample_default_instance_;
}  // namespace roachpb
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> ::cockroach::roachpb::InternalTimeSeriesData* Arena::CreateMaybeMessage<::cockroach::roachpb::InternalTimeSeriesData>(Arena*);
template<> ::cockroach::roachpb::InternalTimeSeriesSample* Arena::CreateMaybeMessage<::cockroach::roachpb::InternalTimeSeriesSample>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cockroach {
namespace roachpb {

// ===================================================================

class InternalTimeSeriesData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.InternalTimeSeriesData) */ {
 public:
  InternalTimeSeriesData();
  virtual ~InternalTimeSeriesData();

  InternalTimeSeriesData(const InternalTimeSeriesData& from);

  inline InternalTimeSeriesData& operator=(const InternalTimeSeriesData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InternalTimeSeriesData(InternalTimeSeriesData&& from) noexcept
    : InternalTimeSeriesData() {
    *this = ::std::move(from);
  }

  inline InternalTimeSeriesData& operator=(InternalTimeSeriesData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InternalTimeSeriesData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalTimeSeriesData* internal_default_instance() {
    return reinterpret_cast<const InternalTimeSeriesData*>(
               &_InternalTimeSeriesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InternalTimeSeriesData* other);
  friend void swap(InternalTimeSeriesData& a, InternalTimeSeriesData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InternalTimeSeriesData* New() const final {
    return CreateMaybeMessage<InternalTimeSeriesData>(NULL);
  }

  InternalTimeSeriesData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InternalTimeSeriesData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const InternalTimeSeriesData& from);
  void MergeFrom(const InternalTimeSeriesData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalTimeSeriesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_DEPRECATED_ATTR int samples_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_samples();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kSamplesFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::cockroach::roachpb::InternalTimeSeriesSample* mutable_samples(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::InternalTimeSeriesSample >*
      mutable_samples();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::cockroach::roachpb::InternalTimeSeriesSample& samples(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::cockroach::roachpb::InternalTimeSeriesSample* add_samples();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::InternalTimeSeriesSample >&
      samples() const;

  // repeated int32 offset = 4 [packed = true];
  int offset_size() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  ::google::protobuf::int32 offset(int index) const;
  void set_offset(int index, ::google::protobuf::int32 value);
  void add_offset(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_offset();

  // repeated double last = 5 [packed = true];
  int last_size() const;
  void clear_last();
  static const int kLastFieldNumber = 5;
  double last(int index) const;
  void set_last(int index, double value);
  void add_last(double value);
  const ::google::protobuf::RepeatedField< double >&
      last() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_last();

  // repeated uint32 count = 6 [packed = true];
  int count_size() const;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::uint32 count(int index) const;
  void set_count(int index, ::google::protobuf::uint32 value);
  void add_count(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      count() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_count();

  // repeated double sum = 7 [packed = true];
  int sum_size() const;
  void clear_sum();
  static const int kSumFieldNumber = 7;
  double sum(int index) const;
  void set_sum(int index, double value);
  void add_sum(double value);
  const ::google::protobuf::RepeatedField< double >&
      sum() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_sum();

  // repeated double max = 8 [packed = true];
  int max_size() const;
  void clear_max();
  static const int kMaxFieldNumber = 8;
  double max(int index) const;
  void set_max(int index, double value);
  void add_max(double value);
  const ::google::protobuf::RepeatedField< double >&
      max() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_max();

  // repeated double min = 9 [packed = true];
  int min_size() const;
  void clear_min();
  static const int kMinFieldNumber = 9;
  double min(int index) const;
  void set_min(int index, double value);
  void add_min(double value);
  const ::google::protobuf::RepeatedField< double >&
      min() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_min();

  // repeated double first = 10 [packed = true];
  int first_size() const;
  void clear_first();
  static const int kFirstFieldNumber = 10;
  double first(int index) const;
  void set_first(int index, double value);
  void add_first(double value);
  const ::google::protobuf::RepeatedField< double >&
      first() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_first();

  // repeated double variance = 11 [packed = true];
  int variance_size() const;
  void clear_variance();
  static const int kVarianceFieldNumber = 11;
  double variance(int index) const;
  void set_variance(int index, double value);
  void add_variance(double value);
  const ::google::protobuf::RepeatedField< double >&
      variance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_variance();

  bool has_start_timestamp_nanos() const;
  void clear_start_timestamp_nanos();
  static const int kStartTimestampNanosFieldNumber = 1;
  ::google::protobuf::int64 start_timestamp_nanos() const;
  void set_start_timestamp_nanos(::google::protobuf::int64 value);

  bool has_sample_duration_nanos() const;
  void clear_sample_duration_nanos();
  static const int kSampleDurationNanosFieldNumber = 2;
  ::google::protobuf::int64 sample_duration_nanos() const;
  void set_sample_duration_nanos(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.InternalTimeSeriesData)
 private:
  void set_has_start_timestamp_nanos();
  void clear_has_start_timestamp_nanos();
  void set_has_sample_duration_nanos();
  void clear_has_sample_duration_nanos();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::InternalTimeSeriesSample > samples_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > offset_;
  mutable int _offset_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > last_;
  mutable int _last_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > count_;
  mutable int _count_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > sum_;
  mutable int _sum_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > max_;
  mutable int _max_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > min_;
  mutable int _min_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > first_;
  mutable int _first_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > variance_;
  mutable int _variance_cached_byte_size_;
  ::google::protobuf::int64 start_timestamp_nanos_;
  ::google::protobuf::int64 sample_duration_nanos_;
  friend struct ::protobuf_roachpb_2finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InternalTimeSeriesSample : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.InternalTimeSeriesSample) */ {
 public:
  InternalTimeSeriesSample();
  virtual ~InternalTimeSeriesSample();

  InternalTimeSeriesSample(const InternalTimeSeriesSample& from);

  inline InternalTimeSeriesSample& operator=(const InternalTimeSeriesSample& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InternalTimeSeriesSample(InternalTimeSeriesSample&& from) noexcept
    : InternalTimeSeriesSample() {
    *this = ::std::move(from);
  }

  inline InternalTimeSeriesSample& operator=(InternalTimeSeriesSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InternalTimeSeriesSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalTimeSeriesSample* internal_default_instance() {
    return reinterpret_cast<const InternalTimeSeriesSample*>(
               &_InternalTimeSeriesSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(InternalTimeSeriesSample* other);
  friend void swap(InternalTimeSeriesSample& a, InternalTimeSeriesSample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InternalTimeSeriesSample* New() const final {
    return CreateMaybeMessage<InternalTimeSeriesSample>(NULL);
  }

  InternalTimeSeriesSample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InternalTimeSeriesSample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const InternalTimeSeriesSample& from);
  void MergeFrom(const InternalTimeSeriesSample& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalTimeSeriesSample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  bool has_sum() const;
  void clear_sum();
  static const int kSumFieldNumber = 7;
  double sum() const;
  void set_sum(double value);

  // optional double max = 8;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 8;
  double max() const;
  void set_max(double value);

  // optional double min = 9;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 9;
  double min() const;
  void set_min(double value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.InternalTimeSeriesSample)
 private:
  void set_has_offset();
  void clear_has_offset();
  void set_has_sum();
  void clear_has_sum();
  void set_has_count();
  void clear_has_count();
  void set_has_max();
  void clear_has_max();
  void set_has_min();
  void clear_has_min();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::uint32 count_;
  double sum_;
  double max_;
  double min_;
  friend struct ::protobuf_roachpb_2finternal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InternalTimeSeriesData

inline bool InternalTimeSeriesData::has_start_timestamp_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternalTimeSeriesData::set_has_start_timestamp_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InternalTimeSeriesData::clear_has_start_timestamp_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InternalTimeSeriesData::clear_start_timestamp_nanos() {
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_start_timestamp_nanos();
}
inline ::google::protobuf::int64 InternalTimeSeriesData::start_timestamp_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.start_timestamp_nanos)
  return start_timestamp_nanos_;
}
inline void InternalTimeSeriesData::set_start_timestamp_nanos(::google::protobuf::int64 value) {
  set_has_start_timestamp_nanos();
  start_timestamp_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.start_timestamp_nanos)
}

inline bool InternalTimeSeriesData::has_sample_duration_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternalTimeSeriesData::set_has_sample_duration_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InternalTimeSeriesData::clear_has_sample_duration_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InternalTimeSeriesData::clear_sample_duration_nanos() {
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_sample_duration_nanos();
}
inline ::google::protobuf::int64 InternalTimeSeriesData::sample_duration_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.sample_duration_nanos)
  return sample_duration_nanos_;
}
inline void InternalTimeSeriesData::set_sample_duration_nanos(::google::protobuf::int64 value) {
  set_has_sample_duration_nanos();
  sample_duration_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.sample_duration_nanos)
}

inline int InternalTimeSeriesData::samples_size() const {
  return samples_.size();
}
inline void InternalTimeSeriesData::clear_samples() {
  samples_.Clear();
}
inline ::cockroach::roachpb::InternalTimeSeriesSample* InternalTimeSeriesData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalTimeSeriesData.samples)
  return samples_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::InternalTimeSeriesSample >*
InternalTimeSeriesData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.samples)
  return &samples_;
}
inline const ::cockroach::roachpb::InternalTimeSeriesSample& InternalTimeSeriesData::samples(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.samples)
  return samples_.Get(index);
}
inline ::cockroach::roachpb::InternalTimeSeriesSample* InternalTimeSeriesData::add_samples() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.samples)
  return samples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::InternalTimeSeriesSample >&
InternalTimeSeriesData::samples() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.samples)
  return samples_;
}

// repeated int32 offset = 4 [packed = true];
inline int InternalTimeSeriesData::offset_size() const {
  return offset_.size();
}
inline void InternalTimeSeriesData::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::int32 InternalTimeSeriesData::offset(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.offset)
  return offset_.Get(index);
}
inline void InternalTimeSeriesData::set_offset(int index, ::google::protobuf::int32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.offset)
}
inline void InternalTimeSeriesData::add_offset(::google::protobuf::int32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InternalTimeSeriesData::offset() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InternalTimeSeriesData::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.offset)
  return &offset_;
}

// repeated double last = 5 [packed = true];
inline int InternalTimeSeriesData::last_size() const {
  return last_.size();
}
inline void InternalTimeSeriesData::clear_last() {
  last_.Clear();
}
inline double InternalTimeSeriesData::last(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.last)
  return last_.Get(index);
}
inline void InternalTimeSeriesData::set_last(int index, double value) {
  last_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.last)
}
inline void InternalTimeSeriesData::add_last(double value) {
  last_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.last)
}
inline const ::google::protobuf::RepeatedField< double >&
InternalTimeSeriesData::last() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.last)
  return last_;
}
inline ::google::protobuf::RepeatedField< double >*
InternalTimeSeriesData::mutable_last() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.last)
  return &last_;
}

// repeated uint32 count = 6 [packed = true];
inline int InternalTimeSeriesData::count_size() const {
  return count_.size();
}
inline void InternalTimeSeriesData::clear_count() {
  count_.Clear();
}
inline ::google::protobuf::uint32 InternalTimeSeriesData::count(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.count)
  return count_.Get(index);
}
inline void InternalTimeSeriesData::set_count(int index, ::google::protobuf::uint32 value) {
  count_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.count)
}
inline void InternalTimeSeriesData::add_count(::google::protobuf::uint32 value) {
  count_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InternalTimeSeriesData::count() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.count)
  return count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InternalTimeSeriesData::mutable_count() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.count)
  return &count_;
}

// repeated double sum = 7 [packed = true];
inline int InternalTimeSeriesData::sum_size() const {
  return sum_.size();
}
inline void InternalTimeSeriesData::clear_sum() {
  sum_.Clear();
}
inline double InternalTimeSeriesData::sum(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.sum)
  return sum_.Get(index);
}
inline void InternalTimeSeriesData::set_sum(int index, double value) {
  sum_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.sum)
}
inline void InternalTimeSeriesData::add_sum(double value) {
  sum_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.sum)
}
inline const ::google::protobuf::RepeatedField< double >&
InternalTimeSeriesData::sum() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.sum)
  return sum_;
}
inline ::google::protobuf::RepeatedField< double >*
InternalTimeSeriesData::mutable_sum() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.sum)
  return &sum_;
}

// repeated double max = 8 [packed = true];
inline int InternalTimeSeriesData::max_size() const {
  return max_.size();
}
inline void InternalTimeSeriesData::clear_max() {
  max_.Clear();
}
inline double InternalTimeSeriesData::max(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.max)
  return max_.Get(index);
}
inline void InternalTimeSeriesData::set_max(int index, double value) {
  max_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.max)
}
inline void InternalTimeSeriesData::add_max(double value) {
  max_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.max)
}
inline const ::google::protobuf::RepeatedField< double >&
InternalTimeSeriesData::max() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.max)
  return max_;
}
inline ::google::protobuf::RepeatedField< double >*
InternalTimeSeriesData::mutable_max() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.max)
  return &max_;
}

// repeated double min = 9 [packed = true];
inline int InternalTimeSeriesData::min_size() const {
  return min_.size();
}
inline void InternalTimeSeriesData::clear_min() {
  min_.Clear();
}
inline double InternalTimeSeriesData::min(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.min)
  return min_.Get(index);
}
inline void InternalTimeSeriesData::set_min(int index, double value) {
  min_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.min)
}
inline void InternalTimeSeriesData::add_min(double value) {
  min_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.min)
}
inline const ::google::protobuf::RepeatedField< double >&
InternalTimeSeriesData::min() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.min)
  return min_;
}
inline ::google::protobuf::RepeatedField< double >*
InternalTimeSeriesData::mutable_min() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.min)
  return &min_;
}

// repeated double first = 10 [packed = true];
inline int InternalTimeSeriesData::first_size() const {
  return first_.size();
}
inline void InternalTimeSeriesData::clear_first() {
  first_.Clear();
}
inline double InternalTimeSeriesData::first(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.first)
  return first_.Get(index);
}
inline void InternalTimeSeriesData::set_first(int index, double value) {
  first_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.first)
}
inline void InternalTimeSeriesData::add_first(double value) {
  first_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.first)
}
inline const ::google::protobuf::RepeatedField< double >&
InternalTimeSeriesData::first() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.first)
  return first_;
}
inline ::google::protobuf::RepeatedField< double >*
InternalTimeSeriesData::mutable_first() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.first)
  return &first_;
}

// repeated double variance = 11 [packed = true];
inline int InternalTimeSeriesData::variance_size() const {
  return variance_.size();
}
inline void InternalTimeSeriesData::clear_variance() {
  variance_.Clear();
}
inline double InternalTimeSeriesData::variance(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesData.variance)
  return variance_.Get(index);
}
inline void InternalTimeSeriesData::set_variance(int index, double value) {
  variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesData.variance)
}
inline void InternalTimeSeriesData::add_variance(double value) {
  variance_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.InternalTimeSeriesData.variance)
}
inline const ::google::protobuf::RepeatedField< double >&
InternalTimeSeriesData::variance() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.InternalTimeSeriesData.variance)
  return variance_;
}
inline ::google::protobuf::RepeatedField< double >*
InternalTimeSeriesData::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.InternalTimeSeriesData.variance)
  return &variance_;
}

// -------------------------------------------------------------------

// InternalTimeSeriesSample

inline bool InternalTimeSeriesSample::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternalTimeSeriesSample::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InternalTimeSeriesSample::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InternalTimeSeriesSample::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 InternalTimeSeriesSample::offset() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesSample.offset)
  return offset_;
}
inline void InternalTimeSeriesSample::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesSample.offset)
}

inline bool InternalTimeSeriesSample::has_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InternalTimeSeriesSample::set_has_sum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InternalTimeSeriesSample::clear_has_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InternalTimeSeriesSample::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
inline double InternalTimeSeriesSample::sum() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesSample.sum)
  return sum_;
}
inline void InternalTimeSeriesSample::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesSample.sum)
}

inline bool InternalTimeSeriesSample::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternalTimeSeriesSample::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InternalTimeSeriesSample::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InternalTimeSeriesSample::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 InternalTimeSeriesSample::count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesSample.count)
  return count_;
}
inline void InternalTimeSeriesSample::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesSample.count)
}

// optional double max = 8;
inline bool InternalTimeSeriesSample::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InternalTimeSeriesSample::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InternalTimeSeriesSample::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InternalTimeSeriesSample::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double InternalTimeSeriesSample::max() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesSample.max)
  return max_;
}
inline void InternalTimeSeriesSample::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesSample.max)
}

// optional double min = 9;
inline bool InternalTimeSeriesSample::has_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InternalTimeSeriesSample::set_has_min() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InternalTimeSeriesSample::clear_has_min() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InternalTimeSeriesSample::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double InternalTimeSeriesSample::min() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalTimeSeriesSample.min)
  return min_;
}
inline void InternalTimeSeriesSample::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.InternalTimeSeriesSample.min)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_roachpb_2finternal_2eproto
