// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/errors.proto

#ifndef PROTOBUF_roachpb_2ferrors_2eproto__INCLUDED
#define PROTOBUF_roachpb_2ferrors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "roachpb/metadata.pb.h"
#include "roachpb/data.pb.h"
#include "util/hlc/timestamp.pb.h"
// @@protoc_insertion_point(includes)
namespace cockroach {
namespace roachpb {
class AmbiguousResultError;
class AmbiguousResultErrorDefaultTypeInternal;
extern AmbiguousResultErrorDefaultTypeInternal _AmbiguousResultError_default_instance_;
class ConditionFailedError;
class ConditionFailedErrorDefaultTypeInternal;
extern ConditionFailedErrorDefaultTypeInternal _ConditionFailedError_default_instance_;
class ErrPosition;
class ErrPositionDefaultTypeInternal;
extern ErrPositionDefaultTypeInternal _ErrPosition_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class ErrorDetail;
class ErrorDetailDefaultTypeInternal;
extern ErrorDetailDefaultTypeInternal _ErrorDetail_default_instance_;
class HandledRetryableTxnError;
class HandledRetryableTxnErrorDefaultTypeInternal;
extern HandledRetryableTxnErrorDefaultTypeInternal _HandledRetryableTxnError_default_instance_;
class LeaseRejectedError;
class LeaseRejectedErrorDefaultTypeInternal;
extern LeaseRejectedErrorDefaultTypeInternal _LeaseRejectedError_default_instance_;
class NodeUnavailableError;
class NodeUnavailableErrorDefaultTypeInternal;
extern NodeUnavailableErrorDefaultTypeInternal _NodeUnavailableError_default_instance_;
class NotLeaseHolderError;
class NotLeaseHolderErrorDefaultTypeInternal;
extern NotLeaseHolderErrorDefaultTypeInternal _NotLeaseHolderError_default_instance_;
class OpRequiresTxnError;
class OpRequiresTxnErrorDefaultTypeInternal;
extern OpRequiresTxnErrorDefaultTypeInternal _OpRequiresTxnError_default_instance_;
class RaftGroupDeletedError;
class RaftGroupDeletedErrorDefaultTypeInternal;
extern RaftGroupDeletedErrorDefaultTypeInternal _RaftGroupDeletedError_default_instance_;
class RangeKeyMismatchError;
class RangeKeyMismatchErrorDefaultTypeInternal;
extern RangeKeyMismatchErrorDefaultTypeInternal _RangeKeyMismatchError_default_instance_;
class RangeNotFoundError;
class RangeNotFoundErrorDefaultTypeInternal;
extern RangeNotFoundErrorDefaultTypeInternal _RangeNotFoundError_default_instance_;
class ReadWithinUncertaintyIntervalError;
class ReadWithinUncertaintyIntervalErrorDefaultTypeInternal;
extern ReadWithinUncertaintyIntervalErrorDefaultTypeInternal _ReadWithinUncertaintyIntervalError_default_instance_;
class ReplicaCorruptionError;
class ReplicaCorruptionErrorDefaultTypeInternal;
extern ReplicaCorruptionErrorDefaultTypeInternal _ReplicaCorruptionError_default_instance_;
class ReplicaTooOldError;
class ReplicaTooOldErrorDefaultTypeInternal;
extern ReplicaTooOldErrorDefaultTypeInternal _ReplicaTooOldError_default_instance_;
class SendError;
class SendErrorDefaultTypeInternal;
extern SendErrorDefaultTypeInternal _SendError_default_instance_;
class StoreNotFoundError;
class StoreNotFoundErrorDefaultTypeInternal;
extern StoreNotFoundErrorDefaultTypeInternal _StoreNotFoundError_default_instance_;
class TransactionAbortedError;
class TransactionAbortedErrorDefaultTypeInternal;
extern TransactionAbortedErrorDefaultTypeInternal _TransactionAbortedError_default_instance_;
class TransactionPushError;
class TransactionPushErrorDefaultTypeInternal;
extern TransactionPushErrorDefaultTypeInternal _TransactionPushError_default_instance_;
class TransactionReplayError;
class TransactionReplayErrorDefaultTypeInternal;
extern TransactionReplayErrorDefaultTypeInternal _TransactionReplayError_default_instance_;
class TransactionRetryError;
class TransactionRetryErrorDefaultTypeInternal;
extern TransactionRetryErrorDefaultTypeInternal _TransactionRetryError_default_instance_;
class TransactionStatusError;
class TransactionStatusErrorDefaultTypeInternal;
extern TransactionStatusErrorDefaultTypeInternal _TransactionStatusError_default_instance_;
class TxnPrevAttemptError;
class TxnPrevAttemptErrorDefaultTypeInternal;
extern TxnPrevAttemptErrorDefaultTypeInternal _TxnPrevAttemptError_default_instance_;
class UnhandledRetryableError;
class UnhandledRetryableErrorDefaultTypeInternal;
extern UnhandledRetryableErrorDefaultTypeInternal _UnhandledRetryableError_default_instance_;
class UntrackedTxnError;
class UntrackedTxnErrorDefaultTypeInternal;
extern UntrackedTxnErrorDefaultTypeInternal _UntrackedTxnError_default_instance_;
class WriteIntentError;
class WriteIntentErrorDefaultTypeInternal;
extern WriteIntentErrorDefaultTypeInternal _WriteIntentError_default_instance_;
class WriteTooOldError;
class WriteTooOldErrorDefaultTypeInternal;
extern WriteTooOldErrorDefaultTypeInternal _WriteTooOldError_default_instance_;
}  // namespace roachpb
}  // namespace cockroach

namespace cockroach {
namespace roachpb {

namespace protobuf_roachpb_2ferrors_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_roachpb_2ferrors_2eproto

enum TransactionRetryReason {
  RETRY_REASON_UNKNOWN = 0,
  RETRY_WRITE_TOO_OLD = 1,
  RETRY_DELETE_RANGE = 2,
  RETRY_SERIALIZABLE = 3,
  RETRY_POSSIBLE_REPLAY = 4
};
bool TransactionRetryReason_IsValid(int value);
const TransactionRetryReason TransactionRetryReason_MIN = RETRY_REASON_UNKNOWN;
const TransactionRetryReason TransactionRetryReason_MAX = RETRY_POSSIBLE_REPLAY;
const int TransactionRetryReason_ARRAYSIZE = TransactionRetryReason_MAX + 1;

enum TransactionRestart {
  NONE = 0,
  BACKOFF = 1,
  IMMEDIATE = 2
};
bool TransactionRestart_IsValid(int value);
const TransactionRestart TransactionRestart_MIN = NONE;
const TransactionRestart TransactionRestart_MAX = IMMEDIATE;
const int TransactionRestart_ARRAYSIZE = TransactionRestart_MAX + 1;

// ===================================================================

class NotLeaseHolderError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.NotLeaseHolderError) */ {
 public:
  NotLeaseHolderError();
  virtual ~NotLeaseHolderError();

  NotLeaseHolderError(const NotLeaseHolderError& from);

  inline NotLeaseHolderError& operator=(const NotLeaseHolderError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotLeaseHolderError(NotLeaseHolderError&& from) noexcept
    : NotLeaseHolderError() {
    *this = ::std::move(from);
  }

  inline NotLeaseHolderError& operator=(NotLeaseHolderError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotLeaseHolderError& default_instance();

  static inline const NotLeaseHolderError* internal_default_instance() {
    return reinterpret_cast<const NotLeaseHolderError*>(
               &_NotLeaseHolderError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NotLeaseHolderError* other);
  friend void swap(NotLeaseHolderError& a, NotLeaseHolderError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotLeaseHolderError* New() const PROTOBUF_FINAL { return New(NULL); }

  NotLeaseHolderError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NotLeaseHolderError& from);
  void MergeFrom(const NotLeaseHolderError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotLeaseHolderError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_custom_msg() const;
  void clear_custom_msg();
  static const int kCustomMsgFieldNumber = 5;
  const ::std::string& custom_msg() const;
  void set_custom_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_msg(::std::string&& value);
  #endif
  void set_custom_msg(const char* value);
  void set_custom_msg(const char* value, size_t size);
  ::std::string* mutable_custom_msg();
  ::std::string* release_custom_msg();
  void set_allocated_custom_msg(::std::string* custom_msg);

  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 1;
  const ::cockroach::roachpb::ReplicaDescriptor& replica() const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_replica();
  ::cockroach::roachpb::ReplicaDescriptor* release_replica();
  void set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica);

  // optional .cockroach.roachpb.ReplicaDescriptor lease_holder = 2;
  bool has_lease_holder() const;
  void clear_lease_holder();
  static const int kLeaseHolderFieldNumber = 2;
  const ::cockroach::roachpb::ReplicaDescriptor& lease_holder() const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_lease_holder();
  ::cockroach::roachpb::ReplicaDescriptor* release_lease_holder();
  void set_allocated_lease_holder(::cockroach::roachpb::ReplicaDescriptor* lease_holder);

  // optional .cockroach.roachpb.Lease lease = 4;
  bool has_lease() const;
  void clear_lease();
  static const int kLeaseFieldNumber = 4;
  const ::cockroach::roachpb::Lease& lease() const;
  ::cockroach::roachpb::Lease* mutable_lease();
  ::cockroach::roachpb::Lease* release_lease();
  void set_allocated_lease(::cockroach::roachpb::Lease* lease);

  bool has_range_id() const;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 3;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.NotLeaseHolderError)
 private:
  void set_has_replica();
  void clear_has_replica();
  void set_has_lease_holder();
  void clear_has_lease_holder();
  void set_has_lease();
  void clear_has_lease();
  void set_has_range_id();
  void clear_has_range_id();
  void set_has_custom_msg();
  void clear_has_custom_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr custom_msg_;
  ::cockroach::roachpb::ReplicaDescriptor* replica_;
  ::cockroach::roachpb::ReplicaDescriptor* lease_holder_;
  ::cockroach::roachpb::Lease* lease_;
  ::google::protobuf::int64 range_id_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeUnavailableError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.NodeUnavailableError) */ {
 public:
  NodeUnavailableError();
  virtual ~NodeUnavailableError();

  NodeUnavailableError(const NodeUnavailableError& from);

  inline NodeUnavailableError& operator=(const NodeUnavailableError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeUnavailableError(NodeUnavailableError&& from) noexcept
    : NodeUnavailableError() {
    *this = ::std::move(from);
  }

  inline NodeUnavailableError& operator=(NodeUnavailableError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NodeUnavailableError& default_instance();

  static inline const NodeUnavailableError* internal_default_instance() {
    return reinterpret_cast<const NodeUnavailableError*>(
               &_NodeUnavailableError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NodeUnavailableError* other);
  friend void swap(NodeUnavailableError& a, NodeUnavailableError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeUnavailableError* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeUnavailableError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NodeUnavailableError& from);
  void MergeFrom(const NodeUnavailableError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeUnavailableError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.NodeUnavailableError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeNotFoundError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeNotFoundError) */ {
 public:
  RangeNotFoundError();
  virtual ~RangeNotFoundError();

  RangeNotFoundError(const RangeNotFoundError& from);

  inline RangeNotFoundError& operator=(const RangeNotFoundError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeNotFoundError(RangeNotFoundError&& from) noexcept
    : RangeNotFoundError() {
    *this = ::std::move(from);
  }

  inline RangeNotFoundError& operator=(RangeNotFoundError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RangeNotFoundError& default_instance();

  static inline const RangeNotFoundError* internal_default_instance() {
    return reinterpret_cast<const RangeNotFoundError*>(
               &_RangeNotFoundError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RangeNotFoundError* other);
  friend void swap(RangeNotFoundError& a, RangeNotFoundError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeNotFoundError* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeNotFoundError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RangeNotFoundError& from);
  void MergeFrom(const RangeNotFoundError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeNotFoundError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_range_id() const;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeNotFoundError)
 private:
  void set_has_range_id();
  void clear_has_range_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 range_id_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeKeyMismatchError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeKeyMismatchError) */ {
 public:
  RangeKeyMismatchError();
  virtual ~RangeKeyMismatchError();

  RangeKeyMismatchError(const RangeKeyMismatchError& from);

  inline RangeKeyMismatchError& operator=(const RangeKeyMismatchError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeKeyMismatchError(RangeKeyMismatchError&& from) noexcept
    : RangeKeyMismatchError() {
    *this = ::std::move(from);
  }

  inline RangeKeyMismatchError& operator=(RangeKeyMismatchError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RangeKeyMismatchError& default_instance();

  static inline const RangeKeyMismatchError* internal_default_instance() {
    return reinterpret_cast<const RangeKeyMismatchError*>(
               &_RangeKeyMismatchError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RangeKeyMismatchError* other);
  friend void swap(RangeKeyMismatchError& a, RangeKeyMismatchError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeKeyMismatchError* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeKeyMismatchError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RangeKeyMismatchError& from);
  void MergeFrom(const RangeKeyMismatchError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeKeyMismatchError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_request_start_key() const;
  void clear_request_start_key();
  static const int kRequestStartKeyFieldNumber = 1;
  const ::std::string& request_start_key() const;
  void set_request_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_request_start_key(::std::string&& value);
  #endif
  void set_request_start_key(const char* value);
  void set_request_start_key(const void* value, size_t size);
  ::std::string* mutable_request_start_key();
  ::std::string* release_request_start_key();
  void set_allocated_request_start_key(::std::string* request_start_key);

  bool has_request_end_key() const;
  void clear_request_end_key();
  static const int kRequestEndKeyFieldNumber = 2;
  const ::std::string& request_end_key() const;
  void set_request_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_request_end_key(::std::string&& value);
  #endif
  void set_request_end_key(const char* value);
  void set_request_end_key(const void* value, size_t size);
  ::std::string* mutable_request_end_key();
  ::std::string* release_request_end_key();
  void set_allocated_request_end_key(::std::string* request_end_key);

  // optional .cockroach.roachpb.RangeDescriptor mismatched_range = 3;
  bool has_mismatched_range() const;
  void clear_mismatched_range();
  static const int kMismatchedRangeFieldNumber = 3;
  const ::cockroach::roachpb::RangeDescriptor& mismatched_range() const;
  ::cockroach::roachpb::RangeDescriptor* mutable_mismatched_range();
  ::cockroach::roachpb::RangeDescriptor* release_mismatched_range();
  void set_allocated_mismatched_range(::cockroach::roachpb::RangeDescriptor* mismatched_range);

  // optional .cockroach.roachpb.RangeDescriptor suggested_range = 4;
  bool has_suggested_range() const;
  void clear_suggested_range();
  static const int kSuggestedRangeFieldNumber = 4;
  const ::cockroach::roachpb::RangeDescriptor& suggested_range() const;
  ::cockroach::roachpb::RangeDescriptor* mutable_suggested_range();
  ::cockroach::roachpb::RangeDescriptor* release_suggested_range();
  void set_allocated_suggested_range(::cockroach::roachpb::RangeDescriptor* suggested_range);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeKeyMismatchError)
 private:
  void set_has_request_start_key();
  void clear_has_request_start_key();
  void set_has_request_end_key();
  void clear_has_request_end_key();
  void set_has_mismatched_range();
  void clear_has_mismatched_range();
  void set_has_suggested_range();
  void clear_has_suggested_range();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_start_key_;
  ::google::protobuf::internal::ArenaStringPtr request_end_key_;
  ::cockroach::roachpb::RangeDescriptor* mismatched_range_;
  ::cockroach::roachpb::RangeDescriptor* suggested_range_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadWithinUncertaintyIntervalError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ReadWithinUncertaintyIntervalError) */ {
 public:
  ReadWithinUncertaintyIntervalError();
  virtual ~ReadWithinUncertaintyIntervalError();

  ReadWithinUncertaintyIntervalError(const ReadWithinUncertaintyIntervalError& from);

  inline ReadWithinUncertaintyIntervalError& operator=(const ReadWithinUncertaintyIntervalError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadWithinUncertaintyIntervalError(ReadWithinUncertaintyIntervalError&& from) noexcept
    : ReadWithinUncertaintyIntervalError() {
    *this = ::std::move(from);
  }

  inline ReadWithinUncertaintyIntervalError& operator=(ReadWithinUncertaintyIntervalError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReadWithinUncertaintyIntervalError& default_instance();

  static inline const ReadWithinUncertaintyIntervalError* internal_default_instance() {
    return reinterpret_cast<const ReadWithinUncertaintyIntervalError*>(
               &_ReadWithinUncertaintyIntervalError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ReadWithinUncertaintyIntervalError* other);
  friend void swap(ReadWithinUncertaintyIntervalError& a, ReadWithinUncertaintyIntervalError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadWithinUncertaintyIntervalError* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadWithinUncertaintyIntervalError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ReadWithinUncertaintyIntervalError& from);
  void MergeFrom(const ReadWithinUncertaintyIntervalError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadWithinUncertaintyIntervalError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_read_timestamp() const;
  void clear_read_timestamp();
  static const int kReadTimestampFieldNumber = 1;
  const ::cockroach::util::hlc::Timestamp& read_timestamp() const;
  ::cockroach::util::hlc::Timestamp* mutable_read_timestamp();
  ::cockroach::util::hlc::Timestamp* release_read_timestamp();
  void set_allocated_read_timestamp(::cockroach::util::hlc::Timestamp* read_timestamp);

  bool has_existing_timestamp() const;
  void clear_existing_timestamp();
  static const int kExistingTimestampFieldNumber = 2;
  const ::cockroach::util::hlc::Timestamp& existing_timestamp() const;
  ::cockroach::util::hlc::Timestamp* mutable_existing_timestamp();
  ::cockroach::util::hlc::Timestamp* release_existing_timestamp();
  void set_allocated_existing_timestamp(::cockroach::util::hlc::Timestamp* existing_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
 private:
  void set_has_read_timestamp();
  void clear_has_read_timestamp();
  void set_has_existing_timestamp();
  void clear_has_existing_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::util::hlc::Timestamp* read_timestamp_;
  ::cockroach::util::hlc::Timestamp* existing_timestamp_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionAbortedError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TransactionAbortedError) */ {
 public:
  TransactionAbortedError();
  virtual ~TransactionAbortedError();

  TransactionAbortedError(const TransactionAbortedError& from);

  inline TransactionAbortedError& operator=(const TransactionAbortedError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionAbortedError(TransactionAbortedError&& from) noexcept
    : TransactionAbortedError() {
    *this = ::std::move(from);
  }

  inline TransactionAbortedError& operator=(TransactionAbortedError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TransactionAbortedError& default_instance();

  static inline const TransactionAbortedError* internal_default_instance() {
    return reinterpret_cast<const TransactionAbortedError*>(
               &_TransactionAbortedError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TransactionAbortedError* other);
  friend void swap(TransactionAbortedError& a, TransactionAbortedError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionAbortedError* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionAbortedError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TransactionAbortedError& from);
  void MergeFrom(const TransactionAbortedError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionAbortedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionAbortedError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionPushError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TransactionPushError) */ {
 public:
  TransactionPushError();
  virtual ~TransactionPushError();

  TransactionPushError(const TransactionPushError& from);

  inline TransactionPushError& operator=(const TransactionPushError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionPushError(TransactionPushError&& from) noexcept
    : TransactionPushError() {
    *this = ::std::move(from);
  }

  inline TransactionPushError& operator=(TransactionPushError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TransactionPushError& default_instance();

  static inline const TransactionPushError* internal_default_instance() {
    return reinterpret_cast<const TransactionPushError*>(
               &_TransactionPushError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TransactionPushError* other);
  friend void swap(TransactionPushError& a, TransactionPushError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionPushError* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionPushError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TransactionPushError& from);
  void MergeFrom(const TransactionPushError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionPushError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_pushee_txn() const;
  void clear_pushee_txn();
  static const int kPusheeTxnFieldNumber = 1;
  const ::cockroach::roachpb::Transaction& pushee_txn() const;
  ::cockroach::roachpb::Transaction* mutable_pushee_txn();
  ::cockroach::roachpb::Transaction* release_pushee_txn();
  void set_allocated_pushee_txn(::cockroach::roachpb::Transaction* pushee_txn);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionPushError)
 private:
  void set_has_pushee_txn();
  void clear_has_pushee_txn();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::roachpb::Transaction* pushee_txn_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionRetryError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TransactionRetryError) */ {
 public:
  TransactionRetryError();
  virtual ~TransactionRetryError();

  TransactionRetryError(const TransactionRetryError& from);

  inline TransactionRetryError& operator=(const TransactionRetryError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionRetryError(TransactionRetryError&& from) noexcept
    : TransactionRetryError() {
    *this = ::std::move(from);
  }

  inline TransactionRetryError& operator=(TransactionRetryError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TransactionRetryError& default_instance();

  static inline const TransactionRetryError* internal_default_instance() {
    return reinterpret_cast<const TransactionRetryError*>(
               &_TransactionRetryError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TransactionRetryError* other);
  friend void swap(TransactionRetryError& a, TransactionRetryError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionRetryError* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionRetryError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TransactionRetryError& from);
  void MergeFrom(const TransactionRetryError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionRetryError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::cockroach::roachpb::TransactionRetryReason reason() const;
  void set_reason(::cockroach::roachpb::TransactionRetryReason value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionRetryError)
 private:
  void set_has_reason();
  void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int reason_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionReplayError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TransactionReplayError) */ {
 public:
  TransactionReplayError();
  virtual ~TransactionReplayError();

  TransactionReplayError(const TransactionReplayError& from);

  inline TransactionReplayError& operator=(const TransactionReplayError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionReplayError(TransactionReplayError&& from) noexcept
    : TransactionReplayError() {
    *this = ::std::move(from);
  }

  inline TransactionReplayError& operator=(TransactionReplayError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TransactionReplayError& default_instance();

  static inline const TransactionReplayError* internal_default_instance() {
    return reinterpret_cast<const TransactionReplayError*>(
               &_TransactionReplayError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TransactionReplayError* other);
  friend void swap(TransactionReplayError& a, TransactionReplayError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionReplayError* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionReplayError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TransactionReplayError& from);
  void MergeFrom(const TransactionReplayError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionReplayError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionReplayError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionStatusError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TransactionStatusError) */ {
 public:
  TransactionStatusError();
  virtual ~TransactionStatusError();

  TransactionStatusError(const TransactionStatusError& from);

  inline TransactionStatusError& operator=(const TransactionStatusError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionStatusError(TransactionStatusError&& from) noexcept
    : TransactionStatusError() {
    *this = ::std::move(from);
  }

  inline TransactionStatusError& operator=(TransactionStatusError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TransactionStatusError& default_instance();

  static inline const TransactionStatusError* internal_default_instance() {
    return reinterpret_cast<const TransactionStatusError*>(
               &_TransactionStatusError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TransactionStatusError* other);
  friend void swap(TransactionStatusError& a, TransactionStatusError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionStatusError* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionStatusError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TransactionStatusError& from);
  void MergeFrom(const TransactionStatusError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionStatusError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionStatusError)
 private:
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteIntentError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.WriteIntentError) */ {
 public:
  WriteIntentError();
  virtual ~WriteIntentError();

  WriteIntentError(const WriteIntentError& from);

  inline WriteIntentError& operator=(const WriteIntentError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteIntentError(WriteIntentError&& from) noexcept
    : WriteIntentError() {
    *this = ::std::move(from);
  }

  inline WriteIntentError& operator=(WriteIntentError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WriteIntentError& default_instance();

  static inline const WriteIntentError* internal_default_instance() {
    return reinterpret_cast<const WriteIntentError*>(
               &_WriteIntentError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(WriteIntentError* other);
  friend void swap(WriteIntentError& a, WriteIntentError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteIntentError* New() const PROTOBUF_FINAL { return New(NULL); }

  WriteIntentError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const WriteIntentError& from);
  void MergeFrom(const WriteIntentError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteIntentError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int intents_size() const;
  void clear_intents();
  static const int kIntentsFieldNumber = 1;
  const ::cockroach::roachpb::Intent& intents(int index) const;
  ::cockroach::roachpb::Intent* mutable_intents(int index);
  ::cockroach::roachpb::Intent* add_intents();
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >*
      mutable_intents();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >&
      intents() const;

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.WriteIntentError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent > intents_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteTooOldError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.WriteTooOldError) */ {
 public:
  WriteTooOldError();
  virtual ~WriteTooOldError();

  WriteTooOldError(const WriteTooOldError& from);

  inline WriteTooOldError& operator=(const WriteTooOldError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteTooOldError(WriteTooOldError&& from) noexcept
    : WriteTooOldError() {
    *this = ::std::move(from);
  }

  inline WriteTooOldError& operator=(WriteTooOldError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WriteTooOldError& default_instance();

  static inline const WriteTooOldError* internal_default_instance() {
    return reinterpret_cast<const WriteTooOldError*>(
               &_WriteTooOldError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(WriteTooOldError* other);
  friend void swap(WriteTooOldError& a, WriteTooOldError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteTooOldError* New() const PROTOBUF_FINAL { return New(NULL); }

  WriteTooOldError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const WriteTooOldError& from);
  void MergeFrom(const WriteTooOldError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteTooOldError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::cockroach::util::hlc::Timestamp& timestamp() const;
  ::cockroach::util::hlc::Timestamp* mutable_timestamp();
  ::cockroach::util::hlc::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp);

  bool has_actual_timestamp() const;
  void clear_actual_timestamp();
  static const int kActualTimestampFieldNumber = 2;
  const ::cockroach::util::hlc::Timestamp& actual_timestamp() const;
  ::cockroach::util::hlc::Timestamp* mutable_actual_timestamp();
  ::cockroach::util::hlc::Timestamp* release_actual_timestamp();
  void set_allocated_actual_timestamp(::cockroach::util::hlc::Timestamp* actual_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.WriteTooOldError)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_actual_timestamp();
  void clear_has_actual_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::util::hlc::Timestamp* timestamp_;
  ::cockroach::util::hlc::Timestamp* actual_timestamp_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpRequiresTxnError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.OpRequiresTxnError) */ {
 public:
  OpRequiresTxnError();
  virtual ~OpRequiresTxnError();

  OpRequiresTxnError(const OpRequiresTxnError& from);

  inline OpRequiresTxnError& operator=(const OpRequiresTxnError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpRequiresTxnError(OpRequiresTxnError&& from) noexcept
    : OpRequiresTxnError() {
    *this = ::std::move(from);
  }

  inline OpRequiresTxnError& operator=(OpRequiresTxnError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OpRequiresTxnError& default_instance();

  static inline const OpRequiresTxnError* internal_default_instance() {
    return reinterpret_cast<const OpRequiresTxnError*>(
               &_OpRequiresTxnError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(OpRequiresTxnError* other);
  friend void swap(OpRequiresTxnError& a, OpRequiresTxnError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpRequiresTxnError* New() const PROTOBUF_FINAL { return New(NULL); }

  OpRequiresTxnError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const OpRequiresTxnError& from);
  void MergeFrom(const OpRequiresTxnError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpRequiresTxnError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.OpRequiresTxnError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionFailedError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ConditionFailedError) */ {
 public:
  ConditionFailedError();
  virtual ~ConditionFailedError();

  ConditionFailedError(const ConditionFailedError& from);

  inline ConditionFailedError& operator=(const ConditionFailedError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionFailedError(ConditionFailedError&& from) noexcept
    : ConditionFailedError() {
    *this = ::std::move(from);
  }

  inline ConditionFailedError& operator=(ConditionFailedError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConditionFailedError& default_instance();

  static inline const ConditionFailedError* internal_default_instance() {
    return reinterpret_cast<const ConditionFailedError*>(
               &_ConditionFailedError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ConditionFailedError* other);
  friend void swap(ConditionFailedError& a, ConditionFailedError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionFailedError* New() const PROTOBUF_FINAL { return New(NULL); }

  ConditionFailedError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ConditionFailedError& from);
  void MergeFrom(const ConditionFailedError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConditionFailedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Value actual_value = 1;
  bool has_actual_value() const;
  void clear_actual_value();
  static const int kActualValueFieldNumber = 1;
  const ::cockroach::roachpb::Value& actual_value() const;
  ::cockroach::roachpb::Value* mutable_actual_value();
  ::cockroach::roachpb::Value* release_actual_value();
  void set_allocated_actual_value(::cockroach::roachpb::Value* actual_value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ConditionFailedError)
 private:
  void set_has_actual_value();
  void clear_has_actual_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::roachpb::Value* actual_value_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaseRejectedError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.LeaseRejectedError) */ {
 public:
  LeaseRejectedError();
  virtual ~LeaseRejectedError();

  LeaseRejectedError(const LeaseRejectedError& from);

  inline LeaseRejectedError& operator=(const LeaseRejectedError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaseRejectedError(LeaseRejectedError&& from) noexcept
    : LeaseRejectedError() {
    *this = ::std::move(from);
  }

  inline LeaseRejectedError& operator=(LeaseRejectedError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LeaseRejectedError& default_instance();

  static inline const LeaseRejectedError* internal_default_instance() {
    return reinterpret_cast<const LeaseRejectedError*>(
               &_LeaseRejectedError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(LeaseRejectedError* other);
  friend void swap(LeaseRejectedError& a, LeaseRejectedError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaseRejectedError* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaseRejectedError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LeaseRejectedError& from);
  void MergeFrom(const LeaseRejectedError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaseRejectedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  bool has_requested() const;
  void clear_requested();
  static const int kRequestedFieldNumber = 2;
  const ::cockroach::roachpb::Lease& requested() const;
  ::cockroach::roachpb::Lease* mutable_requested();
  ::cockroach::roachpb::Lease* release_requested();
  void set_allocated_requested(::cockroach::roachpb::Lease* requested);

  bool has_existing() const;
  void clear_existing();
  static const int kExistingFieldNumber = 3;
  const ::cockroach::roachpb::Lease& existing() const;
  ::cockroach::roachpb::Lease* mutable_existing();
  ::cockroach::roachpb::Lease* release_existing();
  void set_allocated_existing(::cockroach::roachpb::Lease* existing);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.LeaseRejectedError)
 private:
  void set_has_message();
  void clear_has_message();
  void set_has_requested();
  void clear_has_requested();
  void set_has_existing();
  void clear_has_existing();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::cockroach::roachpb::Lease* requested_;
  ::cockroach::roachpb::Lease* existing_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.SendError) */ {
 public:
  SendError();
  virtual ~SendError();

  SendError(const SendError& from);

  inline SendError& operator=(const SendError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendError(SendError&& from) noexcept
    : SendError() {
    *this = ::std::move(from);
  }

  inline SendError& operator=(SendError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SendError& default_instance();

  static inline const SendError* internal_default_instance() {
    return reinterpret_cast<const SendError*>(
               &_SendError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SendError* other);
  friend void swap(SendError& a, SendError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendError* New() const PROTOBUF_FINAL { return New(NULL); }

  SendError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SendError& from);
  void MergeFrom(const SendError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.SendError)
 private:
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AmbiguousResultError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.AmbiguousResultError) */ {
 public:
  AmbiguousResultError();
  virtual ~AmbiguousResultError();

  AmbiguousResultError(const AmbiguousResultError& from);

  inline AmbiguousResultError& operator=(const AmbiguousResultError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AmbiguousResultError(AmbiguousResultError&& from) noexcept
    : AmbiguousResultError() {
    *this = ::std::move(from);
  }

  inline AmbiguousResultError& operator=(AmbiguousResultError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AmbiguousResultError& default_instance();

  static inline const AmbiguousResultError* internal_default_instance() {
    return reinterpret_cast<const AmbiguousResultError*>(
               &_AmbiguousResultError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(AmbiguousResultError* other);
  friend void swap(AmbiguousResultError& a, AmbiguousResultError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AmbiguousResultError* New() const PROTOBUF_FINAL { return New(NULL); }

  AmbiguousResultError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AmbiguousResultError& from);
  void MergeFrom(const AmbiguousResultError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AmbiguousResultError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .cockroach.roachpb.Error wrapped_err = 2;
  bool has_wrapped_err() const;
  void clear_wrapped_err();
  static const int kWrappedErrFieldNumber = 2;
  const ::cockroach::roachpb::Error& wrapped_err() const;
  ::cockroach::roachpb::Error* mutable_wrapped_err();
  ::cockroach::roachpb::Error* release_wrapped_err();
  void set_allocated_wrapped_err(::cockroach::roachpb::Error* wrapped_err);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.AmbiguousResultError)
 private:
  void set_has_message();
  void clear_has_message();
  void set_has_wrapped_err();
  void clear_has_wrapped_err();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::cockroach::roachpb::Error* wrapped_err_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaftGroupDeletedError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RaftGroupDeletedError) */ {
 public:
  RaftGroupDeletedError();
  virtual ~RaftGroupDeletedError();

  RaftGroupDeletedError(const RaftGroupDeletedError& from);

  inline RaftGroupDeletedError& operator=(const RaftGroupDeletedError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftGroupDeletedError(RaftGroupDeletedError&& from) noexcept
    : RaftGroupDeletedError() {
    *this = ::std::move(from);
  }

  inline RaftGroupDeletedError& operator=(RaftGroupDeletedError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RaftGroupDeletedError& default_instance();

  static inline const RaftGroupDeletedError* internal_default_instance() {
    return reinterpret_cast<const RaftGroupDeletedError*>(
               &_RaftGroupDeletedError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(RaftGroupDeletedError* other);
  friend void swap(RaftGroupDeletedError& a, RaftGroupDeletedError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftGroupDeletedError* New() const PROTOBUF_FINAL { return New(NULL); }

  RaftGroupDeletedError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RaftGroupDeletedError& from);
  void MergeFrom(const RaftGroupDeletedError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftGroupDeletedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RaftGroupDeletedError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplicaCorruptionError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ReplicaCorruptionError) */ {
 public:
  ReplicaCorruptionError();
  virtual ~ReplicaCorruptionError();

  ReplicaCorruptionError(const ReplicaCorruptionError& from);

  inline ReplicaCorruptionError& operator=(const ReplicaCorruptionError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplicaCorruptionError(ReplicaCorruptionError&& from) noexcept
    : ReplicaCorruptionError() {
    *this = ::std::move(from);
  }

  inline ReplicaCorruptionError& operator=(ReplicaCorruptionError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReplicaCorruptionError& default_instance();

  static inline const ReplicaCorruptionError* internal_default_instance() {
    return reinterpret_cast<const ReplicaCorruptionError*>(
               &_ReplicaCorruptionError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ReplicaCorruptionError* other);
  friend void swap(ReplicaCorruptionError& a, ReplicaCorruptionError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplicaCorruptionError* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplicaCorruptionError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ReplicaCorruptionError& from);
  void MergeFrom(const ReplicaCorruptionError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReplicaCorruptionError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 1;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  bool has_processed() const;
  void clear_processed();
  static const int kProcessedFieldNumber = 2;
  bool processed() const;
  void set_processed(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReplicaCorruptionError)
 private:
  void set_has_error_msg();
  void clear_has_error_msg();
  void set_has_processed();
  void clear_has_processed();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  bool processed_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplicaTooOldError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ReplicaTooOldError) */ {
 public:
  ReplicaTooOldError();
  virtual ~ReplicaTooOldError();

  ReplicaTooOldError(const ReplicaTooOldError& from);

  inline ReplicaTooOldError& operator=(const ReplicaTooOldError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplicaTooOldError(ReplicaTooOldError&& from) noexcept
    : ReplicaTooOldError() {
    *this = ::std::move(from);
  }

  inline ReplicaTooOldError& operator=(ReplicaTooOldError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReplicaTooOldError& default_instance();

  static inline const ReplicaTooOldError* internal_default_instance() {
    return reinterpret_cast<const ReplicaTooOldError*>(
               &_ReplicaTooOldError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ReplicaTooOldError* other);
  friend void swap(ReplicaTooOldError& a, ReplicaTooOldError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplicaTooOldError* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplicaTooOldError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ReplicaTooOldError& from);
  void MergeFrom(const ReplicaTooOldError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReplicaTooOldError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_replica_id() const;
  void clear_replica_id();
  static const int kReplicaIdFieldNumber = 1;
  ::google::protobuf::int32 replica_id() const;
  void set_replica_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReplicaTooOldError)
 private:
  void set_has_replica_id();
  void clear_has_replica_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 replica_id_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StoreNotFoundError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.StoreNotFoundError) */ {
 public:
  StoreNotFoundError();
  virtual ~StoreNotFoundError();

  StoreNotFoundError(const StoreNotFoundError& from);

  inline StoreNotFoundError& operator=(const StoreNotFoundError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreNotFoundError(StoreNotFoundError&& from) noexcept
    : StoreNotFoundError() {
    *this = ::std::move(from);
  }

  inline StoreNotFoundError& operator=(StoreNotFoundError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StoreNotFoundError& default_instance();

  static inline const StoreNotFoundError* internal_default_instance() {
    return reinterpret_cast<const StoreNotFoundError*>(
               &_StoreNotFoundError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(StoreNotFoundError* other);
  friend void swap(StoreNotFoundError& a, StoreNotFoundError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreNotFoundError* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreNotFoundError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StoreNotFoundError& from);
  void MergeFrom(const StoreNotFoundError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreNotFoundError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_store_id() const;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  ::google::protobuf::int64 store_id() const;
  void set_store_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.StoreNotFoundError)
 private:
  void set_has_store_id();
  void clear_has_store_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 store_id_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnhandledRetryableError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.UnhandledRetryableError) */ {
 public:
  UnhandledRetryableError();
  virtual ~UnhandledRetryableError();

  UnhandledRetryableError(const UnhandledRetryableError& from);

  inline UnhandledRetryableError& operator=(const UnhandledRetryableError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnhandledRetryableError(UnhandledRetryableError&& from) noexcept
    : UnhandledRetryableError() {
    *this = ::std::move(from);
  }

  inline UnhandledRetryableError& operator=(UnhandledRetryableError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UnhandledRetryableError& default_instance();

  static inline const UnhandledRetryableError* internal_default_instance() {
    return reinterpret_cast<const UnhandledRetryableError*>(
               &_UnhandledRetryableError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(UnhandledRetryableError* other);
  friend void swap(UnhandledRetryableError& a, UnhandledRetryableError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnhandledRetryableError* New() const PROTOBUF_FINAL { return New(NULL); }

  UnhandledRetryableError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UnhandledRetryableError& from);
  void MergeFrom(const UnhandledRetryableError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnhandledRetryableError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_perr() const;
  void clear_perr();
  static const int kPErrFieldNumber = 1;
  const ::cockroach::roachpb::Error& perr() const;
  ::cockroach::roachpb::Error* mutable_perr();
  ::cockroach::roachpb::Error* release_perr();
  void set_allocated_perr(::cockroach::roachpb::Error* perr);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.UnhandledRetryableError)
 private:
  void set_has_perr();
  void clear_has_perr();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::roachpb::Error* perr_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HandledRetryableTxnError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.HandledRetryableTxnError) */ {
 public:
  HandledRetryableTxnError();
  virtual ~HandledRetryableTxnError();

  HandledRetryableTxnError(const HandledRetryableTxnError& from);

  inline HandledRetryableTxnError& operator=(const HandledRetryableTxnError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HandledRetryableTxnError(HandledRetryableTxnError&& from) noexcept
    : HandledRetryableTxnError() {
    *this = ::std::move(from);
  }

  inline HandledRetryableTxnError& operator=(HandledRetryableTxnError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HandledRetryableTxnError& default_instance();

  static inline const HandledRetryableTxnError* internal_default_instance() {
    return reinterpret_cast<const HandledRetryableTxnError*>(
               &_HandledRetryableTxnError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(HandledRetryableTxnError* other);
  friend void swap(HandledRetryableTxnError& a, HandledRetryableTxnError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandledRetryableTxnError* New() const PROTOBUF_FINAL { return New(NULL); }

  HandledRetryableTxnError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HandledRetryableTxnError& from);
  void MergeFrom(const HandledRetryableTxnError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HandledRetryableTxnError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  bool has_txn_id() const;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 2;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const void* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  bool has_transaction() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 3;
  const ::cockroach::roachpb::Transaction& transaction() const;
  ::cockroach::roachpb::Transaction* mutable_transaction();
  ::cockroach::roachpb::Transaction* release_transaction();
  void set_allocated_transaction(::cockroach::roachpb::Transaction* transaction);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.HandledRetryableTxnError)
 private:
  void set_has_msg();
  void clear_has_msg();
  void set_has_txn_id();
  void clear_has_txn_id();
  void set_has_transaction();
  void clear_has_transaction();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::cockroach::roachpb::Transaction* transaction_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UntrackedTxnError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.UntrackedTxnError) */ {
 public:
  UntrackedTxnError();
  virtual ~UntrackedTxnError();

  UntrackedTxnError(const UntrackedTxnError& from);

  inline UntrackedTxnError& operator=(const UntrackedTxnError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UntrackedTxnError(UntrackedTxnError&& from) noexcept
    : UntrackedTxnError() {
    *this = ::std::move(from);
  }

  inline UntrackedTxnError& operator=(UntrackedTxnError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UntrackedTxnError& default_instance();

  static inline const UntrackedTxnError* internal_default_instance() {
    return reinterpret_cast<const UntrackedTxnError*>(
               &_UntrackedTxnError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(UntrackedTxnError* other);
  friend void swap(UntrackedTxnError& a, UntrackedTxnError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UntrackedTxnError* New() const PROTOBUF_FINAL { return New(NULL); }

  UntrackedTxnError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UntrackedTxnError& from);
  void MergeFrom(const UntrackedTxnError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UntrackedTxnError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.UntrackedTxnError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxnPrevAttemptError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.TxnPrevAttemptError) */ {
 public:
  TxnPrevAttemptError();
  virtual ~TxnPrevAttemptError();

  TxnPrevAttemptError(const TxnPrevAttemptError& from);

  inline TxnPrevAttemptError& operator=(const TxnPrevAttemptError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnPrevAttemptError(TxnPrevAttemptError&& from) noexcept
    : TxnPrevAttemptError() {
    *this = ::std::move(from);
  }

  inline TxnPrevAttemptError& operator=(TxnPrevAttemptError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TxnPrevAttemptError& default_instance();

  static inline const TxnPrevAttemptError* internal_default_instance() {
    return reinterpret_cast<const TxnPrevAttemptError*>(
               &_TxnPrevAttemptError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(TxnPrevAttemptError* other);
  friend void swap(TxnPrevAttemptError& a, TxnPrevAttemptError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnPrevAttemptError* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnPrevAttemptError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TxnPrevAttemptError& from);
  void MergeFrom(const TxnPrevAttemptError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TxnPrevAttemptError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TxnPrevAttemptError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorDetail : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ErrorDetail) */ {
 public:
  ErrorDetail();
  virtual ~ErrorDetail();

  ErrorDetail(const ErrorDetail& from);

  inline ErrorDetail& operator=(const ErrorDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorDetail(ErrorDetail&& from) noexcept
    : ErrorDetail() {
    *this = ::std::move(from);
  }

  inline ErrorDetail& operator=(ErrorDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ErrorDetail& default_instance();

  static inline const ErrorDetail* internal_default_instance() {
    return reinterpret_cast<const ErrorDetail*>(
               &_ErrorDetail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(ErrorDetail* other);
  friend void swap(ErrorDetail& a, ErrorDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorDetail* New() const PROTOBUF_FINAL { return New(NULL); }

  ErrorDetail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ErrorDetail& from);
  void MergeFrom(const ErrorDetail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ErrorDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.NotLeaseHolderError not_lease_holder = 1;
  bool has_not_lease_holder() const;
  void clear_not_lease_holder();
  static const int kNotLeaseHolderFieldNumber = 1;
  const ::cockroach::roachpb::NotLeaseHolderError& not_lease_holder() const;
  ::cockroach::roachpb::NotLeaseHolderError* mutable_not_lease_holder();
  ::cockroach::roachpb::NotLeaseHolderError* release_not_lease_holder();
  void set_allocated_not_lease_holder(::cockroach::roachpb::NotLeaseHolderError* not_lease_holder);

  // optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
  bool has_range_not_found() const;
  void clear_range_not_found();
  static const int kRangeNotFoundFieldNumber = 2;
  const ::cockroach::roachpb::RangeNotFoundError& range_not_found() const;
  ::cockroach::roachpb::RangeNotFoundError* mutable_range_not_found();
  ::cockroach::roachpb::RangeNotFoundError* release_range_not_found();
  void set_allocated_range_not_found(::cockroach::roachpb::RangeNotFoundError* range_not_found);

  // optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
  bool has_range_key_mismatch() const;
  void clear_range_key_mismatch();
  static const int kRangeKeyMismatchFieldNumber = 3;
  const ::cockroach::roachpb::RangeKeyMismatchError& range_key_mismatch() const;
  ::cockroach::roachpb::RangeKeyMismatchError* mutable_range_key_mismatch();
  ::cockroach::roachpb::RangeKeyMismatchError* release_range_key_mismatch();
  void set_allocated_range_key_mismatch(::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch);

  // optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
  bool has_read_within_uncertainty_interval() const;
  void clear_read_within_uncertainty_interval();
  static const int kReadWithinUncertaintyIntervalFieldNumber = 4;
  const ::cockroach::roachpb::ReadWithinUncertaintyIntervalError& read_within_uncertainty_interval() const;
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* mutable_read_within_uncertainty_interval();
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* release_read_within_uncertainty_interval();
  void set_allocated_read_within_uncertainty_interval(::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval);

  // optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
  bool has_transaction_aborted() const;
  void clear_transaction_aborted();
  static const int kTransactionAbortedFieldNumber = 5;
  const ::cockroach::roachpb::TransactionAbortedError& transaction_aborted() const;
  ::cockroach::roachpb::TransactionAbortedError* mutable_transaction_aborted();
  ::cockroach::roachpb::TransactionAbortedError* release_transaction_aborted();
  void set_allocated_transaction_aborted(::cockroach::roachpb::TransactionAbortedError* transaction_aborted);

  // optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
  bool has_transaction_push() const;
  void clear_transaction_push();
  static const int kTransactionPushFieldNumber = 6;
  const ::cockroach::roachpb::TransactionPushError& transaction_push() const;
  ::cockroach::roachpb::TransactionPushError* mutable_transaction_push();
  ::cockroach::roachpb::TransactionPushError* release_transaction_push();
  void set_allocated_transaction_push(::cockroach::roachpb::TransactionPushError* transaction_push);

  // optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
  bool has_transaction_retry() const;
  void clear_transaction_retry();
  static const int kTransactionRetryFieldNumber = 7;
  const ::cockroach::roachpb::TransactionRetryError& transaction_retry() const;
  ::cockroach::roachpb::TransactionRetryError* mutable_transaction_retry();
  ::cockroach::roachpb::TransactionRetryError* release_transaction_retry();
  void set_allocated_transaction_retry(::cockroach::roachpb::TransactionRetryError* transaction_retry);

  // optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
  bool has_transaction_status() const;
  void clear_transaction_status();
  static const int kTransactionStatusFieldNumber = 8;
  const ::cockroach::roachpb::TransactionStatusError& transaction_status() const;
  ::cockroach::roachpb::TransactionStatusError* mutable_transaction_status();
  ::cockroach::roachpb::TransactionStatusError* release_transaction_status();
  void set_allocated_transaction_status(::cockroach::roachpb::TransactionStatusError* transaction_status);

  // optional .cockroach.roachpb.WriteIntentError write_intent = 9;
  bool has_write_intent() const;
  void clear_write_intent();
  static const int kWriteIntentFieldNumber = 9;
  const ::cockroach::roachpb::WriteIntentError& write_intent() const;
  ::cockroach::roachpb::WriteIntentError* mutable_write_intent();
  ::cockroach::roachpb::WriteIntentError* release_write_intent();
  void set_allocated_write_intent(::cockroach::roachpb::WriteIntentError* write_intent);

  // optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
  bool has_write_too_old() const;
  void clear_write_too_old();
  static const int kWriteTooOldFieldNumber = 10;
  const ::cockroach::roachpb::WriteTooOldError& write_too_old() const;
  ::cockroach::roachpb::WriteTooOldError* mutable_write_too_old();
  ::cockroach::roachpb::WriteTooOldError* release_write_too_old();
  void set_allocated_write_too_old(::cockroach::roachpb::WriteTooOldError* write_too_old);

  // optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
  bool has_op_requires_txn() const;
  void clear_op_requires_txn();
  static const int kOpRequiresTxnFieldNumber = 11;
  const ::cockroach::roachpb::OpRequiresTxnError& op_requires_txn() const;
  ::cockroach::roachpb::OpRequiresTxnError* mutable_op_requires_txn();
  ::cockroach::roachpb::OpRequiresTxnError* release_op_requires_txn();
  void set_allocated_op_requires_txn(::cockroach::roachpb::OpRequiresTxnError* op_requires_txn);

  // optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
  bool has_condition_failed() const;
  void clear_condition_failed();
  static const int kConditionFailedFieldNumber = 12;
  const ::cockroach::roachpb::ConditionFailedError& condition_failed() const;
  ::cockroach::roachpb::ConditionFailedError* mutable_condition_failed();
  ::cockroach::roachpb::ConditionFailedError* release_condition_failed();
  void set_allocated_condition_failed(::cockroach::roachpb::ConditionFailedError* condition_failed);

  // optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
  bool has_lease_rejected() const;
  void clear_lease_rejected();
  static const int kLeaseRejectedFieldNumber = 13;
  const ::cockroach::roachpb::LeaseRejectedError& lease_rejected() const;
  ::cockroach::roachpb::LeaseRejectedError* mutable_lease_rejected();
  ::cockroach::roachpb::LeaseRejectedError* release_lease_rejected();
  void set_allocated_lease_rejected(::cockroach::roachpb::LeaseRejectedError* lease_rejected);

  // optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
  bool has_node_unavailable() const;
  void clear_node_unavailable();
  static const int kNodeUnavailableFieldNumber = 14;
  const ::cockroach::roachpb::NodeUnavailableError& node_unavailable() const;
  ::cockroach::roachpb::NodeUnavailableError* mutable_node_unavailable();
  ::cockroach::roachpb::NodeUnavailableError* release_node_unavailable();
  void set_allocated_node_unavailable(::cockroach::roachpb::NodeUnavailableError* node_unavailable);

  // optional .cockroach.roachpb.SendError send = 15;
  bool has_send() const;
  void clear_send();
  static const int kSendFieldNumber = 15;
  const ::cockroach::roachpb::SendError& send() const;
  ::cockroach::roachpb::SendError* mutable_send();
  ::cockroach::roachpb::SendError* release_send();
  void set_allocated_send(::cockroach::roachpb::SendError* send);

  // optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
  bool has_raft_group_deleted() const;
  void clear_raft_group_deleted();
  static const int kRaftGroupDeletedFieldNumber = 16;
  const ::cockroach::roachpb::RaftGroupDeletedError& raft_group_deleted() const;
  ::cockroach::roachpb::RaftGroupDeletedError* mutable_raft_group_deleted();
  ::cockroach::roachpb::RaftGroupDeletedError* release_raft_group_deleted();
  void set_allocated_raft_group_deleted(::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted);

  // optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
  bool has_replica_corruption() const;
  void clear_replica_corruption();
  static const int kReplicaCorruptionFieldNumber = 17;
  const ::cockroach::roachpb::ReplicaCorruptionError& replica_corruption() const;
  ::cockroach::roachpb::ReplicaCorruptionError* mutable_replica_corruption();
  ::cockroach::roachpb::ReplicaCorruptionError* release_replica_corruption();
  void set_allocated_replica_corruption(::cockroach::roachpb::ReplicaCorruptionError* replica_corruption);

  // optional .cockroach.roachpb.ReplicaTooOldError replica_too_old = 18;
  bool has_replica_too_old() const;
  void clear_replica_too_old();
  static const int kReplicaTooOldFieldNumber = 18;
  const ::cockroach::roachpb::ReplicaTooOldError& replica_too_old() const;
  ::cockroach::roachpb::ReplicaTooOldError* mutable_replica_too_old();
  ::cockroach::roachpb::ReplicaTooOldError* release_replica_too_old();
  void set_allocated_replica_too_old(::cockroach::roachpb::ReplicaTooOldError* replica_too_old);

  // optional .cockroach.roachpb.TransactionReplayError transaction_replay = 22;
  bool has_transaction_replay() const;
  void clear_transaction_replay();
  static const int kTransactionReplayFieldNumber = 22;
  const ::cockroach::roachpb::TransactionReplayError& transaction_replay() const;
  ::cockroach::roachpb::TransactionReplayError* mutable_transaction_replay();
  ::cockroach::roachpb::TransactionReplayError* release_transaction_replay();
  void set_allocated_transaction_replay(::cockroach::roachpb::TransactionReplayError* transaction_replay);

  // optional .cockroach.roachpb.AmbiguousResultError ambiguous_result = 26;
  bool has_ambiguous_result() const;
  void clear_ambiguous_result();
  static const int kAmbiguousResultFieldNumber = 26;
  const ::cockroach::roachpb::AmbiguousResultError& ambiguous_result() const;
  ::cockroach::roachpb::AmbiguousResultError* mutable_ambiguous_result();
  ::cockroach::roachpb::AmbiguousResultError* release_ambiguous_result();
  void set_allocated_ambiguous_result(::cockroach::roachpb::AmbiguousResultError* ambiguous_result);

  // optional .cockroach.roachpb.StoreNotFoundError store_not_found = 27;
  bool has_store_not_found() const;
  void clear_store_not_found();
  static const int kStoreNotFoundFieldNumber = 27;
  const ::cockroach::roachpb::StoreNotFoundError& store_not_found() const;
  ::cockroach::roachpb::StoreNotFoundError* mutable_store_not_found();
  ::cockroach::roachpb::StoreNotFoundError* release_store_not_found();
  void set_allocated_store_not_found(::cockroach::roachpb::StoreNotFoundError* store_not_found);

  // optional .cockroach.roachpb.HandledRetryableTxnError handled_retryable_txn_error = 28;
  bool has_handled_retryable_txn_error() const;
  void clear_handled_retryable_txn_error();
  static const int kHandledRetryableTxnErrorFieldNumber = 28;
  const ::cockroach::roachpb::HandledRetryableTxnError& handled_retryable_txn_error() const;
  ::cockroach::roachpb::HandledRetryableTxnError* mutable_handled_retryable_txn_error();
  ::cockroach::roachpb::HandledRetryableTxnError* release_handled_retryable_txn_error();
  void set_allocated_handled_retryable_txn_error(::cockroach::roachpb::HandledRetryableTxnError* handled_retryable_txn_error);

  // optional .cockroach.roachpb.UntrackedTxnError untracked_txn_error = 29;
  bool has_untracked_txn_error() const;
  void clear_untracked_txn_error();
  static const int kUntrackedTxnErrorFieldNumber = 29;
  const ::cockroach::roachpb::UntrackedTxnError& untracked_txn_error() const;
  ::cockroach::roachpb::UntrackedTxnError* mutable_untracked_txn_error();
  ::cockroach::roachpb::UntrackedTxnError* release_untracked_txn_error();
  void set_allocated_untracked_txn_error(::cockroach::roachpb::UntrackedTxnError* untracked_txn_error);

  // optional .cockroach.roachpb.TxnPrevAttemptError txn_aborted_async_err = 30;
  bool has_txn_aborted_async_err() const;
  void clear_txn_aborted_async_err();
  static const int kTxnAbortedAsyncErrFieldNumber = 30;
  const ::cockroach::roachpb::TxnPrevAttemptError& txn_aborted_async_err() const;
  ::cockroach::roachpb::TxnPrevAttemptError* mutable_txn_aborted_async_err();
  ::cockroach::roachpb::TxnPrevAttemptError* release_txn_aborted_async_err();
  void set_allocated_txn_aborted_async_err(::cockroach::roachpb::TxnPrevAttemptError* txn_aborted_async_err);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ErrorDetail)
 private:
  void set_has_not_lease_holder();
  void clear_has_not_lease_holder();
  void set_has_range_not_found();
  void clear_has_range_not_found();
  void set_has_range_key_mismatch();
  void clear_has_range_key_mismatch();
  void set_has_read_within_uncertainty_interval();
  void clear_has_read_within_uncertainty_interval();
  void set_has_transaction_aborted();
  void clear_has_transaction_aborted();
  void set_has_transaction_push();
  void clear_has_transaction_push();
  void set_has_transaction_retry();
  void clear_has_transaction_retry();
  void set_has_transaction_replay();
  void clear_has_transaction_replay();
  void set_has_transaction_status();
  void clear_has_transaction_status();
  void set_has_write_intent();
  void clear_has_write_intent();
  void set_has_write_too_old();
  void clear_has_write_too_old();
  void set_has_op_requires_txn();
  void clear_has_op_requires_txn();
  void set_has_condition_failed();
  void clear_has_condition_failed();
  void set_has_lease_rejected();
  void clear_has_lease_rejected();
  void set_has_node_unavailable();
  void clear_has_node_unavailable();
  void set_has_send();
  void clear_has_send();
  void set_has_raft_group_deleted();
  void clear_has_raft_group_deleted();
  void set_has_replica_corruption();
  void clear_has_replica_corruption();
  void set_has_replica_too_old();
  void clear_has_replica_too_old();
  void set_has_ambiguous_result();
  void clear_has_ambiguous_result();
  void set_has_store_not_found();
  void clear_has_store_not_found();
  void set_has_handled_retryable_txn_error();
  void clear_has_handled_retryable_txn_error();
  void set_has_untracked_txn_error();
  void clear_has_untracked_txn_error();
  void set_has_txn_aborted_async_err();
  void clear_has_txn_aborted_async_err();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::roachpb::NotLeaseHolderError* not_lease_holder_;
  ::cockroach::roachpb::RangeNotFoundError* range_not_found_;
  ::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch_;
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval_;
  ::cockroach::roachpb::TransactionAbortedError* transaction_aborted_;
  ::cockroach::roachpb::TransactionPushError* transaction_push_;
  ::cockroach::roachpb::TransactionRetryError* transaction_retry_;
  ::cockroach::roachpb::TransactionStatusError* transaction_status_;
  ::cockroach::roachpb::WriteIntentError* write_intent_;
  ::cockroach::roachpb::WriteTooOldError* write_too_old_;
  ::cockroach::roachpb::OpRequiresTxnError* op_requires_txn_;
  ::cockroach::roachpb::ConditionFailedError* condition_failed_;
  ::cockroach::roachpb::LeaseRejectedError* lease_rejected_;
  ::cockroach::roachpb::NodeUnavailableError* node_unavailable_;
  ::cockroach::roachpb::SendError* send_;
  ::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted_;
  ::cockroach::roachpb::ReplicaCorruptionError* replica_corruption_;
  ::cockroach::roachpb::ReplicaTooOldError* replica_too_old_;
  ::cockroach::roachpb::TransactionReplayError* transaction_replay_;
  ::cockroach::roachpb::AmbiguousResultError* ambiguous_result_;
  ::cockroach::roachpb::StoreNotFoundError* store_not_found_;
  ::cockroach::roachpb::HandledRetryableTxnError* handled_retryable_txn_error_;
  ::cockroach::roachpb::UntrackedTxnError* untracked_txn_error_;
  ::cockroach::roachpb::TxnPrevAttemptError* txn_aborted_async_err_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrPosition : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ErrPosition) */ {
 public:
  ErrPosition();
  virtual ~ErrPosition();

  ErrPosition(const ErrPosition& from);

  inline ErrPosition& operator=(const ErrPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrPosition(ErrPosition&& from) noexcept
    : ErrPosition() {
    *this = ::std::move(from);
  }

  inline ErrPosition& operator=(ErrPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ErrPosition& default_instance();

  static inline const ErrPosition* internal_default_instance() {
    return reinterpret_cast<const ErrPosition*>(
               &_ErrPosition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(ErrPosition* other);
  friend void swap(ErrPosition& a, ErrPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrPosition* New() const PROTOBUF_FINAL { return New(NULL); }

  ErrPosition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ErrPosition& from);
  void MergeFrom(const ErrPosition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ErrPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ErrPosition)
 private:
  void set_has_index();
  void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Error& default_instance();

  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .cockroach.roachpb.Transaction unexposed_txn = 4;
  bool has_unexposed_txn() const;
  void clear_unexposed_txn();
  static const int kUnexposedTxnFieldNumber = 4;
  const ::cockroach::roachpb::Transaction& unexposed_txn() const;
  ::cockroach::roachpb::Transaction* mutable_unexposed_txn();
  ::cockroach::roachpb::Transaction* release_unexposed_txn();
  void set_allocated_unexposed_txn(::cockroach::roachpb::Transaction* unexposed_txn);

  // optional .cockroach.roachpb.ErrorDetail detail = 6;
  bool has_detail() const;
  void clear_detail();
  static const int kDetailFieldNumber = 6;
  const ::cockroach::roachpb::ErrorDetail& detail() const;
  ::cockroach::roachpb::ErrorDetail* mutable_detail();
  ::cockroach::roachpb::ErrorDetail* release_detail();
  void set_allocated_detail(::cockroach::roachpb::ErrorDetail* detail);

  // optional .cockroach.roachpb.ErrPosition index = 7;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 7;
  const ::cockroach::roachpb::ErrPosition& index() const;
  ::cockroach::roachpb::ErrPosition* mutable_index();
  ::cockroach::roachpb::ErrPosition* release_index();
  void set_allocated_index(::cockroach::roachpb::ErrPosition* index);

  bool has_now() const;
  void clear_now();
  static const int kNowFieldNumber = 8;
  const ::cockroach::util::hlc::Timestamp& now() const;
  ::cockroach::util::hlc::Timestamp* mutable_now();
  ::cockroach::util::hlc::Timestamp* release_now();
  void set_allocated_now(::cockroach::util::hlc::Timestamp* now);

  bool has_transaction_restart() const;
  void clear_transaction_restart();
  static const int kTransactionRestartFieldNumber = 3;
  ::cockroach::roachpb::TransactionRestart transaction_restart() const;
  void set_transaction_restart(::cockroach::roachpb::TransactionRestart value);

  bool has_origin_node() const;
  void clear_origin_node();
  static const int kOriginNodeFieldNumber = 5;
  ::google::protobuf::int32 origin_node() const;
  void set_origin_node(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Error)
 private:
  void set_has_message();
  void clear_has_message();
  void set_has_transaction_restart();
  void clear_has_transaction_restart();
  void set_has_unexposed_txn();
  void clear_has_unexposed_txn();
  void set_has_origin_node();
  void clear_has_origin_node();
  void set_has_detail();
  void clear_has_detail();
  void set_has_index();
  void clear_has_index();
  void set_has_now();
  void clear_has_now();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::cockroach::roachpb::Transaction* unexposed_txn_;
  ::cockroach::roachpb::ErrorDetail* detail_;
  ::cockroach::roachpb::ErrPosition* index_;
  ::cockroach::util::hlc::Timestamp* now_;
  int transaction_restart_;
  ::google::protobuf::int32 origin_node_;
  friend struct protobuf_roachpb_2ferrors_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotLeaseHolderError

inline bool NotLeaseHolderError::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotLeaseHolderError::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotLeaseHolderError::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotLeaseHolderError::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& NotLeaseHolderError::replica() const {
  const ::cockroach::roachpb::ReplicaDescriptor* p = replica_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaseHolderError.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReplicaDescriptor*>(
      &::cockroach::roachpb::_ReplicaDescriptor_default_instance_);
}
inline ::cockroach::roachpb::ReplicaDescriptor* NotLeaseHolderError::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NotLeaseHolderError.replica)
  return replica_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* NotLeaseHolderError::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NotLeaseHolderError.replica)
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline void NotLeaseHolderError::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NotLeaseHolderError.replica)
}

// optional .cockroach.roachpb.ReplicaDescriptor lease_holder = 2;
inline bool NotLeaseHolderError::has_lease_holder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotLeaseHolderError::set_has_lease_holder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotLeaseHolderError::clear_has_lease_holder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotLeaseHolderError::clear_lease_holder() {
  if (lease_holder_ != NULL) lease_holder_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_lease_holder();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& NotLeaseHolderError::lease_holder() const {
  const ::cockroach::roachpb::ReplicaDescriptor* p = lease_holder_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaseHolderError.lease_holder)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReplicaDescriptor*>(
      &::cockroach::roachpb::_ReplicaDescriptor_default_instance_);
}
inline ::cockroach::roachpb::ReplicaDescriptor* NotLeaseHolderError::mutable_lease_holder() {
  set_has_lease_holder();
  if (lease_holder_ == NULL) {
    lease_holder_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NotLeaseHolderError.lease_holder)
  return lease_holder_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* NotLeaseHolderError::release_lease_holder() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NotLeaseHolderError.lease_holder)
  clear_has_lease_holder();
  ::cockroach::roachpb::ReplicaDescriptor* temp = lease_holder_;
  lease_holder_ = NULL;
  return temp;
}
inline void NotLeaseHolderError::set_allocated_lease_holder(::cockroach::roachpb::ReplicaDescriptor* lease_holder) {
  delete lease_holder_;
  lease_holder_ = lease_holder;
  if (lease_holder) {
    set_has_lease_holder();
  } else {
    clear_has_lease_holder();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NotLeaseHolderError.lease_holder)
}

// optional .cockroach.roachpb.Lease lease = 4;
inline bool NotLeaseHolderError::has_lease() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotLeaseHolderError::set_has_lease() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotLeaseHolderError::clear_has_lease() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotLeaseHolderError::clear_lease() {
  if (lease_ != NULL) lease_->::cockroach::roachpb::Lease::Clear();
  clear_has_lease();
}
inline const ::cockroach::roachpb::Lease& NotLeaseHolderError::lease() const {
  const ::cockroach::roachpb::Lease* p = lease_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaseHolderError.lease)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* NotLeaseHolderError::mutable_lease() {
  set_has_lease();
  if (lease_ == NULL) {
    lease_ = new ::cockroach::roachpb::Lease;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NotLeaseHolderError.lease)
  return lease_;
}
inline ::cockroach::roachpb::Lease* NotLeaseHolderError::release_lease() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NotLeaseHolderError.lease)
  clear_has_lease();
  ::cockroach::roachpb::Lease* temp = lease_;
  lease_ = NULL;
  return temp;
}
inline void NotLeaseHolderError::set_allocated_lease(::cockroach::roachpb::Lease* lease) {
  delete lease_;
  lease_ = lease;
  if (lease) {
    set_has_lease();
  } else {
    clear_has_lease();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NotLeaseHolderError.lease)
}

inline bool NotLeaseHolderError::has_range_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotLeaseHolderError::set_has_range_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotLeaseHolderError::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotLeaseHolderError::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
inline ::google::protobuf::int64 NotLeaseHolderError::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaseHolderError.range_id)
  return range_id_;
}
inline void NotLeaseHolderError::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NotLeaseHolderError.range_id)
}

inline bool NotLeaseHolderError::has_custom_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotLeaseHolderError::set_has_custom_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotLeaseHolderError::clear_has_custom_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotLeaseHolderError::clear_custom_msg() {
  custom_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_msg();
}
inline const ::std::string& NotLeaseHolderError::custom_msg() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaseHolderError.custom_msg)
  return custom_msg_.GetNoArena();
}
inline void NotLeaseHolderError::set_custom_msg(const ::std::string& value) {
  set_has_custom_msg();
  custom_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NotLeaseHolderError.custom_msg)
}
#if LANG_CXX11
inline void NotLeaseHolderError::set_custom_msg(::std::string&& value) {
  set_has_custom_msg();
  custom_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.NotLeaseHolderError.custom_msg)
}
#endif
inline void NotLeaseHolderError::set_custom_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_msg();
  custom_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.NotLeaseHolderError.custom_msg)
}
inline void NotLeaseHolderError::set_custom_msg(const char* value, size_t size) {
  set_has_custom_msg();
  custom_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.NotLeaseHolderError.custom_msg)
}
inline ::std::string* NotLeaseHolderError::mutable_custom_msg() {
  set_has_custom_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NotLeaseHolderError.custom_msg)
  return custom_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotLeaseHolderError::release_custom_msg() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NotLeaseHolderError.custom_msg)
  clear_has_custom_msg();
  return custom_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotLeaseHolderError::set_allocated_custom_msg(::std::string* custom_msg) {
  if (custom_msg != NULL) {
    set_has_custom_msg();
  } else {
    clear_has_custom_msg();
  }
  custom_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NotLeaseHolderError.custom_msg)
}

// -------------------------------------------------------------------

// NodeUnavailableError

// -------------------------------------------------------------------

// RangeNotFoundError

inline bool RangeNotFoundError::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeNotFoundError::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeNotFoundError::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeNotFoundError::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
inline ::google::protobuf::int64 RangeNotFoundError::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeNotFoundError.range_id)
  return range_id_;
}
inline void RangeNotFoundError::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeNotFoundError.range_id)
}

// -------------------------------------------------------------------

// RangeKeyMismatchError

inline bool RangeKeyMismatchError::has_request_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeKeyMismatchError::set_has_request_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeKeyMismatchError::clear_has_request_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeKeyMismatchError::clear_request_start_key() {
  request_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_start_key();
}
inline const ::std::string& RangeKeyMismatchError::request_start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
  return request_start_key_.GetNoArena();
}
inline void RangeKeyMismatchError::set_request_start_key(const ::std::string& value) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
#if LANG_CXX11
inline void RangeKeyMismatchError::set_request_start_key(::std::string&& value) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
#endif
inline void RangeKeyMismatchError::set_request_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
inline void RangeKeyMismatchError::set_request_start_key(const void* value, size_t size) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
inline ::std::string* RangeKeyMismatchError::mutable_request_start_key() {
  set_has_request_start_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
  return request_start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeKeyMismatchError::release_request_start_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
  clear_has_request_start_key();
  return request_start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeKeyMismatchError::set_allocated_request_start_key(::std::string* request_start_key) {
  if (request_start_key != NULL) {
    set_has_request_start_key();
  } else {
    clear_has_request_start_key();
  }
  request_start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}

inline bool RangeKeyMismatchError::has_request_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeKeyMismatchError::set_has_request_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeKeyMismatchError::clear_has_request_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeKeyMismatchError::clear_request_end_key() {
  request_end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_end_key();
}
inline const ::std::string& RangeKeyMismatchError::request_end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
  return request_end_key_.GetNoArena();
}
inline void RangeKeyMismatchError::set_request_end_key(const ::std::string& value) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
#if LANG_CXX11
inline void RangeKeyMismatchError::set_request_end_key(::std::string&& value) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
#endif
inline void RangeKeyMismatchError::set_request_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
inline void RangeKeyMismatchError::set_request_end_key(const void* value, size_t size) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
inline ::std::string* RangeKeyMismatchError::mutable_request_end_key() {
  set_has_request_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
  return request_end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeKeyMismatchError::release_request_end_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
  clear_has_request_end_key();
  return request_end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeKeyMismatchError::set_allocated_request_end_key(::std::string* request_end_key) {
  if (request_end_key != NULL) {
    set_has_request_end_key();
  } else {
    clear_has_request_end_key();
  }
  request_end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}

// optional .cockroach.roachpb.RangeDescriptor mismatched_range = 3;
inline bool RangeKeyMismatchError::has_mismatched_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeKeyMismatchError::set_has_mismatched_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeKeyMismatchError::clear_has_mismatched_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeKeyMismatchError::clear_mismatched_range() {
  if (mismatched_range_ != NULL) mismatched_range_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_mismatched_range();
}
inline const ::cockroach::roachpb::RangeDescriptor& RangeKeyMismatchError::mismatched_range() const {
  const ::cockroach::roachpb::RangeDescriptor* p = mismatched_range_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.mismatched_range)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
inline ::cockroach::roachpb::RangeDescriptor* RangeKeyMismatchError::mutable_mismatched_range() {
  set_has_mismatched_range();
  if (mismatched_range_ == NULL) {
    mismatched_range_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.mismatched_range)
  return mismatched_range_;
}
inline ::cockroach::roachpb::RangeDescriptor* RangeKeyMismatchError::release_mismatched_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeKeyMismatchError.mismatched_range)
  clear_has_mismatched_range();
  ::cockroach::roachpb::RangeDescriptor* temp = mismatched_range_;
  mismatched_range_ = NULL;
  return temp;
}
inline void RangeKeyMismatchError::set_allocated_mismatched_range(::cockroach::roachpb::RangeDescriptor* mismatched_range) {
  delete mismatched_range_;
  mismatched_range_ = mismatched_range;
  if (mismatched_range) {
    set_has_mismatched_range();
  } else {
    clear_has_mismatched_range();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.mismatched_range)
}

// optional .cockroach.roachpb.RangeDescriptor suggested_range = 4;
inline bool RangeKeyMismatchError::has_suggested_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RangeKeyMismatchError::set_has_suggested_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RangeKeyMismatchError::clear_has_suggested_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RangeKeyMismatchError::clear_suggested_range() {
  if (suggested_range_ != NULL) suggested_range_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_suggested_range();
}
inline const ::cockroach::roachpb::RangeDescriptor& RangeKeyMismatchError::suggested_range() const {
  const ::cockroach::roachpb::RangeDescriptor* p = suggested_range_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.suggested_range)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeDescriptor*>(
      &::cockroach::roachpb::_RangeDescriptor_default_instance_);
}
inline ::cockroach::roachpb::RangeDescriptor* RangeKeyMismatchError::mutable_suggested_range() {
  set_has_suggested_range();
  if (suggested_range_ == NULL) {
    suggested_range_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.suggested_range)
  return suggested_range_;
}
inline ::cockroach::roachpb::RangeDescriptor* RangeKeyMismatchError::release_suggested_range() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeKeyMismatchError.suggested_range)
  clear_has_suggested_range();
  ::cockroach::roachpb::RangeDescriptor* temp = suggested_range_;
  suggested_range_ = NULL;
  return temp;
}
inline void RangeKeyMismatchError::set_allocated_suggested_range(::cockroach::roachpb::RangeDescriptor* suggested_range) {
  delete suggested_range_;
  suggested_range_ = suggested_range;
  if (suggested_range) {
    set_has_suggested_range();
  } else {
    clear_has_suggested_range();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.suggested_range)
}

// -------------------------------------------------------------------

// ReadWithinUncertaintyIntervalError

inline bool ReadWithinUncertaintyIntervalError::has_read_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_read_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_read_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWithinUncertaintyIntervalError::clear_read_timestamp() {
  if (read_timestamp_ != NULL) read_timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_read_timestamp();
}
inline const ::cockroach::util::hlc::Timestamp& ReadWithinUncertaintyIntervalError::read_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = read_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReadWithinUncertaintyIntervalError.read_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* ReadWithinUncertaintyIntervalError::mutable_read_timestamp() {
  set_has_read_timestamp();
  if (read_timestamp_ == NULL) {
    read_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReadWithinUncertaintyIntervalError.read_timestamp)
  return read_timestamp_;
}
inline ::cockroach::util::hlc::Timestamp* ReadWithinUncertaintyIntervalError::release_read_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReadWithinUncertaintyIntervalError.read_timestamp)
  clear_has_read_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = read_timestamp_;
  read_timestamp_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_read_timestamp(::cockroach::util::hlc::Timestamp* read_timestamp) {
  delete read_timestamp_;
  read_timestamp_ = read_timestamp;
  if (read_timestamp) {
    set_has_read_timestamp();
  } else {
    clear_has_read_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReadWithinUncertaintyIntervalError.read_timestamp)
}

inline bool ReadWithinUncertaintyIntervalError::has_existing_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_existing_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_existing_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadWithinUncertaintyIntervalError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_existing_timestamp();
}
inline const ::cockroach::util::hlc::Timestamp& ReadWithinUncertaintyIntervalError::existing_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = existing_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* ReadWithinUncertaintyIntervalError::mutable_existing_timestamp() {
  set_has_existing_timestamp();
  if (existing_timestamp_ == NULL) {
    existing_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_;
}
inline ::cockroach::util::hlc::Timestamp* ReadWithinUncertaintyIntervalError::release_existing_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
  clear_has_existing_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = existing_timestamp_;
  existing_timestamp_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_existing_timestamp(::cockroach::util::hlc::Timestamp* existing_timestamp) {
  delete existing_timestamp_;
  existing_timestamp_ = existing_timestamp;
  if (existing_timestamp) {
    set_has_existing_timestamp();
  } else {
    clear_has_existing_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
}

// -------------------------------------------------------------------

// TransactionAbortedError

// -------------------------------------------------------------------

// TransactionPushError

inline bool TransactionPushError::has_pushee_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionPushError::set_has_pushee_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionPushError::clear_has_pushee_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionPushError::clear_pushee_txn() {
  if (pushee_txn_ != NULL) pushee_txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_pushee_txn();
}
inline const ::cockroach::roachpb::Transaction& TransactionPushError::pushee_txn() const {
  const ::cockroach::roachpb::Transaction* p = pushee_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionPushError.pushee_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* TransactionPushError::mutable_pushee_txn() {
  set_has_pushee_txn();
  if (pushee_txn_ == NULL) {
    pushee_txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionPushError.pushee_txn)
  return pushee_txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionPushError::release_pushee_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.TransactionPushError.pushee_txn)
  clear_has_pushee_txn();
  ::cockroach::roachpb::Transaction* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
inline void TransactionPushError::set_allocated_pushee_txn(::cockroach::roachpb::Transaction* pushee_txn) {
  delete pushee_txn_;
  pushee_txn_ = pushee_txn;
  if (pushee_txn) {
    set_has_pushee_txn();
  } else {
    clear_has_pushee_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionPushError.pushee_txn)
}

// -------------------------------------------------------------------

// TransactionRetryError

inline bool TransactionRetryError::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionRetryError::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionRetryError::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionRetryError::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::cockroach::roachpb::TransactionRetryReason TransactionRetryError::reason() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionRetryError.reason)
  return static_cast< ::cockroach::roachpb::TransactionRetryReason >(reason_);
}
inline void TransactionRetryError::set_reason(::cockroach::roachpb::TransactionRetryReason value) {
  assert(::cockroach::roachpb::TransactionRetryReason_IsValid(value));
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TransactionRetryError.reason)
}

// -------------------------------------------------------------------

// TransactionReplayError

// -------------------------------------------------------------------

// TransactionStatusError

inline bool TransactionStatusError::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionStatusError::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionStatusError::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionStatusError::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& TransactionStatusError::msg() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionStatusError.msg)
  return msg_.GetNoArena();
}
inline void TransactionStatusError::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TransactionStatusError.msg)
}
#if LANG_CXX11
inline void TransactionStatusError::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.TransactionStatusError.msg)
}
#endif
inline void TransactionStatusError::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.TransactionStatusError.msg)
}
inline void TransactionStatusError::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.TransactionStatusError.msg)
}
inline ::std::string* TransactionStatusError::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionStatusError.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionStatusError::release_msg() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.TransactionStatusError.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionStatusError::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionStatusError.msg)
}

// -------------------------------------------------------------------

// WriteIntentError

inline int WriteIntentError::intents_size() const {
  return intents_.size();
}
inline void WriteIntentError::clear_intents() {
  intents_.Clear();
}
inline const ::cockroach::roachpb::Intent& WriteIntentError::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Get(index);
}
inline ::cockroach::roachpb::Intent* WriteIntentError::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Mutable(index);
}
inline ::cockroach::roachpb::Intent* WriteIntentError::add_intents() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >*
WriteIntentError::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.WriteIntentError.intents)
  return &intents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >&
WriteIntentError::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.WriteIntentError.intents)
  return intents_;
}

// -------------------------------------------------------------------

// WriteTooOldError

inline bool WriteTooOldError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteTooOldError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteTooOldError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteTooOldError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::util::hlc::Timestamp& WriteTooOldError::timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteTooOldError.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* WriteTooOldError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteTooOldError.timestamp)
  return timestamp_;
}
inline ::cockroach::util::hlc::Timestamp* WriteTooOldError::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.WriteTooOldError.timestamp)
  clear_has_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void WriteTooOldError::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteTooOldError.timestamp)
}

inline bool WriteTooOldError::has_actual_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteTooOldError::set_has_actual_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteTooOldError::clear_has_actual_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteTooOldError::clear_actual_timestamp() {
  if (actual_timestamp_ != NULL) actual_timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_actual_timestamp();
}
inline const ::cockroach::util::hlc::Timestamp& WriteTooOldError::actual_timestamp() const {
  const ::cockroach::util::hlc::Timestamp* p = actual_timestamp_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteTooOldError.actual_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* WriteTooOldError::mutable_actual_timestamp() {
  set_has_actual_timestamp();
  if (actual_timestamp_ == NULL) {
    actual_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteTooOldError.actual_timestamp)
  return actual_timestamp_;
}
inline ::cockroach::util::hlc::Timestamp* WriteTooOldError::release_actual_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.WriteTooOldError.actual_timestamp)
  clear_has_actual_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = actual_timestamp_;
  actual_timestamp_ = NULL;
  return temp;
}
inline void WriteTooOldError::set_allocated_actual_timestamp(::cockroach::util::hlc::Timestamp* actual_timestamp) {
  delete actual_timestamp_;
  actual_timestamp_ = actual_timestamp;
  if (actual_timestamp) {
    set_has_actual_timestamp();
  } else {
    clear_has_actual_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteTooOldError.actual_timestamp)
}

// -------------------------------------------------------------------

// OpRequiresTxnError

// -------------------------------------------------------------------

// ConditionFailedError

// optional .cockroach.roachpb.Value actual_value = 1;
inline bool ConditionFailedError::has_actual_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionFailedError::set_has_actual_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConditionFailedError::clear_has_actual_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConditionFailedError::clear_actual_value() {
  if (actual_value_ != NULL) actual_value_->::cockroach::roachpb::Value::Clear();
  clear_has_actual_value();
}
inline const ::cockroach::roachpb::Value& ConditionFailedError::actual_value() const {
  const ::cockroach::roachpb::Value* p = actual_value_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionFailedError.actual_value)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Value*>(
      &::cockroach::roachpb::_Value_default_instance_);
}
inline ::cockroach::roachpb::Value* ConditionFailedError::mutable_actual_value() {
  set_has_actual_value();
  if (actual_value_ == NULL) {
    actual_value_ = new ::cockroach::roachpb::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ConditionFailedError.actual_value)
  return actual_value_;
}
inline ::cockroach::roachpb::Value* ConditionFailedError::release_actual_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ConditionFailedError.actual_value)
  clear_has_actual_value();
  ::cockroach::roachpb::Value* temp = actual_value_;
  actual_value_ = NULL;
  return temp;
}
inline void ConditionFailedError::set_allocated_actual_value(::cockroach::roachpb::Value* actual_value) {
  delete actual_value_;
  actual_value_ = actual_value;
  if (actual_value) {
    set_has_actual_value();
  } else {
    clear_has_actual_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ConditionFailedError.actual_value)
}

// -------------------------------------------------------------------

// LeaseRejectedError

inline bool LeaseRejectedError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaseRejectedError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaseRejectedError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaseRejectedError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& LeaseRejectedError::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.message)
  return message_.GetNoArena();
}
inline void LeaseRejectedError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.LeaseRejectedError.message)
}
#if LANG_CXX11
inline void LeaseRejectedError::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.LeaseRejectedError.message)
}
#endif
inline void LeaseRejectedError::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.LeaseRejectedError.message)
}
inline void LeaseRejectedError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.LeaseRejectedError.message)
}
inline ::std::string* LeaseRejectedError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaseRejectedError::release_message() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.LeaseRejectedError.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaseRejectedError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.message)
}

inline bool LeaseRejectedError::has_requested() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaseRejectedError::set_has_requested() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaseRejectedError::clear_has_requested() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaseRejectedError::clear_requested() {
  if (requested_ != NULL) requested_->::cockroach::roachpb::Lease::Clear();
  clear_has_requested();
}
inline const ::cockroach::roachpb::Lease& LeaseRejectedError::requested() const {
  const ::cockroach::roachpb::Lease* p = requested_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.requested)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* LeaseRejectedError::mutable_requested() {
  set_has_requested();
  if (requested_ == NULL) {
    requested_ = new ::cockroach::roachpb::Lease;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.requested)
  return requested_;
}
inline ::cockroach::roachpb::Lease* LeaseRejectedError::release_requested() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.LeaseRejectedError.requested)
  clear_has_requested();
  ::cockroach::roachpb::Lease* temp = requested_;
  requested_ = NULL;
  return temp;
}
inline void LeaseRejectedError::set_allocated_requested(::cockroach::roachpb::Lease* requested) {
  delete requested_;
  requested_ = requested;
  if (requested) {
    set_has_requested();
  } else {
    clear_has_requested();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.requested)
}

inline bool LeaseRejectedError::has_existing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeaseRejectedError::set_has_existing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeaseRejectedError::clear_has_existing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeaseRejectedError::clear_existing() {
  if (existing_ != NULL) existing_->::cockroach::roachpb::Lease::Clear();
  clear_has_existing();
}
inline const ::cockroach::roachpb::Lease& LeaseRejectedError::existing() const {
  const ::cockroach::roachpb::Lease* p = existing_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.existing)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Lease*>(
      &::cockroach::roachpb::_Lease_default_instance_);
}
inline ::cockroach::roachpb::Lease* LeaseRejectedError::mutable_existing() {
  set_has_existing();
  if (existing_ == NULL) {
    existing_ = new ::cockroach::roachpb::Lease;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.existing)
  return existing_;
}
inline ::cockroach::roachpb::Lease* LeaseRejectedError::release_existing() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.LeaseRejectedError.existing)
  clear_has_existing();
  ::cockroach::roachpb::Lease* temp = existing_;
  existing_ = NULL;
  return temp;
}
inline void LeaseRejectedError::set_allocated_existing(::cockroach::roachpb::Lease* existing) {
  delete existing_;
  existing_ = existing;
  if (existing) {
    set_has_existing();
  } else {
    clear_has_existing();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.existing)
}

// -------------------------------------------------------------------

// SendError

inline bool SendError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& SendError::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SendError.message)
  return message_.GetNoArena();
}
inline void SendError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SendError.message)
}
#if LANG_CXX11
inline void SendError::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.SendError.message)
}
#endif
inline void SendError::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.SendError.message)
}
inline void SendError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.SendError.message)
}
inline ::std::string* SendError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SendError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendError::release_message() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SendError.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SendError.message)
}

// -------------------------------------------------------------------

// AmbiguousResultError

inline bool AmbiguousResultError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AmbiguousResultError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AmbiguousResultError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AmbiguousResultError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& AmbiguousResultError::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AmbiguousResultError.message)
  return message_.GetNoArena();
}
inline void AmbiguousResultError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AmbiguousResultError.message)
}
#if LANG_CXX11
inline void AmbiguousResultError::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.AmbiguousResultError.message)
}
#endif
inline void AmbiguousResultError::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.AmbiguousResultError.message)
}
inline void AmbiguousResultError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.AmbiguousResultError.message)
}
inline ::std::string* AmbiguousResultError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AmbiguousResultError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AmbiguousResultError::release_message() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AmbiguousResultError.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AmbiguousResultError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AmbiguousResultError.message)
}

// optional .cockroach.roachpb.Error wrapped_err = 2;
inline bool AmbiguousResultError::has_wrapped_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AmbiguousResultError::set_has_wrapped_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AmbiguousResultError::clear_has_wrapped_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AmbiguousResultError::clear_wrapped_err() {
  if (wrapped_err_ != NULL) wrapped_err_->::cockroach::roachpb::Error::Clear();
  clear_has_wrapped_err();
}
inline const ::cockroach::roachpb::Error& AmbiguousResultError::wrapped_err() const {
  const ::cockroach::roachpb::Error* p = wrapped_err_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AmbiguousResultError.wrapped_err)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Error*>(
      &::cockroach::roachpb::_Error_default_instance_);
}
inline ::cockroach::roachpb::Error* AmbiguousResultError::mutable_wrapped_err() {
  set_has_wrapped_err();
  if (wrapped_err_ == NULL) {
    wrapped_err_ = new ::cockroach::roachpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AmbiguousResultError.wrapped_err)
  return wrapped_err_;
}
inline ::cockroach::roachpb::Error* AmbiguousResultError::release_wrapped_err() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AmbiguousResultError.wrapped_err)
  clear_has_wrapped_err();
  ::cockroach::roachpb::Error* temp = wrapped_err_;
  wrapped_err_ = NULL;
  return temp;
}
inline void AmbiguousResultError::set_allocated_wrapped_err(::cockroach::roachpb::Error* wrapped_err) {
  delete wrapped_err_;
  wrapped_err_ = wrapped_err;
  if (wrapped_err) {
    set_has_wrapped_err();
  } else {
    clear_has_wrapped_err();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AmbiguousResultError.wrapped_err)
}

// -------------------------------------------------------------------

// RaftGroupDeletedError

// -------------------------------------------------------------------

// ReplicaCorruptionError

inline bool ReplicaCorruptionError::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicaCorruptionError::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicaCorruptionError::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicaCorruptionError::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& ReplicaCorruptionError::error_msg() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaCorruptionError.error_msg)
  return error_msg_.GetNoArena();
}
inline void ReplicaCorruptionError::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
#if LANG_CXX11
inline void ReplicaCorruptionError::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
#endif
inline void ReplicaCorruptionError::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
inline void ReplicaCorruptionError::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
inline ::std::string* ReplicaCorruptionError::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReplicaCorruptionError.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReplicaCorruptionError::release_error_msg() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReplicaCorruptionError.error_msg)
  clear_has_error_msg();
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReplicaCorruptionError::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}

inline bool ReplicaCorruptionError::has_processed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicaCorruptionError::set_has_processed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicaCorruptionError::clear_has_processed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicaCorruptionError::clear_processed() {
  processed_ = false;
  clear_has_processed();
}
inline bool ReplicaCorruptionError::processed() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaCorruptionError.processed)
  return processed_;
}
inline void ReplicaCorruptionError::set_processed(bool value) {
  set_has_processed();
  processed_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaCorruptionError.processed)
}

// -------------------------------------------------------------------

// ReplicaTooOldError

inline bool ReplicaTooOldError::has_replica_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicaTooOldError::set_has_replica_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicaTooOldError::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicaTooOldError::clear_replica_id() {
  replica_id_ = 0;
  clear_has_replica_id();
}
inline ::google::protobuf::int32 ReplicaTooOldError::replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaTooOldError.replica_id)
  return replica_id_;
}
inline void ReplicaTooOldError::set_replica_id(::google::protobuf::int32 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaTooOldError.replica_id)
}

// -------------------------------------------------------------------

// StoreNotFoundError

inline bool StoreNotFoundError::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreNotFoundError::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreNotFoundError::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreNotFoundError::clear_store_id() {
  store_id_ = GOOGLE_LONGLONG(0);
  clear_has_store_id();
}
inline ::google::protobuf::int64 StoreNotFoundError::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreNotFoundError.store_id)
  return store_id_;
}
inline void StoreNotFoundError::set_store_id(::google::protobuf::int64 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreNotFoundError.store_id)
}

// -------------------------------------------------------------------

// UnhandledRetryableError

inline bool UnhandledRetryableError::has_perr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnhandledRetryableError::set_has_perr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnhandledRetryableError::clear_has_perr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnhandledRetryableError::clear_perr() {
  if (perr_ != NULL) perr_->::cockroach::roachpb::Error::Clear();
  clear_has_perr();
}
inline const ::cockroach::roachpb::Error& UnhandledRetryableError::perr() const {
  const ::cockroach::roachpb::Error* p = perr_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.UnhandledRetryableError.pErr)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Error*>(
      &::cockroach::roachpb::_Error_default_instance_);
}
inline ::cockroach::roachpb::Error* UnhandledRetryableError::mutable_perr() {
  set_has_perr();
  if (perr_ == NULL) {
    perr_ = new ::cockroach::roachpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.UnhandledRetryableError.pErr)
  return perr_;
}
inline ::cockroach::roachpb::Error* UnhandledRetryableError::release_perr() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.UnhandledRetryableError.pErr)
  clear_has_perr();
  ::cockroach::roachpb::Error* temp = perr_;
  perr_ = NULL;
  return temp;
}
inline void UnhandledRetryableError::set_allocated_perr(::cockroach::roachpb::Error* perr) {
  delete perr_;
  perr_ = perr;
  if (perr) {
    set_has_perr();
  } else {
    clear_has_perr();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.UnhandledRetryableError.pErr)
}

// -------------------------------------------------------------------

// HandledRetryableTxnError

inline bool HandledRetryableTxnError::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandledRetryableTxnError::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandledRetryableTxnError::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandledRetryableTxnError::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& HandledRetryableTxnError::msg() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.HandledRetryableTxnError.msg)
  return msg_.GetNoArena();
}
inline void HandledRetryableTxnError::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.HandledRetryableTxnError.msg)
}
#if LANG_CXX11
inline void HandledRetryableTxnError::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.HandledRetryableTxnError.msg)
}
#endif
inline void HandledRetryableTxnError::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.HandledRetryableTxnError.msg)
}
inline void HandledRetryableTxnError::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.HandledRetryableTxnError.msg)
}
inline ::std::string* HandledRetryableTxnError::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.HandledRetryableTxnError.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandledRetryableTxnError::release_msg() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.HandledRetryableTxnError.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandledRetryableTxnError::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.HandledRetryableTxnError.msg)
}

inline bool HandledRetryableTxnError::has_txn_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandledRetryableTxnError::set_has_txn_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HandledRetryableTxnError::clear_has_txn_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HandledRetryableTxnError::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txn_id();
}
inline const ::std::string& HandledRetryableTxnError::txn_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.HandledRetryableTxnError.txn_id)
  return txn_id_.GetNoArena();
}
inline void HandledRetryableTxnError::set_txn_id(const ::std::string& value) {
  set_has_txn_id();
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.HandledRetryableTxnError.txn_id)
}
#if LANG_CXX11
inline void HandledRetryableTxnError::set_txn_id(::std::string&& value) {
  set_has_txn_id();
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.HandledRetryableTxnError.txn_id)
}
#endif
inline void HandledRetryableTxnError::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txn_id();
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.HandledRetryableTxnError.txn_id)
}
inline void HandledRetryableTxnError::set_txn_id(const void* value, size_t size) {
  set_has_txn_id();
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.HandledRetryableTxnError.txn_id)
}
inline ::std::string* HandledRetryableTxnError::mutable_txn_id() {
  set_has_txn_id();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.HandledRetryableTxnError.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandledRetryableTxnError::release_txn_id() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.HandledRetryableTxnError.txn_id)
  clear_has_txn_id();
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandledRetryableTxnError::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    set_has_txn_id();
  } else {
    clear_has_txn_id();
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.HandledRetryableTxnError.txn_id)
}

inline bool HandledRetryableTxnError::has_transaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandledRetryableTxnError::set_has_transaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandledRetryableTxnError::clear_has_transaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandledRetryableTxnError::clear_transaction() {
  if (transaction_ != NULL) transaction_->::cockroach::roachpb::Transaction::Clear();
  clear_has_transaction();
}
inline const ::cockroach::roachpb::Transaction& HandledRetryableTxnError::transaction() const {
  const ::cockroach::roachpb::Transaction* p = transaction_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.HandledRetryableTxnError.transaction)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* HandledRetryableTxnError::mutable_transaction() {
  set_has_transaction();
  if (transaction_ == NULL) {
    transaction_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.HandledRetryableTxnError.transaction)
  return transaction_;
}
inline ::cockroach::roachpb::Transaction* HandledRetryableTxnError::release_transaction() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.HandledRetryableTxnError.transaction)
  clear_has_transaction();
  ::cockroach::roachpb::Transaction* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
inline void HandledRetryableTxnError::set_allocated_transaction(::cockroach::roachpb::Transaction* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    set_has_transaction();
  } else {
    clear_has_transaction();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.HandledRetryableTxnError.transaction)
}

// -------------------------------------------------------------------

// UntrackedTxnError

// -------------------------------------------------------------------

// TxnPrevAttemptError

// -------------------------------------------------------------------

// ErrorDetail

// optional .cockroach.roachpb.NotLeaseHolderError not_lease_holder = 1;
inline bool ErrorDetail::has_not_lease_holder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorDetail::set_has_not_lease_holder() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorDetail::clear_has_not_lease_holder() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorDetail::clear_not_lease_holder() {
  if (not_lease_holder_ != NULL) not_lease_holder_->::cockroach::roachpb::NotLeaseHolderError::Clear();
  clear_has_not_lease_holder();
}
inline const ::cockroach::roachpb::NotLeaseHolderError& ErrorDetail::not_lease_holder() const {
  const ::cockroach::roachpb::NotLeaseHolderError* p = not_lease_holder_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.not_lease_holder)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::NotLeaseHolderError*>(
      &::cockroach::roachpb::_NotLeaseHolderError_default_instance_);
}
inline ::cockroach::roachpb::NotLeaseHolderError* ErrorDetail::mutable_not_lease_holder() {
  set_has_not_lease_holder();
  if (not_lease_holder_ == NULL) {
    not_lease_holder_ = new ::cockroach::roachpb::NotLeaseHolderError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.not_lease_holder)
  return not_lease_holder_;
}
inline ::cockroach::roachpb::NotLeaseHolderError* ErrorDetail::release_not_lease_holder() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.not_lease_holder)
  clear_has_not_lease_holder();
  ::cockroach::roachpb::NotLeaseHolderError* temp = not_lease_holder_;
  not_lease_holder_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_not_lease_holder(::cockroach::roachpb::NotLeaseHolderError* not_lease_holder) {
  delete not_lease_holder_;
  not_lease_holder_ = not_lease_holder;
  if (not_lease_holder) {
    set_has_not_lease_holder();
  } else {
    clear_has_not_lease_holder();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.not_lease_holder)
}

// optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
inline bool ErrorDetail::has_range_not_found() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorDetail::set_has_range_not_found() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorDetail::clear_has_range_not_found() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorDetail::clear_range_not_found() {
  if (range_not_found_ != NULL) range_not_found_->::cockroach::roachpb::RangeNotFoundError::Clear();
  clear_has_range_not_found();
}
inline const ::cockroach::roachpb::RangeNotFoundError& ErrorDetail::range_not_found() const {
  const ::cockroach::roachpb::RangeNotFoundError* p = range_not_found_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.range_not_found)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeNotFoundError*>(
      &::cockroach::roachpb::_RangeNotFoundError_default_instance_);
}
inline ::cockroach::roachpb::RangeNotFoundError* ErrorDetail::mutable_range_not_found() {
  set_has_range_not_found();
  if (range_not_found_ == NULL) {
    range_not_found_ = new ::cockroach::roachpb::RangeNotFoundError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.range_not_found)
  return range_not_found_;
}
inline ::cockroach::roachpb::RangeNotFoundError* ErrorDetail::release_range_not_found() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.range_not_found)
  clear_has_range_not_found();
  ::cockroach::roachpb::RangeNotFoundError* temp = range_not_found_;
  range_not_found_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_range_not_found(::cockroach::roachpb::RangeNotFoundError* range_not_found) {
  delete range_not_found_;
  range_not_found_ = range_not_found;
  if (range_not_found) {
    set_has_range_not_found();
  } else {
    clear_has_range_not_found();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.range_not_found)
}

// optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
inline bool ErrorDetail::has_range_key_mismatch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ErrorDetail::set_has_range_key_mismatch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ErrorDetail::clear_has_range_key_mismatch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ErrorDetail::clear_range_key_mismatch() {
  if (range_key_mismatch_ != NULL) range_key_mismatch_->::cockroach::roachpb::RangeKeyMismatchError::Clear();
  clear_has_range_key_mismatch();
}
inline const ::cockroach::roachpb::RangeKeyMismatchError& ErrorDetail::range_key_mismatch() const {
  const ::cockroach::roachpb::RangeKeyMismatchError* p = range_key_mismatch_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.range_key_mismatch)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RangeKeyMismatchError*>(
      &::cockroach::roachpb::_RangeKeyMismatchError_default_instance_);
}
inline ::cockroach::roachpb::RangeKeyMismatchError* ErrorDetail::mutable_range_key_mismatch() {
  set_has_range_key_mismatch();
  if (range_key_mismatch_ == NULL) {
    range_key_mismatch_ = new ::cockroach::roachpb::RangeKeyMismatchError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.range_key_mismatch)
  return range_key_mismatch_;
}
inline ::cockroach::roachpb::RangeKeyMismatchError* ErrorDetail::release_range_key_mismatch() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.range_key_mismatch)
  clear_has_range_key_mismatch();
  ::cockroach::roachpb::RangeKeyMismatchError* temp = range_key_mismatch_;
  range_key_mismatch_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_range_key_mismatch(::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch) {
  delete range_key_mismatch_;
  range_key_mismatch_ = range_key_mismatch;
  if (range_key_mismatch) {
    set_has_range_key_mismatch();
  } else {
    clear_has_range_key_mismatch();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.range_key_mismatch)
}

// optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
inline bool ErrorDetail::has_read_within_uncertainty_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ErrorDetail::set_has_read_within_uncertainty_interval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ErrorDetail::clear_has_read_within_uncertainty_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ErrorDetail::clear_read_within_uncertainty_interval() {
  if (read_within_uncertainty_interval_ != NULL) read_within_uncertainty_interval_->::cockroach::roachpb::ReadWithinUncertaintyIntervalError::Clear();
  clear_has_read_within_uncertainty_interval();
}
inline const ::cockroach::roachpb::ReadWithinUncertaintyIntervalError& ErrorDetail::read_within_uncertainty_interval() const {
  const ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* p = read_within_uncertainty_interval_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReadWithinUncertaintyIntervalError*>(
      &::cockroach::roachpb::_ReadWithinUncertaintyIntervalError_default_instance_);
}
inline ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* ErrorDetail::mutable_read_within_uncertainty_interval() {
  set_has_read_within_uncertainty_interval();
  if (read_within_uncertainty_interval_ == NULL) {
    read_within_uncertainty_interval_ = new ::cockroach::roachpb::ReadWithinUncertaintyIntervalError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
  return read_within_uncertainty_interval_;
}
inline ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* ErrorDetail::release_read_within_uncertainty_interval() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
  clear_has_read_within_uncertainty_interval();
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* temp = read_within_uncertainty_interval_;
  read_within_uncertainty_interval_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_read_within_uncertainty_interval(::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval) {
  delete read_within_uncertainty_interval_;
  read_within_uncertainty_interval_ = read_within_uncertainty_interval;
  if (read_within_uncertainty_interval) {
    set_has_read_within_uncertainty_interval();
  } else {
    clear_has_read_within_uncertainty_interval();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
}

// optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
inline bool ErrorDetail::has_transaction_aborted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ErrorDetail::set_has_transaction_aborted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ErrorDetail::clear_has_transaction_aborted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ErrorDetail::clear_transaction_aborted() {
  if (transaction_aborted_ != NULL) transaction_aborted_->::cockroach::roachpb::TransactionAbortedError::Clear();
  clear_has_transaction_aborted();
}
inline const ::cockroach::roachpb::TransactionAbortedError& ErrorDetail::transaction_aborted() const {
  const ::cockroach::roachpb::TransactionAbortedError* p = transaction_aborted_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_aborted)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::TransactionAbortedError*>(
      &::cockroach::roachpb::_TransactionAbortedError_default_instance_);
}
inline ::cockroach::roachpb::TransactionAbortedError* ErrorDetail::mutable_transaction_aborted() {
  set_has_transaction_aborted();
  if (transaction_aborted_ == NULL) {
    transaction_aborted_ = new ::cockroach::roachpb::TransactionAbortedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_aborted)
  return transaction_aborted_;
}
inline ::cockroach::roachpb::TransactionAbortedError* ErrorDetail::release_transaction_aborted() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.transaction_aborted)
  clear_has_transaction_aborted();
  ::cockroach::roachpb::TransactionAbortedError* temp = transaction_aborted_;
  transaction_aborted_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_aborted(::cockroach::roachpb::TransactionAbortedError* transaction_aborted) {
  delete transaction_aborted_;
  transaction_aborted_ = transaction_aborted;
  if (transaction_aborted) {
    set_has_transaction_aborted();
  } else {
    clear_has_transaction_aborted();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_aborted)
}

// optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
inline bool ErrorDetail::has_transaction_push() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ErrorDetail::set_has_transaction_push() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ErrorDetail::clear_has_transaction_push() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ErrorDetail::clear_transaction_push() {
  if (transaction_push_ != NULL) transaction_push_->::cockroach::roachpb::TransactionPushError::Clear();
  clear_has_transaction_push();
}
inline const ::cockroach::roachpb::TransactionPushError& ErrorDetail::transaction_push() const {
  const ::cockroach::roachpb::TransactionPushError* p = transaction_push_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_push)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::TransactionPushError*>(
      &::cockroach::roachpb::_TransactionPushError_default_instance_);
}
inline ::cockroach::roachpb::TransactionPushError* ErrorDetail::mutable_transaction_push() {
  set_has_transaction_push();
  if (transaction_push_ == NULL) {
    transaction_push_ = new ::cockroach::roachpb::TransactionPushError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_push)
  return transaction_push_;
}
inline ::cockroach::roachpb::TransactionPushError* ErrorDetail::release_transaction_push() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.transaction_push)
  clear_has_transaction_push();
  ::cockroach::roachpb::TransactionPushError* temp = transaction_push_;
  transaction_push_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_push(::cockroach::roachpb::TransactionPushError* transaction_push) {
  delete transaction_push_;
  transaction_push_ = transaction_push;
  if (transaction_push) {
    set_has_transaction_push();
  } else {
    clear_has_transaction_push();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_push)
}

// optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
inline bool ErrorDetail::has_transaction_retry() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ErrorDetail::set_has_transaction_retry() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ErrorDetail::clear_has_transaction_retry() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ErrorDetail::clear_transaction_retry() {
  if (transaction_retry_ != NULL) transaction_retry_->::cockroach::roachpb::TransactionRetryError::Clear();
  clear_has_transaction_retry();
}
inline const ::cockroach::roachpb::TransactionRetryError& ErrorDetail::transaction_retry() const {
  const ::cockroach::roachpb::TransactionRetryError* p = transaction_retry_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_retry)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::TransactionRetryError*>(
      &::cockroach::roachpb::_TransactionRetryError_default_instance_);
}
inline ::cockroach::roachpb::TransactionRetryError* ErrorDetail::mutable_transaction_retry() {
  set_has_transaction_retry();
  if (transaction_retry_ == NULL) {
    transaction_retry_ = new ::cockroach::roachpb::TransactionRetryError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_retry)
  return transaction_retry_;
}
inline ::cockroach::roachpb::TransactionRetryError* ErrorDetail::release_transaction_retry() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.transaction_retry)
  clear_has_transaction_retry();
  ::cockroach::roachpb::TransactionRetryError* temp = transaction_retry_;
  transaction_retry_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_retry(::cockroach::roachpb::TransactionRetryError* transaction_retry) {
  delete transaction_retry_;
  transaction_retry_ = transaction_retry;
  if (transaction_retry) {
    set_has_transaction_retry();
  } else {
    clear_has_transaction_retry();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_retry)
}

// optional .cockroach.roachpb.TransactionReplayError transaction_replay = 22;
inline bool ErrorDetail::has_transaction_replay() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ErrorDetail::set_has_transaction_replay() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ErrorDetail::clear_has_transaction_replay() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ErrorDetail::clear_transaction_replay() {
  if (transaction_replay_ != NULL) transaction_replay_->::cockroach::roachpb::TransactionReplayError::Clear();
  clear_has_transaction_replay();
}
inline const ::cockroach::roachpb::TransactionReplayError& ErrorDetail::transaction_replay() const {
  const ::cockroach::roachpb::TransactionReplayError* p = transaction_replay_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_replay)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::TransactionReplayError*>(
      &::cockroach::roachpb::_TransactionReplayError_default_instance_);
}
inline ::cockroach::roachpb::TransactionReplayError* ErrorDetail::mutable_transaction_replay() {
  set_has_transaction_replay();
  if (transaction_replay_ == NULL) {
    transaction_replay_ = new ::cockroach::roachpb::TransactionReplayError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_replay)
  return transaction_replay_;
}
inline ::cockroach::roachpb::TransactionReplayError* ErrorDetail::release_transaction_replay() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.transaction_replay)
  clear_has_transaction_replay();
  ::cockroach::roachpb::TransactionReplayError* temp = transaction_replay_;
  transaction_replay_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_replay(::cockroach::roachpb::TransactionReplayError* transaction_replay) {
  delete transaction_replay_;
  transaction_replay_ = transaction_replay;
  if (transaction_replay) {
    set_has_transaction_replay();
  } else {
    clear_has_transaction_replay();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_replay)
}

// optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
inline bool ErrorDetail::has_transaction_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ErrorDetail::set_has_transaction_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ErrorDetail::clear_has_transaction_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ErrorDetail::clear_transaction_status() {
  if (transaction_status_ != NULL) transaction_status_->::cockroach::roachpb::TransactionStatusError::Clear();
  clear_has_transaction_status();
}
inline const ::cockroach::roachpb::TransactionStatusError& ErrorDetail::transaction_status() const {
  const ::cockroach::roachpb::TransactionStatusError* p = transaction_status_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_status)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::TransactionStatusError*>(
      &::cockroach::roachpb::_TransactionStatusError_default_instance_);
}
inline ::cockroach::roachpb::TransactionStatusError* ErrorDetail::mutable_transaction_status() {
  set_has_transaction_status();
  if (transaction_status_ == NULL) {
    transaction_status_ = new ::cockroach::roachpb::TransactionStatusError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_status)
  return transaction_status_;
}
inline ::cockroach::roachpb::TransactionStatusError* ErrorDetail::release_transaction_status() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.transaction_status)
  clear_has_transaction_status();
  ::cockroach::roachpb::TransactionStatusError* temp = transaction_status_;
  transaction_status_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_status(::cockroach::roachpb::TransactionStatusError* transaction_status) {
  delete transaction_status_;
  transaction_status_ = transaction_status;
  if (transaction_status) {
    set_has_transaction_status();
  } else {
    clear_has_transaction_status();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_status)
}

// optional .cockroach.roachpb.WriteIntentError write_intent = 9;
inline bool ErrorDetail::has_write_intent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ErrorDetail::set_has_write_intent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ErrorDetail::clear_has_write_intent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ErrorDetail::clear_write_intent() {
  if (write_intent_ != NULL) write_intent_->::cockroach::roachpb::WriteIntentError::Clear();
  clear_has_write_intent();
}
inline const ::cockroach::roachpb::WriteIntentError& ErrorDetail::write_intent() const {
  const ::cockroach::roachpb::WriteIntentError* p = write_intent_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.write_intent)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::WriteIntentError*>(
      &::cockroach::roachpb::_WriteIntentError_default_instance_);
}
inline ::cockroach::roachpb::WriteIntentError* ErrorDetail::mutable_write_intent() {
  set_has_write_intent();
  if (write_intent_ == NULL) {
    write_intent_ = new ::cockroach::roachpb::WriteIntentError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.write_intent)
  return write_intent_;
}
inline ::cockroach::roachpb::WriteIntentError* ErrorDetail::release_write_intent() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.write_intent)
  clear_has_write_intent();
  ::cockroach::roachpb::WriteIntentError* temp = write_intent_;
  write_intent_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_write_intent(::cockroach::roachpb::WriteIntentError* write_intent) {
  delete write_intent_;
  write_intent_ = write_intent;
  if (write_intent) {
    set_has_write_intent();
  } else {
    clear_has_write_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.write_intent)
}

// optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
inline bool ErrorDetail::has_write_too_old() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ErrorDetail::set_has_write_too_old() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ErrorDetail::clear_has_write_too_old() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ErrorDetail::clear_write_too_old() {
  if (write_too_old_ != NULL) write_too_old_->::cockroach::roachpb::WriteTooOldError::Clear();
  clear_has_write_too_old();
}
inline const ::cockroach::roachpb::WriteTooOldError& ErrorDetail::write_too_old() const {
  const ::cockroach::roachpb::WriteTooOldError* p = write_too_old_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.write_too_old)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::WriteTooOldError*>(
      &::cockroach::roachpb::_WriteTooOldError_default_instance_);
}
inline ::cockroach::roachpb::WriteTooOldError* ErrorDetail::mutable_write_too_old() {
  set_has_write_too_old();
  if (write_too_old_ == NULL) {
    write_too_old_ = new ::cockroach::roachpb::WriteTooOldError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.write_too_old)
  return write_too_old_;
}
inline ::cockroach::roachpb::WriteTooOldError* ErrorDetail::release_write_too_old() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.write_too_old)
  clear_has_write_too_old();
  ::cockroach::roachpb::WriteTooOldError* temp = write_too_old_;
  write_too_old_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_write_too_old(::cockroach::roachpb::WriteTooOldError* write_too_old) {
  delete write_too_old_;
  write_too_old_ = write_too_old;
  if (write_too_old) {
    set_has_write_too_old();
  } else {
    clear_has_write_too_old();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.write_too_old)
}

// optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
inline bool ErrorDetail::has_op_requires_txn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ErrorDetail::set_has_op_requires_txn() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ErrorDetail::clear_has_op_requires_txn() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ErrorDetail::clear_op_requires_txn() {
  if (op_requires_txn_ != NULL) op_requires_txn_->::cockroach::roachpb::OpRequiresTxnError::Clear();
  clear_has_op_requires_txn();
}
inline const ::cockroach::roachpb::OpRequiresTxnError& ErrorDetail::op_requires_txn() const {
  const ::cockroach::roachpb::OpRequiresTxnError* p = op_requires_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.op_requires_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::OpRequiresTxnError*>(
      &::cockroach::roachpb::_OpRequiresTxnError_default_instance_);
}
inline ::cockroach::roachpb::OpRequiresTxnError* ErrorDetail::mutable_op_requires_txn() {
  set_has_op_requires_txn();
  if (op_requires_txn_ == NULL) {
    op_requires_txn_ = new ::cockroach::roachpb::OpRequiresTxnError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.op_requires_txn)
  return op_requires_txn_;
}
inline ::cockroach::roachpb::OpRequiresTxnError* ErrorDetail::release_op_requires_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.op_requires_txn)
  clear_has_op_requires_txn();
  ::cockroach::roachpb::OpRequiresTxnError* temp = op_requires_txn_;
  op_requires_txn_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_op_requires_txn(::cockroach::roachpb::OpRequiresTxnError* op_requires_txn) {
  delete op_requires_txn_;
  op_requires_txn_ = op_requires_txn;
  if (op_requires_txn) {
    set_has_op_requires_txn();
  } else {
    clear_has_op_requires_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.op_requires_txn)
}

// optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
inline bool ErrorDetail::has_condition_failed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ErrorDetail::set_has_condition_failed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ErrorDetail::clear_has_condition_failed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ErrorDetail::clear_condition_failed() {
  if (condition_failed_ != NULL) condition_failed_->::cockroach::roachpb::ConditionFailedError::Clear();
  clear_has_condition_failed();
}
inline const ::cockroach::roachpb::ConditionFailedError& ErrorDetail::condition_failed() const {
  const ::cockroach::roachpb::ConditionFailedError* p = condition_failed_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.condition_failed)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ConditionFailedError*>(
      &::cockroach::roachpb::_ConditionFailedError_default_instance_);
}
inline ::cockroach::roachpb::ConditionFailedError* ErrorDetail::mutable_condition_failed() {
  set_has_condition_failed();
  if (condition_failed_ == NULL) {
    condition_failed_ = new ::cockroach::roachpb::ConditionFailedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.condition_failed)
  return condition_failed_;
}
inline ::cockroach::roachpb::ConditionFailedError* ErrorDetail::release_condition_failed() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.condition_failed)
  clear_has_condition_failed();
  ::cockroach::roachpb::ConditionFailedError* temp = condition_failed_;
  condition_failed_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_condition_failed(::cockroach::roachpb::ConditionFailedError* condition_failed) {
  delete condition_failed_;
  condition_failed_ = condition_failed;
  if (condition_failed) {
    set_has_condition_failed();
  } else {
    clear_has_condition_failed();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.condition_failed)
}

// optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
inline bool ErrorDetail::has_lease_rejected() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ErrorDetail::set_has_lease_rejected() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ErrorDetail::clear_has_lease_rejected() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ErrorDetail::clear_lease_rejected() {
  if (lease_rejected_ != NULL) lease_rejected_->::cockroach::roachpb::LeaseRejectedError::Clear();
  clear_has_lease_rejected();
}
inline const ::cockroach::roachpb::LeaseRejectedError& ErrorDetail::lease_rejected() const {
  const ::cockroach::roachpb::LeaseRejectedError* p = lease_rejected_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.lease_rejected)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::LeaseRejectedError*>(
      &::cockroach::roachpb::_LeaseRejectedError_default_instance_);
}
inline ::cockroach::roachpb::LeaseRejectedError* ErrorDetail::mutable_lease_rejected() {
  set_has_lease_rejected();
  if (lease_rejected_ == NULL) {
    lease_rejected_ = new ::cockroach::roachpb::LeaseRejectedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.lease_rejected)
  return lease_rejected_;
}
inline ::cockroach::roachpb::LeaseRejectedError* ErrorDetail::release_lease_rejected() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.lease_rejected)
  clear_has_lease_rejected();
  ::cockroach::roachpb::LeaseRejectedError* temp = lease_rejected_;
  lease_rejected_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_lease_rejected(::cockroach::roachpb::LeaseRejectedError* lease_rejected) {
  delete lease_rejected_;
  lease_rejected_ = lease_rejected;
  if (lease_rejected) {
    set_has_lease_rejected();
  } else {
    clear_has_lease_rejected();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.lease_rejected)
}

// optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
inline bool ErrorDetail::has_node_unavailable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ErrorDetail::set_has_node_unavailable() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ErrorDetail::clear_has_node_unavailable() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ErrorDetail::clear_node_unavailable() {
  if (node_unavailable_ != NULL) node_unavailable_->::cockroach::roachpb::NodeUnavailableError::Clear();
  clear_has_node_unavailable();
}
inline const ::cockroach::roachpb::NodeUnavailableError& ErrorDetail::node_unavailable() const {
  const ::cockroach::roachpb::NodeUnavailableError* p = node_unavailable_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.node_unavailable)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::NodeUnavailableError*>(
      &::cockroach::roachpb::_NodeUnavailableError_default_instance_);
}
inline ::cockroach::roachpb::NodeUnavailableError* ErrorDetail::mutable_node_unavailable() {
  set_has_node_unavailable();
  if (node_unavailable_ == NULL) {
    node_unavailable_ = new ::cockroach::roachpb::NodeUnavailableError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.node_unavailable)
  return node_unavailable_;
}
inline ::cockroach::roachpb::NodeUnavailableError* ErrorDetail::release_node_unavailable() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.node_unavailable)
  clear_has_node_unavailable();
  ::cockroach::roachpb::NodeUnavailableError* temp = node_unavailable_;
  node_unavailable_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_node_unavailable(::cockroach::roachpb::NodeUnavailableError* node_unavailable) {
  delete node_unavailable_;
  node_unavailable_ = node_unavailable;
  if (node_unavailable) {
    set_has_node_unavailable();
  } else {
    clear_has_node_unavailable();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.node_unavailable)
}

// optional .cockroach.roachpb.SendError send = 15;
inline bool ErrorDetail::has_send() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ErrorDetail::set_has_send() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ErrorDetail::clear_has_send() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ErrorDetail::clear_send() {
  if (send_ != NULL) send_->::cockroach::roachpb::SendError::Clear();
  clear_has_send();
}
inline const ::cockroach::roachpb::SendError& ErrorDetail::send() const {
  const ::cockroach::roachpb::SendError* p = send_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.send)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::SendError*>(
      &::cockroach::roachpb::_SendError_default_instance_);
}
inline ::cockroach::roachpb::SendError* ErrorDetail::mutable_send() {
  set_has_send();
  if (send_ == NULL) {
    send_ = new ::cockroach::roachpb::SendError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.send)
  return send_;
}
inline ::cockroach::roachpb::SendError* ErrorDetail::release_send() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.send)
  clear_has_send();
  ::cockroach::roachpb::SendError* temp = send_;
  send_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_send(::cockroach::roachpb::SendError* send) {
  delete send_;
  send_ = send;
  if (send) {
    set_has_send();
  } else {
    clear_has_send();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.send)
}

// optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
inline bool ErrorDetail::has_raft_group_deleted() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ErrorDetail::set_has_raft_group_deleted() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ErrorDetail::clear_has_raft_group_deleted() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ErrorDetail::clear_raft_group_deleted() {
  if (raft_group_deleted_ != NULL) raft_group_deleted_->::cockroach::roachpb::RaftGroupDeletedError::Clear();
  clear_has_raft_group_deleted();
}
inline const ::cockroach::roachpb::RaftGroupDeletedError& ErrorDetail::raft_group_deleted() const {
  const ::cockroach::roachpb::RaftGroupDeletedError* p = raft_group_deleted_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.raft_group_deleted)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::RaftGroupDeletedError*>(
      &::cockroach::roachpb::_RaftGroupDeletedError_default_instance_);
}
inline ::cockroach::roachpb::RaftGroupDeletedError* ErrorDetail::mutable_raft_group_deleted() {
  set_has_raft_group_deleted();
  if (raft_group_deleted_ == NULL) {
    raft_group_deleted_ = new ::cockroach::roachpb::RaftGroupDeletedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.raft_group_deleted)
  return raft_group_deleted_;
}
inline ::cockroach::roachpb::RaftGroupDeletedError* ErrorDetail::release_raft_group_deleted() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.raft_group_deleted)
  clear_has_raft_group_deleted();
  ::cockroach::roachpb::RaftGroupDeletedError* temp = raft_group_deleted_;
  raft_group_deleted_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_raft_group_deleted(::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted) {
  delete raft_group_deleted_;
  raft_group_deleted_ = raft_group_deleted;
  if (raft_group_deleted) {
    set_has_raft_group_deleted();
  } else {
    clear_has_raft_group_deleted();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.raft_group_deleted)
}

// optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
inline bool ErrorDetail::has_replica_corruption() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ErrorDetail::set_has_replica_corruption() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ErrorDetail::clear_has_replica_corruption() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ErrorDetail::clear_replica_corruption() {
  if (replica_corruption_ != NULL) replica_corruption_->::cockroach::roachpb::ReplicaCorruptionError::Clear();
  clear_has_replica_corruption();
}
inline const ::cockroach::roachpb::ReplicaCorruptionError& ErrorDetail::replica_corruption() const {
  const ::cockroach::roachpb::ReplicaCorruptionError* p = replica_corruption_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.replica_corruption)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReplicaCorruptionError*>(
      &::cockroach::roachpb::_ReplicaCorruptionError_default_instance_);
}
inline ::cockroach::roachpb::ReplicaCorruptionError* ErrorDetail::mutable_replica_corruption() {
  set_has_replica_corruption();
  if (replica_corruption_ == NULL) {
    replica_corruption_ = new ::cockroach::roachpb::ReplicaCorruptionError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.replica_corruption)
  return replica_corruption_;
}
inline ::cockroach::roachpb::ReplicaCorruptionError* ErrorDetail::release_replica_corruption() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.replica_corruption)
  clear_has_replica_corruption();
  ::cockroach::roachpb::ReplicaCorruptionError* temp = replica_corruption_;
  replica_corruption_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_replica_corruption(::cockroach::roachpb::ReplicaCorruptionError* replica_corruption) {
  delete replica_corruption_;
  replica_corruption_ = replica_corruption;
  if (replica_corruption) {
    set_has_replica_corruption();
  } else {
    clear_has_replica_corruption();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.replica_corruption)
}

// optional .cockroach.roachpb.ReplicaTooOldError replica_too_old = 18;
inline bool ErrorDetail::has_replica_too_old() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ErrorDetail::set_has_replica_too_old() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ErrorDetail::clear_has_replica_too_old() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ErrorDetail::clear_replica_too_old() {
  if (replica_too_old_ != NULL) replica_too_old_->::cockroach::roachpb::ReplicaTooOldError::Clear();
  clear_has_replica_too_old();
}
inline const ::cockroach::roachpb::ReplicaTooOldError& ErrorDetail::replica_too_old() const {
  const ::cockroach::roachpb::ReplicaTooOldError* p = replica_too_old_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.replica_too_old)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ReplicaTooOldError*>(
      &::cockroach::roachpb::_ReplicaTooOldError_default_instance_);
}
inline ::cockroach::roachpb::ReplicaTooOldError* ErrorDetail::mutable_replica_too_old() {
  set_has_replica_too_old();
  if (replica_too_old_ == NULL) {
    replica_too_old_ = new ::cockroach::roachpb::ReplicaTooOldError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.replica_too_old)
  return replica_too_old_;
}
inline ::cockroach::roachpb::ReplicaTooOldError* ErrorDetail::release_replica_too_old() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.replica_too_old)
  clear_has_replica_too_old();
  ::cockroach::roachpb::ReplicaTooOldError* temp = replica_too_old_;
  replica_too_old_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_replica_too_old(::cockroach::roachpb::ReplicaTooOldError* replica_too_old) {
  delete replica_too_old_;
  replica_too_old_ = replica_too_old;
  if (replica_too_old) {
    set_has_replica_too_old();
  } else {
    clear_has_replica_too_old();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.replica_too_old)
}

// optional .cockroach.roachpb.AmbiguousResultError ambiguous_result = 26;
inline bool ErrorDetail::has_ambiguous_result() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ErrorDetail::set_has_ambiguous_result() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ErrorDetail::clear_has_ambiguous_result() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ErrorDetail::clear_ambiguous_result() {
  if (ambiguous_result_ != NULL) ambiguous_result_->::cockroach::roachpb::AmbiguousResultError::Clear();
  clear_has_ambiguous_result();
}
inline const ::cockroach::roachpb::AmbiguousResultError& ErrorDetail::ambiguous_result() const {
  const ::cockroach::roachpb::AmbiguousResultError* p = ambiguous_result_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.ambiguous_result)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::AmbiguousResultError*>(
      &::cockroach::roachpb::_AmbiguousResultError_default_instance_);
}
inline ::cockroach::roachpb::AmbiguousResultError* ErrorDetail::mutable_ambiguous_result() {
  set_has_ambiguous_result();
  if (ambiguous_result_ == NULL) {
    ambiguous_result_ = new ::cockroach::roachpb::AmbiguousResultError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.ambiguous_result)
  return ambiguous_result_;
}
inline ::cockroach::roachpb::AmbiguousResultError* ErrorDetail::release_ambiguous_result() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.ambiguous_result)
  clear_has_ambiguous_result();
  ::cockroach::roachpb::AmbiguousResultError* temp = ambiguous_result_;
  ambiguous_result_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_ambiguous_result(::cockroach::roachpb::AmbiguousResultError* ambiguous_result) {
  delete ambiguous_result_;
  ambiguous_result_ = ambiguous_result;
  if (ambiguous_result) {
    set_has_ambiguous_result();
  } else {
    clear_has_ambiguous_result();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.ambiguous_result)
}

// optional .cockroach.roachpb.StoreNotFoundError store_not_found = 27;
inline bool ErrorDetail::has_store_not_found() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ErrorDetail::set_has_store_not_found() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ErrorDetail::clear_has_store_not_found() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ErrorDetail::clear_store_not_found() {
  if (store_not_found_ != NULL) store_not_found_->::cockroach::roachpb::StoreNotFoundError::Clear();
  clear_has_store_not_found();
}
inline const ::cockroach::roachpb::StoreNotFoundError& ErrorDetail::store_not_found() const {
  const ::cockroach::roachpb::StoreNotFoundError* p = store_not_found_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.store_not_found)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::StoreNotFoundError*>(
      &::cockroach::roachpb::_StoreNotFoundError_default_instance_);
}
inline ::cockroach::roachpb::StoreNotFoundError* ErrorDetail::mutable_store_not_found() {
  set_has_store_not_found();
  if (store_not_found_ == NULL) {
    store_not_found_ = new ::cockroach::roachpb::StoreNotFoundError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.store_not_found)
  return store_not_found_;
}
inline ::cockroach::roachpb::StoreNotFoundError* ErrorDetail::release_store_not_found() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.store_not_found)
  clear_has_store_not_found();
  ::cockroach::roachpb::StoreNotFoundError* temp = store_not_found_;
  store_not_found_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_store_not_found(::cockroach::roachpb::StoreNotFoundError* store_not_found) {
  delete store_not_found_;
  store_not_found_ = store_not_found;
  if (store_not_found) {
    set_has_store_not_found();
  } else {
    clear_has_store_not_found();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.store_not_found)
}

// optional .cockroach.roachpb.HandledRetryableTxnError handled_retryable_txn_error = 28;
inline bool ErrorDetail::has_handled_retryable_txn_error() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ErrorDetail::set_has_handled_retryable_txn_error() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ErrorDetail::clear_has_handled_retryable_txn_error() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ErrorDetail::clear_handled_retryable_txn_error() {
  if (handled_retryable_txn_error_ != NULL) handled_retryable_txn_error_->::cockroach::roachpb::HandledRetryableTxnError::Clear();
  clear_has_handled_retryable_txn_error();
}
inline const ::cockroach::roachpb::HandledRetryableTxnError& ErrorDetail::handled_retryable_txn_error() const {
  const ::cockroach::roachpb::HandledRetryableTxnError* p = handled_retryable_txn_error_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.handled_retryable_txn_error)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::HandledRetryableTxnError*>(
      &::cockroach::roachpb::_HandledRetryableTxnError_default_instance_);
}
inline ::cockroach::roachpb::HandledRetryableTxnError* ErrorDetail::mutable_handled_retryable_txn_error() {
  set_has_handled_retryable_txn_error();
  if (handled_retryable_txn_error_ == NULL) {
    handled_retryable_txn_error_ = new ::cockroach::roachpb::HandledRetryableTxnError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.handled_retryable_txn_error)
  return handled_retryable_txn_error_;
}
inline ::cockroach::roachpb::HandledRetryableTxnError* ErrorDetail::release_handled_retryable_txn_error() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.handled_retryable_txn_error)
  clear_has_handled_retryable_txn_error();
  ::cockroach::roachpb::HandledRetryableTxnError* temp = handled_retryable_txn_error_;
  handled_retryable_txn_error_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_handled_retryable_txn_error(::cockroach::roachpb::HandledRetryableTxnError* handled_retryable_txn_error) {
  delete handled_retryable_txn_error_;
  handled_retryable_txn_error_ = handled_retryable_txn_error;
  if (handled_retryable_txn_error) {
    set_has_handled_retryable_txn_error();
  } else {
    clear_has_handled_retryable_txn_error();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.handled_retryable_txn_error)
}

// optional .cockroach.roachpb.UntrackedTxnError untracked_txn_error = 29;
inline bool ErrorDetail::has_untracked_txn_error() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ErrorDetail::set_has_untracked_txn_error() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ErrorDetail::clear_has_untracked_txn_error() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ErrorDetail::clear_untracked_txn_error() {
  if (untracked_txn_error_ != NULL) untracked_txn_error_->::cockroach::roachpb::UntrackedTxnError::Clear();
  clear_has_untracked_txn_error();
}
inline const ::cockroach::roachpb::UntrackedTxnError& ErrorDetail::untracked_txn_error() const {
  const ::cockroach::roachpb::UntrackedTxnError* p = untracked_txn_error_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.untracked_txn_error)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::UntrackedTxnError*>(
      &::cockroach::roachpb::_UntrackedTxnError_default_instance_);
}
inline ::cockroach::roachpb::UntrackedTxnError* ErrorDetail::mutable_untracked_txn_error() {
  set_has_untracked_txn_error();
  if (untracked_txn_error_ == NULL) {
    untracked_txn_error_ = new ::cockroach::roachpb::UntrackedTxnError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.untracked_txn_error)
  return untracked_txn_error_;
}
inline ::cockroach::roachpb::UntrackedTxnError* ErrorDetail::release_untracked_txn_error() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.untracked_txn_error)
  clear_has_untracked_txn_error();
  ::cockroach::roachpb::UntrackedTxnError* temp = untracked_txn_error_;
  untracked_txn_error_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_untracked_txn_error(::cockroach::roachpb::UntrackedTxnError* untracked_txn_error) {
  delete untracked_txn_error_;
  untracked_txn_error_ = untracked_txn_error;
  if (untracked_txn_error) {
    set_has_untracked_txn_error();
  } else {
    clear_has_untracked_txn_error();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.untracked_txn_error)
}

// optional .cockroach.roachpb.TxnPrevAttemptError txn_aborted_async_err = 30;
inline bool ErrorDetail::has_txn_aborted_async_err() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ErrorDetail::set_has_txn_aborted_async_err() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ErrorDetail::clear_has_txn_aborted_async_err() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ErrorDetail::clear_txn_aborted_async_err() {
  if (txn_aborted_async_err_ != NULL) txn_aborted_async_err_->::cockroach::roachpb::TxnPrevAttemptError::Clear();
  clear_has_txn_aborted_async_err();
}
inline const ::cockroach::roachpb::TxnPrevAttemptError& ErrorDetail::txn_aborted_async_err() const {
  const ::cockroach::roachpb::TxnPrevAttemptError* p = txn_aborted_async_err_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.txn_aborted_async_err)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::TxnPrevAttemptError*>(
      &::cockroach::roachpb::_TxnPrevAttemptError_default_instance_);
}
inline ::cockroach::roachpb::TxnPrevAttemptError* ErrorDetail::mutable_txn_aborted_async_err() {
  set_has_txn_aborted_async_err();
  if (txn_aborted_async_err_ == NULL) {
    txn_aborted_async_err_ = new ::cockroach::roachpb::TxnPrevAttemptError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.txn_aborted_async_err)
  return txn_aborted_async_err_;
}
inline ::cockroach::roachpb::TxnPrevAttemptError* ErrorDetail::release_txn_aborted_async_err() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ErrorDetail.txn_aborted_async_err)
  clear_has_txn_aborted_async_err();
  ::cockroach::roachpb::TxnPrevAttemptError* temp = txn_aborted_async_err_;
  txn_aborted_async_err_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_txn_aborted_async_err(::cockroach::roachpb::TxnPrevAttemptError* txn_aborted_async_err) {
  delete txn_aborted_async_err_;
  txn_aborted_async_err_ = txn_aborted_async_err;
  if (txn_aborted_async_err) {
    set_has_txn_aborted_async_err();
  } else {
    clear_has_txn_aborted_async_err();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.txn_aborted_async_err)
}

// -------------------------------------------------------------------

// ErrPosition

inline bool ErrPosition::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrPosition::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrPosition::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrPosition::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ErrPosition::index() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrPosition.index)
  return index_;
}
inline void ErrPosition::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ErrPosition.index)
}

// -------------------------------------------------------------------

// Error

inline bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.message)
  return message_.GetNoArena();
}
inline void Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.message)
}
#if LANG_CXX11
inline void Error::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.Error.message)
}
#endif
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Error.message)
}
inline ::std::string* Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Error.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.message)
}

inline bool Error::has_transaction_restart() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Error::set_has_transaction_restart() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Error::clear_has_transaction_restart() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Error::clear_transaction_restart() {
  transaction_restart_ = 0;
  clear_has_transaction_restart();
}
inline ::cockroach::roachpb::TransactionRestart Error::transaction_restart() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.transaction_restart)
  return static_cast< ::cockroach::roachpb::TransactionRestart >(transaction_restart_);
}
inline void Error::set_transaction_restart(::cockroach::roachpb::TransactionRestart value) {
  assert(::cockroach::roachpb::TransactionRestart_IsValid(value));
  set_has_transaction_restart();
  transaction_restart_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.transaction_restart)
}

// optional .cockroach.roachpb.Transaction unexposed_txn = 4;
inline bool Error::has_unexposed_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_unexposed_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_unexposed_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_unexposed_txn() {
  if (unexposed_txn_ != NULL) unexposed_txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_unexposed_txn();
}
inline const ::cockroach::roachpb::Transaction& Error::unexposed_txn() const {
  const ::cockroach::roachpb::Transaction* p = unexposed_txn_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.unexposed_txn)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::Transaction*>(
      &::cockroach::roachpb::_Transaction_default_instance_);
}
inline ::cockroach::roachpb::Transaction* Error::mutable_unexposed_txn() {
  set_has_unexposed_txn();
  if (unexposed_txn_ == NULL) {
    unexposed_txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.unexposed_txn)
  return unexposed_txn_;
}
inline ::cockroach::roachpb::Transaction* Error::release_unexposed_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Error.unexposed_txn)
  clear_has_unexposed_txn();
  ::cockroach::roachpb::Transaction* temp = unexposed_txn_;
  unexposed_txn_ = NULL;
  return temp;
}
inline void Error::set_allocated_unexposed_txn(::cockroach::roachpb::Transaction* unexposed_txn) {
  delete unexposed_txn_;
  unexposed_txn_ = unexposed_txn;
  if (unexposed_txn) {
    set_has_unexposed_txn();
  } else {
    clear_has_unexposed_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.unexposed_txn)
}

inline bool Error::has_origin_node() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Error::set_has_origin_node() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Error::clear_has_origin_node() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Error::clear_origin_node() {
  origin_node_ = 0;
  clear_has_origin_node();
}
inline ::google::protobuf::int32 Error::origin_node() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.origin_node)
  return origin_node_;
}
inline void Error::set_origin_node(::google::protobuf::int32 value) {
  set_has_origin_node();
  origin_node_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.origin_node)
}

// optional .cockroach.roachpb.ErrorDetail detail = 6;
inline bool Error::has_detail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_detail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_detail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_detail() {
  if (detail_ != NULL) detail_->::cockroach::roachpb::ErrorDetail::Clear();
  clear_has_detail();
}
inline const ::cockroach::roachpb::ErrorDetail& Error::detail() const {
  const ::cockroach::roachpb::ErrorDetail* p = detail_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.detail)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ErrorDetail*>(
      &::cockroach::roachpb::_ErrorDetail_default_instance_);
}
inline ::cockroach::roachpb::ErrorDetail* Error::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) {
    detail_ = new ::cockroach::roachpb::ErrorDetail;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.detail)
  return detail_;
}
inline ::cockroach::roachpb::ErrorDetail* Error::release_detail() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Error.detail)
  clear_has_detail();
  ::cockroach::roachpb::ErrorDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void Error::set_allocated_detail(::cockroach::roachpb::ErrorDetail* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.detail)
}

// optional .cockroach.roachpb.ErrPosition index = 7;
inline bool Error::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error::clear_index() {
  if (index_ != NULL) index_->::cockroach::roachpb::ErrPosition::Clear();
  clear_has_index();
}
inline const ::cockroach::roachpb::ErrPosition& Error::index() const {
  const ::cockroach::roachpb::ErrPosition* p = index_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.index)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::roachpb::ErrPosition*>(
      &::cockroach::roachpb::_ErrPosition_default_instance_);
}
inline ::cockroach::roachpb::ErrPosition* Error::mutable_index() {
  set_has_index();
  if (index_ == NULL) {
    index_ = new ::cockroach::roachpb::ErrPosition;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.index)
  return index_;
}
inline ::cockroach::roachpb::ErrPosition* Error::release_index() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Error.index)
  clear_has_index();
  ::cockroach::roachpb::ErrPosition* temp = index_;
  index_ = NULL;
  return temp;
}
inline void Error::set_allocated_index(::cockroach::roachpb::ErrPosition* index) {
  delete index_;
  index_ = index;
  if (index) {
    set_has_index();
  } else {
    clear_has_index();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.index)
}

inline bool Error::has_now() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Error::set_has_now() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Error::clear_has_now() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Error::clear_now() {
  if (now_ != NULL) now_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_now();
}
inline const ::cockroach::util::hlc::Timestamp& Error::now() const {
  const ::cockroach::util::hlc::Timestamp* p = now_;
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.now)
  return p != NULL ? *p : *reinterpret_cast<const ::cockroach::util::hlc::Timestamp*>(
      &::cockroach::util::hlc::_Timestamp_default_instance_);
}
inline ::cockroach::util::hlc::Timestamp* Error::mutable_now() {
  set_has_now();
  if (now_ == NULL) {
    now_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.now)
  return now_;
}
inline ::cockroach::util::hlc::Timestamp* Error::release_now() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Error.now)
  clear_has_now();
  ::cockroach::util::hlc::Timestamp* temp = now_;
  now_ = NULL;
  return temp;
}
inline void Error::set_allocated_now(::cockroach::util::hlc::Timestamp* now) {
  delete now_;
  now_ = now;
  if (now) {
    set_has_now();
  } else {
    clear_has_now();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.now)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace roachpb
}  // namespace cockroach

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::roachpb::TransactionRetryReason> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::cockroach::roachpb::TransactionRestart> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_roachpb_2ferrors_2eproto__INCLUDED
