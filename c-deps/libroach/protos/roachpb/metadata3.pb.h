// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/metadata3.proto

#ifndef PROTOBUF_INCLUDED_roachpb_2fmetadata3_2eproto
#define PROTOBUF_INCLUDED_roachpb_2fmetadata3_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "roachpb/metadata.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata3_2eproto 

namespace protobuf_roachpb_2fmetadata3_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_roachpb_2fmetadata3_2eproto
namespace cockroach {
namespace roachpb {
class RangeDescriptor;
class RangeDescriptorDefaultTypeInternal;
extern RangeDescriptorDefaultTypeInternal _RangeDescriptor_default_instance_;
}  // namespace roachpb
}  // namespace cockroach
namespace google {
namespace protobuf {
template<> ::cockroach::roachpb::RangeDescriptor* Arena::CreateMaybeMessage<::cockroach::roachpb::RangeDescriptor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cockroach {
namespace roachpb {

// ===================================================================

class RangeDescriptor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeDescriptor) */ {
 public:
  RangeDescriptor();
  virtual ~RangeDescriptor();

  RangeDescriptor(const RangeDescriptor& from);

  inline RangeDescriptor& operator=(const RangeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeDescriptor(RangeDescriptor&& from) noexcept
    : RangeDescriptor() {
    *this = ::std::move(from);
  }

  inline RangeDescriptor& operator=(RangeDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RangeDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeDescriptor* internal_default_instance() {
    return reinterpret_cast<const RangeDescriptor*>(
               &_RangeDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RangeDescriptor* other);
  friend void swap(RangeDescriptor& a, RangeDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeDescriptor* New() const final {
    return CreateMaybeMessage<RangeDescriptor>(NULL);
  }

  RangeDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RangeDescriptor& from);
  void MergeFrom(const RangeDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int replicas_size() const;
  void clear_replicas();
  static const int kReplicasFieldNumber = 4;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_replicas(int index);
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
      mutable_replicas();
  const ::cockroach::roachpb::ReplicaDescriptor& replicas(int index) const;
  ::cockroach::roachpb::ReplicaDescriptor* add_replicas();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
      replicas() const;

  void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  void clear_end_key();
  static const int kEndKeyFieldNumber = 3;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // int64 generation = 6;
  void clear_generation();
  static const int kGenerationFieldNumber = 6;
  ::google::protobuf::int64 generation() const;
  void set_generation(::google::protobuf::int64 value);

  void clear_next_replica_id();
  static const int kNextReplicaIdFieldNumber = 5;
  ::google::protobuf::int32 next_replica_id() const;
  void set_next_replica_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor > replicas_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::google::protobuf::int64 range_id_;
  ::google::protobuf::int64 generation_;
  ::google::protobuf::int32 next_replica_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fmetadata3_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RangeDescriptor

inline void RangeDescriptor::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RangeDescriptor::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.range_id)
  return range_id_;
}
inline void RangeDescriptor::set_range_id(::google::protobuf::int64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.range_id)
}

inline void RangeDescriptor::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RangeDescriptor::start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.GetNoArena();
}
inline void RangeDescriptor::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.start_key)
}
#if LANG_CXX11
inline void RangeDescriptor::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RangeDescriptor.start_key)
}
#endif
inline void RangeDescriptor::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.start_key)
}
inline void RangeDescriptor::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.start_key)
}
inline ::std::string* RangeDescriptor::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeDescriptor::release_start_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeDescriptor.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeDescriptor::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.start_key)
}

inline void RangeDescriptor::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RangeDescriptor::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.GetNoArena();
}
inline void RangeDescriptor::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.end_key)
}
#if LANG_CXX11
inline void RangeDescriptor::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cockroach.roachpb.RangeDescriptor.end_key)
}
#endif
inline void RangeDescriptor::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.end_key)
}
inline void RangeDescriptor::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.end_key)
}
inline ::std::string* RangeDescriptor::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeDescriptor::release_end_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeDescriptor.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeDescriptor::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.end_key)
}

inline int RangeDescriptor::replicas_size() const {
  return replicas_.size();
}
inline ::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
RangeDescriptor::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.RangeDescriptor.replicas)
  return &replicas_;
}
inline const ::cockroach::roachpb::ReplicaDescriptor& RangeDescriptor::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Get(index);
}
inline ::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
RangeDescriptor::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_;
}

inline void RangeDescriptor::clear_next_replica_id() {
  next_replica_id_ = 0;
}
inline ::google::protobuf::int32 RangeDescriptor::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.next_replica_id)
  return next_replica_id_;
}
inline void RangeDescriptor::set_next_replica_id(::google::protobuf::int32 value) {
  
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.next_replica_id)
}

// int64 generation = 6;
inline void RangeDescriptor::clear_generation() {
  generation_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RangeDescriptor::generation() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.generation)
  return generation_;
}
inline void RangeDescriptor::set_generation(::google::protobuf::int64 value) {
  
  generation_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.generation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_roachpb_2fmetadata3_2eproto
