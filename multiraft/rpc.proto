// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Tamir Duberstein (tamird@gmail.com)

syntax = "proto2";
package cockroach.multiraft;
option go_package = "multiraft";

import "cockroach/roachpb/metadata.proto";
import "etcd/raft/raftpb/raft.proto";
import weak "gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// RaftMessageRequest is the request used to send raft messages using our
// protobuf-based RPC codec.
message RaftMessageRequest {
  optional uint64 group_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "GroupID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.RangeID"];

  optional roachpb.ReplicaDescriptor from_replica = 2 [(gogoproto.nullable) = false];
  optional roachpb.ReplicaDescriptor to_replica = 3 [(gogoproto.nullable) = false];

  optional raftpb.Message message = 4 [(gogoproto.nullable) = false];
}

// RaftMessageResponse is an empty message returned by raft RPCs. If a
// response is needed it will be sent as a separate message.
message RaftMessageResponse {
}

// ConfChangeContext is encoded in the raftpb.ConfChange.Context field.
message ConfChangeContext {
  optional string command_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "CommandID"];

  // Payload is the application-level command (i.e. an encoded
  // roachpb.EndTransactionRequest).
  optional bytes payload = 2;

  // Replica contains full details about the replica being added or removed.
  optional roachpb.ReplicaDescriptor replica = 3 [(gogoproto.nullable) = false];
}

// MultiPackageMessageRequest is the request used to send snapshot messages splited into multi-package using our
// protobuf-based RPC codec.
message MultiPackageMessageRequest {
  required uint64 group_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "GroupID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.RangeID"];

  // package id from 0 to int_max, -1 means the last package.
  optional int32 package_id = 2 [(gogoproto.nullable) = false];
  optional bytes raw_bytes = 3;
}
