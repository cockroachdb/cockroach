# This configuration file sets up a DaemonSet running CockroachDB in insecure
# mode. For more information on why you might want to use a DaemonSet instead
# of a StatefulSet, see our docs:
# https://www.cockroachlabs.com/docs/stable/kubernetes-performance.html#running-in-a-daemonset
#
# To use this file, customize the parts labeled "TODO" before running:
#   kubectl create -f cockroachdb-daemonset-insecure.yaml
#
# Initialize the cluster by picking one of the CockroachDB pod names from
# the output of `kubectl get pods`, then run:
#   kubectl exec -it <pod-name> -- ./cockroach init --insecure
#
# If you're interested in using a DaemonSet in secure mode instead, please see
# cockroachdb-daemonset-secure.yaml.
apiVersion: v1
kind: Service
metadata:
  # This service is meant to be used by clients of the database. It exposes a ClusterIP that will
  # automatically load balance connections to the different database pods.
  name: cockroachdb-public
  labels:
    app: cockroachdb
spec:
  ports:
  # The main port, served by gRPC, serves Postgres-flavor SQL, internode
  # traffic and the cli.
  - port: 26257
    targetPort: 26257
    name: grpc
  # The secondary port serves the UI as well as health and debug endpoints.
  - port: 8080
    targetPort: 8080
    name: http
  selector:
    app: cockroachdb
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: cockroachdb-budget
  labels:
    app: cockroachdb
spec:
  selector:
    matchLabels:
      app: cockroachdb
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cockroachdb
  labels:
    app: cockroachdb
spec:
  selector:
    matchLabels:
      app: cockroachdb
  template:
    metadata:
      labels:
        app: cockroachdb
    spec:
      # TODO: Remove the nodeSelector section if you want CockroachDB to run on all nodes in your cluster.
      # To give nodes this label, run:
      #   kubectl label node <node-name> app=cockroachdb
      nodeSelector:
        app: cockroachdb
      # Tolerations allow CockroachDB to run on Kubernetes nodes that other pods won't be allowed on.
      # To set up nodes to be dedicated to CockroachDB, you must "taint" them by running:
      #   kubectl taint node <node-name> app=cockroachdb:NoSchedule
      # If you don't set up any such taints, these tolerations will have no effect.
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "cockroachdb"
        effect: "NoSchedule"
      # NOTE: Running with `hostNetwork: true` means that CockroachDB will use
      # the host machines' IP address and hostname, and that nothing else on
      # the machines will be able to use the same ports.
      hostNetwork: true
      containers:
      - name: cockroachdb
        image: cockroachdb/cockroach:v19.1.5
        imagePullPolicy: IfNotPresent
        # TODO: If you configured taints to give CockroachDB exclusive access to nodes, feel free
        # to remove the requests and limits sections. If you didn't, you'll need to change these to
        # appropriate values for the hardware that you're running. You can see the amount of
        # allocatable resources on each of your Kubernetes nodes by running:
        #   kubectl describe nodes
        resources:
          requests:
            cpu: "16"
            memory: "8Gi"
          limits:
            # NOTE: Unless you have enabled the non-default Static CPU Management Policy
            # and are using an integer number of CPUs, we don't recommend setting a CPU limit.
            # See:
            #   https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy
            #   https://github.com/kubernetes/kubernetes/issues/51135
            #cpu: "16"
            memory: "8Gi"
        ports:
        - containerPort: 26257
          hostPort: 26257
          name: grpc
        - containerPort: 8080
          hostPort: 8080
          name: http
        livenessProbe:
          httpGet:
            path: "/health"
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: "/health?ready=1"
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 2
        volumeMounts:
        - name: datadir
          mountPath: /cockroach/cockroach-data
        env:
        - name: COCKROACH_CHANNEL
          value: kubernetes-insecure
        command:
          - "/bin/bash"
          - "-ecx"
          # TODO: Replace "YOUR_IP_ADDR1_HERE,YOUR_IP_ADDR2_HERE,YOUR_IP_ADDR3_HERE" with a list of a few of the IP addresses of the machines on which CockroachDB will be running.
          - "exec /cockroach/cockroach start --logtostderr --insecure --http-addr 0.0.0.0 --cache 25% --max-sql-memory 25% --join=YOUR_IP_ADDR1_HERE,YOUR_IP_ADDR2_HERE,YOUR_IP_ADDR3_HERE"
      terminationGracePeriodSeconds: 60
      volumes:
      - name: datadir
        hostPath:
          # TODO: Replace "YOUR_FILESYSTEM_PATH_HERE" with the path where you want CockroachDB's data stored on your Kubernetes nodes.
          path: YOUR_FILESYSTEM_PATH_HERE
