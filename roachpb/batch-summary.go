// Code generated by gen-batch-summary.go; DO NOT EDIT

package roachpb

import (
	"bytes"
	"fmt"
)

var requestNames = []string{
	"Get",
	"Put",
	"CPut",
	"Inc",
	"Del",
	"DelRng",
	"Scan",
	"BeginTxn",
	"EndTxn",
	"AdmSplit",
	"AdmMerge",
	"AdmTransferLease",
	"HeartbeatTxn",
	"Gc",
	"PushTxn",
	"RngLookup",
	"ResolveIntent",
	"ResolveIntentRng",
	"Merge",
	"TruncateLog",
	"RequestLease",
	"RevScan",
	"ComputeChk",
	"DeprecatedVerifyChk",
	"CheckConsistency",
	"Noop",
	"InitPut",
	"ChangeFrozen",
	"TransferLease",
	"LeaseInfo",
}

// Summary prints a short summary of the requests in a batch.
func (br *BatchRequest) Summary() string {
	if len(br.Requests) == 0 {
		return "empty batch"
	}
	var num [30]int
	for _, r := range br.Requests {
		switch {
		case r.Get != nil:
			num[0]++
		case r.Put != nil:
			num[1]++
		case r.ConditionalPut != nil:
			num[2]++
		case r.Increment != nil:
			num[3]++
		case r.Delete != nil:
			num[4]++
		case r.DeleteRange != nil:
			num[5]++
		case r.Scan != nil:
			num[6]++
		case r.BeginTransaction != nil:
			num[7]++
		case r.EndTransaction != nil:
			num[8]++
		case r.AdminSplit != nil:
			num[9]++
		case r.AdminMerge != nil:
			num[10]++
		case r.AdminTransferLease != nil:
			num[11]++
		case r.HeartbeatTxn != nil:
			num[12]++
		case r.Gc != nil:
			num[13]++
		case r.PushTxn != nil:
			num[14]++
		case r.RangeLookup != nil:
			num[15]++
		case r.ResolveIntent != nil:
			num[16]++
		case r.ResolveIntentRange != nil:
			num[17]++
		case r.Merge != nil:
			num[18]++
		case r.TruncateLog != nil:
			num[19]++
		case r.RequestLease != nil:
			num[20]++
		case r.ReverseScan != nil:
			num[21]++
		case r.ComputeChecksum != nil:
			num[22]++
		case r.DeprecatedVerifyChecksum != nil:
			num[23]++
		case r.CheckConsistency != nil:
			num[24]++
		case r.Noop != nil:
			num[25]++
		case r.InitPut != nil:
			num[26]++
		case r.ChangeFrozen != nil:
			num[27]++
		case r.TransferLease != nil:
			num[28]++
		case r.LeaseInfo != nil:
			num[29]++
		}
	}
	var buf bytes.Buffer
	for i, v := range num {
		if v == 0 {
			continue
		}
		if buf.Len() > 0 {
			buf.WriteString(", ")
		}
		fmt.Fprintf(&buf, "%d %s", v, requestNames[i])
	}
	return buf.String()
}
