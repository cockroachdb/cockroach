// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)

syntax = "proto2";
package cockroach.roachpb;
option go_package = "roachpb";

import "cockroach/roachpb/api.proto";
import "cockroach/roachpb/metadata.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// A RaftCommand is a command which can be serialized and sent via
// raft.
message RaftCommand {
  optional int64 range_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "RangeID", (gogoproto.casttype) = "RangeID"];
  optional ReplicaDescriptor origin_replica = 2 [(gogoproto.nullable) = false];
  optional BatchRequest cmd = 3 [(gogoproto.nullable) = false];
}

// InternalTimeSeriesData is a collection of data samples for some
// measurable value, where each sample is taken over a uniform time
// interval.
//
// The collection itself contains a start timestamp (in seconds since the unix
// epoch) and a sample duration (in milliseconds). Each sample in the collection
// will contain a positive integer offset that indicates the length of time
// between the start_timestamp of the collection and the time when the sample
// began, expressed as an whole number of sample intervals. For example, if the
// sample duration is 60000 (indicating 1 minute), then a contained sample with
// an offset value of 5 begins (5*60000ms = 300000ms = 5 minutes) after the
// start timestamp of this data.
//
// This is meant to be an efficient internal representation of time series data,
// ensuring that very little redundant data is stored on disk. With this goal in
// mind, this message does not identify the variable which is actually being
// measured; that information is expected be encoded in the key where this
// message is stored.
message InternalTimeSeriesData {
  // Holds a wall time, expressed as a unix epoch time in nanoseconds. This
  // represents the earliest possible timestamp for a sample within the
  // collection.
  optional int64 start_timestamp_nanos = 1 [(gogoproto.nullable) = false];
  // The duration of each sample interval, expressed in nanoseconds.
  optional int64 sample_duration_nanos = 2 [(gogoproto.nullable) = false];
  // The actual data samples for this metric.
  repeated InternalTimeSeriesSample samples = 3;
}

// A InternalTimeSeriesSample represents data gathered from multiple
// measurements of a variable value over a given period of time. The
// length of that period of time is stored in an
// InternalTimeSeriesData message; a sample cannot be interpreted
// correctly without a start timestamp and sample duration.
//
// Each sample may contain data gathered from multiple measurements of the same
// variable, as long as all of those measurements occured within the sample
// period. The sample stores several aggregated values from these measurements:
// - The sum of all measured values
// - A count of all measurements taken
// - The maximum individual measurement seen
// - The minimum individual measurement seen
//
// If zero measurements are present in a sample, then it should be omitted
// entirely from any collection it would be a part of.
//
// If the count of measurements is 1, then max and min fields may be omitted
// and assumed equal to the sum field.
message InternalTimeSeriesSample {
  // Temporal offset from the "start_timestamp" of the InternalTimeSeriesData
  // collection this data point is part in. The units of this value are
  // determined by the value of the "sample_duration_milliseconds" field of
  // the TimeSeriesData collection.
  optional int32 offset = 1 [(gogoproto.nullable) = false];

  // Count of measurements taken within this sample.
  optional uint32 count = 6 [(gogoproto.nullable) = false];
  // Sum of all measurements.
  optional double sum = 7 [(gogoproto.nullable) = false];
  // Maximum encountered measurement in this sample.
  optional double max = 8;
  // Minimum encountered measurement in this sample.
  optional double min = 9;
}

// RaftTruncatedState contains metadata about the truncated portion of the raft log.
// Raft requires access to the term of the last truncated log entry even after the
// rest of the entry has been discarded.
message RaftTruncatedState {
  // The highest index that has been removed from the log.
  optional uint64 index = 1 [(gogoproto.nullable) = false];
  // The term corresponding to 'index'.
  optional uint64 term = 2 [(gogoproto.nullable) = false];
}

// RaftTombstone contains information about a replica that has been deleted.
message RaftTombstone {
  optional int32 next_replica_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextReplicaID", (gogoproto.casttype) = "ReplicaID"];
}

// RaftSnapshotData is the payload of a raftpb.Snapshot. It contains a raw copy of
// all of the range's data and metadata, including the raft log, sequence cache, etc.
message RaftSnapshotData {
  message KeyValue {
    optional bytes key = 1;
    optional bytes value = 2;
  }
  // The latest RangeDescriptor
  optional RangeDescriptor range_descriptor = 1 [(gogoproto.nullable) = false];
  repeated KeyValue KV = 2 [(gogoproto.customname) = "KV"];
}
