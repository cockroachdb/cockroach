// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Jiajia Han (hanjia18@gmail.com)
// Author: Spencer Kimball (spencer.kimball@gmail.com)

syntax = "proto2";
package cockroach.roachpb;
option go_package = "roachpb";

import "cockroach/roachpb/metadata.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Span is supplied with every storage node request.
message Span {
  // The key for request. If the request operates on a range, this
  // represents the starting key for the range.
  optional bytes key = 3 [(gogoproto.casttype) = "Key"];
  // The end key is empty if the request spans only a single key. Otherwise,
  // it must order strictly after Key. In such a case, the header indicates
  // that the operation takes place on the key range from Key to EndKey,
  // including Key and excluding EndKey.
  optional bytes end_key = 4 [(gogoproto.casttype) = "Key"];
}

// Timestamp represents a state of the hybrid logical clock.
message Timestamp {
  option (gogoproto.goproto_stringer) = false;

  // Holds a wall time, typically a unix epoch time
  // expressed in nanoseconds.
  optional int64 wall_time = 1 [(gogoproto.nullable) = false];
  // The logical component captures causality for events whose wall
  // times are equal. It is effectively bounded by (maximum clock
  // skew)/(minimal ns between events) and nearly impossible to
  // overflow.
  optional int32 logical = 2 [(gogoproto.nullable) = false];
}

// ValueType defines a set of type constants placed in the "tag" field of Value
// messages. These are defined as a protocol buffer enumeration so that they
// can be used portably between our Go and C code. The tags are used by the
// RocksDB Merge Operator to perform specialized merges.
enum ValueType {
  // This is a subset of the SQL column type values, representing the
  // underlying storage for various types.
  UNKNOWN = 0;
  INT = 1;
  FLOAT = 2;
  BYTES = 3;
  TIME = 4;

  // TIMESERIES is applied to values which contain InternalTimeSeriesData.
  TIMESERIES = 100;
}

// Value specifies the value at a key. Multiple values at the same key
// are supported based on timestamp.
message Value {
  // raw_bytes is the byte slice value.
  optional bytes raw_bytes = 1;
  // checksum is a CRC-32-IEEE checksum of the key + value, in that order.
  // If this is an integer value, then the value is interpreted as an 8
  // byte, big-endian encoded value. This value is set by the client on
  // writes to do end-to-end integrity verification. If the checksum is
  // incorrect, the write operation will fail. If the client does not
  // wish to use end-to-end checksumming, this value should be nil.
  optional fixed32 checksum = 3;
  // Timestamp of value.
  optional Timestamp timestamp = 4;
  // tag is the optional type of the value.
  optional ValueType tag = 5 [(gogoproto.nullable) = false];
}

// KeyValue is a pair of Key and Value for returned Key/Value pairs
// from ScanRequest/ScanResponse. It embeds a Key and a Value.
message KeyValue {
  optional bytes key = 1 [(gogoproto.casttype) = "Key"];
  optional Value value = 2 [(gogoproto.nullable) = false];
}

// A StoreIdent uniquely identifies a store in the cluster. The
// StoreIdent is written to the underlying storage engine at a
// store-reserved system key (KeyLocalIdent).
message StoreIdent {
  optional string cluster_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ClusterID"];
  optional int32 node_id = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
  optional int32 store_id = 3 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "StoreID", (gogoproto.casttype) = "StoreID"];
}

// A SplitTrigger is run after a successful commit of an AdminSplit
// command. It provides the updated range descriptor covering the
// first half of the split and the new range descriptor covering the
// second half. This information allows the final bookkeeping for
// the split to be completed and the new range put into operation.
message SplitTrigger {
  optional RangeDescriptor updated_desc = 1 [(gogoproto.nullable) = false];
  optional RangeDescriptor new_desc = 2 [(gogoproto.nullable) = false];
}

// A MergeTrigger is run after a successful commit of an AdminMerge
// command. It provides the updated range descriptor that now encompasses
// what was originally both ranges. This information allows the final bookkeeping
// for the merge to be completed and put into operation.
message MergeTrigger {
  optional RangeDescriptor updated_desc = 1 [(gogoproto.nullable) = false];
  optional int64 subsumed_range_id = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "SubsumedRangeID", (gogoproto.casttype) = "RangeID"];
}

// ReplicaChangeType is a parameter of ChangeReplicasTrigger.
enum ReplicaChangeType {
  option (gogoproto.goproto_enum_prefix) = false;

  ADD_REPLICA = 0;
  REMOVE_REPLICA = 1;
}

message ChangeReplicasTrigger {
  optional ReplicaChangeType change_type = 1 [(gogoproto.nullable) = false];
  // The replica being modified.
  optional ReplicaDescriptor replica = 2 [(gogoproto.nullable) = false];
  // The new replica list with this change applied.
  repeated ReplicaDescriptor updated_replicas = 3 [(gogoproto.nullable) = false];
  optional int32 next_replica_id = 4 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextReplicaID", (gogoproto.casttype) = "ReplicaID"];
}

// ModifiedSpanTrigger indicates that a specific span has been modified.
// This can be used to trigger scan-and-gossip for the given span.
message ModifiedSpanTrigger {
  optional bool system_db_span = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "SystemDBSpan"];
}

// InternalCommitTrigger encapsulates all of the internal-only commit triggers.
// Only one may be set.
message InternalCommitTrigger {
  // InternalCommitTrigger is always nullable, and these getters are
  // nil-safe, which is often convenient.
  option (gogoproto.goproto_getters) = true;

  optional SplitTrigger split_trigger = 1;
  optional MergeTrigger merge_trigger = 2;
  optional ChangeReplicasTrigger change_replicas_trigger = 3;
  optional ModifiedSpanTrigger modified_span_trigger = 4;
}

// IsolationType TODO(jiajia) Needs documentation.
enum IsolationType {
  option (gogoproto.goproto_enum_prefix) = false;

  // SERIALIZABLE TODO(jiajia) Needs documentation.
  SERIALIZABLE = 0;
  // SNAPSHOT TODO(jiajia) Needs documentation.
  SNAPSHOT = 1;
}

// TransactionStatus specifies possible states for a transaction.
enum TransactionStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // PENDING is the default state for a new transaction. Transactions
  // move from PENDING to one of COMMITTED or ABORTED. Mutations made
  // as part of a PENDING transactions are recorded as "intents" in
  // the underlying MVCC model.
  PENDING = 0;
  // COMMITTED is the state for a transaction which has been
  // committed. Mutations made as part of a transaction which is moved
  // into COMMITTED state become durable and visible to other
  // transactions, moving from "intents" to permanent versioned
  // values.
  COMMITTED = 1;
  // ABORTED is the state for a transaction which has been aborted.
  // Mutations made as part of a transaction which is moved into
  // ABORTED state are deleted and are never made visible to other
  // transactions.
  ABORTED = 2;
}

// NodeList keeps a growing set of NodeIDs as a sorted slice, with Add()
// adding to the set and Contains() verifying membership.
message NodeList {
  // Note that this does not use the NodeID custom type because that appears
  // to interact badly with the repeated and/or packed options.
  repeated int32 nodes = 1 [packed=true];
}

// A Transaction is a unit of work performed on the database.
// Cockroach transactions support two isolation levels: snapshot
// isolation and serializable snapshot isolation. Each Cockroach
// transaction is assigned a random priority. This priority will be
// used to decide whether a transaction will be aborted during
// contention.
// TODO(vivek): Remove parts of Transaction that expose internals.
message Transaction {
  option (gogoproto.goproto_stringer) = false;

  optional string name = 1 [(gogoproto.nullable) = false];
  // key is the key which anchors the transaction. This is typically
  // the first key read or written during the transaction and determines which
  // range in the cluster will hold the transaction record.
  optional bytes key = 2 [(gogoproto.casttype) = "Key"];
  // id is a unique UUID value which identifies the transaction.
  optional bytes id = 3 [(gogoproto.customname) = "ID"];
  optional int32 priority = 4 [(gogoproto.nullable) = false];
  optional IsolationType isolation = 5 [(gogoproto.nullable) = false];
  optional TransactionStatus status = 6 [(gogoproto.nullable) = false];
  // Incremented on txn retry.
  optional uint32 epoch = 7 [(gogoproto.nullable) = false];
  // The last heartbeat timestamp.
  optional Timestamp last_heartbeat = 8;
  // The proposed timestamp for the transaction. This starts as
  // the current wall time on the txn coordinator.
  optional Timestamp timestamp = 9 [(gogoproto.nullable) = false];
  // The original timestamp at which the transaction started. For serializable
  // transactions, if the timestamp drifts from the original timestamp, the
  // transaction will retry.
  optional Timestamp orig_timestamp = 10 [(gogoproto.nullable) = false];
  // Initial Timestamp + clock skew. Reads which encounter values with
  // timestamps between timestamp and max_timestamp trigger a txn
  // retry error, unless the node being read is listed in certain_nodes
  // (in which case no more read uncertainty can occur).
  // The case max_timestamp < timestamp is possible for transactions which have
  // been pushed; in this case, max_timestamp should be ignored.
  optional Timestamp max_timestamp = 11 [(gogoproto.nullable) = false];
  // A sorted list of ids of nodes for which a ReadWithinUncertaintyIntervalError
  // occurred during a prior read. The purpose of keeping this information is
  // that as a reaction to this error, the transaction's timestamp is forwarded
  // appropriately to reflect that node's clock uncertainty. Future reads to
  // the same node are therefore freed from uncertainty restarts.
  //
  // The exact mechanism is that upon encountering the above error, the trans-
  // action will have to retry with a higher timestamp. This higher timestamp
  // is either the one of the encountered future write returned in the error
  // or (if higher, which is in the majority of cases), the time of the node
  // serving the key at the time of the failed read.
  // Additionally storing the node, we make sure to set max_timestamp=timestamp
  // at the time of the read for nodes whose clock we've taken into account,
  // which amounts to reading without any uncertainty.
  //
  // Bits of this mechanism are found in the local sender, the range and the
  // txn_coord_sender, with brief comments referring here.
  // See https://github.com/cockroachdb/cockroach/pull/221.
  optional NodeList certain_nodes = 12 [(gogoproto.nullable) = false];
  // Writing is true if the transaction has previously executed a successful
  // write request, i.e. a request that may have left intents (across retries).
  optional bool Writing = 13 [(gogoproto.nullable) = false];
  // A one-indexed sequence number which is increased on each batch sent as
  // part of the transaction. Used to prevent replay and out-of-order
  // application protection (by means of a transaction retry).
  optional uint32 Sequence = 14 [(gogoproto.nullable) = false];
  repeated Span Intents = 15 [(gogoproto.nullable) = false];
}

// A Intent is a Span together with a Transaction.
message Intent {
  optional Span span = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional Transaction txn = 2 [(gogoproto.nullable) = false];
}

// Lease contains information about leader leases including the
// expiration and lease holder.
message Lease {
  option (gogoproto.goproto_stringer) = false;

  // The start is a timestamp at which the lease begins. This value
  // must be greater than the last lease expiration or this call will
  // fail.
  optional Timestamp start = 1 [(gogoproto.nullable) = false];
  // The expiration is a timestamp at which the lease will expire.
  optional Timestamp expiration = 2 [(gogoproto.nullable) = false];
  // The address of the would-be lease holder.
  optional ReplicaDescriptor replica = 3 [(gogoproto.nullable) = false];
}

// GCMetadata holds information about the last complete key/value
// garbage collection scan of a range.
message GCMetadata {
  // The last GC scan timestamp in nanoseconds since the Unix epoch.
  optional int64 last_scan_nanos = 1 [(gogoproto.nullable) = false];
  // The oldest unresolved write intent in nanoseconds since epoch.
  // Null if there are no unresolved write intents.
  optional int64 oldest_intent_nanos = 2;
}

// SequenceCacheEntry holds information which together with the key at which
// it is stored suffices to reconstruct the location of the original transaction
// record along with its approximate age.
message SequenceCacheEntry {
  // The key of the associated transaction.
  optional bytes key = 1 [(gogoproto.casttype) = "Key"];
  // The original timestamp of the associated transaction.
  optional Timestamp timestamp = 2 [(gogoproto.nullable) = false];
}
