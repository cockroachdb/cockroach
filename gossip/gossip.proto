// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)

syntax = "proto3";
package cockroach.gossip;
option go_package = "gossip";

import "cockroach/roachpb/data.proto";
import "cockroach/roachpb/metadata.proto";
import "cockroach/util/unresolved_addr.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Request is the request struct passed with the Gossip RPC.
message Request {
  // Requesting node's ID.
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.NodeID"];
  // Address of the requesting client.
  util.UnresolvedAddr addr = 2 [(gogoproto.nullable) = false];
  // Local address of client on requesting node (this is a kludge to
  // allow gossip to know when client connections are dropped).
  util.UnresolvedAddr l_addr = 3 [(gogoproto.nullable) = false];
  // Map of all high water timestamps, by node, seen by the requester.
  map<int32, int64> high_water_stamps = 4;
  // Delta of Infos originating at sender.
  map<string, Info> delta = 5;
}

// Response is returned from the Gossip.Gossip RPC.
// Delta will be nil in the event that Alternate is set.
message Response {
  // Responding Node's ID.
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.NodeID"];
  // Address of the responding client.
  util.UnresolvedAddr addr = 2 [(gogoproto.nullable) = false];
  // Non-nil means client should retry with this address.
  util.UnresolvedAddr alternate = 3;
  // Delta of Infos originating at nodes newer than specified high water timestamps.
  map<string, Info> delta = 4;
  // Map of all high water timestamps, by node, seen by the responder.
  map<int32, int64> high_water_stamps = 5;
}

// Info is the basic unit of information traded over the
// gossip network.
message Info {
  roachpb.Value value = 1 [(gogoproto.nullable) = false];
  // Wall time of info when generated by originating node (Unix-nanos).
  int64 orig_stamp = 2;
  // Wall time when info is to be discarded (Unix-nanos).
  int64 ttl_stamp = 3 [(gogoproto.customname) = "TTLStamp"];
  // Number of hops from originator.
  uint32 hops = 4;
  // Originating node's ID.
  int32 node_id = 5 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.NodeID"];
  // Peer node ID which passed this info.
  int32 peer_id = 6 [(gogoproto.customname) = "PeerID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.NodeID"];
}
