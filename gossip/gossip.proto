// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)

syntax = "proto2";
package cockroach.gossip;
option go_package = "gossip";

import "cockroach/util/unresolved_addr.proto";
import "cockroach/proto/metadata.proto";
import "cockroach/config/config.proto";
import "gogoproto/gogo.proto";

// Request is the request struct passed with the Gossip RPC.
message Request {
  // Requesting node's ID.
  optional int32 node_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/proto.NodeID"];
  // Address of the requesting client.
  optional util.UnresolvedAddr addr = 2 [(gogoproto.nullable) = false];
  // Local address of client on requesting node (this is a kludge to
  // allow gossip to know when client connections are dropped).
  optional util.UnresolvedAddr l_addr = 3 [(gogoproto.nullable) = false];
  // Maximum sequence number of gossip from this peer.
  optional int64 max_seq = 4 [(gogoproto.nullable) = false];
  // Reciprocal delta of new info since last gossip.
  optional bytes delta = 5;
}

// Response is returned from the Gossip.Gossip RPC.
// Delta will be nil in the event that Alternate is set.
message Response {
  // Requested delta of server's infostore.
  optional bytes delta = 1;
  // Non-nil means client should retry with this address.
  optional util.UnresolvedAddr alternate = 2;
}

message InfoStore {
  // Map from key to info
  map<string, Info> infos = 1;
  // Map from key prefix to groups of infos
  map<string, Group> groups = 2;
  // Owning node's ID
  optional int32 node_id = 3 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/proto.NodeID"];
  // Address of node owning this info store: "host:port"
  optional util.UnresolvedAddr node_addr = 4 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NodeAddr"];
  // Maximum sequence number inserted
  optional int64 max_seq = 5 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "MaxSeq"];
}

message Group {
  optional string prefix = 1 [(gogoproto.nullable) = false];
  optional int32 limit = 2 [(gogoproto.nullable) = false];
  optional int32 type_of = 3 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "TypeOf", (gogoproto.casttype) = "GroupType"];
  map <string, Info> infos = 4; 
}

// Info is the basic unit of information traded over the
// gossip network.
// TODO(thschroeter): remove `peer_id` and `seq` that are
// exposing internals and get overwritten as `Info` is
// received.
message Info {
  // Info key
  optional string key = 1 [(gogoproto.nullable) = false];
  // Info value
  optional ValUnion val = 2 [(gogoproto.nullable) = false]; 
  // Wall time at origination (Unix-nanos)
  optional int64 timestamp = 3 [(gogoproto.nullable) = false]; 
  // Wall time before info is discarded (Unix-nanos)
  optional int64 ttl_stamp = 4 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "TTLStamp"];
  // Number of hops from originator
  optional uint32 hops = 5 [(gogoproto.nullable) = false];
  // Originating node's ID
  optional int32 node_id = 6 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/proto.NodeID"];
  optional int32 peer_id = 7 [(gogoproto.nullable) = false,
      (gogoproto.customname) =  "PeerID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/proto.NodeID"];
  optional int64 seq = 8 [(gogoproto.nullable) = false];
}

// ValUnion is the union of all types gossip supports
message ValUnion {
  option (gogoproto.onlyone) = true;
  oneof value {
    int64 int64_val = 1;
    double float_val = 2;
    string string_val = 3;
    proto.StoreDescriptor store_descriptor_val = 4;
    proto.NodeDescriptor  node_descriptor_val = 5;
    proto.RangeDescriptor range_descriptor_val = 6;
    storage.config.PrefixConfigMap prefix_config_map_val = 7;
    TestVal test_val = 8;
  }
}

message TestVal {
  optional int64 val = 1 [(gogoproto.nullable) = false];
}
