// Code generated by protoc-gen-gogo.
// source: cockroach/gossip/gossip.proto
// DO NOT EDIT!

/*
	Package gossip is a generated protocol buffer package.

	It is generated from these files:
		cockroach/gossip/gossip.proto

	It has these top-level messages:
		Request
		Response
		InfoStore
		Group
		Info
		ValUnion
		TestVal
*/
package gossip

import proto "github.com/gogo/protobuf/proto"
import math "math"
import cockroach_util "github.com/cockroachdb/cockroach/util"
import cockroach_proto "github.com/cockroachdb/cockroach/proto"

// discarding unused import gogoproto "gogoproto"

import github_com_cockroachdb_cockroach_proto "github.com/cockroachdb/cockroach/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// Request is the request struct passed with the Gossip RPC.
type Request struct {
	// Requesting node's ID.
	NodeID github_com_cockroachdb_cockroach_proto.NodeID `protobuf:"varint,1,opt,name=node_id,casttype=github.com/cockroachdb/cockroach/proto.NodeID" json:"node_id"`
	// Address of the requesting client.
	Addr cockroach_util.UnresolvedAddr `protobuf:"bytes,2,opt,name=addr" json:"addr"`
	// Local address of client on requesting node (this is a kludge to
	// allow gossip to know when client connections are dropped).
	LAddr cockroach_util.UnresolvedAddr `protobuf:"bytes,3,opt,name=l_addr" json:"l_addr"`
	// Maximum sequence number of gossip from this peer.
	MaxSeq int64 `protobuf:"varint,4,opt,name=max_seq" json:"max_seq"`
	// Reciprocal delta of new info since last gossip.
	Delta            []byte `protobuf:"bytes,5,opt,name=delta" json:"delta,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

func (m *Request) GetNodeID() github_com_cockroachdb_cockroach_proto.NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *Request) GetAddr() cockroach_util.UnresolvedAddr {
	if m != nil {
		return m.Addr
	}
	return cockroach_util.UnresolvedAddr{}
}

func (m *Request) GetLAddr() cockroach_util.UnresolvedAddr {
	if m != nil {
		return m.LAddr
	}
	return cockroach_util.UnresolvedAddr{}
}

func (m *Request) GetMaxSeq() int64 {
	if m != nil {
		return m.MaxSeq
	}
	return 0
}

func (m *Request) GetDelta() []byte {
	if m != nil {
		return m.Delta
	}
	return nil
}

// Response is returned from the Gossip.Gossip RPC.
// Delta will be nil in the event that Alternate is set.
type Response struct {
	// Requested delta of server's infostore.
	Delta []byte `protobuf:"bytes,1,opt,name=delta" json:"delta,omitempty"`
	// Non-nil means client should retry with this address.
	Alternate        *cockroach_util.UnresolvedAddr `protobuf:"bytes,2,opt,name=alternate" json:"alternate,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetDelta() []byte {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (m *Response) GetAlternate() *cockroach_util.UnresolvedAddr {
	if m != nil {
		return m.Alternate
	}
	return nil
}

type InfoStore struct {
	// Map from key to info
	Infos map[string]*Info `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map from key prefix to groups of infos
	Groups map[string]*Group `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Owning node's ID
	NodeID github_com_cockroachdb_cockroach_proto.NodeID `protobuf:"varint,3,opt,name=node_id,casttype=github.com/cockroachdb/cockroach/proto.NodeID" json:"node_id"`
	// Address of node owning this info store: "host:port"
	NodeAddr cockroach_util.UnresolvedAddr `protobuf:"bytes,4,opt,name=node_addr" json:"node_addr"`
	// Maximum sequence number inserted
	MaxSeq           int64  `protobuf:"varint,5,opt,name=max_seq" json:"max_seq"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *InfoStore) Reset()         { *m = InfoStore{} }
func (m *InfoStore) String() string { return proto.CompactTextString(m) }
func (*InfoStore) ProtoMessage()    {}

func (m *InfoStore) GetInfos() map[string]*Info {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *InfoStore) GetGroups() map[string]*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *InfoStore) GetNodeID() github_com_cockroachdb_cockroach_proto.NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *InfoStore) GetNodeAddr() cockroach_util.UnresolvedAddr {
	if m != nil {
		return m.NodeAddr
	}
	return cockroach_util.UnresolvedAddr{}
}

func (m *InfoStore) GetMaxSeq() int64 {
	if m != nil {
		return m.MaxSeq
	}
	return 0
}

type Group struct {
	Prefix           string           `protobuf:"bytes,1,opt,name=prefix" json:"prefix"`
	Limit            int32            `protobuf:"varint,2,opt,name=limit" json:"limit"`
	TypeOf           GroupType        `protobuf:"varint,3,opt,name=type_of,casttype=GroupType" json:"type_of"`
	Infos            map[string]*Info `protobuf:"bytes,4,rep,name=infos" json:"infos,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}

func (m *Group) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Group) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Group) GetTypeOf() GroupType {
	if m != nil {
		return m.TypeOf
	}
	return 0
}

func (m *Group) GetInfos() map[string]*Info {
	if m != nil {
		return m.Infos
	}
	return nil
}

// Info is the basic unit of information traded over the
// gossip network.
type Info struct {
	// Info key
	Key string `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Info value
	Val ValUnion `protobuf:"bytes,2,opt,name=val" json:"val"`
	// Wall time at origination (Unix-nanos)
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp"`
	// Wall time before info is discarded (Unix-nanos)
	TTLStamp int64 `protobuf:"varint,4,opt,name=ttl_stamp" json:"ttl_stamp"`
	// Number of hops from originator
	Hops uint32 `protobuf:"varint,5,opt,name=hops" json:"hops"`
	// Originating node's ID
	NodeID github_com_cockroachdb_cockroach_proto.NodeID `protobuf:"varint,6,opt,name=node_id,casttype=github.com/cockroachdb/cockroach/proto.NodeID" json:"node_id"`
	// TODO(thschroeter): peer_id and seq used to be local fields, added them to the
	// message nevertheless to keep Info flat, neglecting the slight overhead.
	// Otherwise we could write infoContext struct that extends this message with
	// these two fields.
	PeerID           github_com_cockroachdb_cockroach_proto.NodeID `protobuf:"varint,7,opt,name=peer_id,casttype=github.com/cockroachdb/cockroach/proto.NodeID" json:"peer_id"`
	Seq              int64                                         `protobuf:"varint,8,opt,name=seq" json:"seq"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}

func (m *Info) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Info) GetVal() ValUnion {
	if m != nil {
		return m.Val
	}
	return ValUnion{}
}

func (m *Info) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Info) GetTTLStamp() int64 {
	if m != nil {
		return m.TTLStamp
	}
	return 0
}

func (m *Info) GetHops() uint32 {
	if m != nil {
		return m.Hops
	}
	return 0
}

func (m *Info) GetNodeID() github_com_cockroachdb_cockroach_proto.NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *Info) GetPeerID() github_com_cockroachdb_cockroach_proto.NodeID {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *Info) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

// ValUnion is the union of all types gossip supports
type ValUnion struct {
	Int64Val           *int64                           `protobuf:"varint,1,opt,name=int64_val" json:"int64_val,omitempty"`
	FloatVal           *float64                         `protobuf:"fixed64,2,opt,name=float_val" json:"float_val,omitempty"`
	StringVal          *string                          `protobuf:"bytes,3,opt,name=string_val" json:"string_val,omitempty"`
	StoreDescriptorVal *cockroach_proto.StoreDescriptor `protobuf:"bytes,4,opt,name=store_descriptor_val" json:"store_descriptor_val,omitempty"`
	NodeDescriptorVal  *cockroach_proto.NodeDescriptor  `protobuf:"bytes,5,opt,name=node_descriptor_val" json:"node_descriptor_val,omitempty"`
	TestVal            *TestVal                         `protobuf:"bytes,6,opt,name=test_val" json:"test_val,omitempty"`
	XXX_unrecognized   []byte                           `json:"-"`
}

func (m *ValUnion) Reset()         { *m = ValUnion{} }
func (m *ValUnion) String() string { return proto.CompactTextString(m) }
func (*ValUnion) ProtoMessage()    {}

func (m *ValUnion) GetInt64Val() int64 {
	if m != nil && m.Int64Val != nil {
		return *m.Int64Val
	}
	return 0
}

func (m *ValUnion) GetFloatVal() float64 {
	if m != nil && m.FloatVal != nil {
		return *m.FloatVal
	}
	return 0
}

func (m *ValUnion) GetStringVal() string {
	if m != nil && m.StringVal != nil {
		return *m.StringVal
	}
	return ""
}

func (m *ValUnion) GetStoreDescriptorVal() *cockroach_proto.StoreDescriptor {
	if m != nil {
		return m.StoreDescriptorVal
	}
	return nil
}

func (m *ValUnion) GetNodeDescriptorVal() *cockroach_proto.NodeDescriptor {
	if m != nil {
		return m.NodeDescriptorVal
	}
	return nil
}

func (m *ValUnion) GetTestVal() *TestVal {
	if m != nil {
		return m.TestVal
	}
	return nil
}

type TestVal struct {
	Val              int64  `protobuf:"varint,1,opt,name=val" json:"val"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TestVal) Reset()         { *m = TestVal{} }
func (m *TestVal) String() string { return proto.CompactTextString(m) }
func (*TestVal) ProtoMessage()    {}

func (m *TestVal) GetVal() int64 {
	if m != nil {
		return m.Val
	}
	return 0
}

func (this *ValUnion) GetValue() interface{} {
	if this.Int64Val != nil {
		return this.Int64Val
	}
	if this.FloatVal != nil {
		return this.FloatVal
	}
	if this.StringVal != nil {
		return this.StringVal
	}
	if this.StoreDescriptorVal != nil {
		return this.StoreDescriptorVal
	}
	if this.NodeDescriptorVal != nil {
		return this.NodeDescriptorVal
	}
	if this.TestVal != nil {
		return this.TestVal
	}
	return nil
}

func (this *ValUnion) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *int64:
		this.Int64Val = vt
	case *float64:
		this.FloatVal = vt
	case *string:
		this.StringVal = vt
	case *cockroach_proto.StoreDescriptor:
		this.StoreDescriptorVal = vt
	case *cockroach_proto.NodeDescriptor:
		this.NodeDescriptorVal = vt
	case *TestVal:
		this.TestVal = vt
	default:
		return false
	}
	return true
}
