// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto2";
package cockroach.config;
option go_package = "config";

import "cockroach/pkg/roachpb/data.proto";
import "cockroach/pkg/roachpb/metadata.proto";
import "gogoproto/gogo.proto";

// GCPolicy defines garbage collection policies which apply to MVCC
// values within a zone.
//
// TODO(spencer): flesh this out to include maximum number of values
//   as well as whether there's an intersection between max values
//   and TTL or a union.
message GCPolicy {
  option (gogoproto.equal) = true;

  // TTLSeconds specifies the maximum age of a value before it's
  // garbage collected. Only older versions of values are garbage
  // collected. Specifying <=0 mean older versions are never GC'd.
  optional int32 ttl_seconds = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "TTLSeconds"];
}

// Constraint constrains the stores a replica can be stored on.
message Constraint {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  enum Type {
    // POSITIVE will attempt to ensure all stores the replicas are on has this
    // constraint.
    POSITIVE = 0;
    // REQUIRED is like POSITIVE except replication will fail if not satisfied.
    REQUIRED = 1;
    // PROHIBITED will prevent replicas from having this key, value.
    PROHIBITED = 2;
  }
  optional Type type = 1 [(gogoproto.nullable) = false];
  // Key is only set if this is a constraint on locality.
  optional string key = 2 [(gogoproto.nullable) = false];
  // Value to constrain to.
  optional string value = 3 [(gogoproto.nullable) = false];
}

// Constraints is a collection of constraints.
message Constraints {
  option (gogoproto.equal) = true;

  repeated Constraint constraints = 6 [(gogoproto.nullable) = false];
}

// ZoneConfig holds configuration that applies to one or more ranges.
message ZoneConfig {
  option (gogoproto.equal) = true;

  reserved 1;
  optional int64 range_min_bytes = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"range_min_bytes\""];
  optional int64 range_max_bytes = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"range_max_bytes\""];
  // If GC policy is not set, uses the next highest, non-null policy
  // in the zone config hierarchy, up to the default policy if necessary.
  optional GCPolicy gc = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "GC"];
  // NumReplicas specifies the desired number of replicas
  optional int32 num_replicas = 5 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"num_replicas\""];
  // Constraints constrains which stores the replicas can be stored on. The
  // order in which the constraints are stored is arbitrary and may change.
  // https://github.com/cockroachdb/cockroach/blob/master/docs/RFCS/20160706_expressive_zone_config.md#constraint-system
  optional Constraints constraints = 6 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"constraints,flow\""];

  // subzones stores config overrides for "subzones", each of which represents
  // either an index or a partition of an index. Subzones are not applicable
  // when the zone does not represent a table.
  repeated Subzone subzones = 8 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"-\""];

  // subzone_spans maps each key span in a subzone to the index of an entry in
  // SubzoneConfig. Spans are non-overlapping and sorted by start key to allow
  // binary searching.
  repeated SubzoneSpan subzone_spans = 7 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"-\""];
}

message Subzone {
  option (gogoproto.equal) = true;

  // index_id is the ID of the index that the subzone represents.
  optional uint32 index_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "IndexID"];
  // partition_name is the partition of the index that the subzone represents.
  // It is empty when the subzone represents the entire index.
  optional string partition_name = 2 [(gogoproto.nullable) = false];
  optional ZoneConfig config = 3 [(gogoproto.nullable) = false];
}

message SubzoneSpan {
  option (gogoproto.equal) = true;

  optional roachpb.Span span = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional int32 subzone_index = 2 [(gogoproto.nullable) = false];
}

message SystemConfig {
  repeated roachpb.KeyValue values = 1 [(gogoproto.nullable) = false];
}
