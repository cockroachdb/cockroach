// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Tamir Duberstein (tamird@gmail.com)

syntax = "proto2";
package cockroach.config;
option go_package = "config";

import "cockroach/pkg/roachpb/data.proto";
import "cockroach/pkg/roachpb/metadata.proto";
import "gogoproto/gogo.proto";

// GCPolicy defines garbage collection policies which apply to MVCC
// values within a zone.
//
// TODO(spencer): flesh this out to include maximum number of values
//   as well as whether there's an intersection between max values
//   and TTL or a union.
message GCPolicy {
  // TTLSeconds specifies the maximum age of a value before it's
  // garbage collected. Only older versions of values are garbage
  // collected. Specifying <=0 mean older versions are never GC'd.
  optional int32 ttl_seconds = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "TTLSeconds"];
}

// Constraint constrains the stores a replica can be stored on.
message Constraint {
  option (gogoproto.goproto_stringer) = false;

  enum Type {
    // POSITIVE will attempt to ensure all stores the replicas are on has this
    // constraint.
    POSITIVE = 0;
    // REQUIRED is like POSITIVE except replication will fail if not satisfied.
    REQUIRED = 1;
    // PROHIBITED will prevent replicas from having this key, value.
    PROHIBITED = 2;
  }
  optional Type type = 1 [(gogoproto.nullable) = false];
  // Key is only set if this is a constraint on locality.
  optional string key = 2 [(gogoproto.nullable) = false];
  // Value to constrain to.
  optional string value = 3 [(gogoproto.nullable) = false];
}

// Constraints is a collection of constraints.
message Constraints {
  repeated Constraint constraints = 6 [(gogoproto.nullable) = false];
}

// ZoneConfig holds configuration that is needed for a range of KV pairs. This
// and the conversion methods must stay in sync with ZoneConfigHuman.
message ZoneConfig {
  // TODO(d4l3k): Remove replica_attrs after a sufficient amount of time has passed.
  repeated roachpb.Attributes replica_attrs = 1 [deprecated = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\",omitempty\""];
  optional int64 range_min_bytes = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"range_min_bytes\""];
  optional int64 range_max_bytes = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"range_max_bytes\""];
  // If GC policy is not set, uses the next highest, non-null policy
  // in the zone config hierarchy, up to the default policy if necessary.
  optional GCPolicy gc = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "GC"];
  // NumReplicas specifies the desired number of replicas
  optional int32 num_replicas = 5 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"num_replicas\""];
  // Constraints constrains which stores the replicas can be stored on. The
  // order in which the constraints are stored is arbitrary and may change.
  // https://github.com/cockroachdb/cockroach/blob/master/docs/RFCS/expressive_zone_config.md#constraint-system
  optional Constraints constraints = 6 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"constraints,flow\""];
}

message SystemConfig {
  repeated roachpb.KeyValue values = 1 [(gogoproto.nullable) = false];
}
