// Copyright 2014 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto2";
package cockroach.roachpb;
option go_package = "roachpb";

import "util/hlc/timestamp.proto";
import "gogoproto/gogo.proto";

// RaftTruncatedState contains metadata about the truncated portion of the raft log.
// Raft requires access to the term of the last truncated log entry even after the
// rest of the entry has been discarded.
message RaftTruncatedState {
  option (gogoproto.equal) = true;
  option (gogoproto.populate) = true;

  // The highest index that has been removed from the log.
  optional uint64 index = 1 [(gogoproto.nullable) = false];
  // The term corresponding to 'index'.
  optional uint64 term = 2 [(gogoproto.nullable) = false];
}

// RaftTombstone contains information about a replica that has been deleted.
message RaftTombstone {
  optional int32 next_replica_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextReplicaID", (gogoproto.casttype) = "ReplicaID"];
}

// RaftSnapshotData is the payload of a raftpb.Snapshot. It contains a raw copy of
// all of the range's data and metadata, including the raft log, abort span, etc.
message RaftSnapshotData {
  message KeyValue {
    optional bytes key = 1;
    optional bytes value = 2;
    optional util.hlc.Timestamp timestamp = 3 [(gogoproto.nullable) = false];
  }
  repeated KeyValue KV = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "KV"];
  // These are really raftpb.Entry, but we model them as raw bytes to avoid
  // roundtripping through memory.
  repeated bytes log_entries = 3;
  reserved 1;
}
