// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roachpb/metadata3.proto

package roachpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RangeDescriptor is the value stored in a range metadata key.
// A range is described using an inclusive start key, a non-inclusive end key,
// and a list of replicas where the range is stored.
//
// NOTE: Care must be taken when changing the encoding of this proto
// because it is used as part of conditional put operations.
type RangeDescriptor struct {
	RangeID RangeID `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=RangeID" json:"range_id,omitempty"`
	// start_key is the first key which may be contained by this range.
	StartKey RKey `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3,casttype=RKey" json:"start_key,omitempty"`
	// end_key marks the end of the range's possible keys.  EndKey itself is not
	// contained in this range - it will be contained in the immediately
	// subsequent range.
	EndKey RKey `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3,casttype=RKey" json:"end_key,omitempty"`
	// replicas is the set of nodes/stores on which replicas of this
	// range are stored, the ordering being arbitrary and subject to
	// permutation.
	Replicas []ReplicaDescriptor `protobuf:"bytes,4,rep,name=replicas" json:"replicas"`
	// next_replica_id is a counter used to generate replica IDs.
	NextReplicaID ReplicaID `protobuf:"varint,5,opt,name=next_replica_id,json=nextReplicaId,proto3,casttype=ReplicaID" json:"next_replica_id,omitempty"`
	// generation is incremented on every split and every merge, i.e., whenever
	// the end_key of this range changes. It is initialized to zero when the
	// range is first created.
	//
	// Note that the generation counter is not incremented by versions of
	// Cockroach prior to v2.1.
	Generation int64 `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (m *RangeDescriptor) Reset()                    { *m = RangeDescriptor{} }
func (*RangeDescriptor) ProtoMessage()               {}
func (*RangeDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorMetadata3, []int{0} }

func init() {
	proto.RegisterType((*RangeDescriptor)(nil), "cockroach.roachpb.RangeDescriptor")
}
func (this *RangeDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RangeDescriptor)
	if !ok {
		that2, ok := that.(RangeDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RangeID != that1.RangeID {
		return false
	}
	if !bytes.Equal(this.StartKey, that1.StartKey) {
		return false
	}
	if !bytes.Equal(this.EndKey, that1.EndKey) {
		return false
	}
	if len(this.Replicas) != len(that1.Replicas) {
		return false
	}
	for i := range this.Replicas {
		if !this.Replicas[i].Equal(&that1.Replicas[i]) {
			return false
		}
	}
	if this.NextReplicaID != that1.NextReplicaID {
		return false
	}
	if this.Generation != that1.Generation {
		return false
	}
	return true
}
func (m *RangeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetadata3(dAtA, i, uint64(m.RangeID))
	}
	if len(m.StartKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetadata3(dAtA, i, uint64(len(m.StartKey)))
		i += copy(dAtA[i:], m.StartKey)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetadata3(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	if len(m.Replicas) > 0 {
		for _, msg := range m.Replicas {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMetadata3(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NextReplicaID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMetadata3(dAtA, i, uint64(m.NextReplicaID))
	}
	if m.Generation != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMetadata3(dAtA, i, uint64(m.Generation))
	}
	return i, nil
}

func encodeVarintMetadata3(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRangeDescriptor(r randyMetadata3, easy bool) *RangeDescriptor {
	this := &RangeDescriptor{}
	this.RangeID = RangeID(r.Int63())
	if r.Intn(2) == 0 {
		this.RangeID *= -1
	}
	v1 := r.Intn(100)
	this.StartKey = make(RKey, v1)
	for i := 0; i < v1; i++ {
		this.StartKey[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.EndKey = make(RKey, v2)
	for i := 0; i < v2; i++ {
		this.EndKey[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Replicas = make([]ReplicaDescriptor, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedReplicaDescriptor(r, easy)
			this.Replicas[i] = *v4
		}
	}
	this.NextReplicaID = ReplicaID(r.Int31())
	if r.Intn(2) == 0 {
		this.NextReplicaID *= -1
	}
	this.Generation = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Generation *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMetadata3 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMetadata3(r randyMetadata3) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMetadata3(r randyMetadata3) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneMetadata3(r)
	}
	return string(tmps)
}
func randUnrecognizedMetadata3(r randyMetadata3, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMetadata3(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMetadata3(dAtA []byte, r randyMetadata3, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMetadata3(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateMetadata3(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateMetadata3(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMetadata3(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMetadata3(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMetadata3(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMetadata3(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RangeDescriptor) Size() (n int) {
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovMetadata3(uint64(m.RangeID))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovMetadata3(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovMetadata3(uint64(l))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovMetadata3(uint64(l))
		}
	}
	if m.NextReplicaID != 0 {
		n += 1 + sovMetadata3(uint64(m.NextReplicaID))
	}
	if m.Generation != 0 {
		n += 1 + sovMetadata3(uint64(m.Generation))
	}
	return n
}

func sovMetadata3(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetadata3(x uint64) (n int) {
	return sovMetadata3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RangeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= (RangeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata3
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata3
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata3
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, ReplicaDescriptor{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextReplicaID", wireType)
			}
			m.NextReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextReplicaID |= (ReplicaID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generation", wireType)
			}
			m.Generation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Generation |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetadata3
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetadata3
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetadata3(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetadata3 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata3   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("roachpb/metadata3.proto", fileDescriptorMetadata3) }

var fileDescriptorMetadata3 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbf, 0x6e, 0xea, 0x30,
	0x18, 0xc5, 0x63, 0xfe, 0x25, 0xf8, 0x82, 0xd0, 0x8d, 0xae, 0xb8, 0x11, 0x83, 0x1d, 0xae, 0x6e,
	0xa5, 0x4c, 0x41, 0x2d, 0x5b, 0xc7, 0x08, 0x21, 0x21, 0xa4, 0x0e, 0x1e, 0xbb, 0x20, 0x93, 0x58,
	0x69, 0x44, 0x6b, 0x47, 0xc6, 0x03, 0xbc, 0x45, 0xc7, 0x8e, 0x3c, 0x46, 0x1f, 0x81, 0xa1, 0x43,
	0xc7, 0x4e, 0x51, 0x9b, 0x2e, 0x7d, 0x06, 0xa6, 0x2a, 0x26, 0x02, 0x44, 0xb7, 0xe3, 0x73, 0x7e,
	0xfe, 0xf4, 0x9d, 0x0f, 0xfe, 0x95, 0x82, 0x86, 0x77, 0xe9, 0x7c, 0xf0, 0xc0, 0x14, 0x8d, 0xa8,
	0xa2, 0x43, 0x3f, 0x95, 0x42, 0x09, 0xfb, 0x77, 0x28, 0xc2, 0x85, 0x0e, 0xfd, 0x12, 0xe9, 0x75,
	0xcf, 0xd9, 0x3d, 0xda, 0xfb, 0x13, 0x8b, 0x58, 0x68, 0x39, 0x28, 0xd4, 0xde, 0xfd, 0xf7, 0x52,
	0x81, 0x1d, 0x42, 0x79, 0xcc, 0x46, 0x6c, 0x19, 0xca, 0x24, 0x55, 0x42, 0xda, 0x97, 0xd0, 0x92,
	0x85, 0x35, 0x4b, 0x22, 0x07, 0xb8, 0xc0, 0xab, 0x06, 0xdd, 0x3c, 0xc3, 0xa6, 0xc6, 0x26, 0xa3,
	0xdd, 0x51, 0x12, 0x53, 0x73, 0x93, 0xc8, 0xbe, 0x80, 0xcd, 0xa5, 0xa2, 0x52, 0xcd, 0x16, 0x6c,
	0xed, 0x54, 0x5c, 0xe0, 0xb5, 0x02, 0x6b, 0x97, 0xe1, 0x1a, 0x99, 0xb2, 0x35, 0xb1, 0x74, 0x34,
	0x65, 0x6b, 0xbb, 0x0f, 0x4d, 0xc6, 0x23, 0x0d, 0x55, 0xcf, 0xa0, 0x06, 0xe3, 0x51, 0x81, 0x8c,
	0xa1, 0x25, 0x59, 0x7a, 0x9f, 0x84, 0x74, 0xe9, 0xd4, 0xdc, 0xaa, 0xf7, 0xeb, 0xea, 0xbf, 0xff,
	0xa3, 0xa4, 0x4f, 0xf6, 0xc8, 0x71, 0xe9, 0xa0, 0xb6, 0xcd, 0xb0, 0x41, 0x0e, 0x7f, 0xed, 0x31,
	0xec, 0x70, 0xb6, 0x52, 0xb3, 0xd2, 0x28, 0xba, 0xd4, 0x5d, 0xe0, 0xd5, 0x03, 0x94, 0x67, 0xb8,
	0x7d, 0xc3, 0x56, 0xaa, 0x9c, 0xa1, 0x1b, 0x35, 0x0f, 0x0f, 0xd2, 0xe6, 0x27, 0x59, 0x64, 0x23,
	0x08, 0x63, 0xc6, 0x99, 0xa4, 0x2a, 0x11, 0xdc, 0x69, 0x14, 0xe7, 0x20, 0x27, 0xce, 0x75, 0xeb,
	0x69, 0x83, 0x8d, 0xe7, 0x0d, 0x06, 0x5f, 0x1b, 0x0c, 0x82, 0xfe, 0xf6, 0x03, 0x19, 0xdb, 0x1c,
	0x81, 0xd7, 0x1c, 0x81, 0xb7, 0x1c, 0x81, 0xf7, 0x1c, 0x81, 0xc7, 0x4f, 0x64, 0xdc, 0x9a, 0xe5,
	0xea, 0xf3, 0x86, 0x3e, 0xfc, 0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xd9, 0xea, 0xb3, 0xd4,
	0x01, 0x00, 0x00,
}
