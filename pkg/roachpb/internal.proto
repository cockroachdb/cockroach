// Copyright 2014 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

// Cannot be proto3 because we depend on absent-vs-empty distinction.
syntax = "proto2";
package cockroach.roachpb;
option go_package = "roachpb";

import "gogoproto/gogo.proto";

// InternalTimeSeriesData is a collection of data samples for some
// measurable value, where each sample is taken over a uniform time
// interval.
//
// The collection itself contains a start timestamp (in seconds since the unix
// epoch) and a sample duration (in milliseconds). Each sample in the collection
// will contain a positive integer offset that indicates the length of time
// between the start_timestamp of the collection and the time when the sample
// began, expressed as an whole number of sample intervals. For example, if the
// sample duration is 60000 (indicating 1 minute), then a contained sample with
// an offset value of 5 begins (5*60000ms = 300000ms = 5 minutes) after the
// start timestamp of this data.
//
// This is meant to be an efficient internal representation of time series data,
// ensuring that very little redundant data is stored on disk. With this goal in
// mind, this message does not identify the variable which is actually being
// measured; that information is expected be encoded in the key where this
// message is stored.
//
// The actual samples can be stored in one of two formats: a Row-based format in
// the "samples" repeated field, or a columnar format spread across several
// different repeated columns. The row-based format will eventually be
// deprecated, but is maintained for backwards compatibility. There is no flag
// that indicates whether the data is stored as rows or columns; columnar data
// is indicated by the presence of a non-zero-length "offset" collection, while
// row data is indicated by a non-zero-length "samples" collection. Each data
// message must have all of its data either row format or column format.
//
// One feature of the columnar layout is that it is "sparse", and columns
// without useful information are elided. Specifically, the "offset" and "last"
// columns will always be populated, but the other columns are only populated
// for resolutions which contain detailed "rollup" information about long sample
// periods. In the case of non-rollup data there is only one measurement per
// sample period, and the value of all optional columns can be directly inferred
// from the "last" column. Eliding those columns represents a significant memory
// and on-disk savings for our highest resolution data.
message InternalTimeSeriesData {
  option (gogoproto.populate) = true;

  // Holds a wall time, expressed as a unix epoch time in nanoseconds. This
  // represents the earliest possible timestamp for a sample within the
  // collection.
  optional int64 start_timestamp_nanos = 1 [(gogoproto.nullable) = false];
  // The duration of each sample interval, expressed in nanoseconds.
  optional int64 sample_duration_nanos = 2 [(gogoproto.nullable) = false];
  // The data samples for this metric if this data was written in the old
  // row format.
  repeated InternalTimeSeriesSample samples = 3 [(gogoproto.nullable) = false, deprecated=true];
  // Columnar array containing the ordered offsets of the samples in this
  // data set.
  repeated int32 offset = 4 [packed=true];
  // Columnar array containing the last value of the samples in this data set;
  // the "last" value is the most recent individual measurement during a sample
  // period.
  repeated double last = 5 [packed=true];
  // Columnar array containing the total number of measurements that were taken
  // during this sample period.
  repeated uint32 count = 6 [packed=true];
  // Columnar array containing the sum of measurements that were taken during
  // this sample period. If this column is elided, its value for all samples is
  // 1.
  repeated double sum = 7 [packed=true];
  // Columnar array containing the maximum value of any single measurement taken
  // during this sample period. If this column is elided, its value for all
  // samples is equal to "last".
  repeated double max = 8 [packed=true];
  // Columnar array containing the minimum value of any single measurements
  // taken during this sample period. If this column is elided, its value for
  // all samples is equal to "last".
  repeated double min = 9 [packed=true];
  // Columnar array containing the first value of the samples in this data set;
  // the "first" value is the earliest individual measurement during a sample
  // period. If this column is elided, its value for all samples is equal to
  // "last".
  repeated double first = 10 [packed=true];
  // Columnar array containing the variance of measurements that were taken
  // during this sample period. If this column is elided, its value for all
  // samples is zero.
  repeated double variance = 11 [packed=true];
}

// A InternalTimeSeriesSample represents data gathered from multiple
// measurements of a variable value over a given period of time. The
// length of that period of time is stored in an
// InternalTimeSeriesData message; a sample cannot be interpreted
// correctly without a start timestamp and sample duration.
//
// Each sample may contain data gathered from multiple measurements of the same
// variable, as long as all of those measurements occurred within the sample
// period. The sample stores several aggregated values from these measurements:
// - The sum of all measured values
// - A count of all measurements taken
// - The maximum individual measurement seen
// - The minimum individual measurement seen
//
// If zero measurements are present in a sample, then it should be omitted
// entirely from any collection it would be a part of.
//
// If the count of measurements is 1, then max and min fields may be omitted
// and assumed equal to the sum field.
message InternalTimeSeriesSample {
  option (gogoproto.populate) = true;

  // Temporal offset from the "start_timestamp" of the InternalTimeSeriesData
  // collection this data point is part in. The units of this value are
  // determined by the value of the "sample_duration_milliseconds" field of
  // the TimeSeriesData collection.
  optional int32 offset = 1 [(gogoproto.nullable) = false];
  // Sum of all measurements.
  optional double sum = 7 [(gogoproto.nullable) = false];

  //  The following fields are deprecated, and remain only for backwards
  //  compatibility; time series samples are no longer accumulated in the
  //  engine, and instead each sample period is limited to a single sample. As a
  //  result, Max and Min are no longer populated, and Count will always be
  //  equal to 1.

  // Count of measurements taken within this sample.
  optional uint32 count = 6 [(gogoproto.nullable) = false];
  // Maximum encountered measurement in this sample.
  optional double max = 8;
  // Minimum encountered measurement in this sample.
  optional double min = 9;
}
