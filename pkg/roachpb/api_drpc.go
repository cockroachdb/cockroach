// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.26
// source: roachpb/api.proto

package roachpb

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_roachpb_api_proto struct{}

func (drpcEncoding_File_roachpb_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_roachpb_api_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_roachpb_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_roachpb_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_roachpb_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCInternalClient interface {
	DRPCConn() drpc.Conn

	Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error)
	RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error)
	RangeFeed(ctx context.Context, in *RangeFeedRequest) (DRPCInternal_RangeFeedClient, error)
	GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (DRPCInternal_GossipSubscriptionClient, error)
	ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error)
	TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error)
	Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error)
	GetSpanConfigs(ctx context.Context, in *GetSpanConfigsRequest) (*GetSpanConfigsResponse, error)
	UpdateSpanConfigs(ctx context.Context, in *UpdateSpanConfigsRequest) (*UpdateSpanConfigsResponse, error)
}

type drpcInternalClient struct {
	cc drpc.Conn
}

func NewDRPCInternalClient(cc drpc.Conn) DRPCInternalClient {
	return &drpcInternalClient{cc}
}

func (c *drpcInternalClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcInternalClient) Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/Batch", drpcEncoding_File_roachpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error) {
	out := new(RangeLookupResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/RangeLookup", drpcEncoding_File_roachpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) RangeFeed(ctx context.Context, in *RangeFeedRequest) (DRPCInternal_RangeFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.Internal/RangeFeed", drpcEncoding_File_roachpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcInternal_RangeFeedClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCInternal_RangeFeedClient interface {
	drpc.Stream
	Recv() (*RangeFeedEvent, error)
}

type drpcInternal_RangeFeedClient struct {
	drpc.Stream
}

func (x *drpcInternal_RangeFeedClient) Recv() (*RangeFeedEvent, error) {
	m := new(RangeFeedEvent)
	if err := x.MsgRecv(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_RangeFeedClient) RecvMsg(m *RangeFeedEvent) error {
	return x.MsgRecv(m, drpcEncoding_File_roachpb_api_proto{})
}

func (c *drpcInternalClient) GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (DRPCInternal_GossipSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.Internal/GossipSubscription", drpcEncoding_File_roachpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcInternal_GossipSubscriptionClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCInternal_GossipSubscriptionClient interface {
	drpc.Stream
	Recv() (*GossipSubscriptionEvent, error)
}

type drpcInternal_GossipSubscriptionClient struct {
	drpc.Stream
}

func (x *drpcInternal_GossipSubscriptionClient) Recv() (*GossipSubscriptionEvent, error) {
	m := new(GossipSubscriptionEvent)
	if err := x.MsgRecv(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_GossipSubscriptionClient) RecvMsg(m *GossipSubscriptionEvent) error {
	return x.MsgRecv(m, drpcEncoding_File_roachpb_api_proto{})
}

func (c *drpcInternalClient) ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	out := new(ResetQuorumResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/ResetQuorum", drpcEncoding_File_roachpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error) {
	out := new(TokenBucketResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/TokenBucket", drpcEncoding_File_roachpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error) {
	out := new(JoinNodeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/Join", drpcEncoding_File_roachpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) GetSpanConfigs(ctx context.Context, in *GetSpanConfigsRequest) (*GetSpanConfigsResponse, error) {
	out := new(GetSpanConfigsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/GetSpanConfigs", drpcEncoding_File_roachpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) UpdateSpanConfigs(ctx context.Context, in *UpdateSpanConfigsRequest) (*UpdateSpanConfigsResponse, error) {
	out := new(UpdateSpanConfigsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/UpdateSpanConfigs", drpcEncoding_File_roachpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCInternalServer interface {
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	RangeLookup(context.Context, *RangeLookupRequest) (*RangeLookupResponse, error)
	RangeFeed(*RangeFeedRequest, DRPCInternal_RangeFeedStream) error
	GossipSubscription(*GossipSubscriptionRequest, DRPCInternal_GossipSubscriptionStream) error
	ResetQuorum(context.Context, *ResetQuorumRequest) (*ResetQuorumResponse, error)
	TokenBucket(context.Context, *TokenBucketRequest) (*TokenBucketResponse, error)
	Join(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error)
	GetSpanConfigs(context.Context, *GetSpanConfigsRequest) (*GetSpanConfigsResponse, error)
	UpdateSpanConfigs(context.Context, *UpdateSpanConfigsRequest) (*UpdateSpanConfigsResponse, error)
}

type DRPCInternalUnimplementedServer struct{}

func (s *DRPCInternalUnimplementedServer) Batch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) RangeLookup(context.Context, *RangeLookupRequest) (*RangeLookupResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) RangeFeed(*RangeFeedRequest, DRPCInternal_RangeFeedStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) GossipSubscription(*GossipSubscriptionRequest, DRPCInternal_GossipSubscriptionStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) ResetQuorum(context.Context, *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) TokenBucket(context.Context, *TokenBucketRequest) (*TokenBucketResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) Join(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) GetSpanConfigs(context.Context, *GetSpanConfigsRequest) (*GetSpanConfigsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) UpdateSpanConfigs(context.Context, *UpdateSpanConfigsRequest) (*UpdateSpanConfigsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCInternalDescription struct{}

func (DRPCInternalDescription) NumMethods() int { return 9 }

func (DRPCInternalDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.Internal/Batch", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					Batch(
						ctx,
						in1.(*BatchRequest),
					)
			}, DRPCInternalServer.Batch, true
	case 1:
		return "/cockroach.roachpb.Internal/RangeLookup", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					RangeLookup(
						ctx,
						in1.(*RangeLookupRequest),
					)
			}, DRPCInternalServer.RangeLookup, true
	case 2:
		return "/cockroach.roachpb.Internal/RangeFeed", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCInternalServer).
					RangeFeed(
						in1.(*RangeFeedRequest),
						&drpcInternal_RangeFeedStream{in2.(drpc.Stream)},
					)
			}, DRPCInternalServer.RangeFeed, true
	case 3:
		return "/cockroach.roachpb.Internal/GossipSubscription", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCInternalServer).
					GossipSubscription(
						in1.(*GossipSubscriptionRequest),
						&drpcInternal_GossipSubscriptionStream{in2.(drpc.Stream)},
					)
			}, DRPCInternalServer.GossipSubscription, true
	case 4:
		return "/cockroach.roachpb.Internal/ResetQuorum", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					ResetQuorum(
						ctx,
						in1.(*ResetQuorumRequest),
					)
			}, DRPCInternalServer.ResetQuorum, true
	case 5:
		return "/cockroach.roachpb.Internal/TokenBucket", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					TokenBucket(
						ctx,
						in1.(*TokenBucketRequest),
					)
			}, DRPCInternalServer.TokenBucket, true
	case 6:
		return "/cockroach.roachpb.Internal/Join", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					Join(
						ctx,
						in1.(*JoinNodeRequest),
					)
			}, DRPCInternalServer.Join, true
	case 7:
		return "/cockroach.roachpb.Internal/GetSpanConfigs", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					GetSpanConfigs(
						ctx,
						in1.(*GetSpanConfigsRequest),
					)
			}, DRPCInternalServer.GetSpanConfigs, true
	case 8:
		return "/cockroach.roachpb.Internal/UpdateSpanConfigs", drpcEncoding_File_roachpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					UpdateSpanConfigs(
						ctx,
						in1.(*UpdateSpanConfigsRequest),
					)
			}, DRPCInternalServer.UpdateSpanConfigs, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterInternal(mux drpc.Mux, impl DRPCInternalServer) error {
	return mux.Register(impl, DRPCInternalDescription{})
}

type DRPCInternal_BatchStream interface {
	drpc.Stream
	SendAndClose(*BatchResponse) error
}

type drpcInternal_BatchStream struct {
	drpc.Stream
}

func (x *drpcInternal_BatchStream) SendAndClose(m *BatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_RangeLookupStream interface {
	drpc.Stream
	SendAndClose(*RangeLookupResponse) error
}

type drpcInternal_RangeLookupStream struct {
	drpc.Stream
}

func (x *drpcInternal_RangeLookupStream) SendAndClose(m *RangeLookupResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_RangeFeedStream interface {
	drpc.Stream
	Send(*RangeFeedEvent) error
}

type drpcInternal_RangeFeedStream struct {
	drpc.Stream
}

func (x *drpcInternal_RangeFeedStream) Send(m *RangeFeedEvent) error {
	return x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{})
}

type DRPCInternal_GossipSubscriptionStream interface {
	drpc.Stream
	Send(*GossipSubscriptionEvent) error
}

type drpcInternal_GossipSubscriptionStream struct {
	drpc.Stream
}

func (x *drpcInternal_GossipSubscriptionStream) Send(m *GossipSubscriptionEvent) error {
	return x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{})
}

type DRPCInternal_ResetQuorumStream interface {
	drpc.Stream
	SendAndClose(*ResetQuorumResponse) error
}

type drpcInternal_ResetQuorumStream struct {
	drpc.Stream
}

func (x *drpcInternal_ResetQuorumStream) SendAndClose(m *ResetQuorumResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_TokenBucketStream interface {
	drpc.Stream
	SendAndClose(*TokenBucketResponse) error
}

type drpcInternal_TokenBucketStream struct {
	drpc.Stream
}

func (x *drpcInternal_TokenBucketStream) SendAndClose(m *TokenBucketResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_JoinStream interface {
	drpc.Stream
	SendAndClose(*JoinNodeResponse) error
}

type drpcInternal_JoinStream struct {
	drpc.Stream
}

func (x *drpcInternal_JoinStream) SendAndClose(m *JoinNodeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_GetSpanConfigsStream interface {
	drpc.Stream
	SendAndClose(*GetSpanConfigsResponse) error
}

type drpcInternal_GetSpanConfigsStream struct {
	drpc.Stream
}

func (x *drpcInternal_GetSpanConfigsStream) SendAndClose(m *GetSpanConfigsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_UpdateSpanConfigsStream interface {
	drpc.Stream
	SendAndClose(*UpdateSpanConfigsResponse) error
}

type drpcInternal_UpdateSpanConfigsStream struct {
	drpc.Stream
}

func (x *drpcInternal_UpdateSpanConfigsStream) SendAndClose(m *UpdateSpanConfigsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_roachpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
