// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roachpb/index_usage_stats.proto

package roachpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IndexUsageStatistics represents the index usage statistics per index.
// N.B. When fields are added to this struct, make sure to update
// (*IndexUsageStatistics).Add in roachpb/index_usage_stats.go.
type IndexUsageStatistics struct {
	// TotalReadCount is the number of times this index is being read from.
	TotalReadCount uint64 `protobuf:"varint,1,opt,name=total_read_count,json=totalReadCount" json:"total_read_count"`
	// LastRead is the timestamp that this index is last being read from.
	LastRead time.Time `protobuf:"bytes,2,opt,name=last_read,json=lastRead,stdtime" json:"last_read"`
	// TotalRowsRead is the number rows that has read from this index.
	// TODO(azhng): Currently this field is unused.
	TotalRowsRead uint64 `protobuf:"varint,3,opt,name=total_rows_read,json=totalRowsRead" json:"total_rows_read"`
	// TotalWriteCount is the number of times this index is being written to.
	// TODO(azhng): Currently this field is unused.
	TotalWriteCount uint64 `protobuf:"varint,4,opt,name=total_write_count,json=totalWriteCount" json:"total_write_count"`
	// LastWrite is the timestamp that this index is last being written to.
	// TODO(azhng): Currently this field is unused.
	LastWrite time.Time `protobuf:"bytes,5,opt,name=last_write,json=lastWrite,stdtime" json:"last_write"`
	// TotalRowsWrite is the number rows that has written to this index.
	// TODO(azhng): Currently this field is unused.
	TotalRowsWrite uint64 `protobuf:"varint,6,opt,name=total_rows_write,json=totalRowsWrite" json:"total_rows_write"`
}

func (m *IndexUsageStatistics) Reset()         { *m = IndexUsageStatistics{} }
func (m *IndexUsageStatistics) String() string { return proto.CompactTextString(m) }
func (*IndexUsageStatistics) ProtoMessage()    {}
func (*IndexUsageStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_7523d71560a74d6c, []int{0}
}
func (m *IndexUsageStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexUsageStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexUsageStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexUsageStatistics.Merge(m, src)
}
func (m *IndexUsageStatistics) XXX_Size() int {
	return m.Size()
}
func (m *IndexUsageStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexUsageStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_IndexUsageStatistics proto.InternalMessageInfo

// IndexUsageKey uniquely identifies an index. It's a tuple of TableID and a
// IndexID.
type IndexUsageKey struct {
	// TableID is the ID of the table this index is created on. This is same as
	// descpb.TableID and is unique within the cluster.
	TableID TableID `protobuf:"varint,1,opt,name=table_id,json=tableId,casttype=TableID" json:"table_id"`
	// IndexID is the ID of the index within the scope of the given table.
	IndexID IndexID `protobuf:"varint,2,opt,name=index_id,json=indexId,casttype=IndexID" json:"index_id"`
}

func (m *IndexUsageKey) Reset()         { *m = IndexUsageKey{} }
func (m *IndexUsageKey) String() string { return proto.CompactTextString(m) }
func (*IndexUsageKey) ProtoMessage()    {}
func (*IndexUsageKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_7523d71560a74d6c, []int{1}
}
func (m *IndexUsageKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexUsageKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexUsageKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexUsageKey.Merge(m, src)
}
func (m *IndexUsageKey) XXX_Size() int {
	return m.Size()
}
func (m *IndexUsageKey) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexUsageKey.DiscardUnknown(m)
}

var xxx_messageInfo_IndexUsageKey proto.InternalMessageInfo

// CollectedIndexUsageStatistics wraps collected index key and its usage
// statistics.
type CollectedIndexUsageStatistics struct {
	Key   IndexUsageKey        `protobuf:"bytes,1,opt,name=key" json:"key"`
	Stats IndexUsageStatistics `protobuf:"bytes,2,opt,name=stats" json:"stats"`
}

func (m *CollectedIndexUsageStatistics) Reset()         { *m = CollectedIndexUsageStatistics{} }
func (m *CollectedIndexUsageStatistics) String() string { return proto.CompactTextString(m) }
func (*CollectedIndexUsageStatistics) ProtoMessage()    {}
func (*CollectedIndexUsageStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_7523d71560a74d6c, []int{2}
}
func (m *CollectedIndexUsageStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectedIndexUsageStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CollectedIndexUsageStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectedIndexUsageStatistics.Merge(m, src)
}
func (m *CollectedIndexUsageStatistics) XXX_Size() int {
	return m.Size()
}
func (m *CollectedIndexUsageStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectedIndexUsageStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_CollectedIndexUsageStatistics proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IndexUsageStatistics)(nil), "cockroach.sql.IndexUsageStatistics")
	proto.RegisterType((*IndexUsageKey)(nil), "cockroach.sql.IndexUsageKey")
	proto.RegisterType((*CollectedIndexUsageStatistics)(nil), "cockroach.sql.CollectedIndexUsageStatistics")
}

func init() { proto.RegisterFile("roachpb/index_usage_stats.proto", fileDescriptor_7523d71560a74d6c) }

var fileDescriptor_7523d71560a74d6c = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3f, 0x8f, 0xd3, 0x30,
	0x14, 0x8f, 0xef, 0x7a, 0xa4, 0xf8, 0x14, 0xfe, 0x44, 0x37, 0x54, 0x11, 0x38, 0xa7, 0xb2, 0x1c,
	0x12, 0x72, 0xd0, 0x09, 0x66, 0x44, 0xca, 0x12, 0xb1, 0x85, 0x43, 0x48, 0x2c, 0x91, 0x9b, 0x98,
	0x10, 0x5d, 0xae, 0x2e, 0xb1, 0xab, 0xd0, 0x81, 0xef, 0xd0, 0x89, 0xcf, 0xd4, 0xb1, 0x63, 0xa7,
	0x02, 0xe9, 0xb7, 0x60, 0x42, 0x7e, 0x4e, 0xd5, 0x54, 0xc0, 0x70, 0xdb, 0x4b, 0xde, 0xef, 0x9f,
	0x9f, 0x9f, 0xb1, 0x5f, 0x09, 0x96, 0x7e, 0x9e, 0x8e, 0x83, 0x62, 0x92, 0xf1, 0xaf, 0xc9, 0x4c,
	0xb2, 0x9c, 0x27, 0x52, 0x31, 0x25, 0xe9, 0xb4, 0x12, 0x4a, 0xb8, 0x4e, 0x2a, 0xd2, 0x6b, 0x00,
	0x51, 0xf9, 0xa5, 0xf4, 0xce, 0x72, 0x91, 0x0b, 0xe8, 0x04, 0xba, 0x32, 0x20, 0xcf, 0xcf, 0x85,
	0xc8, 0x4b, 0x1e, 0xc0, 0xd7, 0x78, 0xf6, 0x29, 0x50, 0xc5, 0x0d, 0x97, 0x8a, 0xdd, 0x4c, 0x0d,
	0x60, 0xb8, 0x39, 0xc2, 0x67, 0x91, 0x76, 0x78, 0xaf, 0x0d, 0xde, 0x29, 0xa6, 0x0a, 0xa9, 0x8a,
	0x54, 0xba, 0x14, 0x3f, 0x50, 0x42, 0xb1, 0x32, 0xa9, 0x38, 0xcb, 0x92, 0x54, 0xcc, 0x26, 0x6a,
	0x80, 0xce, 0xd1, 0x45, 0x2f, 0xec, 0x2d, 0x37, 0xbe, 0x15, 0xdf, 0x83, 0x6e, 0xcc, 0x59, 0x36,
	0xd2, 0x3d, 0xf7, 0x35, 0xbe, 0x5b, 0x32, 0xa9, 0x00, 0x3e, 0x38, 0x3a, 0x47, 0x17, 0xa7, 0x97,
	0x1e, 0x35, 0xee, 0x74, 0xe7, 0x4e, 0xaf, 0x76, 0xee, 0x61, 0x5f, 0x8b, 0x2c, 0x7e, 0xf8, 0x28,
	0xee, 0x6b, 0x9a, 0xd6, 0x71, 0x9f, 0xe1, 0xfb, 0xad, 0xa5, 0xa8, 0xa5, 0x11, 0x3a, 0xee, 0x38,
	0x3a, 0xc6, 0x51, 0xd4, 0x12, 0xd0, 0xcf, 0xf1, 0x43, 0x83, 0xae, 0xab, 0x42, 0xf1, 0x36, 0x61,
	0xaf, 0x83, 0x37, 0x62, 0x1f, 0x74, 0xd7, 0x44, 0x1c, 0x61, 0x0c, 0x11, 0x81, 0x30, 0x38, 0xb9,
	0x45, 0x46, 0x38, 0x1a, 0x28, 0x75, 0xe6, 0xa2, 0x43, 0x1a, 0xa9, 0x3b, 0x7f, 0xcf, 0x45, 0xd4,
	0x12, 0xf0, 0xc3, 0x6f, 0xd8, 0xd9, 0xcf, 0xf7, 0x2d, 0x9f, 0xbb, 0x2f, 0x71, 0x5f, 0xb1, 0x71,
	0xc9, 0x93, 0x22, 0x83, 0x81, 0x3a, 0xa1, 0xa7, 0x89, 0xcd, 0xc6, 0xb7, 0xaf, 0xf4, 0xff, 0xe8,
	0xcd, 0xef, 0x7d, 0x19, 0xdb, 0x80, 0x8d, 0x32, 0x4d, 0x33, 0x9b, 0x50, 0x98, 0xf1, 0x76, 0x68,
	0xa0, 0x6f, 0x68, 0x6d, 0x19, 0xdb, 0x80, 0x8d, 0xb2, 0xe1, 0x77, 0x84, 0x1f, 0x8f, 0x44, 0x59,
	0xf2, 0x54, 0xf1, 0xec, 0x9f, 0x17, 0xfd, 0x02, 0x1f, 0x5f, 0xf3, 0x39, 0x44, 0x39, 0xbd, 0x7c,
	0x44, 0x0f, 0xb6, 0x8a, 0x1e, 0x44, 0x6f, 0x4f, 0xa8, 0xe1, 0xee, 0x2b, 0x7c, 0x02, 0xcb, 0xd8,
	0x5e, 0xf5, 0x93, 0xff, 0xf2, 0xf6, 0x4e, 0x2d, 0xdd, 0xf0, 0xc2, 0xa7, 0xcb, 0x5f, 0xc4, 0x5a,
	0x36, 0x04, 0xad, 0x1a, 0x82, 0xd6, 0x0d, 0x41, 0x3f, 0x1b, 0x82, 0x16, 0x5b, 0x62, 0xad, 0xb6,
	0xc4, 0x5a, 0x6f, 0x89, 0xf5, 0xd1, 0x6e, 0x5f, 0xc0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6b,
	0x04, 0x5e, 0x00, 0x0b, 0x03, 0x00, 0x00,
}

func (m *IndexUsageStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexUsageStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexUsageStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintIndexUsageStats(dAtA, i, uint64(m.TotalRowsWrite))
	i--
	dAtA[i] = 0x30
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastWrite, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastWrite):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintIndexUsageStats(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintIndexUsageStats(dAtA, i, uint64(m.TotalWriteCount))
	i--
	dAtA[i] = 0x20
	i = encodeVarintIndexUsageStats(dAtA, i, uint64(m.TotalRowsRead))
	i--
	dAtA[i] = 0x18
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastRead, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastRead):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintIndexUsageStats(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	i = encodeVarintIndexUsageStats(dAtA, i, uint64(m.TotalReadCount))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IndexUsageKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexUsageKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexUsageKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintIndexUsageStats(dAtA, i, uint64(m.IndexID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintIndexUsageStats(dAtA, i, uint64(m.TableID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CollectedIndexUsageStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectedIndexUsageStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectedIndexUsageStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIndexUsageStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIndexUsageStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintIndexUsageStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndexUsageStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexUsageStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIndexUsageStats(uint64(m.TotalReadCount))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastRead)
	n += 1 + l + sovIndexUsageStats(uint64(l))
	n += 1 + sovIndexUsageStats(uint64(m.TotalRowsRead))
	n += 1 + sovIndexUsageStats(uint64(m.TotalWriteCount))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastWrite)
	n += 1 + l + sovIndexUsageStats(uint64(l))
	n += 1 + sovIndexUsageStats(uint64(m.TotalRowsWrite))
	return n
}

func (m *IndexUsageKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIndexUsageStats(uint64(m.TableID))
	n += 1 + sovIndexUsageStats(uint64(m.IndexID))
	return n
}

func (m *CollectedIndexUsageStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovIndexUsageStats(uint64(l))
	l = m.Stats.Size()
	n += 1 + l + sovIndexUsageStats(uint64(l))
	return n
}

func sovIndexUsageStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndexUsageStats(x uint64) (n int) {
	return sovIndexUsageStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexUsageStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexUsageStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexUsageStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexUsageStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReadCount", wireType)
			}
			m.TotalReadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalReadCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastRead, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRowsRead", wireType)
			}
			m.TotalRowsRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRowsRead |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWriteCount", wireType)
			}
			m.TotalWriteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalWriteCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastWrite, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRowsWrite", wireType)
			}
			m.TotalRowsWrite = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRowsWrite |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndexUsageStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexUsageKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexUsageStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexUsageKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexUsageKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= TableID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndexUsageStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectedIndexUsageStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexUsageStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectedIndexUsageStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectedIndexUsageStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexUsageStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexUsageStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexUsageStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexUsageStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexUsageStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexUsageStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndexUsageStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndexUsageStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndexUsageStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexUsageStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndexUsageStats = fmt.Errorf("proto: unexpected end of group")
)
