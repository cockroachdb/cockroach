// Copyright 2019 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.blobs;
option go_package = "blobspb";

import "gogoproto/gogo.proto";

// GetBlobRequest is used to read a file from
// a remote node. It's path is specified by `filename`.
message GetBlobRequest {
  string filename = 1;
}

// GetBlobResponse returns contents of the file
// requested by GetBlobRequest.
message GetBlobResponse {
  bytes payload = 1;
}

// PutBlobRequest is used to write a payload to a
// remote node. It's path is specified by `filename`.
message PutBlobRequest {
  string filename = 1;
  bytes payload = 2;
}

// PutBlobResponse is returned once a file has
// successfully been written by a PutBlobRequest.
message PutBlobResponse {
}

// ListBlobRequest is used to list all files that
// match the blob pattern on a given node.
message ListBlobRequest {
  string pattern = 1;
}

// ListBlobResponse responds with the list of files
// that matched the given pattern.
message ListBlobResponse {
  repeated string files = 1;
}

// DeleteBlobRequest is used to delete a file on a
// remote node. It's path is specified by `filename`.
message DeleteBlobRequest {
  string filename = 1;
}

// DeleteBlobResponse is returned once a file has
// been successfully deleted by DeleteBlobRequest.
message DeleteBlobResponse {
}

// StatRequest is used to get the file size of a file.
// It's path is specified by `filename`.
message StatRequest {
  string filename = 1;
}

// Stat returns the file size of the file requested in StatRequest.
message BlobStat {
  int64 filesize = 1;
}

// Blob service allows for inter node file sharing.
// It is used by ExternalStorage when interacting with
// files that are stored on a node's local file system.
service Blob {
  rpc GetBlob(GetBlobRequest) returns (GetBlobResponse) {}
  rpc PutBlob(PutBlobRequest) returns (PutBlobResponse) {}
  rpc List(ListBlobRequest) returns (ListBlobResponse) {}
  rpc Delete(DeleteBlobRequest) returns (DeleteBlobResponse) {}
  rpc Stat(StatRequest) returns (BlobStat) {}
}
