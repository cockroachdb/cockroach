// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

// Cannot be proto3 because we use nullable primitives.
syntax = "proto2";
package cockroach.sql.sqlbase;
option go_package = "github.com/cockroachdb/cockroach/pkg/sql/catalog/fetchpb";

import "gogoproto/gogo.proto";
import "sql/types/types.proto";
import "sql/catalog/catenumpb/index.proto";
import "geo/geoindex/config.proto";

// IndexFetchSpec contains the subset of information (from TableDescriptor and
// IndexDescriptor) that is necessary to decode KVs into SQL keys and values.
message IndexFetchSpec {
  message Column {
    optional uint32 column_id = 1 [(gogoproto.nullable) = false,
                                   (gogoproto.customname) = "ColumnID",
                                   (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];

    // Name of the column, as it is expected to appear in debug and error
    // messages.
    optional string name = 2 [(gogoproto.nullable) = false];

    // Type of the column. If this is the key column of an inverted index, this
    // is the type of the data element (currently always EncodedKey) and not
    // the table column type (e.g. JSON).
    optional sql.sem.types.T type = 3;

    // IsNonNullable indicates that it would be a corruption error if we ever
    // encounter a NULL value for this column (i.e. the column is non-nullable
    // and not a mutation column).
    optional bool is_non_nullable = 4 [(gogoproto.nullable) = false];
  }

  // KeyColumn describes a column that is encoded using the key encoding.
  message KeyColumn {
    optional Column column = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    optional catalog.catpb.IndexColumn.Direction direction = 2 [(gogoproto.nullable) = false];

    // IsComposite is true if this column can have a composite encoding (i.e. it
    // can appear in the value in addition to the key).
    optional bool is_composite = 3 [(gogoproto.nullable) = false];

    // IsInverted is true if this column is the inverted key of an inverted index.
    // In this case, the type of this column is the type of the data element
    // (currently always EncodedKey).
    optional bool is_inverted = 4 [(gogoproto.nullable) = false];
  }

  // FamilyDefaultColumn specifies the default column ID for a given family ID.
  message FamilyDefaultColumn {
    optional uint32 family_id = 1 [(gogoproto.nullable) = false,
                                   (gogoproto.customname) = "FamilyID",
                                   (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.FamilyID"];

    // DefaultColumnID is the implicit column ID when a single value is encoded
    // for the family. See ColumnFamilyDescriptor.DefaultColumnID.
    optional uint32 default_column_id = 2 [(gogoproto.nullable) = false,
                                           (gogoproto.customname) = "DefaultColumnID",
                                           (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  }

  // Version is used to allow providing backward compatibility if this spec
  // changes. The intention is that one day this proto will be passed to KV scan
  // requests, in which case the DistSQL versioning will not suffice.
  optional uint32 version = 1 [(gogoproto.nullable) = false];

  optional uint32 table_id = 2 [(gogoproto.nullable) = false,
                                (gogoproto.customname) = "TableID",
                                (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  optional string table_name = 3 [(gogoproto.nullable) = false];

  optional uint32 index_id = 4 [(gogoproto.nullable) = false,
                                (gogoproto.customname) = "IndexID",
                                (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];

  optional string index_name = 5 [(gogoproto.nullable) = false];

  optional bool is_secondary_index = 6 [(gogoproto.nullable) = false];
  optional bool is_unique_index = 7 [(gogoproto.nullable) = false];

  // GeoConfig is used if we are fetching an inverted geospatial index.
  optional geo.geoindex.Config geo_config = 16 [(gogoproto.nullable) = false];

  // EncodingType represents what sort of k/v encoding is used to store the
  // table data.
  optional uint32 encoding_type = 8 [(gogoproto.nullable) = false,
                                     (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/catalog/catenumpb.IndexDescriptorEncodingType"];

  // NumKeySuffixColumns is the number of suffix columns (corresponding to a
  // suffix of KeyAndSuffixColumns).
  //
  // If the index is not unique, the suffix columns are always part of the key.
  //
  // If the index is unique, the suffix columns are encoded (using key encoding)
  // into the KV value. If one of the indexed columns is NULL, the key will
  // also contain the suffix column values.
  optional uint32 num_key_suffix_columns = 9 [(gogoproto.nullable) = false];

  // MaxKeysPerRow is the maximum number of keys per row in this index. It is
  // used for various optimizations.
  optional uint32 max_keys_per_row = 10 [(gogoproto.nullable) = false];

  // KeyPrefixLength is the length of the key prefix that encodes the table and
  // index ID.
  optional uint32 key_prefix_length = 11 [(gogoproto.nullable) = false];

  optional uint32 max_family_id = 12 [(gogoproto.nullable) = false,
                                      (gogoproto.customname) = "MaxFamilyID",
                                      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.FamilyID"];

  // FamilyDefaultColumns contains the default column IDs for families with a
  // default column. This is used to decode values that use the single column
  // optimization (where the column ID is omitted).
  repeated FamilyDefaultColumn family_default_columns = 13 [(gogoproto.nullable) = false];

  // KeyAndSuffixColumns contains all the key and suffix columns, in order.
  repeated KeyColumn key_and_suffix_columns = 14 [(gogoproto.nullable) = false];

  // FetchedColumns contains all the columns we are producing values for. The
  // fetched columns can overlap with the key columns.
  //
  // Any other column IDs present in the fetched KVs will be ignored.
  repeated Column fetched_columns = 15 [(gogoproto.nullable) = false];
}
