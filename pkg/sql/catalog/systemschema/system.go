// Copyright 2015 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package systemschema

import (
	"math"
	"time"

	"github.com/cockroachdb/cockroach/pkg/keys"
	"github.com/cockroachdb/cockroach/pkg/roachpb"
	"github.com/cockroachdb/cockroach/pkg/security"
	"github.com/cockroachdb/cockroach/pkg/sql/catalog"
	"github.com/cockroachdb/cockroach/pkg/sql/catalog/dbdesc"
	"github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	"github.com/cockroachdb/cockroach/pkg/sql/catalog/tabledesc"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

// ShouldSplitAtDesc determines whether a specific descriptor should be
// considered for a split. Only plain tables are considered for split.
func ShouldSplitAtDesc(rawDesc *roachpb.Value) bool {
	var desc descpb.Descriptor
	if err := rawDesc.GetProto(&desc); err != nil {
		return false
	}
	switch t := desc.GetUnion().(type) {
	case *descpb.Descriptor_Table:
		if t.Table.IsView() && !t.Table.MaterializedView() {
			return false
		}
		return true
	case *descpb.Descriptor_Database:
		return false
	case *descpb.Descriptor_Type:
		return false
	case *descpb.Descriptor_Schema:
		return false
	default:
		panic(errors.AssertionFailedf("unexpected descriptor type %#v", &desc))
	}
}

// sql CREATE commands and full schema for each system table.
// These strings are *not* used at runtime, but are checked by the
// `TestSystemTableLiterals` test that compares the table generated by
// evaluating the `CREATE TABLE` statement to the descriptor literal that is
// actually used at runtime.

// These system tables are part of the system config.
const (
	NamespaceTableSchema = `
CREATE TABLE system.namespace2 (
  "parentID" INT8,
  "parentSchemaID" INT8,
  name       STRING,
  id         INT8,
  PRIMARY KEY ("parentID", "parentSchemaID", name)
);`

	DescriptorTableSchema = `
CREATE TABLE system.descriptor (
  id         INT8 PRIMARY KEY,
  descriptor BYTES
);`

	UsersTableSchema = `
CREATE TABLE system.users (
  username         STRING PRIMARY KEY,
  "hashedPassword" BYTES,
  "isRole"         BOOL NOT NULL DEFAULT false
);`

	RoleOptionsTableSchema = `
CREATE TABLE system.role_options (
	username STRING NOT NULL,
	option STRING NOT NULL,
	value STRING,
	PRIMARY KEY (username, option),
	FAMILY "primary" (username, option, value)
)`

	// Zone settings per DB/Table.
	ZonesTableSchema = `
CREATE TABLE system.zones (
  id     INT8 PRIMARY KEY,
  config BYTES
);`

	SettingsTableSchema = `
CREATE TABLE system.settings (
	name              STRING    NOT NULL PRIMARY KEY,
	value             STRING    NOT NULL,
	"lastUpdated"     TIMESTAMP NOT NULL DEFAULT now(),
	"valueType"       STRING,
	FAMILY (name, value, "lastUpdated", "valueType")
);`

	DescIDSequenceSchema = `
CREATE SEQUENCE system.descriptor_id_seq;`

	TenantsTableSchema = `
CREATE TABLE system.tenants (
	id     INT8 NOT NULL PRIMARY KEY,
	active BOOL NOT NULL DEFAULT true,
	info   BYTES,
	FAMILY "primary" (id, active, info)
);`
)

// These system tables are not part of the system config.
const (
	LeaseTableSchema = `
CREATE TABLE system.lease (
  "descID"   INT8,
  version    INT8,
  "nodeID"   INT8,
  expiration TIMESTAMP,
  PRIMARY KEY ("descID", version, expiration, "nodeID")
);`

	// TODO(knz): targetID and reportingID are deprecated and should
	// be removed after v21.1 is released. Their content is now
	// available inside the info payload, which is a JSON blob.
	EventLogTableSchema = `
CREATE TABLE system.eventlog (
  timestamp     TIMESTAMP  NOT NULL,
  "eventType"   STRING     NOT NULL,
  "targetID"    INT8       NOT NULL,
  "reportingID" INT8       NOT NULL,
  info          STRING,
  "uniqueID"    BYTES      DEFAULT uuid_v4(),
  PRIMARY KEY (timestamp, "uniqueID")
);`

	// rangelog is currently envisioned as a wide table; many different event
	// types can be recorded to the table.
	RangeEventTableSchema = `
CREATE TABLE system.rangelog (
  timestamp      TIMESTAMP  NOT NULL,
  "rangeID"      INT8       NOT NULL,
  "storeID"      INT8       NOT NULL,
  "eventType"    STRING     NOT NULL,
  "otherRangeID" INT8,
  info           STRING,
  "uniqueID"     INT8       DEFAULT unique_rowid(),
  PRIMARY KEY (timestamp, "uniqueID")
);`

	UITableSchema = `
CREATE TABLE system.ui (
	key           STRING PRIMARY KEY,
	value         BYTES,
	"lastUpdated" TIMESTAMP NOT NULL
);`

	// Note: this schema is changed in a migration (a progress column is added in
	// a separate family).
	// NB: main column family uses old, pre created_by_type/created_by_id columns, named.
	// This is done to minimize migration work required.
	JobsTableSchema = `
CREATE TABLE system.jobs (
	id                INT8      DEFAULT unique_rowid() PRIMARY KEY,
	status            STRING    NOT NULL,
	created           TIMESTAMP NOT NULL DEFAULT now(),
	payload           BYTES     NOT NULL,
	progress          BYTES,
	created_by_type   STRING,
	created_by_id     INT,
	claim_session_id  BYTES,
	claim_instance_id INT8,
	INDEX (status, created),
	INDEX (created_by_type, created_by_id) STORING (status),

	FAMILY fam_0_id_status_created_payload (id, status, created, payload, created_by_type, created_by_id),
	FAMILY progress (progress),
	FAMILY claim (claim_session_id, claim_instance_id)
);`

	// web_sessions are used to track authenticated user actions over stateless
	// connections, such as the cookie-based authentication used by the Admin
	// UI.
	// Design outlined in /docs/RFCS/web_session_login.rfc
	WebSessionsTableSchema = `
CREATE TABLE system.web_sessions (
	id             INT8       NOT NULL DEFAULT unique_rowid() PRIMARY KEY,
	"hashedSecret" BYTES      NOT NULL,
	username       STRING     NOT NULL,
	"createdAt"    TIMESTAMP  NOT NULL DEFAULT now(),
	"expiresAt"    TIMESTAMP  NOT NULL,
	"revokedAt"    TIMESTAMP,
	"lastUsedAt"   TIMESTAMP  NOT NULL DEFAULT now(),
	"auditInfo"    STRING,
	INDEX ("expiresAt"),
	INDEX ("createdAt"),
	FAMILY (id, "hashedSecret", username, "createdAt", "expiresAt", "revokedAt", "lastUsedAt", "auditInfo")
);`

	// table_statistics is used to track statistics collected about individual columns
	// or groups of columns from every table in the database. Each row contains the
	// number of distinct values of the column group and (optionally) a histogram if there
	// is only one column in columnIDs.
	//
	// Design outlined in /docs/RFCS/20170908_sql_optimizer_statistics.md
	TableStatisticsTableSchema = `
CREATE TABLE system.table_statistics (
	"tableID"       INT8       NOT NULL,
	"statisticID"   INT8       NOT NULL DEFAULT unique_rowid(),
	name            STRING,
	"columnIDs"     INT8[]     NOT NULL,
	"createdAt"     TIMESTAMP  NOT NULL DEFAULT now(),
	"rowCount"      INT8       NOT NULL,
	"distinctCount" INT8       NOT NULL,
	"nullCount"     INT8       NOT NULL,
	histogram       BYTES,
	PRIMARY KEY ("tableID", "statisticID"),
	FAMILY ("tableID", "statisticID", name, "columnIDs", "createdAt", "rowCount", "distinctCount", "nullCount", histogram)
);`

	// locations are used to map a locality specified by a node to geographic
	// latitude, longitude coordinates, specified as degrees.
	LocationsTableSchema = `
CREATE TABLE system.locations (
  "localityKey"   STRING,
  "localityValue" STRING,
  latitude        DECIMAL(18,15) NOT NULL,
  longitude       DECIMAL(18,15) NOT NULL,
  PRIMARY KEY ("localityKey", "localityValue"),
  FAMILY ("localityKey", "localityValue", latitude, longitude)
);`

	// role_members stores relationships between roles (role->role and role->user).
	RoleMembersTableSchema = `
CREATE TABLE system.role_members (
  "role"   STRING NOT NULL,
  "member" STRING NOT NULL,
  "isAdmin"  BOOL NOT NULL,
  PRIMARY KEY  ("role", "member"),
  INDEX ("role"),
  INDEX ("member")
);`

	// comments stores comments(database, table, column...).
	CommentsTableSchema = `
CREATE TABLE system.comments (
   type      INT NOT NULL,    -- type of object, to distinguish between db, table, column and others
   object_id INT NOT NULL,    -- object ID, this will be usually db/table desc ID
   sub_id    INT NOT NULL,    -- sub ID for column or indexes inside table, 0 for pure table
   comment   STRING NOT NULL, -- the comment
   PRIMARY KEY (type, object_id, sub_id)
);`

	// protected_ts_meta stores a single row of metadata for the protectedts
	// subsystem.
	ProtectedTimestampsMetaTableSchema = `
CREATE TABLE system.protected_ts_meta (
   singleton   BOOL NOT NULL PRIMARY KEY DEFAULT (true),
   version     INT8 NOT NULL,
   num_records INT8 NOT NULL,
   num_spans   INT8 NOT NULL,
   total_bytes INT8 NOT NULL,
   CONSTRAINT check_singleton  CHECK (singleton),
   FAMILY "primary" (singleton, version, num_records, num_spans, total_bytes)
);`

	ProtectedTimestampsRecordsTableSchema = `
CREATE TABLE system.protected_ts_records (
   id        UUID NOT NULL PRIMARY KEY,
   ts        DECIMAL NOT NULL,
   meta_type STRING NOT NULL,
   meta      BYTES,
   num_spans INT8 NOT NULL, -- num spans is important to know how to decode spans
   spans     BYTES NOT NULL,
   verified  BOOL NOT NULL DEFAULT (false),
   FAMILY "primary" (id, ts, meta_type, meta, num_spans, spans, verified)
);`

	StatementBundleChunksTableSchema = `
CREATE TABLE system.statement_bundle_chunks (
   id          INT8 PRIMARY KEY DEFAULT unique_rowid(),
	 description STRING,
	 data        BYTES NOT NULL,

   FAMILY "primary" (id, description, data)
);`

	StatementDiagnosticsRequestsTableSchema = `
CREATE TABLE system.statement_diagnostics_requests(
	id INT8 DEFAULT unique_rowid() PRIMARY KEY NOT NULL,
	completed BOOL NOT NULL DEFAULT FALSE,
	statement_fingerprint STRING NOT NULL,
	statement_diagnostics_id INT8,
	requested_at TIMESTAMPTZ NOT NULL,
	INDEX completed_idx (completed, id) STORING (statement_fingerprint),

	FAMILY "primary" (id, completed, statement_fingerprint, statement_diagnostics_id, requested_at)
);`

	StatementDiagnosticsTableSchema = `
create table system.statement_diagnostics(
  id INT8 DEFAULT unique_rowid() PRIMARY KEY NOT NULL,
  statement_fingerprint STRING NOT NULL,
  statement STRING NOT NULL,
  collected_at TIMESTAMPTZ NOT NULL,
  trace JSONB,
  bundle_chunks INT ARRAY,
	error STRING,

	FAMILY "primary" (id, statement_fingerprint, statement, collected_at, trace, bundle_chunks, error)
);`

	ScheduledJobsTableSchema = `
CREATE TABLE system.scheduled_jobs (
    schedule_id      INT DEFAULT unique_rowid() PRIMARY KEY NOT NULL,
    schedule_name    STRING NOT NULL,
    created          TIMESTAMPTZ NOT NULL DEFAULT now(),
    owner            STRING NOT NULL,
    next_run         TIMESTAMPTZ,
    schedule_state   BYTES,
    schedule_expr    STRING,
    schedule_details BYTES,
    executor_type    STRING NOT NULL,
    execution_args   BYTES NOT NULL,

    INDEX "next_run_idx" (next_run),

    FAMILY sched (schedule_id, next_run, schedule_state),
    FAMILY other (
       schedule_name, created, owner, schedule_expr, 
       schedule_details, executor_type, execution_args 
    )
)`

	SqllivenessTableSchema = `
CREATE TABLE system.sqlliveness (
    session_id       BYTES PRIMARY KEY NOT NULL,
    expiration       DECIMAL NOT NULL,
  	FAMILY fam0_session_id_expiration (session_id, expiration)
)`

	MigrationsTableSchema = `
CREATE TABLE system.migrations (
    major        INT8 NOT NULL,
    minor        INT8 NOT NULL,
    patch        INT8 NOT NULL,
    internal     INT8 NOT NULL,
    completed_at TIMESTAMPTZ NOT NULL,
    FAMILY "primary" (major, minor, patch, internal, completed_at),
    PRIMARY KEY (major, minor, patch, internal)
)`

	JoinTokensTableSchema = `
CREATE TABLE system.join_tokens (
    id           UUID NOT NULL PRIMARY KEY,
    secret       BYTES NOT NULL,
    expiration   TIMESTAMPTZ NOT NULL,
    FAMILY "primary" (id, secret, expiration)
)`
)

func pk(name string) descpb.IndexDescriptor {
	return descpb.IndexDescriptor{
		Name:             tabledesc.PrimaryKeyIndexName,
		ID:               1,
		Unique:           true,
		ColumnNames:      []string{name},
		ColumnDirections: singleASC,
		ColumnIDs:        singleID1,
		Version:          descpb.EmptyArraysInInvertedIndexesVersion,
	}
}

// Helpers used to make some of the descpb.TableDescriptor literals below more concise.
var (
	singleASC = []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC}
	singleID1 = []descpb.ColumnID{1}
)

// SystemDatabaseName is the name of the system database.
const SystemDatabaseName = "system"

// MakeSystemDatabaseDesc constructs a copy of the system database
// descriptor.
func MakeSystemDatabaseDesc() catalog.DatabaseDescriptor {
	return dbdesc.NewBuilder(&descpb.DatabaseDescriptor{
		Name:    SystemDatabaseName,
		ID:      keys.SystemDatabaseID,
		Version: 1,
		// Assign max privileges to root user.
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.SystemDatabaseID], security.NodeUserName()),
	}).BuildImmutableDatabase()
}

func makeTable(desc descpb.TableDescriptor) catalog.TableDescriptor {
	return tabledesc.NewBuilder(&desc).BuildImmutableTable()
}

// These system config descpb.TableDescriptor literals should match the descriptor
// that would be produced by evaluating one of the above `CREATE TABLE`
// statements. See the `TestSystemTableLiterals` which checks that they do
// indeed match, and has suggestions on writing and maintaining them.
var (
	// SystemDB is the descriptor for the system database.
	SystemDB = MakeSystemDatabaseDesc()

	// NamespaceTableName is "namespace", which is always and forever the
	// user-visible name of the system.namespace table. Tautological, but
	// important.
	NamespaceTableName = "namespace"

	// DeprecatedNamespaceTable is the descriptor for the deprecated namespace table.
	DeprecatedNamespaceTable = makeTable(descpb.TableDescriptor{
		Name:                    NamespaceTableName,
		ID:                      keys.DeprecatedNamespaceTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "parentID", ID: 1, Type: types.Int},
			{Name: "name", ID: 2, Type: types.String},
			{Name: "id", ID: 3, Type: types.Int, Nullable: true},
		},
		NextColumnID: 4,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"parentID", "name"}, ColumnIDs: []descpb.ColumnID{1, 2}},
			{Name: "fam_3_id", ID: 3, ColumnNames: []string{"id"}, ColumnIDs: []descpb.ColumnID{3}, DefaultColumnID: 3},
		},
		NextFamilyID: 4,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"parentID", "name"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.DeprecatedNamespaceTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// NamespaceTable is the descriptor for the namespace table. Note that this
	// table should only be written to via KV puts, not via the SQL layer. Some
	// code assumes that it only has KV entries for column family 4, not the
	// "sentinel" column family 0 which would be written by SQL.
	//
	// Note that the Descriptor.Name of this table is not "namespace", but
	// something else. This is because, in 20.1, we moved the representation of
	// namespaces to a new place, and for various reasons, we can't have two
	// descriptors with the same Name at once.
	//
	// TODO(solon): in 20.2, we should change the Name of this descriptor
	// back to "namespace".
	NamespaceTable = makeTable(descpb.TableDescriptor{
		Name:                    "namespace2",
		ID:                      keys.NamespaceTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "parentID", ID: 1, Type: types.Int},
			{Name: "parentSchemaID", ID: 2, Type: types.Int},
			{Name: "name", ID: 3, Type: types.String},
			{Name: "id", ID: 4, Type: types.Int, Nullable: true},
		},
		NextColumnID: 5,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"parentID", "parentSchemaID", "name"}, ColumnIDs: []descpb.ColumnID{1, 2, 3}},
			{Name: "fam_4_id", ID: 4, ColumnNames: []string{"id"}, ColumnIDs: []descpb.ColumnID{4}, DefaultColumnID: 4},
		},
		NextFamilyID: 5,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"parentID", "parentSchemaID", "name"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2, 3},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.DeprecatedNamespaceTableID], security.NodeUserName(),
		),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// DescriptorTable is the descriptor for the descriptor table.
	DescriptorTable = makeTable(descpb.TableDescriptor{
		Name: "descriptor",
		ID:   keys.DescriptorTableID,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.DescriptorTableID], security.NodeUserName()),
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int},
			{Name: "descriptor", ID: keys.DescriptorTableDescriptorColID, Type: types.Bytes, Nullable: true},
		},
		NextColumnID: 3,
		Families: []descpb.ColumnFamilyDescriptor{
			// The id of the first col fam is hardcoded in keys.MakeDescMetadataKey().
			{Name: "primary", ID: 0, ColumnNames: []string{"id"}, ColumnIDs: singleID1},
			{
				Name: "fam_2_descriptor", ID: keys.DescriptorTableDescriptorColFamID,
				ColumnNames:     []string{"descriptor"},
				ColumnIDs:       []descpb.ColumnID{keys.DescriptorTableDescriptorColID},
				DefaultColumnID: keys.DescriptorTableDescriptorColID,
			},
		},
		PrimaryIndex:   pk("id"),
		NextFamilyID:   3,
		NextIndexID:    2,
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	falseBoolString = "false"
	trueBoolString  = "true"

	// UsersTable is the descriptor for the users table.
	UsersTable = makeTable(descpb.TableDescriptor{
		Name:                    "users",
		ID:                      keys.UsersTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "username", ID: 1, Type: types.String},
			{Name: "hashedPassword", ID: 2, Type: types.Bytes, Nullable: true},
			{Name: "isRole", ID: 3, Type: types.Bool, DefaultExpr: &falseBoolString},
		},
		NextColumnID: 4,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"username"}, ColumnIDs: singleID1},
			{Name: "fam_2_hashedPassword", ID: 2, ColumnNames: []string{"hashedPassword"}, ColumnIDs: []descpb.ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_3_isRole", ID: 3, ColumnNames: []string{"isRole"}, ColumnIDs: []descpb.ColumnID{3}, DefaultColumnID: 3},
		},
		PrimaryIndex: pk("username"),
		NextFamilyID: 4,
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.UsersTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// ZonesTable is the descriptor for the zones table.
	ZonesTable = makeTable(descpb.TableDescriptor{
		Name:                    "zones",
		ID:                      keys.ZonesTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int},
			{Name: "config", ID: keys.ZonesTableConfigColumnID, Type: types.Bytes, Nullable: true},
		},
		NextColumnID: 3,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"id"}, ColumnIDs: singleID1},
			{Name: "fam_2_config", ID: keys.ZonesTableConfigColFamID, ColumnNames: []string{"config"},
				ColumnIDs: []descpb.ColumnID{keys.ZonesTableConfigColumnID}, DefaultColumnID: keys.ZonesTableConfigColumnID},
		},
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               keys.ZonesTablePrimaryIndexID,
			Unique:           true,
			ColumnNames:      []string{"id"},
			ColumnDirections: singleASC,
			ColumnIDs:        []descpb.ColumnID{keys.ZonesTablePrimaryIndexID},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextFamilyID: 3,
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.ZonesTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// SettingsTable is the descriptor for the settings table.
	// It contains all cluster settings for which a value has been set.
	SettingsTable = makeTable(descpb.TableDescriptor{
		Name:                    "settings",
		ID:                      keys.SettingsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "name", ID: 1, Type: types.String},
			{Name: "value", ID: 2, Type: types.String},
			{Name: "lastUpdated", ID: 3, Type: types.Timestamp, DefaultExpr: &nowString},
			{Name: "valueType", ID: 4, Type: types.String, Nullable: true},
		},
		NextColumnID: 5,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "fam_0_name_value_lastUpdated_valueType",
				ID:          0,
				ColumnNames: []string{"name", "value", "lastUpdated", "valueType"},
				ColumnIDs:   []descpb.ColumnID{1, 2, 3, 4},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: pk("name"),
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.SettingsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// DescIDSequence is the descriptor for the descriptor ID sequence.
	DescIDSequence = makeTable(descpb.TableDescriptor{
		Name:                    "descriptor_id_seq",
		ID:                      keys.DescIDSequenceID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: tabledesc.SequenceColumnName, ID: tabledesc.SequenceColumnID, Type: types.Int},
		},
		Families: []descpb.ColumnFamilyDescriptor{{
			Name:            "primary",
			ID:              keys.SequenceColumnFamilyID,
			ColumnNames:     []string{tabledesc.SequenceColumnName},
			ColumnIDs:       []descpb.ColumnID{tabledesc.SequenceColumnID},
			DefaultColumnID: tabledesc.SequenceColumnID,
		}},
		PrimaryIndex: descpb.IndexDescriptor{
			ID:               keys.SequenceIndexID,
			Name:             tabledesc.PrimaryKeyIndexName,
			ColumnIDs:        []descpb.ColumnID{tabledesc.SequenceColumnID},
			ColumnNames:      []string{tabledesc.SequenceColumnName},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC},
		},
		SequenceOpts: &descpb.TableDescriptor_SequenceOpts{
			Increment: 1,
			MinValue:  1,
			MaxValue:  math.MaxInt64,
			Start:     1,
			CacheSize: 1,
		},
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.DescIDSequenceID], security.NodeUserName()),
		FormatVersion: descpb.InterleavedFormatVersion,
	})

	TenantsTable = makeTable(descpb.TableDescriptor{
		Name:                    "tenants",
		ID:                      keys.TenantsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int},
			{Name: "active", ID: 2, Type: types.Bool, DefaultExpr: &trueBoolString},
			// NOTE: info is currently a placeholder and may be kept, replaced,
			// or even just removed. The idea is to provide users of
			// multi-tenancy with some ability to store associated metadata with
			// each tenant. For instance, it might prove to be useful to map a
			// tenant in a cluster back to the corresponding user ID in CC.
			{Name: "info", ID: 3, Type: types.Bytes, Nullable: true},
		},
		NextColumnID: 4,
		Families: []descpb.ColumnFamilyDescriptor{{
			Name:        "primary",
			ID:          0,
			ColumnNames: []string{"id", "active", "info"},
			ColumnIDs:   []descpb.ColumnID{1, 2, 3},
		}},
		NextFamilyID: 1,
		PrimaryIndex: pk("id"),
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.TenantsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})
)

// These system descpb.TableDescriptor literals should match the descriptor that
// would be produced by evaluating one of the above `CREATE TABLE` statements
// for system tables that are not system config tables. See the
// `TestSystemTableLiterals` which checks that they do indeed match, and has
// suggestions on writing and maintaining them.
var (
	// LeaseTable is the descriptor for the leases table.
	LeaseTable = makeTable(descpb.TableDescriptor{
		Name:                    "lease",
		ID:                      keys.LeaseTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "descID", ID: 1, Type: types.Int},
			{Name: "version", ID: 2, Type: types.Int},
			{Name: "nodeID", ID: 3, Type: types.Int},
			{Name: "expiration", ID: 4, Type: types.Timestamp},
		},
		NextColumnID: 5,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"descID", "version", "nodeID", "expiration"}, ColumnIDs: []descpb.ColumnID{1, 2, 3, 4}},
		},
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"descID", "version", "expiration", "nodeID"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2, 4, 3},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextFamilyID: 1,
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.LeaseTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	uuidV4String = "uuid_v4()"

	// EventLogTable is the descriptor for the event log table.
	EventLogTable = makeTable(descpb.TableDescriptor{
		Name:                    "eventlog",
		ID:                      keys.EventLogTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "timestamp", ID: 1, Type: types.Timestamp},
			{Name: "eventType", ID: 2, Type: types.String},
			// TODO(knz): targetID and reportingID are deprecated and should
			// be removed after v21.1 is released. Their content is now
			// available inside the info payload, which is a JSON blob.
			{Name: "targetID", ID: 3, Type: types.Int},
			{Name: "reportingID", ID: 4, Type: types.Int},
			{Name: "info", ID: 5, Type: types.String, Nullable: true},
			{Name: "uniqueID", ID: 6, Type: types.Bytes, DefaultExpr: &uuidV4String},
		},
		NextColumnID: 7,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"timestamp", "uniqueID"}, ColumnIDs: []descpb.ColumnID{1, 6}},
			{Name: "fam_2_eventType", ID: 2, ColumnNames: []string{"eventType"}, ColumnIDs: []descpb.ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_3_targetID", ID: 3, ColumnNames: []string{"targetID"}, ColumnIDs: []descpb.ColumnID{3}, DefaultColumnID: 3},
			{Name: "fam_4_reportingID", ID: 4, ColumnNames: []string{"reportingID"}, ColumnIDs: []descpb.ColumnID{4}, DefaultColumnID: 4},
			{Name: "fam_5_info", ID: 5, ColumnNames: []string{"info"}, ColumnIDs: []descpb.ColumnID{5}, DefaultColumnID: 5},
		},
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"timestamp", "uniqueID"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 6},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextFamilyID: 6,
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.EventLogTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	uniqueRowIDString = "unique_rowid()"

	// RangeEventTable is the descriptor for the range log table.
	RangeEventTable = makeTable(descpb.TableDescriptor{
		Name:                    "rangelog",
		ID:                      keys.RangeEventTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "timestamp", ID: 1, Type: types.Timestamp},
			{Name: "rangeID", ID: 2, Type: types.Int},
			{Name: "storeID", ID: 3, Type: types.Int},
			{Name: "eventType", ID: 4, Type: types.String},
			{Name: "otherRangeID", ID: 5, Type: types.Int, Nullable: true},
			{Name: "info", ID: 6, Type: types.String, Nullable: true},
			{Name: "uniqueID", ID: 7, Type: types.Int, DefaultExpr: &uniqueRowIDString},
		},
		NextColumnID: 8,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"timestamp", "uniqueID"}, ColumnIDs: []descpb.ColumnID{1, 7}},
			{Name: "fam_2_rangeID", ID: 2, ColumnNames: []string{"rangeID"}, ColumnIDs: []descpb.ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_3_storeID", ID: 3, ColumnNames: []string{"storeID"}, ColumnIDs: []descpb.ColumnID{3}, DefaultColumnID: 3},
			{Name: "fam_4_eventType", ID: 4, ColumnNames: []string{"eventType"}, ColumnIDs: []descpb.ColumnID{4}, DefaultColumnID: 4},
			{Name: "fam_5_otherRangeID", ID: 5, ColumnNames: []string{"otherRangeID"}, ColumnIDs: []descpb.ColumnID{5}, DefaultColumnID: 5},
			{Name: "fam_6_info", ID: 6, ColumnNames: []string{"info"}, ColumnIDs: []descpb.ColumnID{6}, DefaultColumnID: 6},
		},
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"timestamp", "uniqueID"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 7},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextFamilyID: 7,
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.RangeEventTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// UITable is the descriptor for the ui table.
	UITable = makeTable(descpb.TableDescriptor{
		Name:                    "ui",
		ID:                      keys.UITableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "key", ID: 1, Type: types.String},
			{Name: "value", ID: 2, Type: types.Bytes, Nullable: true},
			{Name: "lastUpdated", ID: 3, Type: types.Timestamp},
		},
		NextColumnID: 4,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"key"}, ColumnIDs: singleID1},
			{Name: "fam_2_value", ID: 2, ColumnNames: []string{"value"}, ColumnIDs: []descpb.ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_3_lastUpdated", ID: 3, ColumnNames: []string{"lastUpdated"}, ColumnIDs: []descpb.ColumnID{3}, DefaultColumnID: 3},
		},
		NextFamilyID: 4,
		PrimaryIndex: pk("key"),
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.UITableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	nowString   = "now():::TIMESTAMP"
	nowTZString = "now():::TIMESTAMPTZ"

	// JobsTable is the descriptor for the jobs table.
	JobsTable = makeTable(descpb.TableDescriptor{
		Name:                    "jobs",
		ID:                      keys.JobsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int, DefaultExpr: &uniqueRowIDString},
			{Name: "status", ID: 2, Type: types.String},
			{Name: "created", ID: 3, Type: types.Timestamp, DefaultExpr: &nowString},
			{Name: "payload", ID: 4, Type: types.Bytes},
			{Name: "progress", ID: 5, Type: types.Bytes, Nullable: true},
			{Name: "created_by_type", ID: 6, Type: types.String, Nullable: true},
			{Name: "created_by_id", ID: 7, Type: types.Int, Nullable: true},
			{Name: "claim_session_id", ID: 8, Type: types.Bytes, Nullable: true},
			{Name: "claim_instance_id", ID: 9, Type: types.Int, Nullable: true},
		},
		NextColumnID: 10,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				// NB: We are using family name that existed prior to adding created_by_type and
				// created_by_id columns.  This is done to minimize and simplify migration work
				// that needed to be done.
				Name:        "fam_0_id_status_created_payload",
				ID:          0,
				ColumnNames: []string{"id", "status", "created", "payload", "created_by_type", "created_by_id"},
				ColumnIDs:   []descpb.ColumnID{1, 2, 3, 4, 6, 7},
			},
			{
				Name:            "progress",
				ID:              1,
				ColumnNames:     []string{"progress"},
				ColumnIDs:       []descpb.ColumnID{5},
				DefaultColumnID: 5,
			},
			{
				Name:        "claim",
				ID:          2,
				ColumnNames: []string{"claim_session_id", "claim_instance_id"},
				ColumnIDs:   []descpb.ColumnID{8, 9},
			},
		},
		NextFamilyID: 3,
		PrimaryIndex: pk("id"),
		Indexes: []descpb.IndexDescriptor{
			{
				Name:             "jobs_status_created_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"status", "created"},
				ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
				ColumnIDs:        []descpb.ColumnID{2, 3},
				ExtraColumnIDs:   []descpb.ColumnID{1},
				Version:          descpb.EmptyArraysInInvertedIndexesVersion,
			},
			{
				Name:             "jobs_created_by_type_created_by_id_idx",
				ID:               3,
				Unique:           false,
				ColumnNames:      []string{"created_by_type", "created_by_id"},
				ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
				ColumnIDs:        []descpb.ColumnID{6, 7},
				StoreColumnIDs:   []descpb.ColumnID{2},
				StoreColumnNames: []string{"status"},
				ExtraColumnIDs:   []descpb.ColumnID{1},
				Version:          descpb.EmptyArraysInInvertedIndexesVersion,
			},
		},
		NextIndexID: 4,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.JobsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// WebSessions table to authenticate sessions over stateless connections.
	WebSessionsTable = makeTable(descpb.TableDescriptor{
		Name:                    "web_sessions",
		ID:                      keys.WebSessionsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int, DefaultExpr: &uniqueRowIDString},
			{Name: "hashedSecret", ID: 2, Type: types.Bytes},
			{Name: "username", ID: 3, Type: types.String},
			{Name: "createdAt", ID: 4, Type: types.Timestamp, DefaultExpr: &nowString},
			{Name: "expiresAt", ID: 5, Type: types.Timestamp},
			{Name: "revokedAt", ID: 6, Type: types.Timestamp, Nullable: true},
			{Name: "lastUsedAt", ID: 7, Type: types.Timestamp, DefaultExpr: &nowString},
			{Name: "auditInfo", ID: 8, Type: types.String, Nullable: true},
		},
		NextColumnID: 9,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name: "fam_0_id_hashedSecret_username_createdAt_expiresAt_revokedAt_lastUsedAt_auditInfo",
				ID:   0,
				ColumnNames: []string{
					"id",
					"hashedSecret",
					"username",
					"createdAt",
					"expiresAt",
					"revokedAt",
					"lastUsedAt",
					"auditInfo",
				},
				ColumnIDs: []descpb.ColumnID{1, 2, 3, 4, 5, 6, 7, 8},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: pk("id"),
		Indexes: []descpb.IndexDescriptor{
			{
				Name:             "web_sessions_expiresAt_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"expiresAt"},
				ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC},
				ColumnIDs:        []descpb.ColumnID{5},
				ExtraColumnIDs:   []descpb.ColumnID{1},
				Version:          descpb.EmptyArraysInInvertedIndexesVersion,
			},
			{
				Name:             "web_sessions_createdAt_idx",
				ID:               3,
				Unique:           false,
				ColumnNames:      []string{"createdAt"},
				ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC},
				ColumnIDs:        []descpb.ColumnID{4},
				ExtraColumnIDs:   []descpb.ColumnID{1},
				Version:          descpb.EmptyArraysInInvertedIndexesVersion,
			},
		},
		NextIndexID: 4,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.WebSessionsTableID], security.NodeUserName()),
		NextMutationID: 1,
		FormatVersion:  3,
	})

	// TableStatistics table to hold statistics about columns and column groups.
	TableStatisticsTable = makeTable(descpb.TableDescriptor{
		Name:                    "table_statistics",
		ID:                      keys.TableStatisticsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "tableID", ID: 1, Type: types.Int},
			{Name: "statisticID", ID: 2, Type: types.Int, DefaultExpr: &uniqueRowIDString},
			{Name: "name", ID: 3, Type: types.String, Nullable: true},
			{Name: "columnIDs", ID: 4, Type: types.IntArray},
			{Name: "createdAt", ID: 5, Type: types.Timestamp, DefaultExpr: &nowString},
			{Name: "rowCount", ID: 6, Type: types.Int},
			{Name: "distinctCount", ID: 7, Type: types.Int},
			{Name: "nullCount", ID: 8, Type: types.Int},
			{Name: "histogram", ID: 9, Type: types.Bytes, Nullable: true},
		},
		NextColumnID: 10,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name: "fam_0_tableID_statisticID_name_columnIDs_createdAt_rowCount_distinctCount_nullCount_histogram",
				ID:   0,
				ColumnNames: []string{
					"tableID",
					"statisticID",
					"name",
					"columnIDs",
					"createdAt",
					"rowCount",
					"distinctCount",
					"nullCount",
					"histogram",
				},
				ColumnIDs: []descpb.ColumnID{1, 2, 3, 4, 5, 6, 7, 8, 9},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"tableID", "statisticID"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.TableStatisticsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	latLonDecimal = types.MakeDecimal(18, 15)

	// LocationsTable is the descriptor for the locations table.
	LocationsTable = makeTable(descpb.TableDescriptor{
		Name:                    "locations",
		ID:                      keys.LocationsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "localityKey", ID: 1, Type: types.String},
			{Name: "localityValue", ID: 2, Type: types.String},
			{Name: "latitude", ID: 3, Type: latLonDecimal},
			{Name: "longitude", ID: 4, Type: latLonDecimal},
		},
		NextColumnID: 5,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "fam_0_localityKey_localityValue_latitude_longitude",
				ID:          0,
				ColumnNames: []string{"localityKey", "localityValue", "latitude", "longitude"},
				ColumnIDs:   []descpb.ColumnID{1, 2, 3, 4},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"localityKey", "localityValue"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.LocationsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// RoleMembersTable is the descriptor for the role_members table.
	RoleMembersTable = makeTable(descpb.TableDescriptor{
		Name:                    "role_members",
		ID:                      keys.RoleMembersTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "role", ID: 1, Type: types.String},
			{Name: "member", ID: 2, Type: types.String},
			{Name: "isAdmin", ID: 3, Type: types.Bool},
		},
		NextColumnID: 4,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "primary",
				ID:          0,
				ColumnNames: []string{"role", "member"},
				ColumnIDs:   []descpb.ColumnID{1, 2},
			},
			{
				Name:            "fam_3_isAdmin",
				ID:              3,
				ColumnNames:     []string{"isAdmin"},
				ColumnIDs:       []descpb.ColumnID{3},
				DefaultColumnID: 3,
			},
		},
		NextFamilyID: 4,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"role", "member"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		Indexes: []descpb.IndexDescriptor{
			{
				Name:             "role_members_role_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"role"},
				ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC},
				ColumnIDs:        []descpb.ColumnID{1},
				ExtraColumnIDs:   []descpb.ColumnID{2},
				Version:          descpb.EmptyArraysInInvertedIndexesVersion,
			},
			{
				Name:             "role_members_member_idx",
				ID:               3,
				Unique:           false,
				ColumnNames:      []string{"member"},
				ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC},
				ColumnIDs:        []descpb.ColumnID{2},
				ExtraColumnIDs:   []descpb.ColumnID{1},
				Version:          descpb.EmptyArraysInInvertedIndexesVersion,
			},
		},
		NextIndexID: 4,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.RoleMembersTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// CommentsTable is the descriptor for the comments table.
	CommentsTable = makeTable(descpb.TableDescriptor{
		Name:                    "comments",
		ID:                      keys.CommentsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "type", ID: 1, Type: types.Int},
			{Name: "object_id", ID: 2, Type: types.Int},
			{Name: "sub_id", ID: 3, Type: types.Int},
			{Name: "comment", ID: 4, Type: types.String},
		},
		NextColumnID: 5,
		Families: []descpb.ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"type", "object_id", "sub_id"}, ColumnIDs: []descpb.ColumnID{1, 2, 3}},
			{Name: "fam_4_comment", ID: 4, ColumnNames: []string{"comment"}, ColumnIDs: []descpb.ColumnID{4}, DefaultColumnID: 4},
		},
		NextFamilyID: 5,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"type", "object_id", "sub_id"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2, 3},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: newCommentPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.CommentsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	ReportsMetaTable = makeTable(descpb.TableDescriptor{
		Name:                    "reports_meta",
		ID:                      keys.ReportsMetaTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int},
			{Name: "generated", ID: 2, Type: types.TimestampTZ},
		},
		NextColumnID: 3,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "primary",
				ID:          0,
				ColumnNames: []string{"id", "generated"},
				ColumnIDs:   []descpb.ColumnID{1, 2},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:        "primary",
			ID:          1,
			Unique:      true,
			ColumnNames: []string{"id"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{
				descpb.IndexDescriptor_ASC,
			},
			ColumnIDs: []descpb.ColumnID{1},
			Version:   descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.ReportsMetaTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	ReplicationConstraintStatsTableTTL = time.Minute * 10
	// TODO(andrei): In 20.1 we should add a foreign key reference to the
	// reports_meta table. Until then, it would cost us having to create an index
	// on report_id.
	ReplicationConstraintStatsTable = makeTable(descpb.TableDescriptor{
		Name:                    "replication_constraint_stats",
		ID:                      keys.ReplicationConstraintStatsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "zone_id", ID: 1, Type: types.Int},
			{Name: "subzone_id", ID: 2, Type: types.Int},
			{Name: "type", ID: 3, Type: types.String},
			{Name: "config", ID: 4, Type: types.String},
			{Name: "report_id", ID: 5, Type: types.Int},
			{Name: "violation_start", ID: 6, Type: types.TimestampTZ, Nullable: true},
			{Name: "violating_ranges", ID: 7, Type: types.Int},
		},
		NextColumnID: 8,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name: "primary",
				ID:   0,
				ColumnNames: []string{
					"zone_id",
					"subzone_id",
					"type",
					"config",
					"report_id",
					"violation_start",
					"violating_ranges",
				},
				ColumnIDs: []descpb.ColumnID{1, 2, 3, 4, 5, 6, 7},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:        "primary",
			ID:          1,
			Unique:      true,
			ColumnNames: []string{"zone_id", "subzone_id", "type", "config"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{
				descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC,
			},
			ColumnIDs: []descpb.ColumnID{1, 2, 3, 4},
			Version:   descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.ReplicationConstraintStatsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// TODO(andrei): In 20.1 we should add a foreign key reference to the
	// reports_meta table. Until then, it would cost us having to create an index
	// on report_id.
	ReplicationCriticalLocalitiesTable = makeTable(descpb.TableDescriptor{
		Name:                    "replication_critical_localities",
		ID:                      keys.ReplicationCriticalLocalitiesTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "zone_id", ID: 1, Type: types.Int},
			{Name: "subzone_id", ID: 2, Type: types.Int},
			{Name: "locality", ID: 3, Type: types.String},
			{Name: "report_id", ID: 4, Type: types.Int},
			{Name: "at_risk_ranges", ID: 5, Type: types.Int},
		},
		NextColumnID: 6,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name: "primary",
				ID:   0,
				ColumnNames: []string{
					"zone_id",
					"subzone_id",
					"locality",
					"report_id",
					"at_risk_ranges",
				},
				ColumnIDs: []descpb.ColumnID{1, 2, 3, 4, 5},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:        "primary",
			ID:          1,
			Unique:      true,
			ColumnNames: []string{"zone_id", "subzone_id", "locality"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{
				descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC,
			},
			ColumnIDs: []descpb.ColumnID{1, 2, 3},
			Version:   descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.ReplicationCriticalLocalitiesTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	ReplicationStatsTableTTL = time.Minute * 10
	// TODO(andrei): In 20.1 we should add a foreign key reference to the
	// reports_meta table. Until then, it would cost us having to create an index
	// on report_id.
	ReplicationStatsTable = makeTable(descpb.TableDescriptor{
		Name:                    "replication_stats",
		ID:                      keys.ReplicationStatsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "zone_id", ID: 1, Type: types.Int},
			{Name: "subzone_id", ID: 2, Type: types.Int},
			{Name: "report_id", ID: 3, Type: types.Int},
			{Name: "total_ranges", ID: 4, Type: types.Int},
			{Name: "unavailable_ranges", ID: 5, Type: types.Int},
			{Name: "under_replicated_ranges", ID: 6, Type: types.Int},
			{Name: "over_replicated_ranges", ID: 7, Type: types.Int},
		},
		NextColumnID: 8,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name: "primary",
				ID:   0,
				ColumnNames: []string{
					"zone_id",
					"subzone_id",
					"report_id",
					"total_ranges",
					"unavailable_ranges",
					"under_replicated_ranges",
					"over_replicated_ranges",
				},
				ColumnIDs: []descpb.ColumnID{1, 2, 3, 4, 5, 6, 7},
			},
		},
		NextFamilyID: 2,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"zone_id", "subzone_id"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.ReplicationStatsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	ProtectedTimestampsMetaTable = makeTable(descpb.TableDescriptor{
		Name:                    "protected_ts_meta",
		ID:                      keys.ProtectedTimestampsMetaTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{
				Name:        "singleton",
				ID:          1,
				Type:        types.Bool,
				DefaultExpr: &trueBoolString,
			},
			{Name: "version", ID: 2, Type: types.Int},
			{Name: "num_records", ID: 3, Type: types.Int},
			{Name: "num_spans", ID: 4, Type: types.Int},
			{Name: "total_bytes", ID: 5, Type: types.Int},
		},
		Checks: []*descpb.TableDescriptor_CheckConstraint{
			{
				Name:      "check_singleton",
				Expr:      "singleton",
				ColumnIDs: []descpb.ColumnID{1},
			},
		},
		NextColumnID: 6,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "primary",
				ColumnNames: []string{"singleton", "version", "num_records", "num_spans", "total_bytes"},
				ColumnIDs:   []descpb.ColumnID{1, 2, 3, 4, 5},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:        "primary",
			ID:          1,
			Version:     descpb.EmptyArraysInInvertedIndexesVersion,
			Unique:      true,
			ColumnNames: []string{"singleton"},
			ColumnIDs:   []descpb.ColumnID{1},
			ColumnDirections: []descpb.IndexDescriptor_Direction{
				descpb.IndexDescriptor_ASC,
			},
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.ProtectedTimestampsMetaTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	ProtectedTimestampsRecordsTable = makeTable(descpb.TableDescriptor{
		Name:                    "protected_ts_records",
		ID:                      keys.ProtectedTimestampsRecordsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Uuid},
			{Name: "ts", ID: 2, Type: types.Decimal},
			{Name: "meta_type", ID: 3, Type: types.String},
			{Name: "meta", ID: 4, Type: types.Bytes, Nullable: true},
			{Name: "num_spans", ID: 5, Type: types.Int},
			{Name: "spans", ID: 6, Type: types.Bytes},
			{Name: "verified", ID: 7, Type: types.Bool, DefaultExpr: &falseBoolString},
		},
		NextColumnID: 8,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "primary",
				ColumnNames: []string{"id", "ts", "meta_type", "meta", "num_spans", "spans", "verified"},
				ColumnIDs:   []descpb.ColumnID{1, 2, 3, 4, 5, 6, 7},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:        "primary",
			ID:          1,
			Version:     descpb.EmptyArraysInInvertedIndexesVersion,
			Unique:      true,
			ColumnNames: []string{"id"},
			ColumnIDs:   []descpb.ColumnID{1},
			ColumnDirections: []descpb.IndexDescriptor_Direction{
				descpb.IndexDescriptor_ASC,
			},
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.ProtectedTimestampsRecordsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// RoleOptionsTable is the descriptor for the role_options table.
	RoleOptionsTable = makeTable(descpb.TableDescriptor{
		Name:                    "role_options",
		ID:                      keys.RoleOptionsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "username", ID: 1, Type: types.String},
			{Name: "option", ID: 2, Type: types.String},
			{Name: "value", ID: 3, Type: types.String, Nullable: true},
		},
		NextColumnID: 4,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:            "primary",
				ColumnNames:     []string{"username", "option", "value"},
				ColumnIDs:       []descpb.ColumnID{1, 2, 3},
				DefaultColumnID: 3,
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"username", "option"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
			ColumnIDs:        []descpb.ColumnID{1, 2},
			Version:          descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.RoleOptionsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	StatementBundleChunksTable = makeTable(descpb.TableDescriptor{
		Name:                    "statement_bundle_chunks",
		ID:                      keys.StatementBundleChunksTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int, DefaultExpr: &uniqueRowIDString},
			{Name: "description", ID: 2, Type: types.String, Nullable: true},
			{Name: "data", ID: 3, Type: types.Bytes},
		},
		NextColumnID: 4,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "primary",
				ColumnNames: []string{"id", "description", "data"},
				ColumnIDs:   []descpb.ColumnID{1, 2, 3},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: pk("id"),
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.StatementBundleChunksTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// TODO(andrei): Add a foreign key reference to the statement_diagnostics table when
	// it no longer requires us to create an index on statement_diagnostics_id.
	StatementDiagnosticsRequestsTable = makeTable(descpb.TableDescriptor{
		Name:                    "statement_diagnostics_requests",
		ID:                      keys.StatementDiagnosticsRequestsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int, DefaultExpr: &uniqueRowIDString, Nullable: false},
			{Name: "completed", ID: 2, Type: types.Bool, Nullable: false, DefaultExpr: &falseBoolString},
			{Name: "statement_fingerprint", ID: 3, Type: types.String, Nullable: false},
			{Name: "statement_diagnostics_id", ID: 4, Type: types.Int, Nullable: true},
			{Name: "requested_at", ID: 5, Type: types.TimestampTZ, Nullable: false},
		},
		NextColumnID: 6,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "primary",
				ColumnNames: []string{"id", "completed", "statement_fingerprint", "statement_diagnostics_id", "requested_at"},
				ColumnIDs:   []descpb.ColumnID{1, 2, 3, 4, 5},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: pk("id"),
		// Index for the polling query.
		Indexes: []descpb.IndexDescriptor{
			{
				Name:             "completed_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"completed", "id"},
				StoreColumnNames: []string{"statement_fingerprint"},
				ColumnIDs:        []descpb.ColumnID{2, 1},
				ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC, descpb.IndexDescriptor_ASC},
				StoreColumnIDs:   []descpb.ColumnID{3},
				Version:          descpb.EmptyArraysInInvertedIndexesVersion,
			},
		},
		NextIndexID: 3,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.StatementDiagnosticsRequestsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	StatementDiagnosticsTable = makeTable(descpb.TableDescriptor{
		Name:                    "statement_diagnostics",
		ID:                      keys.StatementDiagnosticsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Int, DefaultExpr: &uniqueRowIDString, Nullable: false},
			{Name: "statement_fingerprint", ID: 2, Type: types.String, Nullable: false},
			{Name: "statement", ID: 3, Type: types.String, Nullable: false},
			{Name: "collected_at", ID: 4, Type: types.TimestampTZ, Nullable: false},
			// TODO(radu): remove this column; it is no longer used.
			{Name: "trace", ID: 5, Type: types.Jsonb, Nullable: true},
			{Name: "bundle_chunks", ID: 6, Type: types.IntArray, Nullable: true},
			{Name: "error", ID: 7, Type: types.String, Nullable: true},
		},
		NextColumnID: 8,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name: "primary",
				ColumnNames: []string{"id", "statement_fingerprint", "statement",
					"collected_at", "trace", "bundle_chunks", "error"},
				ColumnIDs: []descpb.ColumnID{1, 2, 3, 4, 5, 6, 7},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: pk("id"),
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.StatementDiagnosticsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// ScheduledJobsTable is the descriptor for the scheduled jobs table.
	ScheduledJobsTable = makeTable(descpb.TableDescriptor{
		Name:                    "scheduled_jobs",
		ID:                      keys.ScheduledJobsTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "schedule_id", ID: 1, Type: types.Int, DefaultExpr: &uniqueRowIDString, Nullable: false},
			{Name: "schedule_name", ID: 2, Type: types.String, Nullable: false},
			{Name: "created", ID: 3, Type: types.TimestampTZ, DefaultExpr: &nowTZString, Nullable: false},
			{Name: "owner", ID: 4, Type: types.String, Nullable: false},
			{Name: "next_run", ID: 5, Type: types.TimestampTZ, Nullable: true},
			{Name: "schedule_state", ID: 6, Type: types.Bytes, Nullable: true},
			{Name: "schedule_expr", ID: 7, Type: types.String, Nullable: true},
			{Name: "schedule_details", ID: 8, Type: types.Bytes, Nullable: true},
			{Name: "executor_type", ID: 9, Type: types.String, Nullable: false},
			{Name: "execution_args", ID: 10, Type: types.Bytes, Nullable: false},
		},
		NextColumnID: 11,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:        "sched",
				ID:          0,
				ColumnNames: []string{"schedule_id", "next_run", "schedule_state"},
				ColumnIDs:   []descpb.ColumnID{1, 5, 6},
			},
			{
				Name: "other",
				ID:   1,
				ColumnNames: []string{
					"schedule_name", "created", "owner", "schedule_expr",
					"schedule_details", "executor_type", "execution_args",
				},
				ColumnIDs: []descpb.ColumnID{2, 3, 4, 7, 8, 9, 10},
			},
		},
		NextFamilyID: 2,
		PrimaryIndex: pk("schedule_id"),
		Indexes: []descpb.IndexDescriptor{
			{
				Name:             "next_run_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"next_run"},
				ColumnDirections: []descpb.IndexDescriptor_Direction{descpb.IndexDescriptor_ASC},
				ColumnIDs:        []descpb.ColumnID{5},
				ExtraColumnIDs:   []descpb.ColumnID{1},
				Version:          descpb.EmptyArraysInInvertedIndexesVersion,
			},
		},
		NextIndexID: 3,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.ScheduledJobsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// SqllivenessTable is the descriptor for the sqlliveness table.
	SqllivenessTable = makeTable(descpb.TableDescriptor{
		Name:                    "sqlliveness",
		ID:                      keys.SqllivenessID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "session_id", ID: 1, Type: types.Bytes, Nullable: false},
			{Name: "expiration", ID: 2, Type: types.Decimal, Nullable: false},
		},
		NextColumnID: 3,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:            "fam0_session_id_expiration",
				ID:              0,
				ColumnNames:     []string{"session_id", "expiration"},
				ColumnIDs:       []descpb.ColumnID{1, 2},
				DefaultColumnID: 2,
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: pk("session_id"),
		NextIndexID:  2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.SqllivenessID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// MigrationsTable is the descriptor for the migrations table. It stores facts
	// about the completion state of long-running migrations. It is used to
	// prevent migrations from running again after they have been completed.
	MigrationsTable = makeTable(descpb.TableDescriptor{
		Name:                    "migrations",
		ID:                      keys.MigrationsID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "major", ID: 1, Type: types.Int, Nullable: false},
			{Name: "minor", ID: 2, Type: types.Int, Nullable: false},
			{Name: "patch", ID: 3, Type: types.Int, Nullable: false},
			{Name: "internal", ID: 4, Type: types.Int, Nullable: false},
			{Name: "completed_at", ID: 5, Type: types.TimestampTZ, Nullable: false},
		},
		NextColumnID: 6,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:            "primary",
				ID:              0,
				ColumnNames:     []string{"major", "minor", "patch", "internal", "completed_at"},
				ColumnIDs:       []descpb.ColumnID{1, 2, 3, 4, 5},
				DefaultColumnID: 5,
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:        tabledesc.PrimaryKeyIndexName,
			ID:          1,
			Unique:      true,
			ColumnNames: []string{"major", "minor", "patch", "internal"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{
				descpb.IndexDescriptor_ASC,
				descpb.IndexDescriptor_ASC,
				descpb.IndexDescriptor_ASC,
				descpb.IndexDescriptor_ASC,
			},
			ColumnIDs: []descpb.ColumnID{1, 2, 3, 4},
			Version:   descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.JobsTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})

	// MigrationsTable is the descriptor for the migrations table. It stores facts
	// about the completion state of long-running migrations. It is used to
	// prevent migrations from running again after they have been completed.
	JoinTokensTable = makeTable(descpb.TableDescriptor{
		Name:                    "join_tokens",
		ID:                      keys.JoinTokensTableID,
		ParentID:                keys.SystemDatabaseID,
		UnexposedParentSchemaID: keys.PublicSchemaID,
		Version:                 1,
		Columns: []descpb.ColumnDescriptor{
			{Name: "id", ID: 1, Type: types.Uuid, Nullable: false},
			{Name: "secret", ID: 2, Type: types.Bytes, Nullable: false},
			{Name: "expiration", ID: 3, Type: types.TimestampTZ, Nullable: false},
		},
		NextColumnID: 4,
		Families: []descpb.ColumnFamilyDescriptor{
			{
				Name:            "primary",
				ID:              0,
				ColumnNames:     []string{"id", "secret", "expiration"},
				ColumnIDs:       []descpb.ColumnID{1, 2, 3},
				DefaultColumnID: 0,
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: descpb.IndexDescriptor{
			Name:        tabledesc.PrimaryKeyIndexName,
			ID:          1,
			Unique:      true,
			ColumnNames: []string{"id"},
			ColumnDirections: []descpb.IndexDescriptor_Direction{
				descpb.IndexDescriptor_ASC,
			},
			ColumnIDs: []descpb.ColumnID{1},
			Version:   descpb.EmptyArraysInInvertedIndexesVersion,
		},
		NextIndexID: 2,
		Privileges: descpb.NewCustomSuperuserPrivilegeDescriptor(
			descpb.SystemAllowedPrivileges[keys.JoinTokensTableID], security.NodeUserName()),
		FormatVersion:  descpb.InterleavedFormatVersion,
		NextMutationID: 1,
	})
)

// newCommentPrivilegeDescriptor returns a privilege descriptor for comment table
func newCommentPrivilegeDescriptor(
	priv privilege.List, owner security.SQLUsername,
) *descpb.PrivilegeDescriptor {
	selectPriv := privilege.List{privilege.SELECT}
	return &descpb.PrivilegeDescriptor{
		OwnerProto: owner.EncodeProto(),
		Users: []descpb.UserPrivileges{
			{
				UserProto:  security.AdminRoleName().EncodeProto(),
				Privileges: priv.ToBitField(),
			},
			{
				UserProto:  security.PublicRoleName().EncodeProto(),
				Privileges: selectPriv.ToBitField(),
			},
			{
				UserProto:  security.RootUserName().EncodeProto(),
				Privileges: priv.ToBitField(),
			},
		},
		Version: descpb.OwnerVersion,
	}
}
