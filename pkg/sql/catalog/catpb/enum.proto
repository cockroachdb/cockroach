// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// This file should contain only EMUN definitions for concepts that
// are internal and not visible to the SQL layer.
// It uses proto3 so other packages can import those enum definitions
// when needed.
syntax = "proto3";
package cockroach.sql.catalog.catpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb";

// NOTE: When adding new enum types to this file, consider implementing the
// redact.SafeValue interface if the values are safe to display in redacted logs.
// This implementation can be added to the redact.go file in this package.

// SystemColumnKind is an enum representing the different kind of system
// columns that can be synthesized by the execution engine.
enum SystemColumnKind {
  // Default value, unused.
  NONE = 0;
  // A system column containing the value of the MVCC timestamp associated
  // with the kv's corresponding to the row.
  MVCCTIMESTAMP = 1;
  // A system column containing the OID of the table that the row came from.
  TABLEOID = 2;
  // A system column containing the value of the OriginID field of the
  // MVCCValueHeader associated with the kv's corresponding to the row.
  ORIGINID = 3;
  // A system column containing the value of the OriginTimestamp field of the
  // MVCCValueHeader associated with the KV's coressponding to the row.
  ORIGINTIMESTAMP = 4;
}

// InvertedIndexColumnKind is the kind of the inverted index on a column. The
// reason this needs to be stored is that we need to be able to check that the
// "opclass" passed into an inverted index declaration (for example,
// gin_trgm_ops) is compatible with the datatype of a particular column
// (gin_tgrm_ops is only valid on text). A future reason is that it's possible
// to desire having more than one type of inverted index on a particular
// datatype - for example, you might want to create a "stemming" inverted index
// on text. And without this extra kind, it wouldn't be possible to distinguish
// a text inverted index that uses trigrams, vs a text inverted index that uses
// stemming.
enum InvertedIndexColumnKind {
  // DEFAULT is the default kind of inverted index column. JSON, Array, and
  // geo inverted indexes all are DEFAULT, though prior to 22.2 they had no
  // kind at all.
  DEFAULT = 0;
  // TRIGRAM is the trigram kind of inverted index column. It's only valid on
  // text columns.
  TRIGRAM = 1;
}

// Type represents the category of policy.
//
// NOTE: When adding a new enum value, ensure it is only utilized after
// verifying that the cluster version has been finalized. Older versions
// will validate that only recognized enum values are present.
enum PolicyType {
  POLICYTYPE_UNUSED = 0;
  PERMISSIVE = 1;
  RESTRICTIVE = 2;
}

// PolicyCommand specifies the SQL commands to which the policy applies.
//
// NOTE: When adding a new enum value, ensure it is only utilized after
// verifying that the cluster version has been finalized. Older versions
// will validate that only recognized enum values are present.
enum PolicyCommand {
  POLICYCOMMAND_UNUSED = 0;
  ALL = 1;
  SELECT = 2;
  INSERT = 3;
  UPDATE = 4;
  DELETE = 5;
}
