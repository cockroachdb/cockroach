// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

// Cannot be proto3 because we are moving definitions from descpb which
// relies on proto2 for its nullable primitives and for its different
// enum interactions with json marshaling.
syntax = "proto2";

package cockroach.sql.catalog.catpb;
option go_package = "catpb";

import "gogoproto/gogo.proto";

// ForeignKeyAction describes the action which should be taken when a foreign
// key constraint reference is acted upon.
enum ForeignKeyAction {
  option (gogoproto.goproto_enum_stringer) = false;
  NO_ACTION = 0;
  RESTRICT = 1;
  SET_NULL = 2;
  SET_DEFAULT = 3;
  CASCADE = 4;
}

// LocalityConfig is used to figure the locality of a table.
message LocalityConfig {
  option (gogoproto.equal) = true;
  // REGIONAL BY TABLE tables have an "implicit" bidirectional dependency with
  // the multi-region enum. The dependency is described "implicit" because
  // even though no column on the table uses the multi-region type descriptor
  // to store the homing region, a value from the type descriptor is stored in
  // the locality config below (when the table is homed in the non-primary
  // region).
  // This changes how type dependencies are constructed for table descriptors.
  // After the introduction of REGIONAL BY TABLE tables, a column on the table
  // descriptor using a type is no longer a necessary (note it is still a
  // sufficient) condition to establish a type dependency. As is the case with
  // adding and dropping columns, this type dependency must be negotiated. As
  // such, switching locality patterns or adding new locality configs must be
  // done so that back references to the multi-region type descriptor are
  // kept sane.
  message RegionalByTable {
    option (gogoproto.equal) = true;
    // Region is set if the table has an affinity with a non-primary region.
    optional string region = 1 [(gogoproto.casttype)="RegionName"];
  }
  message RegionalByRow {
    option (gogoproto.equal) = true;
    // As is set if the table has a REGIONAL BY ROW AS ... set to a specific column.
    optional string as = 1;
  }
  message Global {
    option (gogoproto.equal) = true;
  }
  oneof locality {
    Global global = 1;
    RegionalByTable regional_by_table = 2;
    RegionalByRow regional_by_row = 3;
  }
}

// SystemColumnKind is an enum representing the different kind of system
// columns that can be synthesized by the execution engine.
enum SystemColumnKind {
  // Default value, unused.
  NONE = 0;
  // A system column containing the value of the MVCC timestamp associated
  // with the kv's corresponding to the row.
  MVCCTIMESTAMP = 1;
  // A system column containing the OID of the table that the row came from.
  TABLEOID = 2;
}

// GeneratedAsIdentityType is an enum representing how the creation of
// a column is associated with the GENERATED {ALWAYS | BY DEFAULT} AS IDENTITY
// syntax.
enum GeneratedAsIdentityType {
  // A column created without `GENERATED ... AS IDENTITY` syntax.
  NOT_IDENTITY_COLUMN = 0;
  // A column created with `GENERATED ALWAYS AS IDENTITY` syntax.
  // Such a column does not allow override without `OVERRIDING SYSTEM VALUE`
  // syntax.
  GENERATED_ALWAYS = 1;
  // A column created with `GENERATED BY DEFAULT AS IDENTITY` syntax.
  // Such a column can be overridden without `OVERRIDING SYSTEM VALUE` syntax.
  GENERATED_BY_DEFAULT = 2;
}

// ShardedDescriptor represents an index (either primary or secondary) that is hash
// sharded into a user-specified number of buckets.
//
// As as example, sample field values for the following table:
//
// CREATE TABLE abc (
//   a INT PRIMARY KEY USING HASH WITH BUCKET_COUNT=10,  // column id: 1
//   b BYTES
// );
//
// Sharded descriptor:
//   name:          "a_shard"
//   shard_buckets: 10
//   column_names:  ["a"]
message ShardedDescriptor {
  option (gogoproto.equal) = true;

  // IsSharded indicates whether the index in question is a sharded one.
  optional bool is_sharded = 1 [(gogoproto.nullable) = false];
  // Name is the name of the shard column.
  optional string name = 2 [(gogoproto.nullable) = false];

  // ShardBuckets indicates the number of shards this index is divided into.
  optional int32 shard_buckets = 3 [(gogoproto.nullable) = false,
    (gogoproto.customname) = "ShardBuckets"];

  // ColumnNames lists the names of the columns used to compute the shard column's
  // values.
  repeated string column_names = 4;
}
