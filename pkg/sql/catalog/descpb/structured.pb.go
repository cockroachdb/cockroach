// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/catalog/descpb/structured.proto

package descpb

import (
	bytes "bytes"
	fmt "fmt"
	geoindex "github.com/cockroachdb/cockroach/pkg/geo/geoindex"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	types "github.com/cockroachdb/cockroach/pkg/sql/types"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConstraintValidity int32

const (
	// The constraint is valid for all rows.
	ConstraintValidity_Validated ConstraintValidity = 0
	// The constraint has not yet been validated for all rows (and will not be
	// validated until VALIDATE CONSTRAINT is used).
	ConstraintValidity_Unvalidated ConstraintValidity = 1
	// The constraint was just added, but the validation for existing rows is not
	// yet complete. If validation fails, the constraint will be dropped.
	ConstraintValidity_Validating ConstraintValidity = 2
	// The constraint is being dropped in the schema changer.
	ConstraintValidity_Dropping ConstraintValidity = 3
)

var ConstraintValidity_name = map[int32]string{
	0: "Validated",
	1: "Unvalidated",
	2: "Validating",
	3: "Dropping",
}

var ConstraintValidity_value = map[string]int32{
	"Validated":   0,
	"Unvalidated": 1,
	"Validating":  2,
	"Dropping":    3,
}

func (x ConstraintValidity) Enum() *ConstraintValidity {
	p := new(ConstraintValidity)
	*p = x
	return p
}

func (x ConstraintValidity) String() string {
	return proto.EnumName(ConstraintValidity_name, int32(x))
}

func (x *ConstraintValidity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConstraintValidity_value, data, "ConstraintValidity")
	if err != nil {
		return err
	}
	*x = ConstraintValidity(value)
	return nil
}

func (ConstraintValidity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{0}
}

// SystemColumnKind is an enum representing the different kind of system
// columns that can be synthesized by the execution engine.
type SystemColumnKind int32

const (
	// Default value, unused.
	SystemColumnKind_NONE SystemColumnKind = 0
	// A system column containing the value of the MVCC timestamp associated
	// with the kv's corresponding to the row.
	SystemColumnKind_MVCCTIMESTAMP SystemColumnKind = 1
	// A system column containing the OID of the table that the row came from.
	SystemColumnKind_TABLEOID SystemColumnKind = 2
)

var SystemColumnKind_name = map[int32]string{
	0: "NONE",
	1: "MVCCTIMESTAMP",
	2: "TABLEOID",
}

var SystemColumnKind_value = map[string]int32{
	"NONE":          0,
	"MVCCTIMESTAMP": 1,
	"TABLEOID":      2,
}

func (x SystemColumnKind) Enum() *SystemColumnKind {
	p := new(SystemColumnKind)
	*p = x
	return p
}

func (x SystemColumnKind) String() string {
	return proto.EnumName(SystemColumnKind_name, int32(x))
}

func (x *SystemColumnKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SystemColumnKind_value, data, "SystemColumnKind")
	if err != nil {
		return err
	}
	*x = SystemColumnKind(value)
	return nil
}

func (SystemColumnKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{1}
}

// GeneratedAsIdentityType is an enum representing how the creation of
// a column is associated with the GENERATED {ALWAYS | BY DEFAULT} AS IDENTITY
// syntax.
type GeneratedAsIdentityType int32

const (
	// A column created without `GENERATED ... AS IDENTITY` syntax.
	GeneratedAsIdentityType_NOT_IDENTITY_COLUMN GeneratedAsIdentityType = 0
	// A column created with `GENERATED ALWAYS AS IDENTITY` syntax.
	// Such a column does not allow override without `OVERRIDING SYSTEM VALUE`
	// syntax.
	GeneratedAsIdentityType_GENERATED_ALWAYS GeneratedAsIdentityType = 1
	// A column created with `GENERATED BY DEFAULT AS IDENTITY` syntax.
	// Such a column can be overridden without `OVERRIDING SYSTEM VALUE` syntax.
	GeneratedAsIdentityType_GENERATED_BY_DEFAULT GeneratedAsIdentityType = 2
)

var GeneratedAsIdentityType_name = map[int32]string{
	0: "NOT_IDENTITY_COLUMN",
	1: "GENERATED_ALWAYS",
	2: "GENERATED_BY_DEFAULT",
}

var GeneratedAsIdentityType_value = map[string]int32{
	"NOT_IDENTITY_COLUMN":  0,
	"GENERATED_ALWAYS":     1,
	"GENERATED_BY_DEFAULT": 2,
}

func (x GeneratedAsIdentityType) Enum() *GeneratedAsIdentityType {
	p := new(GeneratedAsIdentityType)
	*p = x
	return p
}

func (x GeneratedAsIdentityType) String() string {
	return proto.EnumName(GeneratedAsIdentityType_name, int32(x))
}

func (x *GeneratedAsIdentityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GeneratedAsIdentityType_value, data, "GeneratedAsIdentityType")
	if err != nil {
		return err
	}
	*x = GeneratedAsIdentityType(value)
	return nil
}

func (GeneratedAsIdentityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{2}
}

// State indicates whether a descriptor is public (i.e., normally visible,
// resolvable, etc.) or in some other state subject to restrictions.
// A non-public table descriptor cannot be leased.
// A schema changer observing DROP set will truncate the table and delete the
// descriptor.
// It is illegal to transition DROP to any other state.
type DescriptorState int32

const (
	// Descriptor is visible and can be leased.
	DescriptorState_PUBLIC DescriptorState = 0
	// Descriptor is being added.
	DescriptorState_ADD DescriptorState = 1
	// Descriptor is being dropped.
	DescriptorState_DROP DescriptorState = 2
	// Descriptor is offline (e.g. for bulk-ingestion). See offline_reason.
	DescriptorState_OFFLINE DescriptorState = 3
)

var DescriptorState_name = map[int32]string{
	0: "PUBLIC",
	1: "ADD",
	2: "DROP",
	3: "OFFLINE",
}

var DescriptorState_value = map[string]int32{
	"PUBLIC":  0,
	"ADD":     1,
	"DROP":    2,
	"OFFLINE": 3,
}

func (x DescriptorState) Enum() *DescriptorState {
	p := new(DescriptorState)
	*p = x
	return p
}

func (x DescriptorState) String() string {
	return proto.EnumName(DescriptorState_name, int32(x))
}

func (x *DescriptorState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DescriptorState_value, data, "DescriptorState")
	if err != nil {
		return err
	}
	*x = DescriptorState(value)
	return nil
}

func (DescriptorState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{3}
}

// SurvivalGoal is the survival goal for a database.
type SurvivalGoal int32

const (
	// Survive a zone failure. This is the default.
	SurvivalGoal_ZONE_FAILURE SurvivalGoal = 0
	// Survive a region failure.
	SurvivalGoal_REGION_FAILURE SurvivalGoal = 1
)

var SurvivalGoal_name = map[int32]string{
	0: "ZONE_FAILURE",
	1: "REGION_FAILURE",
}

var SurvivalGoal_value = map[string]int32{
	"ZONE_FAILURE":   0,
	"REGION_FAILURE": 1,
}

func (x SurvivalGoal) Enum() *SurvivalGoal {
	p := new(SurvivalGoal)
	*p = x
	return p
}

func (x SurvivalGoal) String() string {
	return proto.EnumName(SurvivalGoal_name, int32(x))
}

func (x *SurvivalGoal) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SurvivalGoal_value, data, "SurvivalGoal")
	if err != nil {
		return err
	}
	*x = SurvivalGoal(value)
	return nil
}

func (SurvivalGoal) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{4}
}

// DataPlacement is the data placement strategy for a database.
type DataPlacement int32

const (
	// Default placement - use non-voters.
	DataPlacement_DEFAULT DataPlacement = 0
	// Restricted placement - contain data strictly inside assigned region.
	DataPlacement_RESTRICTED DataPlacement = 1
)

var DataPlacement_name = map[int32]string{
	0: "DEFAULT",
	1: "RESTRICTED",
}

var DataPlacement_value = map[string]int32{
	"DEFAULT":    0,
	"RESTRICTED": 1,
}

func (x DataPlacement) Enum() *DataPlacement {
	p := new(DataPlacement)
	*p = x
	return p
}

func (x DataPlacement) String() string {
	return proto.EnumName(DataPlacement_name, int32(x))
}

func (x *DataPlacement) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataPlacement_value, data, "DataPlacement")
	if err != nil {
		return err
	}
	*x = DataPlacement(value)
	return nil
}

func (DataPlacement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{5}
}

type ForeignKeyReference_Action int32

const (
	ForeignKeyReference_NO_ACTION   ForeignKeyReference_Action = 0
	ForeignKeyReference_RESTRICT    ForeignKeyReference_Action = 1
	ForeignKeyReference_SET_NULL    ForeignKeyReference_Action = 2
	ForeignKeyReference_SET_DEFAULT ForeignKeyReference_Action = 3
	ForeignKeyReference_CASCADE     ForeignKeyReference_Action = 4
)

var ForeignKeyReference_Action_name = map[int32]string{
	0: "NO_ACTION",
	1: "RESTRICT",
	2: "SET_NULL",
	3: "SET_DEFAULT",
	4: "CASCADE",
}

var ForeignKeyReference_Action_value = map[string]int32{
	"NO_ACTION":   0,
	"RESTRICT":    1,
	"SET_NULL":    2,
	"SET_DEFAULT": 3,
	"CASCADE":     4,
}

func (x ForeignKeyReference_Action) Enum() *ForeignKeyReference_Action {
	p := new(ForeignKeyReference_Action)
	*p = x
	return p
}

func (x ForeignKeyReference_Action) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ForeignKeyReference_Action_name, int32(x))
}

func (x *ForeignKeyReference_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ForeignKeyReference_Action_value, data, "ForeignKeyReference_Action")
	if err != nil {
		return err
	}
	*x = ForeignKeyReference_Action(value)
	return nil
}

func (ForeignKeyReference_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{0, 0}
}

// Match is the algorithm used to compare composite keys.
type ForeignKeyReference_Match int32

const (
	ForeignKeyReference_SIMPLE  ForeignKeyReference_Match = 0
	ForeignKeyReference_FULL    ForeignKeyReference_Match = 1
	ForeignKeyReference_PARTIAL ForeignKeyReference_Match = 2
)

var ForeignKeyReference_Match_name = map[int32]string{
	0: "SIMPLE",
	1: "FULL",
	2: "PARTIAL",
}

var ForeignKeyReference_Match_value = map[string]int32{
	"SIMPLE":  0,
	"FULL":    1,
	"PARTIAL": 2,
}

func (x ForeignKeyReference_Match) Enum() *ForeignKeyReference_Match {
	p := new(ForeignKeyReference_Match)
	*p = x
	return p
}

func (x ForeignKeyReference_Match) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ForeignKeyReference_Match_name, int32(x))
}

func (x *ForeignKeyReference_Match) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ForeignKeyReference_Match_value, data, "ForeignKeyReference_Match")
	if err != nil {
		return err
	}
	*x = ForeignKeyReference_Match(value)
	return nil
}

func (ForeignKeyReference_Match) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{0, 1}
}

// The direction of a column in the index.
type IndexDescriptor_Direction int32

const (
	IndexDescriptor_ASC  IndexDescriptor_Direction = 0
	IndexDescriptor_DESC IndexDescriptor_Direction = 1
)

var IndexDescriptor_Direction_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var IndexDescriptor_Direction_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x IndexDescriptor_Direction) Enum() *IndexDescriptor_Direction {
	p := new(IndexDescriptor_Direction)
	*p = x
	return p
}

func (x IndexDescriptor_Direction) String() string {
	return proto.EnumName(IndexDescriptor_Direction_name, int32(x))
}

func (x *IndexDescriptor_Direction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IndexDescriptor_Direction_value, data, "IndexDescriptor_Direction")
	if err != nil {
		return err
	}
	*x = IndexDescriptor_Direction(value)
	return nil
}

func (IndexDescriptor_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{8, 0}
}

// The type of the index.
type IndexDescriptor_Type int32

const (
	IndexDescriptor_FORWARD  IndexDescriptor_Type = 0
	IndexDescriptor_INVERTED IndexDescriptor_Type = 1
)

var IndexDescriptor_Type_name = map[int32]string{
	0: "FORWARD",
	1: "INVERTED",
}

var IndexDescriptor_Type_value = map[string]int32{
	"FORWARD":  0,
	"INVERTED": 1,
}

func (x IndexDescriptor_Type) Enum() *IndexDescriptor_Type {
	p := new(IndexDescriptor_Type)
	*p = x
	return p
}

func (x IndexDescriptor_Type) String() string {
	return proto.EnumName(IndexDescriptor_Type_name, int32(x))
}

func (x *IndexDescriptor_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IndexDescriptor_Type_value, data, "IndexDescriptor_Type")
	if err != nil {
		return err
	}
	*x = IndexDescriptor_Type(value)
	return nil
}

func (IndexDescriptor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{8, 1}
}

type ConstraintToUpdate_ConstraintType int32

const (
	ConstraintToUpdate_CHECK       ConstraintToUpdate_ConstraintType = 0
	ConstraintToUpdate_FOREIGN_KEY ConstraintToUpdate_ConstraintType = 1
	// NOT NULL constraints being added are represented by a dummy check
	// constraint so that a multi-state schema change, including a bulk
	// validation step, can occur. The check field contains the dummy
	// constraint.
	ConstraintToUpdate_NOT_NULL             ConstraintToUpdate_ConstraintType = 2
	ConstraintToUpdate_UNIQUE_WITHOUT_INDEX ConstraintToUpdate_ConstraintType = 3
)

var ConstraintToUpdate_ConstraintType_name = map[int32]string{
	0: "CHECK",
	1: "FOREIGN_KEY",
	2: "NOT_NULL",
	3: "UNIQUE_WITHOUT_INDEX",
}

var ConstraintToUpdate_ConstraintType_value = map[string]int32{
	"CHECK":                0,
	"FOREIGN_KEY":          1,
	"NOT_NULL":             2,
	"UNIQUE_WITHOUT_INDEX": 3,
}

func (x ConstraintToUpdate_ConstraintType) Enum() *ConstraintToUpdate_ConstraintType {
	p := new(ConstraintToUpdate_ConstraintType)
	*p = x
	return p
}

func (x ConstraintToUpdate_ConstraintType) String() string {
	return proto.EnumName(ConstraintToUpdate_ConstraintType_name, int32(x))
}

func (x *ConstraintToUpdate_ConstraintType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConstraintToUpdate_ConstraintType_value, data, "ConstraintToUpdate_ConstraintType")
	if err != nil {
		return err
	}
	*x = ConstraintToUpdate_ConstraintType(value)
	return nil
}

func (ConstraintToUpdate_ConstraintType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{9, 0}
}

// A descriptor within a mutation is unavailable for reads, writes
// and deletes. It is only available for implicit (internal to
// the database) writes and deletes depending on the state of the mutation.
type DescriptorMutation_State int32

const (
	// Not used.
	DescriptorMutation_UNKNOWN DescriptorMutation_State = 0
	// Operations can use this invisible descriptor to implicitly
	// delete entries.
	// Column: A descriptor in this state is invisible to
	// INSERT and UPDATE. DELETE must delete a column in this state.
	// Index: A descriptor in this state is invisible to an INSERT.
	// UPDATE must delete the old value of the index but doesn't write
	// the new value. DELETE must delete the index.
	//
	// When deleting a descriptor, all descriptor related data
	// (column or index data) can only be mass deleted once
	// all the nodes have transitioned to the DELETE_ONLY state.
	DescriptorMutation_DELETE_ONLY DescriptorMutation_State = 1
	// Operations can use this invisible descriptor to implicitly
	// write and delete entries.
	// Column: INSERT will populate this column with the default
	// value. UPDATE ignores this descriptor. DELETE must delete
	// the column.
	// Index: INSERT, UPDATE and DELETE treat this index like any
	// other index.
	//
	// When adding a descriptor, all descriptor related data
	// (column default or index data) can only be backfilled once
	// all nodes have transitioned into the DELETE_AND_WRITE_ONLY state.
	DescriptorMutation_DELETE_AND_WRITE_ONLY DescriptorMutation_State = 2
)

var DescriptorMutation_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "DELETE_ONLY",
	2: "DELETE_AND_WRITE_ONLY",
}

var DescriptorMutation_State_value = map[string]int32{
	"UNKNOWN":               0,
	"DELETE_ONLY":           1,
	"DELETE_AND_WRITE_ONLY": 2,
}

func (x DescriptorMutation_State) Enum() *DescriptorMutation_State {
	p := new(DescriptorMutation_State)
	*p = x
	return p
}

func (x DescriptorMutation_State) String() string {
	return proto.EnumName(DescriptorMutation_State_name, int32(x))
}

func (x *DescriptorMutation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DescriptorMutation_State_value, data, "DescriptorMutation_State")
	if err != nil {
		return err
	}
	*x = DescriptorMutation_State(value)
	return nil
}

func (DescriptorMutation_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{13, 0}
}

// Direction of mutation.
type DescriptorMutation_Direction int32

const (
	// Not used.
	DescriptorMutation_NONE DescriptorMutation_Direction = 0
	// Descriptor is being added.
	DescriptorMutation_ADD DescriptorMutation_Direction = 1
	// Descriptor is being dropped.
	DescriptorMutation_DROP DescriptorMutation_Direction = 2
)

var DescriptorMutation_Direction_name = map[int32]string{
	0: "NONE",
	1: "ADD",
	2: "DROP",
}

var DescriptorMutation_Direction_value = map[string]int32{
	"NONE": 0,
	"ADD":  1,
	"DROP": 2,
}

func (x DescriptorMutation_Direction) Enum() *DescriptorMutation_Direction {
	p := new(DescriptorMutation_Direction)
	*p = x
	return p
}

func (x DescriptorMutation_Direction) String() string {
	return proto.EnumName(DescriptorMutation_Direction_name, int32(x))
}

func (x *DescriptorMutation_Direction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DescriptorMutation_Direction_value, data, "DescriptorMutation_Direction")
	if err != nil {
		return err
	}
	*x = DescriptorMutation_Direction(value)
	return nil
}

func (DescriptorMutation_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{13, 1}
}

// AuditMode indicates which auditing actions to take when this table is used.
type TableDescriptor_AuditMode int32

const (
	TableDescriptor_DISABLED  TableDescriptor_AuditMode = 0
	TableDescriptor_READWRITE TableDescriptor_AuditMode = 1
)

var TableDescriptor_AuditMode_name = map[int32]string{
	0: "DISABLED",
	1: "READWRITE",
}

var TableDescriptor_AuditMode_value = map[string]int32{
	"DISABLED":  0,
	"READWRITE": 1,
}

func (x TableDescriptor_AuditMode) Enum() *TableDescriptor_AuditMode {
	p := new(TableDescriptor_AuditMode)
	*p = x
	return p
}

func (x TableDescriptor_AuditMode) String() string {
	return proto.EnumName(TableDescriptor_AuditMode_name, int32(x))
}

func (x *TableDescriptor_AuditMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TableDescriptor_AuditMode_value, data, "TableDescriptor_AuditMode")
	if err != nil {
		return err
	}
	*x = TableDescriptor_AuditMode(value)
	return nil
}

func (TableDescriptor_AuditMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 0}
}

// Represents the kind of type that this type descriptor represents.
type TypeDescriptor_Kind int32

const (
	// Represents a user defined enum type.
	TypeDescriptor_ENUM TypeDescriptor_Kind = 0
	// Represents a user defined type that is just an alias for another type.
	// As of now, it is used only internally.
	TypeDescriptor_ALIAS TypeDescriptor_Kind = 1
	// Represents a special multi-region enum type which tracks available regions
	// as its enum values.
	TypeDescriptor_MULTIREGION_ENUM TypeDescriptor_Kind = 2
)

var TypeDescriptor_Kind_name = map[int32]string{
	0: "ENUM",
	1: "ALIAS",
	2: "MULTIREGION_ENUM",
}

var TypeDescriptor_Kind_value = map[string]int32{
	"ENUM":             0,
	"ALIAS":            1,
	"MULTIREGION_ENUM": 2,
}

func (x TypeDescriptor_Kind) Enum() *TypeDescriptor_Kind {
	p := new(TypeDescriptor_Kind)
	*p = x
	return p
}

func (x TypeDescriptor_Kind) String() string {
	return proto.EnumName(TypeDescriptor_Kind_name, int32(x))
}

func (x *TypeDescriptor_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TypeDescriptor_Kind_value, data, "TypeDescriptor_Kind")
	if err != nil {
		return err
	}
	*x = TypeDescriptor_Kind(value)
	return nil
}

func (TypeDescriptor_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{17, 0}
}

// Represents what operations are allowed on this ENUM member.
type TypeDescriptor_EnumMember_Capability int32

const (
	// A member in the ALL state can be both read and written.
	TypeDescriptor_EnumMember_ALL TypeDescriptor_EnumMember_Capability = 0
	// A member in the READ_ONLY state can be only read from the bytes
	// representation of the member. Creation of this member from the logical
	// representation is disallowed, which prevents writes of the member.
	TypeDescriptor_EnumMember_READ_ONLY TypeDescriptor_EnumMember_Capability = 1
)

var TypeDescriptor_EnumMember_Capability_name = map[int32]string{
	0: "ALL",
	1: "READ_ONLY",
}

var TypeDescriptor_EnumMember_Capability_value = map[string]int32{
	"ALL":       0,
	"READ_ONLY": 1,
}

func (x TypeDescriptor_EnumMember_Capability) Enum() *TypeDescriptor_EnumMember_Capability {
	p := new(TypeDescriptor_EnumMember_Capability)
	*p = x
	return p
}

func (x TypeDescriptor_EnumMember_Capability) String() string {
	return proto.EnumName(TypeDescriptor_EnumMember_Capability_name, int32(x))
}

func (x *TypeDescriptor_EnumMember_Capability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TypeDescriptor_EnumMember_Capability_value, data, "TypeDescriptor_EnumMember_Capability")
	if err != nil {
		return err
	}
	*x = TypeDescriptor_EnumMember_Capability(value)
	return nil
}

func (TypeDescriptor_EnumMember_Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{17, 0, 0}
}

type TypeDescriptor_EnumMember_Direction int32

const (
	// Not used. Corresponds to the ALL capability.
	TypeDescriptor_EnumMember_NONE TypeDescriptor_EnumMember_Direction = 0
	// Enum value is being added.
	TypeDescriptor_EnumMember_ADD TypeDescriptor_EnumMember_Direction = 1
	// Enum value is being removed.
	TypeDescriptor_EnumMember_REMOVE TypeDescriptor_EnumMember_Direction = 2
)

var TypeDescriptor_EnumMember_Direction_name = map[int32]string{
	0: "NONE",
	1: "ADD",
	2: "REMOVE",
}

var TypeDescriptor_EnumMember_Direction_value = map[string]int32{
	"NONE":   0,
	"ADD":    1,
	"REMOVE": 2,
}

func (x TypeDescriptor_EnumMember_Direction) Enum() *TypeDescriptor_EnumMember_Direction {
	p := new(TypeDescriptor_EnumMember_Direction)
	*p = x
	return p
}

func (x TypeDescriptor_EnumMember_Direction) String() string {
	return proto.EnumName(TypeDescriptor_EnumMember_Direction_name, int32(x))
}

func (x *TypeDescriptor_EnumMember_Direction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TypeDescriptor_EnumMember_Direction_value, data, "TypeDescriptor_EnumMember_Direction")
	if err != nil {
		return err
	}
	*x = TypeDescriptor_EnumMember_Direction(value)
	return nil
}

func (TypeDescriptor_EnumMember_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{17, 0, 1}
}

// ForeignKeyReference is deprecated, replaced by ForeignKeyConstraint in v19.2
// (though it is still possible for table descriptors on disk to have
// ForeignKeyReferences).
//
// It is still used to describe interleavings (see
// IndexDescriptor.InterleavedBy), for which it is a poor choice: only the Table
// and Index fields are used, and the interleaving has nothing to do with
// traditional foreign key references.
type ForeignKeyReference struct {
	Table    ID                 `protobuf:"varint,1,opt,name=table,casttype=ID" json:"table"`
	Index    IndexID            `protobuf:"varint,2,opt,name=index,casttype=IndexID" json:"index"`
	Name     string             `protobuf:"bytes,3,opt,name=name" json:"name"`
	Validity ConstraintValidity `protobuf:"varint,4,opt,name=validity,enum=cockroach.sql.sqlbase.ConstraintValidity" json:"validity"`
	// If this FK only uses a prefix of the columns in its index, we record how
	// many to avoid spuriously counting the additional cols as used by this FK.
	SharedPrefixLen int32                      `protobuf:"varint,5,opt,name=shared_prefix_len,json=sharedPrefixLen" json:"shared_prefix_len"`
	OnDelete        ForeignKeyReference_Action `protobuf:"varint,6,opt,name=on_delete,json=onDelete,enum=cockroach.sql.sqlbase.ForeignKeyReference_Action" json:"on_delete"`
	OnUpdate        ForeignKeyReference_Action `protobuf:"varint,7,opt,name=on_update,json=onUpdate,enum=cockroach.sql.sqlbase.ForeignKeyReference_Action" json:"on_update"`
	// This is only important for composite keys. For all prior matches before
	// the addition of this value, MATCH SIMPLE will be used.
	Match ForeignKeyReference_Match `protobuf:"varint,8,opt,name=match,enum=cockroach.sql.sqlbase.ForeignKeyReference_Match" json:"match"`
}

func (m *ForeignKeyReference) Reset()         { *m = ForeignKeyReference{} }
func (m *ForeignKeyReference) String() string { return proto.CompactTextString(m) }
func (*ForeignKeyReference) ProtoMessage()    {}
func (*ForeignKeyReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{0}
}
func (m *ForeignKeyReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForeignKeyReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForeignKeyReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForeignKeyReference.Merge(m, src)
}
func (m *ForeignKeyReference) XXX_Size() int {
	return m.Size()
}
func (m *ForeignKeyReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ForeignKeyReference.DiscardUnknown(m)
}

var xxx_messageInfo_ForeignKeyReference proto.InternalMessageInfo

// ForeignKeyConstraint is the new (as of 19.2 and VersionTopLevelForeignKeys)
// representation for foreign keys. It's stored on the TableDescriptor and is
// designed to be agnostic to which indexes are available on both the origin
// and referenced tables, so that the optimizer can have full freedom to choose
// the best possible index to satisfy constraint checks at runtime.
type ForeignKeyConstraint struct {
	OriginTableID       ID                         `protobuf:"varint,1,opt,name=origin_table_id,json=originTableId,casttype=ID" json:"origin_table_id"`
	OriginColumnIDs     []ColumnID                 `protobuf:"varint,2,rep,name=origin_column_ids,json=originColumnIds,casttype=ColumnID" json:"origin_column_ids,omitempty"`
	ReferencedColumnIDs []ColumnID                 `protobuf:"varint,3,rep,name=referenced_column_ids,json=referencedColumnIds,casttype=ColumnID" json:"referenced_column_ids,omitempty"`
	ReferencedTableID   ID                         `protobuf:"varint,4,opt,name=referenced_table_id,json=referencedTableId,casttype=ID" json:"referenced_table_id"`
	Name                string                     `protobuf:"bytes,5,opt,name=name" json:"name"`
	Validity            ConstraintValidity         `protobuf:"varint,6,opt,name=validity,enum=cockroach.sql.sqlbase.ConstraintValidity" json:"validity"`
	OnDelete            ForeignKeyReference_Action `protobuf:"varint,7,opt,name=on_delete,json=onDelete,enum=cockroach.sql.sqlbase.ForeignKeyReference_Action" json:"on_delete"`
	OnUpdate            ForeignKeyReference_Action `protobuf:"varint,8,opt,name=on_update,json=onUpdate,enum=cockroach.sql.sqlbase.ForeignKeyReference_Action" json:"on_update"`
	// This is only important for composite keys. For all prior matches before
	// the addition of this value, MATCH SIMPLE will be used.
	Match ForeignKeyReference_Match `protobuf:"varint,9,opt,name=match,enum=cockroach.sql.sqlbase.ForeignKeyReference_Match" json:"match"`
}

func (m *ForeignKeyConstraint) Reset()         { *m = ForeignKeyConstraint{} }
func (m *ForeignKeyConstraint) String() string { return proto.CompactTextString(m) }
func (*ForeignKeyConstraint) ProtoMessage()    {}
func (*ForeignKeyConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{1}
}
func (m *ForeignKeyConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForeignKeyConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForeignKeyConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForeignKeyConstraint.Merge(m, src)
}
func (m *ForeignKeyConstraint) XXX_Size() int {
	return m.Size()
}
func (m *ForeignKeyConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_ForeignKeyConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_ForeignKeyConstraint proto.InternalMessageInfo

// UniqueWithoutIndexConstraint is the representation of a unique constraint
// that is not enforced by an index. It is stored on the TableDescriptor.
type UniqueWithoutIndexConstraint struct {
	TableID   ID                 `protobuf:"varint,1,opt,name=table_id,json=tableId,casttype=ID" json:"table_id"`
	ColumnIDs []ColumnID         `protobuf:"varint,2,rep,name=column_ids,json=columnIds,casttype=ColumnID" json:"column_ids,omitempty"`
	Name      string             `protobuf:"bytes,3,opt,name=name" json:"name"`
	Validity  ConstraintValidity `protobuf:"varint,4,opt,name=validity,enum=cockroach.sql.sqlbase.ConstraintValidity" json:"validity"`
	// Predicate, if it's not empty, indicates that the constraint is a partial
	// unique constraint with Predicate as the expression. Columns are referred to
	// in the expression by their name.
	Predicate string `protobuf:"bytes,5,opt,name=predicate" json:"predicate"`
}

func (m *UniqueWithoutIndexConstraint) Reset()         { *m = UniqueWithoutIndexConstraint{} }
func (m *UniqueWithoutIndexConstraint) String() string { return proto.CompactTextString(m) }
func (*UniqueWithoutIndexConstraint) ProtoMessage()    {}
func (*UniqueWithoutIndexConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{2}
}
func (m *UniqueWithoutIndexConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniqueWithoutIndexConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UniqueWithoutIndexConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueWithoutIndexConstraint.Merge(m, src)
}
func (m *UniqueWithoutIndexConstraint) XXX_Size() int {
	return m.Size()
}
func (m *UniqueWithoutIndexConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueWithoutIndexConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueWithoutIndexConstraint proto.InternalMessageInfo

type ColumnDescriptor struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name"`
	ID       ColumnID `protobuf:"varint,2,opt,name=id,casttype=ColumnID" json:"id"`
	Type     *types.T `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Nullable bool     `protobuf:"varint,4,opt,name=nullable" json:"nullable"`
	// Default expression to use to populate the column on insert if no
	// value is provided. Note that it is not correct to use DefaultExpr
	// as output to display to a user. User defined types within DefaultExpr
	// have been serialized in a internal format. Instead, use one of the
	// schemaexpr.FormatExpr* functions.
	DefaultExpr *string `protobuf:"bytes,5,opt,name=default_expr,json=defaultExpr" json:"default_expr,omitempty"`
	// On update expression to use to populate the column on update if no
	// value is provided. Note that it is not correct to use OnUpdateExpr
	// as output to display to a user. User defined types within OnUpdateExpr
	// have been serialized in a internal format. Instead, use one of the
	// schemaexpr.FormatExpr* functions.
	OnUpdateExpr *string `protobuf:"bytes,18,opt,name=on_update_expr,json=onUpdateExpr" json:"on_update_expr,omitempty"`
	// A hidden column does not appear in star expansion, but can be referenced in
	// queries and can be viewed when inspecting a table via SHOW CREATE TABLE. A
	// column cannot be both hidden and inaccessible.
	Hidden bool `protobuf:"varint,6,opt,name=hidden" json:"hidden"`
	// An inaccessible column does not appear in star expansion and cannot be
	// referenced in queries. It cannot be viewed when inspecting a table via SHOW
	// CREATE TABLE and is not shown as an attribute of its table in
	// pg_catalog.pg_attribute. A column cannot be both hidden and inaccessible.
	Inaccessible bool `protobuf:"varint,17,opt,name=inaccessible" json:"inaccessible"`
	// GeneratedAsIdentityType is an enum that represents how the creation of the
	// column is associated with the GENERATED ... AS IDENTITY syntax.
	// If the column is created with GENERATED ALWAYS AS IDENTITY syntax,
	// GeneratedAsIdentityType for this column will be set to GENERATED_ALWAYS.
	// If the column is created with GENERATED BY DEFAULT AS IDENTITY syntax,
	// GeneratedAsIdentityType for this column will be set to GENERATED_BY_DEFAULT.
	// If the column is created without using GENERATED ... AS IDENTITY syntax,
	// GeneratedAsIdentityType for this column will be set to the default
	// NOT_IDENTITY_COLUMN.
	GeneratedAsIdentityType GeneratedAsIdentityType `protobuf:"varint,19,opt,name=generated_as_identity_type,json=generatedAsIdentityType,enum=cockroach.sql.sqlbase.GeneratedAsIdentityType" json:"generated_as_identity_type"`
	// Expression to specify the sequence option for a `GENERATED AS IDENTITY`
	// column.
	GeneratedAsIdentitySequenceOption *string `protobuf:"bytes,20,opt,name=generated_as_identity_sequence_option,json=generatedAsIdentitySequenceOption" json:"generated_as_identity_sequence_option,omitempty"`
	// Ids of sequences used in this column's DEFAULT and ON UPDATE expressions,
	// in calls to nextval().
	UsesSequenceIds []ID `protobuf:"varint,10,rep,name=uses_sequence_ids,json=usesSequenceIds,casttype=ID" json:"uses_sequence_ids,omitempty"`
	// Ids of sequences that the column owns.
	OwnsSequenceIds []ID `protobuf:"varint,12,rep,name=owns_sequence_ids,json=ownsSequenceIds,casttype=ID" json:"owns_sequence_ids,omitempty"`
	// Expression to use to compute the value of this column if this is a
	// computed column. Note that it is not correct to use ComputeExpr
	// as output to display to a user. User defined types within ComputeExpr
	// have been serialized in a internal format. Instead, use one of the
	// schemaexpr.FormatExpr* functions.
	ComputeExpr *string `protobuf:"bytes,11,opt,name=compute_expr,json=computeExpr" json:"compute_expr,omitempty"`
	// A computed column can be stored or virtual.
	// Virtual can only be true if there is a compute expression.
	Virtual bool `protobuf:"varint,16,opt,name=virtual" json:"virtual"`
	// PGAttributeNum must be accessed through the accessor, since it is set
	// lazily, it is incorrect to access it directly.
	// PGAttributeNum represents a column's number in catalog tables.
	// This only differs from ID when the Column order is swapped or
	// the ColumnDescriptor must be remade while remaining visual ordering.
	// This does not exist in TableDescriptors pre 20.2.
	PGAttributeNum uint32 `protobuf:"varint,13,opt,name=pg_attribute_num,json=pgAttributeNum" json:"pg_attribute_num"`
	// Used to indicate column is used and dropped for ALTER COLUMN TYPE mutation.
	AlterColumnTypeInProgress bool `protobuf:"varint,14,opt,name=alter_column_type_in_progress,json=alterColumnTypeInProgress" json:"alter_column_type_in_progress"`
	// SystemColumnKind represents what kind of system column this column
	// descriptor represents, if any.
	SystemColumnKind SystemColumnKind `protobuf:"varint,15,opt,name=system_column_kind,json=systemColumnKind,enum=cockroach.sql.sqlbase.SystemColumnKind" json:"system_column_kind"`
}

func (m *ColumnDescriptor) Reset()         { *m = ColumnDescriptor{} }
func (m *ColumnDescriptor) String() string { return proto.CompactTextString(m) }
func (*ColumnDescriptor) ProtoMessage()    {}
func (*ColumnDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{3}
}
func (m *ColumnDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ColumnDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnDescriptor.Merge(m, src)
}
func (m *ColumnDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *ColumnDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnDescriptor proto.InternalMessageInfo

// ColumnFamilyDescriptor is set of columns stored together in one kv entry.
// For more information, look at `docs/tech-notes/encoding.md#value-encoding`.
type ColumnFamilyDescriptor struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	// Column family 0 is *always* included in k/v pairs for a row. This makes
	// sure that rows will all NULL values still have a k/v pair. When performing
	// optimizations involving column families, ensure that column family 0
	// is scanned if the row may have nulls.
	ID FamilyID `protobuf:"varint,2,opt,name=id,casttype=FamilyID" json:"id"`
	// A list of column names of which the family is comprised. This list
	// parallels the column_ids list. If duplicating the storage of the column
	// names here proves to be prohibitive, we could clear this field before
	// saving and reconstruct it after loading.
	ColumnNames []string `protobuf:"bytes,3,rep,name=column_names,json=columnNames" json:"column_names,omitempty"`
	// A list of column ids of which the family is comprised. This list parallels
	// the column_names list.
	ColumnIDs []ColumnID `protobuf:"varint,4,rep,name=column_ids,json=columnIds,casttype=ColumnID" json:"column_ids,omitempty"`
	// If nonzero, the column involved in the single column optimization.
	//
	// Families store columns in a ValueType_TUPLE as repeated <columnID><data>
	// entries. As a space optimization and for backward compatibility, a single
	// column is written without the column id prefix. Because more columns could
	// be added, it would be ambiguous which column was stored when read back in,
	// so this field supplies it.
	DefaultColumnID ColumnID `protobuf:"varint,5,opt,name=default_column_id,json=defaultColumnId,casttype=ColumnID" json:"default_column_id"`
}

func (m *ColumnFamilyDescriptor) Reset()         { *m = ColumnFamilyDescriptor{} }
func (m *ColumnFamilyDescriptor) String() string { return proto.CompactTextString(m) }
func (*ColumnFamilyDescriptor) ProtoMessage()    {}
func (*ColumnFamilyDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{4}
}
func (m *ColumnFamilyDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnFamilyDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ColumnFamilyDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnFamilyDescriptor.Merge(m, src)
}
func (m *ColumnFamilyDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *ColumnFamilyDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnFamilyDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnFamilyDescriptor proto.InternalMessageInfo

// InterleaveDescriptor represents an index (either primary or secondary) that
// is interleaved into another table's data.
//
// Example:
// Table 1 -> /a/b
// Table 2 -> /a/b/c
// Table 3 -> /a/b/c/d
//
// There are two components (table 2 is the parent and table 1 is the
// grandparent) with shared lengths 2 and 1.
type InterleaveDescriptor struct {
	// Ancestors contains the nesting of interleaves in the order they appear in
	// an encoded key. This means they are always in the far-to-near ancestor
	// order (e.g. grand-grand-parent, grand-parent, parent).
	Ancestors []InterleaveDescriptor_Ancestor `protobuf:"bytes,1,rep,name=ancestors" json:"ancestors"`
}

func (m *InterleaveDescriptor) Reset()         { *m = InterleaveDescriptor{} }
func (m *InterleaveDescriptor) String() string { return proto.CompactTextString(m) }
func (*InterleaveDescriptor) ProtoMessage()    {}
func (*InterleaveDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{5}
}
func (m *InterleaveDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterleaveDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterleaveDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterleaveDescriptor.Merge(m, src)
}
func (m *InterleaveDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *InterleaveDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_InterleaveDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_InterleaveDescriptor proto.InternalMessageInfo

type InterleaveDescriptor_Ancestor struct {
	// TableID is the ID of the table being interleaved into.
	TableID ID `protobuf:"varint,1,opt,name=table_id,json=tableId,casttype=ID" json:"table_id"`
	// IndexID is the ID of the parent index being interleaved into.
	IndexID IndexID `protobuf:"varint,2,opt,name=index_id,json=indexId,casttype=IndexID" json:"index_id"`
	// SharedPrefixLen is how many fields are shared between a parent and child
	// being interleaved, excluding any fields shared between parent and
	// grandparent. Thus, the sum of SharedPrefixLens in the components of an
	// InterleaveDescriptor is never more than the number of fields in the index
	// being interleaved.
	// In cockroach 1.0, this value did not exist and thus a check for > 0
	// must be performed prior to its use.
	SharedPrefixLen uint32 `protobuf:"varint,3,opt,name=shared_prefix_len,json=sharedPrefixLen" json:"shared_prefix_len"`
}

func (m *InterleaveDescriptor_Ancestor) Reset()         { *m = InterleaveDescriptor_Ancestor{} }
func (m *InterleaveDescriptor_Ancestor) String() string { return proto.CompactTextString(m) }
func (*InterleaveDescriptor_Ancestor) ProtoMessage()    {}
func (*InterleaveDescriptor_Ancestor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{5, 0}
}
func (m *InterleaveDescriptor_Ancestor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterleaveDescriptor_Ancestor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterleaveDescriptor_Ancestor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterleaveDescriptor_Ancestor.Merge(m, src)
}
func (m *InterleaveDescriptor_Ancestor) XXX_Size() int {
	return m.Size()
}
func (m *InterleaveDescriptor_Ancestor) XXX_DiscardUnknown() {
	xxx_messageInfo_InterleaveDescriptor_Ancestor.DiscardUnknown(m)
}

var xxx_messageInfo_InterleaveDescriptor_Ancestor proto.InternalMessageInfo

// ShardedDescriptor represents an index (either primary or secondary) that is hash
// sharded into a user-specified number of buckets.
//
// As as example, sample field values for the following table:
//
// CREATE TABLE abc (
//   a INT PRIMARY KEY USING HASH WITH BUCKET_COUNT=10,  // column id: 1
//   b BYTES
// );
//
// Sharded descriptor:
//   name:          "a_shard"
//   shard_buckets: 10
//   column_names:  ["a"]
type ShardedDescriptor struct {
	// IsSharded indicates whether the index in question is a sharded one.
	IsSharded bool `protobuf:"varint,1,opt,name=is_sharded,json=isSharded" json:"is_sharded"`
	// Name is the name of the shard column.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name"`
	// ShardBuckets indicates the number of shards this index is divided into.
	ShardBuckets int32 `protobuf:"varint,3,opt,name=shard_buckets,json=shardBuckets" json:"shard_buckets"`
	// ColumnNames lists the names of the columns used to compute the shard column's
	// values.
	ColumnNames []string `protobuf:"bytes,4,rep,name=column_names,json=columnNames" json:"column_names,omitempty"`
}

func (m *ShardedDescriptor) Reset()         { *m = ShardedDescriptor{} }
func (m *ShardedDescriptor) String() string { return proto.CompactTextString(m) }
func (*ShardedDescriptor) ProtoMessage()    {}
func (*ShardedDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{6}
}
func (m *ShardedDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardedDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShardedDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardedDescriptor.Merge(m, src)
}
func (m *ShardedDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *ShardedDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardedDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_ShardedDescriptor proto.InternalMessageInfo

// PartitioningDescriptor represents the partitioning of an index into spans
// of keys addressable by a zone config. The key encoding is unchanged. Each
// partition may optionally be itself divided into further partitions, called
// subpartitions.
type PartitioningDescriptor struct {
	// NumColumns is how large of a prefix of the columns in an index are used in
	// the function mapping column values to partitions. If this is a
	// subpartition, this is offset to start from the end of the parent
	// partition's columns. If NumColumns is 0, then there is no partitioning.
	NumColumns uint32 `protobuf:"varint,1,opt,name=num_columns,json=numColumns" json:"num_columns"`
	// NumImplicitColumns specifies the number of columns that implicitly prefix a given index.
	// This occurs if a user specifies a PARTITION BY which is not a prefix of the given index,
	// in which case the ColumnIDs are added in front of the index and this field denotes
	// the number of columns added as a prefix.
	// If NumImplicitColumns is 0, there are no implicit columns defined for the index."
	NumImplicitColumns uint32 `protobuf:"varint,4,opt,name=num_implicit_columns,json=numImplicitColumns" json:"num_implicit_columns"`
	// Exactly one of List or Range is required to be non-empty if NumColumns is
	// non-zero.
	List  []PartitioningDescriptor_List  `protobuf:"bytes,2,rep,name=list" json:"list"`
	Range []PartitioningDescriptor_Range `protobuf:"bytes,3,rep,name=range" json:"range"`
}

func (m *PartitioningDescriptor) Reset()         { *m = PartitioningDescriptor{} }
func (m *PartitioningDescriptor) String() string { return proto.CompactTextString(m) }
func (*PartitioningDescriptor) ProtoMessage()    {}
func (*PartitioningDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{7}
}
func (m *PartitioningDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitioningDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitioningDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitioningDescriptor.Merge(m, src)
}
func (m *PartitioningDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *PartitioningDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitioningDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_PartitioningDescriptor proto.InternalMessageInfo

// List represents a list partitioning, which maps individual tuples to
// partitions.
type PartitioningDescriptor_List struct {
	// Name is the partition name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	// Values is an unordered set of the tuples included in this partition. Each
	// tuple is encoded with the EncDatum value encoding. DEFAULT is encoded as
	// NOT NULL followed by PartitionDefaultVal encoded as a non-sorting
	// uvarint.
	Values [][]byte `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	// Subpartitioning represents a further partitioning of this list partition.
	Subpartitioning PartitioningDescriptor `protobuf:"bytes,3,opt,name=subpartitioning" json:"subpartitioning"`
}

func (m *PartitioningDescriptor_List) Reset()         { *m = PartitioningDescriptor_List{} }
func (m *PartitioningDescriptor_List) String() string { return proto.CompactTextString(m) }
func (*PartitioningDescriptor_List) ProtoMessage()    {}
func (*PartitioningDescriptor_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{7, 0}
}
func (m *PartitioningDescriptor_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitioningDescriptor_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitioningDescriptor_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitioningDescriptor_List.Merge(m, src)
}
func (m *PartitioningDescriptor_List) XXX_Size() int {
	return m.Size()
}
func (m *PartitioningDescriptor_List) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitioningDescriptor_List.DiscardUnknown(m)
}

var xxx_messageInfo_PartitioningDescriptor_List proto.InternalMessageInfo

// Range represents a range partitioning, which maps ranges of tuples to
// partitions by specifying exclusive upper bounds. The range partitions in a
// PartitioningDescriptor are required to be sorted by UpperBound.
type PartitioningDescriptor_Range struct {
	// Name is the partition name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	// FromInclusive is the inclusive lower bound of this range partition. It is
	// encoded with the EncDatum value encoding. MINVALUE and MAXVALUE are
	// encoded as NOT NULL followed by a PartitionSpecialValCode encoded as a
	// non-sorting uvarint.
	FromInclusive []byte `protobuf:"bytes,3,opt,name=from_inclusive,json=fromInclusive" json:"from_inclusive,omitempty"`
	// ToExclusive is the exclusive upper bound of this range partition. It is
	// encoded in the same way as From.
	ToExclusive []byte `protobuf:"bytes,2,opt,name=to_exclusive,json=toExclusive" json:"to_exclusive,omitempty"`
}

func (m *PartitioningDescriptor_Range) Reset()         { *m = PartitioningDescriptor_Range{} }
func (m *PartitioningDescriptor_Range) String() string { return proto.CompactTextString(m) }
func (*PartitioningDescriptor_Range) ProtoMessage()    {}
func (*PartitioningDescriptor_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{7, 1}
}
func (m *PartitioningDescriptor_Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitioningDescriptor_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitioningDescriptor_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitioningDescriptor_Range.Merge(m, src)
}
func (m *PartitioningDescriptor_Range) XXX_Size() int {
	return m.Size()
}
func (m *PartitioningDescriptor_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitioningDescriptor_Range.DiscardUnknown(m)
}

var xxx_messageInfo_PartitioningDescriptor_Range proto.InternalMessageInfo

// IndexDescriptor describes an index (primary or secondary).
//
// Sample field values on the following table:
//
//   CREATE TABLE t (
//     k1 INT NOT NULL,   // column ID: 1
//     k2 INT NOT NULL,   // column ID: 2
//     u INT NULL,        // column ID: 3
//     v INT NULL,        // column ID: 4
//     w INT NULL,        // column ID: 5
//     CONSTRAINT "primary" PRIMARY KEY (k1, k2),
//     INDEX k1v (k1, v) STORING (w),
//     FAMILY "primary" (k1, k2, u, v, w)
//   )
//
// Primary index:
//   name:                   primary
//   id:                     1
//   unique:                 true
//   key_column_names:       k1, k2
//   key_column_directions:  ASC, ASC
//   key_column_ids:         1, 2   // k1, k2
//
// [old STORING encoding] Index k1v (k1, v) STORING (w):
//   name:                   k1v
//   id:                     2
//   unique:                 false
//   key_column_names:       k1, v
//   key_column_directions:  ASC, ASC
//   store_column_names:     w
//   key_column_ids:         1, 4   // k1, v
//   key_suffix_column_ids:  2, 5   // k2, w
//
// [new STORING encoding] Index k1v (k1, v) STORING (w):
//   name:                   k1v
//   id:                     2
//   unique:                 false
//   key_column_names:       k1, v
//   key_column_directions:  ASC, ASC
//   store_column_names:     w
//   key_column_ids:         1, 4   // k1, v
//   key_suffix_column_ids:  2      // k2
//   store_column_ids:       5      // w
type IndexDescriptor struct {
	Name    string                 `protobuf:"bytes,1,opt,name=name" json:"name"`
	ID      IndexID                `protobuf:"varint,2,opt,name=id,casttype=IndexID" json:"id"`
	Unique  bool                   `protobuf:"varint,3,opt,name=unique" json:"unique"`
	Version IndexDescriptorVersion `protobuf:"varint,18,opt,name=version,casttype=IndexDescriptorVersion" json:"version"`
	// An ordered list of column names of which the index is comprised; these
	// columns do not include any additional stored columns (which are in
	// stored_column_names). This list parallels the key_column_ids list.
	//
	// If the index is an inverted index, the last column in the list is
	// inverted and all others are not.
	//
	// Note: if duplicating the storage of the column names here proves to be
	// prohibitive, we could clear this field before saving and reconstruct it
	// after loading.
	KeyColumnNames []string `protobuf:"bytes,4,rep,name=key_column_names,json=keyColumnNames" json:"key_column_names,omitempty"`
	// The sort direction of each column in key_column_names.
	KeyColumnDirections []IndexDescriptor_Direction `protobuf:"varint,8,rep,name=key_column_directions,json=keyColumnDirections,enum=cockroach.sql.sqlbase.IndexDescriptor_Direction" json:"key_column_directions,omitempty"`
	// An ordered list of column names which the index stores in addition to the
	// columns which are explicitly part of the index (STORING clause). Only used
	// for secondary indexes.
	StoreColumnNames []string `protobuf:"bytes,5,rep,name=store_column_names,json=storeColumnNames" json:"store_column_names,omitempty"`
	// An ordered list of column IDs of which the index key is comprised. This
	// list parallels the key_column_names list and does not include any
	// additional stored columns. If the index is an inverted index, the last
	// column in the list is inverted and all others are not.
	KeyColumnIDs []ColumnID `protobuf:"varint,6,rep,name=key_column_ids,json=keyColumnIds,casttype=ColumnID" json:"key_column_ids,omitempty"`
	// An ordered list of IDs for the additional columns associated with the
	// index:
	//  - implicit columns, which are all the primary key columns that are not
	//    already part of the index, in other words
	//        PrimaryIndex.key_column_ids - key_column_ids.
	//  - stored columns (the columns in store_column_names) if this index uses the
	//    old STORING encoding (key-encoded data).
	//
	// Only used for secondary indexes.
	// For non-unique indexes, these columns are appended to the key.
	// For unique indexes, these columns are stored in the value (unless the key
	// contains a NULL value: then the extra columns are appended to the key to
	// unique-ify it).
	// This distinction exists because we want to be able to insert an entry using
	// a single conditional put on the key.
	KeySuffixColumnIDs []ColumnID `protobuf:"varint,7,rep,name=key_suffix_column_ids,json=keySuffixColumnIds,casttype=ColumnID" json:"key_suffix_column_ids,omitempty"`
	// An ordered list of column IDs that parallels store_column_names if this
	// index uses the new STORING encoding (value-encoded data, always in the KV
	// value).
	StoreColumnIDs []ColumnID `protobuf:"varint,14,rep,name=store_column_ids,json=storeColumnIds,casttype=ColumnID" json:"store_column_ids,omitempty"`
	// CompositeColumnIDs contains an ordered list of IDs of columns that appear
	// in the index and have a composite encoding. Includes IDs from both
	// key_column_ids and key_suffix_column_ids.
	CompositeColumnIDs []ColumnID `protobuf:"varint,13,rep,name=composite_column_ids,json=compositeColumnIds,casttype=ColumnID" json:"composite_column_ids,omitempty"`
	// ForeignKey and ReferencedBy are deprecated and not stored from 19.2 onward.
	ForeignKey   ForeignKeyReference   `protobuf:"bytes,9,opt,name=foreign_key,json=foreignKey" json:"foreign_key"`        // Deprecated: Do not use.
	ReferencedBy []ForeignKeyReference `protobuf:"bytes,10,rep,name=referenced_by,json=referencedBy" json:"referenced_by"` // Deprecated: Do not use.
	// Interleave, if it's not the zero value, describes how this index's data is
	// interleaved into another index's data.
	Interleave InterleaveDescriptor `protobuf:"bytes,11,opt,name=interleave" json:"interleave"`
	// InterleavedBy contains a reference to every table/index that is interleaved
	// into this one.
	//
	// Note that any of these indexes can themselves be interleaved by other
	// tables but this list contains only those for which this index is a direct
	// interleave parent.
	//
	// Only the Table and Index fields of the ForeignKeyReference are used. And
	// despite the message used here, interleavings don't have to have
	// corresponding foreign key references (and whether they do or not is
	// irrelevant for this field).
	InterleavedBy []ForeignKeyReference `protobuf:"bytes,12,rep,name=interleaved_by,json=interleavedBy" json:"interleaved_by"`
	// Partitioning, if it's not the zero value, describes how this index's data
	// is partitioned into spans of keys each addressable by zone configs.
	Partitioning PartitioningDescriptor `protobuf:"bytes,15,opt,name=partitioning" json:"partitioning"`
	// Type is the type of index, inverted or forward.
	Type IndexDescriptor_Type `protobuf:"varint,16,opt,name=type,enum=cockroach.sql.sqlbase.IndexDescriptor_Type" json:"type"`
	// CreatedExplicitly specifies whether this index was created explicitly
	// (i.e. via 'CREATE INDEX' statement).
	CreatedExplicitly bool `protobuf:"varint,17,opt,name=created_explicitly,json=createdExplicitly" json:"created_explicitly"`
	// EncodingType represents what sort of k/v encoding is used to store this descriptor on disk.
	// As of now, this includes the existing secondary index encoding, or the primary index encoding.
	// N.B. This field is only recognized on secondary indexes.
	EncodingType IndexDescriptorEncodingType `protobuf:"varint,19,opt,name=encoding_type,json=encodingType,casttype=IndexDescriptorEncodingType" json:"encoding_type"`
	// Sharded, if it's not the zero value, describes how this index is sharded.
	Sharded ShardedDescriptor `protobuf:"bytes,20,opt,name=sharded" json:"sharded"`
	// Disabled is used by the DROP PRIMARY KEY command to mark
	// that this index is disabled for further use.
	Disabled bool `protobuf:"varint,21,opt,name=disabled" json:"disabled"`
	// GeoConfig, if it's not the zero value, describes configuration for
	// this geospatial inverted index.
	GeoConfig geoindex.Config `protobuf:"bytes,22,opt,name=geo_config,json=geoConfig" json:"geo_config"`
	// Predicate, if it's not empty, indicates that the index is a partial index
	// with Predicate as the expression. If Predicate is empty, the index is not
	// a partial index. Columns are referred to in the expression by their name.
	// TODO(mgartner): Update the comment to explain that columns are referenced
	// by their ID once #49766 is addressed.
	Predicate string `protobuf:"bytes,23,opt,name=predicate" json:"predicate"`
}

func (m *IndexDescriptor) Reset()         { *m = IndexDescriptor{} }
func (m *IndexDescriptor) String() string { return proto.CompactTextString(m) }
func (*IndexDescriptor) ProtoMessage()    {}
func (*IndexDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{8}
}
func (m *IndexDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexDescriptor.Merge(m, src)
}
func (m *IndexDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *IndexDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_IndexDescriptor proto.InternalMessageInfo

// ConstraintToUpdate represents a constraint to be added to the table and
// validated for existing rows. More generally, in the future, when we support
// adding constraints that are unvalidated for existing rows and can be
// validated later using VALIDATE CONSTRAINT, this mutation will also represent
// either adding an unvalidated constraint or validating an existing constraint.
//
// This mutation effects changes only in the backfill step of the schema
// changer: First, a new version of the table descriptor with the constraint
// added is published, after all columns being added have been backfilled. After
// waiting for the constraint to be enforced for writes on all nodes, the
// constraint is then validated for all existing rows. This ensures that
// constraints added to columns that are being added are correctly enforced
// before the column becomes public.
type ConstraintToUpdate struct {
	ConstraintType ConstraintToUpdate_ConstraintType `protobuf:"varint,1,req,name=constraint_type,json=constraintType,enum=cockroach.sql.sqlbase.ConstraintToUpdate_ConstraintType" json:"constraint_type"`
	Name           string                            `protobuf:"bytes,2,req,name=name" json:"name"`
	Check          TableDescriptor_CheckConstraint   `protobuf:"bytes,3,opt,name=check" json:"check"`
	// All fields past 3 haven't been persisted before 19.2.
	ForeignKey                   ForeignKeyConstraint         `protobuf:"bytes,4,opt,name=foreign_key,json=foreignKey" json:"foreign_key"`
	NotNullColumn                ColumnID                     `protobuf:"varint,6,opt,name=not_null_column,json=notNullColumn,casttype=ColumnID" json:"not_null_column"`
	UniqueWithoutIndexConstraint UniqueWithoutIndexConstraint `protobuf:"bytes,7,opt,name=unique_without_index_constraint,json=uniqueWithoutIndexConstraint" json:"unique_without_index_constraint"`
}

func (m *ConstraintToUpdate) Reset()         { *m = ConstraintToUpdate{} }
func (m *ConstraintToUpdate) String() string { return proto.CompactTextString(m) }
func (*ConstraintToUpdate) ProtoMessage()    {}
func (*ConstraintToUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{9}
}
func (m *ConstraintToUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstraintToUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConstraintToUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstraintToUpdate.Merge(m, src)
}
func (m *ConstraintToUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ConstraintToUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstraintToUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ConstraintToUpdate proto.InternalMessageInfo

// PrimaryKeySwap is a mutation corresponding to the atomic swap phase
// during a primary key change where old versions of indexes are exchanged for
// updated versions, and the table's new primary key is written into the descriptor.
type PrimaryKeySwap struct {
	// old_primary_index_id is the ID of the old primary index for the table.
	OldPrimaryIndexId IndexID `protobuf:"varint,4,opt,name=old_primary_index_id,json=oldPrimaryIndexId,casttype=IndexID" json:"old_primary_index_id"`
	// new_primary_index_id is the ID of the new primary index for the table.
	NewPrimaryIndexId IndexID `protobuf:"varint,1,opt,name=new_primary_index_id,json=newPrimaryIndexId,casttype=IndexID" json:"new_primary_index_id"`
	// old_indexes and new_indexes are lists of IndexID's where the i'th index in old_indexes will be
	// swapped out with the i'th index in new_indexes.
	OldIndexes []IndexID `protobuf:"varint,2,rep,name=old_indexes,json=oldIndexes,casttype=IndexID" json:"old_indexes,omitempty"`
	NewIndexes []IndexID `protobuf:"varint,3,rep,name=new_indexes,json=newIndexes,casttype=IndexID" json:"new_indexes,omitempty"`
	// new_primary_index_name is the name of the primary key when added as a
	// new constraint to a table without a primary key. In other cases, it is
	// the empty string.
	NewPrimaryIndexName string `protobuf:"bytes,5,opt,name=new_primary_index_name,json=newPrimaryIndexName" json:"new_primary_index_name"`
	// LocalityConfigSwap is set for ALTER TABLE SET LOCALITY when the command
	// requires PK changes. If set, additional zone configurations are set to
	// match the new locality config.
	LocalityConfigSwap *PrimaryKeySwap_LocalityConfigSwap `protobuf:"bytes,6,opt,name=locality_config_swap,json=localityConfigSwap" json:"locality_config_swap,omitempty"`
}

func (m *PrimaryKeySwap) Reset()         { *m = PrimaryKeySwap{} }
func (m *PrimaryKeySwap) String() string { return proto.CompactTextString(m) }
func (*PrimaryKeySwap) ProtoMessage()    {}
func (*PrimaryKeySwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{10}
}
func (m *PrimaryKeySwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryKeySwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrimaryKeySwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryKeySwap.Merge(m, src)
}
func (m *PrimaryKeySwap) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryKeySwap) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryKeySwap.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryKeySwap proto.InternalMessageInfo

type PrimaryKeySwap_LocalityConfigSwap struct {
	OldLocalityConfig TableDescriptor_LocalityConfig `protobuf:"bytes,1,opt,name=old_locality_config,json=oldLocalityConfig" json:"old_locality_config"`
	NewLocalityConfig TableDescriptor_LocalityConfig `protobuf:"bytes,2,opt,name=new_locality_config,json=newLocalityConfig" json:"new_locality_config"`
	// NewRegionalByRowColumnID is set when we are creating a new column for a
	// REGIONAL BY ROW table. It is used by NewRegionalByRowColumnDefaultExpr
	// to identify the column we may have to change DefaultExpr for.
	NewRegionalByRowColumnID *ColumnID `protobuf:"varint,3,opt,name=new_regional_by_row_column_id,json=newRegionalByRowColumnId,casttype=ColumnID" json:"new_regional_by_row_column_id,omitempty"`
	// NewRegionalByRowColumnDefaultExpr is the default expression to set when a
	// REGIONAL BY ROW involving a new crdb_region column is required.
	// This is required so that the backfill uses a well-known value, but after
	// the backfill is complete we can set it to use the gateway_region.
	//
	// This must be set at mutation creation time, as the schema changer loses
	// context on what the database is. The default expression should be already
	// serialized in the same internal format as default_expr on the
	// ColumnDescriptor.
	NewRegionalByRowColumnDefaultExpr *string `protobuf:"bytes,4,opt,name=new_regional_by_row_column_default_expr,json=newRegionalByRowColumnDefaultExpr" json:"new_regional_by_row_column_default_expr,omitempty"`
}

func (m *PrimaryKeySwap_LocalityConfigSwap) Reset()         { *m = PrimaryKeySwap_LocalityConfigSwap{} }
func (m *PrimaryKeySwap_LocalityConfigSwap) String() string { return proto.CompactTextString(m) }
func (*PrimaryKeySwap_LocalityConfigSwap) ProtoMessage()    {}
func (*PrimaryKeySwap_LocalityConfigSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{10, 0}
}
func (m *PrimaryKeySwap_LocalityConfigSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryKeySwap_LocalityConfigSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrimaryKeySwap_LocalityConfigSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryKeySwap_LocalityConfigSwap.Merge(m, src)
}
func (m *PrimaryKeySwap_LocalityConfigSwap) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryKeySwap_LocalityConfigSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryKeySwap_LocalityConfigSwap.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryKeySwap_LocalityConfigSwap proto.InternalMessageInfo

// ComputedColumnSwap is a mutation corresponding to the atomic swap phase
// where Column a' that is computed using Column a is swapped to replace
// Column a while Column a becomes computed using a'.
type ComputedColumnSwap struct {
	NewColumnId ColumnID `protobuf:"varint,1,opt,name=new_column_id,json=newColumnId,casttype=ColumnID" json:"new_column_id"`
	OldColumnId ColumnID `protobuf:"varint,2,opt,name=old_column_id,json=oldColumnId,casttype=ColumnID" json:"old_column_id"`
	// inverse_expr is the expression used to compute values for the old column
	// once it is swapped for the new column.
	InverseExpr string `protobuf:"bytes,3,opt,name=inverse_expr,json=inverseExpr" json:"inverse_expr"`
}

func (m *ComputedColumnSwap) Reset()         { *m = ComputedColumnSwap{} }
func (m *ComputedColumnSwap) String() string { return proto.CompactTextString(m) }
func (*ComputedColumnSwap) ProtoMessage()    {}
func (*ComputedColumnSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{11}
}
func (m *ComputedColumnSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputedColumnSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ComputedColumnSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputedColumnSwap.Merge(m, src)
}
func (m *ComputedColumnSwap) XXX_Size() int {
	return m.Size()
}
func (m *ComputedColumnSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputedColumnSwap.DiscardUnknown(m)
}

var xxx_messageInfo_ComputedColumnSwap proto.InternalMessageInfo

// MaterializedViewRefresh is a mutation corresponding to a request to
// refresh a materialized view. The mutation operates by backfilling the
// result of the view query into the indexes specified by the mutation.
type MaterializedViewRefresh struct {
	// NewPrimaryIndex is the new primary index of the view to backfill into.
	// NewPrimaryIndex and NewIndexes below are copies of the existing indexes on
	// the view, but with different ID's.
	NewPrimaryIndex IndexDescriptor `protobuf:"bytes,1,opt,name=new_primary_index,json=newPrimaryIndex" json:"new_primary_index"`
	// NewIndexes are the new set of indexes to backfill the view into.
	NewIndexes []IndexDescriptor `protobuf:"bytes,2,rep,name=new_indexes,json=newIndexes" json:"new_indexes"`
	// AsOf is the timestamp to perform the view query at.
	AsOf hlc.Timestamp `protobuf:"bytes,3,opt,name=as_of,json=asOf" json:"as_of"`
	// ShouldBackfill indicates whether or not the schema changer should backfill
	// the query into the new indexes. This can be false if the `WITH NO DATA` flag
	// was specified for the `REFRESH MATERIALIZED VIEW` statement. `WITH NO DATA`
	// indicates that the user just wants the space used by the view to be reclaimed.
	ShouldBackfill bool `protobuf:"varint,4,opt,name=should_backfill,json=shouldBackfill" json:"should_backfill"`
}

func (m *MaterializedViewRefresh) Reset()         { *m = MaterializedViewRefresh{} }
func (m *MaterializedViewRefresh) String() string { return proto.CompactTextString(m) }
func (*MaterializedViewRefresh) ProtoMessage()    {}
func (*MaterializedViewRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{12}
}
func (m *MaterializedViewRefresh) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaterializedViewRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaterializedViewRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterializedViewRefresh.Merge(m, src)
}
func (m *MaterializedViewRefresh) XXX_Size() int {
	return m.Size()
}
func (m *MaterializedViewRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterializedViewRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_MaterializedViewRefresh proto.InternalMessageInfo

// A DescriptorMutation represents a column or an index that
// has either been added or dropped and hasn't yet transitioned
// into a stable state: completely backfilled and visible, or
// completely deleted. A table descriptor in the middle of a
// schema change will have a DescriptorMutation FIFO queue
// containing each column/index descriptor being added or dropped.
// Mutations for constraints work differently from columns and
// indexes; see the documentation for ConstraintToUpdate.
type DescriptorMutation struct {
	// Types that are valid to be assigned to Descriptor_:
	//	*DescriptorMutation_Column
	//	*DescriptorMutation_Index
	//	*DescriptorMutation_Constraint
	//	*DescriptorMutation_PrimaryKeySwap
	//	*DescriptorMutation_ComputedColumnSwap
	//	*DescriptorMutation_MaterializedViewRefresh
	Descriptor_ isDescriptorMutation_Descriptor_ `protobuf_oneof:"descriptor"`
	State       DescriptorMutation_State         `protobuf:"varint,3,opt,name=state,enum=cockroach.sql.sqlbase.DescriptorMutation_State" json:"state"`
	Direction   DescriptorMutation_Direction     `protobuf:"varint,4,opt,name=direction,enum=cockroach.sql.sqlbase.DescriptorMutation_Direction" json:"direction"`
	// The mutation id used to group mutations that should be applied together.
	// This is used for situations like creating a unique column, which
	// involve adding two mutations: one for the column, and another for the
	// unique constraint index.
	MutationID MutationID `protobuf:"varint,5,opt,name=mutation_id,json=mutationId,casttype=MutationID" json:"mutation_id"`
	// Indicates that this mutation is a rollback.
	Rollback bool `protobuf:"varint,7,opt,name=rollback" json:"rollback"`
}

func (m *DescriptorMutation) Reset()         { *m = DescriptorMutation{} }
func (m *DescriptorMutation) String() string { return proto.CompactTextString(m) }
func (*DescriptorMutation) ProtoMessage()    {}
func (*DescriptorMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{13}
}
func (m *DescriptorMutation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescriptorMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DescriptorMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescriptorMutation.Merge(m, src)
}
func (m *DescriptorMutation) XXX_Size() int {
	return m.Size()
}
func (m *DescriptorMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_DescriptorMutation.DiscardUnknown(m)
}

var xxx_messageInfo_DescriptorMutation proto.InternalMessageInfo

type isDescriptorMutation_Descriptor_ interface {
	isDescriptorMutation_Descriptor_()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DescriptorMutation_Column struct {
	Column *ColumnDescriptor `protobuf:"bytes,1,opt,name=column,oneof" json:"column,omitempty"`
}
type DescriptorMutation_Index struct {
	Index *IndexDescriptor `protobuf:"bytes,2,opt,name=index,oneof" json:"index,omitempty"`
}
type DescriptorMutation_Constraint struct {
	Constraint *ConstraintToUpdate `protobuf:"bytes,8,opt,name=constraint,oneof" json:"constraint,omitempty"`
}
type DescriptorMutation_PrimaryKeySwap struct {
	PrimaryKeySwap *PrimaryKeySwap `protobuf:"bytes,9,opt,name=primaryKeySwap,oneof" json:"primaryKeySwap,omitempty"`
}
type DescriptorMutation_ComputedColumnSwap struct {
	ComputedColumnSwap *ComputedColumnSwap `protobuf:"bytes,10,opt,name=computedColumnSwap,oneof" json:"computedColumnSwap,omitempty"`
}
type DescriptorMutation_MaterializedViewRefresh struct {
	MaterializedViewRefresh *MaterializedViewRefresh `protobuf:"bytes,11,opt,name=materializedViewRefresh,oneof" json:"materializedViewRefresh,omitempty"`
}

func (*DescriptorMutation_Column) isDescriptorMutation_Descriptor_()                  {}
func (*DescriptorMutation_Index) isDescriptorMutation_Descriptor_()                   {}
func (*DescriptorMutation_Constraint) isDescriptorMutation_Descriptor_()              {}
func (*DescriptorMutation_PrimaryKeySwap) isDescriptorMutation_Descriptor_()          {}
func (*DescriptorMutation_ComputedColumnSwap) isDescriptorMutation_Descriptor_()      {}
func (*DescriptorMutation_MaterializedViewRefresh) isDescriptorMutation_Descriptor_() {}

func (m *DescriptorMutation) GetDescriptor_() isDescriptorMutation_Descriptor_ {
	if m != nil {
		return m.Descriptor_
	}
	return nil
}

func (m *DescriptorMutation) GetColumn() *ColumnDescriptor {
	if x, ok := m.GetDescriptor_().(*DescriptorMutation_Column); ok {
		return x.Column
	}
	return nil
}

func (m *DescriptorMutation) GetIndex() *IndexDescriptor {
	if x, ok := m.GetDescriptor_().(*DescriptorMutation_Index); ok {
		return x.Index
	}
	return nil
}

func (m *DescriptorMutation) GetConstraint() *ConstraintToUpdate {
	if x, ok := m.GetDescriptor_().(*DescriptorMutation_Constraint); ok {
		return x.Constraint
	}
	return nil
}

func (m *DescriptorMutation) GetPrimaryKeySwap() *PrimaryKeySwap {
	if x, ok := m.GetDescriptor_().(*DescriptorMutation_PrimaryKeySwap); ok {
		return x.PrimaryKeySwap
	}
	return nil
}

func (m *DescriptorMutation) GetComputedColumnSwap() *ComputedColumnSwap {
	if x, ok := m.GetDescriptor_().(*DescriptorMutation_ComputedColumnSwap); ok {
		return x.ComputedColumnSwap
	}
	return nil
}

func (m *DescriptorMutation) GetMaterializedViewRefresh() *MaterializedViewRefresh {
	if x, ok := m.GetDescriptor_().(*DescriptorMutation_MaterializedViewRefresh); ok {
		return x.MaterializedViewRefresh
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DescriptorMutation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DescriptorMutation_Column)(nil),
		(*DescriptorMutation_Index)(nil),
		(*DescriptorMutation_Constraint)(nil),
		(*DescriptorMutation_PrimaryKeySwap)(nil),
		(*DescriptorMutation_ComputedColumnSwap)(nil),
		(*DescriptorMutation_MaterializedViewRefresh)(nil),
	}
}

// A table descriptor is named through a name map stored in the
// system.namespace table: a map from {parent_id, table_name} -> id.
// This name map can be cached for performance on a node in the cluster
// making reassigning a name complicated. In particular, since a
// name cannot be withdrawn across a cluster in a transaction at
// timestamp T, we have to worry about the following:
//
// 1. A table is dropped at T, and the name and descriptor are still
// cached and used by transactions at timestamps >= T.
// 2. A table is renamed from foo to bar at T, and both names foo and bar
// can be used by transactions at timestamps >= T.
// 3. A name foo is reassigned from one table to another at T, and the name
// foo can reference two different tables at timestamps >= T.
//
// The system ensures that a name can be resolved only to a single
// descriptor at a timestamp thereby permitting 1 and 2, but not 3
// (the name references two tables).
//
// The transaction at T is followed by a time period when names no longer
// a part of the namespace are drained from the system. Once the old name
// is drained from the system another transaction at timestamp S is
// executed to release the name for future use. The interval from T to S
// is called the name drain interval: If the T transaction is removing
// the name foo then, at timestamps above S, foo can no longer be resolved.
//
// Consider a transaction at T in which name B is dropped, a new name C is
// created. Name C is viable as soon as the transaction commits.
// When the transaction at S commits, the name B is released for reuse.
//
// The transaction at S runs through the schema changer, with the system
// returning a response to the client initiating transaction T only after
// transaction at S is committed. So effectively the SQL transaction once
// it returns can be followed by SQL transactions that do not observe
// old name mappings.
//
// Note: an exception to this is #19925 which needs to be fixed.
//
// In order for transaction at S to act properly the system.namespace
// table entry for an old name references the descriptor who was the
// prior owner of the name requiring draining.
//
// Before T:   B -> Desc B
//
// After T and before S: B -> Desc B, C -> Desc C
//
// After S: C -> Desc C
//
// Between T and S the name B is drained and the system is unable
// to assign it to another descriptor.
//
// BEGIN;
// RENAME foo TO bar;
// CREATE foo;
//
// will fail because CREATE foo is executed at T.
//
// RENAME foo TO bar;
// CREATE foo;
//
// will succeed because the RENAME returns after S and CREATE foo is
// executed after S.
//
// The above scheme suffers from the problem that a transaction can observe
// the partial effect of a committed transaction during the drain interval.
// For instance during the drain interval a transaction can see the correct
// assignment for C, and the old assignments for B.
//
type NameInfo struct {
	// The database that the table belonged to before the rename (tables can be
	// renamed from one db to another).
	ParentID ID `protobuf:"varint,1,opt,name=parent_id,json=parentId,casttype=ID" json:"parent_id"`
	// The schemaID of the schema the table belongs to before the rename/drop.
	// Required to correctly identify which namespace entry to reclaim.
	ParentSchemaID ID     `protobuf:"varint,3,opt,name=parent_schema_id,json=parentSchemaId,casttype=ID" json:"parent_schema_id"`
	Name           string `protobuf:"bytes,2,opt,name=name" json:"name"`
}

func (m *NameInfo) Reset()         { *m = NameInfo{} }
func (m *NameInfo) String() string { return proto.CompactTextString(m) }
func (*NameInfo) ProtoMessage()    {}
func (*NameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{14}
}
func (m *NameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameInfo.Merge(m, src)
}
func (m *NameInfo) XXX_Size() int {
	return m.Size()
}
func (m *NameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NameInfo proto.InternalMessageInfo

// A TableDescriptor represents a table or view and is stored in a
// structured metadata key. The TableDescriptor has a globally-unique ID,
// while its member {Column,Index}Descriptors have locally-unique IDs.
type TableDescriptor struct {
	// The table name. It should be normalized using NormalizeName() before
	// comparing it.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	ID   ID     `protobuf:"varint,3,opt,name=id,casttype=ID" json:"id"`
	// Monotonically increasing version of the table descriptor.
	//
	// The design maintains two invariants:
	// 1. Two safe versions: A transaction at a particular timestamp is
	//    allowed to use one of two versions of a table descriptor:
	//    the one that would be read from the store at that timestamp,
	//    and the one behind it in version.
	// 2. Two leased versions: There can be valid leases on at most the 2
	//    latest versions of a table in the cluster at any time. New leases
	//    are only granted on the latest version.
	//
	// The database must maintain correctness in light of there being two
	// versions of a descriptor that can be used.
	//
	// Multiple schema change mutations can be grouped together on a
	// particular version increment.
	Version DescriptorVersion `protobuf:"varint,5,opt,name=version,casttype=DescriptorVersion" json:"version"`
	// Last modification time of the table descriptor.
	// Starting in 19.2 this field's value may sometime be zero-valued in which
	// case the MVCC timestamp of the row containing the value should be used to
	// populate it. This dance allows us to avoid observing the commit timestamp
	// for transactions which increment the descriptor version.
	// Encoded TableDescriptor structs should not be stored directly but rather
	// should live inside of a Descriptor. The Descriptor.Table() method takes an
	// hlc timestamp to ensure that this field is set properly when extracted from
	// a Descriptor.
	ModificationTime hlc.Timestamp `protobuf:"bytes,7,opt,name=modification_time,json=modificationTime" json:"modification_time"`
	// A list of draining names. The draining name entries are drained from
	// the cluster wide name caches by incrementing the version for this
	// descriptor and ensuring that there are no leases on prior
	// versions of the descriptor. This field is then cleared and the version
	// of the descriptor incremented.
	DrainingNames []NameInfo `protobuf:"bytes,21,rep,name=draining_names,json=drainingNames" json:"draining_names"`
	// ID of the parent database.
	ParentID ID `protobuf:"varint,4,opt,name=parent_id,json=parentId,casttype=ID" json:"parent_id"`
	// ID of the parent schema. For backwards compatibility, 0 means the table is
	// scoped under the public physical schema (id 29). Because of this backward
	// compatibility issue, this field should not be accessed directly or through
	// the generated getter. Instead, use GetParentSchemaID() which is defined in
	// structured.go.
	UnexposedParentSchemaID ID                 `protobuf:"varint,40,opt,name=unexposed_parent_schema_id,json=unexposedParentSchemaId,casttype=ID" json:"unexposed_parent_schema_id"`
	Columns                 []ColumnDescriptor `protobuf:"bytes,8,rep,name=columns" json:"columns"`
	// next_column_id is used to ensure that deleted column ids are not reused.
	NextColumnID ColumnID `protobuf:"varint,9,opt,name=next_column_id,json=nextColumnId,casttype=ColumnID" json:"next_column_id"`
	// families holds information about the column families of this table.
	// This list has at least length 1, in which case all columns are stored in the same family.
	// families is stored in sorted order by family ID.
	Families []ColumnFamilyDescriptor `protobuf:"bytes,22,rep,name=families" json:"families"`
	// next_family_id is used to ensure that deleted family ids are not reused.
	NextFamilyID FamilyID        `protobuf:"varint,23,opt,name=next_family_id,json=nextFamilyId,casttype=FamilyID" json:"next_family_id"`
	PrimaryIndex IndexDescriptor `protobuf:"bytes,10,opt,name=primary_index,json=primaryIndex" json:"primary_index"`
	// indexes are all the secondary indexes.
	Indexes []IndexDescriptor `protobuf:"bytes,11,rep,name=indexes" json:"indexes"`
	// next_index_id is used to ensure that deleted index ids are not reused.
	NextIndexID IndexID              `protobuf:"varint,12,opt,name=next_index_id,json=nextIndexId,casttype=IndexID" json:"next_index_id"`
	Privileges  *PrivilegeDescriptor `protobuf:"bytes,13,opt,name=privileges" json:"privileges,omitempty"`
	// Columns or indexes being added or deleted in a FIFO order.
	Mutations []DescriptorMutation               `protobuf:"bytes,14,rep,name=mutations" json:"mutations"`
	Lease     *TableDescriptor_SchemaChangeLease `protobuf:"bytes,15,opt,name=lease" json:"lease,omitempty"` // Deprecated: Do not use.
	// An id for the next group of mutations to be applied together.
	NextMutationID MutationID `protobuf:"varint,16,opt,name=next_mutation_id,json=nextMutationId,casttype=MutationID" json:"next_mutation_id"`
	// format_version declares which sql to key:value mapping is being used to
	// represent the data in this table.
	FormatVersion FormatVersion                      `protobuf:"varint,17,opt,name=format_version,json=formatVersion,casttype=FormatVersion" json:"format_version"`
	State         DescriptorState                    `protobuf:"varint,19,opt,name=state,enum=cockroach.sql.sqlbase.DescriptorState" json:"state"`
	OfflineReason string                             `protobuf:"bytes,38,opt,name=offline_reason,json=offlineReason" json:"offline_reason"`
	Checks        []*TableDescriptor_CheckConstraint `protobuf:"bytes,20,rep,name=checks" json:"checks,omitempty"`
	// The TableDescriptor is used for views in addition to tables. Views
	// use mostly the same fields as tables, but need to track the actual
	// query from the view definition as well.
	//
	// For now we only track a string representation of the query. This prevents
	// us from easily supporting things like renames of the dependencies of a
	// view. Eventually we'll want to switch to a semantic encoding of the query
	// that relies on IDs rather than names so that we can support renames of
	// fields relied on by the query, as Postgres does.
	//
	// Note: The presence of this field is used to determine whether or not
	// a TableDescriptor represents a view.
	ViewQuery string `protobuf:"bytes,24,opt,name=view_query,json=viewQuery" json:"view_query"`
	// IsMaterializedView indicates whether this view is materialized or not.
	// A materialized view has the view query results stored durably on disk
	// as a table. The data on disk is refreshed with the REFRESH MATERIALIZED
	// VIEW command. This flag is only set when ViewQuery != "".
	IsMaterializedView bool `protobuf:"varint,41,opt,name=is_materialized_view,json=isMaterializedView" json:"is_materialized_view"`
	// The IDs of all relations that this depends on.
	// Only ever populated if this descriptor is for a view.
	DependsOn []ID `protobuf:"varint,25,rep,name=dependsOn,casttype=ID" json:"dependsOn,omitempty"`
	// The IDs of all types that this depends on.
	// Only ever populated if this descriptor is for a view.
	DependsOnTypes []ID `protobuf:"varint,45,rep,name=dependsOnTypes,casttype=ID" json:"dependsOnTypes,omitempty"`
	// All references to this table/view from other views and sequences in the system,
	// tracked down to the column/index so that we can restrict changes to them while
	// they're still being referred to.
	DependedOnBy []TableDescriptor_Reference `protobuf:"bytes,26,rep,name=dependedOnBy" json:"dependedOnBy"`
	// Mutation jobs queued for execution in a FIFO order. Remains synchronized
	// with the mutations list.
	MutationJobs []TableDescriptor_MutationJob `protobuf:"bytes,27,rep,name=mutationJobs" json:"mutationJobs"`
	// The job associated with a schema change job run in the new schema changer
	// (in sql/schemachanger), if one exists. Only one such job can exist at a
	// time.
	NewSchemaChangeJobID int64 `protobuf:"varint,46,opt,name=new_schema_change_job_id,json=newSchemaChangeJobId" json:"new_schema_change_job_id"`
	// The presence of sequence_opts indicates that this descriptor is for a sequence.
	SequenceOpts *TableDescriptor_SequenceOpts `protobuf:"bytes,28,opt,name=sequence_opts,json=sequenceOpts" json:"sequence_opts,omitempty"`
	// The drop time is set when a table is truncated or dropped,
	// based on the current time in nanoseconds since the epoch.
	// Use this timestamp + GC TTL to start deleting the table's
	// contents.
	//
	// TODO(vivek): Replace with the ModificationTime. This has been
	// added only for migration purposes.
	DropTime int64 `protobuf:"varint,29,opt,name=drop_time,json=dropTime" json:"drop_time"`
	// ReplacementOf tracks prior IDs by which this table went -- e.g. when
	// TRUNCATE creates a replacement of a table and swaps it in for the the old
	// one, it should note on the new table the ID of the table it replaced. This
	// can be used when trying to track a table's history across truncatations.
	ReplacementOf TableDescriptor_Replacement `protobuf:"bytes,30,opt,name=replacement_of,json=replacementOf" json:"replacement_of"`
	AuditMode     TableDescriptor_AuditMode   `protobuf:"varint,31,opt,name=audit_mode,json=auditMode,enum=cockroach.sql.sqlbase.TableDescriptor_AuditMode" json:"audit_mode"`
	// The job id for a drop job is the id in the system.jobs table of the
	// dropping of this table.
	DropJobID int64 `protobuf:"varint,32,opt,name=drop_job_id,json=dropJobId" json:"drop_job_id"`
	// The schema elements that have been dropped and whose underlying
	// data needs to be gc-ed. These schema elements have already transitioned
	// through the drop state machine when they were in the above mutations
	// list, and can be safely deleted. The names for these schema elements
	// can be reused. This list is separate because mutations can
	// lie in this list for a long time (gc deadline) and should not block
	// the execution of other schema changes on the table.
	//
	// TODO(vivekmenezes): This is currently only used by the non-interleaved drop
	// index case. Also use for dropped interleaved indexes and columns.
	GCMutations []TableDescriptor_GCDescriptorMutation `protobuf:"bytes,33,rep,name=gc_mutations,json=gcMutations" json:"gc_mutations"`
	CreateQuery string                                 `protobuf:"bytes,34,opt,name=create_query,json=createQuery" json:"create_query"`
	// Starting in 19.2 CreateAsOfTime is initialized to zero for the first
	// version of a table and is populated from the MVCC timestamp of the read
	// like ModificationTime. See Descriptor.Table().
	// CreateAsOfSystemTime is used for CREATE TABLE ... AS ... and was
	// added in 19.1.
	CreateAsOfTime hlc.Timestamp `protobuf:"bytes,35,opt,name=create_as_of_time,json=createAsOfTime" json:"create_as_of_time"`
	// outbound_fks contains all foreign key constraints that have this table as
	// the origin table.
	OutboundFKs []ForeignKeyConstraint `protobuf:"bytes,36,rep,name=outbound_fks,json=outboundFks" json:"outbound_fks"`
	// inbound_fks contains all foreign key constraints that have this table as
	// the referenced table.
	InboundFKs []ForeignKeyConstraint `protobuf:"bytes,37,rep,name=inbound_fks,json=inboundFks" json:"inbound_fks"`
	// UniqueWithoutIndexConstraints contains all the unique constraints defined
	// on this table that are not enforced by an index.
	UniqueWithoutIndexConstraints []UniqueWithoutIndexConstraint `protobuf:"bytes,43,rep,name=unique_without_index_constraints,json=uniqueWithoutIndexConstraints" json:"unique_without_index_constraints"`
	// Temporary table support will be added to CRDB starting from 20.1. The temporary
	// flag is set to true for all temporary tables. All table descriptors created
	// before 20.1 refer to persistent tables, so lack of the flag being set implies
	// the table is persistent.
	Temporary      bool                            `protobuf:"varint,39,opt,name=temporary" json:"temporary"`
	LocalityConfig *TableDescriptor_LocalityConfig `protobuf:"bytes,42,opt,name=locality_config,json=localityConfig" json:"locality_config,omitempty"`
	// PartitionAllBy is set if PARTITION ALL BY is set on the table.
	// This means that all indexes implicitly inherit all partitioning
	// from the PARTITION ALL BY clause.
	PartitionAllBy bool `protobuf:"varint,44,opt,name=partition_all_by,json=partitionAllBy" json:"partition_all_by"`
}

func (m *TableDescriptor) Reset()         { *m = TableDescriptor{} }
func (m *TableDescriptor) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor) ProtoMessage()    {}
func (*TableDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15}
}
func (m *TableDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor.Merge(m, src)
}
func (m *TableDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor proto.InternalMessageInfo

func (m *TableDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableDescriptor) GetID() ID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TableDescriptor) GetVersion() DescriptorVersion {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TableDescriptor) GetModificationTime() hlc.Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return hlc.Timestamp{}
}

func (m *TableDescriptor) GetDrainingNames() []NameInfo {
	if m != nil {
		return m.DrainingNames
	}
	return nil
}

func (m *TableDescriptor) GetParentID() ID {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *TableDescriptor) GetUnexposedParentSchemaID() ID {
	if m != nil {
		return m.UnexposedParentSchemaID
	}
	return 0
}

func (m *TableDescriptor) GetColumns() []ColumnDescriptor {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *TableDescriptor) GetNextColumnID() ColumnID {
	if m != nil {
		return m.NextColumnID
	}
	return 0
}

func (m *TableDescriptor) GetFamilies() []ColumnFamilyDescriptor {
	if m != nil {
		return m.Families
	}
	return nil
}

func (m *TableDescriptor) GetNextFamilyID() FamilyID {
	if m != nil {
		return m.NextFamilyID
	}
	return 0
}

func (m *TableDescriptor) GetPrimaryIndex() IndexDescriptor {
	if m != nil {
		return m.PrimaryIndex
	}
	return IndexDescriptor{}
}

func (m *TableDescriptor) GetIndexes() []IndexDescriptor {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *TableDescriptor) GetNextIndexID() IndexID {
	if m != nil {
		return m.NextIndexID
	}
	return 0
}

func (m *TableDescriptor) GetPrivileges() *PrivilegeDescriptor {
	if m != nil {
		return m.Privileges
	}
	return nil
}

func (m *TableDescriptor) GetMutations() []DescriptorMutation {
	if m != nil {
		return m.Mutations
	}
	return nil
}

// Deprecated: Do not use.
func (m *TableDescriptor) GetLease() *TableDescriptor_SchemaChangeLease {
	if m != nil {
		return m.Lease
	}
	return nil
}

func (m *TableDescriptor) GetNextMutationID() MutationID {
	if m != nil {
		return m.NextMutationID
	}
	return 0
}

func (m *TableDescriptor) GetFormatVersion() FormatVersion {
	if m != nil {
		return m.FormatVersion
	}
	return 0
}

func (m *TableDescriptor) GetState() DescriptorState {
	if m != nil {
		return m.State
	}
	return DescriptorState_PUBLIC
}

func (m *TableDescriptor) GetOfflineReason() string {
	if m != nil {
		return m.OfflineReason
	}
	return ""
}

func (m *TableDescriptor) GetChecks() []*TableDescriptor_CheckConstraint {
	if m != nil {
		return m.Checks
	}
	return nil
}

func (m *TableDescriptor) GetViewQuery() string {
	if m != nil {
		return m.ViewQuery
	}
	return ""
}

func (m *TableDescriptor) GetIsMaterializedView() bool {
	if m != nil {
		return m.IsMaterializedView
	}
	return false
}

func (m *TableDescriptor) GetDependsOn() []ID {
	if m != nil {
		return m.DependsOn
	}
	return nil
}

func (m *TableDescriptor) GetDependsOnTypes() []ID {
	if m != nil {
		return m.DependsOnTypes
	}
	return nil
}

func (m *TableDescriptor) GetDependedOnBy() []TableDescriptor_Reference {
	if m != nil {
		return m.DependedOnBy
	}
	return nil
}

func (m *TableDescriptor) GetMutationJobs() []TableDescriptor_MutationJob {
	if m != nil {
		return m.MutationJobs
	}
	return nil
}

func (m *TableDescriptor) GetNewSchemaChangeJobID() int64 {
	if m != nil {
		return m.NewSchemaChangeJobID
	}
	return 0
}

func (m *TableDescriptor) GetSequenceOpts() *TableDescriptor_SequenceOpts {
	if m != nil {
		return m.SequenceOpts
	}
	return nil
}

func (m *TableDescriptor) GetDropTime() int64 {
	if m != nil {
		return m.DropTime
	}
	return 0
}

func (m *TableDescriptor) GetReplacementOf() TableDescriptor_Replacement {
	if m != nil {
		return m.ReplacementOf
	}
	return TableDescriptor_Replacement{}
}

func (m *TableDescriptor) GetAuditMode() TableDescriptor_AuditMode {
	if m != nil {
		return m.AuditMode
	}
	return TableDescriptor_DISABLED
}

func (m *TableDescriptor) GetDropJobID() int64 {
	if m != nil {
		return m.DropJobID
	}
	return 0
}

func (m *TableDescriptor) GetGCMutations() []TableDescriptor_GCDescriptorMutation {
	if m != nil {
		return m.GCMutations
	}
	return nil
}

func (m *TableDescriptor) GetCreateQuery() string {
	if m != nil {
		return m.CreateQuery
	}
	return ""
}

func (m *TableDescriptor) GetCreateAsOfTime() hlc.Timestamp {
	if m != nil {
		return m.CreateAsOfTime
	}
	return hlc.Timestamp{}
}

func (m *TableDescriptor) GetOutboundFKs() []ForeignKeyConstraint {
	if m != nil {
		return m.OutboundFKs
	}
	return nil
}

func (m *TableDescriptor) GetInboundFKs() []ForeignKeyConstraint {
	if m != nil {
		return m.InboundFKs
	}
	return nil
}

func (m *TableDescriptor) GetUniqueWithoutIndexConstraints() []UniqueWithoutIndexConstraint {
	if m != nil {
		return m.UniqueWithoutIndexConstraints
	}
	return nil
}

func (m *TableDescriptor) GetTemporary() bool {
	if m != nil {
		return m.Temporary
	}
	return false
}

func (m *TableDescriptor) GetLocalityConfig() *TableDescriptor_LocalityConfig {
	if m != nil {
		return m.LocalityConfig
	}
	return nil
}

func (m *TableDescriptor) GetPartitionAllBy() bool {
	if m != nil {
		return m.PartitionAllBy
	}
	return false
}

// The schema update lease. A single goroutine across a cockroach cluster
// can own it, and will execute pending schema changes for this table.
// Since the execution of a pending schema change is through transactions,
// it is legal for more than one goroutine to attempt to execute it. This
// lease reduces write contention on the schema change.
type TableDescriptor_SchemaChangeLease struct {
	NodeID github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id"`
	// Nanoseconds since the Unix epoch.
	ExpirationTime int64 `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime" json:"expiration_time"`
}

func (m *TableDescriptor_SchemaChangeLease) Reset()         { *m = TableDescriptor_SchemaChangeLease{} }
func (m *TableDescriptor_SchemaChangeLease) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_SchemaChangeLease) ProtoMessage()    {}
func (*TableDescriptor_SchemaChangeLease) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 0}
}
func (m *TableDescriptor_SchemaChangeLease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_SchemaChangeLease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_SchemaChangeLease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_SchemaChangeLease.Merge(m, src)
}
func (m *TableDescriptor_SchemaChangeLease) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_SchemaChangeLease) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_SchemaChangeLease.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_SchemaChangeLease proto.InternalMessageInfo

type TableDescriptor_CheckConstraint struct {
	// Expr is the expression that this check constraint represents.
	// Note that it is not correct to use Expr as output to display
	// to a user. User defined types within Expr have been serialized
	// in a internal format. Instead, use one of the schemaexpr.FormatExpr*
	// functions.
	Expr     string             `protobuf:"bytes,1,opt,name=expr" json:"expr"`
	Name     string             `protobuf:"bytes,2,opt,name=name" json:"name"`
	Validity ConstraintValidity `protobuf:"varint,3,opt,name=validity,enum=cockroach.sql.sqlbase.ConstraintValidity" json:"validity"`
	// An ordered list of column IDs used by the check constraint.
	ColumnIDs           []ColumnID `protobuf:"varint,5,rep,name=column_ids,json=columnIds,casttype=ColumnID" json:"column_ids,omitempty"`
	IsNonNullConstraint bool       `protobuf:"varint,6,opt,name=is_non_null_constraint,json=isNonNullConstraint" json:"is_non_null_constraint"`
	// Hidden is set to true for hash-sharded column check constraints.
	// Previously, this field was used to hide these constraints in the output
	// of SHOW CREATE TABLE. We no longer them in order to make the output to be
	// round-trippable, but we still set this field for now. See #68031.
	Hidden bool `protobuf:"varint,7,opt,name=hidden" json:"hidden"`
}

func (m *TableDescriptor_CheckConstraint) Reset()         { *m = TableDescriptor_CheckConstraint{} }
func (m *TableDescriptor_CheckConstraint) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_CheckConstraint) ProtoMessage()    {}
func (*TableDescriptor_CheckConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 1}
}
func (m *TableDescriptor_CheckConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_CheckConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_CheckConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_CheckConstraint.Merge(m, src)
}
func (m *TableDescriptor_CheckConstraint) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_CheckConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_CheckConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_CheckConstraint proto.InternalMessageInfo

type TableDescriptor_Reference struct {
	// The ID of the relation that depends on this one.
	ID ID `protobuf:"varint,1,opt,name=id,casttype=ID" json:"id"`
	// If applicable, the ID of this table's index that is referenced by the
	// dependent relation.
	IndexID IndexID `protobuf:"varint,2,opt,name=index_id,json=indexId,casttype=IndexID" json:"index_id"`
	// The IDs of this table's columns that are referenced by the dependent
	// relation.
	ColumnIDs []ColumnID `protobuf:"varint,3,rep,name=column_ids,json=columnIds,casttype=ColumnID" json:"column_ids,omitempty"`
	// ByID indicates whether the relation is referenced via its name or its ID.
	// For example, nextval('foo.public.seq') vs. nextval(12345::REGCLASS),
	// where 12345 is the ID of foo.public.seq
	// Sequences referenced only by its ID have the ability to be renamed.
	ByID bool `protobuf:"varint,4,opt,name=by_id,json=byId" json:"by_id"`
}

func (m *TableDescriptor_Reference) Reset()         { *m = TableDescriptor_Reference{} }
func (m *TableDescriptor_Reference) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_Reference) ProtoMessage()    {}
func (*TableDescriptor_Reference) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 2}
}
func (m *TableDescriptor_Reference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_Reference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_Reference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_Reference.Merge(m, src)
}
func (m *TableDescriptor_Reference) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_Reference) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_Reference.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_Reference proto.InternalMessageInfo

type TableDescriptor_MutationJob struct {
	// The mutation id of this mutation job.
	MutationID MutationID `protobuf:"varint,1,opt,name=mutation_id,json=mutationId,casttype=MutationID" json:"mutation_id"`
	// The job id for a mutation job is the id in the system.jobs table of the
	// schema change job executing the mutation referenced by mutation_id.
	// This is not a jobspb.JobID to avoid a dependency cycle.
	JobID int64 `protobuf:"varint,2,opt,name=job_id,json=jobId" json:"job_id"`
}

func (m *TableDescriptor_MutationJob) Reset()         { *m = TableDescriptor_MutationJob{} }
func (m *TableDescriptor_MutationJob) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_MutationJob) ProtoMessage()    {}
func (*TableDescriptor_MutationJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 3}
}
func (m *TableDescriptor_MutationJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_MutationJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_MutationJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_MutationJob.Merge(m, src)
}
func (m *TableDescriptor_MutationJob) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_MutationJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_MutationJob.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_MutationJob proto.InternalMessageInfo

type TableDescriptor_SequenceOpts struct {
	// How much to increment the sequence by when nextval() is called.
	Increment int64 `protobuf:"varint,1,opt,name=increment" json:"increment"`
	// Minimum value of the sequence.
	MinValue int64 `protobuf:"varint,2,opt,name=min_value,json=minValue" json:"min_value"`
	// Maximum value of the sequence.
	MaxValue int64 `protobuf:"varint,3,opt,name=max_value,json=maxValue" json:"max_value"`
	// Start value of the sequence.
	Start int64 `protobuf:"varint,4,opt,name=start" json:"start"`
	// Whether the sequence is virtual.
	Virtual       bool                                       `protobuf:"varint,5,opt,name=virtual" json:"virtual"`
	SequenceOwner TableDescriptor_SequenceOpts_SequenceOwner `protobuf:"bytes,6,opt,name=sequence_owner,json=sequenceOwner" json:"sequence_owner"`
	// The number of values (which have already been created in KV)
	// that a node can cache locally.
	CacheSize int64 `protobuf:"varint,7,opt,name=cache_size,json=cacheSize" json:"cache_size"`
}

func (m *TableDescriptor_SequenceOpts) Reset()         { *m = TableDescriptor_SequenceOpts{} }
func (m *TableDescriptor_SequenceOpts) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_SequenceOpts) ProtoMessage()    {}
func (*TableDescriptor_SequenceOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 4}
}
func (m *TableDescriptor_SequenceOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_SequenceOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_SequenceOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_SequenceOpts.Merge(m, src)
}
func (m *TableDescriptor_SequenceOpts) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_SequenceOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_SequenceOpts.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_SequenceOpts proto.InternalMessageInfo

type TableDescriptor_SequenceOpts_SequenceOwner struct {
	// Sequence Owner's Column ID
	OwnerColumnID ColumnID `protobuf:"varint,1,opt,name=owner_column_id,json=ownerColumnId,casttype=ColumnID" json:"owner_column_id"`
	// Sequence Owner's Table ID
	OwnerTableID ID `protobuf:"varint,2,opt,name=owner_table_id,json=ownerTableId,casttype=ID" json:"owner_table_id"`
}

func (m *TableDescriptor_SequenceOpts_SequenceOwner) Reset() {
	*m = TableDescriptor_SequenceOpts_SequenceOwner{}
}
func (m *TableDescriptor_SequenceOpts_SequenceOwner) String() string {
	return proto.CompactTextString(m)
}
func (*TableDescriptor_SequenceOpts_SequenceOwner) ProtoMessage() {}
func (*TableDescriptor_SequenceOpts_SequenceOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 4, 0}
}
func (m *TableDescriptor_SequenceOpts_SequenceOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_SequenceOpts_SequenceOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_SequenceOpts_SequenceOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_SequenceOpts_SequenceOwner.Merge(m, src)
}
func (m *TableDescriptor_SequenceOpts_SequenceOwner) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_SequenceOpts_SequenceOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_SequenceOpts_SequenceOwner.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_SequenceOpts_SequenceOwner proto.InternalMessageInfo

type TableDescriptor_Replacement struct {
	ID ID `protobuf:"varint,1,opt,name=id,casttype=ID" json:"id"`
	// Time is just used for debugging purposes. It is not used in business
	// logic. It is an HLC rather than just wall time only for historical
	// reasons. Prior to 20.1 it was populated with the commit timestamp of the
	// transaction which created this replacement. In 20.1 and after it is
	// populated with the read timestamp at which the descriptor being
	// replaced was read.
	Time hlc.Timestamp `protobuf:"bytes,2,opt,name=time" json:"time"`
}

func (m *TableDescriptor_Replacement) Reset()         { *m = TableDescriptor_Replacement{} }
func (m *TableDescriptor_Replacement) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_Replacement) ProtoMessage()    {}
func (*TableDescriptor_Replacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 5}
}
func (m *TableDescriptor_Replacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_Replacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_Replacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_Replacement.Merge(m, src)
}
func (m *TableDescriptor_Replacement) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_Replacement) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_Replacement.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_Replacement proto.InternalMessageInfo

type TableDescriptor_GCDescriptorMutation struct {
	IndexID  IndexID `protobuf:"varint,1,opt,name=index_id,json=indexId,casttype=IndexID" json:"index_id"`
	DropTime int64   `protobuf:"varint,2,opt,name=drop_time,json=dropTime" json:"drop_time"` // Deprecated: Do not use.
	// The job id for a mutation job is the id in the system.jobs table of the
	// schema change job executing the mutation referenced by mutation_id.
	JobID int64 `protobuf:"varint,3,opt,name=job_id,json=jobId" json:"job_id"` // Deprecated: Do not use.
}

func (m *TableDescriptor_GCDescriptorMutation) Reset()         { *m = TableDescriptor_GCDescriptorMutation{} }
func (m *TableDescriptor_GCDescriptorMutation) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_GCDescriptorMutation) ProtoMessage()    {}
func (*TableDescriptor_GCDescriptorMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 6}
}
func (m *TableDescriptor_GCDescriptorMutation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_GCDescriptorMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_GCDescriptorMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_GCDescriptorMutation.Merge(m, src)
}
func (m *TableDescriptor_GCDescriptorMutation) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_GCDescriptorMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_GCDescriptorMutation.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_GCDescriptorMutation proto.InternalMessageInfo

type TableDescriptor_LocalityConfig struct {
	// Types that are valid to be assigned to Locality:
	//	*TableDescriptor_LocalityConfig_Global_
	//	*TableDescriptor_LocalityConfig_RegionalByTable_
	//	*TableDescriptor_LocalityConfig_RegionalByRow_
	Locality isTableDescriptor_LocalityConfig_Locality `protobuf_oneof:"locality"`
}

func (m *TableDescriptor_LocalityConfig) Reset()         { *m = TableDescriptor_LocalityConfig{} }
func (m *TableDescriptor_LocalityConfig) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_LocalityConfig) ProtoMessage()    {}
func (*TableDescriptor_LocalityConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 7}
}
func (m *TableDescriptor_LocalityConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_LocalityConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_LocalityConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_LocalityConfig.Merge(m, src)
}
func (m *TableDescriptor_LocalityConfig) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_LocalityConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_LocalityConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_LocalityConfig proto.InternalMessageInfo

type isTableDescriptor_LocalityConfig_Locality interface {
	isTableDescriptor_LocalityConfig_Locality()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TableDescriptor_LocalityConfig_Global_ struct {
	Global *TableDescriptor_LocalityConfig_Global `protobuf:"bytes,1,opt,name=global,oneof" json:"global,omitempty"`
}
type TableDescriptor_LocalityConfig_RegionalByTable_ struct {
	RegionalByTable *TableDescriptor_LocalityConfig_RegionalByTable `protobuf:"bytes,2,opt,name=regional_by_table,json=regionalByTable,oneof" json:"regional_by_table,omitempty"`
}
type TableDescriptor_LocalityConfig_RegionalByRow_ struct {
	RegionalByRow *TableDescriptor_LocalityConfig_RegionalByRow `protobuf:"bytes,3,opt,name=regional_by_row,json=regionalByRow,oneof" json:"regional_by_row,omitempty"`
}

func (*TableDescriptor_LocalityConfig_Global_) isTableDescriptor_LocalityConfig_Locality()          {}
func (*TableDescriptor_LocalityConfig_RegionalByTable_) isTableDescriptor_LocalityConfig_Locality() {}
func (*TableDescriptor_LocalityConfig_RegionalByRow_) isTableDescriptor_LocalityConfig_Locality()   {}

func (m *TableDescriptor_LocalityConfig) GetLocality() isTableDescriptor_LocalityConfig_Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *TableDescriptor_LocalityConfig) GetGlobal() *TableDescriptor_LocalityConfig_Global {
	if x, ok := m.GetLocality().(*TableDescriptor_LocalityConfig_Global_); ok {
		return x.Global
	}
	return nil
}

func (m *TableDescriptor_LocalityConfig) GetRegionalByTable() *TableDescriptor_LocalityConfig_RegionalByTable {
	if x, ok := m.GetLocality().(*TableDescriptor_LocalityConfig_RegionalByTable_); ok {
		return x.RegionalByTable
	}
	return nil
}

func (m *TableDescriptor_LocalityConfig) GetRegionalByRow() *TableDescriptor_LocalityConfig_RegionalByRow {
	if x, ok := m.GetLocality().(*TableDescriptor_LocalityConfig_RegionalByRow_); ok {
		return x.RegionalByRow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TableDescriptor_LocalityConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TableDescriptor_LocalityConfig_Global_)(nil),
		(*TableDescriptor_LocalityConfig_RegionalByTable_)(nil),
		(*TableDescriptor_LocalityConfig_RegionalByRow_)(nil),
	}
}

// REGIONAL BY TABLE tables have an "implicit" bidirectional dependency with
// the multi-region enum. The dependency is described "implicit" because
// even though no column on the table uses the multi-region type descriptor
// to store the homing region, a value from the type descriptor is stored in
// the locality config below (when the table is homed in the non-primary
// region).
// This changes how type dependencies are constructed for table descriptors.
// After the introduction of REGIONAL BY TABLE tables, a column on the table
// descriptor using a type is no longer a necessary (note it is still a
// sufficient) condition to establish a type dependency. As is the case with
// adding and dropping columns, this type dependency must be negotiated. As
// such, switching locality patterns or adding new locality configs must be
// done so that back references to the multi-region type descriptor are
// kept sane.
type TableDescriptor_LocalityConfig_RegionalByTable struct {
	// Region is set if the table has an affinity with a non-primary region.
	Region *RegionName `protobuf:"bytes,1,opt,name=region,casttype=RegionName" json:"region,omitempty"`
}

func (m *TableDescriptor_LocalityConfig_RegionalByTable) Reset() {
	*m = TableDescriptor_LocalityConfig_RegionalByTable{}
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) String() string {
	return proto.CompactTextString(m)
}
func (*TableDescriptor_LocalityConfig_RegionalByTable) ProtoMessage() {}
func (*TableDescriptor_LocalityConfig_RegionalByTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 7, 0}
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_LocalityConfig_RegionalByTable.Merge(m, src)
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_LocalityConfig_RegionalByTable.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_LocalityConfig_RegionalByTable proto.InternalMessageInfo

type TableDescriptor_LocalityConfig_RegionalByRow struct {
	// As is set if the table has a REGIONAL BY ROW AS ... set to a specific column.
	As *string `protobuf:"bytes,1,opt,name=as" json:"as,omitempty"`
}

func (m *TableDescriptor_LocalityConfig_RegionalByRow) Reset() {
	*m = TableDescriptor_LocalityConfig_RegionalByRow{}
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow) String() string {
	return proto.CompactTextString(m)
}
func (*TableDescriptor_LocalityConfig_RegionalByRow) ProtoMessage() {}
func (*TableDescriptor_LocalityConfig_RegionalByRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 7, 1}
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_LocalityConfig_RegionalByRow.Merge(m, src)
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_LocalityConfig_RegionalByRow.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_LocalityConfig_RegionalByRow proto.InternalMessageInfo

type TableDescriptor_LocalityConfig_Global struct {
}

func (m *TableDescriptor_LocalityConfig_Global) Reset()         { *m = TableDescriptor_LocalityConfig_Global{} }
func (m *TableDescriptor_LocalityConfig_Global) String() string { return proto.CompactTextString(m) }
func (*TableDescriptor_LocalityConfig_Global) ProtoMessage()    {}
func (*TableDescriptor_LocalityConfig_Global) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{15, 7, 2}
}
func (m *TableDescriptor_LocalityConfig_Global) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDescriptor_LocalityConfig_Global) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableDescriptor_LocalityConfig_Global) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDescriptor_LocalityConfig_Global.Merge(m, src)
}
func (m *TableDescriptor_LocalityConfig_Global) XXX_Size() int {
	return m.Size()
}
func (m *TableDescriptor_LocalityConfig_Global) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDescriptor_LocalityConfig_Global.DiscardUnknown(m)
}

var xxx_messageInfo_TableDescriptor_LocalityConfig_Global proto.InternalMessageInfo

// DatabaseDescriptor represents a namespace (aka database) and is stored
// in a structured metadata key. The DatabaseDescriptor has a globally-unique ID
// shared with other Descriptors.
// Permissions are applied to all tables in the namespace.
type DatabaseDescriptor struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	ID   ID     `protobuf:"varint,2,opt,name=id,casttype=ID" json:"id"`
	// Last modification time of the descriptor.
	ModificationTime hlc.Timestamp        `protobuf:"bytes,4,opt,name=modification_time,json=modificationTime" json:"modification_time"`
	Version          DescriptorVersion    `protobuf:"varint,5,opt,name=version,casttype=DescriptorVersion" json:"version"`
	DrainingNames    []NameInfo           `protobuf:"bytes,6,rep,name=draining_names,json=drainingNames" json:"draining_names"`
	Privileges       *PrivilegeDescriptor `protobuf:"bytes,3,opt,name=privileges" json:"privileges,omitempty"`
	// schemas is a mapping from child schema name to ID. It is used during
	// name resolution to know without a KV lookup whether a database has a
	// child schema with a target name. Temporary schemas are not stored here.
	Schemas       map[string]DatabaseDescriptor_SchemaInfo `protobuf:"bytes,7,rep,name=schemas" json:"schemas" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	State         DescriptorState                          `protobuf:"varint,8,opt,name=state,enum=cockroach.sql.sqlbase.DescriptorState" json:"state"`
	OfflineReason string                                   `protobuf:"bytes,9,opt,name=offline_reason,json=offlineReason" json:"offline_reason"`
	// RegionConfig is only set if multi-region controls are set on the database.
	RegionConfig *DatabaseDescriptor_RegionConfig `protobuf:"bytes,10,opt,name=region_config,json=regionConfig" json:"region_config,omitempty"`
	// DefaultPrivileges contains the default privileges for the database.
	DefaultPrivileges *DefaultPrivilegeDescriptor `protobuf:"bytes,11,opt,name=default_privileges,json=defaultPrivileges" json:"default_privileges,omitempty"`
}

func (m *DatabaseDescriptor) Reset()         { *m = DatabaseDescriptor{} }
func (m *DatabaseDescriptor) String() string { return proto.CompactTextString(m) }
func (*DatabaseDescriptor) ProtoMessage()    {}
func (*DatabaseDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{16}
}
func (m *DatabaseDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DatabaseDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseDescriptor.Merge(m, src)
}
func (m *DatabaseDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseDescriptor proto.InternalMessageInfo

func (m *DatabaseDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatabaseDescriptor) GetID() ID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DatabaseDescriptor) GetModificationTime() hlc.Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return hlc.Timestamp{}
}

func (m *DatabaseDescriptor) GetVersion() DescriptorVersion {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DatabaseDescriptor) GetDrainingNames() []NameInfo {
	if m != nil {
		return m.DrainingNames
	}
	return nil
}

func (m *DatabaseDescriptor) GetPrivileges() *PrivilegeDescriptor {
	if m != nil {
		return m.Privileges
	}
	return nil
}

func (m *DatabaseDescriptor) GetSchemas() map[string]DatabaseDescriptor_SchemaInfo {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *DatabaseDescriptor) GetState() DescriptorState {
	if m != nil {
		return m.State
	}
	return DescriptorState_PUBLIC
}

func (m *DatabaseDescriptor) GetOfflineReason() string {
	if m != nil {
		return m.OfflineReason
	}
	return ""
}

func (m *DatabaseDescriptor) GetRegionConfig() *DatabaseDescriptor_RegionConfig {
	if m != nil {
		return m.RegionConfig
	}
	return nil
}

func (m *DatabaseDescriptor) GetDefaultPrivileges() *DefaultPrivilegeDescriptor {
	if m != nil {
		return m.DefaultPrivileges
	}
	return nil
}

// SchemaInfo represents the state of a child user defined schema.
type DatabaseDescriptor_SchemaInfo struct {
	// ID is the ID of the schema.
	ID ID `protobuf:"varint,1,opt,name=id,casttype=ID" json:"id"`
	// dropped represents whether the schema is dropped or not. This field
	// is used in a similar way as the draining_names.
	Dropped bool `protobuf:"varint,2,opt,name=dropped" json:"dropped"`
}

func (m *DatabaseDescriptor_SchemaInfo) Reset()         { *m = DatabaseDescriptor_SchemaInfo{} }
func (m *DatabaseDescriptor_SchemaInfo) String() string { return proto.CompactTextString(m) }
func (*DatabaseDescriptor_SchemaInfo) ProtoMessage()    {}
func (*DatabaseDescriptor_SchemaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{16, 0}
}
func (m *DatabaseDescriptor_SchemaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseDescriptor_SchemaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DatabaseDescriptor_SchemaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseDescriptor_SchemaInfo.Merge(m, src)
}
func (m *DatabaseDescriptor_SchemaInfo) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseDescriptor_SchemaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseDescriptor_SchemaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseDescriptor_SchemaInfo proto.InternalMessageInfo

// RegionConfig stores region configuration for a given database.
type DatabaseDescriptor_RegionConfig struct {
	SurvivalGoal  SurvivalGoal `protobuf:"varint,2,opt,name=survival_goal,json=survivalGoal,enum=cockroach.sql.sqlbase.SurvivalGoal" json:"survival_goal"`
	PrimaryRegion RegionName   `protobuf:"bytes,3,opt,name=primary_region,json=primaryRegion,casttype=RegionName" json:"primary_region"`
	// RegionEnumID represents ID of the type descriptor corresponding to the
	// region enum for a multi-region database. If the database is not a
	// multi-region database then this field is 0 and no such region enum exists.
	RegionEnumID ID `protobuf:"varint,4,opt,name=region_enum_id,json=regionEnumId,casttype=ID" json:"region_enum_id"`
	// DataPlacement dictates whether or not to use a restricted data placement
	// policy.
	Placement DataPlacement `protobuf:"varint,5,opt,name=placement,enum=cockroach.sql.sqlbase.DataPlacement" json:"placement"`
}

func (m *DatabaseDescriptor_RegionConfig) Reset()         { *m = DatabaseDescriptor_RegionConfig{} }
func (m *DatabaseDescriptor_RegionConfig) String() string { return proto.CompactTextString(m) }
func (*DatabaseDescriptor_RegionConfig) ProtoMessage()    {}
func (*DatabaseDescriptor_RegionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{16, 2}
}
func (m *DatabaseDescriptor_RegionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseDescriptor_RegionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DatabaseDescriptor_RegionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseDescriptor_RegionConfig.Merge(m, src)
}
func (m *DatabaseDescriptor_RegionConfig) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseDescriptor_RegionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseDescriptor_RegionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseDescriptor_RegionConfig proto.InternalMessageInfo

// TypeDescriptor represents a user defined type and is stored in a structured
// metadata key. The TypeDescriptor has a globally-unique ID shared with other
// Descriptors.
type TypeDescriptor struct {
	// name is the current name of this user defined type.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name"`
	// id is the globally unique ID for this type.
	ID      ID                `protobuf:"varint,4,opt,name=id,casttype=ID" json:"id"`
	Version DescriptorVersion `protobuf:"varint,9,opt,name=version,casttype=DescriptorVersion" json:"version"`
	// Last modification time of the descriptor.
	ModificationTime hlc.Timestamp `protobuf:"bytes,10,opt,name=modification_time,json=modificationTime" json:"modification_time"`
	DrainingNames    []NameInfo    `protobuf:"bytes,11,rep,name=draining_names,json=drainingNames" json:"draining_names"`
	// privileges contains the privileges for the type.
	Privileges *PrivilegeDescriptor `protobuf:"bytes,14,opt,name=privileges" json:"privileges,omitempty"`
	// parent_id represents the ID of the database that this type resides in.
	ParentID ID `protobuf:"varint,1,opt,name=parent_id,json=parentId,casttype=ID" json:"parent_id"`
	// parent_schema_id represents the ID of the schema that this type resides in.
	ParentSchemaID ID `protobuf:"varint,2,opt,name=parent_schema_id,json=parentSchemaId,casttype=ID" json:"parent_schema_id"`
	// array_type_id is the globally unique ID for the implicitly created array
	// type for this type. It is only set when the type descriptor points to a
	// non-array type.
	ArrayTypeID   ID                  `protobuf:"varint,8,opt,name=array_type_id,json=arrayTypeId,casttype=ID" json:"array_type_id"`
	State         DescriptorState     `protobuf:"varint,13,opt,name=state,enum=cockroach.sql.sqlbase.DescriptorState" json:"state"`
	OfflineReason string              `protobuf:"bytes,15,opt,name=offline_reason,json=offlineReason" json:"offline_reason"`
	Kind          TypeDescriptor_Kind `protobuf:"varint,5,opt,name=kind,enum=cockroach.sql.sqlbase.TypeDescriptor_Kind" json:"kind"`
	// referencing_descriptor_ids is a set of descriptors that reference this type.
	ReferencingDescriptorIDs []ID `protobuf:"varint,12,rep,name=referencing_descriptor_ids,json=referencingDescriptorIds,casttype=ID" json:"referencing_descriptor_ids,omitempty"`
	// enum_members is the set of values in an enum.
	EnumMembers []TypeDescriptor_EnumMember `protobuf:"bytes,6,rep,name=enum_members,json=enumMembers" json:"enum_members"`
	// alias is the types.T that this descriptor is an alias for.
	Alias        *types.T                     `protobuf:"bytes,7,opt,name=alias" json:"alias,omitempty"`
	RegionConfig *TypeDescriptor_RegionConfig `protobuf:"bytes,16,opt,name=region_config,json=regionConfig" json:"region_config,omitempty"`
}

func (m *TypeDescriptor) Reset()         { *m = TypeDescriptor{} }
func (m *TypeDescriptor) String() string { return proto.CompactTextString(m) }
func (*TypeDescriptor) ProtoMessage()    {}
func (*TypeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{17}
}
func (m *TypeDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TypeDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeDescriptor.Merge(m, src)
}
func (m *TypeDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *TypeDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_TypeDescriptor proto.InternalMessageInfo

func (m *TypeDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TypeDescriptor) GetID() ID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TypeDescriptor) GetVersion() DescriptorVersion {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TypeDescriptor) GetModificationTime() hlc.Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return hlc.Timestamp{}
}

func (m *TypeDescriptor) GetDrainingNames() []NameInfo {
	if m != nil {
		return m.DrainingNames
	}
	return nil
}

func (m *TypeDescriptor) GetPrivileges() *PrivilegeDescriptor {
	if m != nil {
		return m.Privileges
	}
	return nil
}

func (m *TypeDescriptor) GetParentID() ID {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *TypeDescriptor) GetParentSchemaID() ID {
	if m != nil {
		return m.ParentSchemaID
	}
	return 0
}

func (m *TypeDescriptor) GetArrayTypeID() ID {
	if m != nil {
		return m.ArrayTypeID
	}
	return 0
}

func (m *TypeDescriptor) GetState() DescriptorState {
	if m != nil {
		return m.State
	}
	return DescriptorState_PUBLIC
}

func (m *TypeDescriptor) GetOfflineReason() string {
	if m != nil {
		return m.OfflineReason
	}
	return ""
}

func (m *TypeDescriptor) GetKind() TypeDescriptor_Kind {
	if m != nil {
		return m.Kind
	}
	return TypeDescriptor_ENUM
}

func (m *TypeDescriptor) GetReferencingDescriptorIDs() []ID {
	if m != nil {
		return m.ReferencingDescriptorIDs
	}
	return nil
}

func (m *TypeDescriptor) GetEnumMembers() []TypeDescriptor_EnumMember {
	if m != nil {
		return m.EnumMembers
	}
	return nil
}

func (m *TypeDescriptor) GetAlias() *types.T {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *TypeDescriptor) GetRegionConfig() *TypeDescriptor_RegionConfig {
	if m != nil {
		return m.RegionConfig
	}
	return nil
}

// EnumMember represents a value in an enum.
type TypeDescriptor_EnumMember struct {
	PhysicalRepresentation []byte                               `protobuf:"bytes,1,opt,name=physical_representation,json=physicalRepresentation" json:"physical_representation,omitempty"`
	LogicalRepresentation  string                               `protobuf:"bytes,2,opt,name=logical_representation,json=logicalRepresentation" json:"logical_representation"`
	Capability             TypeDescriptor_EnumMember_Capability `protobuf:"varint,3,opt,name=capability,enum=cockroach.sql.sqlbase.TypeDescriptor_EnumMember_Capability" json:"capability"`
	Direction              TypeDescriptor_EnumMember_Direction  `protobuf:"varint,4,opt,name=direction,enum=cockroach.sql.sqlbase.TypeDescriptor_EnumMember_Direction" json:"direction"`
}

func (m *TypeDescriptor_EnumMember) Reset()         { *m = TypeDescriptor_EnumMember{} }
func (m *TypeDescriptor_EnumMember) String() string { return proto.CompactTextString(m) }
func (*TypeDescriptor_EnumMember) ProtoMessage()    {}
func (*TypeDescriptor_EnumMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{17, 0}
}
func (m *TypeDescriptor_EnumMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeDescriptor_EnumMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TypeDescriptor_EnumMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeDescriptor_EnumMember.Merge(m, src)
}
func (m *TypeDescriptor_EnumMember) XXX_Size() int {
	return m.Size()
}
func (m *TypeDescriptor_EnumMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeDescriptor_EnumMember.DiscardUnknown(m)
}

var xxx_messageInfo_TypeDescriptor_EnumMember proto.InternalMessageInfo

// RegionConfig stores the multi-region configuration for a type descriptor of
// MULTIREGION_ENUM kind.
type TypeDescriptor_RegionConfig struct {
	// PrimaryRegion represents the PrimaryRegion for a multi-region enum.
	PrimaryRegion RegionName `protobuf:"bytes,1,opt,name=primary_region,json=primaryRegion,casttype=RegionName" json:"primary_region"`
}

func (m *TypeDescriptor_RegionConfig) Reset()         { *m = TypeDescriptor_RegionConfig{} }
func (m *TypeDescriptor_RegionConfig) String() string { return proto.CompactTextString(m) }
func (*TypeDescriptor_RegionConfig) ProtoMessage()    {}
func (*TypeDescriptor_RegionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{17, 1}
}
func (m *TypeDescriptor_RegionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeDescriptor_RegionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TypeDescriptor_RegionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeDescriptor_RegionConfig.Merge(m, src)
}
func (m *TypeDescriptor_RegionConfig) XXX_Size() int {
	return m.Size()
}
func (m *TypeDescriptor_RegionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeDescriptor_RegionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TypeDescriptor_RegionConfig proto.InternalMessageInfo

// SchemaDescriptor represents a physical schema and is stored in a structured
// metadata key.
type SchemaDescriptor struct {
	// name is the name of the schema.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name"`
	// id is the schema ID, globally unique across all descriptors.
	ID            ID              `protobuf:"varint,3,opt,name=id,casttype=ID" json:"id"`
	State         DescriptorState `protobuf:"varint,8,opt,name=state,enum=cockroach.sql.sqlbase.DescriptorState" json:"state"`
	OfflineReason string          `protobuf:"bytes,9,opt,name=offline_reason,json=offlineReason" json:"offline_reason"`
	// Last modification time of the descriptor.
	ModificationTime hlc.Timestamp     `protobuf:"bytes,5,opt,name=modification_time,json=modificationTime" json:"modification_time"`
	Version          DescriptorVersion `protobuf:"varint,6,opt,name=version,casttype=DescriptorVersion" json:"version"`
	DrainingNames    []NameInfo        `protobuf:"bytes,7,rep,name=draining_names,json=drainingNames" json:"draining_names"`
	// parent_id refers to the database the schema is in.
	ParentID ID `protobuf:"varint,1,opt,name=parent_id,json=parentId,casttype=ID" json:"parent_id"`
	// privileges contains the privileges for the schema.
	Privileges *PrivilegeDescriptor `protobuf:"bytes,4,opt,name=privileges" json:"privileges,omitempty"`
}

func (m *SchemaDescriptor) Reset()         { *m = SchemaDescriptor{} }
func (m *SchemaDescriptor) String() string { return proto.CompactTextString(m) }
func (*SchemaDescriptor) ProtoMessage()    {}
func (*SchemaDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{18}
}
func (m *SchemaDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SchemaDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaDescriptor.Merge(m, src)
}
func (m *SchemaDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *SchemaDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaDescriptor proto.InternalMessageInfo

func (m *SchemaDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SchemaDescriptor) GetID() ID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SchemaDescriptor) GetState() DescriptorState {
	if m != nil {
		return m.State
	}
	return DescriptorState_PUBLIC
}

func (m *SchemaDescriptor) GetOfflineReason() string {
	if m != nil {
		return m.OfflineReason
	}
	return ""
}

func (m *SchemaDescriptor) GetModificationTime() hlc.Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return hlc.Timestamp{}
}

func (m *SchemaDescriptor) GetVersion() DescriptorVersion {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SchemaDescriptor) GetDrainingNames() []NameInfo {
	if m != nil {
		return m.DrainingNames
	}
	return nil
}

func (m *SchemaDescriptor) GetParentID() ID {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *SchemaDescriptor) GetPrivileges() *PrivilegeDescriptor {
	if m != nil {
		return m.Privileges
	}
	return nil
}

// Descriptor is a union type for descriptors for tables, schemas, databases,
// and types.
type Descriptor struct {
	// Types that are valid to be assigned to Union:
	//	*Descriptor_Table
	//	*Descriptor_Database
	//	*Descriptor_Type
	//	*Descriptor_Schema
	Union isDescriptor_Union `protobuf_oneof:"union"`
}

func (m *Descriptor) Reset()         { *m = Descriptor{} }
func (m *Descriptor) String() string { return proto.CompactTextString(m) }
func (*Descriptor) ProtoMessage()    {}
func (*Descriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12dcc21c3bcc9571, []int{19}
}
func (m *Descriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Descriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Descriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Descriptor.Merge(m, src)
}
func (m *Descriptor) XXX_Size() int {
	return m.Size()
}
func (m *Descriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_Descriptor.DiscardUnknown(m)
}

var xxx_messageInfo_Descriptor proto.InternalMessageInfo

type isDescriptor_Union interface {
	isDescriptor_Union()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Descriptor_Table struct {
	Table *TableDescriptor `protobuf:"bytes,1,opt,name=table,oneof" json:"table,omitempty"`
}
type Descriptor_Database struct {
	Database *DatabaseDescriptor `protobuf:"bytes,2,opt,name=database,oneof" json:"database,omitempty"`
}
type Descriptor_Type struct {
	Type *TypeDescriptor `protobuf:"bytes,3,opt,name=type,oneof" json:"type,omitempty"`
}
type Descriptor_Schema struct {
	Schema *SchemaDescriptor `protobuf:"bytes,4,opt,name=schema,oneof" json:"schema,omitempty"`
}

func (*Descriptor_Table) isDescriptor_Union()    {}
func (*Descriptor_Database) isDescriptor_Union() {}
func (*Descriptor_Type) isDescriptor_Union()     {}
func (*Descriptor_Schema) isDescriptor_Union()   {}

func (m *Descriptor) GetUnion() isDescriptor_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (m *Descriptor) GetTable() *TableDescriptor {
	if x, ok := m.GetUnion().(*Descriptor_Table); ok {
		return x.Table
	}
	return nil
}

func (m *Descriptor) GetDatabase() *DatabaseDescriptor {
	if x, ok := m.GetUnion().(*Descriptor_Database); ok {
		return x.Database
	}
	return nil
}

func (m *Descriptor) GetType() *TypeDescriptor {
	if x, ok := m.GetUnion().(*Descriptor_Type); ok {
		return x.Type
	}
	return nil
}

func (m *Descriptor) GetSchema() *SchemaDescriptor {
	if x, ok := m.GetUnion().(*Descriptor_Schema); ok {
		return x.Schema
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Descriptor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Descriptor_Table)(nil),
		(*Descriptor_Database)(nil),
		(*Descriptor_Type)(nil),
		(*Descriptor_Schema)(nil),
	}
}

func init() {
	proto.RegisterEnum("cockroach.sql.sqlbase.ConstraintValidity", ConstraintValidity_name, ConstraintValidity_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.SystemColumnKind", SystemColumnKind_name, SystemColumnKind_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.GeneratedAsIdentityType", GeneratedAsIdentityType_name, GeneratedAsIdentityType_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.DescriptorState", DescriptorState_name, DescriptorState_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.SurvivalGoal", SurvivalGoal_name, SurvivalGoal_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.DataPlacement", DataPlacement_name, DataPlacement_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.ForeignKeyReference_Action", ForeignKeyReference_Action_name, ForeignKeyReference_Action_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.ForeignKeyReference_Match", ForeignKeyReference_Match_name, ForeignKeyReference_Match_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.IndexDescriptor_Direction", IndexDescriptor_Direction_name, IndexDescriptor_Direction_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.IndexDescriptor_Type", IndexDescriptor_Type_name, IndexDescriptor_Type_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.ConstraintToUpdate_ConstraintType", ConstraintToUpdate_ConstraintType_name, ConstraintToUpdate_ConstraintType_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.DescriptorMutation_State", DescriptorMutation_State_name, DescriptorMutation_State_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.DescriptorMutation_Direction", DescriptorMutation_Direction_name, DescriptorMutation_Direction_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.TableDescriptor_AuditMode", TableDescriptor_AuditMode_name, TableDescriptor_AuditMode_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.TypeDescriptor_Kind", TypeDescriptor_Kind_name, TypeDescriptor_Kind_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.TypeDescriptor_EnumMember_Capability", TypeDescriptor_EnumMember_Capability_name, TypeDescriptor_EnumMember_Capability_value)
	proto.RegisterEnum("cockroach.sql.sqlbase.TypeDescriptor_EnumMember_Direction", TypeDescriptor_EnumMember_Direction_name, TypeDescriptor_EnumMember_Direction_value)
	proto.RegisterType((*ForeignKeyReference)(nil), "cockroach.sql.sqlbase.ForeignKeyReference")
	proto.RegisterType((*ForeignKeyConstraint)(nil), "cockroach.sql.sqlbase.ForeignKeyConstraint")
	proto.RegisterType((*UniqueWithoutIndexConstraint)(nil), "cockroach.sql.sqlbase.UniqueWithoutIndexConstraint")
	proto.RegisterType((*ColumnDescriptor)(nil), "cockroach.sql.sqlbase.ColumnDescriptor")
	proto.RegisterType((*ColumnFamilyDescriptor)(nil), "cockroach.sql.sqlbase.ColumnFamilyDescriptor")
	proto.RegisterType((*InterleaveDescriptor)(nil), "cockroach.sql.sqlbase.InterleaveDescriptor")
	proto.RegisterType((*InterleaveDescriptor_Ancestor)(nil), "cockroach.sql.sqlbase.InterleaveDescriptor.Ancestor")
	proto.RegisterType((*ShardedDescriptor)(nil), "cockroach.sql.sqlbase.ShardedDescriptor")
	proto.RegisterType((*PartitioningDescriptor)(nil), "cockroach.sql.sqlbase.PartitioningDescriptor")
	proto.RegisterType((*PartitioningDescriptor_List)(nil), "cockroach.sql.sqlbase.PartitioningDescriptor.List")
	proto.RegisterType((*PartitioningDescriptor_Range)(nil), "cockroach.sql.sqlbase.PartitioningDescriptor.Range")
	proto.RegisterType((*IndexDescriptor)(nil), "cockroach.sql.sqlbase.IndexDescriptor")
	proto.RegisterType((*ConstraintToUpdate)(nil), "cockroach.sql.sqlbase.ConstraintToUpdate")
	proto.RegisterType((*PrimaryKeySwap)(nil), "cockroach.sql.sqlbase.PrimaryKeySwap")
	proto.RegisterType((*PrimaryKeySwap_LocalityConfigSwap)(nil), "cockroach.sql.sqlbase.PrimaryKeySwap.LocalityConfigSwap")
	proto.RegisterType((*ComputedColumnSwap)(nil), "cockroach.sql.sqlbase.ComputedColumnSwap")
	proto.RegisterType((*MaterializedViewRefresh)(nil), "cockroach.sql.sqlbase.MaterializedViewRefresh")
	proto.RegisterType((*DescriptorMutation)(nil), "cockroach.sql.sqlbase.DescriptorMutation")
	proto.RegisterType((*NameInfo)(nil), "cockroach.sql.sqlbase.NameInfo")
	proto.RegisterType((*TableDescriptor)(nil), "cockroach.sql.sqlbase.TableDescriptor")
	proto.RegisterType((*TableDescriptor_SchemaChangeLease)(nil), "cockroach.sql.sqlbase.TableDescriptor.SchemaChangeLease")
	proto.RegisterType((*TableDescriptor_CheckConstraint)(nil), "cockroach.sql.sqlbase.TableDescriptor.CheckConstraint")
	proto.RegisterType((*TableDescriptor_Reference)(nil), "cockroach.sql.sqlbase.TableDescriptor.Reference")
	proto.RegisterType((*TableDescriptor_MutationJob)(nil), "cockroach.sql.sqlbase.TableDescriptor.MutationJob")
	proto.RegisterType((*TableDescriptor_SequenceOpts)(nil), "cockroach.sql.sqlbase.TableDescriptor.SequenceOpts")
	proto.RegisterType((*TableDescriptor_SequenceOpts_SequenceOwner)(nil), "cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.SequenceOwner")
	proto.RegisterType((*TableDescriptor_Replacement)(nil), "cockroach.sql.sqlbase.TableDescriptor.Replacement")
	proto.RegisterType((*TableDescriptor_GCDescriptorMutation)(nil), "cockroach.sql.sqlbase.TableDescriptor.GCDescriptorMutation")
	proto.RegisterType((*TableDescriptor_LocalityConfig)(nil), "cockroach.sql.sqlbase.TableDescriptor.LocalityConfig")
	proto.RegisterType((*TableDescriptor_LocalityConfig_RegionalByTable)(nil), "cockroach.sql.sqlbase.TableDescriptor.LocalityConfig.RegionalByTable")
	proto.RegisterType((*TableDescriptor_LocalityConfig_RegionalByRow)(nil), "cockroach.sql.sqlbase.TableDescriptor.LocalityConfig.RegionalByRow")
	proto.RegisterType((*TableDescriptor_LocalityConfig_Global)(nil), "cockroach.sql.sqlbase.TableDescriptor.LocalityConfig.Global")
	proto.RegisterType((*DatabaseDescriptor)(nil), "cockroach.sql.sqlbase.DatabaseDescriptor")
	proto.RegisterMapType((map[string]DatabaseDescriptor_SchemaInfo)(nil), "cockroach.sql.sqlbase.DatabaseDescriptor.SchemasEntry")
	proto.RegisterType((*DatabaseDescriptor_SchemaInfo)(nil), "cockroach.sql.sqlbase.DatabaseDescriptor.SchemaInfo")
	proto.RegisterType((*DatabaseDescriptor_RegionConfig)(nil), "cockroach.sql.sqlbase.DatabaseDescriptor.RegionConfig")
	proto.RegisterType((*TypeDescriptor)(nil), "cockroach.sql.sqlbase.TypeDescriptor")
	proto.RegisterType((*TypeDescriptor_EnumMember)(nil), "cockroach.sql.sqlbase.TypeDescriptor.EnumMember")
	proto.RegisterType((*TypeDescriptor_RegionConfig)(nil), "cockroach.sql.sqlbase.TypeDescriptor.RegionConfig")
	proto.RegisterType((*SchemaDescriptor)(nil), "cockroach.sql.sqlbase.SchemaDescriptor")
	proto.RegisterType((*Descriptor)(nil), "cockroach.sql.sqlbase.Descriptor")
}

func init() {
	proto.RegisterFile("sql/catalog/descpb/structured.proto", fileDescriptor_12dcc21c3bcc9571)
}

var fileDescriptor_12dcc21c3bcc9571 = []byte{
	// 5612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3c, 0x4d, 0x73, 0x23, 0xc7,
	0x75, 0xc4, 0x37, 0xf0, 0xf0, 0x35, 0xec, 0xe5, 0xee, 0x42, 0xf4, 0x8a, 0xe4, 0x62, 0xb5, 0x12,
	0xb5, 0x92, 0xb8, 0x2b, 0x4a, 0xb6, 0x57, 0x92, 0xed, 0x08, 0x20, 0xc0, 0x25, 0x76, 0x49, 0x80,
	0x1a, 0x82, 0xbb, 0x92, 0x9d, 0x78, 0x3c, 0xc4, 0x34, 0xc1, 0x11, 0x07, 0x33, 0xd8, 0x99, 0xc1,
	0x72, 0xe1, 0xca, 0x21, 0xe5, 0x53, 0x4e, 0x49, 0x0e, 0xb9, 0xa5, 0x5c, 0x71, 0xa5, 0x5c, 0x89,
	0x6f, 0x2e, 0x57, 0xaa, 0x92, 0xaa, 0x1c, 0x72, 0x8d, 0x8f, 0x4e, 0xa5, 0xca, 0xe5, 0x13, 0x2b,
	0xa1, 0x2f, 0xf9, 0x01, 0x39, 0xe9, 0x92, 0x54, 0x7f, 0xcd, 0x07, 0x3e, 0x28, 0x90, 0xdc, 0xf8,
	0x20, 0x15, 0xe7, 0xf5, 0x7b, 0xaf, 0xbb, 0x5f, 0xbf, 0xef, 0x6e, 0x2c, 0xdc, 0x71, 0x9e, 0x1b,
	0xf7, 0x3b, 0xaa, 0xab, 0x1a, 0x56, 0xf7, 0xbe, 0x86, 0x9d, 0x4e, 0xff, 0xe0, 0xbe, 0xe3, 0xda,
	0x83, 0x8e, 0x3b, 0xb0, 0xb1, 0xb6, 0xd6, 0xb7, 0x2d, 0xd7, 0x42, 0xd7, 0x3b, 0x56, 0xe7, 0xd8,
	0xb6, 0xd4, 0xce, 0xd1, 0x9a, 0xf3, 0xdc, 0x20, 0xff, 0x1d, 0xa8, 0x0e, 0x5e, 0x2c, 0x0d, 0x5c,
	0xdd, 0xb8, 0x7f, 0x64, 0x74, 0xee, 0xbb, 0x7a, 0x0f, 0x3b, 0xae, 0xda, 0xeb, 0x33, 0x82, 0xc5,
	0xf2, 0x04, 0xae, 0x7d, 0x5b, 0x7f, 0xa1, 0x1b, 0xb8, 0x8b, 0x39, 0xce, 0x75, 0x82, 0xe3, 0x0e,
	0xfb, 0xd8, 0x61, 0xff, 0xe7, 0xe0, 0xd7, 0xba, 0xd8, 0xba, 0xdf, 0xc5, 0x96, 0x6e, 0x6a, 0xf8,
	0xe5, 0xfd, 0x8e, 0x65, 0x1e, 0xea, 0x5d, 0x3e, 0xb4, 0xd0, 0xb5, 0xba, 0x16, 0xfd, 0xf3, 0x3e,
	0xf9, 0x8b, 0x41, 0xcb, 0x3f, 0x49, 0xc0, 0xb5, 0x4d, 0xcb, 0xc6, 0x7a, 0xd7, 0x7c, 0x82, 0x87,
	0x32, 0x3e, 0xc4, 0x36, 0x36, 0x3b, 0x18, 0xad, 0x40, 0xc2, 0x55, 0x0f, 0x0c, 0x5c, 0x8a, 0xac,
	0x44, 0x56, 0xf3, 0x55, 0xf8, 0xf5, 0xe9, 0xf2, 0xdc, 0x57, 0xa7, 0xcb, 0xd1, 0x46, 0x4d, 0x66,
	0x03, 0xe8, 0x2e, 0x24, 0xe8, 0x2c, 0xa5, 0x28, 0xc5, 0x28, 0x72, 0x8c, 0x54, 0x83, 0x00, 0x09,
	0x1a, 0x1d, 0x45, 0x25, 0x88, 0x9b, 0x6a, 0x0f, 0x97, 0x62, 0x2b, 0x91, 0xd5, 0x4c, 0x35, 0x4e,
	0xb0, 0x64, 0x0a, 0x41, 0x4f, 0x20, 0xfd, 0x42, 0x35, 0x74, 0x4d, 0x77, 0x87, 0xa5, 0xf8, 0x4a,
	0x64, 0xb5, 0xb0, 0xfe, 0xf6, 0xda, 0x44, 0x51, 0xad, 0x6d, 0x58, 0xa6, 0xe3, 0xda, 0xaa, 0x6e,
	0xba, 0x4f, 0x39, 0x01, 0x67, 0xe4, 0x31, 0x40, 0x0f, 0x60, 0xde, 0x39, 0x52, 0x6d, 0xac, 0x29,
	0x7d, 0x1b, 0x1f, 0xea, 0x2f, 0x15, 0x03, 0x9b, 0xa5, 0xc4, 0x4a, 0x64, 0x35, 0xc1, 0x51, 0x8b,
	0x6c, 0x78, 0x97, 0x8e, 0x6e, 0x63, 0x13, 0xb5, 0x21, 0x63, 0x99, 0x8a, 0x86, 0x0d, 0xec, 0xe2,
	0x52, 0x92, 0xce, 0xff, 0xfe, 0x94, 0xf9, 0x27, 0x08, 0x68, 0xad, 0xd2, 0x71, 0x75, 0xcb, 0x14,
	0xeb, 0xb0, 0xcc, 0x1a, 0x65, 0xc4, 0xb9, 0x0e, 0xfa, 0x9a, 0xea, 0xe2, 0x52, 0xea, 0xca, 0x5c,
	0xf7, 0x29, 0x23, 0xb4, 0x0d, 0x89, 0x9e, 0xea, 0x76, 0x8e, 0x4a, 0x69, 0xca, 0xf1, 0xc1, 0x05,
	0x38, 0xee, 0x10, 0x3a, 0xce, 0x90, 0x31, 0x29, 0x3f, 0x83, 0x24, 0x9b, 0x07, 0xe5, 0x21, 0xd3,
	0x6c, 0x29, 0x95, 0x8d, 0x76, 0xa3, 0xd5, 0x94, 0xe6, 0x50, 0x0e, 0xd2, 0x72, 0x7d, 0xaf, 0x2d,
	0x37, 0x36, 0xda, 0x52, 0x84, 0x7c, 0xed, 0xd5, 0xdb, 0x4a, 0x73, 0x7f, 0x7b, 0x5b, 0x8a, 0xa2,
	0x22, 0x64, 0xc9, 0x57, 0xad, 0xbe, 0x59, 0xd9, 0xdf, 0x6e, 0x4b, 0x31, 0x94, 0x85, 0xd4, 0x46,
	0x65, 0x6f, 0xa3, 0x52, 0xab, 0x4b, 0xf1, 0xc5, 0xf8, 0x2f, 0x7e, 0xbe, 0x34, 0x57, 0x7e, 0x00,
	0x09, 0x3a, 0x1d, 0x02, 0x48, 0xee, 0x35, 0x76, 0x76, 0xb7, 0xeb, 0xd2, 0x1c, 0x4a, 0x43, 0x7c,
	0x93, 0xb0, 0x88, 0x10, 0x8a, 0xdd, 0x8a, 0xdc, 0x6e, 0x54, 0xb6, 0xa5, 0x28, 0xa3, 0xf8, 0x38,
	0xfe, 0xdf, 0x3f, 0x5b, 0x8e, 0x94, 0xff, 0x3d, 0x01, 0x0b, 0xfe, 0xda, 0xfd, 0xd3, 0x46, 0x1b,
	0x50, 0xb4, 0x6c, 0xbd, 0xab, 0x9b, 0x0a, 0xd5, 0x39, 0x45, 0xd7, 0xb8, 0x3e, 0x7e, 0x83, 0xec,
	0xe7, 0xec, 0x74, 0x39, 0xdf, 0xa2, 0xc3, 0x6d, 0x32, 0xda, 0xa8, 0x71, 0x05, 0xcd, 0x5b, 0x01,
	0xa0, 0x86, 0x9e, 0xc0, 0x3c, 0x67, 0xd2, 0xb1, 0x8c, 0x41, 0xcf, 0x54, 0x74, 0xcd, 0x29, 0x45,
	0x57, 0x62, 0xab, 0xf9, 0xea, 0xf2, 0xd9, 0xe9, 0x72, 0x91, 0xb1, 0xd8, 0xa0, 0x63, 0x8d, 0x9a,
	0xf3, 0xd5, 0xe9, 0x72, 0x5a, 0x7c, 0xc8, 0x7c, 0x7a, 0xfe, 0xad, 0x39, 0xe8, 0x19, 0x5c, 0xb7,
	0x85, 0x6c, 0xb5, 0x20, 0xc3, 0x18, 0x65, 0x78, 0xe7, 0xec, 0x74, 0xf9, 0x9a, 0x27, 0x7c, 0x6d,
	0x32, 0xd3, 0x6b, 0xf6, 0x28, 0x82, 0xe6, 0xa0, 0x16, 0x04, 0xc0, 0xfe, 0x76, 0xe3, 0x74, 0xbb,
	0xcb, 0x7c, 0xbb, 0xf3, 0x3e, 0xeb, 0xf0, 0x96, 0xe7, 0xed, 0x91, 0x01, 0xcd, 0x33, 0xbc, 0xc4,
	0xb9, 0x86, 0x97, 0xbc, 0xaa, 0xe1, 0x85, 0xcc, 0x28, 0xf5, 0xff, 0x62, 0x46, 0xe9, 0x57, 0x6e,
	0x46, 0x99, 0x57, 0x60, 0x46, 0x4c, 0x77, 0x1f, 0xc7, 0xd3, 0x20, 0x65, 0x1f, 0xc7, 0xd3, 0x59,
	0x29, 0xf7, 0x38, 0x9e, 0xce, 0x49, 0xf9, 0xc7, 0xf1, 0x74, 0x5e, 0x2a, 0x94, 0xff, 0x26, 0x0a,
	0xb7, 0xf6, 0x4d, 0xfd, 0xf9, 0x00, 0x3f, 0xd3, 0xdd, 0x23, 0x6b, 0xe0, 0x52, 0xbf, 0x18, 0xd0,
	0xed, 0x07, 0x90, 0x1e, 0x51, 0xea, 0xeb, 0xfc, 0x94, 0x53, 0xe1, 0xb3, 0x4d, 0xb9, 0xfc, 0x44,
	0x1f, 0x02, 0x8c, 0x69, 0xf0, 0x6b, 0x67, 0xa7, 0xcb, 0x99, 0xc9, 0x6a, 0x96, 0xe9, 0x78, 0xca,
	0xf5, 0x07, 0x72, 0xc2, 0x65, 0xc8, 0xf4, 0x6d, 0xac, 0xe9, 0x1d, 0x72, 0x6a, 0x41, 0xbd, 0xf3,
	0xc1, 0xdc, 0xe2, 0xff, 0x3e, 0x05, 0x12, 0x5b, 0x68, 0x0d, 0x3b, 0x1d, 0x5b, 0xef, 0xbb, 0x96,
	0xed, 0xad, 0x32, 0x32, 0xb6, 0xca, 0x37, 0x21, 0xaa, 0x6b, 0x3c, 0xd0, 0xdc, 0xe0, 0x52, 0x8a,
	0x52, 0x01, 0xf9, 0xdb, 0x8d, 0xea, 0x1a, 0x5a, 0x83, 0x38, 0x89, 0x86, 0x74, 0x9f, 0xd9, 0xf5,
	0xc5, 0xd1, 0x9d, 0xe0, 0xde, 0x1a, 0x0b, 0x96, 0x6d, 0x99, 0xe2, 0xa1, 0x15, 0x48, 0x9b, 0x03,
	0xc3, 0xa0, 0x81, 0x8e, 0xec, 0x3e, 0x2d, 0xb6, 0x24, 0xa0, 0xe8, 0x36, 0xe4, 0x34, 0x7c, 0xa8,
	0x0e, 0x0c, 0x57, 0xc1, 0x2f, 0xfb, 0x36, 0xdb, 0x95, 0x9c, 0xe5, 0xb0, 0xfa, 0xcb, 0xbe, 0x8d,
	0xde, 0x80, 0x82, 0xa7, 0xab, 0x0c, 0x09, 0x51, 0xa4, 0x9c, 0xd0, 0x3b, 0x8a, 0x75, 0x0b, 0x92,
	0x47, 0xba, 0xa6, 0x61, 0x93, 0x9a, 0x9c, 0x98, 0x88, 0xc3, 0xd0, 0x2a, 0xe4, 0x74, 0x53, 0xed,
	0x74, 0xb0, 0xe3, 0xe8, 0x64, 0x31, 0xf3, 0x01, 0x9c, 0xd0, 0x08, 0x7a, 0x0e, 0x8b, 0x5d, 0x6c,
	0x62, 0x5b, 0x75, 0xb1, 0xa6, 0xa8, 0x8e, 0xa2, 0x6b, 0xd8, 0x74, 0x75, 0x77, 0xa8, 0xd0, 0x8d,
	0x5f, 0xa3, 0x47, 0xb8, 0x36, 0xe5, 0x08, 0x1f, 0x09, 0xc2, 0x8a, 0xd3, 0xe0, 0x64, 0xed, 0x61,
	0x1f, 0xf3, 0x79, 0x6e, 0x76, 0x27, 0x0f, 0xa3, 0x5d, 0xb8, 0x3b, 0x79, 0x4a, 0x07, 0x3f, 0x1f,
	0x10, 0xeb, 0x50, 0xac, 0x3e, 0xb1, 0xb7, 0xd2, 0x02, 0xdd, 0xf7, 0xed, 0x09, 0x7c, 0xf6, 0x38,
	0x66, 0x8b, 0x22, 0xa2, 0x75, 0x98, 0x1f, 0x38, 0xd8, 0xf1, 0x19, 0x10, 0x85, 0x06, 0xaa, 0xd0,
	0x49, 0xae, 0xf5, 0x45, 0x82, 0x20, 0xc8, 0x88, 0x0e, 0xaf, 0xc3, 0xbc, 0x75, 0x62, 0x8e, 0xd0,
	0xe4, 0xc2, 0x34, 0x04, 0x21, 0x48, 0x73, 0x1b, 0x72, 0x1d, 0xab, 0xd7, 0x1f, 0x88, 0x83, 0xc9,
	0xb2, 0xd3, 0xe3, 0x30, 0x7a, 0x2e, 0x4b, 0x90, 0x7a, 0xa1, 0xdb, 0xee, 0x40, 0x35, 0x4a, 0x52,
	0x40, 0xe8, 0x02, 0x88, 0x3e, 0x05, 0xa9, 0xdf, 0x55, 0x54, 0xd7, 0xb5, 0xf5, 0x03, 0xc2, 0xc7,
	0x1c, 0xf4, 0x4a, 0xf9, 0x90, 0x22, 0x16, 0x76, 0x1f, 0x55, 0xc4, 0x70, 0x73, 0xd0, 0x93, 0x0b,
	0xfd, 0x6e, 0xf0, 0x1b, 0x6d, 0xc2, 0xeb, 0xaa, 0xe1, 0x62, 0x5b, 0x44, 0x0b, 0x72, 0x50, 0x8a,
	0x6e, 0x2a, 0x7d, 0xdb, 0xea, 0xda, 0xd8, 0x71, 0x4a, 0x85, 0xc0, 0xbc, 0xaf, 0x51, 0x54, 0xa6,
	0xd4, 0x44, 0xf8, 0x0d, 0x73, 0x97, 0xa3, 0xa1, 0x1f, 0x00, 0x72, 0x86, 0x8e, 0x8b, 0x7b, 0x82,
	0xd1, 0xb1, 0x6e, 0x6a, 0xa5, 0x22, 0x3d, 0xf1, 0xb7, 0xa6, 0x9c, 0xf8, 0x1e, 0x25, 0x60, 0xec,
	0x9e, 0xe8, 0xa6, 0xc6, 0x67, 0x91, 0x9c, 0x11, 0xb8, 0xe7, 0xcc, 0xd2, 0x52, 0xe6, 0x71, 0x3c,
	0x9d, 0x91, 0xe0, 0x71, 0x3c, 0x9d, 0x92, 0xd2, 0xe5, 0xbf, 0x88, 0xc2, 0x0d, 0x86, 0xb6, 0xa9,
	0xf6, 0x74, 0x63, 0x78, 0x55, 0x73, 0x65, 0x5c, 0xb8, 0xb9, 0xd2, 0xe3, 0xa1, 0x5b, 0x21, 0x64,
	0x2c, 0x86, 0xd2, 0xe3, 0x21, 0xb0, 0x26, 0x01, 0x8d, 0xf8, 0xbc, 0xf8, 0x05, 0x7c, 0x5e, 0x0b,
	0xe6, 0x85, 0xe5, 0x7a, 0x1c, 0xa8, 0xf9, 0xe6, 0xab, 0x77, 0xf8, 0x9a, 0x8a, 0x35, 0x86, 0x20,
	0xc8, 0xc3, 0xa1, 0x5f, 0x0b, 0x0d, 0x72, 0x11, 0x95, 0xff, 0x39, 0x0a, 0x0b, 0x0d, 0xd3, 0xc5,
	0xb6, 0x81, 0xd5, 0x17, 0x38, 0x20, 0x8e, 0xcf, 0x21, 0xa3, 0x9a, 0x1d, 0xec, 0xb8, 0x96, 0xed,
	0x94, 0x22, 0x2b, 0xb1, 0xd5, 0xec, 0xfa, 0x87, 0x53, 0x4e, 0x65, 0x12, 0xfd, 0x5a, 0x85, 0x13,
	0x0b, 0x97, 0xe9, 0x31, 0x5b, 0xfc, 0xd7, 0x08, 0xa4, 0xc5, 0xe8, 0x25, 0xc2, 0xc6, 0x37, 0x21,
	0x4d, 0x53, 0x71, 0xc5, 0x3b, 0x93, 0x45, 0x41, 0xc1, 0x73, 0xf5, 0x60, 0xda, 0x9e, 0xa2, 0xb8,
	0x0d, 0x0d, 0x6d, 0x4c, 0xca, 0xa8, 0x63, 0x94, 0xfe, 0xa6, 0x90, 0xdf, 0x5e, 0x38, 0xa7, 0x1e,
	0x4b, 0xb2, 0x99, 0xcc, 0xb8, 0xe4, 0xfe, 0x29, 0x02, 0xf3, 0x84, 0x40, 0xc3, 0x5a, 0x40, 0x6c,
	0x77, 0x00, 0x74, 0x47, 0x71, 0x18, 0x9c, 0xee, 0x48, 0x98, 0x42, 0x46, 0x77, 0x38, 0xba, 0xa7,
	0x6a, 0xd1, 0x31, 0x55, 0xfb, 0x08, 0xf2, 0x94, 0x56, 0x39, 0x18, 0x74, 0x8e, 0xb1, 0xeb, 0xd0,
	0x15, 0x26, 0xaa, 0x0b, 0x7c, 0x85, 0x39, 0xca, 0xa1, 0xca, 0xc6, 0xe4, 0x9c, 0x13, 0xf8, 0x1a,
	0xd3, 0xbe, 0xf8, 0x98, 0xf6, 0xf1, 0x85, 0xff, 0x32, 0x0e, 0x37, 0x76, 0x55, 0xdb, 0xd5, 0x89,
	0xef, 0xd2, 0xcd, 0x6e, 0x60, 0xf5, 0x77, 0x21, 0x6b, 0x0e, 0x84, 0x41, 0x3a, 0xfc, 0x40, 0xd8,
	0xfa, 0xc0, 0x1c, 0x70, 0x03, 0x73, 0xd0, 0xb7, 0x60, 0x81, 0xa0, 0xe9, 0xbd, 0xbe, 0xa1, 0x77,
	0x74, 0xd7, 0xc3, 0x8f, 0x07, 0xf0, 0x91, 0x39, 0xe8, 0x35, 0x38, 0x82, 0xa0, 0xdb, 0x86, 0xb8,
	0xa1, 0x3b, 0x2e, 0x8d, 0xf5, 0xd9, 0xf5, 0xf5, 0x29, 0xea, 0x34, 0x79, 0x6d, 0x6b, 0xdb, 0xba,
	0xe3, 0x0a, 0x59, 0x11, 0x2e, 0xa8, 0x05, 0x09, 0x5b, 0x35, 0xbb, 0x98, 0xda, 0x59, 0x76, 0xfd,
	0x83, 0x8b, 0xb1, 0x93, 0x09, 0xa9, 0xc8, 0x80, 0x28, 0x9f, 0xc5, 0x9f, 0x46, 0x20, 0x4e, 0x66,
	0x39, 0xc7, 0x15, 0xdc, 0x80, 0xe4, 0x0b, 0xd5, 0x18, 0x60, 0x96, 0xaf, 0xe4, 0x64, 0xfe, 0x85,
	0xfe, 0x04, 0x8a, 0xce, 0xe0, 0xa0, 0x1f, 0x98, 0x8a, 0x07, 0xed, 0xf7, 0x2e, 0xb4, 0x2a, 0xaf,
	0xb8, 0x0b, 0xf3, 0x62, 0x07, 0xb7, 0xf8, 0x1c, 0x12, 0x74, 0xd5, 0xe7, 0xac, 0xef, 0x2e, 0x14,
	0x0e, 0x6d, 0xab, 0xa7, 0xe8, 0x66, 0xc7, 0x18, 0x38, 0xfa, 0x0b, 0x96, 0x3b, 0xe4, 0xe4, 0x3c,
	0x81, 0x36, 0x04, 0x90, 0xe8, 0x8a, 0x6b, 0x29, 0xf8, 0xa5, 0x40, 0x8a, 0x52, 0xa4, 0xac, 0x6b,
	0xd5, 0x05, 0x28, 0xa4, 0xea, 0xff, 0x92, 0x83, 0x22, 0x35, 0xa8, 0x99, 0xdc, 0xe5, 0xdd, 0x80,
	0xbb, 0xbc, 0x1e, 0x72, 0x97, 0x9e, 0x55, 0x12, 0x6f, 0x79, 0x0b, 0x92, 0x03, 0x9a, 0x50, 0xd2,
	0x25, 0x7a, 0x19, 0x04, 0x83, 0xa1, 0x87, 0x90, 0x7a, 0x81, 0x6d, 0x87, 0x84, 0x61, 0x44, 0x39,
	0x2d, 0xf1, 0x82, 0xfc, 0xc6, 0xc8, 0x42, 0x9e, 0x32, 0x2c, 0x59, 0xa0, 0xa3, 0x55, 0x90, 0x8e,
	0xf1, 0x50, 0x99, 0x60, 0x0b, 0x85, 0x63, 0x52, 0x8d, 0xf9, 0xce, 0x58, 0x83, 0xeb, 0x01, 0x4c,
	0x4d, 0xb7, 0x31, 0xcd, 0xb3, 0x9d, 0x52, 0x7a, 0x25, 0x76, 0x4e, 0x3e, 0x3d, 0xb2, 0x80, 0xb5,
	0x9a, 0x20, 0x94, 0xaf, 0x79, 0x13, 0x78, 0x30, 0x07, 0xbd, 0x0b, 0x88, 0x78, 0x3a, 0x1c, 0x5e,
	0x51, 0x82, 0xae, 0x48, 0xa2, 0x23, 0xc1, 0x35, 0x55, 0xa1, 0x10, 0x58, 0x13, 0x09, 0x12, 0x49,
	0x1a, 0x24, 0x6e, 0x11, 0xeb, 0x7f, 0x22, 0xd8, 0x8f, 0xc6, 0x89, 0x9c, 0x37, 0x31, 0x09, 0x15,
	0xfb, 0x6c, 0x5f, 0xce, 0xe0, 0x90, 0xf8, 0xb9, 0x00, 0xab, 0x14, 0x65, 0x55, 0x3e, 0x3b, 0x5d,
	0x46, 0x4f, 0xf0, 0x70, 0x8f, 0x8e, 0x4f, 0x66, 0x88, 0x8e, 0x47, 0xc6, 0x35, 0x07, 0x6d, 0x81,
	0x14, 0xda, 0x08, 0xe1, 0x58, 0xa0, 0x1c, 0x97, 0x48, 0xda, 0xb0, 0xe7, 0x6f, 0x65, 0x94, 0x5b,
	0x21, 0xb0, 0x4d, 0xc2, 0xa9, 0x0d, 0x0b, 0x24, 0x67, 0xb1, 0x1c, 0xdd, 0x0d, 0x71, 0xcb, 0xfb,
	0xeb, 0xdb, 0x10, 0xe3, 0x53, 0xd6, 0xd7, 0x19, 0x19, 0xd7, 0x1c, 0xb4, 0x07, 0xd9, 0x43, 0x56,
	0xea, 0x28, 0xc7, 0x78, 0x48, 0x8b, 0xa2, 0xec, 0xfa, 0xbd, 0xd9, 0x8b, 0xa2, 0x6a, 0x92, 0xa8,
	0x58, 0x29, 0x22, 0xc3, 0xa1, 0x37, 0x88, 0x9e, 0x41, 0x3e, 0x50, 0xc7, 0x1e, 0x0c, 0x69, 0x5a,
	0x77, 0x39, 0xb6, 0x39, 0x9f, 0x51, 0x75, 0x88, 0x3e, 0x03, 0xd0, 0xbd, 0xb8, 0x49, 0x33, 0xb9,
	0xec, 0xfa, 0x3b, 0x17, 0x08, 0xb0, 0xc2, 0x2d, 0xfb, 0x4c, 0xd0, 0x33, 0x28, 0xf8, 0x5f, 0x74,
	0xb1, 0xb9, 0x0b, 0x2f, 0x96, 0x71, 0xcd, 0x07, 0xf8, 0x54, 0x89, 0x10, 0x72, 0x21, 0xd7, 0x56,
	0xbc, 0xbc, 0x6b, 0x0b, 0x31, 0x42, 0x75, 0x5e, 0xe0, 0x48, 0x34, 0xeb, 0x7b, 0x67, 0x46, 0x83,
	0x0b, 0x24, 0xf9, 0xac, 0xee, 0xf9, 0x00, 0x50, 0xc7, 0xc6, 0x34, 0x9f, 0xc7, 0x2f, 0x59, 0xc8,
	0x31, 0x86, 0xa1, 0xa2, 0x63, 0x9e, 0x8f, 0xd7, 0xbd, 0x61, 0xb4, 0x05, 0x79, 0x6c, 0x76, 0x2c,
	0x4d, 0x37, 0xbb, 0x7e, 0xb1, 0xc1, 0x93, 0xa9, 0xaf, 0x4e, 0x97, 0xbf, 0x31, 0x32, 0x6b, 0x9d,
	0xe3, 0x92, 0xc9, 0xe5, 0x1c, 0x0e, 0x7c, 0xa1, 0x2d, 0x48, 0x89, 0x80, 0xbf, 0x40, 0x25, 0xb3,
	0x3a, 0x2d, 0x7d, 0x1d, 0x4d, 0x17, 0x44, 0x76, 0xce, 0xc9, 0x49, 0x01, 0xa7, 0xe9, 0x0e, 0x49,
	0x74, 0xb4, 0xd2, 0xf5, 0x60, 0x01, 0x27, 0xa0, 0x68, 0x03, 0xa0, 0x8b, 0x2d, 0x85, 0xb5, 0x42,
	0x4b, 0x37, 0xe8, 0x74, 0x4b, 0x81, 0xe9, 0xba, 0xd8, 0x5a, 0x13, 0x0d, 0x53, 0x52, 0xe3, 0x1e,
	0xea, 0x5d, 0x91, 0x7f, 0x74, 0xb1, 0xc5, 0x00, 0xe1, 0xc2, 0xf6, 0xe6, 0xc4, 0xc2, 0xb6, 0xbc,
	0x04, 0x19, 0xcf, 0x89, 0xa1, 0x14, 0xc4, 0x2a, 0x7b, 0x1b, 0xac, 0xfb, 0x55, 0xab, 0xef, 0x6d,
	0x48, 0x91, 0xf2, 0x6d, 0x88, 0xd3, 0xcd, 0x67, 0x21, 0xb5, 0xd9, 0x92, 0x9f, 0x55, 0xe4, 0x1a,
	0xeb, 0xb8, 0x35, 0x9a, 0x4f, 0xeb, 0x72, 0xbb, 0x5e, 0x93, 0x44, 0xf0, 0x38, 0x8d, 0x03, 0xf2,
	0x8b, 0xed, 0xb6, 0xc5, 0x9b, 0x17, 0x5d, 0x28, 0x76, 0x3c, 0x28, 0x3b, 0x80, 0xc8, 0x4a, 0x74,
	0xb5, 0xb0, 0xfe, 0xf0, 0x6b, 0x0b, 0x76, 0xc1, 0x23, 0x08, 0xf2, 0x55, 0xa2, 0xd0, 0x09, 0x41,
	0x03, 0xc9, 0x56, 0x74, 0x24, 0x50, 0xc9, 0x90, 0xe8, 0x1c, 0xe1, 0xce, 0x31, 0x0f, 0xd5, 0xdf,
	0x9a, 0x32, 0x31, 0xcd, 0x43, 0x03, 0xea, 0xb7, 0x41, 0x68, 0xfc, 0xa9, 0x45, 0x0e, 0x41, 0x59,
	0x21, 0x39, 0xec, 0x84, 0xe2, 0xe7, 0xda, 0xf5, 0xa4, 0x26, 0xa1, 0xb0, 0xeb, 0x80, 0x0f, 0x7a,
	0x08, 0x45, 0xd3, 0x72, 0x15, 0x52, 0xc4, 0x73, 0x6f, 0x49, 0x8b, 0xee, 0x7c, 0x55, 0xe2, 0xba,
	0xea, 0xfb, 0xc5, 0xbc, 0x69, 0xb9, 0xcd, 0x81, 0x61, 0x30, 0x00, 0xfa, 0xb3, 0x08, 0x2c, 0xb3,
	0x80, 0xaa, 0x9c, 0xb0, 0xb6, 0x8d, 0xc2, 0x72, 0x67, 0x5f, 0x46, 0xb4, 0xc9, 0x35, 0x3d, 0x7b,
	0x3a, 0xaf, 0xe7, 0xc3, 0x97, 0x7a, 0x6b, 0x70, 0x0e, 0x4e, 0xb9, 0x0d, 0x85, 0xf0, 0x31, 0xa1,
	0x0c, 0x24, 0x36, 0xb6, 0xea, 0x1b, 0x4f, 0xa4, 0x39, 0x54, 0x84, 0xec, 0x66, 0x4b, 0xae, 0x37,
	0x1e, 0x35, 0x95, 0x27, 0xf5, 0x2f, 0x58, 0x93, 0xb6, 0xd9, 0xf2, 0x9a, 0xb4, 0x25, 0x58, 0xd8,
	0x6f, 0x36, 0x3e, 0xdb, 0xaf, 0x2b, 0xcf, 0x1a, 0xed, 0xad, 0xd6, 0x7e, 0x5b, 0x69, 0x34, 0x6b,
	0xf5, 0xcf, 0xa5, 0x98, 0x57, 0xdf, 0x25, 0xa4, 0x64, 0xf9, 0x3f, 0x92, 0x50, 0xd8, 0xb5, 0xf5,
	0x9e, 0x6a, 0x0f, 0x49, 0x54, 0x3b, 0x51, 0xfb, 0xe8, 0x53, 0x58, 0xb0, 0x0c, 0x92, 0xe9, 0x53,
	0xa8, 0xe2, 0xd5, 0x0b, 0xf1, 0xc9, 0xbd, 0xfd, 0x79, 0xcb, 0xd0, 0x38, 0x87, 0x06, 0x2f, 0x17,
	0x3e, 0x85, 0x05, 0x13, 0x9f, 0x8c, 0x73, 0x88, 0x4c, 0xe1, 0x60, 0xe2, 0x93, 0x11, 0x0e, 0xef,
	0x42, 0x96, 0xac, 0x81, 0x52, 0x62, 0xd1, 0xdf, 0xca, 0x06, 0x89, 0xc0, 0x32, 0xb4, 0x06, 0x1b,
	0x26, 0xd8, 0x64, 0x3e, 0x81, 0x1d, 0x9b, 0x80, 0x6d, 0xe2, 0x13, 0x81, 0xfd, 0x11, 0xdc, 0x18,
	0x5f, 0xdd, 0x58, 0x7b, 0xf4, 0xda, 0xc8, 0xa2, 0x48, 0x86, 0x81, 0xbe, 0x84, 0x05, 0xc3, 0xea,
	0xa8, 0x86, 0xee, 0x0e, 0xb9, 0x17, 0x51, 0x9c, 0x13, 0xb5, 0x4f, 0x35, 0x2a, 0x3b, 0xd5, 0xf8,
	0xc2, 0xf2, 0x5d, 0xdb, 0xe6, 0x1c, 0x98, 0x3f, 0x21, 0x20, 0x19, 0x19, 0x63, 0xb0, 0xc5, 0x7f,
	0x8c, 0x01, 0x1a, 0x47, 0x45, 0xc7, 0x70, 0x8d, 0x48, 0x66, 0x64, 0x19, 0x54, 0xb4, 0xd9, 0xf5,
	0x6f, 0xce, 0x68, 0x85, 0x61, 0xbe, 0xc2, 0xcd, 0x5b, 0x86, 0x16, 0x1e, 0x20, 0x93, 0x11, 0x51,
	0x8d, 0x4e, 0x16, 0x7d, 0x05, 0x93, 0x99, 0xf8, 0x64, 0x64, 0x32, 0x1d, 0x5e, 0x27, 0x93, 0xd9,
	0xb8, 0xab, 0x5b, 0xa6, 0x6a, 0x28, 0x07, 0x43, 0xc5, 0xb6, 0x4e, 0x02, 0x05, 0x3b, 0x2b, 0x38,
	0x57, 0xcf, 0x4e, 0x97, 0x4b, 0x4d, 0x7c, 0x22, 0x73, 0xbc, 0xea, 0x50, 0xb6, 0x4e, 0x26, 0x56,
	0xed, 0x25, 0x73, 0x32, 0x96, 0x86, 0x64, 0x78, 0xeb, 0x9c, 0xa9, 0x42, 0x4d, 0xbe, 0x38, 0xeb,
	0x63, 0x4d, 0x66, 0x55, 0xf3, 0x5b, 0x7f, 0xa1, 0x9c, 0xff, 0x97, 0x11, 0xa0, 0x49, 0xd8, 0xc0,
	0x15, 0x6d, 0x7d, 0x7a, 0x76, 0x1f, 0x42, 0x9e, 0x4c, 0xeb, 0xef, 0x28, 0x32, 0xc5, 0x13, 0x11,
	0x75, 0xf6, 0x16, 0xfb, 0x21, 0xe4, 0xc9, 0x89, 0xfb, 0x54, 0xd1, 0x69, 0x54, 0x96, 0xe1, 0x5d,
	0x22, 0xa0, 0xb7, 0x20, 0xa7, 0x9b, 0x24, 0xad, 0xe7, 0xed, 0xae, 0x60, 0xbb, 0x37, 0xcb, 0x47,
	0xfc, 0x75, 0x97, 0x7f, 0x15, 0x85, 0x9b, 0x3b, 0xaa, 0x8b, 0x6d, 0x5d, 0x35, 0xf4, 0x1f, 0x63,
	0xed, 0xa9, 0x4e, 0x36, 0x7c, 0x68, 0x63, 0xe7, 0x08, 0x7d, 0x0e, 0xf3, 0x63, 0x06, 0xc3, 0x15,
	0xee, 0xcd, 0xd9, 0xb2, 0x0e, 0x51, 0x9a, 0x8d, 0xd8, 0x14, 0xda, 0x09, 0x1b, 0x2e, 0x2b, 0x6d,
	0x2f, 0xc6, 0x33, 0x68, 0xd9, 0x0f, 0x21, 0xa1, 0x3a, 0x8a, 0x75, 0xc8, 0x63, 0xd2, 0xeb, 0x01,
	0x46, 0x03, 0x57, 0x37, 0xd6, 0x8e, 0x8c, 0xce, 0x5a, 0x5b, 0x5c, 0xb0, 0x8a, 0x68, 0xa6, 0x3a,
	0xad, 0x43, 0xf4, 0x1e, 0x14, 0x9d, 0x23, 0x6b, 0x60, 0x68, 0xca, 0x81, 0xda, 0x39, 0x3e, 0xd4,
	0x0d, 0x23, 0xd4, 0x03, 0x2e, 0xb0, 0xc1, 0x2a, 0x1f, 0xe3, 0x32, 0xfb, 0xcb, 0x14, 0x20, 0x7f,
	0x3d, 0x3b, 0x03, 0x57, 0xa5, 0xf1, 0xbe, 0x02, 0x49, 0x1e, 0x68, 0x98, 0x8c, 0xde, 0x9a, 0x1a,
	0x93, 0xc3, 0x3d, 0xef, 0xad, 0x39, 0x99, 0x13, 0xa2, 0xef, 0x05, 0xef, 0x53, 0x67, 0x96, 0xc8,
	0xd6, 0x9c, 0xb8, 0x68, 0x7d, 0x02, 0x10, 0x08, 0x52, 0x69, 0xca, 0xe4, 0xed, 0x99, 0x53, 0x83,
	0xad, 0x39, 0x39, 0x40, 0x8e, 0x5a, 0x50, 0xe8, 0x87, 0x3c, 0x18, 0xaf, 0x0e, 0xee, 0xce, 0xe4,
	0xee, 0xb6, 0xe6, 0xe4, 0x11, 0x72, 0xf4, 0x03, 0x40, 0x9d, 0x31, 0xe3, 0x28, 0xc1, 0xd7, 0xac,
	0x72, 0x94, 0x60, 0x6b, 0x4e, 0x9e, 0xc0, 0x06, 0x7d, 0x09, 0x37, 0x7b, 0x93, 0xf5, 0x98, 0xd7,
	0x09, 0xd3, 0x1a, 0xe2, 0x53, 0xb4, 0x7f, 0x6b, 0x4e, 0x9e, 0xc6, 0x10, 0x3d, 0x81, 0x84, 0xe3,
	0x92, 0x34, 0x30, 0x46, 0x53, 0xf0, 0xfb, 0x53, 0x38, 0x8f, 0xeb, 0xc8, 0xda, 0x1e, 0x21, 0x13,
	0xc9, 0x0f, 0xe5, 0x81, 0x9e, 0x41, 0xc6, 0xab, 0xa2, 0xf9, 0xf5, 0xcb, 0x07, 0xb3, 0x33, 0xf4,
	0xd2, 0x4d, 0x91, 0x8c, 0x7a, 0xbc, 0x50, 0x05, 0xb2, 0x3d, 0x8e, 0xe6, 0xb7, 0x3d, 0x57, 0x78,
	0x6f, 0x01, 0x04, 0x07, 0xea, 0x3b, 0x03, 0x5f, 0x32, 0x08, 0xa2, 0x06, 0x4d, 0xad, 0x6d, 0xcb,
	0x30, 0x88, 0x6d, 0xd0, 0x94, 0xc7, 0x4b, 0xad, 0x05, 0xb4, 0xfc, 0x29, 0x24, 0xe8, 0x9e, 0x48,
	0x4a, 0xbb, 0xdf, 0x7c, 0xd2, 0x6c, 0x3d, 0x6b, 0xb2, 0x14, 0xa5, 0x56, 0xdf, 0xae, 0xb7, 0xeb,
	0x4a, 0xab, 0xb9, 0x4d, 0x52, 0x94, 0xd7, 0xe0, 0x3a, 0x07, 0x54, 0x9a, 0x35, 0xe5, 0x99, 0xdc,
	0x10, 0x43, 0xd1, 0xf2, 0x6a, 0x30, 0x67, 0x4e, 0x43, 0xbc, 0xd9, 0x6a, 0xd6, 0xa5, 0x39, 0x9a,
	0x3d, 0xd7, 0x6a, 0x52, 0x84, 0x66, 0xcf, 0x72, 0x6b, 0x57, 0x8a, 0x32, 0xeb, 0xab, 0xe6, 0x00,
	0x34, 0x4f, 0x0e, 0x8f, 0xe3, 0xe9, 0xa4, 0x94, 0x2a, 0xff, 0x43, 0x04, 0xd2, 0x24, 0x50, 0x37,
	0xcc, 0x43, 0x0b, 0x7d, 0x00, 0x99, 0xbe, 0x6a, 0x63, 0xd3, 0xf5, 0x3d, 0xad, 0x68, 0x40, 0xa7,
	0x77, 0xe9, 0x80, 0xd7, 0x1f, 0x4d, 0x33, 0xc4, 0x86, 0x86, 0x36, 0x41, 0xe2, 0x44, 0x4e, 0xe7,
	0x08, 0xf7, 0x54, 0x3f, 0xee, 0xdc, 0xf2, 0x5a, 0xfc, 0x74, 0x7c, 0x8f, 0x0e, 0x7b, 0x1c, 0x0a,
	0xfd, 0x20, 0xf4, 0x9c, 0x2e, 0x25, 0xf7, 0x1d, 0x7f, 0xfd, 0x36, 0x14, 0x47, 0x02, 0xe5, 0x39,
	0x5d, 0xa1, 0x15, 0xda, 0x15, 0x8a, 0xf9, 0x7e, 0xdf, 0xeb, 0x0a, 0x45, 0x79, 0x43, 0xe8, 0x03,
	0xbf, 0xe5, 0x43, 0x0e, 0x38, 0x5e, 0x7d, 0x8d, 0x87, 0x87, 0xf9, 0x73, 0xba, 0x3d, 0xbb, 0x30,
	0xdf, 0xb3, 0x34, 0xfd, 0x90, 0x14, 0x2d, 0x44, 0x3b, 0x5c, 0xbd, 0x87, 0x79, 0x4a, 0x3b, 0x93,
	0xef, 0x94, 0x82, 0xd4, 0x64, 0x10, 0x6d, 0x43, 0x41, 0x23, 0x5e, 0x83, 0xd4, 0x85, 0xac, 0x57,
	0x73, 0x9d, 0xfa, 0xf4, 0xe5, 0x29, 0x9a, 0x2c, 0x0e, 0x4b, 0x94, 0xce, 0x82, 0x98, 0xf5, 0x73,
	0x42, 0x27, 0x18, 0x9f, 0xf1, 0x04, 0x0f, 0x60, 0x71, 0x60, 0xe2, 0x97, 0x7d, 0xcb, 0xc1, 0x9a,
	0x32, 0x76, 0x96, 0xab, 0x94, 0xcb, 0x5d, 0xce, 0xe5, 0xe6, 0xbe, 0xc0, 0x9c, 0x78, 0xa8, 0x37,
	0x07, 0x13, 0x87, 0x35, 0xf4, 0x08, 0x52, 0xa2, 0x6d, 0x9b, 0xa6, 0xfb, 0x9b, 0xd5, 0xc7, 0x8b,
	0x9a, 0x95, 0x53, 0xa3, 0x4d, 0x28, 0x98, 0xf8, 0x65, 0xf0, 0x56, 0x22, 0x13, 0x32, 0xcf, 0x5c,
	0x13, 0xbf, 0x9c, 0x7c, 0x25, 0x91, 0x33, 0xfd, 0x11, 0x0d, 0xb5, 0x20, 0x7d, 0xa8, 0xf6, 0x74,
	0x43, 0xc7, 0x4e, 0xe9, 0x06, 0x5d, 0xd1, 0x7b, 0xe7, 0xae, 0x68, 0xf4, 0x02, 0x47, 0xd8, 0xb3,
	0x60, 0xe2, 0x2d, 0x8c, 0x02, 0x86, 0x64, 0x61, 0x37, 0xc7, 0x17, 0x26, 0x2e, 0x70, 0x42, 0x97,
	0x39, 0x74, 0x61, 0xfc, 0x4b, 0x43, 0x9f, 0x41, 0x3e, 0x9c, 0x37, 0xc0, 0x25, 0xf2, 0x86, 0x5c,
	0x3f, 0x98, 0x34, 0x6c, 0x42, 0x4a, 0x24, 0x0c, 0xd9, 0x4b, 0x24, 0x0c, 0x82, 0x18, 0x55, 0x49,
	0x36, 0xf6, 0xd2, 0xf5, 0xcb, 0x93, 0x9c, 0xdf, 0x2b, 0x3d, 0x3b, 0x5d, 0xce, 0x92, 0x1d, 0x4e,
	0xb8, 0x14, 0xc9, 0x9a, 0x1e, 0x5c, 0x43, 0x8f, 0x01, 0xbc, 0xd7, 0x58, 0x0e, 0xbd, 0x0b, 0x9c,
	0xde, 0x31, 0xda, 0x15, 0x88, 0xfe, 0x92, 0xe4, 0x00, 0x35, 0xda, 0x81, 0x8c, 0x70, 0xb9, 0xac,
	0x37, 0x38, 0x3d, 0x1a, 0x8e, 0x07, 0x00, 0xe1, 0xf6, 0x3d, 0x0e, 0xa4, 0x40, 0x37, 0xb0, 0xea,
	0x60, 0xde, 0x70, 0x7a, 0x38, 0x63, 0xb6, 0xce, 0x74, 0x7c, 0xe3, 0x48, 0x35, 0xbb, 0x78, 0x9b,
	0xd0, 0x57, 0xa3, 0xa5, 0x88, 0xcc, 0x58, 0xa1, 0x26, 0x48, 0x54, 0x64, 0xc1, 0x78, 0x22, 0x51,
	0xa9, 0xbd, 0x21, 0xbc, 0x23, 0x91, 0xda, 0xd4, 0x98, 0x42, 0x75, 0x6a, 0xc7, 0x8f, 0x2b, 0xdf,
	0x81, 0xc2, 0xa1, 0x65, 0xf7, 0x54, 0x57, 0x11, 0xce, 0x6b, 0xde, 0xef, 0x7c, 0x7f, 0x75, 0xba,
	0x9c, 0xdf, 0xa4, 0xa3, 0xc2, 0x71, 0xe5, 0x0f, 0x83, 0x9f, 0xa8, 0x2a, 0xc2, 0x2f, 0xbb, 0xe9,
	0x7e, 0xf3, 0x6b, 0x85, 0x35, 0x21, 0xea, 0xbe, 0x03, 0x05, 0xeb, 0xf0, 0xd0, 0xd0, 0x4d, 0xac,
	0xd8, 0x58, 0x75, 0x2c, 0xb3, 0xf4, 0x66, 0xc0, 0xfb, 0xe6, 0xf9, 0x98, 0x4c, 0x87, 0x50, 0x13,
	0x92, 0xb4, 0x51, 0xe1, 0x94, 0x16, 0xe8, 0xf1, 0x5c, 0xb2, 0xe9, 0x21, 0x73, 0x2e, 0xe8, 0x0e,
	0xc0, 0x0b, 0x1d, 0x9f, 0x28, 0xcf, 0x07, 0xd8, 0x1e, 0x96, 0x4a, 0xc1, 0x5e, 0x12, 0x81, 0x7f,
	0x46, 0xc0, 0xe8, 0x5b, 0xb0, 0xa0, 0x3b, 0x4a, 0x30, 0x05, 0x51, 0xc8, 0x60, 0xe9, 0xed, 0x40,
	0x1c, 0x46, 0xba, 0x33, 0x9a, 0xbe, 0xa0, 0xf7, 0x21, 0xa3, 0xe1, 0x3e, 0x36, 0x35, 0xa7, 0x65,
	0x96, 0x5e, 0xa3, 0x25, 0xf1, 0xb5, 0xb3, 0xd3, 0xe5, 0x4c, 0x4d, 0x00, 0xb9, 0x93, 0xf3, 0xb1,
	0xd0, 0xa7, 0x50, 0xf0, 0x3e, 0xda, 0xc3, 0x3e, 0x76, 0x4a, 0xef, 0x51, 0xba, 0x12, 0x39, 0xd8,
	0x5a, 0x68, 0x44, 0x84, 0xbd, 0x30, 0x3e, 0xfa, 0x12, 0x72, 0x0c, 0x82, 0xb5, 0x96, 0x59, 0x1d,
	0x96, 0x16, 0xa9, 0x9c, 0x1e, 0xcc, 0x28, 0x27, 0xbf, 0x93, 0xea, 0xdd, 0xd9, 0xd5, 0x02, 0xdc,
	0xe4, 0x10, 0x6f, 0xf4, 0xc7, 0x90, 0x13, 0x7a, 0xf8, 0xd8, 0x3a, 0x70, 0x4a, 0xdf, 0x38, 0xf7,
	0x62, 0x6c, 0x74, 0xae, 0x1d, 0x9f, 0x54, 0x78, 0x99, 0x20, 0x37, 0xd4, 0x06, 0x52, 0x3e, 0x8a,
	0xc8, 0xd1, 0xa1, 0xf6, 0xa0, 0x7c, 0x69, 0x1d, 0x10, 0x95, 0x5f, 0x5b, 0x89, 0xac, 0xc6, 0xbc,
	0x84, 0x60, 0xa1, 0x89, 0x4f, 0x82, 0x56, 0xf3, 0xd8, 0x3a, 0x68, 0xd4, 0xe4, 0x05, 0x73, 0x1c,
	0xaa, 0xa1, 0xcf, 0x21, 0x1f, 0x7c, 0x28, 0xe1, 0x94, 0x6e, 0x9d, 0xdb, 0x40, 0x1a, 0x33, 0x4e,
	0xff, 0xe9, 0x84, 0x23, 0xe7, 0x9c, 0xc0, 0x17, 0xba, 0x0d, 0x19, 0xcd, 0xb6, 0xfa, 0x2c, 0x86,
	0xbf, 0x4e, 0x17, 0x28, 0xda, 0x9f, 0xb6, 0xd5, 0xa7, 0xc1, 0x59, 0x81, 0x82, 0x8d, 0xfb, 0x86,
	0xda, 0xc1, 0x3d, 0x12, 0x14, 0xad, 0xc3, 0xd2, 0x12, 0x9d, 0x7d, 0x7d, 0xe6, 0xe3, 0xf1, 0x88,
	0x85, 0x7d, 0x04, 0xf8, 0xb5, 0x0e, 0xd1, 0x3e, 0x80, 0x3a, 0xd0, 0x74, 0x57, 0xe9, 0x59, 0x1a,
	0x2e, 0x2d, 0x9f, 0xfb, 0xb0, 0x6a, 0x94, 0x79, 0x85, 0x10, 0xee, 0x58, 0x1a, 0xf6, 0xee, 0xbc,
	0x05, 0x00, 0xbd, 0x0f, 0x59, 0xba, 0x35, 0x2e, 0xfd, 0x15, 0xba, 0xb9, 0x79, 0x2e, 0xfd, 0x4c,
	0xcd, 0xb6, 0xfa, 0x4c, 0xe4, 0x54, 0x00, 0x4c, 0xce, 0x0e, 0xe4, 0xba, 0x1d, 0xc5, 0x77, 0xa7,
	0xb7, 0xa9, 0x6e, 0x7c, 0x32, 0xe3, 0x5a, 0x1e, 0x6d, 0x4c, 0x70, 0xb0, 0xd7, 0x44, 0x5c, 0x78,
	0xb4, 0x21, 0x60, 0x8e, 0x9c, 0xed, 0x76, 0xbc, 0x0f, 0x52, 0x72, 0xb3, 0x4e, 0x39, 0x37, 0xe8,
	0x72, 0xb0, 0xe4, 0x66, 0x23, 0xcc, 0xa4, 0x9b, 0xc0, 0x5b, 0xea, 0x0a, 0x2d, 0x57, 0xd9, 0x99,
	0xdd, 0x99, 0x3d, 0xef, 0x2a, 0x30, 0xea, 0x8a, 0xd3, 0x3a, 0xa4, 0x07, 0xdb, 0x81, 0x9c, 0x35,
	0x70, 0x0f, 0xac, 0x81, 0xa9, 0x29, 0x87, 0xc7, 0x4e, 0xe9, 0x0d, 0xba, 0xdb, 0x0b, 0x35, 0x4e,
	0xbd, 0xdd, 0xb5, 0x38, 0xa3, 0xcd, 0x27, 0x8e, 0x9c, 0x15, 0x5c, 0x37, 0x8f, 0x1d, 0xf4, 0x23,
	0xc8, 0xea, 0xa6, 0x3f, 0xc7, 0xdd, 0x8b, 0xcf, 0x81, 0x44, 0xcd, 0xd1, 0x30, 0xbd, 0x29, 0x80,
	0xf3, 0x24, 0x33, 0xfc, 0x24, 0x02, 0x2b, 0x5f, 0xd3, 0x70, 0x75, 0x4a, 0xef, 0x9c, 0x7b, 0x5f,
	0x3d, 0x43, 0xc7, 0xf5, 0xf5, 0xf3, 0x3a, 0xae, 0x0e, 0x2a, 0x43, 0xc6, 0xc5, 0xbd, 0xbe, 0x65,
	0xab, 0xf6, 0xb0, 0xf4, 0x56, 0xf0, 0x09, 0x82, 0x07, 0x46, 0x3f, 0x84, 0xe2, 0x68, 0x4b, 0xec,
	0xde, 0x15, 0x5a, 0x62, 0x72, 0x21, 0xdc, 0xfe, 0x43, 0x6b, 0xb4, 0x08, 0x61, 0x37, 0x3d, 0x8a,
	0x6a, 0x18, 0xca, 0xc1, 0xb0, 0xf4, 0x6e, 0xb0, 0x1d, 0xe1, 0x8d, 0x56, 0x0c, 0xa3, 0x3a, 0x5c,
	0xfc, 0x45, 0x04, 0xe6, 0xc7, 0xe2, 0x36, 0xfa, 0x21, 0xa4, 0x4c, 0x4b, 0x0b, 0x3c, 0x0e, 0xa9,
	0x73, 0xf9, 0x27, 0x9b, 0x96, 0xc6, 0xde, 0x86, 0x7c, 0xd0, 0xd5, 0xdd, 0xa3, 0xc1, 0xc1, 0x5a,
	0xc7, 0xea, 0xdd, 0xf7, 0x56, 0xae, 0x1d, 0xf8, 0x7f, 0xdf, 0xef, 0x1f, 0x77, 0xef, 0xd3, 0xbf,
	0xfa, 0x07, 0x6b, 0x8c, 0x4c, 0x4e, 0x12, 0xae, 0x0d, 0x0d, 0xbd, 0x07, 0x45, 0xfc, 0xb2, 0xaf,
	0xdb, 0x81, 0xda, 0x21, 0x1a, 0xf0, 0x3b, 0x05, 0x7f, 0x90, 0x28, 0x29, 0xbf, 0x86, 0xff, 0x55,
	0x14, 0x8a, 0x23, 0xe1, 0x90, 0xd4, 0x3d, 0xb4, 0x45, 0x15, 0xaa, 0x7b, 0x08, 0xe4, 0x9c, 0xb7,
	0x1e, 0xc1, 0xb7, 0x8a, 0xb1, 0xab, 0xbe, 0x55, 0x0c, 0x3f, 0x2c, 0x4a, 0x5c, 0xe0, 0x61, 0xd1,
	0x47, 0x70, 0x43, 0x77, 0x14, 0xd3, 0x32, 0xc5, 0x05, 0x83, 0xd7, 0x74, 0x09, 0xbe, 0xec, 0xbb,
	0xa6, 0x3b, 0x4d, 0xcb, 0x64, 0x57, 0x0b, 0xde, 0xae, 0xfd, 0x47, 0x80, 0xa9, 0xf1, 0x47, 0x80,
	0x5e, 0x8f, 0x3e, 0x2e, 0x25, 0x16, 0xff, 0x2d, 0x02, 0x99, 0xe0, 0x6b, 0xfc, 0x68, 0xb8, 0x73,
	0x38, 0x56, 0x0b, 0x5e, 0xf2, 0x91, 0x4f, 0x58, 0x0a, 0xb1, 0x0b, 0x48, 0xe1, 0x36, 0x24, 0x0e,
	0x86, 0xa2, 0x46, 0x4b, 0x57, 0x73, 0x7c, 0xb6, 0x78, 0x95, 0xd4, 0x03, 0xf1, 0x83, 0xa1, 0x78,
	0x30, 0xb5, 0xf8, 0xa7, 0x90, 0x0d, 0xc4, 0xdd, 0xd1, 0xce, 0x44, 0xe4, 0x12, 0x9d, 0x89, 0x37,
	0x20, 0xc9, 0xc3, 0x02, 0xd3, 0xbd, 0x3c, 0xa7, 0x4e, 0xb0, 0x90, 0x90, 0xf8, 0x92, 0x84, 0x03,
	0x3e, 0xfb, 0xff, 0xc4, 0x20, 0x17, 0x8c, 0xa0, 0xc4, 0xd6, 0x75, 0xb3, 0x63, 0xd3, 0xf0, 0x45,
	0x67, 0x8f, 0x79, 0xcf, 0x8d, 0x04, 0x98, 0xc4, 0xd5, 0x9e, 0x6e, 0x2a, 0xf4, 0xa9, 0x4a, 0x48,
	0xbf, 0xd3, 0x3d, 0xdd, 0x7c, 0x4a, 0xa0, 0x14, 0x45, 0x7d, 0xc9, 0x51, 0x62, 0x21, 0x14, 0xf5,
	0x25, 0x43, 0x59, 0xa4, 0xa9, 0xaa, 0xed, 0x52, 0x09, 0xc5, 0x02, 0x29, 0xa8, 0xed, 0x06, 0x5f,
	0x1d, 0x26, 0x26, 0xbd, 0x3a, 0x34, 0xa1, 0xe0, 0xe7, 0x0c, 0x27, 0x26, 0xb6, 0xf9, 0x75, 0x43,
	0xe5, 0x12, 0x49, 0x83, 0xff, 0x41, 0x18, 0x89, 0x28, 0xee, 0x04, 0x81, 0x24, 0x2b, 0xed, 0xa8,
	0x9d, 0x23, 0xac, 0x38, 0xfa, 0x8f, 0x59, 0x3b, 0xc0, 0x13, 0x0b, 0x85, 0xef, 0xe9, 0x3f, 0xc6,
	0x8b, 0x7f, 0x17, 0x81, 0x7c, 0x88, 0x17, 0x6a, 0x40, 0x91, 0xae, 0x6e, 0xac, 0xbd, 0x7d, 0xdb,
	0x7b, 0x9f, 0x4f, 0x86, 0x27, 0x16, 0xb3, 0x79, 0x2b, 0x30, 0xa4, 0x91, 0x3c, 0x94, 0xb1, 0xf2,
	0x5e, 0xb7, 0x85, 0xd5, 0x38, 0x47, 0x39, 0x85, 0x9f, 0xb8, 0xe5, 0x2c, 0x1f, 0xa6, 0x05, 0x9b,
	0xf1, 0x8b, 0x26, 0x64, 0x03, 0x99, 0xcb, 0x0c, 0xf6, 0xf3, 0x6d, 0x88, 0x7b, 0xde, 0x6c, 0xd6,
	0x2e, 0xb2, 0xeb, 0xbb, 0xb8, 0x9f, 0x45, 0x60, 0x61, 0x52, 0x06, 0x11, 0xb2, 0x4b, 0xa6, 0x6d,
	0x33, 0xd9, 0xe5, 0x9d, 0x60, 0x66, 0xc7, 0x34, 0x50, 0xbc, 0x8a, 0xf0, 0x73, 0xbb, 0x37, 0x3d,
	0x3b, 0x60, 0x0a, 0x58, 0x0c, 0xd9, 0x01, 0xa9, 0xe0, 0x82, 0x96, 0xf0, 0xdb, 0x18, 0x14, 0x46,
	0x6e, 0x5f, 0x9e, 0x42, 0xb2, 0x6b, 0x58, 0x07, 0xaa, 0xc1, 0xbb, 0xd6, 0xdf, 0xb9, 0x54, 0x28,
	0x5b, 0x7b, 0x44, 0x79, 0x6c, 0xcd, 0xc9, 0x9c, 0x1b, 0x72, 0x60, 0x3e, 0x78, 0xcd, 0xc2, 0x7e,
	0x48, 0xc4, 0x24, 0x5b, 0xbf, 0xdc, 0x14, 0xfe, 0x3d, 0x0c, 0x45, 0xdc, 0x9a, 0x93, 0x8b, 0x76,
	0x18, 0x84, 0x7a, 0x50, 0x1c, 0xb9, 0xdb, 0xe1, 0x57, 0x02, 0x1b, 0x57, 0x9d, 0x52, 0xb6, 0x4e,
	0xb6, 0x68, 0xde, 0x1b, 0x00, 0x2c, 0xfe, 0x11, 0x14, 0x47, 0x16, 0x45, 0xce, 0x83, 0xe1, 0xf0,
	0xa8, 0x56, 0x20, 0x3e, 0x8c, 0x21, 0x35, 0xd5, 0x1e, 0x96, 0xf9, 0x28, 0x3f, 0x8f, 0xbb, 0x90,
	0x0f, 0x4d, 0x81, 0x0a, 0x10, 0x55, 0xd9, 0x13, 0xc2, 0x8c, 0x1c, 0x55, 0xf9, 0xe3, 0xc3, 0xc5,
	0x02, 0x24, 0x99, 0x7c, 0x83, 0xfa, 0x5d, 0x05, 0x48, 0x8b, 0xfc, 0xa1, 0xbc, 0x0a, 0x19, 0x2f,
	0x91, 0x46, 0x39, 0x48, 0xd7, 0x1a, 0x7b, 0x95, 0xea, 0x76, 0xbd, 0x26, 0xcd, 0xa1, 0x3c, 0x64,
	0xe4, 0x7a, 0xa5, 0x46, 0x7b, 0xae, 0x52, 0xe4, 0xe3, 0xf4, 0x9f, 0xff, 0x6c, 0x39, 0xc2, 0x83,
	0x4c, 0x52, 0x4a, 0x3d, 0x8e, 0xa7, 0x91, 0x74, 0xad, 0xfc, 0xbf, 0x19, 0x40, 0x35, 0xd5, 0x55,
	0x89, 0x50, 0x2e, 0xd0, 0x99, 0x8c, 0x9e, 0x63, 0x4d, 0x13, 0x9b, 0x8c, 0xf1, 0xab, 0x34, 0x19,
	0x2f, 0xd5, 0xeb, 0x1c, 0xef, 0x4c, 0x26, 0xaf, 0xd0, 0x99, 0x0c, 0xf7, 0x7d, 0x62, 0x57, 0xea,
	0xfb, 0x3c, 0x85, 0x14, 0xab, 0x32, 0xd9, 0x1b, 0xb3, 0xe9, 0x6d, 0x85, 0xf1, 0x83, 0xe1, 0xdd,
	0x1a, 0xa7, 0x6e, 0xba, 0xf6, 0xd0, 0x7b, 0x0f, 0xc3, 0x60, 0x7e, 0x7b, 0x24, 0xfd, 0x2a, 0xdb,
	0x23, 0x99, 0xe9, 0xed, 0x91, 0x1f, 0x00, 0xb7, 0x0b, 0x91, 0x14, 0xc3, 0xb9, 0x4f, 0x43, 0x26,
	0x6c, 0x87, 0x19, 0x01, 0xcf, 0x8a, 0x73, 0x76, 0xe0, 0x0b, 0xfd, 0x08, 0x90, 0xb8, 0x97, 0x0d,
	0x48, 0x9e, 0x5d, 0xe9, 0xbc, 0x3f, 0x75, 0x6b, 0x94, 0x60, 0xd2, 0x01, 0x88, 0xf7, 0xe0, 0xde,
	0x98, 0xb3, 0xd8, 0x06, 0xe0, 0x0d, 0x5e, 0xf3, 0xd0, 0x9a, 0x21, 0x4c, 0x2c, 0x41, 0x8a, 0xb8,
	0xdf, 0x3e, 0x66, 0xfa, 0xef, 0xc5, 0x6d, 0x0e, 0xe4, 0x36, 0xdb, 0x87, 0x5c, 0xf0, 0x90, 0x90,
	0x04, 0xb1, 0x63, 0x3c, 0xe4, 0xa6, 0x4d, 0xfe, 0x44, 0x8f, 0x21, 0xe1, 0x67, 0x17, 0xd3, 0x1f,
	0x8a, 0x4f, 0x3d, 0x7d, 0xb2, 0x5c, 0x99, 0xb1, 0xf8, 0x38, 0xfa, 0x90, 0xa6, 0xd8, 0xb9, 0xa0,
	0x20, 0x51, 0x13, 0xf2, 0xce, 0xc0, 0x7e, 0xa1, 0xbf, 0x50, 0x0d, 0xa5, 0x6b, 0xa9, 0x06, 0x9d,
	0xa8, 0xb0, 0x7e, 0x67, 0xda, 0x43, 0x2b, 0x8e, 0xfb, 0xc8, 0x52, 0x0d, 0xd1, 0x1a, 0x71, 0x02,
	0x30, 0xf4, 0x91, 0x77, 0x21, 0xc8, 0x6f, 0xd0, 0xf9, 0xe5, 0x32, 0xe2, 0x66, 0x18, 0xf4, 0x73,
	0xa2, 0xfb, 0xcb, 0x40, 0x24, 0xb2, 0x73, 0x15, 0xc1, 0xf4, 0x11, 0xb4, 0x68, 0xeb, 0x7b, 0x91,
	0x9d, 0xe1, 0xd5, 0xcd, 0x41, 0xcf, 0x8f, 0xec, 0xb6, 0x0f, 0xd3, 0xd0, 0x16, 0x64, 0xbc, 0x58,
	0x4e, 0xcd, 0xbf, 0xb0, 0xfe, 0xc6, 0x39, 0x12, 0xdb, 0x1d, 0xe9, 0x58, 0xf8, 0xc4, 0x5e, 0x8a,
	0x1d, 0x91, 0xa2, 0xbe, 0x37, 0x2c, 0xff, 0x36, 0x07, 0x85, 0xf6, 0xb0, 0x3f, 0xc9, 0xfb, 0xc5,
	0xa6, 0x78, 0xbf, 0xf8, 0x6c, 0xf7, 0x32, 0x99, 0xab, 0xdd, 0xcb, 0xc0, 0xab, 0xbd, 0x97, 0xc9,
	0xbe, 0x32, 0xef, 0x57, 0xb8, 0x92, 0xf7, 0x7b, 0x65, 0xb7, 0x74, 0xd1, 0x4b, 0xdc, 0xd2, 0x7d,
	0x17, 0xf2, 0xaa, 0x6d, 0xab, 0x43, 0xfe, 0x3b, 0x1c, 0x8d, 0xba, 0xca, 0x3c, 0x3b, 0xa3, 0xb3,
	0xd3, 0xe5, 0x6c, 0x85, 0x0c, 0xd2, 0x9f, 0xde, 0x08, 0x0e, 0x59, 0xd5, 0x03, 0x69, 0xbe, 0x87,
	0xcd, 0xbf, 0x4a, 0x0f, 0x5b, 0x9c, 0xee, 0x61, 0x6b, 0x10, 0xa7, 0x3f, 0xf4, 0x61, 0x7a, 0x3f,
	0x4d, 0xe4, 0x61, 0xf5, 0x5d, 0x0b, 0xfc, 0xd6, 0x87, 0x52, 0xa3, 0x1f, 0xc1, 0xa2, 0x78, 0x4d,
	0x4b, 0xf4, 0xc1, 0xbf, 0x45, 0x0d, 0xfc, 0x8c, 0xaa, 0x7c, 0x76, 0xba, 0x5c, 0x92, 0x7d, 0x2c,
	0x9f, 0x1f, 0xab, 0x03, 0x89, 0x2c, 0x4a, 0xf6, 0xc4, 0x71, 0xcd, 0x41, 0x5f, 0x40, 0x8e, 0xda,
	0x77, 0x0f, 0xf7, 0x0e, 0xb0, 0x2d, 0x42, 0xed, 0x83, 0xd9, 0xd6, 0x4b, 0x0c, 0x7d, 0x87, 0x12,
	0x8a, 0xde, 0x19, 0xf6, 0x20, 0x0e, 0x7a, 0x00, 0x09, 0xd5, 0xd0, 0x69, 0xac, 0xfc, 0xba, 0xdf,
	0xf5, 0x31, 0x44, 0xf6, 0x0a, 0x39, 0x18, 0x96, 0xa4, 0xf3, 0xbb, 0x9e, 0xe1, 0xd5, 0x4c, 0x0f,
	0x49, 0x8b, 0x3f, 0x8d, 0x01, 0xf8, 0x8b, 0x45, 0xdf, 0x86, 0x9b, 0xfd, 0xa3, 0xa1, 0xa3, 0x77,
	0x54, 0x43, 0xb1, 0x71, 0xdf, 0xc6, 0x0e, 0x36, 0x59, 0xe6, 0x4f, 0xf5, 0x3a, 0x27, 0xdf, 0x10,
	0xc3, 0x72, 0x68, 0x14, 0x7d, 0x02, 0x37, 0x0c, 0xab, 0x3b, 0x89, 0x2e, 0xd8, 0xf7, 0xb8, 0xce,
	0x71, 0x46, 0x88, 0x55, 0x52, 0xad, 0xf5, 0xd5, 0x03, 0xdd, 0xf0, 0x5b, 0x21, 0x9f, 0x5c, 0x54,
	0xd0, 0x6b, 0x1b, 0x1e, 0x0b, 0xf1, 0xac, 0xc6, 0x67, 0x8a, 0x7e, 0x38, 0xfe, 0x32, 0xe1, 0xe3,
	0x0b, 0xcf, 0x30, 0xfd, 0x81, 0x42, 0xf9, 0x0d, 0x00, 0x7f, 0x7e, 0x7a, 0xe1, 0xbf, 0xbd, 0xed,
	0x27, 0xac, 0xfc, 0xe9, 0x40, 0xf9, 0xde, 0xd7, 0xbc, 0x0f, 0x00, 0x48, 0xca, 0xf5, 0x9d, 0xd6,
	0xd3, 0xba, 0x78, 0x21, 0xb0, 0xd8, 0x1a, 0x89, 0x83, 0xe3, 0x71, 0x2b, 0x32, 0x63, 0xdc, 0xe2,
	0x97, 0xf6, 0xef, 0x43, 0x9c, 0x18, 0x13, 0x99, 0xbd, 0xde, 0xdc, 0xdf, 0x91, 0xe6, 0x50, 0x06,
	0x12, 0x95, 0xed, 0x46, 0x65, 0x4f, 0x8a, 0xa0, 0x05, 0x90, 0x76, 0xf6, 0xb7, 0xdb, 0x0d, 0xb9,
	0xfe, 0xa8, 0xd1, 0x6a, 0x2a, 0x14, 0x21, 0x18, 0x58, 0xfe, 0x36, 0x0e, 0x12, 0x73, 0x3c, 0x13,
	0x42, 0x4b, 0xf4, 0x12, 0x57, 0xfe, 0x7f, 0xf0, 0xfc, 0x6e, 0x62, 0x58, 0x4a, 0xbc, 0xa2, 0x4c,
	0x3e, 0x79, 0x85, 0x4c, 0x3e, 0xf5, 0xaa, 0xde, 0x18, 0xcc, 0x1a, 0x7f, 0xc2, 0x01, 0x30, 0x7e,
	0x95, 0x00, 0x18, 0xd0, 0x90, 0x9f, 0x47, 0x01, 0x02, 0xba, 0xf1, 0xbd, 0xe0, 0x3f, 0xbb, 0x31,
	0xfd, 0x96, 0x7b, 0xa4, 0x74, 0xdd, 0x9a, 0x13, 0xff, 0x28, 0xc7, 0x23, 0x48, 0x6b, 0x3c, 0x67,
	0xe4, 0xa9, 0xe5, 0xdb, 0x33, 0xa7, 0x96, 0x5b, 0x73, 0xb2, 0x47, 0x8c, 0x3e, 0x09, 0xfd, 0x92,
	0xfa, 0xee, 0x4c, 0xa6, 0xbf, 0x25, 0x7e, 0x5e, 0x50, 0x81, 0x24, 0x8b, 0xd1, 0x5c, 0x4c, 0x53,
	0x7f, 0x9d, 0x3a, 0x62, 0x1a, 0x5b, 0x73, 0x32, 0x27, 0xe4, 0x65, 0x6e, 0x0a, 0x12, 0x03, 0x53,
	0xb7, 0xcc, 0x7b, 0x72, 0xf0, 0x49, 0xbc, 0xe8, 0xe9, 0x12, 0x6f, 0x41, 0xff, 0x56, 0x5d, 0xac,
	0xb1, 0x97, 0x47, 0xfb, 0xe6, 0x0b, 0x0f, 0x10, 0x41, 0x05, 0x00, 0x3e, 0xae, 0x9b, 0x5d, 0x29,
	0x4a, 0x8b, 0x63, 0x92, 0xa8, 0x93, 0xaf, 0xd8, 0xbd, 0xef, 0x82, 0x34, 0xfa, 0xf3, 0xd8, 0x80,
	0x8f, 0x99, 0x87, 0xfc, 0xce, 0xd3, 0x8d, 0x8d, 0x76, 0x63, 0xa7, 0xbe, 0xd7, 0xae, 0xec, 0xec,
	0xb2, 0xb7, 0xd6, 0x6d, 0x52, 0x59, 0xb7, 0x1a, 0x35, 0x29, 0x7a, 0xef, 0x00, 0x6e, 0x4e, 0xf9,
	0x3d, 0x35, 0xba, 0x09, 0xd7, 0x9a, 0xad, 0xb6, 0xd2, 0xa8, 0xd5, 0x9b, 0xed, 0x46, 0xfb, 0x0b,
	0x65, 0xa3, 0xb5, 0xbd, 0xbf, 0xd3, 0x94, 0xe6, 0x88, 0xbf, 0x78, 0x54, 0x6f, 0xd6, 0xe5, 0x4a,
	0xbb, 0x5e, 0x53, 0x2a, 0xdb, 0xcf, 0x2a, 0x5f, 0x10, 0x2f, 0x52, 0x82, 0x05, 0x1f, 0x5a, 0xfd,
	0xc2, 0xfb, 0x37, 0x36, 0xa2, 0xf7, 0xbe, 0x0b, 0xc5, 0x11, 0x53, 0x26, 0x2e, 0x6f, 0x77, 0xbf,
	0xba, 0xdd, 0xd8, 0x98, 0xf8, 0x4e, 0x0a, 0x65, 0x21, 0xd5, 0xda, 0xdc, 0xdc, 0x6e, 0x34, 0xeb,
	0x52, 0xec, 0xde, 0x87, 0x90, 0x0b, 0x26, 0xf6, 0x48, 0x82, 0xdc, 0xf7, 0x5b, 0xcd, 0xba, 0xb2,
	0x59, 0x69, 0x6c, 0xef, 0xcb, 0x64, 0x97, 0x08, 0x0a, 0xdc, 0x77, 0x09, 0x58, 0xe4, 0xde, 0xbb,
	0x90, 0x0f, 0x65, 0xd1, 0x84, 0xa7, 0x58, 0xd2, 0x1c, 0x91, 0xa9, 0xf8, 0x37, 0x42, 0xea, 0x35,
	0x29, 0x52, 0x5d, 0xfd, 0xf5, 0x7f, 0x2d, 0xcd, 0xfd, 0xfa, 0x6c, 0x29, 0xf2, 0x9b, 0xb3, 0xa5,
	0xc8, 0xef, 0xce, 0x96, 0x22, 0xff, 0x79, 0xb6, 0x14, 0xf9, 0xab, 0xdf, 0x2f, 0xcd, 0xfd, 0xe6,
	0xf7, 0x4b, 0x73, 0xbf, 0xfb, 0xfd, 0xd2, 0xdc, 0xf7, 0x93, 0xec, 0x9f, 0xb0, 0xf9, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x66, 0xb7, 0x5a, 0x27, 0x2d, 0x47, 0x00, 0x00,
}

func (this *ForeignKeyReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForeignKeyReference)
	if !ok {
		that2, ok := that.(ForeignKeyReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Table != that1.Table {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Validity != that1.Validity {
		return false
	}
	if this.SharedPrefixLen != that1.SharedPrefixLen {
		return false
	}
	if this.OnDelete != that1.OnDelete {
		return false
	}
	if this.OnUpdate != that1.OnUpdate {
		return false
	}
	if this.Match != that1.Match {
		return false
	}
	return true
}
func (this *ForeignKeyConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForeignKeyConstraint)
	if !ok {
		that2, ok := that.(ForeignKeyConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OriginTableID != that1.OriginTableID {
		return false
	}
	if len(this.OriginColumnIDs) != len(that1.OriginColumnIDs) {
		return false
	}
	for i := range this.OriginColumnIDs {
		if this.OriginColumnIDs[i] != that1.OriginColumnIDs[i] {
			return false
		}
	}
	if len(this.ReferencedColumnIDs) != len(that1.ReferencedColumnIDs) {
		return false
	}
	for i := range this.ReferencedColumnIDs {
		if this.ReferencedColumnIDs[i] != that1.ReferencedColumnIDs[i] {
			return false
		}
	}
	if this.ReferencedTableID != that1.ReferencedTableID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Validity != that1.Validity {
		return false
	}
	if this.OnDelete != that1.OnDelete {
		return false
	}
	if this.OnUpdate != that1.OnUpdate {
		return false
	}
	if this.Match != that1.Match {
		return false
	}
	return true
}
func (this *UniqueWithoutIndexConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniqueWithoutIndexConstraint)
	if !ok {
		that2, ok := that.(UniqueWithoutIndexConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Validity != that1.Validity {
		return false
	}
	if this.Predicate != that1.Predicate {
		return false
	}
	return true
}
func (this *ColumnDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnDescriptor)
	if !ok {
		that2, ok := that.(ColumnDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if this.Nullable != that1.Nullable {
		return false
	}
	if this.DefaultExpr != nil && that1.DefaultExpr != nil {
		if *this.DefaultExpr != *that1.DefaultExpr {
			return false
		}
	} else if this.DefaultExpr != nil {
		return false
	} else if that1.DefaultExpr != nil {
		return false
	}
	if this.OnUpdateExpr != nil && that1.OnUpdateExpr != nil {
		if *this.OnUpdateExpr != *that1.OnUpdateExpr {
			return false
		}
	} else if this.OnUpdateExpr != nil {
		return false
	} else if that1.OnUpdateExpr != nil {
		return false
	}
	if this.Hidden != that1.Hidden {
		return false
	}
	if this.Inaccessible != that1.Inaccessible {
		return false
	}
	if this.GeneratedAsIdentityType != that1.GeneratedAsIdentityType {
		return false
	}
	if this.GeneratedAsIdentitySequenceOption != nil && that1.GeneratedAsIdentitySequenceOption != nil {
		if *this.GeneratedAsIdentitySequenceOption != *that1.GeneratedAsIdentitySequenceOption {
			return false
		}
	} else if this.GeneratedAsIdentitySequenceOption != nil {
		return false
	} else if that1.GeneratedAsIdentitySequenceOption != nil {
		return false
	}
	if len(this.UsesSequenceIds) != len(that1.UsesSequenceIds) {
		return false
	}
	for i := range this.UsesSequenceIds {
		if this.UsesSequenceIds[i] != that1.UsesSequenceIds[i] {
			return false
		}
	}
	if len(this.OwnsSequenceIds) != len(that1.OwnsSequenceIds) {
		return false
	}
	for i := range this.OwnsSequenceIds {
		if this.OwnsSequenceIds[i] != that1.OwnsSequenceIds[i] {
			return false
		}
	}
	if this.ComputeExpr != nil && that1.ComputeExpr != nil {
		if *this.ComputeExpr != *that1.ComputeExpr {
			return false
		}
	} else if this.ComputeExpr != nil {
		return false
	} else if that1.ComputeExpr != nil {
		return false
	}
	if this.Virtual != that1.Virtual {
		return false
	}
	if this.PGAttributeNum != that1.PGAttributeNum {
		return false
	}
	if this.AlterColumnTypeInProgress != that1.AlterColumnTypeInProgress {
		return false
	}
	if this.SystemColumnKind != that1.SystemColumnKind {
		return false
	}
	return true
}
func (this *ColumnFamilyDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnFamilyDescriptor)
	if !ok {
		that2, ok := that.(ColumnFamilyDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if len(this.ColumnNames) != len(that1.ColumnNames) {
		return false
	}
	for i := range this.ColumnNames {
		if this.ColumnNames[i] != that1.ColumnNames[i] {
			return false
		}
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	if this.DefaultColumnID != that1.DefaultColumnID {
		return false
	}
	return true
}
func (this *InterleaveDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterleaveDescriptor)
	if !ok {
		that2, ok := that.(InterleaveDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ancestors) != len(that1.Ancestors) {
		return false
	}
	for i := range this.Ancestors {
		if !this.Ancestors[i].Equal(&that1.Ancestors[i]) {
			return false
		}
	}
	return true
}
func (this *InterleaveDescriptor_Ancestor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterleaveDescriptor_Ancestor)
	if !ok {
		that2, ok := that.(InterleaveDescriptor_Ancestor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if this.SharedPrefixLen != that1.SharedPrefixLen {
		return false
	}
	return true
}
func (this *ShardedDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShardedDescriptor)
	if !ok {
		that2, ok := that.(ShardedDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSharded != that1.IsSharded {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ShardBuckets != that1.ShardBuckets {
		return false
	}
	if len(this.ColumnNames) != len(that1.ColumnNames) {
		return false
	}
	for i := range this.ColumnNames {
		if this.ColumnNames[i] != that1.ColumnNames[i] {
			return false
		}
	}
	return true
}
func (this *PartitioningDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitioningDescriptor)
	if !ok {
		that2, ok := that.(PartitioningDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumColumns != that1.NumColumns {
		return false
	}
	if this.NumImplicitColumns != that1.NumImplicitColumns {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(&that1.List[i]) {
			return false
		}
	}
	if len(this.Range) != len(that1.Range) {
		return false
	}
	for i := range this.Range {
		if !this.Range[i].Equal(&that1.Range[i]) {
			return false
		}
	}
	return true
}
func (this *PartitioningDescriptor_List) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitioningDescriptor_List)
	if !ok {
		that2, ok := that.(PartitioningDescriptor_List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !bytes.Equal(this.Values[i], that1.Values[i]) {
			return false
		}
	}
	if !this.Subpartitioning.Equal(&that1.Subpartitioning) {
		return false
	}
	return true
}
func (this *PartitioningDescriptor_Range) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitioningDescriptor_Range)
	if !ok {
		that2, ok := that.(PartitioningDescriptor_Range)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.FromInclusive, that1.FromInclusive) {
		return false
	}
	if !bytes.Equal(this.ToExclusive, that1.ToExclusive) {
		return false
	}
	return true
}
func (this *IndexDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndexDescriptor)
	if !ok {
		that2, ok := that.(IndexDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Unique != that1.Unique {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.KeyColumnNames) != len(that1.KeyColumnNames) {
		return false
	}
	for i := range this.KeyColumnNames {
		if this.KeyColumnNames[i] != that1.KeyColumnNames[i] {
			return false
		}
	}
	if len(this.KeyColumnDirections) != len(that1.KeyColumnDirections) {
		return false
	}
	for i := range this.KeyColumnDirections {
		if this.KeyColumnDirections[i] != that1.KeyColumnDirections[i] {
			return false
		}
	}
	if len(this.StoreColumnNames) != len(that1.StoreColumnNames) {
		return false
	}
	for i := range this.StoreColumnNames {
		if this.StoreColumnNames[i] != that1.StoreColumnNames[i] {
			return false
		}
	}
	if len(this.KeyColumnIDs) != len(that1.KeyColumnIDs) {
		return false
	}
	for i := range this.KeyColumnIDs {
		if this.KeyColumnIDs[i] != that1.KeyColumnIDs[i] {
			return false
		}
	}
	if len(this.KeySuffixColumnIDs) != len(that1.KeySuffixColumnIDs) {
		return false
	}
	for i := range this.KeySuffixColumnIDs {
		if this.KeySuffixColumnIDs[i] != that1.KeySuffixColumnIDs[i] {
			return false
		}
	}
	if len(this.StoreColumnIDs) != len(that1.StoreColumnIDs) {
		return false
	}
	for i := range this.StoreColumnIDs {
		if this.StoreColumnIDs[i] != that1.StoreColumnIDs[i] {
			return false
		}
	}
	if len(this.CompositeColumnIDs) != len(that1.CompositeColumnIDs) {
		return false
	}
	for i := range this.CompositeColumnIDs {
		if this.CompositeColumnIDs[i] != that1.CompositeColumnIDs[i] {
			return false
		}
	}
	if !this.ForeignKey.Equal(&that1.ForeignKey) {
		return false
	}
	if len(this.ReferencedBy) != len(that1.ReferencedBy) {
		return false
	}
	for i := range this.ReferencedBy {
		if !this.ReferencedBy[i].Equal(&that1.ReferencedBy[i]) {
			return false
		}
	}
	if !this.Interleave.Equal(&that1.Interleave) {
		return false
	}
	if len(this.InterleavedBy) != len(that1.InterleavedBy) {
		return false
	}
	for i := range this.InterleavedBy {
		if !this.InterleavedBy[i].Equal(&that1.InterleavedBy[i]) {
			return false
		}
	}
	if !this.Partitioning.Equal(&that1.Partitioning) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.CreatedExplicitly != that1.CreatedExplicitly {
		return false
	}
	if this.EncodingType != that1.EncodingType {
		return false
	}
	if !this.Sharded.Equal(&that1.Sharded) {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if !this.GeoConfig.Equal(&that1.GeoConfig) {
		return false
	}
	if this.Predicate != that1.Predicate {
		return false
	}
	return true
}
func (this *ConstraintToUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConstraintToUpdate)
	if !ok {
		that2, ok := that.(ConstraintToUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConstraintType != that1.ConstraintType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Check.Equal(&that1.Check) {
		return false
	}
	if !this.ForeignKey.Equal(&that1.ForeignKey) {
		return false
	}
	if this.NotNullColumn != that1.NotNullColumn {
		return false
	}
	if !this.UniqueWithoutIndexConstraint.Equal(&that1.UniqueWithoutIndexConstraint) {
		return false
	}
	return true
}
func (this *PrimaryKeySwap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryKeySwap)
	if !ok {
		that2, ok := that.(PrimaryKeySwap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OldPrimaryIndexId != that1.OldPrimaryIndexId {
		return false
	}
	if this.NewPrimaryIndexId != that1.NewPrimaryIndexId {
		return false
	}
	if len(this.OldIndexes) != len(that1.OldIndexes) {
		return false
	}
	for i := range this.OldIndexes {
		if this.OldIndexes[i] != that1.OldIndexes[i] {
			return false
		}
	}
	if len(this.NewIndexes) != len(that1.NewIndexes) {
		return false
	}
	for i := range this.NewIndexes {
		if this.NewIndexes[i] != that1.NewIndexes[i] {
			return false
		}
	}
	if this.NewPrimaryIndexName != that1.NewPrimaryIndexName {
		return false
	}
	if !this.LocalityConfigSwap.Equal(that1.LocalityConfigSwap) {
		return false
	}
	return true
}
func (this *PrimaryKeySwap_LocalityConfigSwap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryKeySwap_LocalityConfigSwap)
	if !ok {
		that2, ok := that.(PrimaryKeySwap_LocalityConfigSwap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OldLocalityConfig.Equal(&that1.OldLocalityConfig) {
		return false
	}
	if !this.NewLocalityConfig.Equal(&that1.NewLocalityConfig) {
		return false
	}
	if this.NewRegionalByRowColumnID != nil && that1.NewRegionalByRowColumnID != nil {
		if *this.NewRegionalByRowColumnID != *that1.NewRegionalByRowColumnID {
			return false
		}
	} else if this.NewRegionalByRowColumnID != nil {
		return false
	} else if that1.NewRegionalByRowColumnID != nil {
		return false
	}
	if this.NewRegionalByRowColumnDefaultExpr != nil && that1.NewRegionalByRowColumnDefaultExpr != nil {
		if *this.NewRegionalByRowColumnDefaultExpr != *that1.NewRegionalByRowColumnDefaultExpr {
			return false
		}
	} else if this.NewRegionalByRowColumnDefaultExpr != nil {
		return false
	} else if that1.NewRegionalByRowColumnDefaultExpr != nil {
		return false
	}
	return true
}
func (this *ComputedColumnSwap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputedColumnSwap)
	if !ok {
		that2, ok := that.(ComputedColumnSwap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewColumnId != that1.NewColumnId {
		return false
	}
	if this.OldColumnId != that1.OldColumnId {
		return false
	}
	if this.InverseExpr != that1.InverseExpr {
		return false
	}
	return true
}
func (this *MaterializedViewRefresh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaterializedViewRefresh)
	if !ok {
		that2, ok := that.(MaterializedViewRefresh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewPrimaryIndex.Equal(&that1.NewPrimaryIndex) {
		return false
	}
	if len(this.NewIndexes) != len(that1.NewIndexes) {
		return false
	}
	for i := range this.NewIndexes {
		if !this.NewIndexes[i].Equal(&that1.NewIndexes[i]) {
			return false
		}
	}
	if !this.AsOf.Equal(&that1.AsOf) {
		return false
	}
	if this.ShouldBackfill != that1.ShouldBackfill {
		return false
	}
	return true
}
func (this *DescriptorMutation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescriptorMutation)
	if !ok {
		that2, ok := that.(DescriptorMutation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Descriptor_ == nil {
		if this.Descriptor_ != nil {
			return false
		}
	} else if this.Descriptor_ == nil {
		return false
	} else if !this.Descriptor_.Equal(that1.Descriptor_) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	if this.MutationID != that1.MutationID {
		return false
	}
	if this.Rollback != that1.Rollback {
		return false
	}
	return true
}
func (this *DescriptorMutation_Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescriptorMutation_Column)
	if !ok {
		that2, ok := that.(DescriptorMutation_Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Column.Equal(that1.Column) {
		return false
	}
	return true
}
func (this *DescriptorMutation_Index) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescriptorMutation_Index)
	if !ok {
		that2, ok := that.(DescriptorMutation_Index)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Index.Equal(that1.Index) {
		return false
	}
	return true
}
func (this *DescriptorMutation_Constraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescriptorMutation_Constraint)
	if !ok {
		that2, ok := that.(DescriptorMutation_Constraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Constraint.Equal(that1.Constraint) {
		return false
	}
	return true
}
func (this *DescriptorMutation_PrimaryKeySwap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescriptorMutation_PrimaryKeySwap)
	if !ok {
		that2, ok := that.(DescriptorMutation_PrimaryKeySwap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrimaryKeySwap.Equal(that1.PrimaryKeySwap) {
		return false
	}
	return true
}
func (this *DescriptorMutation_ComputedColumnSwap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescriptorMutation_ComputedColumnSwap)
	if !ok {
		that2, ok := that.(DescriptorMutation_ComputedColumnSwap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ComputedColumnSwap.Equal(that1.ComputedColumnSwap) {
		return false
	}
	return true
}
func (this *DescriptorMutation_MaterializedViewRefresh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescriptorMutation_MaterializedViewRefresh)
	if !ok {
		that2, ok := that.(DescriptorMutation_MaterializedViewRefresh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaterializedViewRefresh.Equal(that1.MaterializedViewRefresh) {
		return false
	}
	return true
}
func (this *NameInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameInfo)
	if !ok {
		that2, ok := that.(NameInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	if this.ParentSchemaID != that1.ParentSchemaID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *TableDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor)
	if !ok {
		that2, ok := that.(TableDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.ModificationTime.Equal(&that1.ModificationTime) {
		return false
	}
	if len(this.DrainingNames) != len(that1.DrainingNames) {
		return false
	}
	for i := range this.DrainingNames {
		if !this.DrainingNames[i].Equal(&that1.DrainingNames[i]) {
			return false
		}
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	if this.UnexposedParentSchemaID != that1.UnexposedParentSchemaID {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(&that1.Columns[i]) {
			return false
		}
	}
	if this.NextColumnID != that1.NextColumnID {
		return false
	}
	if len(this.Families) != len(that1.Families) {
		return false
	}
	for i := range this.Families {
		if !this.Families[i].Equal(&that1.Families[i]) {
			return false
		}
	}
	if this.NextFamilyID != that1.NextFamilyID {
		return false
	}
	if !this.PrimaryIndex.Equal(&that1.PrimaryIndex) {
		return false
	}
	if len(this.Indexes) != len(that1.Indexes) {
		return false
	}
	for i := range this.Indexes {
		if !this.Indexes[i].Equal(&that1.Indexes[i]) {
			return false
		}
	}
	if this.NextIndexID != that1.NextIndexID {
		return false
	}
	if !this.Privileges.Equal(that1.Privileges) {
		return false
	}
	if len(this.Mutations) != len(that1.Mutations) {
		return false
	}
	for i := range this.Mutations {
		if !this.Mutations[i].Equal(&that1.Mutations[i]) {
			return false
		}
	}
	if !this.Lease.Equal(that1.Lease) {
		return false
	}
	if this.NextMutationID != that1.NextMutationID {
		return false
	}
	if this.FormatVersion != that1.FormatVersion {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.OfflineReason != that1.OfflineReason {
		return false
	}
	if len(this.Checks) != len(that1.Checks) {
		return false
	}
	for i := range this.Checks {
		if !this.Checks[i].Equal(that1.Checks[i]) {
			return false
		}
	}
	if this.ViewQuery != that1.ViewQuery {
		return false
	}
	if this.IsMaterializedView != that1.IsMaterializedView {
		return false
	}
	if len(this.DependsOn) != len(that1.DependsOn) {
		return false
	}
	for i := range this.DependsOn {
		if this.DependsOn[i] != that1.DependsOn[i] {
			return false
		}
	}
	if len(this.DependsOnTypes) != len(that1.DependsOnTypes) {
		return false
	}
	for i := range this.DependsOnTypes {
		if this.DependsOnTypes[i] != that1.DependsOnTypes[i] {
			return false
		}
	}
	if len(this.DependedOnBy) != len(that1.DependedOnBy) {
		return false
	}
	for i := range this.DependedOnBy {
		if !this.DependedOnBy[i].Equal(&that1.DependedOnBy[i]) {
			return false
		}
	}
	if len(this.MutationJobs) != len(that1.MutationJobs) {
		return false
	}
	for i := range this.MutationJobs {
		if !this.MutationJobs[i].Equal(&that1.MutationJobs[i]) {
			return false
		}
	}
	if this.NewSchemaChangeJobID != that1.NewSchemaChangeJobID {
		return false
	}
	if !this.SequenceOpts.Equal(that1.SequenceOpts) {
		return false
	}
	if this.DropTime != that1.DropTime {
		return false
	}
	if !this.ReplacementOf.Equal(&that1.ReplacementOf) {
		return false
	}
	if this.AuditMode != that1.AuditMode {
		return false
	}
	if this.DropJobID != that1.DropJobID {
		return false
	}
	if len(this.GCMutations) != len(that1.GCMutations) {
		return false
	}
	for i := range this.GCMutations {
		if !this.GCMutations[i].Equal(&that1.GCMutations[i]) {
			return false
		}
	}
	if this.CreateQuery != that1.CreateQuery {
		return false
	}
	if !this.CreateAsOfTime.Equal(&that1.CreateAsOfTime) {
		return false
	}
	if len(this.OutboundFKs) != len(that1.OutboundFKs) {
		return false
	}
	for i := range this.OutboundFKs {
		if !this.OutboundFKs[i].Equal(&that1.OutboundFKs[i]) {
			return false
		}
	}
	if len(this.InboundFKs) != len(that1.InboundFKs) {
		return false
	}
	for i := range this.InboundFKs {
		if !this.InboundFKs[i].Equal(&that1.InboundFKs[i]) {
			return false
		}
	}
	if len(this.UniqueWithoutIndexConstraints) != len(that1.UniqueWithoutIndexConstraints) {
		return false
	}
	for i := range this.UniqueWithoutIndexConstraints {
		if !this.UniqueWithoutIndexConstraints[i].Equal(&that1.UniqueWithoutIndexConstraints[i]) {
			return false
		}
	}
	if this.Temporary != that1.Temporary {
		return false
	}
	if !this.LocalityConfig.Equal(that1.LocalityConfig) {
		return false
	}
	if this.PartitionAllBy != that1.PartitionAllBy {
		return false
	}
	return true
}
func (this *TableDescriptor_SchemaChangeLease) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_SchemaChangeLease)
	if !ok {
		that2, ok := that.(TableDescriptor_SchemaChangeLease)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.ExpirationTime != that1.ExpirationTime {
		return false
	}
	return true
}
func (this *TableDescriptor_CheckConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_CheckConstraint)
	if !ok {
		that2, ok := that.(TableDescriptor_CheckConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Expr != that1.Expr {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Validity != that1.Validity {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	if this.IsNonNullConstraint != that1.IsNonNullConstraint {
		return false
	}
	if this.Hidden != that1.Hidden {
		return false
	}
	return true
}
func (this *TableDescriptor_Reference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_Reference)
	if !ok {
		that2, ok := that.(TableDescriptor_Reference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	if this.ByID != that1.ByID {
		return false
	}
	return true
}
func (this *TableDescriptor_MutationJob) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_MutationJob)
	if !ok {
		that2, ok := that.(TableDescriptor_MutationJob)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MutationID != that1.MutationID {
		return false
	}
	if this.JobID != that1.JobID {
		return false
	}
	return true
}
func (this *TableDescriptor_SequenceOpts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_SequenceOpts)
	if !ok {
		that2, ok := that.(TableDescriptor_SequenceOpts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Increment != that1.Increment {
		return false
	}
	if this.MinValue != that1.MinValue {
		return false
	}
	if this.MaxValue != that1.MaxValue {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.Virtual != that1.Virtual {
		return false
	}
	if !this.SequenceOwner.Equal(&that1.SequenceOwner) {
		return false
	}
	if this.CacheSize != that1.CacheSize {
		return false
	}
	return true
}
func (this *TableDescriptor_SequenceOpts_SequenceOwner) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_SequenceOpts_SequenceOwner)
	if !ok {
		that2, ok := that.(TableDescriptor_SequenceOpts_SequenceOwner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OwnerColumnID != that1.OwnerColumnID {
		return false
	}
	if this.OwnerTableID != that1.OwnerTableID {
		return false
	}
	return true
}
func (this *TableDescriptor_Replacement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_Replacement)
	if !ok {
		that2, ok := that.(TableDescriptor_Replacement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.Time.Equal(&that1.Time) {
		return false
	}
	return true
}
func (this *TableDescriptor_GCDescriptorMutation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_GCDescriptorMutation)
	if !ok {
		that2, ok := that.(TableDescriptor_GCDescriptorMutation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if this.DropTime != that1.DropTime {
		return false
	}
	if this.JobID != that1.JobID {
		return false
	}
	return true
}
func (this *TableDescriptor_LocalityConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_LocalityConfig)
	if !ok {
		that2, ok := that.(TableDescriptor_LocalityConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Locality == nil {
		if this.Locality != nil {
			return false
		}
	} else if this.Locality == nil {
		return false
	} else if !this.Locality.Equal(that1.Locality) {
		return false
	}
	return true
}
func (this *TableDescriptor_LocalityConfig_Global_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_LocalityConfig_Global_)
	if !ok {
		that2, ok := that.(TableDescriptor_LocalityConfig_Global_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Global.Equal(that1.Global) {
		return false
	}
	return true
}
func (this *TableDescriptor_LocalityConfig_RegionalByTable_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_LocalityConfig_RegionalByTable_)
	if !ok {
		that2, ok := that.(TableDescriptor_LocalityConfig_RegionalByTable_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegionalByTable.Equal(that1.RegionalByTable) {
		return false
	}
	return true
}
func (this *TableDescriptor_LocalityConfig_RegionalByRow_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_LocalityConfig_RegionalByRow_)
	if !ok {
		that2, ok := that.(TableDescriptor_LocalityConfig_RegionalByRow_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegionalByRow.Equal(that1.RegionalByRow) {
		return false
	}
	return true
}
func (this *TableDescriptor_LocalityConfig_RegionalByTable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_LocalityConfig_RegionalByTable)
	if !ok {
		that2, ok := that.(TableDescriptor_LocalityConfig_RegionalByTable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != nil && that1.Region != nil {
		if *this.Region != *that1.Region {
			return false
		}
	} else if this.Region != nil {
		return false
	} else if that1.Region != nil {
		return false
	}
	return true
}
func (this *TableDescriptor_LocalityConfig_RegionalByRow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_LocalityConfig_RegionalByRow)
	if !ok {
		that2, ok := that.(TableDescriptor_LocalityConfig_RegionalByRow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.As != nil && that1.As != nil {
		if *this.As != *that1.As {
			return false
		}
	} else if this.As != nil {
		return false
	} else if that1.As != nil {
		return false
	}
	return true
}
func (this *TableDescriptor_LocalityConfig_Global) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDescriptor_LocalityConfig_Global)
	if !ok {
		that2, ok := that.(TableDescriptor_LocalityConfig_Global)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DatabaseDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DatabaseDescriptor)
	if !ok {
		that2, ok := that.(DatabaseDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.ModificationTime.Equal(&that1.ModificationTime) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.DrainingNames) != len(that1.DrainingNames) {
		return false
	}
	for i := range this.DrainingNames {
		if !this.DrainingNames[i].Equal(&that1.DrainingNames[i]) {
			return false
		}
	}
	if !this.Privileges.Equal(that1.Privileges) {
		return false
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		a := this.Schemas[i]
		b := that1.Schemas[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.OfflineReason != that1.OfflineReason {
		return false
	}
	if !this.RegionConfig.Equal(that1.RegionConfig) {
		return false
	}
	if !this.DefaultPrivileges.Equal(that1.DefaultPrivileges) {
		return false
	}
	return true
}
func (this *DatabaseDescriptor_SchemaInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DatabaseDescriptor_SchemaInfo)
	if !ok {
		that2, ok := that.(DatabaseDescriptor_SchemaInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Dropped != that1.Dropped {
		return false
	}
	return true
}
func (this *DatabaseDescriptor_RegionConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DatabaseDescriptor_RegionConfig)
	if !ok {
		that2, ok := that.(DatabaseDescriptor_RegionConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SurvivalGoal != that1.SurvivalGoal {
		return false
	}
	if this.PrimaryRegion != that1.PrimaryRegion {
		return false
	}
	if this.RegionEnumID != that1.RegionEnumID {
		return false
	}
	if this.Placement != that1.Placement {
		return false
	}
	return true
}
func (this *TypeDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeDescriptor)
	if !ok {
		that2, ok := that.(TypeDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.ModificationTime.Equal(&that1.ModificationTime) {
		return false
	}
	if len(this.DrainingNames) != len(that1.DrainingNames) {
		return false
	}
	for i := range this.DrainingNames {
		if !this.DrainingNames[i].Equal(&that1.DrainingNames[i]) {
			return false
		}
	}
	if !this.Privileges.Equal(that1.Privileges) {
		return false
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	if this.ParentSchemaID != that1.ParentSchemaID {
		return false
	}
	if this.ArrayTypeID != that1.ArrayTypeID {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.OfflineReason != that1.OfflineReason {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if len(this.ReferencingDescriptorIDs) != len(that1.ReferencingDescriptorIDs) {
		return false
	}
	for i := range this.ReferencingDescriptorIDs {
		if this.ReferencingDescriptorIDs[i] != that1.ReferencingDescriptorIDs[i] {
			return false
		}
	}
	if len(this.EnumMembers) != len(that1.EnumMembers) {
		return false
	}
	for i := range this.EnumMembers {
		if !this.EnumMembers[i].Equal(&that1.EnumMembers[i]) {
			return false
		}
	}
	if !this.Alias.Equal(that1.Alias) {
		return false
	}
	if !this.RegionConfig.Equal(that1.RegionConfig) {
		return false
	}
	return true
}
func (this *TypeDescriptor_EnumMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeDescriptor_EnumMember)
	if !ok {
		that2, ok := that.(TypeDescriptor_EnumMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PhysicalRepresentation, that1.PhysicalRepresentation) {
		return false
	}
	if this.LogicalRepresentation != that1.LogicalRepresentation {
		return false
	}
	if this.Capability != that1.Capability {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	return true
}
func (this *TypeDescriptor_RegionConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeDescriptor_RegionConfig)
	if !ok {
		that2, ok := that.(TypeDescriptor_RegionConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PrimaryRegion != that1.PrimaryRegion {
		return false
	}
	return true
}
func (this *SchemaDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaDescriptor)
	if !ok {
		that2, ok := that.(SchemaDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.OfflineReason != that1.OfflineReason {
		return false
	}
	if !this.ModificationTime.Equal(&that1.ModificationTime) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.DrainingNames) != len(that1.DrainingNames) {
		return false
	}
	for i := range this.DrainingNames {
		if !this.DrainingNames[i].Equal(&that1.DrainingNames[i]) {
			return false
		}
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	if !this.Privileges.Equal(that1.Privileges) {
		return false
	}
	return true
}
func (this *Descriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Descriptor)
	if !ok {
		that2, ok := that.(Descriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Union == nil {
		if this.Union != nil {
			return false
		}
	} else if this.Union == nil {
		return false
	} else if !this.Union.Equal(that1.Union) {
		return false
	}
	return true
}
func (this *Descriptor_Table) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Descriptor_Table)
	if !ok {
		that2, ok := that.(Descriptor_Table)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Table.Equal(that1.Table) {
		return false
	}
	return true
}
func (this *Descriptor_Database) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Descriptor_Database)
	if !ok {
		that2, ok := that.(Descriptor_Database)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Database.Equal(that1.Database) {
		return false
	}
	return true
}
func (this *Descriptor_Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Descriptor_Type)
	if !ok {
		that2, ok := that.(Descriptor_Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *Descriptor_Schema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Descriptor_Schema)
	if !ok {
		that2, ok := that.(Descriptor_Schema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	return true
}
func (m *ForeignKeyReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForeignKeyReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForeignKeyReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.Match))
	i--
	dAtA[i] = 0x40
	i = encodeVarintStructured(dAtA, i, uint64(m.OnUpdate))
	i--
	dAtA[i] = 0x38
	i = encodeVarintStructured(dAtA, i, uint64(m.OnDelete))
	i--
	dAtA[i] = 0x30
	i = encodeVarintStructured(dAtA, i, uint64(m.SharedPrefixLen))
	i--
	dAtA[i] = 0x28
	i = encodeVarintStructured(dAtA, i, uint64(m.Validity))
	i--
	dAtA[i] = 0x20
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintStructured(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.Table))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ForeignKeyConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForeignKeyConstraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForeignKeyConstraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.Match))
	i--
	dAtA[i] = 0x48
	i = encodeVarintStructured(dAtA, i, uint64(m.OnUpdate))
	i--
	dAtA[i] = 0x40
	i = encodeVarintStructured(dAtA, i, uint64(m.OnDelete))
	i--
	dAtA[i] = 0x38
	i = encodeVarintStructured(dAtA, i, uint64(m.Validity))
	i--
	dAtA[i] = 0x30
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintStructured(dAtA, i, uint64(m.ReferencedTableID))
	i--
	dAtA[i] = 0x20
	if len(m.ReferencedColumnIDs) > 0 {
		for iNdEx := len(m.ReferencedColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.ReferencedColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if len(m.OriginColumnIDs) > 0 {
		for iNdEx := len(m.OriginColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.OriginColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.OriginTableID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UniqueWithoutIndexConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniqueWithoutIndexConstraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniqueWithoutIndexConstraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Predicate)
	copy(dAtA[i:], m.Predicate)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Predicate)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintStructured(dAtA, i, uint64(m.Validity))
	i--
	dAtA[i] = 0x20
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	if len(m.ColumnIDs) > 0 {
		for iNdEx := len(m.ColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.ColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.TableID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ColumnDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GeneratedAsIdentitySequenceOption != nil {
		i -= len(*m.GeneratedAsIdentitySequenceOption)
		copy(dAtA[i:], *m.GeneratedAsIdentitySequenceOption)
		i = encodeVarintStructured(dAtA, i, uint64(len(*m.GeneratedAsIdentitySequenceOption)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.GeneratedAsIdentityType))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	if m.OnUpdateExpr != nil {
		i -= len(*m.OnUpdateExpr)
		copy(dAtA[i:], *m.OnUpdateExpr)
		i = encodeVarintStructured(dAtA, i, uint64(len(*m.OnUpdateExpr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	i--
	if m.Inaccessible {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i--
	if m.Virtual {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i = encodeVarintStructured(dAtA, i, uint64(m.SystemColumnKind))
	i--
	dAtA[i] = 0x78
	i--
	if m.AlterColumnTypeInProgress {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x70
	i = encodeVarintStructured(dAtA, i, uint64(m.PGAttributeNum))
	i--
	dAtA[i] = 0x68
	if len(m.OwnsSequenceIds) > 0 {
		for iNdEx := len(m.OwnsSequenceIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.OwnsSequenceIds[iNdEx]))
			i--
			dAtA[i] = 0x60
		}
	}
	if m.ComputeExpr != nil {
		i -= len(*m.ComputeExpr)
		copy(dAtA[i:], *m.ComputeExpr)
		i = encodeVarintStructured(dAtA, i, uint64(len(*m.ComputeExpr)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UsesSequenceIds) > 0 {
		for iNdEx := len(m.UsesSequenceIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.UsesSequenceIds[iNdEx]))
			i--
			dAtA[i] = 0x50
		}
	}
	i--
	if m.Hidden {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	if m.DefaultExpr != nil {
		i -= len(*m.DefaultExpr)
		copy(dAtA[i:], *m.DefaultExpr)
		i = encodeVarintStructured(dAtA, i, uint64(len(*m.DefaultExpr)))
		i--
		dAtA[i] = 0x2a
	}
	i--
	if m.Nullable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ColumnFamilyDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnFamilyDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnFamilyDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.DefaultColumnID))
	i--
	dAtA[i] = 0x28
	if len(m.ColumnIDs) > 0 {
		for iNdEx := len(m.ColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.ColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.ColumnNames) > 0 {
		for iNdEx := len(m.ColumnNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ColumnNames[iNdEx])
			copy(dAtA[i:], m.ColumnNames[iNdEx])
			i = encodeVarintStructured(dAtA, i, uint64(len(m.ColumnNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InterleaveDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterleaveDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterleaveDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ancestors) > 0 {
		for iNdEx := len(m.Ancestors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ancestors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterleaveDescriptor_Ancestor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterleaveDescriptor_Ancestor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterleaveDescriptor_Ancestor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.SharedPrefixLen))
	i--
	dAtA[i] = 0x18
	i = encodeVarintStructured(dAtA, i, uint64(m.IndexID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.TableID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ShardedDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardedDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardedDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ColumnNames) > 0 {
		for iNdEx := len(m.ColumnNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ColumnNames[iNdEx])
			copy(dAtA[i:], m.ColumnNames[iNdEx])
			i = encodeVarintStructured(dAtA, i, uint64(len(m.ColumnNames[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.ShardBuckets))
	i--
	dAtA[i] = 0x18
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i--
	if m.IsSharded {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PartitioningDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitioningDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitioningDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.NumImplicitColumns))
	i--
	dAtA[i] = 0x20
	if len(m.Range) > 0 {
		for iNdEx := len(m.Range) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Range[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.NumColumns))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PartitioningDescriptor_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitioningDescriptor_List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitioningDescriptor_List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Subpartitioning.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintStructured(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitioningDescriptor_Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitioningDescriptor_Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitioningDescriptor_Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromInclusive != nil {
		i -= len(m.FromInclusive)
		copy(dAtA[i:], m.FromInclusive)
		i = encodeVarintStructured(dAtA, i, uint64(len(m.FromInclusive)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ToExclusive != nil {
		i -= len(m.ToExclusive)
		copy(dAtA[i:], m.ToExclusive)
		i = encodeVarintStructured(dAtA, i, uint64(len(m.ToExclusive)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IndexDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Predicate)
	copy(dAtA[i:], m.Predicate)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Predicate)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size, err := m.GeoConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	i--
	if m.Disabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	{
		size, err := m.Sharded.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	i = encodeVarintStructured(dAtA, i, uint64(m.EncodingType))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i = encodeVarintStructured(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i--
	if m.CreatedExplicitly {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintStructured(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	{
		size, err := m.Partitioning.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if len(m.StoreColumnIDs) > 0 {
		for iNdEx := len(m.StoreColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.StoreColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x70
		}
	}
	if len(m.CompositeColumnIDs) > 0 {
		for iNdEx := len(m.CompositeColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.CompositeColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x68
		}
	}
	if len(m.InterleavedBy) > 0 {
		for iNdEx := len(m.InterleavedBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterleavedBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	{
		size, err := m.Interleave.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.ReferencedBy) > 0 {
		for iNdEx := len(m.ReferencedBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReferencedBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.ForeignKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.KeyColumnDirections) > 0 {
		for iNdEx := len(m.KeyColumnDirections) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.KeyColumnDirections[iNdEx]))
			i--
			dAtA[i] = 0x40
		}
	}
	if len(m.KeySuffixColumnIDs) > 0 {
		for iNdEx := len(m.KeySuffixColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.KeySuffixColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	if len(m.KeyColumnIDs) > 0 {
		for iNdEx := len(m.KeyColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.KeyColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if len(m.StoreColumnNames) > 0 {
		for iNdEx := len(m.StoreColumnNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StoreColumnNames[iNdEx])
			copy(dAtA[i:], m.StoreColumnNames[iNdEx])
			i = encodeVarintStructured(dAtA, i, uint64(len(m.StoreColumnNames[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.KeyColumnNames) > 0 {
		for iNdEx := len(m.KeyColumnNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyColumnNames[iNdEx])
			copy(dAtA[i:], m.KeyColumnNames[iNdEx])
			i = encodeVarintStructured(dAtA, i, uint64(len(m.KeyColumnNames[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i--
	if m.Unique {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConstraintToUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintToUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintToUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UniqueWithoutIndexConstraint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	i = encodeVarintStructured(dAtA, i, uint64(m.NotNullColumn))
	i--
	dAtA[i] = 0x30
	{
		size, err := m.ForeignKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Check.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintStructured(dAtA, i, uint64(m.ConstraintType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PrimaryKeySwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryKeySwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryKeySwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocalityConfigSwap != nil {
		{
			size, err := m.LocalityConfigSwap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	i -= len(m.NewPrimaryIndexName)
	copy(dAtA[i:], m.NewPrimaryIndexName)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.NewPrimaryIndexName)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintStructured(dAtA, i, uint64(m.OldPrimaryIndexId))
	i--
	dAtA[i] = 0x20
	if len(m.NewIndexes) > 0 {
		for iNdEx := len(m.NewIndexes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.NewIndexes[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if len(m.OldIndexes) > 0 {
		for iNdEx := len(m.OldIndexes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.OldIndexes[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.NewPrimaryIndexId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PrimaryKeySwap_LocalityConfigSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryKeySwap_LocalityConfigSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryKeySwap_LocalityConfigSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewRegionalByRowColumnDefaultExpr != nil {
		i -= len(*m.NewRegionalByRowColumnDefaultExpr)
		copy(dAtA[i:], *m.NewRegionalByRowColumnDefaultExpr)
		i = encodeVarintStructured(dAtA, i, uint64(len(*m.NewRegionalByRowColumnDefaultExpr)))
		i--
		dAtA[i] = 0x22
	}
	if m.NewRegionalByRowColumnID != nil {
		i = encodeVarintStructured(dAtA, i, uint64(*m.NewRegionalByRowColumnID))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.NewLocalityConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.OldLocalityConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ComputedColumnSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputedColumnSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputedColumnSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.InverseExpr)
	copy(dAtA[i:], m.InverseExpr)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.InverseExpr)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintStructured(dAtA, i, uint64(m.OldColumnId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.NewColumnId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MaterializedViewRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaterializedViewRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaterializedViewRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ShouldBackfill {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	{
		size, err := m.AsOf.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.NewIndexes) > 0 {
		for iNdEx := len(m.NewIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.NewPrimaryIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DescriptorMutation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescriptorMutation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptorMutation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Descriptor_ != nil {
		{
			size := m.Descriptor_.Size()
			i -= size
			if _, err := m.Descriptor_.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	i--
	if m.Rollback {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintStructured(dAtA, i, uint64(m.MutationID))
	i--
	dAtA[i] = 0x28
	i = encodeVarintStructured(dAtA, i, uint64(m.Direction))
	i--
	dAtA[i] = 0x20
	i = encodeVarintStructured(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}

func (m *DescriptorMutation_Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptorMutation_Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Column != nil {
		{
			size, err := m.Column.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DescriptorMutation_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptorMutation_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DescriptorMutation_Constraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptorMutation_Constraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Constraint != nil {
		{
			size, err := m.Constraint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DescriptorMutation_PrimaryKeySwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptorMutation_PrimaryKeySwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrimaryKeySwap != nil {
		{
			size, err := m.PrimaryKeySwap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *DescriptorMutation_ComputedColumnSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptorMutation_ComputedColumnSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ComputedColumnSwap != nil {
		{
			size, err := m.ComputedColumnSwap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *DescriptorMutation_MaterializedViewRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptorMutation_MaterializedViewRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaterializedViewRefresh != nil {
		{
			size, err := m.MaterializedViewRefresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *NameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.ParentSchemaID))
	i--
	dAtA[i] = 0x18
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintStructured(dAtA, i, uint64(m.ParentID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TableDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.NewSchemaChangeJobID))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf0
	if len(m.DependsOnTypes) > 0 {
		for iNdEx := len(m.DependsOnTypes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.DependsOnTypes[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xe8
		}
	}
	i--
	if m.PartitionAllBy {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe0
	if len(m.UniqueWithoutIndexConstraints) > 0 {
		for iNdEx := len(m.UniqueWithoutIndexConstraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UniqueWithoutIndexConstraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xda
		}
	}
	if m.LocalityConfig != nil {
		{
			size, err := m.LocalityConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	i--
	if m.IsMaterializedView {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc8
	i = encodeVarintStructured(dAtA, i, uint64(m.UnexposedParentSchemaID))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc0
	i--
	if m.Temporary {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb8
	i -= len(m.OfflineReason)
	copy(dAtA[i:], m.OfflineReason)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.OfflineReason)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb2
	if len(m.InboundFKs) > 0 {
		for iNdEx := len(m.InboundFKs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InboundFKs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.OutboundFKs) > 0 {
		for iNdEx := len(m.OutboundFKs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundFKs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	{
		size, err := m.CreateAsOfTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	i -= len(m.CreateQuery)
	copy(dAtA[i:], m.CreateQuery)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.CreateQuery)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	if len(m.GCMutations) > 0 {
		for iNdEx := len(m.GCMutations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GCMutations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.DropJobID))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x80
	i = encodeVarintStructured(dAtA, i, uint64(m.AuditMode))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf8
	{
		size, err := m.ReplacementOf.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	i = encodeVarintStructured(dAtA, i, uint64(m.DropTime))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe8
	if m.SequenceOpts != nil {
		{
			size, err := m.SequenceOpts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.MutationJobs) > 0 {
		for iNdEx := len(m.MutationJobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MutationJobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.DependedOnBy) > 0 {
		for iNdEx := len(m.DependedOnBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DependedOnBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.DependsOn) > 0 {
		for iNdEx := len(m.DependsOn) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.DependsOn[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
	}
	i -= len(m.ViewQuery)
	copy(dAtA[i:], m.ViewQuery)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.ViewQuery)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	i = encodeVarintStructured(dAtA, i, uint64(m.NextFamilyID))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb8
	if len(m.Families) > 0 {
		for iNdEx := len(m.Families) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Families[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.DrainingNames) > 0 {
		for iNdEx := len(m.DrainingNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DrainingNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Checks) > 0 {
		for iNdEx := len(m.Checks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Checks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i = encodeVarintStructured(dAtA, i, uint64(m.FormatVersion))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintStructured(dAtA, i, uint64(m.NextMutationID))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	if m.Lease != nil {
		{
			size, err := m.Lease.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Mutations) > 0 {
		for iNdEx := len(m.Mutations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mutations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Privileges != nil {
		{
			size, err := m.Privileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.NextIndexID))
	i--
	dAtA[i] = 0x60
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Indexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	{
		size, err := m.PrimaryIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	i = encodeVarintStructured(dAtA, i, uint64(m.NextColumnID))
	i--
	dAtA[i] = 0x48
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size, err := m.ModificationTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	i = encodeVarintStructured(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x28
	i = encodeVarintStructured(dAtA, i, uint64(m.ParentID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x18
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_SchemaChangeLease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_SchemaChangeLease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_SchemaChangeLease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.ExpirationTime))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_CheckConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_CheckConstraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_CheckConstraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Hidden {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i--
	if m.IsNonNullConstraint {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	if len(m.ColumnIDs) > 0 {
		for iNdEx := len(m.ColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.ColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.Validity))
	i--
	dAtA[i] = 0x18
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Expr)
	copy(dAtA[i:], m.Expr)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Expr)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_Reference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_Reference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_Reference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ByID {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	if len(m.ColumnIDs) > 0 {
		for iNdEx := len(m.ColumnIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.ColumnIDs[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.IndexID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_MutationJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_MutationJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_MutationJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.JobID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.MutationID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_SequenceOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_SequenceOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_SequenceOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.CacheSize))
	i--
	dAtA[i] = 0x38
	{
		size, err := m.SequenceOwner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	i--
	if m.Virtual {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintStructured(dAtA, i, uint64(m.Start))
	i--
	dAtA[i] = 0x20
	i = encodeVarintStructured(dAtA, i, uint64(m.MaxValue))
	i--
	dAtA[i] = 0x18
	i = encodeVarintStructured(dAtA, i, uint64(m.MinValue))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.Increment))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_SequenceOpts_SequenceOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_SequenceOpts_SequenceOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_SequenceOpts_SequenceOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.OwnerTableID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.OwnerColumnID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_Replacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_Replacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_Replacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_GCDescriptorMutation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_GCDescriptorMutation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_GCDescriptorMutation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.JobID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintStructured(dAtA, i, uint64(m.DropTime))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.IndexID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_LocalityConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_LocalityConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_LocalityConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Locality != nil {
		{
			size := m.Locality.Size()
			i -= size
			if _, err := m.Locality.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_LocalityConfig_Global_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_LocalityConfig_Global_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Global != nil {
		{
			size, err := m.Global.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_LocalityConfig_RegionalByTable_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegionalByTable != nil {
		{
			size, err := m.RegionalByTable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_LocalityConfig_RegionalByRow_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegionalByRow != nil {
		{
			size, err := m.RegionalByRow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_LocalityConfig_RegionalByTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_LocalityConfig_RegionalByTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Region != nil {
		i -= len(*m.Region)
		copy(dAtA[i:], *m.Region)
		i = encodeVarintStructured(dAtA, i, uint64(len(*m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_LocalityConfig_RegionalByRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_LocalityConfig_RegionalByRow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_LocalityConfig_RegionalByRow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.As != nil {
		i -= len(*m.As)
		copy(dAtA[i:], *m.As)
		i = encodeVarintStructured(dAtA, i, uint64(len(*m.As)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableDescriptor_LocalityConfig_Global) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDescriptor_LocalityConfig_Global) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableDescriptor_LocalityConfig_Global) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DatabaseDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultPrivileges != nil {
		{
			size, err := m.DefaultPrivileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.RegionConfig != nil {
		{
			size, err := m.RegionConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	i -= len(m.OfflineReason)
	copy(dAtA[i:], m.OfflineReason)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.OfflineReason)))
	i--
	dAtA[i] = 0x4a
	i = encodeVarintStructured(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x40
	if len(m.Schemas) > 0 {
		keysForSchemas := make([]string, 0, len(m.Schemas))
		for k := range m.Schemas {
			keysForSchemas = append(keysForSchemas, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSchemas)
		for iNdEx := len(keysForSchemas) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Schemas[string(keysForSchemas[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForSchemas[iNdEx])
			copy(dAtA[i:], keysForSchemas[iNdEx])
			i = encodeVarintStructured(dAtA, i, uint64(len(keysForSchemas[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStructured(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DrainingNames) > 0 {
		for iNdEx := len(m.DrainingNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DrainingNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x28
	{
		size, err := m.ModificationTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Privileges != nil {
		{
			size, err := m.Privileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DatabaseDescriptor_SchemaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseDescriptor_SchemaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseDescriptor_SchemaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Dropped {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DatabaseDescriptor_RegionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseDescriptor_RegionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseDescriptor_RegionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.Placement))
	i--
	dAtA[i] = 0x28
	i = encodeVarintStructured(dAtA, i, uint64(m.RegionEnumID))
	i--
	dAtA[i] = 0x20
	i -= len(m.PrimaryRegion)
	copy(dAtA[i:], m.PrimaryRegion)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.PrimaryRegion)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintStructured(dAtA, i, uint64(m.SurvivalGoal))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *TypeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegionConfig != nil {
		{
			size, err := m.RegionConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	i -= len(m.OfflineReason)
	copy(dAtA[i:], m.OfflineReason)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.OfflineReason)))
	i--
	dAtA[i] = 0x7a
	if m.Privileges != nil {
		{
			size, err := m.Privileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x68
	if len(m.ReferencingDescriptorIDs) > 0 {
		for iNdEx := len(m.ReferencingDescriptorIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintStructured(dAtA, i, uint64(m.ReferencingDescriptorIDs[iNdEx]))
			i--
			dAtA[i] = 0x60
		}
	}
	if len(m.DrainingNames) > 0 {
		for iNdEx := len(m.DrainingNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DrainingNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	{
		size, err := m.ModificationTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	i = encodeVarintStructured(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x48
	i = encodeVarintStructured(dAtA, i, uint64(m.ArrayTypeID))
	i--
	dAtA[i] = 0x40
	if m.Alias != nil {
		{
			size, err := m.Alias.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EnumMembers) > 0 {
		for iNdEx := len(m.EnumMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnumMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.Kind))
	i--
	dAtA[i] = 0x28
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x20
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintStructured(dAtA, i, uint64(m.ParentSchemaID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStructured(dAtA, i, uint64(m.ParentID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TypeDescriptor_EnumMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeDescriptor_EnumMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeDescriptor_EnumMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintStructured(dAtA, i, uint64(m.Direction))
	i--
	dAtA[i] = 0x20
	i = encodeVarintStructured(dAtA, i, uint64(m.Capability))
	i--
	dAtA[i] = 0x18
	i -= len(m.LogicalRepresentation)
	copy(dAtA[i:], m.LogicalRepresentation)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.LogicalRepresentation)))
	i--
	dAtA[i] = 0x12
	if m.PhysicalRepresentation != nil {
		i -= len(m.PhysicalRepresentation)
		copy(dAtA[i:], m.PhysicalRepresentation)
		i = encodeVarintStructured(dAtA, i, uint64(len(m.PhysicalRepresentation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TypeDescriptor_RegionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeDescriptor_RegionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeDescriptor_RegionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.PrimaryRegion)
	copy(dAtA[i:], m.PrimaryRegion)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.PrimaryRegion)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SchemaDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.OfflineReason)
	copy(dAtA[i:], m.OfflineReason)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.OfflineReason)))
	i--
	dAtA[i] = 0x4a
	i = encodeVarintStructured(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x40
	if len(m.DrainingNames) > 0 {
		for iNdEx := len(m.DrainingNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DrainingNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructured(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x30
	{
		size, err := m.ModificationTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStructured(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Privileges != nil {
		{
			size, err := m.Privileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintStructured(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x18
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStructured(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintStructured(dAtA, i, uint64(m.ParentID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Descriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Descriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Descriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Union != nil {
		{
			size := m.Union.Size()
			i -= size
			if _, err := m.Union.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Descriptor_Table) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Descriptor_Table) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Table != nil {
		{
			size, err := m.Table.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Descriptor_Database) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Descriptor_Database) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Database != nil {
		{
			size, err := m.Database.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Descriptor_Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Descriptor_Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Descriptor_Schema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Descriptor_Schema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructured(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintStructured(dAtA []byte, offset int, v uint64) int {
	offset -= sovStructured(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ForeignKeyReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.Table))
	n += 1 + sovStructured(uint64(m.Index))
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.Validity))
	n += 1 + sovStructured(uint64(m.SharedPrefixLen))
	n += 1 + sovStructured(uint64(m.OnDelete))
	n += 1 + sovStructured(uint64(m.OnUpdate))
	n += 1 + sovStructured(uint64(m.Match))
	return n
}

func (m *ForeignKeyConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.OriginTableID))
	if len(m.OriginColumnIDs) > 0 {
		for _, e := range m.OriginColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	if len(m.ReferencedColumnIDs) > 0 {
		for _, e := range m.ReferencedColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	n += 1 + sovStructured(uint64(m.ReferencedTableID))
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.Validity))
	n += 1 + sovStructured(uint64(m.OnDelete))
	n += 1 + sovStructured(uint64(m.OnUpdate))
	n += 1 + sovStructured(uint64(m.Match))
	return n
}

func (m *UniqueWithoutIndexConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.TableID))
	if len(m.ColumnIDs) > 0 {
		for _, e := range m.ColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.Validity))
	l = len(m.Predicate)
	n += 1 + l + sovStructured(uint64(l))
	return n
}

func (m *ColumnDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ID))
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	n += 2
	if m.DefaultExpr != nil {
		l = len(*m.DefaultExpr)
		n += 1 + l + sovStructured(uint64(l))
	}
	n += 2
	if len(m.UsesSequenceIds) > 0 {
		for _, e := range m.UsesSequenceIds {
			n += 1 + sovStructured(uint64(e))
		}
	}
	if m.ComputeExpr != nil {
		l = len(*m.ComputeExpr)
		n += 1 + l + sovStructured(uint64(l))
	}
	if len(m.OwnsSequenceIds) > 0 {
		for _, e := range m.OwnsSequenceIds {
			n += 1 + sovStructured(uint64(e))
		}
	}
	n += 1 + sovStructured(uint64(m.PGAttributeNum))
	n += 2
	n += 1 + sovStructured(uint64(m.SystemColumnKind))
	n += 3
	n += 3
	if m.OnUpdateExpr != nil {
		l = len(*m.OnUpdateExpr)
		n += 2 + l + sovStructured(uint64(l))
	}
	n += 2 + sovStructured(uint64(m.GeneratedAsIdentityType))
	if m.GeneratedAsIdentitySequenceOption != nil {
		l = len(*m.GeneratedAsIdentitySequenceOption)
		n += 2 + l + sovStructured(uint64(l))
	}
	return n
}

func (m *ColumnFamilyDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ID))
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			l = len(s)
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if len(m.ColumnIDs) > 0 {
		for _, e := range m.ColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	n += 1 + sovStructured(uint64(m.DefaultColumnID))
	return n
}

func (m *InterleaveDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ancestors) > 0 {
		for _, e := range m.Ancestors {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	return n
}

func (m *InterleaveDescriptor_Ancestor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.TableID))
	n += 1 + sovStructured(uint64(m.IndexID))
	n += 1 + sovStructured(uint64(m.SharedPrefixLen))
	return n
}

func (m *ShardedDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ShardBuckets))
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			l = len(s)
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	return n
}

func (m *PartitioningDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.NumColumns))
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if len(m.Range) > 0 {
		for _, e := range m.Range {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	n += 1 + sovStructured(uint64(m.NumImplicitColumns))
	return n
}

func (m *PartitioningDescriptor_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	l = m.Subpartitioning.Size()
	n += 1 + l + sovStructured(uint64(l))
	return n
}

func (m *PartitioningDescriptor_Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	if m.ToExclusive != nil {
		l = len(m.ToExclusive)
		n += 1 + l + sovStructured(uint64(l))
	}
	if m.FromInclusive != nil {
		l = len(m.FromInclusive)
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}

func (m *IndexDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ID))
	n += 2
	if len(m.KeyColumnNames) > 0 {
		for _, s := range m.KeyColumnNames {
			l = len(s)
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if len(m.StoreColumnNames) > 0 {
		for _, s := range m.StoreColumnNames {
			l = len(s)
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if len(m.KeyColumnIDs) > 0 {
		for _, e := range m.KeyColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	if len(m.KeySuffixColumnIDs) > 0 {
		for _, e := range m.KeySuffixColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	if len(m.KeyColumnDirections) > 0 {
		for _, e := range m.KeyColumnDirections {
			n += 1 + sovStructured(uint64(e))
		}
	}
	l = m.ForeignKey.Size()
	n += 1 + l + sovStructured(uint64(l))
	if len(m.ReferencedBy) > 0 {
		for _, e := range m.ReferencedBy {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	l = m.Interleave.Size()
	n += 1 + l + sovStructured(uint64(l))
	if len(m.InterleavedBy) > 0 {
		for _, e := range m.InterleavedBy {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if len(m.CompositeColumnIDs) > 0 {
		for _, e := range m.CompositeColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	if len(m.StoreColumnIDs) > 0 {
		for _, e := range m.StoreColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	l = m.Partitioning.Size()
	n += 1 + l + sovStructured(uint64(l))
	n += 2 + sovStructured(uint64(m.Type))
	n += 3
	n += 2 + sovStructured(uint64(m.Version))
	n += 2 + sovStructured(uint64(m.EncodingType))
	l = m.Sharded.Size()
	n += 2 + l + sovStructured(uint64(l))
	n += 3
	l = m.GeoConfig.Size()
	n += 2 + l + sovStructured(uint64(l))
	l = len(m.Predicate)
	n += 2 + l + sovStructured(uint64(l))
	return n
}

func (m *ConstraintToUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.ConstraintType))
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	l = m.Check.Size()
	n += 1 + l + sovStructured(uint64(l))
	l = m.ForeignKey.Size()
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.NotNullColumn))
	l = m.UniqueWithoutIndexConstraint.Size()
	n += 1 + l + sovStructured(uint64(l))
	return n
}

func (m *PrimaryKeySwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.NewPrimaryIndexId))
	if len(m.OldIndexes) > 0 {
		for _, e := range m.OldIndexes {
			n += 1 + sovStructured(uint64(e))
		}
	}
	if len(m.NewIndexes) > 0 {
		for _, e := range m.NewIndexes {
			n += 1 + sovStructured(uint64(e))
		}
	}
	n += 1 + sovStructured(uint64(m.OldPrimaryIndexId))
	l = len(m.NewPrimaryIndexName)
	n += 1 + l + sovStructured(uint64(l))
	if m.LocalityConfigSwap != nil {
		l = m.LocalityConfigSwap.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}

func (m *PrimaryKeySwap_LocalityConfigSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OldLocalityConfig.Size()
	n += 1 + l + sovStructured(uint64(l))
	l = m.NewLocalityConfig.Size()
	n += 1 + l + sovStructured(uint64(l))
	if m.NewRegionalByRowColumnID != nil {
		n += 1 + sovStructured(uint64(*m.NewRegionalByRowColumnID))
	}
	if m.NewRegionalByRowColumnDefaultExpr != nil {
		l = len(*m.NewRegionalByRowColumnDefaultExpr)
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}

func (m *ComputedColumnSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.NewColumnId))
	n += 1 + sovStructured(uint64(m.OldColumnId))
	l = len(m.InverseExpr)
	n += 1 + l + sovStructured(uint64(l))
	return n
}

func (m *MaterializedViewRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NewPrimaryIndex.Size()
	n += 1 + l + sovStructured(uint64(l))
	if len(m.NewIndexes) > 0 {
		for _, e := range m.NewIndexes {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	l = m.AsOf.Size()
	n += 1 + l + sovStructured(uint64(l))
	n += 2
	return n
}

func (m *DescriptorMutation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Descriptor_ != nil {
		n += m.Descriptor_.Size()
	}
	n += 1 + sovStructured(uint64(m.State))
	n += 1 + sovStructured(uint64(m.Direction))
	n += 1 + sovStructured(uint64(m.MutationID))
	n += 2
	return n
}

func (m *DescriptorMutation_Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Column != nil {
		l = m.Column.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *DescriptorMutation_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *DescriptorMutation_Constraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constraint != nil {
		l = m.Constraint.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *DescriptorMutation_PrimaryKeySwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimaryKeySwap != nil {
		l = m.PrimaryKeySwap.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *DescriptorMutation_ComputedColumnSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ComputedColumnSwap != nil {
		l = m.ComputedColumnSwap.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *DescriptorMutation_MaterializedViewRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaterializedViewRefresh != nil {
		l = m.MaterializedViewRefresh.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *NameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.ParentID))
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ParentSchemaID))
	return n
}

func (m *TableDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ID))
	n += 1 + sovStructured(uint64(m.ParentID))
	n += 1 + sovStructured(uint64(m.Version))
	l = m.ModificationTime.Size()
	n += 1 + l + sovStructured(uint64(l))
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	n += 1 + sovStructured(uint64(m.NextColumnID))
	l = m.PrimaryIndex.Size()
	n += 1 + l + sovStructured(uint64(l))
	if len(m.Indexes) > 0 {
		for _, e := range m.Indexes {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	n += 1 + sovStructured(uint64(m.NextIndexID))
	if m.Privileges != nil {
		l = m.Privileges.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	if len(m.Mutations) > 0 {
		for _, e := range m.Mutations {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if m.Lease != nil {
		l = m.Lease.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	n += 2 + sovStructured(uint64(m.NextMutationID))
	n += 2 + sovStructured(uint64(m.FormatVersion))
	n += 2 + sovStructured(uint64(m.State))
	if len(m.Checks) > 0 {
		for _, e := range m.Checks {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	if len(m.DrainingNames) > 0 {
		for _, e := range m.DrainingNames {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	if len(m.Families) > 0 {
		for _, e := range m.Families {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	n += 2 + sovStructured(uint64(m.NextFamilyID))
	l = len(m.ViewQuery)
	n += 2 + l + sovStructured(uint64(l))
	if len(m.DependsOn) > 0 {
		for _, e := range m.DependsOn {
			n += 2 + sovStructured(uint64(e))
		}
	}
	if len(m.DependedOnBy) > 0 {
		for _, e := range m.DependedOnBy {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	if len(m.MutationJobs) > 0 {
		for _, e := range m.MutationJobs {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	if m.SequenceOpts != nil {
		l = m.SequenceOpts.Size()
		n += 2 + l + sovStructured(uint64(l))
	}
	n += 2 + sovStructured(uint64(m.DropTime))
	l = m.ReplacementOf.Size()
	n += 2 + l + sovStructured(uint64(l))
	n += 2 + sovStructured(uint64(m.AuditMode))
	n += 2 + sovStructured(uint64(m.DropJobID))
	if len(m.GCMutations) > 0 {
		for _, e := range m.GCMutations {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	l = len(m.CreateQuery)
	n += 2 + l + sovStructured(uint64(l))
	l = m.CreateAsOfTime.Size()
	n += 2 + l + sovStructured(uint64(l))
	if len(m.OutboundFKs) > 0 {
		for _, e := range m.OutboundFKs {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	if len(m.InboundFKs) > 0 {
		for _, e := range m.InboundFKs {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	l = len(m.OfflineReason)
	n += 2 + l + sovStructured(uint64(l))
	n += 3
	n += 2 + sovStructured(uint64(m.UnexposedParentSchemaID))
	n += 3
	if m.LocalityConfig != nil {
		l = m.LocalityConfig.Size()
		n += 2 + l + sovStructured(uint64(l))
	}
	if len(m.UniqueWithoutIndexConstraints) > 0 {
		for _, e := range m.UniqueWithoutIndexConstraints {
			l = e.Size()
			n += 2 + l + sovStructured(uint64(l))
		}
	}
	n += 3
	if len(m.DependsOnTypes) > 0 {
		for _, e := range m.DependsOnTypes {
			n += 2 + sovStructured(uint64(e))
		}
	}
	n += 2 + sovStructured(uint64(m.NewSchemaChangeJobID))
	return n
}

func (m *TableDescriptor_SchemaChangeLease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.NodeID))
	n += 1 + sovStructured(uint64(m.ExpirationTime))
	return n
}

func (m *TableDescriptor_CheckConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Expr)
	n += 1 + l + sovStructured(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.Validity))
	if len(m.ColumnIDs) > 0 {
		for _, e := range m.ColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	n += 2
	n += 2
	return n
}

func (m *TableDescriptor_Reference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.ID))
	n += 1 + sovStructured(uint64(m.IndexID))
	if len(m.ColumnIDs) > 0 {
		for _, e := range m.ColumnIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	n += 2
	return n
}

func (m *TableDescriptor_MutationJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.MutationID))
	n += 1 + sovStructured(uint64(m.JobID))
	return n
}

func (m *TableDescriptor_SequenceOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.Increment))
	n += 1 + sovStructured(uint64(m.MinValue))
	n += 1 + sovStructured(uint64(m.MaxValue))
	n += 1 + sovStructured(uint64(m.Start))
	n += 2
	l = m.SequenceOwner.Size()
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.CacheSize))
	return n
}

func (m *TableDescriptor_SequenceOpts_SequenceOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.OwnerColumnID))
	n += 1 + sovStructured(uint64(m.OwnerTableID))
	return n
}

func (m *TableDescriptor_Replacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.ID))
	l = m.Time.Size()
	n += 1 + l + sovStructured(uint64(l))
	return n
}

func (m *TableDescriptor_GCDescriptorMutation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.IndexID))
	n += 1 + sovStructured(uint64(m.DropTime))
	n += 1 + sovStructured(uint64(m.JobID))
	return n
}

func (m *TableDescriptor_LocalityConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Locality != nil {
		n += m.Locality.Size()
	}
	return n
}

func (m *TableDescriptor_LocalityConfig_Global_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Global != nil {
		l = m.Global.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionalByTable != nil {
		l = m.RegionalByTable.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionalByRow != nil {
		l = m.RegionalByRow.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}

func (m *TableDescriptor_LocalityConfig_RegionalByRow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.As != nil {
		l = len(*m.As)
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}

func (m *TableDescriptor_LocalityConfig_Global) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DatabaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ID))
	if m.Privileges != nil {
		l = m.Privileges.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	l = m.ModificationTime.Size()
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.Version))
	if len(m.DrainingNames) > 0 {
		for _, e := range m.DrainingNames {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if len(m.Schemas) > 0 {
		for k, v := range m.Schemas {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovStructured(uint64(len(k))) + 1 + l + sovStructured(uint64(l))
			n += mapEntrySize + 1 + sovStructured(uint64(mapEntrySize))
		}
	}
	n += 1 + sovStructured(uint64(m.State))
	l = len(m.OfflineReason)
	n += 1 + l + sovStructured(uint64(l))
	if m.RegionConfig != nil {
		l = m.RegionConfig.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	if m.DefaultPrivileges != nil {
		l = m.DefaultPrivileges.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}

func (m *DatabaseDescriptor_SchemaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.ID))
	n += 2
	return n
}

func (m *DatabaseDescriptor_RegionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.SurvivalGoal))
	l = len(m.PrimaryRegion)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.RegionEnumID))
	n += 1 + sovStructured(uint64(m.Placement))
	return n
}

func (m *TypeDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.ParentID))
	n += 1 + sovStructured(uint64(m.ParentSchemaID))
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ID))
	n += 1 + sovStructured(uint64(m.Kind))
	if len(m.EnumMembers) > 0 {
		for _, e := range m.EnumMembers {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	n += 1 + sovStructured(uint64(m.ArrayTypeID))
	n += 1 + sovStructured(uint64(m.Version))
	l = m.ModificationTime.Size()
	n += 1 + l + sovStructured(uint64(l))
	if len(m.DrainingNames) > 0 {
		for _, e := range m.DrainingNames {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	if len(m.ReferencingDescriptorIDs) > 0 {
		for _, e := range m.ReferencingDescriptorIDs {
			n += 1 + sovStructured(uint64(e))
		}
	}
	n += 1 + sovStructured(uint64(m.State))
	if m.Privileges != nil {
		l = m.Privileges.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	l = len(m.OfflineReason)
	n += 1 + l + sovStructured(uint64(l))
	if m.RegionConfig != nil {
		l = m.RegionConfig.Size()
		n += 2 + l + sovStructured(uint64(l))
	}
	return n
}

func (m *TypeDescriptor_EnumMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhysicalRepresentation != nil {
		l = len(m.PhysicalRepresentation)
		n += 1 + l + sovStructured(uint64(l))
	}
	l = len(m.LogicalRepresentation)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.Capability))
	n += 1 + sovStructured(uint64(m.Direction))
	return n
}

func (m *TypeDescriptor_RegionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrimaryRegion)
	n += 1 + l + sovStructured(uint64(l))
	return n
}

func (m *SchemaDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructured(uint64(m.ParentID))
	l = len(m.Name)
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.ID))
	if m.Privileges != nil {
		l = m.Privileges.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	l = m.ModificationTime.Size()
	n += 1 + l + sovStructured(uint64(l))
	n += 1 + sovStructured(uint64(m.Version))
	if len(m.DrainingNames) > 0 {
		for _, e := range m.DrainingNames {
			l = e.Size()
			n += 1 + l + sovStructured(uint64(l))
		}
	}
	n += 1 + sovStructured(uint64(m.State))
	l = len(m.OfflineReason)
	n += 1 + l + sovStructured(uint64(l))
	return n
}

func (m *Descriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Union != nil {
		n += m.Union.Size()
	}
	return n
}

func (m *Descriptor_Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Table != nil {
		l = m.Table.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *Descriptor_Database) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Database != nil {
		l = m.Database.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *Descriptor_Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}
func (m *Descriptor_Schema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovStructured(uint64(l))
	}
	return n
}

func sovStructured(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStructured(x uint64) (n int) {
	return sovStructured(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ForeignKeyReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForeignKeyReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForeignKeyReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			m.Table = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Table |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= ConstraintValidity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedPrefixLen", wireType)
			}
			m.SharedPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedPrefixLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnDelete", wireType)
			}
			m.OnDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnDelete |= ForeignKeyReference_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUpdate", wireType)
			}
			m.OnUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnUpdate |= ForeignKeyReference_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			m.Match = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Match |= ForeignKeyReference_Match(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForeignKeyConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForeignKeyConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForeignKeyConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginTableID", wireType)
			}
			m.OriginTableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginTableID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OriginColumnIDs = append(m.OriginColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OriginColumnIDs) == 0 {
					m.OriginColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OriginColumnIDs = append(m.OriginColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginColumnIDs", wireType)
			}
		case 3:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReferencedColumnIDs = append(m.ReferencedColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReferencedColumnIDs) == 0 {
					m.ReferencedColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReferencedColumnIDs = append(m.ReferencedColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedColumnIDs", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedTableID", wireType)
			}
			m.ReferencedTableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferencedTableID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= ConstraintValidity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnDelete", wireType)
			}
			m.OnDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnDelete |= ForeignKeyReference_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUpdate", wireType)
			}
			m.OnUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnUpdate |= ForeignKeyReference_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			m.Match = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Match |= ForeignKeyReference_Match(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniqueWithoutIndexConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniqueWithoutIndexConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniqueWithoutIndexConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= ConstraintValidity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &types.T{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nullable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DefaultExpr = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		case 10:
			if wireType == 0 {
				var v ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsesSequenceIds = append(m.UsesSequenceIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UsesSequenceIds) == 0 {
					m.UsesSequenceIds = make([]ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsesSequenceIds = append(m.UsesSequenceIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsesSequenceIds", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ComputeExpr = &s
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OwnsSequenceIds = append(m.OwnsSequenceIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OwnsSequenceIds) == 0 {
					m.OwnsSequenceIds = make([]ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OwnsSequenceIds = append(m.OwnsSequenceIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnsSequenceIds", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PGAttributeNum", wireType)
			}
			m.PGAttributeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PGAttributeNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlterColumnTypeInProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlterColumnTypeInProgress = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemColumnKind", wireType)
			}
			m.SystemColumnKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemColumnKind |= SystemColumnKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Virtual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Virtual = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inaccessible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inaccessible = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUpdateExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OnUpdateExpr = &s
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratedAsIdentityType", wireType)
			}
			m.GeneratedAsIdentityType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GeneratedAsIdentityType |= GeneratedAsIdentityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratedAsIdentitySequenceOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GeneratedAsIdentitySequenceOption = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnFamilyDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnFamilyDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnFamilyDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= FamilyID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnNames = append(m.ColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultColumnID", wireType)
			}
			m.DefaultColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultColumnID |= ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterleaveDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterleaveDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterleaveDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ancestors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ancestors = append(m.Ancestors, InterleaveDescriptor_Ancestor{})
			if err := m.Ancestors[len(m.Ancestors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterleaveDescriptor_Ancestor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ancestor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ancestor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedPrefixLen", wireType)
			}
			m.SharedPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedPrefixLen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardedDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardedDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardedDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSharded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSharded = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBuckets", wireType)
			}
			m.ShardBuckets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardBuckets |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnNames = append(m.ColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitioningDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitioningDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitioningDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumColumns", wireType)
			}
			m.NumColumns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumColumns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, PartitioningDescriptor_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Range = append(m.Range, PartitioningDescriptor_Range{})
			if err := m.Range[len(m.Range)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumImplicitColumns", wireType)
			}
			m.NumImplicitColumns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumImplicitColumns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitioningDescriptor_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subpartitioning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Subpartitioning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitioningDescriptor_Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToExclusive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToExclusive = append(m.ToExclusive[:0], dAtA[iNdEx:postIndex]...)
			if m.ToExclusive == nil {
				m.ToExclusive = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromInclusive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromInclusive = append(m.FromInclusive[:0], dAtA[iNdEx:postIndex]...)
			if m.FromInclusive == nil {
				m.FromInclusive = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unique = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyColumnNames = append(m.KeyColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreColumnNames = append(m.StoreColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyColumnIDs = append(m.KeyColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyColumnIDs) == 0 {
					m.KeyColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyColumnIDs = append(m.KeyColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyColumnIDs", wireType)
			}
		case 7:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeySuffixColumnIDs = append(m.KeySuffixColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeySuffixColumnIDs) == 0 {
					m.KeySuffixColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeySuffixColumnIDs = append(m.KeySuffixColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySuffixColumnIDs", wireType)
			}
		case 8:
			if wireType == 0 {
				var v IndexDescriptor_Direction
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= IndexDescriptor_Direction(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyColumnDirections = append(m.KeyColumnDirections, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.KeyColumnDirections) == 0 {
					m.KeyColumnDirections = make([]IndexDescriptor_Direction, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v IndexDescriptor_Direction
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= IndexDescriptor_Direction(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyColumnDirections = append(m.KeyColumnDirections, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyColumnDirections", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ForeignKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferencedBy = append(m.ReferencedBy, ForeignKeyReference{})
			if err := m.ReferencedBy[len(m.ReferencedBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interleave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interleave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterleavedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterleavedBy = append(m.InterleavedBy, ForeignKeyReference{})
			if err := m.InterleavedBy[len(m.InterleavedBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompositeColumnIDs = append(m.CompositeColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompositeColumnIDs) == 0 {
					m.CompositeColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompositeColumnIDs = append(m.CompositeColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompositeColumnIDs", wireType)
			}
		case 14:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoreColumnIDs = append(m.StoreColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoreColumnIDs) == 0 {
					m.StoreColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoreColumnIDs = append(m.StoreColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreColumnIDs", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitioning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Partitioning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= IndexDescriptor_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedExplicitly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreatedExplicitly = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= IndexDescriptorVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodingType", wireType)
			}
			m.EncodingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodingType |= IndexDescriptorEncodingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sharded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GeoConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstraintToUpdate) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintToUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintToUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintType", wireType)
			}
			m.ConstraintType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstraintType |= ConstraintToUpdate_ConstraintType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Check.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ForeignKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotNullColumn", wireType)
			}
			m.NotNullColumn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotNullColumn |= ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueWithoutIndexConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UniqueWithoutIndexConstraint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("constraint_type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryKeySwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryKeySwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryKeySwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPrimaryIndexId", wireType)
			}
			m.NewPrimaryIndexId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewPrimaryIndexId |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v IndexID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= IndexID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OldIndexes = append(m.OldIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OldIndexes) == 0 {
					m.OldIndexes = make([]IndexID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v IndexID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= IndexID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OldIndexes = append(m.OldIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OldIndexes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v IndexID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= IndexID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewIndexes = append(m.NewIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NewIndexes) == 0 {
					m.NewIndexes = make([]IndexID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v IndexID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= IndexID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewIndexes = append(m.NewIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewIndexes", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPrimaryIndexId", wireType)
			}
			m.OldPrimaryIndexId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldPrimaryIndexId |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPrimaryIndexName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPrimaryIndexName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityConfigSwap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalityConfigSwap == nil {
				m.LocalityConfigSwap = &PrimaryKeySwap_LocalityConfigSwap{}
			}
			if err := m.LocalityConfigSwap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryKeySwap_LocalityConfigSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalityConfigSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalityConfigSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldLocalityConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OldLocalityConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLocalityConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewLocalityConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRegionalByRowColumnID", wireType)
			}
			var v ColumnID
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewRegionalByRowColumnID = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRegionalByRowColumnDefaultExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NewRegionalByRowColumnDefaultExpr = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputedColumnSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputedColumnSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputedColumnSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewColumnId", wireType)
			}
			m.NewColumnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewColumnId |= ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldColumnId", wireType)
			}
			m.OldColumnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldColumnId |= ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InverseExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InverseExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaterializedViewRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaterializedViewRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaterializedViewRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPrimaryIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewPrimaryIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewIndexes = append(m.NewIndexes, IndexDescriptor{})
			if err := m.NewIndexes[len(m.NewIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AsOf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldBackfill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldBackfill = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescriptorMutation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptorMutation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptorMutation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ColumnDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Descriptor_ = &DescriptorMutation_Column{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IndexDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Descriptor_ = &DescriptorMutation_Index{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= DescriptorMutation_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= DescriptorMutation_Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationID", wireType)
			}
			m.MutationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MutationID |= MutationID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollback", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rollback = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConstraintToUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Descriptor_ = &DescriptorMutation_Constraint{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKeySwap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryKeySwap{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Descriptor_ = &DescriptorMutation_PrimaryKeySwap{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputedColumnSwap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ComputedColumnSwap{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Descriptor_ = &DescriptorMutation_ComputedColumnSwap{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterializedViewRefresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MaterializedViewRefresh{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Descriptor_ = &DescriptorMutation_MaterializedViewRefresh{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSchemaID", wireType)
			}
			m.ParentSchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentSchemaID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= DescriptorVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModificationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, ColumnDescriptor{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextColumnID", wireType)
			}
			m.NextColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextColumnID |= ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimaryIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, IndexDescriptor{})
			if err := m.Indexes[len(m.Indexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIndexID", wireType)
			}
			m.NextIndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIndexID |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Privileges == nil {
				m.Privileges = &PrivilegeDescriptor{}
			}
			if err := m.Privileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mutations = append(m.Mutations, DescriptorMutation{})
			if err := m.Mutations[len(m.Mutations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lease == nil {
				m.Lease = &TableDescriptor_SchemaChangeLease{}
			}
			if err := m.Lease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextMutationID", wireType)
			}
			m.NextMutationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextMutationID |= MutationID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatVersion", wireType)
			}
			m.FormatVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormatVersion |= FormatVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= DescriptorState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checks = append(m.Checks, &TableDescriptor_CheckConstraint{})
			if err := m.Checks[len(m.Checks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainingNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrainingNames = append(m.DrainingNames, NameInfo{})
			if err := m.DrainingNames[len(m.DrainingNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Families", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Families = append(m.Families, ColumnFamilyDescriptor{})
			if err := m.Families[len(m.Families)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextFamilyID", wireType)
			}
			m.NextFamilyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextFamilyID |= FamilyID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewQuery", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewQuery = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType == 0 {
				var v ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DependsOn = append(m.DependsOn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DependsOn) == 0 {
					m.DependsOn = make([]ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DependsOn = append(m.DependsOn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DependsOn", wireType)
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependedOnBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DependedOnBy = append(m.DependedOnBy, TableDescriptor_Reference{})
			if err := m.DependedOnBy[len(m.DependedOnBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationJobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MutationJobs = append(m.MutationJobs, TableDescriptor_MutationJob{})
			if err := m.MutationJobs[len(m.MutationJobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SequenceOpts == nil {
				m.SequenceOpts = &TableDescriptor_SequenceOpts{}
			}
			if err := m.SequenceOpts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTime", wireType)
			}
			m.DropTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacementOf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReplacementOf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditMode", wireType)
			}
			m.AuditMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditMode |= TableDescriptor_AuditMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropJobID", wireType)
			}
			m.DropJobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropJobID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCMutations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCMutations = append(m.GCMutations, TableDescriptor_GCDescriptorMutation{})
			if err := m.GCMutations[len(m.GCMutations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateQuery", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateQuery = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAsOfTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateAsOfTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundFKs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundFKs = append(m.OutboundFKs, ForeignKeyConstraint{})
			if err := m.OutboundFKs[len(m.OutboundFKs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundFKs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundFKs = append(m.InboundFKs, ForeignKeyConstraint{})
			if err := m.InboundFKs[len(m.InboundFKs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfflineReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temporary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Temporary = bool(v != 0)
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnexposedParentSchemaID", wireType)
			}
			m.UnexposedParentSchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnexposedParentSchemaID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMaterializedView", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMaterializedView = bool(v != 0)
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalityConfig == nil {
				m.LocalityConfig = &TableDescriptor_LocalityConfig{}
			}
			if err := m.LocalityConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueWithoutIndexConstraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueWithoutIndexConstraints = append(m.UniqueWithoutIndexConstraints, UniqueWithoutIndexConstraint{})
			if err := m.UniqueWithoutIndexConstraints[len(m.UniqueWithoutIndexConstraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionAllBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartitionAllBy = bool(v != 0)
		case 45:
			if wireType == 0 {
				var v ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DependsOnTypes = append(m.DependsOnTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DependsOnTypes) == 0 {
					m.DependsOnTypes = make([]ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DependsOnTypes = append(m.DependsOnTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DependsOnTypes", wireType)
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSchemaChangeJobID", wireType)
			}
			m.NewSchemaChangeJobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSchemaChangeJobID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_SchemaChangeLease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaChangeLease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaChangeLease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_CheckConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= ConstraintValidity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNonNullConstraint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNonNullConstraint = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_Reference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByID", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByID = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_MutationJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutationJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutationJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationID", wireType)
			}
			m.MutationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MutationID |= MutationID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			m.JobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_SequenceOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequenceOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequenceOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increment", wireType)
			}
			m.Increment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Increment |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			m.MinValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			m.MaxValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Virtual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Virtual = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SequenceOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheSize", wireType)
			}
			m.CacheSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_SequenceOpts_SequenceOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequenceOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequenceOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerColumnID", wireType)
			}
			m.OwnerColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerColumnID |= ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerTableID", wireType)
			}
			m.OwnerTableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerTableID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_Replacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_GCDescriptorMutation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCDescriptorMutation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCDescriptorMutation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTime", wireType)
			}
			m.DropTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			m.JobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_LocalityConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalityConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalityConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Global", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableDescriptor_LocalityConfig_Global{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Locality = &TableDescriptor_LocalityConfig_Global_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalByTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableDescriptor_LocalityConfig_RegionalByTable{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Locality = &TableDescriptor_LocalityConfig_RegionalByTable_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalByRow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableDescriptor_LocalityConfig_RegionalByRow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Locality = &TableDescriptor_LocalityConfig_RegionalByRow_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_LocalityConfig_RegionalByTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionalByTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionalByTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := RegionName(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_LocalityConfig_RegionalByRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionalByRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionalByRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field As", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.As = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDescriptor_LocalityConfig_Global) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Global: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Global: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Privileges == nil {
				m.Privileges = &PrivilegeDescriptor{}
			}
			if err := m.Privileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModificationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= DescriptorVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainingNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrainingNames = append(m.DrainingNames, NameInfo{})
			if err := m.DrainingNames[len(m.DrainingNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schemas == nil {
				m.Schemas = make(map[string]DatabaseDescriptor_SchemaInfo)
			}
			var mapkey string
			mapvalue := &DatabaseDescriptor_SchemaInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStructured
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStructured
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthStructured
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthStructured
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DatabaseDescriptor_SchemaInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStructured(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStructured
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Schemas[mapkey] = *mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= DescriptorState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfflineReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionConfig == nil {
				m.RegionConfig = &DatabaseDescriptor_RegionConfig{}
			}
			if err := m.RegionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrivileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultPrivileges == nil {
				m.DefaultPrivileges = &DefaultPrivilegeDescriptor{}
			}
			if err := m.DefaultPrivileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseDescriptor_SchemaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dropped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dropped = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseDescriptor_RegionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurvivalGoal", wireType)
			}
			m.SurvivalGoal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurvivalGoal |= SurvivalGoal(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryRegion = RegionName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionEnumID", wireType)
			}
			m.RegionEnumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionEnumID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			m.Placement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Placement |= DataPlacement(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSchemaID", wireType)
			}
			m.ParentSchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentSchemaID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= TypeDescriptor_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnumMembers = append(m.EnumMembers, TypeDescriptor_EnumMember{})
			if err := m.EnumMembers[len(m.EnumMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &types.T{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrayTypeID", wireType)
			}
			m.ArrayTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArrayTypeID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= DescriptorVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModificationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainingNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrainingNames = append(m.DrainingNames, NameInfo{})
			if err := m.DrainingNames[len(m.DrainingNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReferencingDescriptorIDs = append(m.ReferencingDescriptorIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStructured
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStructured
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStructured
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReferencingDescriptorIDs) == 0 {
					m.ReferencingDescriptorIDs = make([]ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStructured
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReferencingDescriptorIDs = append(m.ReferencingDescriptorIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencingDescriptorIDs", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= DescriptorState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Privileges == nil {
				m.Privileges = &PrivilegeDescriptor{}
			}
			if err := m.Privileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfflineReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionConfig == nil {
				m.RegionConfig = &TypeDescriptor_RegionConfig{}
			}
			if err := m.RegionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeDescriptor_EnumMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnumMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnumMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalRepresentation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhysicalRepresentation = append(m.PhysicalRepresentation[:0], dAtA[iNdEx:postIndex]...)
			if m.PhysicalRepresentation == nil {
				m.PhysicalRepresentation = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalRepresentation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicalRepresentation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capability", wireType)
			}
			m.Capability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capability |= TypeDescriptor_EnumMember_Capability(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= TypeDescriptor_EnumMember_Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeDescriptor_RegionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryRegion = RegionName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Privileges == nil {
				m.Privileges = &PrivilegeDescriptor{}
			}
			if err := m.Privileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModificationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= DescriptorVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainingNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrainingNames = append(m.DrainingNames, NameInfo{})
			if err := m.DrainingNames[len(m.DrainingNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= DescriptorState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfflineReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Descriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Descriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Descriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Descriptor_Table{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DatabaseDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Descriptor_Database{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TypeDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Descriptor_Type{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructured
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructured
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SchemaDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Descriptor_Schema{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructured(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructured
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStructured(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStructured
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructured
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStructured
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStructured
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStructured
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStructured        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStructured          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStructured = fmt.Errorf("proto: unexpected end of group")
)
