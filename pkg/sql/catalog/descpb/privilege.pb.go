// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/catalog/descpb/privilege.proto

package descpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_security "github.com/cockroachdb/cockroach/pkg/security"
	github_com_cockroachdb_cockroach_pkg_sql_sem_tree "github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UserPrivileges describes the list of privileges available for a given user.
type UserPrivileges struct {
	UserProto github_com_cockroachdb_cockroach_pkg_security.SQLUsernameProto `protobuf:"bytes,1,opt,name=user_proto,json=userProto,casttype=github.com/cockroachdb/cockroach/pkg/security.SQLUsernameProto" json:"user_proto"`
	// privileges is a bitfield of 1<<Privilege values.
	Privileges uint32 `protobuf:"varint,2,opt,name=privileges" json:"privileges"`
}

func (m *UserPrivileges) Reset()         { *m = UserPrivileges{} }
func (m *UserPrivileges) String() string { return proto.CompactTextString(m) }
func (*UserPrivileges) ProtoMessage()    {}
func (*UserPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_9343d951995d5a76, []int{0}
}
func (m *UserPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPrivileges.Merge(m, src)
}
func (m *UserPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *UserPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_UserPrivileges proto.InternalMessageInfo

// PrivilegeDescriptor describes a list of users and attached
// privileges. The list should be sorted by user for fast access.
type PrivilegeDescriptor struct {
	Users      []UserPrivileges                                               `protobuf:"bytes,1,rep,name=users" json:"users"`
	OwnerProto github_com_cockroachdb_cockroach_pkg_security.SQLUsernameProto `protobuf:"bytes,2,opt,name=owner_proto,json=ownerProto,casttype=github.com/cockroachdb/cockroach/pkg/security.SQLUsernameProto" json:"owner_proto"`
	Version    PrivilegeDescVersion                                           `protobuf:"varint,3,opt,name=version,casttype=PrivilegeDescVersion" json:"version"`
}

func (m *PrivilegeDescriptor) Reset()         { *m = PrivilegeDescriptor{} }
func (m *PrivilegeDescriptor) String() string { return proto.CompactTextString(m) }
func (*PrivilegeDescriptor) ProtoMessage()    {}
func (*PrivilegeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9343d951995d5a76, []int{1}
}
func (m *PrivilegeDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivilegeDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrivilegeDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivilegeDescriptor.Merge(m, src)
}
func (m *PrivilegeDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *PrivilegeDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivilegeDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_PrivilegeDescriptor proto.InternalMessageInfo

// DefaultPrivilegesForRole contains the default privileges for a role.
// DefaultPrivileges are the set of privileges that an object created by a user
// should have at creation time.
// DefaultPrivilegesForRole is further broken down depending on the object type.
// The object types (AlterDefaultPrivilegesTargetObject) are:
//   1: Tables
//   2: Sequences
//   3: Types
//   4: Schemas
// DefaultPrivilegesPerObject are keyed on AlterDefaultPrivilegesTargetObject
// and it's value is a PrivilegeDescriptor that is only used for
// the list of UserPrivileges for that object.
type DefaultPrivilegesForRole struct {
	// Types that are valid to be assigned to Role:
	//	*DefaultPrivilegesForRole_UserProto
	//	*DefaultPrivilegesForRole_ForAllRoles
	Role                       isDefaultPrivilegesForRole_Role                                                                              `protobuf_oneof:"role"`
	DefaultPrivilegesPerObject map[github_com_cockroachdb_cockroach_pkg_sql_sem_tree.AlterDefaultPrivilegesTargetObject]PrivilegeDescriptor `protobuf:"bytes,3,rep,name=default_privileges_per_object,json=defaultPrivilegesPerObject,castkey=github.com/cockroachdb/cockroach/pkg/sql/sem/tree.AlterDefaultPrivilegesTargetObject" json:"default_privileges_per_object" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DefaultPrivilegesForRole) Reset()         { *m = DefaultPrivilegesForRole{} }
func (m *DefaultPrivilegesForRole) String() string { return proto.CompactTextString(m) }
func (*DefaultPrivilegesForRole) ProtoMessage()    {}
func (*DefaultPrivilegesForRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_9343d951995d5a76, []int{2}
}
func (m *DefaultPrivilegesForRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPrivilegesForRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPrivilegesForRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPrivilegesForRole.Merge(m, src)
}
func (m *DefaultPrivilegesForRole) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPrivilegesForRole) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPrivilegesForRole.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPrivilegesForRole proto.InternalMessageInfo

type isDefaultPrivilegesForRole_Role interface {
	isDefaultPrivilegesForRole_Role()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DefaultPrivilegesForRole_UserProto struct {
	UserProto github_com_cockroachdb_cockroach_pkg_security.SQLUsernameProto `protobuf:"bytes,1,opt,name=user_proto,json=userProto,oneof,casttype=github.com/cockroachdb/cockroach/pkg/security.SQLUsernameProto" json:"user_proto,omitempty"`
}
type DefaultPrivilegesForRole_ForAllRoles struct {
	ForAllRoles bool `protobuf:"varint,2,opt,name=for_all_roles,json=forAllRoles,oneof" json:"for_all_roles,omitempty"`
}

func (*DefaultPrivilegesForRole_UserProto) isDefaultPrivilegesForRole_Role()   {}
func (*DefaultPrivilegesForRole_ForAllRoles) isDefaultPrivilegesForRole_Role() {}

func (m *DefaultPrivilegesForRole) GetRole() isDefaultPrivilegesForRole_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *DefaultPrivilegesForRole) GetUserProto() github_com_cockroachdb_cockroach_pkg_security.SQLUsernameProto {
	if x, ok := m.GetRole().(*DefaultPrivilegesForRole_UserProto); ok {
		return x.UserProto
	}
	return ""
}

func (m *DefaultPrivilegesForRole) GetForAllRoles() bool {
	if x, ok := m.GetRole().(*DefaultPrivilegesForRole_ForAllRoles); ok {
		return x.ForAllRoles
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DefaultPrivilegesForRole) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DefaultPrivilegesForRole_UserProto)(nil),
		(*DefaultPrivilegesForRole_ForAllRoles)(nil),
	}
}

// DefaultPrivilegeDescriptor describes the set of default privileges for a
// given role + object type.
// The DefaultPrivileges list must be sorted for fast access and user lookups.
type DefaultPrivilegeDescriptor struct {
	DefaultPrivilegesPerRole []DefaultPrivilegesForRole `protobuf:"bytes,1,rep,name=default_privileges_per_role,json=defaultPrivilegesPerRole" json:"default_privileges_per_role"`
}

func (m *DefaultPrivilegeDescriptor) Reset()         { *m = DefaultPrivilegeDescriptor{} }
func (m *DefaultPrivilegeDescriptor) String() string { return proto.CompactTextString(m) }
func (*DefaultPrivilegeDescriptor) ProtoMessage()    {}
func (*DefaultPrivilegeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9343d951995d5a76, []int{3}
}
func (m *DefaultPrivilegeDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPrivilegeDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPrivilegeDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPrivilegeDescriptor.Merge(m, src)
}
func (m *DefaultPrivilegeDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPrivilegeDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPrivilegeDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPrivilegeDescriptor proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UserPrivileges)(nil), "cockroach.sql.sqlbase.UserPrivileges")
	proto.RegisterType((*PrivilegeDescriptor)(nil), "cockroach.sql.sqlbase.PrivilegeDescriptor")
	proto.RegisterType((*DefaultPrivilegesForRole)(nil), "cockroach.sql.sqlbase.DefaultPrivilegesForRole")
	proto.RegisterMapType((map[github_com_cockroachdb_cockroach_pkg_sql_sem_tree.AlterDefaultPrivilegesTargetObject]PrivilegeDescriptor)(nil), "cockroach.sql.sqlbase.DefaultPrivilegesForRole.DefaultPrivilegesPerObjectEntry")
	proto.RegisterType((*DefaultPrivilegeDescriptor)(nil), "cockroach.sql.sqlbase.DefaultPrivilegeDescriptor")
}

func init() {
	proto.RegisterFile("sql/catalog/descpb/privilege.proto", fileDescriptor_9343d951995d5a76)
}

var fileDescriptor_9343d951995d5a76 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xdf, 0x69, 0xd2, 0x6a, 0x27, 0x44, 0x64, 0xad, 0xb0, 0x44, 0xdd, 0x84, 0xa0, 0x10, 0x3c,
	0xec, 0x40, 0x0f, 0x22, 0x3d, 0x88, 0x09, 0xb5, 0xf4, 0x20, 0x34, 0xae, 0xd5, 0x83, 0x08, 0xcb,
	0x66, 0xf2, 0xb2, 0x5d, 0x33, 0xc9, 0x6c, 0x66, 0x66, 0x23, 0xb9, 0xfa, 0x09, 0x3c, 0x7a, 0x54,
	0xfc, 0x32, 0x39, 0xf6, 0xd8, 0x53, 0xd5, 0xe4, 0xe2, 0xd1, 0xb3, 0x17, 0x65, 0x76, 0xb7, 0x49,
	0x63, 0x13, 0x54, 0xf4, 0x10, 0x18, 0x32, 0xef, 0xfd, 0xfe, 0xbc, 0xdf, 0xbc, 0xc5, 0x55, 0x39,
	0x60, 0x84, 0xfa, 0xca, 0x67, 0x3c, 0x20, 0x6d, 0x90, 0x34, 0x6a, 0x91, 0x48, 0x84, 0xc3, 0x90,
	0x41, 0x00, 0x4e, 0x24, 0xb8, 0xe2, 0xe6, 0x75, 0xca, 0x69, 0x57, 0x70, 0x9f, 0x1e, 0x39, 0x72,
	0xc0, 0xf4, 0xaf, 0xe5, 0x4b, 0x28, 0x6d, 0x05, 0x3c, 0xe0, 0x49, 0x05, 0xd1, 0xa7, 0xb4, 0xb8,
	0xfa, 0x11, 0xe1, 0x2b, 0xcf, 0x24, 0x88, 0xe6, 0x19, 0x88, 0x34, 0x01, 0xe3, 0x58, 0x82, 0xf0,
	0x92, 0x02, 0x0b, 0x55, 0x50, 0x6d, 0xb3, 0xb1, 0x37, 0x3e, 0x2d, 0x1b, 0xdf, 0x4f, 0xcb, 0x0f,
	0x82, 0x50, 0x1d, 0xc5, 0x2d, 0x87, 0xf2, 0x1e, 0x99, 0xd1, 0xb4, 0x5b, 0xf3, 0x33, 0x89, 0xba,
	0x01, 0x91, 0x40, 0x63, 0x11, 0xaa, 0x91, 0xf3, 0xf4, 0xc9, 0x63, 0x0d, 0xde, 0xf7, 0x7b, 0xd0,
	0xd4, 0x68, 0xee, 0x66, 0x9c, 0x70, 0x69, 0x99, 0xb7, 0x31, 0x9e, 0x29, 0x97, 0xd6, 0x5a, 0x05,
	0xd5, 0x8a, 0x8d, 0xbc, 0xa6, 0x71, 0xcf, 0xfd, 0xbf, 0x93, 0xff, 0xfa, 0xbe, 0x8c, 0xaa, 0x3f,
	0x10, 0xbe, 0x36, 0x53, 0xb8, 0x0b, 0x92, 0x8a, 0x30, 0x52, 0x5c, 0x98, 0x75, 0xbc, 0xae, 0x01,
	0xa5, 0x85, 0x2a, 0xb9, 0x5a, 0x61, 0xfb, 0x8e, 0xb3, 0xd4, 0xba, 0xb3, 0x68, 0x30, 0x63, 0x49,
	0x3b, 0xcd, 0x00, 0x17, 0xf8, 0xeb, 0xfe, 0xcc, 0xee, 0xda, 0x7f, 0xb5, 0x8b, 0x13, 0xe8, 0xd4,
	0xef, 0x3d, 0x7c, 0x69, 0x08, 0x42, 0x86, 0xbc, 0x6f, 0xe5, 0x12, 0xb3, 0x37, 0x33, 0x92, 0xad,
	0x05, 0x67, 0xcf, 0xd3, 0x1a, 0xf7, 0xac, 0x38, 0x9b, 0xc0, 0x87, 0x3c, 0xb6, 0x76, 0xa1, 0xe3,
	0xc7, 0x4c, 0xcd, 0x9d, 0xec, 0x71, 0xe1, 0x72, 0x06, 0x26, 0x5d, 0x92, 0x58, 0xe3, 0xdf, 0xe5,
	0xef, 0x1b, 0x8b, 0x79, 0x15, 0x3b, 0x5c, 0x78, 0x3e, 0x63, 0x9e, 0xe0, 0x2c, 0x8b, 0xec, 0xf2,
	0xbe, 0xe1, 0x16, 0x3a, 0x5c, 0xd4, 0x19, 0xd3, 0x4a, 0xa4, 0xf9, 0x0d, 0xe1, 0x5b, 0xed, 0x54,
	0xa7, 0x37, 0x8f, 0xd1, 0x8b, 0x40, 0x78, 0xbc, 0xf5, 0x0a, 0xa8, 0xb2, 0x72, 0x49, 0x54, 0x07,
	0x2b, 0xa2, 0x5a, 0xe5, 0xf1, 0xe2, 0x45, 0x13, 0xc4, 0x41, 0x82, 0xf8, 0xa8, 0xaf, 0xc4, 0xa8,
	0xf1, 0x52, 0x4f, 0xf3, 0xcd, 0xa7, 0xf2, 0xe1, 0x9f, 0x79, 0x1e, 0x30, 0x22, 0xa1, 0x47, 0x94,
	0x00, 0x70, 0xea, 0x4c, 0x81, 0xb8, 0x80, 0x7f, 0xe8, 0x8b, 0x00, 0x54, 0x4a, 0xe1, 0x96, 0xda,
	0x2b, 0xe9, 0x4b, 0x23, 0x5c, 0xfe, 0x8d, 0x38, 0xf3, 0x2a, 0xce, 0x75, 0x61, 0x94, 0x24, 0x53,
	0x74, 0xf5, 0xd1, 0x7c, 0x88, 0xd7, 0x87, 0x3e, 0x8b, 0x21, 0x99, 0x62, 0x61, 0xfb, 0xee, 0x8a,
	0x71, 0x2c, 0x79, 0xf4, 0x6e, 0xda, 0xb8, 0xb3, 0x76, 0x1f, 0xa5, 0x6f, 0xa3, 0xb1, 0x81, 0xf3,
	0x3a, 0x91, 0xea, 0x3b, 0x84, 0x4b, 0xbf, 0x2a, 0x39, 0xb7, 0x2c, 0x0a, 0xdf, 0x58, 0x91, 0x8c,
	0xee, 0xce, 0x56, 0x88, 0xfc, 0x65, 0x2e, 0xd9, 0x32, 0x59, 0xcb, 0xe6, 0xa3, 0xef, 0x33, 0x89,
	0xb5, 0xf1, 0x17, 0xdb, 0x18, 0x4f, 0x6c, 0x74, 0x3c, 0xb1, 0xd1, 0xc9, 0xc4, 0x46, 0x9f, 0x27,
	0x36, 0x7a, 0x3b, 0xb5, 0x8d, 0xe3, 0xa9, 0x6d, 0x9c, 0x4c, 0x6d, 0xe3, 0xc5, 0x46, 0xfa, 0x35,
	0xfb, 0x19, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x8f, 0xad, 0x2e, 0xe2, 0x04, 0x00, 0x00,
}

func (this *UserPrivileges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserPrivileges)
	if !ok {
		that2, ok := that.(UserPrivileges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserProto != that1.UserProto {
		return false
	}
	if this.Privileges != that1.Privileges {
		return false
	}
	return true
}
func (this *PrivilegeDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrivilegeDescriptor)
	if !ok {
		that2, ok := that.(PrivilegeDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(&that1.Users[i]) {
			return false
		}
	}
	if this.OwnerProto != that1.OwnerProto {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *DefaultPrivilegesForRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegesForRole)
	if !ok {
		that2, ok := that.(DefaultPrivilegesForRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Role == nil {
		if this.Role != nil {
			return false
		}
	} else if this.Role == nil {
		return false
	} else if !this.Role.Equal(that1.Role) {
		return false
	}
	if len(this.DefaultPrivilegesPerObject) != len(that1.DefaultPrivilegesPerObject) {
		return false
	}
	for i := range this.DefaultPrivilegesPerObject {
		a := this.DefaultPrivilegesPerObject[i]
		b := that1.DefaultPrivilegesPerObject[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *DefaultPrivilegesForRole_UserProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegesForRole_UserProto)
	if !ok {
		that2, ok := that.(DefaultPrivilegesForRole_UserProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserProto != that1.UserProto {
		return false
	}
	return true
}
func (this *DefaultPrivilegesForRole_ForAllRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegesForRole_ForAllRoles)
	if !ok {
		that2, ok := that.(DefaultPrivilegesForRole_ForAllRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForAllRoles != that1.ForAllRoles {
		return false
	}
	return true
}
func (this *DefaultPrivilegeDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegeDescriptor)
	if !ok {
		that2, ok := that.(DefaultPrivilegeDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DefaultPrivilegesPerRole) != len(that1.DefaultPrivilegesPerRole) {
		return false
	}
	for i := range this.DefaultPrivilegesPerRole {
		if !this.DefaultPrivilegesPerRole[i].Equal(&that1.DefaultPrivilegesPerRole[i]) {
			return false
		}
	}
	return true
}
func (m *UserPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintPrivilege(dAtA, i, uint64(m.Privileges))
	i--
	dAtA[i] = 0x10
	i -= len(m.UserProto)
	copy(dAtA[i:], m.UserProto)
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.UserProto)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PrivilegeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivilegeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivilegeDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintPrivilege(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x18
	i -= len(m.OwnerProto)
	copy(dAtA[i:], m.OwnerProto)
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.OwnerProto)))
	i--
	dAtA[i] = 0x12
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivilege(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefaultPrivilegesForRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPrivilegesForRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegesForRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultPrivilegesPerObject) > 0 {
		keysForDefaultPrivilegesPerObject := make([]uint32, 0, len(m.DefaultPrivilegesPerObject))
		for k := range m.DefaultPrivilegesPerObject {
			keysForDefaultPrivilegesPerObject = append(keysForDefaultPrivilegesPerObject, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForDefaultPrivilegesPerObject)
		for iNdEx := len(keysForDefaultPrivilegesPerObject) - 1; iNdEx >= 0; iNdEx-- {
			v := m.DefaultPrivilegesPerObject[github_com_cockroachdb_cockroach_pkg_sql_sem_tree.AlterDefaultPrivilegesTargetObject(keysForDefaultPrivilegesPerObject[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivilege(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintPrivilege(dAtA, i, uint64(keysForDefaultPrivilegesPerObject[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPrivilege(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Role != nil {
		{
			size := m.Role.Size()
			i -= size
			if _, err := m.Role.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefaultPrivilegesForRole_UserProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegesForRole_UserProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.UserProto)
	copy(dAtA[i:], m.UserProto)
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.UserProto)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *DefaultPrivilegesForRole_ForAllRoles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegesForRole_ForAllRoles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ForAllRoles {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *DefaultPrivilegeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPrivilegeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegeDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultPrivilegesPerRole) > 0 {
		for iNdEx := len(m.DefaultPrivilegesPerRole) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultPrivilegesPerRole[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivilege(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrivilege(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivilege(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserProto)
	n += 1 + l + sovPrivilege(uint64(l))
	n += 1 + sovPrivilege(uint64(m.Privileges))
	return n
}

func (m *PrivilegeDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovPrivilege(uint64(l))
		}
	}
	l = len(m.OwnerProto)
	n += 1 + l + sovPrivilege(uint64(l))
	n += 1 + sovPrivilege(uint64(m.Version))
	return n
}

func (m *DefaultPrivilegesForRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		n += m.Role.Size()
	}
	if len(m.DefaultPrivilegesPerObject) > 0 {
		for k, v := range m.DefaultPrivilegesPerObject {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovPrivilege(uint64(k)) + 1 + l + sovPrivilege(uint64(l))
			n += mapEntrySize + 1 + sovPrivilege(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DefaultPrivilegesForRole_UserProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserProto)
	n += 1 + l + sovPrivilege(uint64(l))
	return n
}
func (m *DefaultPrivilegesForRole_ForAllRoles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *DefaultPrivilegeDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DefaultPrivilegesPerRole) > 0 {
		for _, e := range m.DefaultPrivilegesPerRole {
			l = e.Size()
			n += 1 + l + sovPrivilege(uint64(l))
		}
	}
	return n
}

func sovPrivilege(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivilege(x uint64) (n int) {
	return sovPrivilege(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserProto = github_com_cockroachdb_cockroach_pkg_security.SQLUsernameProto(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			m.Privileges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Privileges |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivilegeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivilegeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivilegeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, UserPrivileges{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerProto = github_com_cockroachdb_cockroach_pkg_security.SQLUsernameProto(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= PrivilegeDescVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPrivilegesForRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultPrivilegesForRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultPrivilegesForRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = &DefaultPrivilegesForRole_UserProto{github_com_cockroachdb_cockroach_pkg_security.SQLUsernameProto(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForAllRoles", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Role = &DefaultPrivilegesForRole_ForAllRoles{b}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrivilegesPerObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultPrivilegesPerObject == nil {
				m.DefaultPrivilegesPerObject = make(map[github_com_cockroachdb_cockroach_pkg_sql_sem_tree.AlterDefaultPrivilegesTargetObject]PrivilegeDescriptor)
			}
			var mapkey uint32
			mapvalue := &PrivilegeDescriptor{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPrivilege
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPrivilege
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPrivilege
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPrivilege
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPrivilege
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PrivilegeDescriptor{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPrivilege(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPrivilege
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DefaultPrivilegesPerObject[github_com_cockroachdb_cockroach_pkg_sql_sem_tree.AlterDefaultPrivilegesTargetObject(mapkey)] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPrivilegeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultPrivilegeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultPrivilegeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrivilegesPerRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultPrivilegesPerRole = append(m.DefaultPrivilegesPerRole, DefaultPrivilegesForRole{})
			if err := m.DefaultPrivilegesPerRole[len(m.DefaultPrivilegesPerRole)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivilege(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivilege
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivilege
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivilege
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivilege        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivilege          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivilege = fmt.Errorf("proto: unexpected end of group")
)
