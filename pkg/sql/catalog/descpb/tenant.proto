// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto2";
package cockroach.sql.sqlbase;
option go_package = "descpb";

import "gogoproto/gogo.proto";
import "roachpb/api.proto";
import "multitenant/tenantcapabilities/tenantcapabilitiespb/capabilities.proto";

// TenantInfo represents a tenant in a multi-tenant cluster and is
// stored in the "info" column of the "system.tenants" table. The
// TenantInfo has a globally-unique ID.
message TenantInfo {
  option (gogoproto.equal) = true;

  // The state of the tenant's logical keyspace.
  enum DataState {
    // Tenant data is ready and SQL servers can access it.
    READY = 0;
    // Tenant data is being added. Not available for SQL sessions.
    ADD = 1;
    // Tenant data is being dropped. Not available for SQL sessions.
    DROP = 2;
  }

  // ID is the internal numeric identifier of the tenant.
  // It remains mostly invisible to clients.
  optional uint64 id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];

  // DataState is the state of the tenant's keyspace. Refer to the
  // definition of DataState above for details.
  optional DataState data_state = 2 [(gogoproto.nullable) = false];

  // Name is the name of the tenant. Beware that the column name is "fixed"
  // because it is referred to in a virtual column definition in system.tenants.
  optional string name = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/roachpb.TenantName"];

  // DroppedName is the name the tenant had before DROP TENANT was
  // run on the tenant. It should be empty for active or adding
  // tenants.
  optional string dropped_name = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/roachpb.TenantName"];

  // TenantReplicationJobID is set if this tenant is the target tenant
  // of a running tenant replication job.
  optional int64 tenant_replication_job_id = 5 [
     (gogoproto.nullable) = false,
     (gogoproto.customname) = "TenantReplicationJobID",
     (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb.JobID"];

  // Capabilities encapsulate a set of capabilities that a specific tenant
  // possesses.
  optional cockroach.multitenant.tenantcapabilitiespb.TenantCapabilities capabilities = 6 [
    (gogoproto.nullable) = false
  ];
}

// TenantInfoAndUsage contains the information for a tenant in a multi-tenant
// cluster plus metadata related to cost control and consumption.
message TenantInfoWithUsage {
  option (gogoproto.equal) = true;

  // Usage contains metadata related to cost control and consumption. In a
  // running cluster, this data is stored in the system.tenant_usage table.
  // Each field corresponds has a corresponding column in that table.
  message Usage {
    option (gogoproto.equal) = true;

    optional double ru_burst_limit = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "RUBurstLimit"];
    optional double ru_refill_rate = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "RURefillRate"];
    optional double ru_current = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "RUCurrent"];

    // All-time consumption for this tenant. Each field has a corresponding column
    // in system.tenant_usage.
    optional roachpb.TenantConsumption consumption = 4 [(gogoproto.nullable) = false];
  }
  optional TenantInfo info = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  optional Usage usage = 2;
}
