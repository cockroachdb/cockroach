// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

// Cannot be proto3 because we use nullable primitives.
syntax = "proto2";
package cockroach.sql.sem.types;
option go_package = "types";

import "gogoproto/gogo.proto";


// Protobuf encoding for scalar types
// ==================================
//
// Simple (unary) scalars types
// ----------------------------
//
// | SQL type          | Semantic Type  | Visible Type | Precision | Width | Notes            |
// |-------------------|----------------|--------------|-----------|-------|------------------|
// | NULL (unknown)    | NULL           | NONE         | 0         | 0     |                  |
// | BOOL              | BOOL           | NONE         | 0         | 0     |                  |
// | DATE              | DATE           | NONE         | 0         | 0     |                  |
// | TIMESTAMP         | TIMESTAMP      | NONE         | 0         | 0     |                  |
// | TIMESTAMPTZ       | TIMESTAMPTZ    | NONE         | 0         | 0     |                  |
// | INTERVAL          | INTERVAL       | NONE         | 0         | 0     |                  |
// | NAME              | NAME           | NONE         | 0         | 0     |                  |
// | OID               | OID            | NONE         | 0         | 0     |                  |
// | UUID              | UUID           | NONE         | 0         | 0     |                  |
// | INET              | INET           | NONE         | 0         | 0     |                  |
// | TIME              | TIME           | NONE         | 0         | 0     |                  |
// | JSON              | JSON           | NONE         | 0         | 0     |                  |
// |                   |                |              |           |       |                  |
// | BYTES             | BYTES          | NONE         | 0         | 0     |                  |
// |                   |                |              |           |       |                  |
// | STRING            | STRING         | NONE         | 0         | 0     |                  |
// | STRING(N)         | STRING         | NONE         | 0         | N     |                  |
// | VARCHAR           | STRING         | VARCHAR      | 0         | 0     |                  |
// | VARCHAR(N)        | STRING         | VARCHAR      | 0         | N     |                  |
// | CHAR              | STRING         | CHAR         | 0         | 1     |                  |
// | CHAR(N)           | STRING         | CHAR         | 0         | N     |                  |
// | "char"            | STRING         | QCHAR        | 0         | 0     |                  |
// |                   |                |              |           |       |                  |
// | COLLATEDSTRING    | COLLATEDSTRING | NONE         | 0         | 0     | also uses Locale |
// | COLLATEDSTRING(N) | COLLATEDSTRING | NONE         | 0         | N     | also uses Locale |
// |                   |                |              |           |       |                  |
// | DECIMAL           | DECIMAL        | NONE         | 0         | 0     |                  |
// | DECIMAL(N)        | DECIMAL        | NONE         | N         | 0     |                  |
// | DECIMAL(N,M)      | DECIMAL        | NONE         | N         | M     |                  |
// |                   |                |              |           |       |                  |
// | FLOAT8            | FLOAT          | NONE         | 0         | 0     |                  |
// | FLOAT4            | FLOAT          | REAL         | 0         | 0     |                  |
// |                   |                |              |           |       |                  |
// | BIT               | BIT            | NONE         | 0         | 1     |                  |
// | BIT(N)            | BIT            | NONE         | 0         | N     |                  |
// | VARBIT            | BIT            | VARBIT       | 0         | 0     |                  |
// | VARBIT(N)         | BIT            | VARBIT       | 0         | N     |                  |
// |                   |                |              |           |       |                  |
// | INT,INTEGER       | INT            | NONE         | 0         | 0     |                  |
// | INT2,SMALLINT     | INT            | NONE         | 0         | 16    |                  |
// | INT4              | INT            | NONE         | 0         | 32    |                  |
// | INT8,INT64,BIGINT | INT            | NONE         | 0         | 64    |                  |
//
// Tuple columns
// -------------
//
// These cannot (yet) be used in tables but are used in DistSQL flow
// processors for queries that have tuple-typed intermediate results.
//
// - SemanticType is set to TUPLE.
// - TupleContents contains the tuple element types. These can be recursively defined.
// - TupleLabels contains the tuple labels, if any.
//
// Array values
// ------------
//
// | Field           | Description                                                         |
// |-----------------|---------------------------------------------------------------------|
// | SemanticType    | ARRAY (with 2 exceptions, see below)                                |
// | ArrayDimensions | array sizes in each dimension.                                      |
// | ArrayContents   | semantic type of the array elements, as per the two sections above. |
// | VisibleType     | describes the element type like above.                              |
// | Width           | describes the element type like above.                              |
// | Precision       | describes the element type like above.                              |
// | TupleContents   | describes the element type like above. (Arrays of tuples)           |
// | TupleLabels     | describes the element type like above. (Arrays of tuples)           |
//
// If the original type was INT2VECTOR or OIDVECTOR, the semantic type is set to that. The
// other fields are set as per regular arrays:
//
// - INT2VECTOR: SemanticType=INT2VECTOR, ArrayContents=INT,
//   VisibleType=NONE, Width=0, Prec=0, TupleContents/Labels=nil
// - OIDVECTOR: SemanticType=OIDVECTOR, ArrayContents=OID,
//   VisibleType=NONE, Width=0, Prec=0, TupleContents/Labels=nil
//

// These mirror the types supported by sql/coltypes.
//
// Note: when adding constants to this list or renaming constants,
// verify with PostgreSQL what the type name should be in
// information_schema.columns.data_type, and modify
// (*ColumnType).InformationSchemaVisibleType() accordingly.
//

enum SemanticType {
    option (gogoproto.goproto_enum_prefix) = false;

    BOOL = 0;
    INT = 1;        // INT(width)
    FLOAT = 2;      // FLOAT(precision)
    DECIMAL = 3;    // DECIMAL(precision, width /* scale */)
    DATE = 4;
    TIMESTAMP = 5;
    INTERVAL = 6;
    STRING = 7;     // STRING(width)
    BYTES = 8;
    TIMESTAMPTZ = 9;
    COLLATEDSTRING = 10;  // Collated STRING, CHAR, and VARCHAR
    // Collated string key columns are encoded partly as a key and partly as a
    // value. The key part is the collation key, so that different strings that
    // collate equal cannot both be used as keys. The value part is the usual
    // UTF-8 encoding of the string. This creates several special cases in the
    // encode/decode logic.

    NAME = 11;
    OID = 12;

    // NULL is not supported as a table column type, however it can be
    // transferred through distsql streams.
    NULL = 13;

    UUID = 14;
    ARRAY = 15;
    INET = 16;
    TIME = 17;
    JSONB = 18;
    reserved 19; // Reserved for TIMETZ if/when fully implemented. See #26097.
    TUPLE = 20;
    BIT = 21;

    INT2VECTOR = 200;
    OIDVECTOR = 201;

    // Special type used during static analysis. This should never be present
    // at execution time.
    ANY = 100;
}

enum VisibleType {
    option (gogoproto.enum_customname) = "VisibleType";

    NONE = 0;
    INTEGER = 1;   // Deprecated, remove post-2.2.
    SMALLINT = 2;  // Deprecated, remove post-2.2.
    BIGINT = 3;    // Deprecated, remove post-2.2.
    reserved 4;    // Pre-2.1 BIT. Not used any more.
    REAL = 5;
    DOUBLE_PRECISION = 6; // Deprecated, remove post-2.2.
    VARCHAR = 7;
    CHAR = 8;
    QCHAR = 9;
    VARBIT = 10;
}

message ColumnType {
    option (gogoproto.equal) = true;

    optional SemanticType semantic_type = 1 [(gogoproto.nullable) = false];
    // INT, DECIMAL, CHAR and BINARY
    optional int32 width = 2 [(gogoproto.nullable) = false];
    // DECIMAL
    // Also FLOAT pre-2.1 (this was incorrect.)
    optional int32 precision = 3 [(gogoproto.nullable) = false];
    // The length of each dimension in the array. A dimension of -1 means that
    // no bound was specified for that dimension.
    repeated int32 array_dimensions = 4;
    // Collated STRING, CHAR, and VARCHAR
    optional string locale = 5;
    // Alias for any types where our internal representation is different than
    // the user specification. Examples are INT4, FLOAT4, etc. Mostly for Postgres
    // compatibility.
    optional VisibleType visible_type = 6 [(gogoproto.nullable) = false];
    // Only used if the kind is ARRAY.
    optional SemanticType array_contents = 7;
    // Only used if the kind is TUPLE
    repeated ColumnType tuple_contents = 8 [(gogoproto.nullable) = false];
    repeated string tuple_labels = 9;
}
