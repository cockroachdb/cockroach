// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

// Code generated by eval_gen.go. DO NOT EDIT.
// Regenerate this file with either of the following commands:
//
//   ./dev generate go
//   go generate ./pkg/sql/sem/tree
//
// If you use the dev command and you have added a new tree expression, like
// tree.XYZ in a new file, you may get the confusing error: undefined: XYZ.
// Run './dev generate bazel' to fix this.
package tree


// UnaryEvalOp is a unary operation which can be evaluated.
type UnaryEvalOp interface {
	Eval(OpEvaluator, Datum) (Datum, error)
}

// BinaryEvalOp is a binary operation which can be evaluated.
type BinaryEvalOp interface {
	Eval(OpEvaluator, Datum, Datum) (Datum, error)
}

// OpEvaluator is an evaluator for UnaryEvalOp and BinaryEvalOp operations.
type OpEvaluator interface {
	UnaryOpEvaluator
	BinaryOpEvaluator
}

// UnaryOpEvaluator knows how to evaluate UnaryEvalOps.
type UnaryOpEvaluator interface {
	EvalCbrtDecimalOp(*CbrtDecimalOp, Datum) (Datum, error)
	EvalCbrtFloatOp(*CbrtFloatOp, Datum) (Datum, error)
	EvalComplementINetOp(*ComplementINetOp, Datum) (Datum, error)
	EvalComplementIntOp(*ComplementIntOp, Datum) (Datum, error)
	EvalComplementVarBitOp(*ComplementVarBitOp, Datum) (Datum, error)
	EvalSqrtDecimalOp(*SqrtDecimalOp, Datum) (Datum, error)
	EvalSqrtFloatOp(*SqrtFloatOp, Datum) (Datum, error)
	EvalUnaryMinusDecimalOp(*UnaryMinusDecimalOp, Datum) (Datum, error)
	EvalUnaryMinusFloatOp(*UnaryMinusFloatOp, Datum) (Datum, error)
	EvalUnaryMinusIntOp(*UnaryMinusIntOp, Datum) (Datum, error)
	EvalUnaryMinusIntervalOp(*UnaryMinusIntervalOp, Datum) (Datum, error)
}

// UnaryOpEvaluator knows how to evaluate BinaryEvalOps.
type BinaryOpEvaluator interface {
	EvalAppendToMaybeNullArrayOp(*AppendToMaybeNullArrayOp, Datum, Datum) (Datum, error)
	EvalBitAndINetOp(*BitAndINetOp, Datum, Datum) (Datum, error)
	EvalBitAndIntOp(*BitAndIntOp, Datum, Datum) (Datum, error)
	EvalBitAndVarBitOp(*BitAndVarBitOp, Datum, Datum) (Datum, error)
	EvalBitOrINetOp(*BitOrINetOp, Datum, Datum) (Datum, error)
	EvalBitOrIntOp(*BitOrIntOp, Datum, Datum) (Datum, error)
	EvalBitOrVarBitOp(*BitOrVarBitOp, Datum, Datum) (Datum, error)
	EvalBitXorIntOp(*BitXorIntOp, Datum, Datum) (Datum, error)
	EvalBitXorVarBitOp(*BitXorVarBitOp, Datum, Datum) (Datum, error)
	EvalCompareBox2DOp(*CompareBox2DOp, Datum, Datum) (Datum, error)
	EvalCompareScalarOp(*CompareScalarOp, Datum, Datum) (Datum, error)
	EvalCompareTupleOp(*CompareTupleOp, Datum, Datum) (Datum, error)
	EvalConcatArraysOp(*ConcatArraysOp, Datum, Datum) (Datum, error)
	EvalConcatBytesOp(*ConcatBytesOp, Datum, Datum) (Datum, error)
	EvalConcatJsonbOp(*ConcatJsonbOp, Datum, Datum) (Datum, error)
	EvalConcatOp(*ConcatOp, Datum, Datum) (Datum, error)
	EvalConcatStringOp(*ConcatStringOp, Datum, Datum) (Datum, error)
	EvalConcatVarBitOp(*ConcatVarBitOp, Datum, Datum) (Datum, error)
	EvalContainedByArrayOp(*ContainedByArrayOp, Datum, Datum) (Datum, error)
	EvalContainedByJsonbOp(*ContainedByJsonbOp, Datum, Datum) (Datum, error)
	EvalContainsArrayOp(*ContainsArrayOp, Datum, Datum) (Datum, error)
	EvalContainsJsonbOp(*ContainsJsonbOp, Datum, Datum) (Datum, error)
	EvalDivDecimalIntOp(*DivDecimalIntOp, Datum, Datum) (Datum, error)
	EvalDivDecimalOp(*DivDecimalOp, Datum, Datum) (Datum, error)
	EvalDivFloatOp(*DivFloatOp, Datum, Datum) (Datum, error)
	EvalDivIntDecimalOp(*DivIntDecimalOp, Datum, Datum) (Datum, error)
	EvalDivIntOp(*DivIntOp, Datum, Datum) (Datum, error)
	EvalDivIntervalFloatOp(*DivIntervalFloatOp, Datum, Datum) (Datum, error)
	EvalDivIntervalIntOp(*DivIntervalIntOp, Datum, Datum) (Datum, error)
	EvalFloorDivDecimalIntOp(*FloorDivDecimalIntOp, Datum, Datum) (Datum, error)
	EvalFloorDivDecimalOp(*FloorDivDecimalOp, Datum, Datum) (Datum, error)
	EvalFloorDivFloatOp(*FloorDivFloatOp, Datum, Datum) (Datum, error)
	EvalFloorDivIntDecimalOp(*FloorDivIntDecimalOp, Datum, Datum) (Datum, error)
	EvalFloorDivIntOp(*FloorDivIntOp, Datum, Datum) (Datum, error)
	EvalInTupleOp(*InTupleOp, Datum, Datum) (Datum, error)
	EvalJSONAllExistsOp(*JSONAllExistsOp, Datum, Datum) (Datum, error)
	EvalJSONExistsOp(*JSONExistsOp, Datum, Datum) (Datum, error)
	EvalJSONFetchTextIntOp(*JSONFetchTextIntOp, Datum, Datum) (Datum, error)
	EvalJSONFetchTextPathOp(*JSONFetchTextPathOp, Datum, Datum) (Datum, error)
	EvalJSONFetchTextStringOp(*JSONFetchTextStringOp, Datum, Datum) (Datum, error)
	EvalJSONFetchValIntOp(*JSONFetchValIntOp, Datum, Datum) (Datum, error)
	EvalJSONFetchValPathOp(*JSONFetchValPathOp, Datum, Datum) (Datum, error)
	EvalJSONFetchValStringOp(*JSONFetchValStringOp, Datum, Datum) (Datum, error)
	EvalJSONSomeExistsOp(*JSONSomeExistsOp, Datum, Datum) (Datum, error)
	EvalLShiftINetOp(*LShiftINetOp, Datum, Datum) (Datum, error)
	EvalLShiftIntOp(*LShiftIntOp, Datum, Datum) (Datum, error)
	EvalLShiftVarBitIntOp(*LShiftVarBitIntOp, Datum, Datum) (Datum, error)
	EvalMatchLikeOp(*MatchLikeOp, Datum, Datum) (Datum, error)
	EvalMatchRegexpOp(*MatchRegexpOp, Datum, Datum) (Datum, error)
	EvalMinusDateIntOp(*MinusDateIntOp, Datum, Datum) (Datum, error)
	EvalMinusDateIntervalOp(*MinusDateIntervalOp, Datum, Datum) (Datum, error)
	EvalMinusDateOp(*MinusDateOp, Datum, Datum) (Datum, error)
	EvalMinusDateTimeOp(*MinusDateTimeOp, Datum, Datum) (Datum, error)
	EvalMinusDecimalIntOp(*MinusDecimalIntOp, Datum, Datum) (Datum, error)
	EvalMinusDecimalOp(*MinusDecimalOp, Datum, Datum) (Datum, error)
	EvalMinusFloatOp(*MinusFloatOp, Datum, Datum) (Datum, error)
	EvalMinusINetIntOp(*MinusINetIntOp, Datum, Datum) (Datum, error)
	EvalMinusINetOp(*MinusINetOp, Datum, Datum) (Datum, error)
	EvalMinusIntDecimalOp(*MinusIntDecimalOp, Datum, Datum) (Datum, error)
	EvalMinusIntOp(*MinusIntOp, Datum, Datum) (Datum, error)
	EvalMinusIntervalOp(*MinusIntervalOp, Datum, Datum) (Datum, error)
	EvalMinusJsonbIntOp(*MinusJsonbIntOp, Datum, Datum) (Datum, error)
	EvalMinusJsonbStringArrayOp(*MinusJsonbStringArrayOp, Datum, Datum) (Datum, error)
	EvalMinusJsonbStringOp(*MinusJsonbStringOp, Datum, Datum) (Datum, error)
	EvalMinusTimeIntervalOp(*MinusTimeIntervalOp, Datum, Datum) (Datum, error)
	EvalMinusTimeOp(*MinusTimeOp, Datum, Datum) (Datum, error)
	EvalMinusTimeTZIntervalOp(*MinusTimeTZIntervalOp, Datum, Datum) (Datum, error)
	EvalMinusTimestampIntervalOp(*MinusTimestampIntervalOp, Datum, Datum) (Datum, error)
	EvalMinusTimestampOp(*MinusTimestampOp, Datum, Datum) (Datum, error)
	EvalMinusTimestampTZIntervalOp(*MinusTimestampTZIntervalOp, Datum, Datum) (Datum, error)
	EvalMinusTimestampTZOp(*MinusTimestampTZOp, Datum, Datum) (Datum, error)
	EvalMinusTimestampTZTimestampOp(*MinusTimestampTZTimestampOp, Datum, Datum) (Datum, error)
	EvalMinusTimestampTimestampTZOp(*MinusTimestampTimestampTZOp, Datum, Datum) (Datum, error)
	EvalModDecimalIntOp(*ModDecimalIntOp, Datum, Datum) (Datum, error)
	EvalModDecimalOp(*ModDecimalOp, Datum, Datum) (Datum, error)
	EvalModFloatOp(*ModFloatOp, Datum, Datum) (Datum, error)
	EvalModIntDecimalOp(*ModIntDecimalOp, Datum, Datum) (Datum, error)
	EvalModIntOp(*ModIntOp, Datum, Datum) (Datum, error)
	EvalModStringOp(*ModStringOp, Datum, Datum) (Datum, error)
	EvalMultDecimalIntOp(*MultDecimalIntOp, Datum, Datum) (Datum, error)
	EvalMultDecimalIntervalOp(*MultDecimalIntervalOp, Datum, Datum) (Datum, error)
	EvalMultDecimalOp(*MultDecimalOp, Datum, Datum) (Datum, error)
	EvalMultFloatIntervalOp(*MultFloatIntervalOp, Datum, Datum) (Datum, error)
	EvalMultFloatOp(*MultFloatOp, Datum, Datum) (Datum, error)
	EvalMultIntDecimalOp(*MultIntDecimalOp, Datum, Datum) (Datum, error)
	EvalMultIntIntervalOp(*MultIntIntervalOp, Datum, Datum) (Datum, error)
	EvalMultIntOp(*MultIntOp, Datum, Datum) (Datum, error)
	EvalMultIntervalDecimalOp(*MultIntervalDecimalOp, Datum, Datum) (Datum, error)
	EvalMultIntervalFloatOp(*MultIntervalFloatOp, Datum, Datum) (Datum, error)
	EvalMultIntervalIntOp(*MultIntervalIntOp, Datum, Datum) (Datum, error)
	EvalOverlapsArrayOp(*OverlapsArrayOp, Datum, Datum) (Datum, error)
	EvalOverlapsINetOp(*OverlapsINetOp, Datum, Datum) (Datum, error)
	EvalPlusDateIntOp(*PlusDateIntOp, Datum, Datum) (Datum, error)
	EvalPlusDateIntervalOp(*PlusDateIntervalOp, Datum, Datum) (Datum, error)
	EvalPlusDateTimeOp(*PlusDateTimeOp, Datum, Datum) (Datum, error)
	EvalPlusDateTimeTZOp(*PlusDateTimeTZOp, Datum, Datum) (Datum, error)
	EvalPlusDecimalIntOp(*PlusDecimalIntOp, Datum, Datum) (Datum, error)
	EvalPlusDecimalOp(*PlusDecimalOp, Datum, Datum) (Datum, error)
	EvalPlusFloatOp(*PlusFloatOp, Datum, Datum) (Datum, error)
	EvalPlusINetIntOp(*PlusINetIntOp, Datum, Datum) (Datum, error)
	EvalPlusIntDateOp(*PlusIntDateOp, Datum, Datum) (Datum, error)
	EvalPlusIntDecimalOp(*PlusIntDecimalOp, Datum, Datum) (Datum, error)
	EvalPlusIntINetOp(*PlusIntINetOp, Datum, Datum) (Datum, error)
	EvalPlusIntOp(*PlusIntOp, Datum, Datum) (Datum, error)
	EvalPlusIntervalDateOp(*PlusIntervalDateOp, Datum, Datum) (Datum, error)
	EvalPlusIntervalOp(*PlusIntervalOp, Datum, Datum) (Datum, error)
	EvalPlusIntervalTimeOp(*PlusIntervalTimeOp, Datum, Datum) (Datum, error)
	EvalPlusIntervalTimeTZOp(*PlusIntervalTimeTZOp, Datum, Datum) (Datum, error)
	EvalPlusIntervalTimestampOp(*PlusIntervalTimestampOp, Datum, Datum) (Datum, error)
	EvalPlusIntervalTimestampTZOp(*PlusIntervalTimestampTZOp, Datum, Datum) (Datum, error)
	EvalPlusTimeDateOp(*PlusTimeDateOp, Datum, Datum) (Datum, error)
	EvalPlusTimeIntervalOp(*PlusTimeIntervalOp, Datum, Datum) (Datum, error)
	EvalPlusTimeTZDateOp(*PlusTimeTZDateOp, Datum, Datum) (Datum, error)
	EvalPlusTimeTZIntervalOp(*PlusTimeTZIntervalOp, Datum, Datum) (Datum, error)
	EvalPlusTimestampIntervalOp(*PlusTimestampIntervalOp, Datum, Datum) (Datum, error)
	EvalPlusTimestampTZIntervalOp(*PlusTimestampTZIntervalOp, Datum, Datum) (Datum, error)
	EvalPowDecimalIntOp(*PowDecimalIntOp, Datum, Datum) (Datum, error)
	EvalPowDecimalOp(*PowDecimalOp, Datum, Datum) (Datum, error)
	EvalPowFloatOp(*PowFloatOp, Datum, Datum) (Datum, error)
	EvalPowIntDecimalOp(*PowIntDecimalOp, Datum, Datum) (Datum, error)
	EvalPowIntOp(*PowIntOp, Datum, Datum) (Datum, error)
	EvalPrependToMaybeNullArrayOp(*PrependToMaybeNullArrayOp, Datum, Datum) (Datum, error)
	EvalRShiftINetOp(*RShiftINetOp, Datum, Datum) (Datum, error)
	EvalRShiftIntOp(*RShiftIntOp, Datum, Datum) (Datum, error)
	EvalRShiftVarBitIntOp(*RShiftVarBitIntOp, Datum, Datum) (Datum, error)
	EvalSimilarToOp(*SimilarToOp, Datum, Datum) (Datum, error)
}


// Eval is part of the UnaryEvalOp interface.
func (op *CbrtDecimalOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalCbrtDecimalOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *CbrtFloatOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalCbrtFloatOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *ComplementINetOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalComplementINetOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *ComplementIntOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalComplementIntOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *ComplementVarBitOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalComplementVarBitOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *SqrtDecimalOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalSqrtDecimalOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *SqrtFloatOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalSqrtFloatOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *UnaryMinusDecimalOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalUnaryMinusDecimalOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *UnaryMinusFloatOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalUnaryMinusFloatOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *UnaryMinusIntOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalUnaryMinusIntOp(op, v)
}

// Eval is part of the UnaryEvalOp interface.
func (op *UnaryMinusIntervalOp) Eval(e OpEvaluator, v Datum) (Datum, error) {
	return e.EvalUnaryMinusIntervalOp(op, v)
}

// Eval is part of the BinaryEvalOp interface.
func (op *AppendToMaybeNullArrayOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalAppendToMaybeNullArrayOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *BitAndINetOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalBitAndINetOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *BitAndIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalBitAndIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *BitAndVarBitOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalBitAndVarBitOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *BitOrINetOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalBitOrINetOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *BitOrIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalBitOrIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *BitOrVarBitOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalBitOrVarBitOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *BitXorIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalBitXorIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *BitXorVarBitOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalBitXorVarBitOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *CompareBox2DOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalCompareBox2DOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *CompareScalarOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalCompareScalarOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *CompareTupleOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalCompareTupleOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ConcatArraysOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalConcatArraysOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ConcatBytesOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalConcatBytesOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ConcatJsonbOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalConcatJsonbOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ConcatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalConcatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ConcatStringOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalConcatStringOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ConcatVarBitOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalConcatVarBitOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ContainedByArrayOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalContainedByArrayOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ContainedByJsonbOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalContainedByJsonbOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ContainsArrayOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalContainsArrayOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ContainsJsonbOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalContainsJsonbOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *DivDecimalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalDivDecimalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *DivDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalDivDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *DivFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalDivFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *DivIntDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalDivIntDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *DivIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalDivIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *DivIntervalFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalDivIntervalFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *DivIntervalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalDivIntervalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *FloorDivDecimalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalFloorDivDecimalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *FloorDivDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalFloorDivDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *FloorDivFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalFloorDivFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *FloorDivIntDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalFloorDivIntDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *FloorDivIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalFloorDivIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *InTupleOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalInTupleOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONAllExistsOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONAllExistsOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONExistsOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONExistsOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONFetchTextIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONFetchTextIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONFetchTextPathOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONFetchTextPathOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONFetchTextStringOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONFetchTextStringOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONFetchValIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONFetchValIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONFetchValPathOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONFetchValPathOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONFetchValStringOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONFetchValStringOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *JSONSomeExistsOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalJSONSomeExistsOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *LShiftINetOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalLShiftINetOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *LShiftIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalLShiftIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *LShiftVarBitIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalLShiftVarBitIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MatchLikeOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMatchLikeOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MatchRegexpOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMatchRegexpOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusDateIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusDateIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusDateIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusDateIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusDateOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusDateOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusDateTimeOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusDateTimeOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusDecimalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusDecimalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusINetIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusINetIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusINetOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusINetOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusIntDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusIntDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusJsonbIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusJsonbIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusJsonbStringArrayOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusJsonbStringArrayOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusJsonbStringOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusJsonbStringOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimeIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimeIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimeOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimeOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimeTZIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimeTZIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimestampIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimestampIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimestampOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimestampOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimestampTZIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimestampTZIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimestampTZOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimestampTZOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimestampTZTimestampOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimestampTZTimestampOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MinusTimestampTimestampTZOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMinusTimestampTimestampTZOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ModDecimalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalModDecimalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ModDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalModDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ModFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalModFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ModIntDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalModIntDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ModIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalModIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *ModStringOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalModStringOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultDecimalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultDecimalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultDecimalIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultDecimalIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultFloatIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultFloatIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultIntDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultIntDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultIntIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultIntIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultIntervalDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultIntervalDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultIntervalFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultIntervalFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *MultIntervalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalMultIntervalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *OverlapsArrayOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalOverlapsArrayOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *OverlapsINetOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalOverlapsINetOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusDateIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusDateIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusDateIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusDateIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusDateTimeOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusDateTimeOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusDateTimeTZOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusDateTimeTZOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusDecimalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusDecimalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusINetIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusINetIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntDateOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntDateOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntINetOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntINetOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntervalDateOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntervalDateOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntervalTimeOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntervalTimeOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntervalTimeTZOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntervalTimeTZOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntervalTimestampOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntervalTimestampOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusIntervalTimestampTZOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusIntervalTimestampTZOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusTimeDateOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusTimeDateOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusTimeIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusTimeIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusTimeTZDateOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusTimeTZDateOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusTimeTZIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusTimeTZIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusTimestampIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusTimestampIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PlusTimestampTZIntervalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPlusTimestampTZIntervalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PowDecimalIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPowDecimalIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PowDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPowDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PowFloatOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPowFloatOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PowIntDecimalOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPowIntDecimalOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PowIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPowIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *PrependToMaybeNullArrayOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalPrependToMaybeNullArrayOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *RShiftINetOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalRShiftINetOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *RShiftIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalRShiftIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *RShiftVarBitIntOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalRShiftVarBitIntOp(op, a, b)
}

// Eval is part of the BinaryEvalOp interface.
func (op *SimilarToOp) Eval(e OpEvaluator, a, b Datum) (Datum, error) {
	return e.EvalSimilarToOp(op, a, b)
}

