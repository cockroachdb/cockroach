// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

// Code generated by eval_gen.go. DO NOT EDIT.

package tree

// ExprEvaluator is used to evaluate TypedExpr expressions.
type ExprEvaluator interface {
	EvalAllColumnsSelector(*AllColumnsSelector) (Datum, error)
	EvalAndExpr(*AndExpr) (Datum, error)
	EvalArray(*Array) (Datum, error)
	EvalArrayFlatten(*ArrayFlatten) (Datum, error)
	EvalBinaryExpr(*BinaryExpr) (Datum, error)
	EvalCaseExpr(*CaseExpr) (Datum, error)
	EvalCastExpr(*CastExpr) (Datum, error)
	EvalCoalesceExpr(*CoalesceExpr) (Datum, error)
	EvalCollateExpr(*CollateExpr) (Datum, error)
	EvalColumnAccessExpr(*ColumnAccessExpr) (Datum, error)
	EvalColumnItem(*ColumnItem) (Datum, error)
	EvalComparisonExpr(*ComparisonExpr) (Datum, error)
	EvalDefaultVal(*DefaultVal) (Datum, error)
	EvalFuncExpr(*FuncExpr) (Datum, error)
	EvalIfErrExpr(*IfErrExpr) (Datum, error)
	EvalIfExpr(*IfExpr) (Datum, error)
	EvalIndexedVar(*IndexedVar) (Datum, error)
	EvalIndirectionExpr(*IndirectionExpr) (Datum, error)
	EvalIsNotNullExpr(*IsNotNullExpr) (Datum, error)
	EvalIsNullExpr(*IsNullExpr) (Datum, error)
	EvalIsOfTypeExpr(*IsOfTypeExpr) (Datum, error)
	EvalNotExpr(*NotExpr) (Datum, error)
	EvalNullIfExpr(*NullIfExpr) (Datum, error)
	EvalOrExpr(*OrExpr) (Datum, error)
	EvalParenExpr(*ParenExpr) (Datum, error)
	EvalPlaceholder(*Placeholder) (Datum, error)
	EvalRangeCond(*RangeCond) (Datum, error)
	EvalSubquery(*Subquery) (Datum, error)
	EvalTuple(*Tuple) (Datum, error)
	EvalTupleStar(*TupleStar) (Datum, error)
	EvalTypedDummy(*TypedDummy) (Datum, error)
	EvalUnaryExpr(*UnaryExpr) (Datum, error)
	EvalUnqualifiedStar(UnqualifiedStar) (Datum, error)
	EvalUnresolvedName(*UnresolvedName) (Datum, error)
}


// Eval is part of the TypedExpr interface.
func (node *AllColumnsSelector) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalAllColumnsSelector(node)
}

// Eval is part of the TypedExpr interface.
func (node *AndExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalAndExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *Array) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalArray(node)
}

// Eval is part of the TypedExpr interface.
func (node *ArrayFlatten) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalArrayFlatten(node)
}

// Eval is part of the TypedExpr interface.
func (node *BinaryExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalBinaryExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *CaseExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalCaseExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *CastExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalCastExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *CoalesceExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalCoalesceExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *CollateExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalCollateExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *ColumnAccessExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalColumnAccessExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *ColumnItem) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalColumnItem(node)
}

// Eval is part of the TypedExpr interface.
func (node *ComparisonExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalComparisonExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *DArray) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DBitArray) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DBool) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DBox2D) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DBytes) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DCollatedString) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DDate) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DDecimal) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DEncodedKey) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DEnum) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DFloat) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DGeography) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DGeometry) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DIPAddr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DInt) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DInterval) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DJSON) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DOid) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DOidWrapper) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DString) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DTime) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DTimeTZ) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DTimestamp) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DTimestampTZ) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DTuple) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DUuid) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DVoid) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

// Eval is part of the TypedExpr interface.
func (node *DefaultVal) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalDefaultVal(node)
}

// Eval is part of the TypedExpr interface.
func (node *FuncExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalFuncExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *IfErrExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalIfErrExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *IfExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalIfExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *IndexedVar) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalIndexedVar(node)
}

// Eval is part of the TypedExpr interface.
func (node *IndirectionExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalIndirectionExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *IsNotNullExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalIsNotNullExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *IsNullExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalIsNullExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *IsOfTypeExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalIsOfTypeExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *NotExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalNotExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *NullIfExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalNullIfExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *OrExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalOrExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *ParenExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalParenExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node *Placeholder) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalPlaceholder(node)
}

// Eval is part of the TypedExpr interface.
func (node *RangeCond) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalRangeCond(node)
}

// Eval is part of the TypedExpr interface.
func (node *Subquery) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalSubquery(node)
}

// Eval is part of the TypedExpr interface.
func (node *Tuple) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalTuple(node)
}

// Eval is part of the TypedExpr interface.
func (node *TupleStar) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalTupleStar(node)
}

// Eval is part of the TypedExpr interface.
func (node *TypedDummy) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalTypedDummy(node)
}

// Eval is part of the TypedExpr interface.
func (node *UnaryExpr) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalUnaryExpr(node)
}

// Eval is part of the TypedExpr interface.
func (node UnqualifiedStar) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalUnqualifiedStar(node)
}

// Eval is part of the TypedExpr interface.
func (node *UnresolvedName) EvalExpr(v ExprEvaluator) (Datum, error) {
	return v.EvalUnresolvedName(node)
}

// Eval is part of the TypedExpr interface.
func (node dNull) EvalExpr(v ExprEvaluator) (Datum, error) {
	return node, nil
}

