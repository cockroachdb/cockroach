// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/ttlpb/ttl.proto

package ttlpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TTLDetails contains metadata about the scheduled TTL deletion job.
type TTLDetails struct {
	TableID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	TTLColumn string                                                     `protobuf:"bytes,2,opt,name=ttl_column,json=ttlColumn,proto3" json:"ttl_column,omitempty"`
}

func (m *TTLDetails) Reset()         { *m = TTLDetails{} }
func (m *TTLDetails) String() string { return proto.CompactTextString(m) }
func (*TTLDetails) ProtoMessage()    {}
func (*TTLDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d1f8c2654da7cf, []int{0}
}
func (m *TTLDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TTLDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TTLDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TTLDetails.Merge(m, src)
}
func (m *TTLDetails) XXX_Size() int {
	return m.Size()
}
func (m *TTLDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_TTLDetails.DiscardUnknown(m)
}

var xxx_messageInfo_TTLDetails proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TTLDetails)(nil), "cockroach.sql.ttl.TTLDetails")
}

func init() { proto.RegisterFile("sql/ttlpb/ttl.proto", fileDescriptor_c0d1f8c2654da7cf) }

var fileDescriptor_c0d1f8c2654da7cf = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x2e, 0xcc, 0xd1,
	0x2f, 0x29, 0xc9, 0x29, 0x48, 0x02, 0x91, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x82, 0xc9,
	0xf9, 0xc9, 0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19, 0x7a, 0xc5, 0x85, 0x39, 0x7a, 0x25, 0x25, 0x39,
	0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x59, 0x7d, 0x10, 0x0b, 0xa2, 0x50, 0x69, 0x01, 0x23,
	0x17, 0x57, 0x48, 0x88, 0x8f, 0x4b, 0x6a, 0x49, 0x62, 0x66, 0x4e, 0xb1, 0x50, 0x0a, 0x17, 0x47,
	0x49, 0x62, 0x52, 0x4e, 0x6a, 0x7c, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xaf, 0x93, 0xe7,
	0xa3, 0x7b, 0xf2, 0xec, 0x21, 0x20, 0x31, 0x4f, 0x97, 0x5f, 0xf7, 0xe4, 0xad, 0xd2, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xe1, 0x76, 0xa4, 0x24, 0x21, 0xd8, 0xfa, 0x05,
	0xd9, 0xe9, 0xfa, 0x20, 0x27, 0x25, 0x27, 0x96, 0x24, 0xe6, 0xe4, 0xa7, 0xeb, 0xa7, 0xa4, 0x16,
	0x27, 0x17, 0x24, 0xe9, 0x79, 0xba, 0x04, 0xb1, 0x83, 0x8d, 0xf6, 0x4c, 0x11, 0xd2, 0xe1, 0xe2,
	0x2a, 0x29, 0xc9, 0x89, 0x4f, 0xce, 0xcf, 0x29, 0xcd, 0xcd, 0x93, 0x60, 0x52, 0x60, 0xd4, 0xe0,
	0x74, 0xe2, 0x7d, 0x74, 0x4f, 0x9e, 0x33, 0x24, 0xc4, 0xc7, 0x19, 0x2c, 0x18, 0xc4, 0x59, 0x52,
	0x92, 0x03, 0x61, 0x3a, 0xa9, 0x9f, 0x78, 0x28, 0xc7, 0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47,
	0x72, 0x8c, 0x37, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xb1, 0x82, 0xbd, 0x9f, 0xc4, 0x06, 0xf6, 0x92,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x78, 0xed, 0x3a, 0x42, 0x12, 0x01, 0x00, 0x00,
}

func (m *TTLDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TTLDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TTLDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TTLColumn) > 0 {
		i -= len(m.TTLColumn)
		copy(dAtA[i:], m.TTLColumn)
		i = encodeVarintTtl(dAtA, i, uint64(len(m.TTLColumn)))
		i--
		dAtA[i] = 0x12
	}
	if m.TableID != 0 {
		i = encodeVarintTtl(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTtl(dAtA []byte, offset int, v uint64) int {
	offset -= sovTtl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TTLDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTtl(uint64(m.TableID))
	}
	l = len(m.TTLColumn)
	if l > 0 {
		n += 1 + l + sovTtl(uint64(l))
	}
	return n
}

func sovTtl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTtl(x uint64) (n int) {
	return sovTtl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TTLDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TTLDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TTLDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTLColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TTLColumn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTtl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTtl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTtl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTtl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTtl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTtl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTtl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTtl = fmt.Errorf("proto: unexpected end of group")
)
