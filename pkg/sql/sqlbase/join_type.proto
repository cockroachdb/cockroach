// Copyright 2018 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto2";
package cockroach.sql.sqlbase;
option go_package = "sqlbase";

// JoinType is the particular type of a join (or join-like) operation. Not all
// values are used in all contexts.
enum JoinType {
  INNER = 0;
  LEFT_OUTER = 1;
  RIGHT_OUTER = 2;
  FULL_OUTER = 3;

  // A left semi join returns the rows from the left side that match at least
  // one row from the right side (as per equality columns and ON condition).
  LEFT_SEMI = 4;

  // A left anti join is an "inverted" semi join: it returns the rows from the
  // left side that don't match any columns on the right side (as per equality
  // columns and ON condition).
  LEFT_ANTI = 5;

  // INTERSECT_ALL is a special join-like operation that is only used for
  // INTERSECT ALL and INTERSECT operations.
  //
  // It is similar to a left semi join, except that if there are multiple left
  // rows that have the same values on the equality columns, only as many of
  // those are returned as there are matches on the right side.
  //
  // In practice, there is a one-to-one mapping between the left and right
  // columns (they are all equality columns).
  //
  // For example: 
  //
  //       Left    Right    Result
  //       1       1        1
  //       1       2        2
  //       2       2        2
  //       2       3        3
  //       3       3
  //               3
  INTERSECT_ALL = 6;

  // EXCEPT_ALL is a special join-like operation that is only used for EXCEPT
  // ALL and EXCEPT operations.
  //
  // It is similar to a left anti join, except that if there are multiple left
  // rows that have the same values on the equality columns, only as many of
  // those are removed as there are matches on the right side.
  //
  // In practice, there is a one-to-one mapping between the left and right
  // columns (they are all equality columns).
  //
  // For example: 
  //
  //       Left    Right    Result
  //       1       1        1
  //       1       2        2
  //       2       3        2
  //       2       3 
  //       2       3
  //       3       
  //       3
  //       
  //
  // In practice, there is a one-to-one mapping between the left and right
  // columns (they are all equality columns).
  EXCEPT_ALL = 7;
}
