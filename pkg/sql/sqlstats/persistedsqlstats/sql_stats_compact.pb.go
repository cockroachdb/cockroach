// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sqlstats/persistedsqlstats/sql_stats_compact.proto

package persistedsqlstats

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ScheduledSQLStatsCompactorExecutionArgs is the arguments to the scheduled
// sql stats compactor. This is required to support SHOW SCHEDULE queries.
type ScheduledSQLStatsCompactorExecutionArgs struct {
}

func (m *ScheduledSQLStatsCompactorExecutionArgs) Reset() {
	*m = ScheduledSQLStatsCompactorExecutionArgs{}
}
func (m *ScheduledSQLStatsCompactorExecutionArgs) String() string { return proto.CompactTextString(m) }
func (*ScheduledSQLStatsCompactorExecutionArgs) ProtoMessage()    {}
func (*ScheduledSQLStatsCompactorExecutionArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ca518dd1ce04bd7, []int{0}
}
func (m *ScheduledSQLStatsCompactorExecutionArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledSQLStatsCompactorExecutionArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScheduledSQLStatsCompactorExecutionArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledSQLStatsCompactorExecutionArgs.Merge(m, src)
}
func (m *ScheduledSQLStatsCompactorExecutionArgs) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledSQLStatsCompactorExecutionArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledSQLStatsCompactorExecutionArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledSQLStatsCompactorExecutionArgs proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ScheduledSQLStatsCompactorExecutionArgs)(nil), "cockroach.sql.ScheduledSQLStatsCompactorExecutionArgs")
}

func init() {
	proto.RegisterFile("sql/sqlstats/persistedsqlstats/sql_stats_compact.proto", fileDescriptor_5ca518dd1ce04bd7)
}

var fileDescriptor_5ca518dd1ce04bd7 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2b, 0x2e, 0xcc, 0xd1,
	0x2f, 0x2e, 0xcc, 0x29, 0x2e, 0x49, 0x2c, 0x29, 0xd6, 0x2f, 0x48, 0x2d, 0x2a, 0xce, 0x2c, 0x2e,
	0x49, 0x4d, 0x81, 0x8b, 0x14, 0x17, 0xe6, 0xc4, 0x83, 0x59, 0xf1, 0xc9, 0xf9, 0xb9, 0x05, 0x89,
	0xc9, 0x25, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xbc, 0xc9, 0xf9, 0xc9, 0xd9, 0x45, 0xf9,
	0x89, 0xc9, 0x19, 0x7a, 0xc5, 0x85, 0x39, 0x4a, 0x9a, 0x5c, 0xea, 0xc1, 0xc9, 0x19, 0xa9, 0x29,
	0xa5, 0x39, 0xa9, 0x29, 0xc1, 0x81, 0x3e, 0xc1, 0x20, 0x1d, 0xce, 0x10, 0x0d, 0xf9, 0x45, 0xae,
	0x15, 0xa9, 0xc9, 0xa5, 0x25, 0x99, 0xf9, 0x79, 0x8e, 0x45, 0xe9, 0xc5, 0x4e, 0xc6, 0x27, 0x1e,
	0xca, 0x31, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x8d, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x51, 0x82, 0x18, 0xce, 0x48, 0x62, 0x03, 0xdb, 0x6a, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x32,
	0x4a, 0xc7, 0x28, 0xaf, 0x00, 0x00, 0x00,
}

func (m *ScheduledSQLStatsCompactorExecutionArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledSQLStatsCompactorExecutionArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledSQLStatsCompactorExecutionArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSqlStatsCompact(dAtA []byte, offset int, v uint64) int {
	offset -= sovSqlStatsCompact(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScheduledSQLStatsCompactorExecutionArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSqlStatsCompact(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSqlStatsCompact(x uint64) (n int) {
	return sovSqlStatsCompact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScheduledSQLStatsCompactorExecutionArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSqlStatsCompact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledSQLStatsCompactorExecutionArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledSQLStatsCompactorExecutionArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSqlStatsCompact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSqlStatsCompact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSqlStatsCompact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSqlStatsCompact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSqlStatsCompact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSqlStatsCompact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSqlStatsCompact
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSqlStatsCompact
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSqlStatsCompact
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSqlStatsCompact        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSqlStatsCompact          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSqlStatsCompact = fmt.Errorf("proto: unexpected end of group")
)
