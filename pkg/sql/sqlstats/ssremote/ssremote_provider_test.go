// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

package ssremote

import (
	"context"
	"testing"

	"github.com/cockroachdb/cockroach/pkg/server/serverpb"
	"github.com/cockroachdb/cockroach/pkg/sql/appstatspb"
	"github.com/cockroachdb/cockroach/pkg/sql/sqlstats/persistedsqlstats/sqlstatstestutil"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
	"github.com/stretchr/testify/require"
)

type mockSQLStatusServer struct {
	serverpb.UnimplementedStatusServer
	collectedStmtStats []*appstatspb.CollectedStatementStatistics
	collectedTxStats   []*appstatspb.CollectedTransactionStatistics
	fpCount            int64
}

// This is needed since UnimplementedStatusServer is autogenerated and doesn't contain
// this method
func (m *mockSQLStatusServer) GetUpdateTableMetadataCacheSignal() chan struct{} {
	return nil
}

func (m *mockSQLStatusServer) DrainSqlStats(
	_ context.Context, _ *serverpb.DrainSqlStatsRequest,
) (*serverpb.DrainStatsResponse, error) {
	return &serverpb.DrainStatsResponse{
		Statements:       m.collectedStmtStats,
		Transactions:     m.collectedTxStats,
		FingerprintCount: m.fpCount,
	}, nil
}

func TestDrainStats(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	stmt1 := sqlstatstestutil.GetRandomizedCollectedStatementStatisticsForTest(t)
	stmt2 := sqlstatstestutil.GetRandomizedCollectedStatementStatisticsForTest(t)
	txn1 := sqlstatstestutil.GetRandomizedCollectedTransactionStatisticsForTest(t)
	txn2 := sqlstatstestutil.GetRandomizedCollectedTransactionStatisticsForTest(t)
	server := mockSQLStatusServer{
		collectedStmtStats: []*appstatspb.CollectedStatementStatistics{&stmt1, &stmt2},
		collectedTxStats:   []*appstatspb.CollectedTransactionStatistics{&txn1, &txn2},
		fpCount:            4,
	}

	ss := New(&server)
	stmts, txns, fpCount := ss.DrainStats(context.Background())
	require.Equal(t, []*appstatspb.CollectedStatementStatistics{&stmt1, &stmt2}, stmts)
	require.Equal(t, []*appstatspb.CollectedTransactionStatistics{&txn1, &txn2}, txns)
	require.Equal(t, fpCount, int64(4))
}
