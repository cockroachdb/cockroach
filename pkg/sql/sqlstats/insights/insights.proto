// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.sql.insights;
option go_package = "github.com/cockroachdb/cockroach/pkg/sql/sqlstats/insights";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

enum Problem {
  // This statement execution was not itself problematic, but it happened in
  // the same transaction as another problematic statement.
  None = 0;

  // This statement execution was slow, either above a fixed latency threshold
  // or detected as an anomaly.
  SlowExecution = 1;

  // This statement execution failed completely, due to contention, resource
  // saturation, or syntax errors.
  FailedExecution = 2;
}

enum Cause {
  // We have not identified specific reasons why this statement was slow.
  // We will not explicitly use this zero value; it is here defensively.
  Unset = 0;

  // This statement was slow because we picked the wrong plan, possibly due to
  // outdated statistics, the statement using different literals or search
  // conditions, or a change in the database schema.
  PlanRegression = 1;

  // This statement was slow because a good plan was not available, whether
  // due to outdated statistics or missing indexes.
  SuboptimalPlan = 2;

  // This statement was slow because of contention.
  HighContention = 3;

  // This statement was slow because of being retried multiple times, again due
  // to contention. The "high" threshold may be configured by the
  // `sql.insights.high_retry_count.threshold` cluster setting.
  HighRetryCount = 4;
}

message Session {
  bytes id = 1 [(gogoproto.customname) = "ID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/sql/clusterunique.ID",
    (gogoproto.nullable) = false];
}

message Transaction {
  // TODO(gtr): Implement "Cancelled" status for transaction insights.
  enum Status {
    Completed = 0;
    Failed = 1;
  }

  bytes id = 1 [(gogoproto.customname) = "ID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/util/uuid.UUID",
    (gogoproto.nullable) = false];
  uint64 fingerprint_id = 2
  [(gogoproto.customname) = "FingerprintID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/sql/appstatspb.TransactionFingerprintID",
    (gogoproto.nullable) = false];
  string user_priority = 3;
  bool implicit_txn = 4;
  google.protobuf.Duration contention = 5 [(gogoproto.stdduration) = true];
  google.protobuf.Timestamp start_time = 6 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp end_time = 7 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  string user = 8;
  string application_name = 9;
  int64 rows_read = 10;
  int64 rows_written = 11;
  int64 retry_count = 12;
  string auto_retry_reason = 13;
  repeated Problem problems = 14;
  repeated Cause causes = 15;
  repeated bytes stmt_execution_ids = 16 [ (gogoproto.customname) = "StmtExecutionIDs",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/sql/clusterunique.ID"];
  int64 cpu_sql_nanos = 17 [(gogoproto.customname) = "CPUSQLNanos"];
  // The error code of the last failed statement in the transaction.
  string last_error_code = 18; 
  Status status = 19;
  // ServiceLat is the time in seconds to service the transaction, from the time a
  // transaction was received to end of execution.
  google.protobuf.Duration  service_lat = 20 [(gogoproto.stdduration) = true];
  // RetryLat is the amount of time in seconds spent retrying the transaction.
  google.protobuf.Duration  retry_lat = 21 [(gogoproto.stdduration) = true];
  // CommitLat is the amount of time in seconds required to commit the transaction after
  // all statement operations have been applied.
  google.protobuf.Duration  commit_lat = 22 [(gogoproto.stdduration) = true];
  // IdleLat is the cumulative amount of time spent in seconds waiting for
  // the client to send statements while holding the transaction open.
  google.protobuf.Duration  idle_lat = 23 [(gogoproto.stdduration) = true];
  // BytesRead collects the number of bytes read from disk.
  int64 bytes_read = 24;
  // Stats contains extended execution stats for current transaction.
  ExecStats stats = 25;
  // MVCCStats contains MVCC specific stats for current transaction.
  MVCCStats mvcc_stats = 26;
}

message Statement {
  enum Status {
    Completed = 0;
    Failed = 1;
  }

  bytes id = 1 [(gogoproto.customname) = "ID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/sql/clusterunique.ID",
    (gogoproto.nullable) = false];
  uint64 fingerprint_id = 2 [(gogoproto.customname) = "FingerprintID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/appstatspb.StmtFingerprintID"];
  double latency_in_seconds = 3; // DEPRECATED. Use service_lat instead
  string query = 4;
  Status status = 5;
  google.protobuf.Timestamp start_time = 6 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp end_time = 7 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  bool full_scan = 8;
  reserved 9; // previously user
  reserved 10; // previously application_name
  string database = 11;
  string plan_gist = 12;
  int64 rows_read = 13;
  int64 rows_written = 14;
  int64 retries = 15;
  string auto_retry_reason = 16;
  // Nodes is the ordered list of nodes ids on which the statement was executed.
  repeated int64 nodes = 17;
  google.protobuf.Duration contention = 18 [(gogoproto.stdduration) = true];
  repeated string index_recommendations = 19;
  reserved 20; // previously contention_events
  Problem problem = 21;
  repeated Cause causes = 22;
  int64 cpu_sql_nanos = 23 [(gogoproto.customname) = "CPUSQLNanos"];
  string error_code = 24;
  // IdleLat is the time spent in seconds in an open transaction waiting
  // for the client to send the statement.
  double idle_lat = 25;
  // ParseLat is the time in seconds to transform the SQL string into an AST.
  double parse_lat = 26;
  // PlanLat is the time spent in seconds to transform the AST into a logical query plan.
  double plan_lat = 27;
  // RunLat is the time in seconds to run the query and fetch/compute the result rows.
  double run_lat = 28;
  // ServiceLat is the time in seconds to service the query, from start of parse to end of execute.
  double service_lat = 29;
  // BytesRead collects the number of bytes read from disk.
  int64 bytes_read = 30;
  // Stats contains extended execution stats for current statement.
  ExecStats stats = 31;
  // MVCCStats contains MVCC specific stats for current statement.
  MVCCStats mvcc_stats = 32;
}


message Insight {
  Session session = 1 [(gogoproto.nullable) = false];
  Transaction transaction = 2;
  repeated Statement statements = 6;

  // This field is deprecated, but we have to keep it around for 22.2
  // backwards compatibility. 22.2 actually expects this as non-null
  // when generating the exec insights virtual table. Removing this will
  // cause a nil pointer deref on versions <= 22.2.6.
  // TODO: Move these fields to 'reserved' at 23.2.
  Statement statement = 3;

  reserved  4; // Previously problem.
  reserved 5; // Previously causes.
}

message ExecStats {
  // NetworkBytesSent collects the number of bytes sent over the network.
  int64 network_bytes_sent = 1;
  // MaxMemUsage collects the maximum memory usage that occurred on a node.
  int64 max_mem_usage = 2;
  // NetworkMessagesSent collects the number of messages that were sent over the
  // network.
  int64 network_messages_sent = 3;
  // MaxDiskUsage collects the maximum temporary disk usage that occurred. This
  // is set in cases where a query had to spill to disk, e.g. when performing a
  // large sort where not all of the tuples fit in memory.
  int64 max_disk_usage = 4;
}

message MVCCStats {
  // StepCount collects the number of times the iterator moved forward or backward over the
  // DB's underlying storage keyspace.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 step_count = 1;

  // StepCountInternal collects the number of times the iterator moved forward or backward
  // over LSM internal keys.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 step_count_internal = 2;

  // SeekCount collects the number of times the iterator moved to a specific key/value pair
  // in the DB's underlying storage keyspace.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 seek_count = 3;

  // SeekCountInternal collects the number of times the iterator moved to a specific LSM
  // internal key.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 seek_count_internal = 4;

  // BlockBytes collects the bytes in the loaded SSTable data blocks.
  // For details, see pebble.InternalIteratorStats.
  int64 block_bytes = 5;

  // BlockBytesInCache collects the subset of BlockBytes in the block cache.
  // For details, see pebble.InternalIteratorStats.
  int64 block_bytes_in_cache = 6;

  // KeyBytes collects the bytes in keys that were iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 key_bytes = 7;

  // ValueBytes collects the bytes in values that were iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 value_bytes = 8;

  // PointCount collects the count of point keys iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 point_count = 9;

  // PointsCoveredByRangeTombstones collects the count of point keys that were iterated over that
  // were covered by range tombstones.
  // For details, see pebble.InternalIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 points_covered_by_range_tombstones = 10;

  // RangeKeyCount collects the count of range keys encountered during iteration.
  // For details, see pebble.RangeKeyIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 range_key_count = 11;

  // RangeKeyContainedPoints collects the count of point keys encountered within the bounds of
  // a range key.
  // For details, see pebble.RangeKeyIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 range_key_contained_points = 12;

  // RangeKeySkippedPoints collects the count of the subset of ContainedPoints point keys that
  // were skipped during iteration due to range-key masking.
  // For details, see pkg/storage/engine.go, pebble.RangeKeyIteratorStats, and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 range_key_skipped_points = 13;
}
