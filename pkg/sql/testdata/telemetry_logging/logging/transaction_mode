# Test that transaction mode for telemetry logging logs all stmts for a tracked txn.

subtest transaction_mode_events

exec-sql
SET CLUSTER SETTING sql.telemetry.transaction_sampling.max_event_frequency = 10;
----

exec-sql
SET CLUSTER SETTING sql.telemetry.transaction_sampling.statement_events_per_transaction.max = 100;
----

exec-sql
SET CLUSTER SETTING sql.telemetry.query_sampling.mode = "transaction";
----

exec-sql
SET CLUSTER SETTING sql.telemetry.query_sampling.enabled = true;
----

exec-sql
CREATE TABLE t()
----

spy-sql unixSecs=0.1
BEGIN; TRUNCATE t; COMMIT
----
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"PlanGist": "Ais=",
	"SkippedQueries": 1,
	"Statement": "TRUNCATE TABLE defaultdb.public.t",
	"StatementFingerprintID": "802230861479752304",
	"StmtPosInTxn": 1,
	"Tag": "TRUNCATE",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"Statement": "COMMIT TRANSACTION",
	"StatementFingerprintID": "14457747517729697511",
	"StmtPosInTxn": 2,
	"Tag": "COMMIT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Committed": true,
	"EventType": "sampled_transaction",
	"NumRows": 0,
	"RowsRead": 0,
	"RowsWritten": 0,
	"StatementFingerprintIDs": [
		"802230861479752304"
	],
	"TransactionFingerprintID": "11835923794509858223",
	"User": "root"
}

# Note that because we skip BEGIN statements in transaction mode, the first
# statement logged from this transaction has SkippedQueries=1 even though
# we logged the statements in the previous transaction.
spy-sql unixSecs=1
BEGIN; SELECT 1; SELECT 2; SELECT 3; COMMIT
----
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRows": 1,
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICAgYC",
	"SkippedQueries": 1,
	"Statement": "SELECT ‹1›",
	"StatementFingerprintID": "16085855936700855359",
	"StmtPosInTxn": 1,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRows": 1,
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICAgYC",
	"Statement": "SELECT ‹2›",
	"StatementFingerprintID": "16085855936700855359",
	"StmtPosInTxn": 2,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRows": 1,
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICAgYC",
	"Statement": "SELECT ‹3›",
	"StatementFingerprintID": "16085855936700855359",
	"StmtPosInTxn": 3,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"Statement": "COMMIT TRANSACTION",
	"StatementFingerprintID": "14457747517729697511",
	"StmtPosInTxn": 4,
	"Tag": "COMMIT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Committed": true,
	"EventType": "sampled_transaction",
	"NumRows": 3,
	"RowsRead": 0,
	"RowsWritten": 0,
	"StatementFingerprintIDs": [
		"16085855936700855359",
		"16085855936700855359",
		"16085855936700855359"
	],
	"TransactionFingerprintID": "17099066530943440146",
	"User": "root"
}

# Skipped due to not enough time elapsed.
spy-sql unixSecs=1
SELECT 1, 2
----

# Logged due to tracing, even though not enough time has elapsed.
spy-sql unixSecs=1 tracing=true
SELECT 1, 2
----
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRows": 1,
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICBAYE",
	"SkippedQueries": 1,
	"Statement": "SELECT ‹1›, ‹2›",
	"StatementFingerprintID": "1569305422589581018",
	"StmtPosInTxn": 1,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Committed": true,
	"EventType": "sampled_transaction",
	"NumRows": 1,
	"RowsRead": 0,
	"RowsWritten": 0,
	"SkippedTransactions": 1,
	"StatementFingerprintIDs": [
		"1569305422589581018"
	],
	"TransactionFingerprintID": "13449146770429468933",
	"User": "root"
}

# Skipped due to not enough time elapsed.
spy-sql unixSecs=1.05
SELECT * FROM t LIMIT 1
----

# Skipped due to not enough time elapsed.
spy-sql unixSecs=1.08
SELECT * FROM t LIMIT 1
----

# Logged, enough time has elapsed.
spy-sql unixSecs=1.1
SELECT * FROM t LIMIT 2
----
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "full",
	"EventType": "sampled_query",
	"PlanGist": "AgHQAQQAAAAAAg==",
	"ScanCount": 1,
	"SkippedQueries": 2,
	"Statement": "SELECT * FROM \"\".\"\".t LIMIT ‹2›",
	"StatementFingerprintID": "17888549871399372520",
	"StmtPosInTxn": 1,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Committed": true,
	"EventType": "sampled_transaction",
	"NumRows": 0,
	"RowsRead": 0,
	"RowsWritten": 0,
	"SkippedTransactions": 2,
	"StatementFingerprintIDs": [
		"17888549871399372520"
	],
	"TransactionFingerprintID": "6278959165882708279",
	"User": "root"
}

# Skipped, not enough time elapsed.
spy-sql unixSecs=1.15
BEGIN; SELECT * FROM t LIMIT 3; COMMIT
----

# Logged, enough time has elapsed.
spy-sql unixSecs=1.2
BEGIN; SELECT * FROM t LIMIT 4; SELECT * FROM t LIMIT 5; COMMIT
----
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "full",
	"EventType": "sampled_query",
	"PlanGist": "AgHQAQQAAAAAAg==",
	"ScanCount": 1,
	"SkippedQueries": 4,
	"Statement": "SELECT * FROM \"\".\"\".t LIMIT ‹4›",
	"StatementFingerprintID": "17888549871399372516",
	"StmtPosInTxn": 1,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "full",
	"EventType": "sampled_query",
	"PlanGist": "AgHQAQQAAAAAAg==",
	"ScanCount": 1,
	"Statement": "SELECT * FROM \"\".\"\".t LIMIT ‹5›",
	"StatementFingerprintID": "17888549871399372516",
	"StmtPosInTxn": 2,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"Statement": "COMMIT TRANSACTION",
	"StatementFingerprintID": "14457747517729697511",
	"StmtPosInTxn": 3,
	"Tag": "COMMIT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Committed": true,
	"EventType": "sampled_transaction",
	"NumRows": 0,
	"RowsRead": 0,
	"RowsWritten": 0,
	"SkippedTransactions": 1,
	"StatementFingerprintIDs": [
		"17888549871399372516",
		"17888549871399372516"
	],
	"TransactionFingerprintID": "5223910247858315685",
	"User": "root"
}

subtest end

subtest no_sampling_reset_on_txn_retry

# This test ensures that if a transaction is retried, the sampling decision is not reset.

exec-sql
CREATE SEQUENCE seq START WITH 1
----

reset-last-sampled
----

# Execute a query at time=1 so that the the next txn executed at time=1 is not sampled.
spy-sql unixSecs=1
SELECT 1, 2, 3
----
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRows": 1,
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICBgYG",
	"Statement": "SELECT ‹1›, ‹2›, ‹3›",
	"StatementFingerprintID": "16698501115058330309",
	"StmtPosInTxn": 1,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Committed": true,
	"EventType": "sampled_transaction",
	"NumRows": 1,
	"RowsRead": 0,
	"RowsWritten": 0,
	"SkippedTransactions": 1,
	"StatementFingerprintIDs": [
		"16698501115058330309"
	],
	"TransactionFingerprintID": "5250989384299556122",
	"User": "root"
}

# This transaction will not be sampled due to not enough time having elapsed. Its
# retries should also not be sampled, even though the stub time will be advanced
# for the retries such that enough time has elapsed for sampling to be enabled,
# the sampling decision should not be reset and should use the sampling decision
# initially set for this transaction.
spy-sql unixSecs=1 restartUnixSecs=2
BEGIN;
SELECT 'hello';
SELECT CASE nextval('seq') WHEN 1 THEN crdb_internal.force_retry('1s') ELSE 2 END;
COMMIT;
----


# This is the reverse scenario to the above. We will execute a txn at time=2 so that it
# is sampled (enough time elapsed). On its retry, we will not advance the stub time so that
# the retry also runs at t=2. The retry should be sampled even though not enough time has
# elapsed due to it being a retry of asampled txn.
spy-sql unixSecs=2 restartUnixSecs=2
BEGIN;
SELECT 'hello';
SELECT CASE nextval('seq') WHEN 3 THEN crdb_internal.force_retry('1s') ELSE 2 END;
COMMIT;
----
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRows": 1,
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICAgYC",
	"SkippedQueries": 7,
	"Statement": "SELECT ‹'hello'›",
	"StatementFingerprintID": "15578946620736492921",
	"StmtPosInTxn": 1,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"ErrorText": "crdb_internal.force_retry(): TransactionRetryWithProtoRefreshError: forced by crdb_internal.force_retry()",
	"EventType": "sampled_query",
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICAgYC",
	"SQLSTATE": "40001",
	"Statement": "SELECT CASE nextval(‹'seq'›) WHEN ‹3› THEN crdb_internal.force_retry(‹'00:00:01'›) ELSE ‹2› END",
	"StatementFingerprintID": "17115235937825138449",
	"StmtPosInTxn": 2,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRetries": 1,
	"NumRows": 1,
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICAgYC",
	"Statement": "SELECT ‹'hello'›",
	"StatementFingerprintID": "15578946620736492921",
	"StmtPosInTxn": 1,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRetries": 1,
	"NumRows": 1,
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICAgYC",
	"Statement": "SELECT CASE nextval(‹'seq'›) WHEN ‹3› THEN crdb_internal.force_retry(‹'00:00:01'›) ELSE ‹2› END",
	"StatementFingerprintID": "9891387630896047206",
	"StmtPosInTxn": 2,
	"Tag": "SELECT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"EventType": "sampled_query",
	"NumRetries": 1,
	"Statement": "COMMIT TRANSACTION",
	"StatementFingerprintID": "14457747517729697511",
	"StmtPosInTxn": 3,
	"Tag": "COMMIT",
	"User": "root"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Committed": true,
	"EventType": "sampled_transaction",
	"LastAutoRetryReason": "crdb_internal.force_retry(): TransactionRetryWithProtoRefreshError: forced by crdb_internal.force_retry()",
	"NumRetries": 1,
	"NumRows": 2,
	"RowsRead": 0,
	"RowsWritten": 0,
	"SkippedTransactions": 1,
	"StatementFingerprintIDs": [
		"15578946620736492921",
		"9891387630896047206"
	],
	"TransactionFingerprintID": "823601646009140340",
	"User": "root"
}

subtest end

subtest redacts_sensitive_info

reset-last-sampled
----


# testuser name should be redacted
spy-sql user=testuser unixSecs=1
SELECT 1/0
----
pq: division by zero
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Database": "defaultdb",
	"Distribution": "local",
	"ErrorText": "division by zero",
	"EventType": "sampled_query",
	"OutputRowsEstimate": 1,
	"PlanGist": "AgICAgYC",
	"SQLSTATE": "22012",
	"Statement": "SELECT ‹1› / ‹0›",
	"StatementFingerprintID": "16154612194363576960",
	"StmtPosInTxn": 1,
	"Tag": "SELECT",
	"User": "‹testuser›"
}
{
	"ApplicationName": "telemetry-logging-datadriven",
	"Committed": false,
	"ErrorText": "division by zero",
	"EventType": "sampled_transaction",
	"NumRows": 0,
	"RowsRead": 0,
	"RowsWritten": 0,
	"SQLSTATE": "22012",
	"StatementFingerprintIDs": [
		"16154612194363576960"
	],
	"TransactionFingerprintID": "5715924995226314079",
	"User": "‹testuser›"
}

subtest end
