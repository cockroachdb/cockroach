query I colnames
SELECT * FROM GENERATE_SERIES(1, 3)
----
GENERATE_SERIES
1
2
3

query II colnames
SELECT * FROM GENERATE_SERIES(1, 2), GENERATE_SERIES(1, 2)
----
GENERATE_SERIES  GENERATE_SERIES
1                1
1                2
2                1
2                2

query I
SELECT * FROM GENERATE_SERIES(3, 1, -1)
----
3
2
1

query I
SELECT * FROM GENERATE_SERIES(3, 1)
----

query error step cannot be 0
SELECT * FROM GENERATE_SERIES(1, 3, 0)

query I
SELECT * FROM PG_CATALOG.GENERATE_SERIES(1, 3)
----
1
2
3

query I colnames
SELECT * FROM GENERATE_SERIES(1, 1) AS c(x)
----
x
1

query II colnames
SELECT * FROM GENERATE_SERIES(1, 1) WITH ORDINALITY
----
GENERATE_SERIES ordinality
1 1

query II colnames
SELECT * FROM GENERATE_SERIES(1, 1) WITH ORDINALITY AS c(x, y)
----
x y
1 1

query error argument of LIMIT must be type int, not type setof
SELECT * FROM (VALUES (1)) LIMIT GENERATE_SERIES(1, 3)

query I colnames
SELECT GENERATE_SERIES(1, 2)
----
pg_catalog.generate_series
1
2

query II colnames
SELECT GENERATE_SERIES(1, 2), GENERATE_SERIES(3, 4)
----
pg_catalog.generate_series  pg_catalog.generate_series
1                           3
1                           4
2                           3
2                           4

statement ok
CREATE TABLE t (a string)

statement ok
CREATE TABLE u (b string)

statement ok
INSERT INTO t VALUES ('cat')

statement ok
INSERT INTO u VALUES ('bird')

# The following two queries should have the same result. This exercises the
# transformation that moves generator expressions in render positions to cross
# joins.
query TTII
SELECT t.*, u.*, generate_series(1,2), generate_series(3, 4) FROM t, u
----
cat  bird  1  3
cat  bird  1  4
cat  bird  2  3
cat  bird  2  4

query TTII
SELECT t.*, u.*, a.*, b.* FROM t, u, generate_series(1, 2) AS a, generate_series(3, 4) AS b
----
cat  bird  1  3
cat  bird  1  4
cat  bird  2  3
cat  bird  2  4

query I
SELECT 3 + x FROM generate_series(1,2) AS a(x)
----
4
5

# Not supported yet: transforming set-returning functions that aren't top-level
# render expressions into cross joins.
query error pq: unsupported binary operator: <int> \+ <setof tuple\{int\}>
SELECT 3 + generate_series(1,2)

query I
SELECT * from unnest(ARRAY[1,2]);
----
1
2

query IT
SELECT unnest(ARRAY[1,2]), unnest(ARRAY['a', 'b']);
----
1  a
1  b
2  a
2  b

