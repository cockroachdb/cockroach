load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "pgwirebase",
    srcs = [
        "conn.go",
        "doc.go",
        "encoding.go",
        "msg.go",
        "too_big_error.go",
        ":gen-pgnumericsign-stringer", # keep
        ":gen-formatcode-stringer", # keep
        ":gen-clientmessagetype-stringer", # keep
        ":gen-servermessagetype-stringer", # keep
        ":gen-servererrfieldtype-stringer", # keep
        ":gen-preparetype-stringer", # keep
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/pgwire/pgwirebase",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/settings",
        "//pkg/sql/catalog/colinfo",
        "//pkg/sql/lex",
        "//pkg/sql/oidext",
        "//pkg/sql/pgwire/pgcode",
        "//pkg/sql/pgwire/pgerror",
        "//pkg/sql/sem/tree",
        "//pkg/sql/types",
        "//pkg/util/bitarray",
        "//pkg/util/duration",
        "//pkg/util/errorutil/unimplemented",
        "//pkg/util/ipaddr",
        "//pkg/util/timeofday",
        "//pkg/util/timeutil/pgdate",
        "//pkg/util/uint128",
        "@com_github_cockroachdb_errors//:errors",
        "@com_github_dustin_go_humanize//:go-humanize",
        "@com_github_jackc_pgx//pgtype",
        "@com_github_lib_pq//oid",
    ],
)

genrule(
    name = "gen-pgnumericsign-stringer",
    srcs = [
        "encoding.go",
    ],
    outs = ["pgnumericsign_string.go"],
    cmd = """
       env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=PGNumericSign $<
    """,
    tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)

genrule(
    name = "gen-formatcode-stringer",
    srcs = [
        "encoding.go",
    ],
    outs = ["formatcode_string.go"],
    cmd = """
       env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=FormatCode $<
    """,
    tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)

genrule(
    name = "gen-clientmessagetype-stringer",
    srcs = [
        "msg.go",
    ],
    outs = ["clientmessagetype_string.go"],
    cmd = """
       env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=ClientMessageType $<
    """,
    tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)

genrule(
    name = "gen-servermessagetype-stringer",
    srcs = [
        "msg.go",
    ],
    outs = ["servermessagetype_string.go"],
    cmd = """
       env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=ServerMessageType $<
    """,
    tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)

genrule(
    name = "gen-servererrfieldtype-stringer",
    srcs = [
        "msg.go",
    ],
    outs = ["servererrfieldtype_string.go"],
    cmd = """
       env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=ServerErrFieldType $<
    """,
    tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)

genrule(
    name = "gen-preparetype-stringer",
    srcs = [
        "msg.go",
    ],
    outs = ["preparetype_string.go"],
    cmd = """
       env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=PrepareType $<
    """,
    tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)
