parse
host all all 0.0.0.0/0 trust
# comment

host all all ::1 0 reject # ip and cidr with space
host all all fe80::7a31:c1ff:0000:0000/96 cert
host all all all trust
host all all hostname trust
host all all 1.1.1.1 1 trust
----
# String render check:
# TYPE DATABASE USER ADDRESS                METHOD OPTIONS
host   all      all  0.0.0.0/0              trust
host   all      all  ::/0                   reject
host   all      all  fe80::7a31:c1ff:0:0/96 cert
host   all      all  all                    trust
host   all      all  hostname               trust
host   all      all  0.0.0.0/1              trust
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     &net.IPNet{
                IP:   {0x0, 0x0, 0x0, 0x0},
                Mask: {0x0, 0x0, 0x0, 0x0},
            },
            Method:   "trust",
            MethodFn: nil,
            Options:  nil,
        },
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     &net.IPNet{
                IP:   {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                Mask: {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
            },
            Method:   "reject",
            MethodFn: nil,
            Options:  nil,
        },
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     &net.IPNet{
                IP:   {0xfe, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x31, 0xc1, 0xff, 0x0, 0x0, 0x0, 0x0},
                Mask: {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0},
            },
            Method:   "cert",
            MethodFn: nil,
            Options:  nil,
        },
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     hba.AnyAddr{},
            Method:      "trust",
            MethodFn:    nil,
            Options:     nil,
        },
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     "hostname",
            Method:      "trust",
            MethodFn:    nil,
            Options:     nil,
        },
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     &net.IPNet{
                IP:   {0x0, 0x0, 0x0, 0x0},
                Mask: {0x80, 0x0, 0x0, 0x0},
            },
            Method:   "trust",
            MethodFn: nil,
            Options:  nil,
        },
    },
}

# Comma-separated lists.

parse
host a,b,c all all trust
----
# String render check:
# TYPE DATABASE USER ADDRESS METHOD OPTIONS
host   a,b,c    all  all     trust
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    {"a", "b", "c"},
            AnyDatabase: false,
            User:        nil,
            AnyUser:     true,
            Address:     hba.AnyAddr{},
            Method:      "trust",
            MethodFn:    nil,
            Options:     nil,
        },
    },
}

parse
host a,all,c all all trust
----
# String render check:
# TYPE DATABASE USER ADDRESS METHOD OPTIONS
host   all      all  all     trust
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     hba.AnyAddr{},
            Method:      "trust",
            MethodFn:    nil,
            Options:     nil,
        },
    },
}

parse
host all a,b,c all trust
----
# String render check:
# TYPE DATABASE USER  ADDRESS METHOD OPTIONS
host   all      a,b,c all     trust
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        {"a", "b", "c"},
            AnyUser:     false,
            Address:     hba.AnyAddr{},
            Method:      "trust",
            MethodFn:    nil,
            Options:     nil,
        },
    },
}

parse
host all a,all,c all trust
----
# String render check:
# TYPE DATABASE USER ADDRESS METHOD OPTIONS
host   all      all  all     trust
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     hba.AnyAddr{},
            Method:      "trust",
            MethodFn:    nil,
            Options:     nil,
        },
    },
}

parse
host a,b,c d,e,f all trust
----
# String render check:
# TYPE DATABASE USER  ADDRESS METHOD OPTIONS
host   a,b,c    d,e,f all     trust
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    {"a", "b", "c"},
            AnyDatabase: false,
            User:        {"d", "e", "f"},
            AnyUser:     false,
            Address:     hba.AnyAddr{},
            Method:      "trust",
            MethodFn:    nil,
            Options:     nil,
        },
    },
}

parse
host all testuser,"all" 0.0.0.0/0 cert
----
# String render check:
# TYPE DATABASE USER           ADDRESS   METHOD OPTIONS
host   all      testuser,"all" 0.0.0.0/0 cert
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        {"testuser", "all"},
            AnyUser:     false,
            Address:     &net.IPNet{
                IP:   {0x0, 0x0, 0x0, 0x0},
                Mask: {0x0, 0x0, 0x0, 0x0},
            },
            Method:   "cert",
            MethodFn: nil,
            Options:  nil,
        },
    },
}

parse
host "all","test space",something some,"us ers" all cert
----
# String render check:
# TYPE DATABASE                     USER            ADDRESS METHOD OPTIONS
host   "all","test space",something "some","us ers" all     cert
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    {"all", "test space", "something"},
            AnyDatabase: false,
            User:        {"some", "us ers"},
            AnyUser:     false,
            Address:     hba.AnyAddr{},
            Method:      "cert",
            MethodFn:    nil,
            Options:     nil,
        },
    },
}

parse
----
# String render check:
# (empty configuration)
# Detail:
&hba.Conf{}

# local not supported
parse
local all all trust
----
error: entry 1 invalid

# not an ip address
parse
host all all blah
----
error: entry 1 invalid

parse
host all all 0.0/0 trust
----
error: invalid CIDR address: 0.0/0

# non-terminated string
parse
host "all all 0.0.0.0/0 trust
----
error: entry 1 invalid

# options
parse
host all all root cert-password ignored=value
host all all all gss krb_realm=other include_realm=0 krb_realm=te-st12.COM
----
# String render check:
# TYPE DATABASE USER ADDRESS METHOD        OPTIONS
host   all      all  root    cert-password ignored=value
host   all      all  all     gss           krb_realm=other include_realm=0 krb_realm=te-st12.COM
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     "root",
            Method:      "cert-password",
            MethodFn:    nil,
            Options:     {
                {"ignored", "value"},
            },
        },
        {
            Type:        "host",
            Database:    nil,
            AnyDatabase: true,
            User:        nil,
            AnyUser:     true,
            Address:     hba.AnyAddr{},
            Method:      "gss",
            MethodFn:    nil,
            Options:     {
                {"krb_realm", "other"},
                {"include_realm", "0"},
                {"krb_realm", "te-st12.COM"},
            },
        },
    },
}

parse
host db all 0.0.0.0/0 cert
----
# String render check:
# TYPE DATABASE USER ADDRESS   METHOD OPTIONS
host   db       all  0.0.0.0/0 cert
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    {"db"},
            AnyDatabase: false,
            User:        nil,
            AnyUser:     true,
            Address:     &net.IPNet{
                IP:   {0x0, 0x0, 0x0, 0x0},
                Mask: {0x0, 0x0, 0x0, 0x0},
            },
            Method:   "cert",
            MethodFn: nil,
            Options:  nil,
        },
    },
}

parse
host "all" "all" 0.0.0.0/0 cert
----
# String render check:
# TYPE DATABASE USER  ADDRESS   METHOD OPTIONS
host   "all"    "all" 0.0.0.0/0 cert
# Detail:
&hba.Conf{
    Entries: {
        {
            Type:        "host",
            Database:    {"all"},
            AnyDatabase: false,
            User:        {"all"},
            AnyUser:     false,
            Address:     &net.IPNet{
                IP:   {0x0, 0x0, 0x0, 0x0},
                Mask: {0x0, 0x0, 0x0, 0x0},
            },
            Method:   "cert",
            MethodFn: nil,
            Options:  nil,
        },
    },
}
