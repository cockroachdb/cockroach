// Code generated by ragel. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT

//line conf.rl:1
// Copyright 2018 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package hba

import (
	"net"
	"strings"
	"unicode/utf8"

	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/pkg/errors"
)

func Parse(input string) (*Conf, error) {
	if !utf8.ValidString(input) {
		return nil, errors.New("invalid UTF-8")
	}
	// To ease parsing, ensure a newline at EOF.
	data := []rune(input + "\n")

//line conf.rl:29

//line conf.rl:30

//line conf.go:36
	var _scanner_actions []byte = []byte{
		0, 1, 0, 1, 3, 1, 15, 1, 16,
		1, 17, 1, 18, 1, 19, 2, 1,
		4, 2, 1, 5, 2, 2, 4, 2,
		2, 5, 2, 2, 9, 2, 2, 14,
		2, 6, 8, 2, 7, 8, 2, 10,
		17, 2, 11, 17, 2, 19, 20, 3,
		1, 4, 13, 3, 1, 5, 13, 3,
		2, 4, 13, 3, 2, 5, 13, 3,
		2, 14, 15, 4, 1, 4, 12, 18,
		4, 1, 5, 12, 18, 4, 2, 4,
		12, 18, 4, 2, 5, 12, 18, 4,
		7, 8, 2, 14,
	}

	var _scanner_key_offsets []int16 = []int16{
		0, 0, 1, 2, 3, 4, 6, 13,
		19, 26, 32, 46, 53, 60, 67, 80,
		81, 82, 83, 84, 86, 87, 97, 106,
		119, 128, 132, 136, 138, 142, 156, 165,
		174, 191, 208, 224, 240, 246, 252, 254,
		257, 259, 262, 268, 274, 276, 279, 281,
		284, 290,
	}

	var _scanner_trans_keys []int32 = []int32{
		10, 111, 115, 116, 9, 32, 9, 32,
		34, 35, 44, 10, 13, 9, 32, 35,
		44, 10, 13, 9, 32, 34, 35, 44,
		10, 13, 9, 32, 35, 44, 10, 13,
		9, 32, 45, 46, 48, 58, 65, 70,
		71, 90, 97, 102, 103, 122, 9, 32,
		45, 65, 90, 97, 122, 9, 32, 44,
		10, 13, 34, 35, 9, 10, 32, 35,
		44, 11, 13, 9, 10, 32, 35, 95,
		45, 46, 48, 57, 65, 90, 97, 122,
		111, 99, 97, 108, 9, 32, 10, 61,
		95, 45, 46, 48, 57, 65, 90, 97,
		122, 95, 45, 46, 48, 57, 65, 90,
		97, 122, 9, 10, 32, 35, 95, 45,
		46, 48, 57, 65, 90, 97, 122, 9,
		32, 47, 46, 58, 65, 70, 97, 102,
		9, 32, 48, 57, 9, 32, 48, 57,
		48, 57, 9, 32, 48, 57, 9, 32,
		45, 47, 46, 58, 65, 70, 71, 90,
		97, 102, 103, 122, 9, 32, 44, 10,
		13, 34, 35, 48, 57, 9, 10, 32,
		35, 44, 11, 13, 48, 57, 9, 10,
		32, 34, 35, 44, 95, 11, 13, 45,
		46, 48, 57, 65, 90, 97, 122, 9,
		10, 32, 35, 44, 61, 95, 11, 13,
		45, 46, 48, 57, 65, 90, 97, 122,
		9, 10, 32, 35, 44, 95, 11, 13,
		45, 46, 48, 57, 65, 90, 97, 122,
		9, 10, 32, 35, 44, 95, 11, 13,
		45, 46, 48, 57, 65, 90, 97, 122,
		32, 34, 35, 44, 9, 13, 9, 32,
		35, 44, 10, 13, 10, 34, 9, 32,
		44, 10, 34, 9, 32, 44, 32, 34,
		35, 44, 9, 13, 9, 32, 35, 44,
		10, 13, 10, 34, 9, 32, 44, 10,
		34, 9, 32, 44, 32, 35, 104, 108,
		9, 13, 32, 35, 104, 108, 9, 13,
	}

	var _scanner_single_lengths []byte = []byte{
		0, 1, 1, 1, 1, 2, 5, 4,
		5, 4, 4, 3, 3, 5, 5, 1,
		1, 1, 1, 2, 1, 2, 1, 5,
		3, 2, 2, 0, 2, 4, 3, 5,
		7, 7, 6, 6, 4, 4, 2, 3,
		2, 3, 4, 4, 2, 3, 2, 3,
		4, 4,
	}

	var _scanner_range_lengths []byte = []byte{
		0, 0, 0, 0, 0, 0, 1, 1,
		1, 1, 5, 2, 2, 1, 4, 0,
		0, 0, 0, 0, 0, 4, 4, 4,
		3, 1, 1, 1, 1, 5, 3, 2,
		5, 5, 5, 5, 1, 1, 0, 0,
		0, 0, 1, 1, 0, 0, 0, 0,
		1, 1,
	}

	var _scanner_index_offsets []int16 = []int16{
		0, 0, 2, 4, 6, 8, 11, 18,
		24, 31, 37, 47, 53, 59, 66, 76,
		78, 80, 82, 84, 87, 89, 96, 102,
		112, 119, 123, 127, 129, 133, 143, 150,
		158, 171, 184, 196, 208, 214, 220, 223,
		227, 230, 234, 240, 246, 249, 253, 256,
		260, 266,
	}

	var _scanner_indicies []byte = []byte{
		1, 0, 3, 2, 4, 2, 5, 2,
		6, 6, 2, 8, 8, 9, 2, 2,
		2, 7, 11, 11, 2, 12, 2, 10,
		14, 14, 15, 2, 2, 2, 13, 17,
		17, 2, 18, 2, 16, 19, 19, 20,
		21, 21, 22, 20, 22, 20, 2, 23,
		23, 24, 24, 24, 2, 26, 26, 2,
		2, 2, 25, 28, 29, 28, 30, 2,
		2, 27, 31, 32, 31, 33, 34, 34,
		34, 34, 34, 2, 35, 2, 36, 2,
		37, 2, 38, 2, 39, 39, 2, 32,
		33, 41, 40, 40, 40, 40, 40, 2,
		42, 42, 42, 42, 42, 2, 43, 44,
		43, 45, 42, 42, 42, 42, 42, 2,
		46, 46, 48, 47, 47, 47, 2, 46,
		46, 49, 2, 50, 50, 49, 2, 51,
		2, 52, 52, 51, 2, 53, 53, 24,
		48, 47, 54, 24, 54, 24, 2, 55,
		55, 2, 2, 2, 56, 25, 57, 29,
		57, 30, 2, 2, 58, 27, 59, 32,
		59, 2, 33, 2, 60, 2, 60, 60,
		60, 60, 25, 28, 29, 28, 30, 2,
		62, 61, 2, 61, 61, 61, 61, 27,
		28, 29, 28, 30, 2, 63, 2, 63,
		63, 63, 63, 27, 64, 65, 64, 66,
		2, 63, 2, 63, 63, 63, 63, 27,
		2, 68, 2, 2, 2, 67, 70, 70,
		2, 71, 2, 69, 2, 73, 72, 74,
		74, 75, 2, 2, 77, 76, 78, 78,
		79, 2, 2, 81, 2, 2, 2, 80,
		83, 83, 2, 84, 2, 82, 2, 86,
		85, 87, 87, 88, 2, 2, 90, 89,
		91, 91, 92, 2, 1, 0, 94, 95,
		1, 93, 96, 97, 98, 99, 96, 93,
	}

	var _scanner_trans_targs []byte = []byte{
		1, 48, 0, 3, 4, 5, 6, 7,
		6, 46, 7, 8, 42, 9, 8, 40,
		9, 10, 36, 10, 11, 24, 29, 12,
		11, 13, 12, 13, 14, 49, 20, 14,
		49, 20, 21, 16, 17, 18, 19, 6,
		21, 22, 23, 14, 49, 20, 25, 24,
		27, 26, 12, 28, 12, 30, 29, 30,
		31, 32, 31, 32, 33, 33, 34, 35,
		14, 49, 20, 37, 38, 37, 10, 36,
		38, 39, 10, 36, 40, 41, 10, 36,
		43, 44, 43, 8, 42, 44, 45, 8,
		42, 46, 47, 8, 42, 0, 2, 15,
		48, 1, 2, 15,
	}

	var _scanner_trans_actions []byte = []byte{
		0, 0, 13, 0, 0, 0, 39, 1,
		9, 3, 0, 78, 21, 1, 11, 3,
		0, 56, 21, 0, 1, 1, 1, 27,
		0, 1, 0, 0, 30, 30, 30, 0,
		0, 0, 1, 0, 0, 0, 0, 42,
		0, 0, 0, 5, 5, 5, 0, 0,
		0, 0, 36, 0, 33, 27, 0, 0,
		1, 88, 0, 0, 1, 0, 0, 0,
		64, 64, 64, 1, 3, 0, 60, 24,
		0, 0, 52, 18, 0, 0, 48, 15,
		1, 3, 0, 83, 24, 0, 0, 73,
		18, 0, 0, 68, 15, 45, 0, 0,
		7, 7, 7, 7,
	}

	var _scanner_eof_actions []byte = []byte{
		0, 0, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13,
		0, 7,
	}

	const scanner_start int = 48
	const scanner_first_final int = 48
	const scanner_error int = 0

	const scanner_en_main int = 48

//line conf.rl:31

	// These are generated by ragel. Reference them to avoid unused lint errors.
	_, _, _ = scanner_first_final, scanner_error, scanner_en_main

	cs, p, pe, eof := 0, 0, len(data), len(data)

	var (
		mark   int
		ms     []tree.Name
		mall   bool
		s      tree.Name
		all    bool
		ipn    *net.IPNet
		e      Entry
		err    error
		d      string
		option [2]string
		conf   Conf
	)

//line conf.go:242
	{
		cs = scanner_start
	}

//line conf.go:247
	{
		var _klen int
		var _trans int
		var _acts int
		var _nacts uint
		var _keys int
		if p == pe {
			goto _test_eof
		}
		if cs == 0 {
			goto _out
		}
	_resume:
		_keys = int(_scanner_key_offsets[cs])
		_trans = int(_scanner_index_offsets[cs])

		_klen = int(_scanner_single_lengths[cs])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + _klen - 1)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + ((_upper - _lower) >> 1)
				switch {
				case data[p] < _scanner_trans_keys[_mid]:
					_upper = _mid - 1
				case data[p] > _scanner_trans_keys[_mid]:
					_lower = _mid + 1
				default:
					_trans += int(_mid - int(_keys))
					goto _match
				}
			}
			_keys += _klen
			_trans += _klen
		}

		_klen = int(_scanner_range_lengths[cs])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + (_klen << 1) - 2)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + (((_upper - _lower) >> 1) & ^1)
				switch {
				case data[p] < _scanner_trans_keys[_mid]:
					_upper = _mid - 2
				case data[p] > _scanner_trans_keys[_mid+1]:
					_lower = _mid + 2
				default:
					_trans += int((_mid - int(_keys)) >> 1)
					goto _match
				}
			}
			_trans += _klen
		}

	_match:
		_trans = int(_scanner_indicies[_trans])
		cs = int(_scanner_trans_targs[_trans])

		if _scanner_trans_actions[_trans] == 0 {
			goto _again
		}

		_acts = int(_scanner_trans_actions[_trans])
		_nacts = uint(_scanner_actions[_acts])
		_acts++
		for ; _nacts > 0; _nacts-- {
			_acts++
			switch _scanner_actions[_acts-1] {
			case 0:
//line conf.rl:55
				mark = p
			case 1:
//line conf.rl:57

				all = false
				s = tree.Name(data[mark : p-1])

			case 2:
//line conf.rl:61

				s = tree.Name(string(data[mark:p]))
				all = false
				if s == "all" {
					s = ""
					ms = nil
					all = true
				}

			case 3:
//line conf.rl:71
				mark = p + 1
			case 4:
//line conf.rl:82
				mall = all
				if !mall {
					ms = []tree.Name{s}
				}
			case 5:
//line conf.rl:83
				mall = mall || all
				if !mall {
					ms = append(ms, s)
				}
			case 6:
//line conf.rl:86

				d = string(data[mark:p])

			case 7:
//line conf.rl:89

				d = strings.Join(strings.Fields(string(data[mark:p])), "/")

			case 8:
//line conf.rl:92

				_, ipn, err = net.ParseCIDR(d)
				if err != nil {
					return nil, err
				}
				e.Address = ipn

			case 9:
//line conf.rl:99

				if all {
					e.Address = AnyAddr{}
				} else {
					e.Address = s
				}

			case 10:
//line conf.rl:119

				e = Entry{Type: "host"}

			case 11:
//line conf.rl:122

				e = Entry{Type: "local"}

			case 12:
//line conf.rl:125

				e.AnyDatabase = mall
				e.Database = ms

			case 13:
//line conf.rl:129

				e.AnyUser = mall
				e.User = ms

			case 14:
//line conf.rl:133

				e.Method = string(data[mark:p])

			case 15:
//line conf.rl:136

				copy(option[:], strings.Split(string(data[mark:p]), "="))
				e.Options = append(e.Options, option)

			case 16:
//line conf.rl:146

				conf.Entries = append(conf.Entries, e)

			case 17:
//line conf.rl:151
				mall = false
			case 18:
//line conf.rl:152
				mall = false
			case 19:
//line conf.rl:161
				return nil, errors.Errorf("entry %d invalid", len(conf.Entries)+1)
			case 20:
//line conf.rl:167
				return nil, errors.New("invalid")
//line conf.go:433
			}
		}

	_again:
		if cs == 0 {
			goto _out
		}
		p++
		if p != pe {
			goto _resume
		}
	_test_eof:
		{
		}
		if p == eof {
			__acts := _scanner_eof_actions[cs]
			__nacts := uint(_scanner_actions[__acts])
			__acts++
			for ; __nacts > 0; __nacts-- {
				__acts++
				switch _scanner_actions[__acts-1] {
				case 16:
//line conf.rl:146

					conf.Entries = append(conf.Entries, e)

				case 19:
//line conf.rl:161
					return nil, errors.Errorf("entry %d invalid", len(conf.Entries)+1)
//line conf.go:460
				}
			}
		}

	_out:
		{
		}
	}

//line conf.rl:175

	return &conf, nil
}
