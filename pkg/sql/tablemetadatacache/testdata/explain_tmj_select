explain-select-query
----
----
EXPLAIN (REDACT) 
SELECT 
    n.id,
    n.name,
    n."parentID",
    db_name.name as db_name,
    n."parentSchemaID",
    schema_name.name as schema_name,
    json_array_length(d->'table' -> 'columns') as columns,
    COALESCE(json_array_length(d->'table' -> 'indexes'), 0) as indexes,
    CASE
        WHEN d->'table'->>'isMaterializedView' = 'true' THEN 'MATERIALIZED_VIEW'
        WHEN d->'table'->>'viewQuery' IS NOT NULL THEN 'VIEW'
        WHEN d->'table'->'sequenceOpts' IS NOT NULL THEN 'SEQUENCE'
        ELSE 'TABLE'
    END as table_type,
    (d->'table'->'autoStatsSettings'->>'enabled')::BOOL as auto_stats_enabled,
    ts.last_updated as stats_last_updated,
    crdb_internal.table_span(n.id) as span
FROM system.namespace n
JOIN system.descriptor enc_desc ON n.id = enc_desc.id
CROSS JOIN LATERAL crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', enc_desc.descriptor) AS d
JOIN system.namespace db_name ON n."parentID" = db_name.id AND db_name."parentID" = 0
JOIN system.namespace schema_name ON n."parentSchemaID" = schema_name.id AND schema_name."parentID" = n."parentID"
LEFT JOIN (
    SELECT "tableID", max("createdAt") as last_updated 
    FROM system.table_statistics 
    GROUP BY "tableID"
) ts ON ts."tableID" = n.id
AS OF SYSTEM TIME '-1us'
WHERE (n."parentID", n."parentSchemaID", n.name) > ($1, $2, $3) 
  AND n."parentSchemaID" != 0
ORDER BY n."parentID", n."parentSchemaID", n.name
LIMIT $4

---
distribution: local
vectorized: true

• sort
│ order: +"parentID",+"parentSchemaID",+name
│
└── • render
    │
    └── • hash join (right outer)
        │ equality: (tableID) = (id)
        │ left cols are key
        │
        ├── • group (streaming)
        │   │ group by: tableID
        │   │ ordered: +"tableID"
        │   │
        │   └── • scan
        │         missing stats
        │         table: table_statistics@primary
        │         spans: FULL SCAN
        │
        └── • top-k
            │ order: +"parentID",+"parentSchemaID",+name
            │ k: 20
            │
            └── • hash join
                │ equality: (parentID, parentSchemaID) = (id, id)
                │
                ├── • project set
                │   │
                │   └── • hash join
                │       │ equality: (id) = (id)
                │       │ left cols are key
                │       │
                │       ├── • scan
                │       │     missing stats
                │       │     table: descriptor@primary
                │       │     spans: FULL SCAN
                │       │
                │       └── • filter
                │           │ filter: "parentSchemaID" != ‹×›
                │           │
                │           └── • scan
                │                 missing stats
                │                 table: namespace@primary
                │                 spans: 1 span
                │
                └── • lookup join
                    │ table: namespace@primary
                    │ equality: (id) = (parentID)
                    │ pred: id != ‹×›
                    │
                    └── • scan
                          missing stats
                          table: namespace@primary
                          spans: 1 span
----
----
