// Code generated by execgen; DO NOT EDIT.

package exec

import (
	"math"

	"github.com/cockroachdb/apd"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

func performPlusDecimal(a, b apd.Decimal) apd.Decimal {
	if _, err := tree.DecimalCtx.Add(&a, &a, &b); err != nil {
		panic(err)
	}
	return a
}

func performMinusDecimal(a, b apd.Decimal) apd.Decimal {
	if _, err := tree.DecimalCtx.Sub(&a, &a, &b); err != nil {
		panic(err)
	}
	return a
}

func performMultDecimal(a, b apd.Decimal) apd.Decimal {
	if _, err := tree.DecimalCtx.Mul(&a, &a, &b); err != nil {
		panic(err)
	}
	return a
}

func performDivDecimal(a, b apd.Decimal) apd.Decimal {
	if _, err := tree.DecimalCtx.Quo(&a, &a, &b); err != nil {
		panic(err)
	}
	return a
}

func performPlusInt8(a, b int8) int8 {

	{
		result := a + b
		if (result < a) != (b < 0) {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performMinusInt8(a, b int8) int8 {

	{
		result := a - b
		if (result < a) != (b > 0) {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performMultInt8(a, b int8) int8 {

	{
		result := a * b
		if a > 10 || a < -10 || b > 10 || b < -10 {
			if a != 0 && b != 0 {
				sameSign := (a < 0) == (b < 0)
				if (result < 0) == sameSign {
					panic(tree.ErrIntOutOfRange)
				} else if result/b != a {
					panic(tree.ErrIntOutOfRange)
				}
			}
		}
		a = result
	}

	return a
}

func performDivInt8(a, b int8) int8 {

	{
		if b == 0 {
			panic(tree.ErrDivByZero)
		}
		result := a / b
		if a == math.MinInt8 && b == -1 {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performPlusInt16(a, b int16) int16 {

	{
		result := a + b
		if (result < a) != (b < 0) {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performMinusInt16(a, b int16) int16 {

	{
		result := a - b
		if (result < a) != (b > 0) {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performMultInt16(a, b int16) int16 {

	{
		result := a * b
		if a > math.MaxInt8 || a < math.MinInt8 || b > math.MaxInt8 || b < math.MinInt8 {
			if a != 0 && b != 0 {
				sameSign := (a < 0) == (b < 0)
				if (result < 0) == sameSign {
					panic(tree.ErrIntOutOfRange)
				} else if result/b != a {
					panic(tree.ErrIntOutOfRange)
				}
			}
		}
		a = result
	}

	return a
}

func performDivInt16(a, b int16) int16 {

	{
		if b == 0 {
			panic(tree.ErrDivByZero)
		}
		result := a / b
		if a == math.MinInt16 && b == -1 {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performPlusInt32(a, b int32) int32 {

	{
		result := a + b
		if (result < a) != (b < 0) {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performMinusInt32(a, b int32) int32 {

	{
		result := a - b
		if (result < a) != (b > 0) {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performMultInt32(a, b int32) int32 {

	{
		result := a * b
		if a > math.MaxInt16 || a < math.MinInt16 || b > math.MaxInt16 || b < math.MinInt16 {
			if a != 0 && b != 0 {
				sameSign := (a < 0) == (b < 0)
				if (result < 0) == sameSign {
					panic(tree.ErrIntOutOfRange)
				} else if result/b != a {
					panic(tree.ErrIntOutOfRange)
				}
			}
		}
		a = result
	}

	return a
}

func performDivInt32(a, b int32) int32 {

	{
		if b == 0 {
			panic(tree.ErrDivByZero)
		}
		result := a / b
		if a == math.MinInt32 && b == -1 {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performPlusInt64(a, b int64) int64 {

	{
		result := a + b
		if (result < a) != (b < 0) {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performMinusInt64(a, b int64) int64 {

	{
		result := a - b
		if (result < a) != (b > 0) {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performMultInt64(a, b int64) int64 {

	{
		result := a * b
		if a > math.MaxInt32 || a < math.MinInt32 || b > math.MaxInt32 || b < math.MinInt32 {
			if a != 0 && b != 0 {
				sameSign := (a < 0) == (b < 0)
				if (result < 0) == sameSign {
					panic(tree.ErrIntOutOfRange)
				} else if result/b != a {
					panic(tree.ErrIntOutOfRange)
				}
			}
		}
		a = result
	}

	return a
}

func performDivInt64(a, b int64) int64 {

	{
		if b == 0 {
			panic(tree.ErrDivByZero)
		}
		result := a / b
		if a == math.MinInt64 && b == -1 {
			panic(tree.ErrIntOutOfRange)
		}
		a = result
	}

	return a
}

func performPlusFloat32(a, b float32) float32 {
	a = a + b
	return a
}

func performMinusFloat32(a, b float32) float32 {
	a = a - b
	return a
}

func performMultFloat32(a, b float32) float32 {
	a = a * b
	return a
}

func performDivFloat32(a, b float32) float32 {
	a = a / b
	return a
}

func performPlusFloat64(a, b float64) float64 {
	a = a + b
	return a
}

func performMinusFloat64(a, b float64) float64 {
	a = a - b
	return a
}

func performMultFloat64(a, b float64) float64 {
	a = a * b
	return a
}

func performDivFloat64(a, b float64) float64 {
	a = a / b
	return a
}
