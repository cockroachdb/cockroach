// Code generated by execgen; DO NOT EDIT.
// Copyright 2019 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package exec

import (
	"context"
	"math"

	"github.com/cockroachdb/apd"
	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/exec/execerror"
	"github.com/cockroachdb/cockroach/pkg/sql/exec/execgen"
	"github.com/cockroachdb/cockroach/pkg/sql/exec/typeconv"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	semtypes "github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/pkg/errors"
)

// Use execgen package to remove unused import warning.
var _ interface{} = execgen.GET

func GetCastOperator(
	input Operator, colIdx int, resultIdx int, fromType *semtypes.T, toType *semtypes.T,
) (Operator, error) {
	switch from := typeconv.FromColumnType(fromType); from {
	case coltypes.Bool:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpBoolBool{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int8:
			return &castOpBoolInt8{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int16:
			return &castOpBoolInt16{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int32:
			return &castOpBoolInt32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int64:
			return &castOpBoolInt64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float32:
			return &castOpBoolFloat32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpBoolFloat64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Bytes:
		switch to := typeconv.FromColumnType(toType); to {
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Decimal:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpDecimalBool{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpDecimalDecimal{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Int8:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpInt8Bool{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpInt8Decimal{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int8:
			return &castOpInt8Int8{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float32:
			return &castOpInt8Float32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpInt8Float64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Int16:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpInt16Bool{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpInt16Decimal{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int16:
			return &castOpInt16Int16{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float32:
			return &castOpInt16Float32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpInt16Float64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Int32:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpInt32Bool{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpInt32Decimal{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int32:
			return &castOpInt32Int32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float32:
			return &castOpInt32Float32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpInt32Float64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Int64:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpInt64Bool{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpInt64Decimal{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int64:
			return &castOpInt64Int64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float32:
			return &castOpInt64Float32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpInt64Float64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Float32:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpFloat32Bool{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpFloat32Decimal{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int8:
			return &castOpFloat32Int8{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int16:
			return &castOpFloat32Int16{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int32:
			return &castOpFloat32Int32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int64:
			return &castOpFloat32Int64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float32:
			return &castOpFloat32Float32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Float64:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpFloat64Bool{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpFloat64Decimal{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int8:
			return &castOpFloat64Int8{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int16:
			return &castOpFloat64Int16{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int32:
			return &castOpFloat64Int32{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int64:
			return &castOpFloat64Int64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpFloat64Float64{
				OneInputNode: NewOneInputNode(input),
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	default:
		return nil, errors.Errorf("unhandled FROM type: %s", from)
	}
}

type castOpBoolBool struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpBoolBool{}

func (c *castOpBoolBool) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpBoolBool) Init() {
	c.input.Init()
}

func (c *castOpBoolBool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r bool
					r = v
					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r bool
					r = v
					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r bool
				r = v
				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r bool
				r = v
				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpBoolInt8 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpBoolInt8{}

func (c *castOpBoolInt8) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpBoolInt8) Init() {
	c.input.Init()
}

func (c *castOpBoolInt8) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int8)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int8()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int8

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int8

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int8

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int8

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpBoolInt16 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpBoolInt16{}

func (c *castOpBoolInt16) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpBoolInt16) Init() {
	c.input.Init()
}

func (c *castOpBoolInt16) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int16)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int16()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int16

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int16

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int16

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int16

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpBoolInt32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpBoolInt32{}

func (c *castOpBoolInt32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpBoolInt32) Init() {
	c.input.Init()
}

func (c *castOpBoolInt32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int32

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int32

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int32

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int32

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpBoolInt64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpBoolInt64{}

func (c *castOpBoolInt64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpBoolInt64) Init() {
	c.input.Init()
}

func (c *castOpBoolInt64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int64

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int64

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int64

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int64

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpBoolFloat32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpBoolFloat32{}

func (c *castOpBoolFloat32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpBoolFloat32) Init() {
	c.input.Init()
}

func (c *castOpBoolFloat32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float32

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float32

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float32

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float32

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpBoolFloat64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpBoolFloat64{}

func (c *castOpBoolFloat64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpBoolFloat64) Init() {
	c.input.Init()
}

func (c *castOpBoolFloat64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float64

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float64

					r = 0
					if v {
						r = 1
					}

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float64

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float64

				r = 0
				if v {
					r = 1
				}

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpDecimalBool struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpDecimalBool{}

func (c *castOpDecimalBool) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpDecimalBool) Init() {
	c.input.Init()
}

func (c *castOpDecimalBool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Decimal()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r bool

					r = v.Sign() != 0

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r bool

					r = v.Sign() != 0

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r bool

				r = v.Sign() != 0

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r bool

				r = v.Sign() != 0

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpDecimalDecimal struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpDecimalDecimal{}

func (c *castOpDecimalDecimal) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpDecimalDecimal) Init() {
	c.input.Init()
}

func (c *castOpDecimalDecimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Decimal()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r apd.Decimal
					r = v
					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r apd.Decimal
					r = v
					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r apd.Decimal
				r = v
				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r apd.Decimal
				r = v
				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt8Bool struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt8Bool{}

func (c *castOpInt8Bool) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt8Bool) Init() {
	c.input.Init()
}

func (c *castOpInt8Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int8()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt8Decimal struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt8Decimal{}

func (c *castOpInt8Decimal) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt8Decimal) Init() {
	c.input.Init()
}

func (c *castOpInt8Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int8()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r apd.Decimal

					r = *apd.New(int64(v), 0)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r apd.Decimal

					r = *apd.New(int64(v), 0)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r apd.Decimal

				r = *apd.New(int64(v), 0)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r apd.Decimal

				r = *apd.New(int64(v), 0)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt8Int8 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt8Int8{}

func (c *castOpInt8Int8) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt8Int8) Init() {
	c.input.Init()
}

func (c *castOpInt8Int8) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int8)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int8()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int8()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int8
					r = v
					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int8
					r = v
					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int8
				r = v
				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int8
				r = v
				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt8Float32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt8Float32{}

func (c *castOpInt8Float32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt8Float32) Init() {
	c.input.Init()
}

func (c *castOpInt8Float32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int8()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float32

					r = float32(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float32

					r = float32(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float32

				r = float32(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float32

				r = float32(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt8Float64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt8Float64{}

func (c *castOpInt8Float64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt8Float64) Init() {
	c.input.Init()
}

func (c *castOpInt8Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int8()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float64

					r = float64(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float64

					r = float64(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float64

				r = float64(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float64

				r = float64(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt16Bool struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt16Bool{}

func (c *castOpInt16Bool) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt16Bool) Init() {
	c.input.Init()
}

func (c *castOpInt16Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt16Decimal struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt16Decimal{}

func (c *castOpInt16Decimal) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt16Decimal) Init() {
	c.input.Init()
}

func (c *castOpInt16Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r apd.Decimal

					r = *apd.New(int64(v), 0)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r apd.Decimal

					r = *apd.New(int64(v), 0)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r apd.Decimal

				r = *apd.New(int64(v), 0)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r apd.Decimal

				r = *apd.New(int64(v), 0)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt16Int16 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt16Int16{}

func (c *castOpInt16Int16) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt16Int16) Init() {
	c.input.Init()
}

func (c *castOpInt16Int16) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int16)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int16()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int16
					r = v
					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int16
					r = v
					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int16
				r = v
				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int16
				r = v
				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt16Float32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt16Float32{}

func (c *castOpInt16Float32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt16Float32) Init() {
	c.input.Init()
}

func (c *castOpInt16Float32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float32

					r = float32(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float32

					r = float32(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float32

				r = float32(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float32

				r = float32(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt16Float64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt16Float64{}

func (c *castOpInt16Float64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt16Float64) Init() {
	c.input.Init()
}

func (c *castOpInt16Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float64

					r = float64(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float64

					r = float64(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float64

				r = float64(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float64

				r = float64(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt32Bool struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt32Bool{}

func (c *castOpInt32Bool) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt32Bool) Init() {
	c.input.Init()
}

func (c *castOpInt32Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt32Decimal struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt32Decimal{}

func (c *castOpInt32Decimal) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt32Decimal) Init() {
	c.input.Init()
}

func (c *castOpInt32Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r apd.Decimal

					r = *apd.New(int64(v), 0)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r apd.Decimal

					r = *apd.New(int64(v), 0)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r apd.Decimal

				r = *apd.New(int64(v), 0)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r apd.Decimal

				r = *apd.New(int64(v), 0)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt32Int32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt32Int32{}

func (c *castOpInt32Int32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt32Int32) Init() {
	c.input.Init()
}

func (c *castOpInt32Int32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int32
					r = v
					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int32
					r = v
					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int32
				r = v
				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int32
				r = v
				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt32Float32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt32Float32{}

func (c *castOpInt32Float32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt32Float32) Init() {
	c.input.Init()
}

func (c *castOpInt32Float32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float32

					r = float32(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float32

					r = float32(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float32

				r = float32(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float32

				r = float32(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt32Float64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt32Float64{}

func (c *castOpInt32Float64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt32Float64) Init() {
	c.input.Init()
}

func (c *castOpInt32Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float64

					r = float64(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float64

					r = float64(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float64

				r = float64(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float64

				r = float64(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt64Bool struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt64Bool{}

func (c *castOpInt64Bool) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt64Bool) Init() {
	c.input.Init()
}

func (c *castOpInt64Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt64Decimal struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt64Decimal{}

func (c *castOpInt64Decimal) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt64Decimal) Init() {
	c.input.Init()
}

func (c *castOpInt64Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r apd.Decimal

					r = *apd.New(int64(v), 0)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r apd.Decimal

					r = *apd.New(int64(v), 0)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r apd.Decimal

				r = *apd.New(int64(v), 0)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r apd.Decimal

				r = *apd.New(int64(v), 0)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt64Int64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt64Int64{}

func (c *castOpInt64Int64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt64Int64) Init() {
	c.input.Init()
}

func (c *castOpInt64Int64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int64
					r = v
					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int64
					r = v
					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int64
				r = v
				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int64
				r = v
				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt64Float32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt64Float32{}

func (c *castOpInt64Float32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt64Float32) Init() {
	c.input.Init()
}

func (c *castOpInt64Float32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float32

					r = float32(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float32

					r = float32(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float32

				r = float32(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float32

				r = float32(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpInt64Float64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpInt64Float64{}

func (c *castOpInt64Float64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpInt64Float64) Init() {
	c.input.Init()
}

func (c *castOpInt64Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float64

					r = float64(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float64

					r = float64(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float64

				r = float64(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float64

				r = float64(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat32Bool struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat32Bool{}

func (c *castOpFloat32Bool) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat32Bool) Init() {
	c.input.Init()
}

func (c *castOpFloat32Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat32Decimal struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat32Decimal{}

func (c *castOpFloat32Decimal) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat32Decimal) Init() {
	c.input.Init()
}

func (c *castOpFloat32Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r apd.Decimal

					{
						var tmpDec apd.Decimal
						_, tmpErr := tmpDec.SetFloat64(float64(v))
						if tmpErr != nil {
							execerror.NonVectorizedPanic(tmpErr)
						}
						r = tmpDec
					}

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r apd.Decimal

					{
						var tmpDec apd.Decimal
						_, tmpErr := tmpDec.SetFloat64(float64(v))
						if tmpErr != nil {
							execerror.NonVectorizedPanic(tmpErr)
						}
						r = tmpDec
					}

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r apd.Decimal

				{
					var tmpDec apd.Decimal
					_, tmpErr := tmpDec.SetFloat64(float64(v))
					if tmpErr != nil {
						execerror.NonVectorizedPanic(tmpErr)
					}
					r = tmpDec
				}

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r apd.Decimal

				{
					var tmpDec apd.Decimal
					_, tmpErr := tmpDec.SetFloat64(float64(v))
					if tmpErr != nil {
						execerror.NonVectorizedPanic(tmpErr)
					}
					r = tmpDec
				}

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat32Int8 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat32Int8{}

func (c *castOpFloat32Int8) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat32Int8) Init() {
	c.input.Init()
}

func (c *castOpFloat32Int8) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int8)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int8()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int8

					if math.IsNaN(float64(v)) || v <= float32(math.MinInt8) || v >= float32(math.MaxInt8) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int8(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int8

					if math.IsNaN(float64(v)) || v <= float32(math.MinInt8) || v >= float32(math.MaxInt8) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int8(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int8

				if math.IsNaN(float64(v)) || v <= float32(math.MinInt8) || v >= float32(math.MaxInt8) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int8(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int8

				if math.IsNaN(float64(v)) || v <= float32(math.MinInt8) || v >= float32(math.MaxInt8) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int8(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat32Int16 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat32Int16{}

func (c *castOpFloat32Int16) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat32Int16) Init() {
	c.input.Init()
}

func (c *castOpFloat32Int16) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int16)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int16()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int16

					if math.IsNaN(float64(v)) || v <= float32(math.MinInt16) || v >= float32(math.MaxInt16) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int16(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int16

					if math.IsNaN(float64(v)) || v <= float32(math.MinInt16) || v >= float32(math.MaxInt16) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int16(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int16

				if math.IsNaN(float64(v)) || v <= float32(math.MinInt16) || v >= float32(math.MaxInt16) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int16(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int16

				if math.IsNaN(float64(v)) || v <= float32(math.MinInt16) || v >= float32(math.MaxInt16) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int16(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat32Int32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat32Int32{}

func (c *castOpFloat32Int32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat32Int32) Init() {
	c.input.Init()
}

func (c *castOpFloat32Int32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int32

					if math.IsNaN(float64(v)) || v <= float32(math.MinInt32) || v >= float32(math.MaxInt32) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int32(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int32

					if math.IsNaN(float64(v)) || v <= float32(math.MinInt32) || v >= float32(math.MaxInt32) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int32(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int32

				if math.IsNaN(float64(v)) || v <= float32(math.MinInt32) || v >= float32(math.MaxInt32) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int32(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int32

				if math.IsNaN(float64(v)) || v <= float32(math.MinInt32) || v >= float32(math.MaxInt32) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int32(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat32Int64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat32Int64{}

func (c *castOpFloat32Int64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat32Int64) Init() {
	c.input.Init()
}

func (c *castOpFloat32Int64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int64

					if math.IsNaN(float64(v)) || v <= float32(math.MinInt64) || v >= float32(math.MaxInt64) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int64(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int64

					if math.IsNaN(float64(v)) || v <= float32(math.MinInt64) || v >= float32(math.MaxInt64) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int64(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int64

				if math.IsNaN(float64(v)) || v <= float32(math.MinInt64) || v >= float32(math.MaxInt64) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int64(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int64

				if math.IsNaN(float64(v)) || v <= float32(math.MinInt64) || v >= float32(math.MaxInt64) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int64(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat32Float32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat32Float32{}

func (c *castOpFloat32Float32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat32Float32) Init() {
	c.input.Init()
}

func (c *castOpFloat32Float32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float32
					r = v
					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float32
					r = v
					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float32
				r = v
				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float32
				r = v
				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat64Bool struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat64Bool{}

func (c *castOpFloat64Bool) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat64Bool) Init() {
	c.input.Init()
}

func (c *castOpFloat64Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r bool

					r = v != 0

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r bool

				r = v != 0

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat64Decimal struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat64Decimal{}

func (c *castOpFloat64Decimal) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat64Decimal) Init() {
	c.input.Init()
}

func (c *castOpFloat64Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r apd.Decimal

					{
						var tmpDec apd.Decimal
						_, tmpErr := tmpDec.SetFloat64(float64(v))
						if tmpErr != nil {
							execerror.NonVectorizedPanic(tmpErr)
						}
						r = tmpDec
					}

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r apd.Decimal

					{
						var tmpDec apd.Decimal
						_, tmpErr := tmpDec.SetFloat64(float64(v))
						if tmpErr != nil {
							execerror.NonVectorizedPanic(tmpErr)
						}
						r = tmpDec
					}

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r apd.Decimal

				{
					var tmpDec apd.Decimal
					_, tmpErr := tmpDec.SetFloat64(float64(v))
					if tmpErr != nil {
						execerror.NonVectorizedPanic(tmpErr)
					}
					r = tmpDec
				}

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r apd.Decimal

				{
					var tmpDec apd.Decimal
					_, tmpErr := tmpDec.SetFloat64(float64(v))
					if tmpErr != nil {
						execerror.NonVectorizedPanic(tmpErr)
					}
					r = tmpDec
				}

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat64Int8 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat64Int8{}

func (c *castOpFloat64Int8) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat64Int8) Init() {
	c.input.Init()
}

func (c *castOpFloat64Int8) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int8)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int8()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int8

					if math.IsNaN(float64(v)) || v <= float64(math.MinInt8) || v >= float64(math.MaxInt8) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int8(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int8

					if math.IsNaN(float64(v)) || v <= float64(math.MinInt8) || v >= float64(math.MaxInt8) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int8(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int8

				if math.IsNaN(float64(v)) || v <= float64(math.MinInt8) || v >= float64(math.MaxInt8) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int8(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int8

				if math.IsNaN(float64(v)) || v <= float64(math.MinInt8) || v >= float64(math.MaxInt8) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int8(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat64Int16 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat64Int16{}

func (c *castOpFloat64Int16) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat64Int16) Init() {
	c.input.Init()
}

func (c *castOpFloat64Int16) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int16)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int16()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int16

					if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int16(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int16

					if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int16(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int16

				if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int16(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int16

				if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int16(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat64Int32 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat64Int32{}

func (c *castOpFloat64Int32) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat64Int32) Init() {
	c.input.Init()
}

func (c *castOpFloat64Int32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int32()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int32

					if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int32(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int32

					if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int32(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int32

				if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int32(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int32

				if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int32(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat64Int64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat64Int64{}

func (c *castOpFloat64Int64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat64Int64) Init() {
	c.input.Init()
}

func (c *castOpFloat64Int64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Int64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r int64

					if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int64(v)

					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r int64

					if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
						execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
					}
					r = int64(v)

					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r int64

				if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int64(v)

				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r int64

				if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
					execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
				}
				r = int64(v)

				projCol[int(i)] = r
			}
		}
	}
	return batch
}

type castOpFloat64Float64 struct {
	OneInputNode
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ StaticMemoryOperator = &castOpFloat64Float64{}

func (c *castOpFloat64Float64) EstimateStaticMemoryUsage() int {
	return EstimateBatchSizeBytes([]coltypes.T{c.toType}, coldata.BatchSize)
}

func (c *castOpFloat64Float64) Init() {
	c.input.Init()
}

func (c *castOpFloat64Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		batch.AppendCol(coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	if vec.MaybeHasNulls() {
		vecNulls := vec.Nulls()
		projNulls := projVec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if vecNulls.NullAt(i) {
					projNulls.SetNull(i)
				} else {
					v := col[int(i)]
					var r float64
					r = v
					projCol[int(i)] = r
				}
			}
		} else {
			for i := range col {
				if vecNulls.NullAt(uint16(i)) {
					projNulls.SetNull(uint16(i))
				} else {
					v := col[i]
					var r float64
					r = v
					projCol[int(i)] = r
				}
			}
		}
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				v := col[int(i)]
				var r float64
				r = v
				projCol[int(i)] = r
			}
		} else {
			for i := range col {
				v := col[i]
				var r float64
				r = v
				projCol[int(i)] = r
			}
		}
	}
	return batch
}
