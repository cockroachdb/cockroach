// Copyright 2017 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.
//
// Data structures and basic infrastructure for distributed SQL APIs. See
// docs/RFCS/distributed_sql.md.
// All the concepts here are "physical plan" concepts.

syntax = "proto3";
package cockroach.sql.stats;
option go_package = "stats";

import "gogoproto/gogo.proto";
import "sql/types/types.proto";

// HistogramData encodes the data for a histogram, which captures the
// distribution of values on a specific column.
message HistogramData {
  message Bucket {
    // The estimated number of values that are equal to upper_bound.
    int64 num_eq = 1;

    // The estimated number of values in the bucket (excluding those
    // that are equal to upper_bound). Splitting the count into two
    // makes the histogram effectively equivalent to a histogram with
    // twice as many buckets, with every other bucket containing a
    // single value. This might be particularly advantageous if the
    // histogram algorithm makes sure the top "heavy hitters" (most
    // frequent elements) are bucket boundaries (similar to a
    // compressed histogram).
    int64 num_range = 2;

    // The estimated number of distinct values in the bucket (excluding
    // those that are equal to upper_bound). This is a floating point
    // value because it is estimated by distributing the known distinct
    // count for the column among the buckets, in proportion to the number
    // of rows in each bucket. This value is in fact derived from the rest
    // of the data, but is included to avoid re-computing it later.
    double distinct_range = 4;

    // The upper boundary of the bucket. The column values for the upper bound
    // are encoded using the ascending key encoding of the column type.
    bytes upper_bound = 3;
  }

  // Value type for the column.
  sql.sem.types.T column_type = 2;

  // Histogram buckets. Note that NULL values are excluded from the
  // histogram.
  repeated Bucket buckets = 1 [(gogoproto.nullable) = false];
}
