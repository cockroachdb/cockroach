// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/stats/stats.proto

package stats

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_cockroachdb_cockroach_pkg_sql_sqlbase "github.com/cockroachdb/cockroach/pkg/sql/sqlbase"
import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// Stats encodes the statistics stored in system.table_statistics
type Stats struct {
	// The ID of the table.
	TableID github_com_cockroachdb_cockroach_pkg_sql_sqlbase.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/sqlbase.ID" json:"table_id,omitempty"`
	// The ID for this statistic.  It need not be globally unique,
	// but must be unique for this table.
	StatisticID uint32 `protobuf:"varint,2,opt,name=statistic_id,json=statisticId,proto3" json:"statistic_id,omitempty"`
	// Optional user-defined name for the statistic.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The column ID(s) for which this statistic is generated.
	ColumnIDs []github_com_cockroachdb_cockroach_pkg_sql_sqlbase.ColumnID `protobuf:"varint,4,rep,packed,name=column_ids,json=columnIds,casttype=github.com/cockroachdb/cockroach/pkg/sql/sqlbase.ColumnID" json:"column_ids,omitempty"`
	// The time at which the statistic was created.
	CreatedAt time.Time `protobuf:"bytes,5,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	// The total number of rows in the table.
	RowCount uint32 `protobuf:"varint,6,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// The estimated number of distinct values of the columns in column_ids.
	DistinctCount uint32 `protobuf:"varint,7,opt,name=distinct_count,json=distinctCount,proto3" json:"distinct_count,omitempty"`
	// The number of rows that have a NULL in any of the columns in column_ids.
	NullCount uint32 `protobuf:"varint,8,opt,name=null_count,json=nullCount,proto3" json:"null_count,omitempty"`
	// Optional, and can only be set if there is a single column in column_ids.
	// Defines a histogram of the distribution of values in the column.
	Histogram *HistogramData `protobuf:"bytes,9,opt,name=histogram" json:"histogram,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{0} }

func init() {
	proto.RegisterType((*Stats)(nil), "cockroach.sql.stats.Stats")
}
func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.TableID))
	}
	if m.StatisticID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.StatisticID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ColumnIDs) > 0 {
		dAtA2 := make([]byte, len(m.ColumnIDs)*10)
		var j1 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintStats(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.RowCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.RowCount))
	}
	if m.DistinctCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.DistinctCount))
	}
	if m.NullCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NullCount))
	}
	if m.Histogram != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Histogram.Size()))
		n4, err := m.Histogram.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Stats) Size() (n int) {
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovStats(uint64(m.TableID))
	}
	if m.StatisticID != 0 {
		n += 1 + sovStats(uint64(m.StatisticID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovStats(uint64(e))
		}
		n += 1 + sovStats(uint64(l)) + l
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovStats(uint64(l))
	if m.RowCount != 0 {
		n += 1 + sovStats(uint64(m.RowCount))
	}
	if m.DistinctCount != 0 {
		n += 1 + sovStats(uint64(m.DistinctCount))
	}
	if m.NullCount != 0 {
		n += 1 + sovStats(uint64(m.NullCount))
	}
	if m.Histogram != nil {
		l = m.Histogram.Size()
		n += 1 + l + sovStats(uint64(l))
	}
	return n
}

func sovStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_sqlbase.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatisticID", wireType)
			}
			m.StatisticID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatisticID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_sqlbase.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_sql_sqlbase.ColumnID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStats
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_sqlbase.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStats
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_sql_sqlbase.ColumnID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowCount", wireType)
			}
			m.RowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistinctCount", wireType)
			}
			m.DistinctCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistinctCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullCount", wireType)
			}
			m.NullCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NullCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histogram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Histogram == nil {
				m.Histogram = &HistogramData{}
			}
			if err := m.Histogram.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sql/stats/stats.proto", fileDescriptorStats) }

var fileDescriptorStats = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0x6b, 0xae, 0xbd, 0x36, 0x2e, 0x05, 0x29, 0x80, 0x14, 0x8a, 0x88, 0xab, 0x93, 0x90,
	0x3a, 0x39, 0xd2, 0xdd, 0xc4, 0x48, 0x1a, 0x21, 0xc2, 0x98, 0xbb, 0x09, 0x09, 0x55, 0x8e, 0x13,
	0x52, 0xeb, 0x9c, 0xb8, 0x8d, 0x1d, 0xdd, 0xc7, 0xe0, 0x3e, 0x56, 0x46, 0x46, 0xa6, 0x00, 0xe1,
	0x5b, 0xdc, 0x84, 0xec, 0x24, 0xed, 0xc2, 0x72, 0x8b, 0xf5, 0xfc, 0xf7, 0xef, 0x3d, 0xff, 0xdf,
	0xd3, 0x83, 0xaf, 0xe4, 0x81, 0x7b, 0x52, 0x11, 0x25, 0xbb, 0x13, 0xef, 0x4b, 0xa1, 0x84, 0xfd,
	0x82, 0x0a, 0x7a, 0x5b, 0x0a, 0x42, 0x77, 0x58, 0x1e, 0x38, 0x36, 0x4f, 0xcb, 0xd7, 0x27, 0x76,
	0xc7, 0xa4, 0x12, 0x59, 0x49, 0xf2, 0x8e, 0x5f, 0xbe, 0xcc, 0x44, 0x26, 0x4c, 0xe8, 0xe9, 0xa8,
	0x57, 0x51, 0x26, 0x44, 0xc6, 0x53, 0xcf, 0xdc, 0xe2, 0xea, 0x9b, 0xa7, 0x58, 0x9e, 0x4a, 0x45,
	0xf2, 0x7d, 0x07, 0x5c, 0x7c, 0x1f, 0xc3, 0xc9, 0xb5, 0x2e, 0x68, 0x7f, 0x85, 0x33, 0x45, 0x62,
	0x9e, 0x6e, 0x59, 0xe2, 0x80, 0x15, 0x58, 0x2f, 0x7c, 0xbf, 0x6d, 0xd0, 0xf4, 0x46, 0x6b, 0x61,
	0xf0, 0xd0, 0xa0, 0xab, 0x8c, 0xa9, 0x5d, 0x15, 0x63, 0x2a, 0x72, 0xef, 0x68, 0x2e, 0x89, 0x4f,
	0xb1, 0xb7, 0xbf, 0xcd, 0x3c, 0xe3, 0xf0, 0xc0, 0x63, 0x22, 0x53, 0x1c, 0x06, 0xd1, 0xd4, 0xd4,
	0x0c, 0x13, 0xfb, 0x12, 0x3e, 0xd5, 0xc6, 0x99, 0x54, 0x8c, 0xea, 0x2f, 0x9e, 0x98, 0x2f, 0x9e,
	0xb7, 0x0d, 0x9a, 0x5f, 0x0f, 0x7a, 0x18, 0x44, 0xf3, 0x23, 0x14, 0x26, 0xb6, 0x03, 0xc7, 0x05,
	0xc9, 0x53, 0xe7, 0x6c, 0x05, 0xd6, 0x96, 0x3f, 0xae, 0x1b, 0x04, 0x22, 0xa3, 0xd8, 0x0c, 0x42,
	0x2a, 0x78, 0x95, 0x17, 0x5b, 0x96, 0x48, 0x67, 0xbc, 0x3a, 0x5b, 0x2f, 0xfc, 0xcf, 0x6d, 0x83,
	0xac, 0x8d, 0x51, 0xc3, 0x40, 0x3e, 0x34, 0xe8, 0xfd, 0xa3, 0x0d, 0x0f, 0xd9, 0x91, 0xd5, 0x55,
	0x0f, 0x13, 0x69, 0x6f, 0x20, 0xa4, 0x65, 0x4a, 0x54, 0x9a, 0x6c, 0x89, 0x72, 0x26, 0x2b, 0xb0,
	0x9e, 0x5f, 0x2e, 0x71, 0x37, 0x57, 0x3c, 0xcc, 0x15, 0xdf, 0x0c, 0x73, 0xf5, 0x67, 0x75, 0x83,
	0x46, 0xf7, 0xbf, 0x10, 0x88, 0xac, 0x3e, 0xef, 0x83, 0xb2, 0xdf, 0x40, 0xab, 0x14, 0x77, 0x5b,
	0x2a, 0xaa, 0x42, 0x39, 0xe7, 0xba, 0xf5, 0x68, 0x56, 0x8a, 0xbb, 0x8d, 0xbe, 0xdb, 0xef, 0xe0,
	0xb3, 0x44, 0xb7, 0x5c, 0x50, 0xd5, 0x13, 0x53, 0x43, 0x2c, 0x06, 0xb5, 0xc3, 0xde, 0x42, 0x58,
	0x54, 0x9c, 0xf7, 0xc8, 0xcc, 0x20, 0x96, 0x56, 0xba, 0xe7, 0x8f, 0xd0, 0x3a, 0xee, 0x84, 0x63,
	0x19, 0x9b, 0x17, 0xf8, 0x3f, 0x4b, 0x84, 0x3f, 0x0d, 0x54, 0x40, 0x14, 0xe9, 0xa7, 0x7a, 0x4a,
	0xf5, 0x51, 0xfd, 0xc7, 0x1d, 0xd5, 0xad, 0x0b, 0x7e, 0xb4, 0x2e, 0xf8, 0xd9, 0xba, 0xe0, 0x77,
	0xeb, 0x82, 0xfb, 0xbf, 0xee, 0xe8, 0xcb, 0xc4, 0xe4, 0xc7, 0xe7, 0xa6, 0xe9, 0xab, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x30, 0x90, 0x06, 0x3e, 0xb9, 0x02, 0x00, 0x00,
}
