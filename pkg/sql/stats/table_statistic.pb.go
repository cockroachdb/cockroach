// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/stats/table_statistic.proto

package stats

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A TableStatisticProto object holds a statistic for a particular column or
// group of columns. It mirrors the structure of the system.table_statistics
// table. It is also used as the format in which table statistics are
// serialized in a backup.
type TableStatisticProto struct {
	// The ID of the table.
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	// The ID for this statistic.  It need not be globally unique,
	// but must be unique for this table.
	StatisticID uint64 `protobuf:"varint,2,opt,name=statistic_id,json=statisticId,proto3" json:"statistic_id,omitempty"`
	// Optional user-defined name for the statistic.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The column ID(s) for which this statistic is generated.
	ColumnIDs []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,4,rep,packed,name=column_ids,json=columnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_ids,omitempty"`
	// The time at which the statistic was created.
	CreatedAt time.Time `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	// The total number of rows in the table.
	RowCount uint64 `protobuf:"varint,6,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// The estimated number of distinct values of the columns in ColumnIDs.
	DistinctCount uint64 `protobuf:"varint,7,opt,name=distinct_count,json=distinctCount,proto3" json:"distinct_count,omitempty"`
	// The number of rows that have a NULL in all of the columns in ColumnIDs.
	NullCount uint64 `protobuf:"varint,8,opt,name=null_count,json=nullCount,proto3" json:"null_count,omitempty"`
	// Histogram (if available)
	HistogramData *HistogramData `protobuf:"bytes,9,opt,name=histogram_data,json=histogramData,proto3" json:"histogram_data,omitempty"`
}

func (m *TableStatisticProto) Reset()         { *m = TableStatisticProto{} }
func (m *TableStatisticProto) String() string { return proto.CompactTextString(m) }
func (*TableStatisticProto) ProtoMessage()    {}
func (*TableStatisticProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b1025e301844b1b, []int{0}
}
func (m *TableStatisticProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableStatisticProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TableStatisticProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableStatisticProto.Merge(m, src)
}
func (m *TableStatisticProto) XXX_Size() int {
	return m.Size()
}
func (m *TableStatisticProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TableStatisticProto.DiscardUnknown(m)
}

var xxx_messageInfo_TableStatisticProto proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TableStatisticProto)(nil), "cockroach.sql.stats.TableStatisticProto")
}

func init() { proto.RegisterFile("sql/stats/table_statistic.proto", fileDescriptor_2b1025e301844b1b) }

var fileDescriptor_2b1025e301844b1b = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x3f, 0x6f, 0x9c, 0x30,
	0x18, 0xc6, 0x71, 0x73, 0xc9, 0x1d, 0xbe, 0x5e, 0x2a, 0x91, 0x0e, 0xf4, 0xaa, 0x02, 0x8a, 0x54,
	0x95, 0xc9, 0x48, 0xe9, 0xd6, 0xa9, 0xe5, 0x18, 0xca, 0xd6, 0xd2, 0x4c, 0x5d, 0x90, 0xb1, 0x29,
	0x87, 0x02, 0x98, 0x60, 0xa3, 0x7c, 0x8d, 0x7c, 0x8c, 0x7e, 0x94, 0x1b, 0x33, 0x66, 0xa2, 0x2d,
	0xf7, 0x2d, 0x32, 0x55, 0x36, 0x07, 0xe9, 0xd0, 0x29, 0xdb, 0xfb, 0xe7, 0xe7, 0xf7, 0x79, 0x5e,
	0xbd, 0x86, 0x36, 0xbf, 0x2e, 0x3c, 0x2e, 0xb0, 0xe0, 0x9e, 0xc0, 0x49, 0x91, 0xc6, 0x32, 0xce,
	0xb9, 0xc8, 0x09, 0xaa, 0x1b, 0x26, 0x98, 0x71, 0x46, 0x18, 0xb9, 0x6a, 0x18, 0x26, 0x5b, 0xc4,
	0xaf, 0x0b, 0xa4, 0xd0, 0xf5, 0xcb, 0x8c, 0x65, 0x4c, 0xf5, 0x3d, 0x19, 0x0d, 0xe8, 0xda, 0xce,
	0x18, 0xcb, 0x8a, 0xd4, 0x53, 0x59, 0xd2, 0xfe, 0xf0, 0x44, 0x5e, 0xa6, 0x5c, 0xe0, 0xb2, 0x3e,
	0x00, 0xaf, 0x1e, 0xc5, 0xb6, 0x39, 0x17, 0x2c, 0x6b, 0x70, 0x39, 0xb4, 0xce, 0x7f, 0xce, 0xe0,
	0xd9, 0xa5, 0x34, 0xf0, 0x6d, 0xd4, 0xff, 0xa2, 0xe4, 0x29, 0x5c, 0x0c, 0xbe, 0x72, 0x6a, 0x02,
	0x07, 0xb8, 0x2b, 0x3f, 0xec, 0x3b, 0x7b, 0xae, 0xd0, 0x30, 0x78, 0xe8, 0xec, 0x0f, 0x59, 0x2e,
	0xb6, 0x6d, 0x82, 0x08, 0x2b, 0xbd, 0xc9, 0x2a, 0x4d, 0x1e, 0x63, 0xaf, 0xbe, 0xca, 0x3c, 0x29,
	0x4c, 0xb0, 0xc0, 0x05, 0xcb, 0x3c, 0x9a, 0x72, 0x52, 0x27, 0x28, 0x0c, 0xa2, 0xb9, 0x1a, 0x1d,
	0x52, 0xe3, 0x02, 0x3e, 0x9f, 0xf6, 0x96, 0x4a, 0xcf, 0x1c, 0xe0, 0xce, 0xfc, 0x17, 0x7d, 0x67,
	0x2f, 0x27, 0x3f, 0x61, 0x10, 0x2d, 0x27, 0x28, 0xa4, 0x86, 0x01, 0x67, 0x15, 0x2e, 0x53, 0xf3,
	0xc8, 0x01, 0xae, 0x1e, 0xa9, 0xd8, 0xa8, 0x21, 0x24, 0xac, 0x68, 0xcb, 0x2a, 0xce, 0x29, 0x37,
	0x67, 0xce, 0x91, 0xbb, 0xf2, 0xbf, 0xf6, 0x9d, 0xad, 0x6f, 0x54, 0x35, 0x0c, 0xf8, 0x43, 0x67,
	0x7f, 0x7c, 0xaa, 0xe3, 0x71, 0x48, 0xa4, 0x0f, 0x22, 0x21, 0xe5, 0xc6, 0x06, 0x42, 0xd2, 0xa4,
	0x58, 0xa4, 0x34, 0xc6, 0xc2, 0x3c, 0x76, 0x80, 0xbb, 0xbc, 0x58, 0xa3, 0xe1, 0x10, 0x68, 0x3c,
	0x04, 0xba, 0x1c, 0x0f, 0xe1, 0x2f, 0x76, 0x9d, 0xad, 0xdd, 0xfe, 0xb2, 0x41, 0xa4, 0x1f, 0xde,
	0x7d, 0x12, 0xc6, 0x6b, 0xa8, 0x37, 0xec, 0x26, 0x26, 0xac, 0xad, 0x84, 0x79, 0x22, 0x77, 0x8f,
	0x16, 0x0d, 0xbb, 0xd9, 0xc8, 0xdc, 0x78, 0x0b, 0x4f, 0xa9, 0xdc, 0xb9, 0x22, 0xe2, 0x40, 0xcc,
	0x15, 0xb1, 0x1a, 0xab, 0x03, 0xf6, 0x06, 0xc2, 0xaa, 0x2d, 0x8a, 0x03, 0xb2, 0x50, 0x88, 0x2e,
	0x2b, 0x43, 0x3b, 0x84, 0xa7, 0xd3, 0xc9, 0x63, 0x8a, 0x05, 0x36, 0x75, 0xe5, 0xf5, 0x1c, 0xfd,
	0xe7, 0x7f, 0xa1, 0xcf, 0x23, 0x1a, 0x60, 0x81, 0xa3, 0xd5, 0xf6, 0xdf, 0xd4, 0x7f, 0xb7, 0xfb,
	0x63, 0x69, 0xbb, 0xde, 0x02, 0x77, 0xbd, 0x05, 0xee, 0x7b, 0x0b, 0xfc, 0xee, 0x2d, 0x70, 0xbb,
	0xb7, 0xb4, 0xbb, 0xbd, 0xa5, 0xdd, 0xef, 0x2d, 0xed, 0xfb, 0xb1, 0x9a, 0x92, 0x9c, 0xa8, 0xfd,
	0xdf, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x85, 0xd7, 0xc7, 0xe4, 0x02, 0x00, 0x00,
}

func (m *TableStatisticProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStatisticProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableStatisticProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HistogramData != nil {
		{
			size, err := m.HistogramData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTableStatistic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.NullCount != 0 {
		i = encodeVarintTableStatistic(dAtA, i, uint64(m.NullCount))
		i--
		dAtA[i] = 0x40
	}
	if m.DistinctCount != 0 {
		i = encodeVarintTableStatistic(dAtA, i, uint64(m.DistinctCount))
		i--
		dAtA[i] = 0x38
	}
	if m.RowCount != 0 {
		i = encodeVarintTableStatistic(dAtA, i, uint64(m.RowCount))
		i--
		dAtA[i] = 0x30
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTableStatistic(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.ColumnIDs) > 0 {
		dAtA4 := make([]byte, len(m.ColumnIDs)*10)
		var j3 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTableStatistic(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTableStatistic(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StatisticID != 0 {
		i = encodeVarintTableStatistic(dAtA, i, uint64(m.StatisticID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintTableStatistic(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTableStatistic(dAtA []byte, offset int, v uint64) int {
	offset -= sovTableStatistic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TableStatisticProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTableStatistic(uint64(m.TableID))
	}
	if m.StatisticID != 0 {
		n += 1 + sovTableStatistic(uint64(m.StatisticID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTableStatistic(uint64(l))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovTableStatistic(uint64(e))
		}
		n += 1 + sovTableStatistic(uint64(l)) + l
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTableStatistic(uint64(l))
	if m.RowCount != 0 {
		n += 1 + sovTableStatistic(uint64(m.RowCount))
	}
	if m.DistinctCount != 0 {
		n += 1 + sovTableStatistic(uint64(m.DistinctCount))
	}
	if m.NullCount != 0 {
		n += 1 + sovTableStatistic(uint64(m.NullCount))
	}
	if m.HistogramData != nil {
		l = m.HistogramData.Size()
		n += 1 + l + sovTableStatistic(uint64(l))
	}
	return n
}

func sovTableStatistic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTableStatistic(x uint64) (n int) {
	return sovTableStatistic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableStatisticProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStatistic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStatisticProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStatisticProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatisticID", wireType)
			}
			m.StatisticID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatisticID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStatistic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStatistic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStatistic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStatistic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStatistic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStatistic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStatistic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStatistic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStatistic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowCount", wireType)
			}
			m.RowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistinctCount", wireType)
			}
			m.DistinctCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistinctCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullCount", wireType)
			}
			m.NullCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NullCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistogramData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStatistic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStatistic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistogramData == nil {
				m.HistogramData = &HistogramData{}
			}
			if err := m.HistogramData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStatistic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTableStatistic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStatistic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStatistic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStatistic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStatistic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTableStatistic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTableStatistic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTableStatistic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStatistic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTableStatistic = fmt.Errorf("proto: unexpected end of group")
)
