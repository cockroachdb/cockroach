// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/stats/histogram.proto

package stats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/cockroachdb/cockroach/pkg/sql/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HistogramData encodes the data for a histogram, which captures the
// distribution of values on a specific column.
type HistogramData struct {
	// Value type for the column.
	ColumnType *types.T `protobuf:"bytes,2,opt,name=column_type,json=columnType,proto3" json:"column_type,omitempty"`
	// Histogram buckets. Note that NULL values are excluded from the
	// histogram.
	Buckets []HistogramData_Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets"`
}

func (m *HistogramData) Reset()         { *m = HistogramData{} }
func (m *HistogramData) String() string { return proto.CompactTextString(m) }
func (*HistogramData) ProtoMessage()    {}
func (*HistogramData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d47c095b9088c07, []int{0}
}
func (m *HistogramData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistogramData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HistogramData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramData.Merge(m, src)
}
func (m *HistogramData) XXX_Size() int {
	return m.Size()
}
func (m *HistogramData) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramData.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramData proto.InternalMessageInfo

type HistogramData_Bucket struct {
	// The estimated number of values that are equal to upper_bound.
	NumEq int64 `protobuf:"varint,1,opt,name=num_eq,json=numEq,proto3" json:"num_eq,omitempty"`
	// The estimated number of values in the bucket (excluding those
	// that are equal to upper_bound). Splitting the count into two
	// makes the histogram effectively equivalent to a histogram with
	// twice as many buckets, with every other bucket containing a
	// single value. This might be particularly advantageous if the
	// histogram algorithm makes sure the top "heavy hitters" (most
	// frequent elements) are bucket boundaries (similar to a
	// compressed histogram).
	NumRange int64 `protobuf:"varint,2,opt,name=num_range,json=numRange,proto3" json:"num_range,omitempty"`
	// The estimated number of distinct values in the bucket (excluding
	// those that are equal to upper_bound). This is a floating point
	// value because it is estimated by distributing the known distinct
	// count for the column among the buckets, in proportion to the number
	// of rows in each bucket. This value is in fact derived from the rest
	// of the data, but is included to avoid re-computing it later.
	DistinctRange float64 `protobuf:"fixed64,4,opt,name=distinct_range,json=distinctRange,proto3" json:"distinct_range,omitempty"`
	// The upper boundary of the bucket. The column values for the upper bound
	// are encoded using the ascending key encoding of the column type.
	UpperBound []byte `protobuf:"bytes,3,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (m *HistogramData_Bucket) Reset()         { *m = HistogramData_Bucket{} }
func (m *HistogramData_Bucket) String() string { return proto.CompactTextString(m) }
func (*HistogramData_Bucket) ProtoMessage()    {}
func (*HistogramData_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d47c095b9088c07, []int{0, 0}
}
func (m *HistogramData_Bucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistogramData_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HistogramData_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramData_Bucket.Merge(m, src)
}
func (m *HistogramData_Bucket) XXX_Size() int {
	return m.Size()
}
func (m *HistogramData_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramData_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramData_Bucket proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HistogramData)(nil), "cockroach.sql.stats.HistogramData")
	proto.RegisterType((*HistogramData_Bucket)(nil), "cockroach.sql.stats.HistogramData.Bucket")
}

func init() { proto.RegisterFile("sql/stats/histogram.proto", fileDescriptor_7d47c095b9088c07) }

var fileDescriptor_7d47c095b9088c07 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x10, 0xc7, 0x73, 0x4d, 0xdb, 0xef, 0xc3, 0xa1, 0x0c, 0x81, 0x4a, 0x21, 0x48, 0x6e, 0x84, 0x84,
	0x08, 0x8b, 0x2b, 0x95, 0x91, 0x2d, 0x02, 0x09, 0x56, 0xab, 0x13, 0x4b, 0x95, 0xa6, 0x51, 0x5a,
	0xb5, 0xb1, 0x93, 0xd8, 0x1e, 0xba, 0xf3, 0x00, 0x3c, 0x01, 0xcf, 0xd3, 0xb1, 0x63, 0x27, 0x04,
	0xe9, 0x8b, 0xa0, 0xd8, 0x74, 0x00, 0xb1, 0x44, 0xf1, 0xef, 0x7e, 0xf7, 0xbf, 0xb3, 0xd1, 0xb9,
	0x28, 0x57, 0x43, 0x21, 0x63, 0x29, 0x86, 0xf3, 0x85, 0x90, 0x3c, 0xab, 0xe2, 0x9c, 0x14, 0x15,
	0x97, 0xdc, 0x3d, 0x4d, 0x78, 0xb2, 0xac, 0x78, 0x9c, 0xcc, 0x89, 0x28, 0x57, 0x44, 0x4b, 0xfe,
	0x59, 0xc6, 0x33, 0xae, 0xeb, 0xc3, 0xe6, 0xcf, 0xa8, 0x7e, 0xbf, 0x49, 0x91, 0xeb, 0x22, 0x15,
	0xe6, 0x6b, 0xf0, 0xe5, 0x5b, 0x0b, 0xf5, 0x1e, 0x0f, 0xa9, 0xf7, 0xb1, 0x8c, 0xdd, 0x3b, 0xe4,
	0x24, 0x7c, 0xa5, 0x72, 0x36, 0x69, 0x3c, 0xaf, 0x15, 0x40, 0xe8, 0x8c, 0x7c, 0xf2, 0x6b, 0x52,
	0x9a, 0x13, 0x13, 0x33, 0xa6, 0xc8, 0xe8, 0xe3, 0x75, 0x91, 0xba, 0x4f, 0xe8, 0xdf, 0x54, 0x25,
	0xcb, 0x54, 0x0a, 0x0f, 0x02, 0x3b, 0x74, 0x46, 0x37, 0xe4, 0x8f, 0x15, 0xc9, 0x8f, 0x89, 0x24,
	0xd2, 0x1d, 0x51, 0x7b, 0xf3, 0x3e, 0xb0, 0xe8, 0xa1, 0xdf, 0x7f, 0x01, 0xd4, 0x35, 0x15, 0xb7,
	0x8f, 0xba, 0x4c, 0xe5, 0x93, 0xb4, 0xf4, 0x20, 0x80, 0xd0, 0xa6, 0x1d, 0xa6, 0xf2, 0x87, 0xd2,
	0xbd, 0x40, 0x47, 0x0d, 0xae, 0x62, 0x96, 0x99, 0x3d, 0x6d, 0xfa, 0x9f, 0xa9, 0x9c, 0x36, 0x67,
	0xf7, 0x0a, 0x9d, 0xcc, 0x16, 0x42, 0x2e, 0x58, 0x22, 0xbf, 0x8d, 0x76, 0x00, 0x21, 0xd0, 0xde,
	0x81, 0x1a, 0x6d, 0x80, 0x1c, 0x55, 0x14, 0x69, 0x35, 0x99, 0x72, 0xc5, 0x66, 0x9e, 0x1d, 0x40,
	0x78, 0x4c, 0x91, 0x46, 0x51, 0x43, 0xa2, 0xeb, 0xcd, 0x27, 0xb6, 0x36, 0x35, 0x86, 0x6d, 0x8d,
	0x61, 0x57, 0x63, 0xf8, 0xa8, 0x31, 0xbc, 0xee, 0xb1, 0xb5, 0xdd, 0x63, 0x6b, 0xb7, 0xc7, 0xd6,
	0x73, 0x47, 0xdf, 0x69, 0xda, 0xd5, 0x0f, 0x7a, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x92,
	0xf1, 0x3e, 0xaf, 0x01, 0x00, 0x00,
}

func (m *HistogramData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistogramData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistogramData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnType != nil {
		{
			size, err := m.ColumnType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistogram(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buckets) > 0 {
		for iNdEx := len(m.Buckets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buckets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHistogram(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HistogramData_Bucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistogramData_Bucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistogramData_Bucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DistinctRange != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DistinctRange))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.UpperBound) > 0 {
		i -= len(m.UpperBound)
		copy(dAtA[i:], m.UpperBound)
		i = encodeVarintHistogram(dAtA, i, uint64(len(m.UpperBound)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NumRange != 0 {
		i = encodeVarintHistogram(dAtA, i, uint64(m.NumRange))
		i--
		dAtA[i] = 0x10
	}
	if m.NumEq != 0 {
		i = encodeVarintHistogram(dAtA, i, uint64(m.NumEq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHistogram(dAtA []byte, offset int, v uint64) int {
	offset -= sovHistogram(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HistogramData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovHistogram(uint64(l))
		}
	}
	if m.ColumnType != nil {
		l = m.ColumnType.Size()
		n += 1 + l + sovHistogram(uint64(l))
	}
	return n
}

func (m *HistogramData_Bucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumEq != 0 {
		n += 1 + sovHistogram(uint64(m.NumEq))
	}
	if m.NumRange != 0 {
		n += 1 + sovHistogram(uint64(m.NumRange))
	}
	l = len(m.UpperBound)
	if l > 0 {
		n += 1 + l + sovHistogram(uint64(l))
	}
	if m.DistinctRange != 0 {
		n += 9
	}
	return n
}

func sovHistogram(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHistogram(x uint64) (n int) {
	return sovHistogram(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HistogramData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistogram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistogramData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistogramData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistogram
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistogram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, HistogramData_Bucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistogram
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistogram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColumnType == nil {
				m.ColumnType = &types.T{}
			}
			if err := m.ColumnType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistogram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistogram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistogramData_Bucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistogram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEq", wireType)
			}
			m.NumEq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRange", wireType)
			}
			m.NumRange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRange |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperBound", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHistogram
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHistogram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpperBound = append(m.UpperBound[:0], dAtA[iNdEx:postIndex]...)
			if m.UpperBound == nil {
				m.UpperBound = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistinctRange", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DistinctRange = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipHistogram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistogram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHistogram(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHistogram
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistogram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistogram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHistogram
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHistogram
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHistogram
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHistogram        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHistogram          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHistogram = fmt.Errorf("proto: unexpected end of group")
)
