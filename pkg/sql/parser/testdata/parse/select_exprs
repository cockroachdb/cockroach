parse
SELECT 1 + 1
----
SELECT 1 + 1
SELECT ((1) + (1)) -- fully parenthetized
SELECT _ + _ -- literals removed
SELECT 1 + 1 -- identifiers removed

parse
SELECT +1
----
SELECT 1 -- normalized!
SELECT (1) -- fully parenthetized
SELECT _ -- literals removed
SELECT 1 -- identifiers removed

parse
SELECT - - 5
----
SELECT 5 -- normalized!
SELECT (5) -- fully parenthetized
SELECT _ -- literals removed
SELECT 5 -- identifiers removed

parse
SELECT - + 5
----
SELECT -5 -- normalized!
SELECT (-5) -- fully parenthetized
SELECT _ -- literals removed
SELECT -5 -- identifiers removed

parse
SELECT -1
----
SELECT -1
SELECT (-1) -- fully parenthetized
SELECT _ -- literals removed
SELECT -1 -- identifiers removed

parse
SELECT .1
----
SELECT .1
SELECT (.1) -- fully parenthetized
SELECT _ -- literals removed
SELECT .1 -- identifiers removed

parse
SELECT 1.2e1
----
SELECT 1.2e1
SELECT (1.2e1) -- fully parenthetized
SELECT _ -- literals removed
SELECT 1.2e1 -- identifiers removed

parse
SELECT 1.2e+1
----
SELECT 1.2e+1
SELECT (1.2e+1) -- fully parenthetized
SELECT _ -- literals removed
SELECT 1.2e+1 -- identifiers removed

parse
SELECT 1.2e-1
----
SELECT 1.2e-1
SELECT (1.2e-1) -- fully parenthetized
SELECT _ -- literals removed
SELECT 1.2e-1 -- identifiers removed

parse
SELECT *,-/* comment */-5
----
SELECT *, 5 -- normalized!
SELECT (*), (5) -- fully parenthetized
SELECT *, _ -- literals removed
SELECT *, 5 -- identifiers removed

parse
SELECT -
-5
----
SELECT 5 -- normalized!
SELECT (5) -- fully parenthetized
SELECT _ -- literals removed
SELECT 5 -- identifiers removed

parse
SELECT -0.-/*test*/-1
----
SELECT -0. - -1 -- normalized!
SELECT ((-0.) - (-1)) -- fully parenthetized
SELECT _ - _ -- literals removed
SELECT -0. - -1 -- identifiers removed

parse
SELECT~~+~++~bd(*)
----
SELECT ~(~(~(~bd(*)))) -- normalized!
SELECT (~((~((~((~((bd)((*)))))))))) -- fully parenthetized
SELECT ~(~(~(~bd(*)))) -- literals removed
SELECT ~(~(~(~bd(*)))) -- identifiers removed

parse
SELECT true AND false
----
SELECT true AND false
SELECT ((true) AND (false)) -- fully parenthetized
SELECT _ AND _ -- literals removed
SELECT true AND false -- identifiers removed

parse
SELECT true AND NULL
----
SELECT true AND NULL
SELECT ((true) AND (NULL)) -- fully parenthetized
SELECT _ AND _ -- literals removed
SELECT true AND NULL -- identifiers removed

parse
SELECT true = false
----
SELECT true = false
SELECT ((true) = (false)) -- fully parenthetized
SELECT _ = _ -- literals removed
SELECT true = false -- identifiers removed

parse
SELECT (true = false)
----
SELECT (true = false)
SELECT ((((true) = (false)))) -- fully parenthetized
SELECT (_ = _) -- literals removed
SELECT (true = false) -- identifiers removed

parse
SELECT (ARRAY['a', 'b'])[2]
----
SELECT (ARRAY['a', 'b'])[2]
SELECT ((((ARRAY[('a'), ('b')])))[(2)]) -- fully parenthetized
SELECT (ARRAY[_, _])[_] -- literals removed
SELECT (ARRAY['a', 'b'])[2] -- identifiers removed

parse
SELECT (ARRAY (VALUES (1), (2)))[1]
----
SELECT (ARRAY (VALUES (1), (2)))[1]
SELECT ((((ARRAY ((VALUES ((1)), ((2)))))))[(1)]) -- fully parenthetized
SELECT (ARRAY (VALUES (_), (__more1__)))[_] -- literals removed
SELECT (ARRAY (VALUES (1), (2)))[1] -- identifiers removed

parse
SELECT+y[array[]]
----
SELECT y[ARRAY[]] -- normalized!
SELECT ((y)[(ARRAY[])]) -- fully parenthetized
SELECT y[ARRAY[]] -- literals removed
SELECT _[ARRAY[]] -- identifiers removed

parse
SELECT (ARRAY (1, 2))[1]
----
SELECT (ARRAY[1, 2])[1] -- normalized!
SELECT ((((ARRAY[(1), (2)])))[(1)]) -- fully parenthetized
SELECT (ARRAY[_, _])[_] -- literals removed
SELECT (ARRAY[1, 2])[1] -- identifiers removed

parse
SELECT FAMILY (x)
----
SELECT "family"(x) -- normalized!
SELECT (("family")((x))) -- fully parenthetized
SELECT "family"(x) -- literals removed
SELECT "family"(_) -- identifiers removed

parse
SELECT 1 IN (b)
----
SELECT 1 IN (b,) -- normalized!
SELECT ((1) IN (((b),))) -- fully parenthetized
SELECT _ IN (b,) -- literals removed
SELECT 1 IN (_,) -- identifiers removed

parse
SELECT ROW()
----
SELECT () -- normalized!
SELECT (()) -- fully parenthetized
SELECT () -- literals removed
SELECT () -- identifiers removed

parse
SELECT ROW(1)
----
SELECT (1,) -- normalized!
SELECT (((1),)) -- fully parenthetized
SELECT (_,) -- literals removed
SELECT (1,) -- identifiers removed

parse
SELECT (ROW(1) AS a)
----
SELECT ((1,) AS a) -- normalized!
SELECT ((((1),) AS a)) -- fully parenthetized
SELECT ((_,) AS a) -- literals removed
SELECT ((1,) AS _) -- identifiers removed

parse
SELECT (SELECT 1)
----
SELECT (SELECT 1)
SELECT ((SELECT (1))) -- fully parenthetized
SELECT (SELECT _) -- literals removed
SELECT (SELECT 1) -- identifiers removed

parse
SELECT ((SELECT 1))
----
SELECT ((SELECT 1))
SELECT (((SELECT (1)))) -- fully parenthetized
SELECT ((SELECT _)) -- literals removed
SELECT ((SELECT 1)) -- identifiers removed

parse
SELECT (SELECT ARRAY['a', 'b'])[2]
----
SELECT (SELECT ARRAY['a', 'b'])[2]
SELECT (((SELECT (ARRAY[('a'), ('b')])))[(2)]) -- fully parenthetized
SELECT (SELECT ARRAY[_, _])[_] -- literals removed
SELECT (SELECT ARRAY['a', 'b'])[2] -- identifiers removed

parse
SELECT ((SELECT ARRAY['a', 'b']))[2]
----
SELECT ((SELECT ARRAY['a', 'b']))[2]
SELECT ((((SELECT (ARRAY[('a'), ('b')]))))[(2)]) -- fully parenthetized
SELECT ((SELECT ARRAY[_, _]))[_] -- literals removed
SELECT ((SELECT ARRAY['a', 'b']))[2] -- identifiers removed

parse
SELECT ((((VALUES (1)))))
----
SELECT ((((VALUES (1)))))
SELECT (((((VALUES ((1))))))) -- fully parenthetized
SELECT ((((VALUES (_))))) -- literals removed
SELECT ((((VALUES (1))))) -- identifiers removed

parse
SELECT EXISTS (SELECT 1)
----
SELECT EXISTS (SELECT 1)
SELECT (EXISTS (SELECT (1))) -- fully parenthetized
SELECT EXISTS (SELECT _) -- literals removed
SELECT EXISTS (SELECT 1) -- identifiers removed

parse
SELECT (VALUES (1))
----
SELECT (VALUES (1))
SELECT ((VALUES ((1)))) -- fully parenthetized
SELECT (VALUES (_)) -- literals removed
SELECT (VALUES (1)) -- identifiers removed

parse
SELECT (1, 2, 3)
----
SELECT (1, 2, 3)
SELECT (((1), (2), (3))) -- fully parenthetized
SELECT (_, _, __more1__) -- literals removed
SELECT (1, 2, 3) -- identifiers removed

parse
SELECT ((1, 2, 3) AS a, b, c)
----
SELECT ((1, 2, 3) AS a, b, c)
SELECT ((((1), (2), (3)) AS a, b, c)) -- fully parenthetized
SELECT ((_, _, __more1__) AS a, b) -- literals removed
SELECT ((1, 2, 3) AS _, _, _) -- identifiers removed

parse
SELECT ((1, 2, 3))
----
SELECT ((1, 2, 3))
SELECT (((((1), (2), (3))))) -- fully parenthetized
SELECT ((_, _, __more1__)) -- literals removed
SELECT ((1, 2, 3)) -- identifiers removed

parse
SELECT ((1, 2, 3) AS a, b, c)
----
SELECT ((1, 2, 3) AS a, b, c)
SELECT ((((1), (2), (3)) AS a, b, c)) -- fully parenthetized
SELECT ((_, _, __more1__) AS a, b) -- literals removed
SELECT ((1, 2, 3) AS _, _, _) -- identifiers removed

parse
SELECT (((1, 2, 3) AS a, b, c)).a
----
SELECT (((1, 2, 3) AS a, b, c)).a
SELECT ((((((1), (2), (3)) AS a, b, c))).a) -- fully parenthetized
SELECT (((_, _, __more1__) AS a, b)).a -- literals removed
SELECT (((1, 2, 3) AS _, _, _))._ -- identifiers removed

parse
SELECT (((1, 2, 3) AS a, b, c)).*
----
SELECT (((1, 2, 3) AS a, b, c)).*
SELECT ((((((1), (2), (3)) AS a, b, c))).*) -- fully parenthetized
SELECT (((_, _, __more1__) AS a, b)).* -- literals removed
SELECT (((1, 2, 3) AS _, _, _)).* -- identifiers removed

parse
SELECT ()
----
SELECT ()
SELECT (()) -- fully parenthetized
SELECT () -- literals removed
SELECT () -- identifiers removed

parse
SELECT (() AS a)
----
SELECT (() AS a)
SELECT ((() AS a)) -- fully parenthetized
SELECT (() AS a) -- literals removed
SELECT (() AS _) -- identifiers removed

parse
SELECT ((() AS a)).a
----
SELECT ((() AS a)).a
SELECT ((((() AS a))).a) -- fully parenthetized
SELECT ((() AS a)).a -- literals removed
SELECT ((() AS _))._ -- identifiers removed

parse
SELECT ((() AS a)).*
----
SELECT ((() AS a)).*
SELECT ((((() AS a))).*) -- fully parenthetized
SELECT ((() AS a)).* -- literals removed
SELECT ((() AS _)).* -- identifiers removed

parse
SELECT ((() AS a)).@1
----
SELECT ((() AS a)).@1
SELECT ((((() AS a))).@1) -- fully parenthetized
SELECT ((() AS a)).@1 -- literals removed
SELECT ((() AS _)).@1 -- identifiers removed

parse
SELECT (TABLE a)
----
SELECT (TABLE a)
SELECT ((TABLE a)) -- fully parenthetized
SELECT (TABLE a) -- literals removed
SELECT (TABLE _) -- identifiers removed

parse
SELECT 0x1
----
SELECT 0x1
SELECT (0x1) -- fully parenthetized
SELECT _ -- literals removed
SELECT 0x1 -- identifiers removed

parse
SELECT 'a''a'
----
SELECT e'a\'a' -- normalized!
SELECT (e'a\'a') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'a\'a' -- identifiers removed

parse
SELECT 'a\a'
----
SELECT e'a\\a' -- normalized!
SELECT (e'a\\a') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'a\\a' -- identifiers removed

parse
SELECT 'a\n'
----
SELECT e'a\\n' -- normalized!
SELECT (e'a\\n') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'a\\n' -- identifiers removed

parse
SELECT '
'
----
SELECT e'\n' -- normalized!
SELECT (e'\n') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'\n' -- identifiers removed

parse
SELECT '
\'
----
SELECT e'\n\\' -- normalized!
SELECT (e'\n\\') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'\n\\' -- identifiers removed

parse
SELECT x'61'
----
SELECT b'a' -- normalized!
SELECT (b'a') -- fully parenthetized
SELECT _ -- literals removed
SELECT b'a' -- identifiers removed

parse
SELECT X'61'
----
SELECT b'a' -- normalized!
SELECT (b'a') -- fully parenthetized
SELECT _ -- literals removed
SELECT b'a' -- identifiers removed


parse
SELECT 'Deutsch' COLLATE de
----
SELECT 'Deutsch' COLLATE de
SELECT (('Deutsch') COLLATE de) -- fully parenthetized
SELECT _ COLLATE de -- literals removed
SELECT 'Deutsch' COLLATE de -- identifiers removed

parse
SELECT a @> b
----
SELECT a @> b
SELECT ((a) @> (b)) -- fully parenthetized
SELECT a @> b -- literals removed
SELECT _ @> _ -- identifiers removed

parse
SELECT a <@ b
----
SELECT a <@ b
SELECT ((a) <@ (b)) -- fully parenthetized
SELECT a <@ b -- literals removed
SELECT _ <@ _ -- identifiers removed

parse
SELECT a ? b
----
SELECT a ? b
SELECT ((a) ? (b)) -- fully parenthetized
SELECT a ? b -- literals removed
SELECT _ ? _ -- identifiers removed

parse
SELECT a ?| b
----
SELECT a ?| b
SELECT ((a) ?| (b)) -- fully parenthetized
SELECT a ?| b -- literals removed
SELECT _ ?| _ -- identifiers removed

parse
SELECT a ?& b
----
SELECT a ?& b
SELECT ((a) ?& (b)) -- fully parenthetized
SELECT a ?& b -- literals removed
SELECT _ ?& _ -- identifiers removed

## The following JSON expressions
## do not anonymize properly, see
## issue https://github.com/cockroachdb/cockroach/issues/60673

parse
SELECT a->'x'
----
SELECT a->'x'
SELECT ((a)->('x')) -- fully parenthetized
SELECT a->_ -- literals removed
SELECT _->'x' -- identifiers removed

parse
SELECT a#>'{x}'
----
SELECT a#>'{x}'
SELECT ((a)#>('{x}')) -- fully parenthetized
SELECT a#>_ -- literals removed
SELECT _#>'{x}' -- identifiers removed

parse
SELECT a#>>'{x}'
----
SELECT a#>>'{x}'
SELECT ((a)#>>('{x}')) -- fully parenthetized
SELECT a#>>_ -- literals removed
SELECT _#>>'{x}' -- identifiers removed

parse
SELECT (a->'x')->'y'
----
SELECT (a->'x')->'y'
SELECT (((((a)->('x'))))->('y')) -- fully parenthetized
SELECT (a->_)->_ -- literals removed
SELECT (_->'x')->'y' -- identifiers removed

parse
SELECT (a->'x')->>'y'
----
SELECT (a->'x')->>'y'
SELECT (((((a)->('x'))))->>('y')) -- fully parenthetized
SELECT (a->_)->>_ -- literals removed
SELECT (_->'x')->>'y' -- identifiers removed

parse
SELECT a #- '{x}'
----
SELECT json_remove_path(a, '{x}') -- normalized!
SELECT (json_remove_path((a), ('{x}'))) -- fully parenthetized
SELECT json_remove_path(a, _) -- literals removed
SELECT json_remove_path(_, '{x}') -- identifiers removed


parse
SELECT b && c
----
SELECT b && c
SELECT ((b) && (c)) -- fully parenthetized
SELECT b && c -- literals removed
SELECT _ && _ -- identifiers removed

parse
SELECT |/a
----
SELECT |/a
SELECT (|/(a)) -- fully parenthetized
SELECT |/a -- literals removed
SELECT |/_ -- identifiers removed

parse
SELECT ||/a
----
SELECT ||/a
SELECT (||/(a)) -- fully parenthetized
SELECT ||/a -- literals removed
SELECT ||/_ -- identifiers removed


parse
SELECT BOOL 'foo', 'foo'::BOOL
----
SELECT BOOL 'foo', 'foo'::BOOL
SELECT (BOOL ('foo')), (('foo')::BOOL) -- fully parenthetized
SELECT BOOL _, _::BOOL -- literals removed
SELECT bool AS _, _::BOOL -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT BOOL 'foo', 'foo'::BOOL -- identifiers removed

parse
SELECT BIT '10', '10'::BIT
----
SELECT BIT '10', '10'::BIT
SELECT (BIT ('10')), (('10')::BIT) -- fully parenthetized
SELECT BIT _, _::BIT -- literals removed
SELECT "bit" AS _, _::BIT -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT BIT '10', '10'::BIT -- identifiers removed

parse
SELECT VARBIT '1', '1'::VARBIT
----
SELECT VARBIT '1', '1'::VARBIT
SELECT (VARBIT ('1')), (('1')::VARBIT) -- fully parenthetized
SELECT VARBIT _, _::VARBIT -- literals removed
SELECT "varbit" AS _, _::VARBIT -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT VARBIT '1', '1'::VARBIT -- identifiers removed

parse
SELECT INT2 'foo', 'foo'::INT2
----
SELECT INT2 'foo', 'foo'::INT2
SELECT (INT2 ('foo')), (('foo')::INT2) -- fully parenthetized
SELECT INT2 _, _::INT2 -- literals removed
SELECT int2 AS _, _::INT2 -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT INT2 'foo', 'foo'::INT2 -- identifiers removed

parse
SELECT INT4 'foo', 'foo'::INT4
----
SELECT INT4 'foo', 'foo'::INT4
SELECT (INT4 ('foo')), (('foo')::INT4) -- fully parenthetized
SELECT INT4 _, _::INT4 -- literals removed
SELECT int4 AS _, _::INT4 -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT INT4 'foo', 'foo'::INT4 -- identifiers removed

parse
SELECT INT8 'foo', 'foo'::INT8
----
SELECT INT8 'foo', 'foo'::INT8
SELECT (INT8 ('foo')), (('foo')::INT8) -- fully parenthetized
SELECT INT8 _, _::INT8 -- literals removed
SELECT int8 AS _, _::INT8 -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT INT8 'foo', 'foo'::INT8 -- identifiers removed

parse
SELECT FLOAT4 'foo', 'foo'::FLOAT4
----
SELECT FLOAT4 'foo', 'foo'::FLOAT4
SELECT (FLOAT4 ('foo')), (('foo')::FLOAT4) -- fully parenthetized
SELECT FLOAT4 _, _::FLOAT4 -- literals removed
SELECT float4 AS _, _::FLOAT4 -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT FLOAT4 'foo', 'foo'::FLOAT4 -- identifiers removed

parse
SELECT REAL 'foo'
----
SELECT FLOAT4 'foo' -- normalized!
SELECT (FLOAT4 ('foo')) -- fully parenthetized
SELECT FLOAT4 _ -- literals removed
SELECT float4 AS _ -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT FLOAT4 'foo' -- identifiers removed

parse
SELECT DOUBLE PRECISION 'foo'
----
SELECT FLOAT8 'foo' -- normalized!
SELECT (FLOAT8 ('foo')) -- fully parenthetized
SELECT FLOAT8 _ -- literals removed
SELECT float8 AS _ -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT FLOAT8 'foo' -- identifiers removed


parse
SELECT DECIMAL 'foo', 'foo'::DECIMAL
----
SELECT DECIMAL 'foo', 'foo'::DECIMAL
SELECT (DECIMAL ('foo')), (('foo')::DECIMAL) -- fully parenthetized
SELECT DECIMAL _, _::DECIMAL -- literals removed
SELECT "decimal" AS _, _::DECIMAL -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT DECIMAL 'foo', 'foo'::DECIMAL -- identifiers removed

parse
SELECT NUMERIC 'foo'
----
SELECT DECIMAL 'foo' -- normalized!
SELECT (DECIMAL ('foo')) -- fully parenthetized
SELECT DECIMAL _ -- literals removed
SELECT "decimal" AS _ -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT DECIMAL 'foo' -- identifiers removed


parse
SELECT CHAR 'foo', 'foo'::CHAR
----
SELECT CHAR 'foo', 'foo'::CHAR
SELECT (CHAR ('foo')), (('foo')::CHAR) -- fully parenthetized
SELECT CHAR _, _::CHAR -- literals removed
SELECT "char" AS _, _::CHAR -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT CHAR 'foo', 'foo'::CHAR -- identifiers removed

parse
SELECT VARCHAR 'foo', 'foo'::VARCHAR
----
SELECT VARCHAR 'foo', 'foo'::VARCHAR
SELECT (VARCHAR ('foo')), (('foo')::VARCHAR) -- fully parenthetized
SELECT VARCHAR _, _::VARCHAR -- literals removed
SELECT "varchar" AS _, _::VARCHAR -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT VARCHAR 'foo', 'foo'::VARCHAR -- identifiers removed

parse
SELECT STRING 'foo', 'foo'::STRING
----
SELECT STRING 'foo', 'foo'::STRING
SELECT (STRING ('foo')), (('foo')::STRING) -- fully parenthetized
SELECT STRING _, _::STRING -- literals removed
SELECT "string" AS _, _::STRING -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT STRING 'foo', 'foo'::STRING -- identifiers removed

parse
SELECT BYTES 'foo', 'foo'::BYTES
----
SELECT BYTES 'foo', 'foo'::BYTES
SELECT (BYTES ('foo')), (('foo')::BYTES) -- fully parenthetized
SELECT BYTES _, _::BYTES -- literals removed
SELECT bytes AS _, _::BYTES -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT BYTES 'foo', 'foo'::BYTES -- identifiers removed

parse
SELECT DATE 'foo', 'foo'::DATE
----
SELECT DATE 'foo', 'foo'::DATE
SELECT (DATE ('foo')), (('foo')::DATE) -- fully parenthetized
SELECT DATE _, _::DATE -- literals removed
SELECT date AS _, _::DATE -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT DATE 'foo', 'foo'::DATE -- identifiers removed

parse
SELECT TIME 'foo', 'foo'::TIME
----
SELECT TIME 'foo', 'foo'::TIME
SELECT (TIME ('foo')), (('foo')::TIME) -- fully parenthetized
SELECT TIME _, _::TIME -- literals removed
SELECT "time" AS _, _::TIME -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT TIME 'foo', 'foo'::TIME -- identifiers removed

parse
SELECT TIMESTAMP 'foo', 'foo'::TIMESTAMP
----
SELECT TIMESTAMP 'foo', 'foo'::TIMESTAMP
SELECT (TIMESTAMP ('foo')), (('foo')::TIMESTAMP) -- fully parenthetized
SELECT TIMESTAMP _, _::TIMESTAMP -- literals removed
SELECT "timestamp" AS _, _::TIMESTAMP -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT TIMESTAMP 'foo', 'foo'::TIMESTAMP -- identifiers removed

parse
SELECT TIMESTAMPTZ 'foo', 'foo'::TIMESTAMPTZ
----
SELECT TIMESTAMPTZ 'foo', 'foo'::TIMESTAMPTZ
SELECT (TIMESTAMPTZ ('foo')), (('foo')::TIMESTAMPTZ) -- fully parenthetized
SELECT TIMESTAMPTZ _, _::TIMESTAMPTZ -- literals removed
SELECT "timestamptz" AS _, _::TIMESTAMPTZ -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT TIMESTAMPTZ 'foo', 'foo'::TIMESTAMPTZ -- identifiers removed

parse
SELECT TIMESTAMP WITHOUT TIME ZONE 'foo'
----
SELECT TIMESTAMP 'foo' -- normalized!
SELECT (TIMESTAMP ('foo')) -- fully parenthetized
SELECT TIMESTAMP _ -- literals removed
SELECT "timestamp" AS _ -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT TIMESTAMP 'foo' -- identifiers removed

parse
SELECT 'a'::TIMESTAMP(3)
----
SELECT 'a'::TIMESTAMP(3)
SELECT (('a')::TIMESTAMP(3)) -- fully parenthetized
SELECT _::TIMESTAMP(3) -- literals removed
SELECT 'a'::TIMESTAMP(3) -- identifiers removed

parse
SELECT 'a'::TIMESTAMP(3) WITHOUT TIME ZONE
----
SELECT 'a'::TIMESTAMP(3) -- normalized!
SELECT (('a')::TIMESTAMP(3)) -- fully parenthetized
SELECT _::TIMESTAMP(3) -- literals removed
SELECT 'a'::TIMESTAMP(3) -- identifiers removed

parse
SELECT 'a'::TIMESTAMPTZ(3)
----
SELECT 'a'::TIMESTAMPTZ(3)
SELECT (('a')::TIMESTAMPTZ(3)) -- fully parenthetized
SELECT _::TIMESTAMPTZ(3) -- literals removed
SELECT 'a'::TIMESTAMPTZ(3) -- identifiers removed

parse
SELECT 'a'::TIMESTAMP(3) WITH TIME ZONE
----
SELECT 'a'::TIMESTAMPTZ(3) -- normalized!
SELECT (('a')::TIMESTAMPTZ(3)) -- fully parenthetized
SELECT _::TIMESTAMPTZ(3) -- literals removed
SELECT 'a'::TIMESTAMPTZ(3) -- identifiers removed

parse
SELECT TIMESTAMP(3) 'a'
----
SELECT TIMESTAMP(3) 'a'
SELECT (TIMESTAMP(3) ('a')) -- fully parenthetized
SELECT TIMESTAMP(3) _ -- literals removed
REPARSE WITHOUT LITERALS FAILS: at or near "_": syntax error
SELECT TIMESTAMP(3) 'a' -- identifiers removed

parse
SELECT TIMESTAMPTZ(3) 'a'
----
SELECT TIMESTAMPTZ(3) 'a'
SELECT (TIMESTAMPTZ(3) ('a')) -- fully parenthetized
SELECT TIMESTAMPTZ(3) _ -- literals removed
REPARSE WITHOUT LITERALS FAILS: at or near "_": syntax error
SELECT TIMESTAMPTZ(3) 'a' -- identifiers removed


parse
SELECT CAST('foo' AS TIMESTAMP WITHOUT TIME ZONE)
----
SELECT CAST('foo' AS TIMESTAMP) -- normalized!
SELECT (CAST(('foo') AS TIMESTAMP)) -- fully parenthetized
SELECT CAST(_ AS TIMESTAMP) -- literals removed
SELECT CAST('foo' AS TIMESTAMP) -- identifiers removed

parse
SELECT CAST(1 AS "timestamp")
----
SELECT CAST(1 AS TIMESTAMP) -- normalized!
SELECT (CAST((1) AS TIMESTAMP)) -- fully parenthetized
SELECT CAST(_ AS TIMESTAMP) -- literals removed
SELECT CAST(1 AS TIMESTAMP) -- identifiers removed

parse
SELECT JSONB 'foo', 'foo'::JSONB
----
SELECT JSONB 'foo', 'foo'::JSONB
SELECT (JSONB ('foo')), (('foo')::JSONB) -- fully parenthetized
SELECT JSONB _, _::JSONB -- literals removed
SELECT jsonb AS _, _::JSONB -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT JSONB 'foo', 'foo'::JSONB -- identifiers removed

parse
SELECT '{}'::JSONB ? 'a' = false
----
SELECT ('{}'::JSONB ? 'a') = false -- normalized!
SELECT ((((('{}')::JSONB) ? ('a'))) = (false)) -- fully parenthetized
SELECT (_::JSONB ? _) = _ -- literals removed
SELECT ('{}'::JSONB ? 'a') = false -- identifiers removed

parse
SELECT '{}'::JSONB ?| 'a' = false
----
SELECT ('{}'::JSONB ?| 'a') = false -- normalized!
SELECT ((((('{}')::JSONB) ?| ('a'))) = (false)) -- fully parenthetized
SELECT (_::JSONB ?| _) = _ -- literals removed
SELECT ('{}'::JSONB ?| 'a') = false -- identifiers removed

parse
SELECT '{}'::JSONB ?& 'a' = false
----
SELECT ('{}'::JSONB ?& 'a') = false -- normalized!
SELECT ((((('{}')::JSONB) ?& ('a'))) = (false)) -- fully parenthetized
SELECT (_::JSONB ?& _) = _ -- literals removed
SELECT ('{}'::JSONB ?& 'a') = false -- identifiers removed

parse
SELECT '{}'::JSONB @> '{}'::JSONB = false
----
SELECT ('{}'::JSONB @> '{}'::JSONB) = false -- normalized!
SELECT ((((('{}')::JSONB) @> (('{}')::JSONB))) = (false)) -- fully parenthetized
SELECT (_::JSONB @> _::JSONB) = _ -- literals removed
SELECT ('{}'::JSONB @> '{}'::JSONB) = false -- identifiers removed

parse
SELECT '{}'::JSONB <@ '{}'::JSONB = false
----
SELECT ('{}'::JSONB <@ '{}'::JSONB) = false -- normalized!
SELECT ((((('{}')::JSONB) <@ (('{}')::JSONB))) = (false)) -- fully parenthetized
SELECT (_::JSONB <@ _::JSONB) = _ -- literals removed
SELECT ('{}'::JSONB <@ '{}'::JSONB) = false -- identifiers removed


parse
SELECT 'foo'::DECIMAL(1)
----
SELECT 'foo'::DECIMAL(1)
SELECT (('foo')::DECIMAL(1)) -- fully parenthetized
SELECT _::DECIMAL(1) -- literals removed
SELECT 'foo'::DECIMAL(1) -- identifiers removed

parse
SELECT 'foo'::DECIMAL(2,1)
----
SELECT 'foo'::DECIMAL(2,1)
SELECT (('foo')::DECIMAL(2,1)) -- fully parenthetized
SELECT _::DECIMAL(2,1) -- literals removed
SELECT 'foo'::DECIMAL(2,1) -- identifiers removed

parse
SELECT 'foo'::BIT(3)
----
SELECT 'foo'::BIT(3)
SELECT (('foo')::BIT(3)) -- fully parenthetized
SELECT _::BIT(3) -- literals removed
SELECT 'foo'::BIT(3) -- identifiers removed

parse
SELECT 'foo'::VARBIT(3)
----
SELECT 'foo'::VARBIT(3)
SELECT (('foo')::VARBIT(3)) -- fully parenthetized
SELECT _::VARBIT(3) -- literals removed
SELECT 'foo'::VARBIT(3) -- identifiers removed

parse
SELECT 'foo'::CHAR(3)
----
SELECT 'foo'::CHAR(3)
SELECT (('foo')::CHAR(3)) -- fully parenthetized
SELECT _::CHAR(3) -- literals removed
SELECT 'foo'::CHAR(3) -- identifiers removed

parse
SELECT 'foo'::VARCHAR(3)
----
SELECT 'foo'::VARCHAR(3)
SELECT (('foo')::VARCHAR(3)) -- fully parenthetized
SELECT _::VARCHAR(3) -- literals removed
SELECT 'foo'::VARCHAR(3) -- identifiers removed

parse
SELECT 'foo'::STRING(3)
----
SELECT 'foo'::STRING(3)
SELECT (('foo')::STRING(3)) -- fully parenthetized
SELECT _::STRING(3) -- literals removed
SELECT 'foo'::STRING(3) -- identifiers removed

parse
SELECT 'foo'::TIMESTAMP(6)
----
SELECT 'foo'::TIMESTAMP(6)
SELECT (('foo')::TIMESTAMP(6)) -- fully parenthetized
SELECT _::TIMESTAMP(6) -- literals removed
SELECT 'foo'::TIMESTAMP(6) -- identifiers removed

parse
SELECT 'foo'::TIMESTAMPTZ(6)
----
SELECT 'foo'::TIMESTAMPTZ(6)
SELECT (('foo')::TIMESTAMPTZ(6)) -- fully parenthetized
SELECT _::TIMESTAMPTZ(6) -- literals removed
SELECT 'foo'::TIMESTAMPTZ(6) -- identifiers removed

parse
SELECT 'foo'::TIME(6)
----
SELECT 'foo'::TIME(6)
SELECT (('foo')::TIME(6)) -- fully parenthetized
SELECT _::TIME(6) -- literals removed
SELECT 'foo'::TIME(6) -- identifiers removed

parse
SELECT 'a'::TIME(3)
----
SELECT 'a'::TIME(3)
SELECT (('a')::TIME(3)) -- fully parenthetized
SELECT _::TIME(3) -- literals removed
SELECT 'a'::TIME(3) -- identifiers removed

parse
SELECT 'a'::TIME(3) WITHOUT TIME ZONE
----
SELECT 'a'::TIME(3) -- normalized!
SELECT (('a')::TIME(3)) -- fully parenthetized
SELECT _::TIME(3) -- literals removed
SELECT 'a'::TIME(3) -- identifiers removed

parse
SELECT 'a'::TIMETZ(3)
----
SELECT 'a'::TIMETZ(3)
SELECT (('a')::TIMETZ(3)) -- fully parenthetized
SELECT _::TIMETZ(3) -- literals removed
SELECT 'a'::TIMETZ(3) -- identifiers removed

parse
SELECT 'a'::TIME(3) WITH TIME ZONE
----
SELECT 'a'::TIMETZ(3) -- normalized!
SELECT (('a')::TIMETZ(3)) -- fully parenthetized
SELECT _::TIMETZ(3) -- literals removed
SELECT 'a'::TIMETZ(3) -- identifiers removed

parse
SELECT TIME(3) 'a'
----
SELECT TIME(3) 'a'
SELECT (TIME(3) ('a')) -- fully parenthetized
SELECT TIME(3) _ -- literals removed
REPARSE WITHOUT LITERALS FAILS: at or near "_": syntax error
SELECT TIME(3) 'a' -- identifiers removed

parse
SELECT TIMETZ(3) 'a'
----
SELECT TIMETZ(3) 'a'
SELECT (TIMETZ(3) ('a')) -- fully parenthetized
SELECT TIMETZ(3) _ -- literals removed
REPARSE WITHOUT LITERALS FAILS: at or near "_": syntax error
SELECT TIMETZ(3) 'a' -- identifiers removed


parse
SELECT '0'::INTERVAL
----
SELECT '0'::INTERVAL
SELECT (('0')::INTERVAL) -- fully parenthetized
SELECT _::INTERVAL -- literals removed
SELECT '0'::INTERVAL -- identifiers removed

parse
SELECT INTERVAL '0'
----
SELECT '00:00:00' -- normalized!
SELECT ('00:00:00') -- fully parenthetized
SELECT _ -- literals removed
SELECT '00:00:00' -- identifiers removed

parse
SELECT INTERVAL '1' SECOND
----
SELECT '00:00:01' -- normalized!
SELECT ('00:00:01') -- fully parenthetized
SELECT _ -- literals removed
SELECT '00:00:01' -- identifiers removed

parse
SELECT INTERVAL(3) '12.1234s'
----
SELECT '00:00:12.123' -- normalized!
SELECT ('00:00:12.123') -- fully parenthetized
SELECT _ -- literals removed
SELECT '00:00:12.123' -- identifiers removed

parse
SELECT INTERVAL '12.1234s' SECOND(3)
----
SELECT '00:00:12.123' -- normalized!
SELECT ('00:00:12.123') -- fully parenthetized
SELECT _ -- literals removed
SELECT '00:00:12.123' -- identifiers removed

parse
SELECT INTERVAL '14.7899s' SECOND(3)
----
SELECT '00:00:14.79' -- normalized!
SELECT ('00:00:14.79') -- fully parenthetized
SELECT _ -- literals removed
SELECT '00:00:14.79' -- identifiers removed

parse
SELECT '11s'::INTERVAL(3)
----
SELECT '11s'::INTERVAL(3)
SELECT (('11s')::INTERVAL(3)) -- fully parenthetized
SELECT _::INTERVAL(3) -- literals removed
SELECT '11s'::INTERVAL(3) -- identifiers removed

parse
SELECT '10:00:13.123456'::INTERVAL SECOND
----
SELECT '10:00:13.123456'::INTERVAL SECOND
SELECT (('10:00:13.123456')::INTERVAL SECOND) -- fully parenthetized
SELECT _::INTERVAL SECOND -- literals removed
SELECT '10:00:13.123456'::INTERVAL SECOND -- identifiers removed

parse
SELECT '10:00:13.123456'::INTERVAL SECOND(3)
----
SELECT '10:00:13.123456'::INTERVAL SECOND(3)
SELECT (('10:00:13.123456')::INTERVAL SECOND(3)) -- fully parenthetized
SELECT _::INTERVAL SECOND(3) -- literals removed
SELECT '10:00:13.123456'::INTERVAL SECOND(3) -- identifiers removed

parse
SELECT '10:00:13.123456'::INTERVAL MINUTE TO SECOND
----
SELECT '10:00:13.123456'::INTERVAL MINUTE TO SECOND
SELECT (('10:00:13.123456')::INTERVAL MINUTE TO SECOND) -- fully parenthetized
SELECT _::INTERVAL MINUTE TO SECOND -- literals removed
SELECT '10:00:13.123456'::INTERVAL MINUTE TO SECOND -- identifiers removed

parse
SELECT '10:00:13.123456'::INTERVAL MINUTE TO SECOND(3)
----
SELECT '10:00:13.123456'::INTERVAL MINUTE TO SECOND(3)
SELECT (('10:00:13.123456')::INTERVAL MINUTE TO SECOND(3)) -- fully parenthetized
SELECT _::INTERVAL MINUTE TO SECOND(3) -- literals removed
SELECT '10:00:13.123456'::INTERVAL MINUTE TO SECOND(3) -- identifiers removed


parse
SELECT 'foo'::BOX2D
----
SELECT 'foo'::BOX2D
SELECT (('foo')::BOX2D) -- fully parenthetized
SELECT _::BOX2D -- literals removed
SELECT 'foo'::BOX2D -- identifiers removed

parse
SELECT 'foo'::GEOGRAPHY
----
SELECT 'foo'::GEOGRAPHY
SELECT (('foo')::GEOGRAPHY) -- fully parenthetized
SELECT _::GEOGRAPHY -- literals removed
SELECT 'foo'::GEOGRAPHY -- identifiers removed

parse
SELECT 'foo'::GEOGRAPHY(POINT,4326)
----
SELECT 'foo'::GEOGRAPHY(POINT,4326)
SELECT (('foo')::GEOGRAPHY(POINT,4326)) -- fully parenthetized
SELECT _::GEOGRAPHY(POINT,4326) -- literals removed
SELECT 'foo'::GEOGRAPHY(POINT,4326) -- identifiers removed

parse
SELECT 'foo'::GEOGRAPHY(POINT)
----
SELECT 'foo'::GEOGRAPHY(POINT)
SELECT (('foo')::GEOGRAPHY(POINT)) -- fully parenthetized
SELECT _::GEOGRAPHY(POINT) -- literals removed
SELECT 'foo'::GEOGRAPHY(POINT) -- identifiers removed

parse
SELECT 'foo'::GEOMETRY
----
SELECT 'foo'::GEOMETRY
SELECT (('foo')::GEOMETRY) -- fully parenthetized
SELECT _::GEOMETRY -- literals removed
SELECT 'foo'::GEOMETRY -- identifiers removed

parse
SELECT 'foo'::GEOMETRY(POINT)
----
SELECT 'foo'::GEOMETRY(POINT)
SELECT (('foo')::GEOMETRY(POINT)) -- fully parenthetized
SELECT _::GEOMETRY(POINT) -- literals removed
SELECT 'foo'::GEOMETRY(POINT) -- identifiers removed

parse
SELECT 'foo'::GEOMETRY(POINT,4326)
----
SELECT 'foo'::GEOMETRY(POINT,4326)
SELECT (('foo')::GEOMETRY(POINT,4326)) -- fully parenthetized
SELECT _::GEOMETRY(POINT,4326) -- literals removed
SELECT 'foo'::GEOMETRY(POINT,4326) -- identifiers removed

parse
SELECT '192.168.0.1'::INET
----
SELECT '192.168.0.1'::INET
SELECT (('192.168.0.1')::INET) -- fully parenthetized
SELECT _::INET -- literals removed
SELECT '192.168.0.1'::INET -- identifiers removed

parse
SELECT '192.168.0.1':::INET
----
SELECT '192.168.0.1':::INET
SELECT (('192.168.0.1'):::INET) -- fully parenthetized
SELECT _:::INET -- literals removed
SELECT '192.168.0.1':::INET -- identifiers removed

parse
SELECT INET '192.168.0.1'
----
SELECT INET '192.168.0.1'
SELECT (INET ('192.168.0.1')) -- fully parenthetized
SELECT INET _ -- literals removed
SELECT inet AS _ -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT INET '192.168.0.1' -- identifiers removed

parse
SELECT b <<= c
----
SELECT inet_contained_by_or_equals(b, c) -- normalized!
SELECT (inet_contained_by_or_equals((b), (c))) -- fully parenthetized
SELECT inet_contained_by_or_equals(b, c) -- literals removed
SELECT inet_contained_by_or_equals(_, _) -- identifiers removed

parse
SELECT b >>= c
----
SELECT inet_contains_or_equals(b, c) -- normalized!
SELECT (inet_contains_or_equals((b), (c))) -- fully parenthetized
SELECT inet_contains_or_equals(b, c) -- literals removed
SELECT inet_contains_or_equals(_, _) -- identifiers removed


parse
SELECT 1:::REGTYPE
----
SELECT 1:::REGTYPE
SELECT ((1):::REGTYPE) -- fully parenthetized
SELECT _:::REGTYPE -- literals removed
SELECT 1:::REGTYPE -- identifiers removed

parse
SELECT 1:::REGPROC
----
SELECT 1:::REGPROC
SELECT ((1):::REGPROC) -- fully parenthetized
SELECT _:::REGPROC -- literals removed
SELECT 1:::REGPROC -- identifiers removed

parse
SELECT 1:::REGPROCEDURE
----
SELECT 1:::REGPROCEDURE
SELECT ((1):::REGPROCEDURE) -- fully parenthetized
SELECT _:::REGPROCEDURE -- literals removed
SELECT 1:::REGPROCEDURE -- identifiers removed

parse
SELECT 1:::REGCLASS
----
SELECT 1:::REGCLASS
SELECT ((1):::REGCLASS) -- fully parenthetized
SELECT _:::REGCLASS -- literals removed
SELECT 1:::REGCLASS -- identifiers removed

parse
SELECT 1:::REGNAMESPACE
----
SELECT 1:::REGNAMESPACE
SELECT ((1):::REGNAMESPACE) -- fully parenthetized
SELECT _:::REGNAMESPACE -- literals removed
SELECT 1:::REGNAMESPACE -- identifiers removed

parse
SELECT 'a' AS "12345"
----
SELECT 'a' AS "12345"
SELECT ('a') AS "12345" -- fully parenthetized
SELECT _ AS "12345" -- literals removed
SELECT 'a' AS _ -- identifiers removed

parse
SELECT 'a' AS clnm
----
SELECT 'a' AS clnm
SELECT ('a') AS clnm -- fully parenthetized
SELECT _ AS clnm -- literals removed
SELECT 'a' AS _ -- identifiers removed

parse
SELECT 'a' AS primary
----
SELECT 'a' AS primary
SELECT ('a') AS primary -- fully parenthetized
SELECT _ AS primary -- literals removed
SELECT 'a' AS _ -- identifiers removed

parse
SELECT 'a' AS like
----
SELECT 'a' AS like
SELECT ('a') AS like -- fully parenthetized
SELECT _ AS like -- literals removed
SELECT 'a' AS _ -- identifiers removed

parse
SELECT 0xf0 FROM t
----
SELECT 0xf0 FROM t
SELECT (0xf0) FROM t -- fully parenthetized
SELECT _ FROM t -- literals removed
SELECT 0xf0 FROM _ -- identifiers removed

parse
SELECT 0xF0 FROM t
----
SELECT 0xF0 FROM t
SELECT (0xF0) FROM t -- fully parenthetized
SELECT _ FROM t -- literals removed
SELECT 0xF0 FROM _ -- identifiers removed

parse
SELECT CAST(1 AS STRING)
----
SELECT CAST(1 AS STRING)
SELECT (CAST((1) AS STRING)) -- fully parenthetized
SELECT CAST(_ AS STRING) -- literals removed
SELECT CAST(1 AS STRING) -- identifiers removed

parse
SELECT CAST(1 AS _int8)
----
SELECT CAST(1 AS INT8[]) -- normalized!
SELECT (CAST((1) AS INT8[])) -- fully parenthetized
SELECT CAST(_ AS INT8[]) -- literals removed
SELECT CAST(1 AS INT8[]) -- identifiers removed

parse
SELECT CAST(1 AS "_int8")
----
SELECT CAST(1 AS INT8[]) -- normalized!
SELECT (CAST((1) AS INT8[])) -- fully parenthetized
SELECT CAST(_ AS INT8[]) -- literals removed
SELECT CAST(1 AS INT8[]) -- identifiers removed

parse
SELECT SERIAL8 'foo', 'foo'::SERIAL8
----
SELECT INT8 'foo', 'foo'::INT8 -- normalized!
SELECT (INT8 ('foo')), (('foo')::INT8) -- fully parenthetized
SELECT INT8 _, _::INT8 -- literals removed
SELECT int8 AS _, _::INT8 -- UNEXPECTED REPARSED AST WITHOUT LITERALS
SELECT INT8 'foo', 'foo'::INT8 -- identifiers removed


parse
SELECT ANNOTATE_TYPE(1, STRING)
----
SELECT ANNOTATE_TYPE(1, STRING)
SELECT (ANNOTATE_TYPE((1), STRING)) -- fully parenthetized
SELECT ANNOTATE_TYPE(_, STRING) -- literals removed
SELECT ANNOTATE_TYPE(1, STRING) -- identifiers removed

parse
SELECT (1 + 2).*
----
SELECT (1 + 2).*
SELECT ((((1) + (2))).*) -- fully parenthetized
SELECT (_ + _).* -- literals removed
SELECT (1 + 2).* -- identifiers removed

parse
SELECT (1 + 2).@1
----
SELECT (1 + 2).@1
SELECT ((((1) + (2))).@1) -- fully parenthetized
SELECT (_ + _).@1 -- literals removed
SELECT (1 + 2).@1 -- identifiers removed


parse
SELECT (1 + 2).col
----
SELECT (1 + 2).col
SELECT ((((1) + (2))).col) -- fully parenthetized
SELECT (_ + _).col -- literals removed
SELECT (1 + 2)._ -- identifiers removed

parse
SELECT (abc.def).col
----
SELECT (abc.def).col
SELECT (((abc.def)).col) -- fully parenthetized
SELECT (abc.def).col -- literals removed
SELECT (_._)._ -- identifiers removed

parse
SELECT (i.keys).col
----
SELECT (i.keys).col
SELECT (((i.keys)).col) -- fully parenthetized
SELECT (i.keys).col -- literals removed
SELECT (_._)._ -- identifiers removed

parse
SELECT (i.keys).*
----
SELECT (i.keys).*
SELECT (((i.keys)).*) -- fully parenthetized
SELECT (i.keys).* -- literals removed
SELECT (_._).* -- identifiers removed

parse
SELECT (i.keys).@1
----
SELECT (i.keys).@1
SELECT (((i.keys)).@1) -- fully parenthetized
SELECT (i.keys).@1 -- literals removed
SELECT (_._).@1 -- identifiers removed

parse
SELECT (ARRAY['a', 'b', 'c']).name
----
SELECT (ARRAY['a', 'b', 'c']).name
SELECT (((ARRAY[('a'), ('b'), ('c')])).name) -- fully parenthetized
SELECT (ARRAY[_, _, __more1__]).name -- literals removed
SELECT (ARRAY['a', 'b', 'c'])._ -- identifiers removed

parse
SELECT 'a' LIKE '\a' ESCAPE '\'
----
SELECT like_escape('a', e'\\a', e'\\') -- normalized!
SELECT (like_escape(('a'), (e'\\a'), (e'\\'))) -- fully parenthetized
SELECT like_escape(_, _, _) -- literals removed
SELECT like_escape('a', e'\\a', e'\\') -- identifiers removed

parse
SELECT '\abc\' LIKE '-\___-\' ESCAPE '-'
----
SELECT like_escape(e'\\abc\\', e'-\\___-\\', '-') -- normalized!
SELECT (like_escape((e'\\abc\\'), (e'-\\___-\\'), ('-'))) -- fully parenthetized
SELECT like_escape(_, _, _) -- literals removed
SELECT like_escape(e'\\abc\\', e'-\\___-\\', '-') -- identifiers removed

parse
SELECT 'a' LIKE '\a' ESCAPE ''
----
SELECT like_escape('a', e'\\a', '') -- normalized!
SELECT (like_escape(('a'), (e'\\a'), (''))) -- fully parenthetized
SELECT like_escape(_, _, _) -- literals removed
SELECT like_escape('a', e'\\a', '') -- identifiers removed

parse
SELECT 'a' NOT LIKE '\a' ESCAPE '\'
----
SELECT not_like_escape('a', e'\\a', e'\\') -- normalized!
SELECT (not_like_escape(('a'), (e'\\a'), (e'\\'))) -- fully parenthetized
SELECT not_like_escape(_, _, _) -- literals removed
SELECT not_like_escape('a', e'\\a', e'\\') -- identifiers removed

parse
SELECT '\abc\' NOT LIKE '-\___-\' ESCAPE '-'
----
SELECT not_like_escape(e'\\abc\\', e'-\\___-\\', '-') -- normalized!
SELECT (not_like_escape((e'\\abc\\'), (e'-\\___-\\'), ('-'))) -- fully parenthetized
SELECT not_like_escape(_, _, _) -- literals removed
SELECT not_like_escape(e'\\abc\\', e'-\\___-\\', '-') -- identifiers removed

parse
SELECT 'a' NOT LIKE '\a' ESCAPE ''
----
SELECT not_like_escape('a', e'\\a', '') -- normalized!
SELECT (not_like_escape(('a'), (e'\\a'), (''))) -- fully parenthetized
SELECT not_like_escape(_, _, _) -- literals removed
SELECT not_like_escape('a', e'\\a', '') -- identifiers removed

parse
SELECT 'a' ILIKE '\a' ESCAPE '\'
----
SELECT ilike_escape('a', e'\\a', e'\\') -- normalized!
SELECT (ilike_escape(('a'), (e'\\a'), (e'\\'))) -- fully parenthetized
SELECT ilike_escape(_, _, _) -- literals removed
SELECT ilike_escape('a', e'\\a', e'\\') -- identifiers removed

parse
SELECT '\abc\' ILIKE '-\___-\' ESCAPE '-'
----
SELECT ilike_escape(e'\\abc\\', e'-\\___-\\', '-') -- normalized!
SELECT (ilike_escape((e'\\abc\\'), (e'-\\___-\\'), ('-'))) -- fully parenthetized
SELECT ilike_escape(_, _, _) -- literals removed
SELECT ilike_escape(e'\\abc\\', e'-\\___-\\', '-') -- identifiers removed

parse
SELECT 'a' ILIKE '\a' ESCAPE ''
----
SELECT ilike_escape('a', e'\\a', '') -- normalized!
SELECT (ilike_escape(('a'), (e'\\a'), (''))) -- fully parenthetized
SELECT ilike_escape(_, _, _) -- literals removed
SELECT ilike_escape('a', e'\\a', '') -- identifiers removed

parse
SELECT 'a' NOT ILIKE '\a' ESCAPE '\'
----
SELECT not_ilike_escape('a', e'\\a', e'\\') -- normalized!
SELECT (not_ilike_escape(('a'), (e'\\a'), (e'\\'))) -- fully parenthetized
SELECT not_ilike_escape(_, _, _) -- literals removed
SELECT not_ilike_escape('a', e'\\a', e'\\') -- identifiers removed

parse
SELECT '\abc\' NOT ILIKE '-\___-\' ESCAPE '-'
----
SELECT not_ilike_escape(e'\\abc\\', e'-\\___-\\', '-') -- normalized!
SELECT (not_ilike_escape((e'\\abc\\'), (e'-\\___-\\'), ('-'))) -- fully parenthetized
SELECT not_ilike_escape(_, _, _) -- literals removed
SELECT not_ilike_escape(e'\\abc\\', e'-\\___-\\', '-') -- identifiers removed

parse
SELECT 'a' NOT ILIKE '\a' ESCAPE ''
----
SELECT not_ilike_escape('a', e'\\a', '') -- normalized!
SELECT (not_ilike_escape(('a'), (e'\\a'), (''))) -- fully parenthetized
SELECT not_ilike_escape(_, _, _) -- literals removed
SELECT not_ilike_escape('a', e'\\a', '') -- identifiers removed

parse
SELECT 'a' SIMILAR TO '\a' ESCAPE '\'
----
SELECT similar_to_escape('a', e'\\a', e'\\') -- normalized!
SELECT (similar_to_escape(('a'), (e'\\a'), (e'\\'))) -- fully parenthetized
SELECT similar_to_escape(_, _, _) -- literals removed
SELECT similar_to_escape('a', e'\\a', e'\\') -- identifiers removed

parse
SELECT '\abc\' SIMILAR TO '-\___-\' ESCAPE '-'
----
SELECT similar_to_escape(e'\\abc\\', e'-\\___-\\', '-') -- normalized!
SELECT (similar_to_escape((e'\\abc\\'), (e'-\\___-\\'), ('-'))) -- fully parenthetized
SELECT similar_to_escape(_, _, _) -- literals removed
SELECT similar_to_escape(e'\\abc\\', e'-\\___-\\', '-') -- identifiers removed

parse
SELECT 'a' SIMILAR TO '\a' ESCAPE ''
----
SELECT similar_to_escape('a', e'\\a', '') -- normalized!
SELECT (similar_to_escape(('a'), (e'\\a'), (''))) -- fully parenthetized
SELECT similar_to_escape(_, _, _) -- literals removed
SELECT similar_to_escape('a', e'\\a', '') -- identifiers removed

parse
SELECT 'a' NOT SIMILAR TO '\a' ESCAPE '\'
----
SELECT not_similar_to_escape('a', e'\\a', e'\\') -- normalized!
SELECT (not_similar_to_escape(('a'), (e'\\a'), (e'\\'))) -- fully parenthetized
SELECT not_similar_to_escape(_, _, _) -- literals removed
SELECT not_similar_to_escape('a', e'\\a', e'\\') -- identifiers removed

parse
SELECT '\abc\' NOT SIMILAR TO '-\___-\' ESCAPE '-'
----
SELECT not_similar_to_escape(e'\\abc\\', e'-\\___-\\', '-') -- normalized!
SELECT (not_similar_to_escape((e'\\abc\\'), (e'-\\___-\\'), ('-'))) -- fully parenthetized
SELECT not_similar_to_escape(_, _, _) -- literals removed
SELECT not_similar_to_escape(e'\\abc\\', e'-\\___-\\', '-') -- identifiers removed

parse
SELECT 'a' NOT SIMILAR TO '\a' ESCAPE ''
----
SELECT not_similar_to_escape('a', e'\\a', '') -- normalized!
SELECT (not_similar_to_escape(('a'), (e'\\a'), (''))) -- fully parenthetized
SELECT not_similar_to_escape(_, _, _) -- literals removed
SELECT not_similar_to_escape('a', e'\\a', '') -- identifiers removed

parse
SELECT $$a'a$$
----
SELECT e'a\'a' -- normalized!
SELECT (e'a\'a') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'a\'a' -- identifiers removed

parse
SELECT $$a\\na$$
----
SELECT e'a\\\\na' -- normalized!
SELECT (e'a\\\\na') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'a\\\\na' -- identifiers removed

parse
SELECT $select$\\n$select$
----
SELECT e'\\\\n' -- normalized!
SELECT (e'\\\\n') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'\\\\n' -- identifiers removed

parse
SELECT $$a"a$$
----
SELECT 'a"a' -- normalized!
SELECT ('a"a') -- fully parenthetized
SELECT _ -- literals removed
SELECT 'a"a' -- identifiers removed

parse
SELECT $$full$$
----
SELECT 'full' -- normalized!
SELECT ('full') -- fully parenthetized
SELECT _ -- literals removed
SELECT 'full' -- identifiers removed

parse
SELECT $select$full$select$
----
SELECT 'full' -- normalized!
SELECT ('full') -- fully parenthetized
SELECT _ -- literals removed
SELECT 'full' -- identifiers removed

parse
SELECT $select$a$$b$select$
----
SELECT 'a$$b' -- normalized!
SELECT ('a$$b') -- fully parenthetized
SELECT _ -- literals removed
SELECT 'a$$b' -- identifiers removed

parse
SELECT $$Dianne's horse$$
----
SELECT e'Dianne\'s horse' -- normalized!
SELECT (e'Dianne\'s horse') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'Dianne\'s horse' -- identifiers removed

parse
SELECT $SomeTag$Dianne's horse$SomeTag$
----
SELECT e'Dianne\'s horse' -- normalized!
SELECT (e'Dianne\'s horse') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'Dianne\'s horse' -- identifiers removed

parse
SELECT $function$
BEGIN
RETURN ($1 ~ $q$[\t\r\n\v\\]$q$);
END;
$function$
----
SELECT e'\nBEGIN\nRETURN ($1 ~ $q$[\\t\\r\\n\\v\\\\]$q$);\nEND;\n' -- normalized!
SELECT (e'\nBEGIN\nRETURN ($1 ~ $q$[\\t\\r\\n\\v\\\\]$q$);\nEND;\n') -- fully parenthetized
SELECT _ -- literals removed
SELECT e'\nBEGIN\nRETURN ($1 ~ $q$[\\t\\r\\n\\v\\\\]$q$);\nEND;\n' -- identifiers removed

parse
SELECT a IS NAN
----
SELECT a = 'NaN' -- normalized!
SELECT ((a) = ('NaN')) -- fully parenthetized
SELECT a = _ -- literals removed
SELECT _ = 'NaN' -- identifiers removed

parse
SELECT a IS NOT NAN
----
SELECT a != 'NaN' -- normalized!
SELECT ((a) != ('NaN')) -- fully parenthetized
SELECT a != _ -- literals removed
SELECT _ != 'NaN' -- identifiers removed

parse
SELECT 1+COALESCE(NULL, 'a', x)-ARRAY[3.14]
----
SELECT (1 + COALESCE(NULL, 'a', x)) - ARRAY[3.14] -- normalized!
SELECT ((((1) + (COALESCE((NULL), ('a'), (x))))) - (ARRAY[(3.14)])) -- fully parenthetized
SELECT (_ + COALESCE(_, _, x)) - ARRAY[_] -- literals removed
SELECT (1 + COALESCE(NULL, 'a', _)) - ARRAY[3.14] -- identifiers removed
