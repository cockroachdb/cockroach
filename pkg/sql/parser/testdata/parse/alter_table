parse
ALTER TABLE a RENAME TO b
----
ALTER TABLE a RENAME TO b
ALTER TABLE a RENAME TO b -- fully parenthetized
ALTER TABLE a RENAME TO b -- literals removed
ALTER TABLE _ RENAME TO _ -- identifiers removed

parse
EXPLAIN ALTER TABLE a RENAME TO b
----
EXPLAIN ALTER TABLE a RENAME TO b
EXPLAIN ALTER TABLE a RENAME TO b -- fully parenthetized
EXPLAIN ALTER TABLE a RENAME TO b -- literals removed
EXPLAIN ALTER TABLE _ RENAME TO _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a RENAME TO b
----
ALTER TABLE IF EXISTS a RENAME TO b
ALTER TABLE IF EXISTS a RENAME TO b -- fully parenthetized
ALTER TABLE IF EXISTS a RENAME TO b -- literals removed
ALTER TABLE IF EXISTS _ RENAME TO _ -- identifiers removed

parse
ALTER TABLE a RENAME COLUMN c1 TO c2
----
ALTER TABLE a RENAME COLUMN c1 TO c2
ALTER TABLE a RENAME COLUMN c1 TO c2 -- fully parenthetized
ALTER TABLE a RENAME COLUMN c1 TO c2 -- literals removed
ALTER TABLE _ RENAME COLUMN _ TO _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a RENAME COLUMN c1 TO c2
----
ALTER TABLE IF EXISTS a RENAME COLUMN c1 TO c2
ALTER TABLE IF EXISTS a RENAME COLUMN c1 TO c2 -- fully parenthetized
ALTER TABLE IF EXISTS a RENAME COLUMN c1 TO c2 -- literals removed
ALTER TABLE IF EXISTS _ RENAME COLUMN _ TO _ -- identifiers removed

parse
ALTER TABLE a RENAME b TO c
----
ALTER TABLE a RENAME COLUMN b TO c -- normalized!
ALTER TABLE a RENAME COLUMN b TO c -- fully parenthetized
ALTER TABLE a RENAME COLUMN b TO c -- literals removed
ALTER TABLE _ RENAME COLUMN _ TO _ -- identifiers removed

parse
ALTER TABLE a RENAME CONSTRAINT c1 TO c2
----
ALTER TABLE a RENAME CONSTRAINT c1 TO c2
ALTER TABLE a RENAME CONSTRAINT c1 TO c2 -- fully parenthetized
ALTER TABLE a RENAME CONSTRAINT c1 TO c2 -- literals removed
ALTER TABLE _ RENAME CONSTRAINT _ TO _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a RENAME CONSTRAINT c1 TO c2
----
ALTER TABLE IF EXISTS a RENAME CONSTRAINT c1 TO c2
ALTER TABLE IF EXISTS a RENAME CONSTRAINT c1 TO c2 -- fully parenthetized
ALTER TABLE IF EXISTS a RENAME CONSTRAINT c1 TO c2 -- literals removed
ALTER TABLE IF EXISTS _ RENAME CONSTRAINT _ TO _ -- identifiers removed

parse
ALTER TABLE a RENAME CONSTRAINT c TO d, RENAME COLUMN e TO f
----
ALTER TABLE a RENAME CONSTRAINT c TO d, RENAME COLUMN e TO f
ALTER TABLE a RENAME CONSTRAINT c TO d, RENAME COLUMN e TO f -- fully parenthetized
ALTER TABLE a RENAME CONSTRAINT c TO d, RENAME COLUMN e TO f -- literals removed
ALTER TABLE _ RENAME CONSTRAINT _ TO _, RENAME COLUMN _ TO _ -- identifiers removed

parse
ALTER TABLE a SET LOCALITY GLOBAL
----
ALTER TABLE a SET LOCALITY GLOBAL
ALTER TABLE a SET LOCALITY GLOBAL -- fully parenthetized
ALTER TABLE a SET LOCALITY GLOBAL -- literals removed
ALTER TABLE _ SET LOCALITY GLOBAL -- identifiers removed


parse
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN region_name
----
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN region_name
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN region_name -- fully parenthetized
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN region_name -- literals removed
ALTER TABLE _ SET LOCALITY REGIONAL BY TABLE IN _ -- identifiers removed

parse
ALTER TABLE a SET LOCALITY REGIONAL IN "us-west-1"
----
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN "us-west-1" -- normalized!
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN "us-west-1" -- fully parenthetized
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN "us-west-1" -- literals removed
ALTER TABLE _ SET LOCALITY REGIONAL BY TABLE IN _ -- identifiers removed

parse
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION
----
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- fully parenthetized
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- literals removed
ALTER TABLE _ SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- identifiers removed

parse
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE
----
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- normalized!
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- fully parenthetized
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- literals removed
ALTER TABLE _ SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- identifiers removed

parse
ALTER TABLE a SET LOCALITY REGIONAL
----
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- normalized!
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- fully parenthetized
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- literals removed
ALTER TABLE _ SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- identifiers removed

parse
ALTER TABLE a SET LOCALITY REGIONAL IN PRIMARY REGION
----
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- normalized!
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- fully parenthetized
ALTER TABLE a SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- literals removed
ALTER TABLE _ SET LOCALITY REGIONAL BY TABLE IN PRIMARY REGION -- identifiers removed

parse
ALTER TABLE a SET LOCALITY REGIONAL BY ROW
----
ALTER TABLE a SET LOCALITY REGIONAL BY ROW
ALTER TABLE a SET LOCALITY REGIONAL BY ROW -- fully parenthetized
ALTER TABLE a SET LOCALITY REGIONAL BY ROW -- literals removed
ALTER TABLE _ SET LOCALITY REGIONAL BY ROW -- identifiers removed

parse
ALTER TABLE a SET LOCALITY REGIONAL BY ROW AS bobby
----
ALTER TABLE a SET LOCALITY REGIONAL BY ROW AS bobby
ALTER TABLE a SET LOCALITY REGIONAL BY ROW AS bobby -- fully parenthetized
ALTER TABLE a SET LOCALITY REGIONAL BY ROW AS bobby -- literals removed
ALTER TABLE _ SET LOCALITY REGIONAL BY ROW AS _ -- identifiers removed

parse
ALTER TABLE a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
----
ALTER TABLE a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
ALTER TABLE a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- fully parenthetized
ALTER TABLE a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- literals removed
ALTER TABLE _ ADD COLUMN _ INT8, ADD CONSTRAINT _ UNIQUE (_) -- identifiers removed

parse
EXPLAIN ALTER TABLE a ADD COLUMN b INT8
----
EXPLAIN ALTER TABLE a ADD COLUMN b INT8
EXPLAIN ALTER TABLE a ADD COLUMN b INT8 -- fully parenthetized
EXPLAIN ALTER TABLE a ADD COLUMN b INT8 -- literals removed
EXPLAIN ALTER TABLE _ ADD COLUMN _ INT8 -- identifiers removed

parse
ALTER TABLE a ADD b INT8
----
ALTER TABLE a ADD COLUMN b INT8 -- normalized!
ALTER TABLE a ADD COLUMN b INT8 -- fully parenthetized
ALTER TABLE a ADD COLUMN b INT8 -- literals removed
ALTER TABLE _ ADD COLUMN _ INT8 -- identifiers removed

parse
ALTER TABLE a ADD IF NOT EXISTS b INT8
----
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8 -- normalized!
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8 -- fully parenthetized
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8 -- literals removed
ALTER TABLE _ ADD COLUMN IF NOT EXISTS _ INT8 -- identifiers removed

parse
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
----
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- fully parenthetized
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- literals removed
ALTER TABLE _ ADD COLUMN IF NOT EXISTS _ INT8, ADD CONSTRAINT _ UNIQUE (_) -- identifiers removed

parse
ALTER TABLE IF EXISTS a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
----
ALTER TABLE IF EXISTS a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
ALTER TABLE IF EXISTS a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- fully parenthetized
ALTER TABLE IF EXISTS a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- literals removed
ALTER TABLE IF EXISTS _ ADD COLUMN _ INT8, ADD CONSTRAINT _ UNIQUE (_) -- identifiers removed

parse
ALTER TABLE IF EXISTS a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
----
ALTER TABLE IF EXISTS a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
ALTER TABLE IF EXISTS a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- fully parenthetized
ALTER TABLE IF EXISTS a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- literals removed
ALTER TABLE IF EXISTS _ ADD COLUMN IF NOT EXISTS _ INT8, ADD CONSTRAINT _ UNIQUE (_) -- identifiers removed

parse
ALTER TABLE a ADD COLUMN b INT8 UNIQUE WITHOUT INDEX, ADD CONSTRAINT a_no_idx UNIQUE WITHOUT INDEX (a)
----
ALTER TABLE a ADD COLUMN b INT8 UNIQUE WITHOUT INDEX, ADD CONSTRAINT a_no_idx UNIQUE WITHOUT INDEX (a)
ALTER TABLE a ADD COLUMN b INT8 UNIQUE WITHOUT INDEX, ADD CONSTRAINT a_no_idx UNIQUE WITHOUT INDEX (a) -- fully parenthetized
ALTER TABLE a ADD COLUMN b INT8 UNIQUE WITHOUT INDEX, ADD CONSTRAINT a_no_idx UNIQUE WITHOUT INDEX (a) -- literals removed
ALTER TABLE _ ADD COLUMN _ INT8 UNIQUE WITHOUT INDEX, ADD CONSTRAINT _ UNIQUE WITHOUT INDEX (_) -- identifiers removed

parse
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) NOT VALID
----
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) NOT VALID
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) NOT VALID -- fully parenthetized
ALTER TABLE a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) NOT VALID -- literals removed
ALTER TABLE _ ADD COLUMN IF NOT EXISTS _ INT8, ADD CONSTRAINT _ UNIQUE (_) NOT VALID -- identifiers removed

parse
ALTER TABLE IF EXISTS a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
----
ALTER TABLE IF EXISTS a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
ALTER TABLE IF EXISTS a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- fully parenthetized
ALTER TABLE IF EXISTS a ADD COLUMN b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- literals removed
ALTER TABLE IF EXISTS _ ADD COLUMN _ INT8, ADD CONSTRAINT _ UNIQUE (_) -- identifiers removed

parse
ALTER TABLE IF EXISTS a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
----
ALTER TABLE IF EXISTS a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a)
ALTER TABLE IF EXISTS a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- fully parenthetized
ALTER TABLE IF EXISTS a ADD COLUMN IF NOT EXISTS b INT8, ADD CONSTRAINT a_idx UNIQUE (a) -- literals removed
ALTER TABLE IF EXISTS _ ADD COLUMN IF NOT EXISTS _ INT8, ADD CONSTRAINT _ UNIQUE (_) -- identifiers removed

parse
ALTER TABLE a ADD COLUMN b INT8 FAMILY fam_a
----
ALTER TABLE a ADD COLUMN b INT8 FAMILY fam_a
ALTER TABLE a ADD COLUMN b INT8 FAMILY fam_a -- fully parenthetized
ALTER TABLE a ADD COLUMN b INT8 FAMILY fam_a -- literals removed
ALTER TABLE _ ADD COLUMN _ INT8 FAMILY _ -- identifiers removed

parse
ALTER TABLE a ADD b INT8 FAMILY fam_a
----
ALTER TABLE a ADD COLUMN b INT8 FAMILY fam_a -- normalized!
ALTER TABLE a ADD COLUMN b INT8 FAMILY fam_a -- fully parenthetized
ALTER TABLE a ADD COLUMN b INT8 FAMILY fam_a -- literals removed
ALTER TABLE _ ADD COLUMN _ INT8 FAMILY _ -- identifiers removed


parse
ALTER TABLE a ADD COLUMN b INT8 CREATE FAMILY
----
ALTER TABLE a ADD COLUMN b INT8 CREATE FAMILY
ALTER TABLE a ADD COLUMN b INT8 CREATE FAMILY -- fully parenthetized
ALTER TABLE a ADD COLUMN b INT8 CREATE FAMILY -- literals removed
ALTER TABLE _ ADD COLUMN _ INT8 CREATE FAMILY -- identifiers removed

parse
ALTER TABLE a ADD COLUMN b INT8 CREATE FAMILY fam_b
----
ALTER TABLE a ADD COLUMN b INT8 CREATE FAMILY fam_b
ALTER TABLE a ADD COLUMN b INT8 CREATE FAMILY fam_b -- fully parenthetized
ALTER TABLE a ADD COLUMN b INT8 CREATE FAMILY fam_b -- literals removed
ALTER TABLE _ ADD COLUMN _ INT8 CREATE FAMILY _ -- identifiers removed

parse
ALTER TABLE a ADD COLUMN b INT8 CREATE IF NOT EXISTS FAMILY fam_b
----
ALTER TABLE a ADD COLUMN b INT8 CREATE IF NOT EXISTS FAMILY fam_b
ALTER TABLE a ADD COLUMN b INT8 CREATE IF NOT EXISTS FAMILY fam_b -- fully parenthetized
ALTER TABLE a ADD COLUMN b INT8 CREATE IF NOT EXISTS FAMILY fam_b -- literals removed
ALTER TABLE _ ADD COLUMN _ INT8 CREATE IF NOT EXISTS FAMILY _ -- identifiers removed

parse
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (a, b, c)
----
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (a, b, c)
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (a, b, c) -- fully parenthetized
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (a, b, c) -- literals removed
ALTER TABLE _ ALTER PRIMARY KEY USING COLUMNS (_, _, _) -- identifiers removed

parse
ALTER TABLE a DROP COLUMN b, DROP CONSTRAINT a_idx
----
ALTER TABLE a DROP COLUMN b, DROP CONSTRAINT a_idx
ALTER TABLE a DROP COLUMN b, DROP CONSTRAINT a_idx -- fully parenthetized
ALTER TABLE a DROP COLUMN b, DROP CONSTRAINT a_idx -- literals removed
ALTER TABLE _ DROP COLUMN _, DROP CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx
----
ALTER TABLE a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx
ALTER TABLE a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx -- fully parenthetized
ALTER TABLE a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx -- literals removed
ALTER TABLE _ DROP COLUMN IF EXISTS _, DROP CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a DROP COLUMN b, DROP CONSTRAINT a_idx
----
ALTER TABLE IF EXISTS a DROP COLUMN b, DROP CONSTRAINT a_idx
ALTER TABLE IF EXISTS a DROP COLUMN b, DROP CONSTRAINT a_idx -- fully parenthetized
ALTER TABLE IF EXISTS a DROP COLUMN b, DROP CONSTRAINT a_idx -- literals removed
ALTER TABLE IF EXISTS _ DROP COLUMN _, DROP CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx
----
ALTER TABLE IF EXISTS a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx
ALTER TABLE IF EXISTS a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx -- fully parenthetized
ALTER TABLE IF EXISTS a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx -- literals removed
ALTER TABLE IF EXISTS _ DROP COLUMN IF EXISTS _, DROP CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE a DROP COLUMN b, DROP CONSTRAINT a_idx
----
ALTER TABLE a DROP COLUMN b, DROP CONSTRAINT a_idx
ALTER TABLE a DROP COLUMN b, DROP CONSTRAINT a_idx -- fully parenthetized
ALTER TABLE a DROP COLUMN b, DROP CONSTRAINT a_idx -- literals removed
ALTER TABLE _ DROP COLUMN _, DROP CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx
----
ALTER TABLE a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx
ALTER TABLE a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx -- fully parenthetized
ALTER TABLE a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx -- literals removed
ALTER TABLE _ DROP COLUMN IF EXISTS _, DROP CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a DROP COLUMN b, DROP CONSTRAINT a_idx
----
ALTER TABLE IF EXISTS a DROP COLUMN b, DROP CONSTRAINT a_idx
ALTER TABLE IF EXISTS a DROP COLUMN b, DROP CONSTRAINT a_idx -- fully parenthetized
ALTER TABLE IF EXISTS a DROP COLUMN b, DROP CONSTRAINT a_idx -- literals removed
ALTER TABLE IF EXISTS _ DROP COLUMN _, DROP CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx
----
ALTER TABLE IF EXISTS a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx
ALTER TABLE IF EXISTS a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx -- fully parenthetized
ALTER TABLE IF EXISTS a DROP COLUMN IF EXISTS b, DROP CONSTRAINT a_idx -- literals removed
ALTER TABLE IF EXISTS _ DROP COLUMN IF EXISTS _, DROP CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE a DROP COLUMN b CASCADE
----
ALTER TABLE a DROP COLUMN b CASCADE
ALTER TABLE a DROP COLUMN b CASCADE -- fully parenthetized
ALTER TABLE a DROP COLUMN b CASCADE -- literals removed
ALTER TABLE _ DROP COLUMN _ CASCADE -- identifiers removed

parse
ALTER TABLE a DROP COLUMN b RESTRICT
----
ALTER TABLE a DROP COLUMN b RESTRICT
ALTER TABLE a DROP COLUMN b RESTRICT -- fully parenthetized
ALTER TABLE a DROP COLUMN b RESTRICT -- literals removed
ALTER TABLE _ DROP COLUMN _ RESTRICT -- identifiers removed

parse
ALTER TABLE a DROP b
----
ALTER TABLE a DROP COLUMN b -- normalized!
ALTER TABLE a DROP COLUMN b -- fully parenthetized
ALTER TABLE a DROP COLUMN b -- literals removed
ALTER TABLE _ DROP COLUMN _ -- identifiers removed

parse
ALTER TABLE a DROP CONSTRAINT b CASCADE
----
ALTER TABLE a DROP CONSTRAINT b CASCADE
ALTER TABLE a DROP CONSTRAINT b CASCADE -- fully parenthetized
ALTER TABLE a DROP CONSTRAINT b CASCADE -- literals removed
ALTER TABLE _ DROP CONSTRAINT _ CASCADE -- identifiers removed

parse
ALTER TABLE a DROP CONSTRAINT IF EXISTS b RESTRICT
----
ALTER TABLE a DROP CONSTRAINT IF EXISTS b RESTRICT
ALTER TABLE a DROP CONSTRAINT IF EXISTS b RESTRICT -- fully parenthetized
ALTER TABLE a DROP CONSTRAINT IF EXISTS b RESTRICT -- literals removed
ALTER TABLE _ DROP CONSTRAINT IF EXISTS _ RESTRICT -- identifiers removed

parse
ALTER TABLE a VALIDATE CONSTRAINT a
----
ALTER TABLE a VALIDATE CONSTRAINT a
ALTER TABLE a VALIDATE CONSTRAINT a -- fully parenthetized
ALTER TABLE a VALIDATE CONSTRAINT a -- literals removed
ALTER TABLE _ VALIDATE CONSTRAINT _ -- identifiers removed

parse
ALTER TABLE a ADD PRIMARY KEY (x, y, z)
----
ALTER TABLE a ADD PRIMARY KEY (x, y, z)
ALTER TABLE a ADD PRIMARY KEY (x, y, z) -- fully parenthetized
ALTER TABLE a ADD PRIMARY KEY (x, y, z) -- literals removed
ALTER TABLE _ ADD PRIMARY KEY (_, _, _) -- identifiers removed

parse
ALTER TABLE a ADD PRIMARY KEY (x, y, z) USING HASH WITH BUCKET_COUNT = 10 INTERLEAVE IN PARENT b (x, y)
----
ALTER TABLE a ADD PRIMARY KEY (x, y, z) USING HASH WITH BUCKET_COUNT = 10 INTERLEAVE IN PARENT b (x, y)
ALTER TABLE a ADD PRIMARY KEY (x, y, z) USING HASH WITH BUCKET_COUNT = (10) INTERLEAVE IN PARENT b (x, y) -- fully parenthetized
ALTER TABLE a ADD PRIMARY KEY (x, y, z) USING HASH WITH BUCKET_COUNT = _ INTERLEAVE IN PARENT b (x, y) -- literals removed
ALTER TABLE _ ADD PRIMARY KEY (_, _, _) USING HASH WITH BUCKET_COUNT = 10 INTERLEAVE IN PARENT _ (_, _) -- identifiers removed

parse
ALTER TABLE a ADD CONSTRAINT "primary" PRIMARY KEY (x, y, z)
----
ALTER TABLE a ADD CONSTRAINT "primary" PRIMARY KEY (x, y, z)
ALTER TABLE a ADD CONSTRAINT "primary" PRIMARY KEY (x, y, z) -- fully parenthetized
ALTER TABLE a ADD CONSTRAINT "primary" PRIMARY KEY (x, y, z) -- literals removed
ALTER TABLE _ ADD CONSTRAINT _ PRIMARY KEY (_, _, _) -- identifiers removed

parse
ALTER TABLE a ADD CONSTRAINT "primary" PRIMARY KEY (x, y, z) USING HASH WITH BUCKET_COUNT = 10 INTERLEAVE IN PARENT b (x, y)
----
ALTER TABLE a ADD CONSTRAINT "primary" PRIMARY KEY (x, y, z) USING HASH WITH BUCKET_COUNT = 10 INTERLEAVE IN PARENT b (x, y)
ALTER TABLE a ADD CONSTRAINT "primary" PRIMARY KEY (x, y, z) USING HASH WITH BUCKET_COUNT = (10) INTERLEAVE IN PARENT b (x, y) -- fully parenthetized
ALTER TABLE a ADD CONSTRAINT "primary" PRIMARY KEY (x, y, z) USING HASH WITH BUCKET_COUNT = _ INTERLEAVE IN PARENT b (x, y) -- literals removed
ALTER TABLE _ ADD CONSTRAINT _ PRIMARY KEY (_, _, _) USING HASH WITH BUCKET_COUNT = 10 INTERLEAVE IN PARENT _ (_, _) -- identifiers removed

parse
ALTER TABLE a ALTER COLUMN b SET DEFAULT 42
----
ALTER TABLE a ALTER COLUMN b SET DEFAULT 42
ALTER TABLE a ALTER COLUMN b SET DEFAULT (42) -- fully parenthetized
ALTER TABLE a ALTER COLUMN b SET DEFAULT _ -- literals removed
ALTER TABLE _ ALTER COLUMN _ SET DEFAULT 42 -- identifiers removed

parse
ALTER TABLE a ALTER COLUMN b SET DEFAULT NULL
----
ALTER TABLE a ALTER COLUMN b SET DEFAULT NULL
ALTER TABLE a ALTER COLUMN b SET DEFAULT (NULL) -- fully parenthetized
ALTER TABLE a ALTER COLUMN b SET DEFAULT _ -- literals removed
ALTER TABLE _ ALTER COLUMN _ SET DEFAULT NULL -- identifiers removed

parse
ALTER TABLE a ALTER COLUMN b DROP DEFAULT
----
ALTER TABLE a ALTER COLUMN b DROP DEFAULT
ALTER TABLE a ALTER COLUMN b DROP DEFAULT -- fully parenthetized
ALTER TABLE a ALTER COLUMN b DROP DEFAULT -- literals removed
ALTER TABLE _ ALTER COLUMN _ DROP DEFAULT -- identifiers removed

parse
ALTER TABLE a ALTER COLUMN b DROP NOT NULL
----
ALTER TABLE a ALTER COLUMN b DROP NOT NULL
ALTER TABLE a ALTER COLUMN b DROP NOT NULL -- fully parenthetized
ALTER TABLE a ALTER COLUMN b DROP NOT NULL -- literals removed
ALTER TABLE _ ALTER COLUMN _ DROP NOT NULL -- identifiers removed

parse
ALTER TABLE a ALTER b DROP NOT NULL
----
ALTER TABLE a ALTER COLUMN b DROP NOT NULL -- normalized!
ALTER TABLE a ALTER COLUMN b DROP NOT NULL -- fully parenthetized
ALTER TABLE a ALTER COLUMN b DROP NOT NULL -- literals removed
ALTER TABLE _ ALTER COLUMN _ DROP NOT NULL -- identifiers removed

parse
ALTER TABLE a ALTER COLUMN b DROP STORED
----
ALTER TABLE a ALTER COLUMN b DROP STORED
ALTER TABLE a ALTER COLUMN b DROP STORED -- fully parenthetized
ALTER TABLE a ALTER COLUMN b DROP STORED -- literals removed
ALTER TABLE _ ALTER COLUMN _ DROP STORED -- identifiers removed

parse
ALTER TABLE a ALTER b DROP STORED
----
ALTER TABLE a ALTER COLUMN b DROP STORED -- normalized!
ALTER TABLE a ALTER COLUMN b DROP STORED -- fully parenthetized
ALTER TABLE a ALTER COLUMN b DROP STORED -- literals removed
ALTER TABLE _ ALTER COLUMN _ DROP STORED -- identifiers removed

parse
ALTER TABLE a ALTER COLUMN b SET DATA TYPE INT8
----
ALTER TABLE a ALTER COLUMN b SET DATA TYPE INT8
ALTER TABLE a ALTER COLUMN b SET DATA TYPE INT8 -- fully parenthetized
ALTER TABLE a ALTER COLUMN b SET DATA TYPE INT8 -- literals removed
ALTER TABLE _ ALTER COLUMN _ SET DATA TYPE INT8 -- identifiers removed

parse
ALTER TABLE a ALTER b TYPE INT8
----
ALTER TABLE a ALTER COLUMN b SET DATA TYPE INT8 -- normalized!
ALTER TABLE a ALTER COLUMN b SET DATA TYPE INT8 -- fully parenthetized
ALTER TABLE a ALTER COLUMN b SET DATA TYPE INT8 -- literals removed
ALTER TABLE _ ALTER COLUMN _ SET DATA TYPE INT8 -- identifiers removed

parse
ALTER TABLE a ALTER COLUMN b SET DATA TYPE STRING COLLATE en USING b::STRING
----
ALTER TABLE a ALTER COLUMN b SET DATA TYPE STRING COLLATE en USING b::STRING
ALTER TABLE a ALTER COLUMN b SET DATA TYPE STRING COLLATE en USING ((b)::STRING) -- fully parenthetized
ALTER TABLE a ALTER COLUMN b SET DATA TYPE STRING COLLATE en USING b::STRING -- literals removed
ALTER TABLE _ ALTER COLUMN _ SET DATA TYPE STRING COLLATE en USING _::STRING -- identifiers removed

parse
ALTER TABLE a ALTER COLUMN b SET DATA TYPE DECIMAL(10)[]
----
ALTER TABLE a ALTER COLUMN b SET DATA TYPE DECIMAL(10)[]
ALTER TABLE a ALTER COLUMN b SET DATA TYPE DECIMAL(10)[] -- fully parenthetized
ALTER TABLE a ALTER COLUMN b SET DATA TYPE DECIMAL(10)[] -- literals removed
ALTER TABLE _ ALTER COLUMN _ SET DATA TYPE DECIMAL(10)[] -- identifiers removed

parse
ALTER TABLE a SET SCHEMA s
----
ALTER TABLE a SET SCHEMA s
ALTER TABLE a SET SCHEMA s -- fully parenthetized
ALTER TABLE a SET SCHEMA s -- literals removed
ALTER TABLE _ SET SCHEMA _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a SET SCHEMA s
----
ALTER TABLE IF EXISTS a SET SCHEMA s
ALTER TABLE IF EXISTS a SET SCHEMA s -- fully parenthetized
ALTER TABLE IF EXISTS a SET SCHEMA s -- literals removed
ALTER TABLE IF EXISTS _ SET SCHEMA _ -- identifiers removed

parse
ALTER TABLE a OWNER TO foo
----
ALTER TABLE a OWNER TO foo
ALTER TABLE a OWNER TO foo -- fully parenthetized
ALTER TABLE a OWNER TO foo -- literals removed
ALTER TABLE _ OWNER TO _ -- identifiers removed

parse
ALTER TABLE IF EXISTS a OWNER TO foo
----
ALTER TABLE IF EXISTS a OWNER TO foo
ALTER TABLE IF EXISTS a OWNER TO foo -- fully parenthetized
ALTER TABLE IF EXISTS a OWNER TO foo -- literals removed
ALTER TABLE IF EXISTS _ OWNER TO _ -- identifiers removed

parse
ALTER TABLE a SPLIT AT VALUES (1)
----
ALTER TABLE a SPLIT AT VALUES (1)
ALTER TABLE a SPLIT AT VALUES ((1)) -- fully parenthetized
ALTER TABLE a SPLIT AT VALUES (_) -- literals removed
ALTER TABLE _ SPLIT AT VALUES (1) -- identifiers removed

parse
EXPLAIN ALTER TABLE a SPLIT AT VALUES (1)
----
EXPLAIN ALTER TABLE a SPLIT AT VALUES (1)
EXPLAIN ALTER TABLE a SPLIT AT VALUES ((1)) -- fully parenthetized
EXPLAIN ALTER TABLE a SPLIT AT VALUES (_) -- literals removed
EXPLAIN ALTER TABLE _ SPLIT AT VALUES (1) -- identifiers removed

parse
ALTER TABLE a SPLIT AT SELECT * FROM t
----
ALTER TABLE a SPLIT AT SELECT * FROM t
ALTER TABLE a SPLIT AT SELECT (*) FROM t -- fully parenthetized
ALTER TABLE a SPLIT AT SELECT * FROM t -- literals removed
ALTER TABLE _ SPLIT AT SELECT * FROM _ -- identifiers removed

parse
ALTER TABLE d.a SPLIT AT VALUES ('b', 2)
----
ALTER TABLE d.a SPLIT AT VALUES ('b', 2)
ALTER TABLE d.a SPLIT AT VALUES (('b'), (2)) -- fully parenthetized
ALTER TABLE d.a SPLIT AT VALUES (_, _) -- literals removed
ALTER TABLE _._ SPLIT AT VALUES ('b', 2) -- identifiers removed

parse
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '1 day'
----
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '1 day'
ALTER TABLE a SPLIT AT VALUES ((1)) WITH EXPIRATION ('1 day') -- fully parenthetized
ALTER TABLE a SPLIT AT VALUES (_) WITH EXPIRATION _ -- literals removed
ALTER TABLE _ SPLIT AT VALUES (1) WITH EXPIRATION '1 day' -- identifiers removed

parse
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '1 day':::INTERVAL
----
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '1 day':::INTERVAL
ALTER TABLE a SPLIT AT VALUES ((1)) WITH EXPIRATION (('1 day'):::INTERVAL) -- fully parenthetized
ALTER TABLE a SPLIT AT VALUES (_) WITH EXPIRATION _:::INTERVAL -- literals removed
ALTER TABLE _ SPLIT AT VALUES (1) WITH EXPIRATION '1 day':::INTERVAL -- identifiers removed

parse
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '7258118400000000.0'
----
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '7258118400000000.0'
ALTER TABLE a SPLIT AT VALUES ((1)) WITH EXPIRATION ('7258118400000000.0') -- fully parenthetized
ALTER TABLE a SPLIT AT VALUES (_) WITH EXPIRATION _ -- literals removed
ALTER TABLE _ SPLIT AT VALUES (1) WITH EXPIRATION '7258118400000000.0' -- identifiers removed

parse
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '2200-01-01 00:00:00.0'
----
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '2200-01-01 00:00:00.0'
ALTER TABLE a SPLIT AT VALUES ((1)) WITH EXPIRATION ('2200-01-01 00:00:00.0') -- fully parenthetized
ALTER TABLE a SPLIT AT VALUES (_) WITH EXPIRATION _ -- literals removed
ALTER TABLE _ SPLIT AT VALUES (1) WITH EXPIRATION '2200-01-01 00:00:00.0' -- identifiers removed

parse
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION TIMESTAMP '2200-01-01 00:00:00.0'
----
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION TIMESTAMP '2200-01-01 00:00:00.0'
ALTER TABLE a SPLIT AT VALUES ((1)) WITH EXPIRATION (TIMESTAMP ('2200-01-01 00:00:00.0')) -- fully parenthetized
ALTER TABLE a SPLIT AT VALUES (_) WITH EXPIRATION TIMESTAMP _ -- literals removed
REPARSE WITHOUT LITERALS FAILS: at or near "_": syntax error
ALTER TABLE _ SPLIT AT VALUES (1) WITH EXPIRATION TIMESTAMP '2200-01-01 00:00:00.0' -- identifiers removed

parse
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '2200-01-01 00:00:00.0':::TIMESTAMP
----
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION '2200-01-01 00:00:00.0':::TIMESTAMP
ALTER TABLE a SPLIT AT VALUES ((1)) WITH EXPIRATION (('2200-01-01 00:00:00.0'):::TIMESTAMP) -- fully parenthetized
ALTER TABLE a SPLIT AT VALUES (_) WITH EXPIRATION _:::TIMESTAMP -- literals removed
ALTER TABLE _ SPLIT AT VALUES (1) WITH EXPIRATION '2200-01-01 00:00:00.0':::TIMESTAMP -- identifiers removed

parse
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION TIMESTAMPTZ '2200-01-01 00:00:00.0'
----
ALTER TABLE a SPLIT AT VALUES (1) WITH EXPIRATION TIMESTAMPTZ '2200-01-01 00:00:00.0'
ALTER TABLE a SPLIT AT VALUES ((1)) WITH EXPIRATION (TIMESTAMPTZ ('2200-01-01 00:00:00.0')) -- fully parenthetized
ALTER TABLE a SPLIT AT VALUES (_) WITH EXPIRATION TIMESTAMPTZ _ -- literals removed
REPARSE WITHOUT LITERALS FAILS: at or near "_": syntax error
ALTER TABLE _ SPLIT AT VALUES (1) WITH EXPIRATION TIMESTAMPTZ '2200-01-01 00:00:00.0' -- identifiers removed

parse
ALTER TABLE a UNSPLIT AT VALUES (1)
----
ALTER TABLE a UNSPLIT AT VALUES (1)
ALTER TABLE a UNSPLIT AT VALUES ((1)) -- fully parenthetized
ALTER TABLE a UNSPLIT AT VALUES (_) -- literals removed
ALTER TABLE _ UNSPLIT AT VALUES (1) -- identifiers removed

parse
EXPLAIN ALTER TABLE a UNSPLIT AT VALUES (1)
----
EXPLAIN ALTER TABLE a UNSPLIT AT VALUES (1)
EXPLAIN ALTER TABLE a UNSPLIT AT VALUES ((1)) -- fully parenthetized
EXPLAIN ALTER TABLE a UNSPLIT AT VALUES (_) -- literals removed
EXPLAIN ALTER TABLE _ UNSPLIT AT VALUES (1) -- identifiers removed

parse
ALTER TABLE a UNSPLIT AT SELECT * FROM t
----
ALTER TABLE a UNSPLIT AT SELECT * FROM t
ALTER TABLE a UNSPLIT AT SELECT (*) FROM t -- fully parenthetized
ALTER TABLE a UNSPLIT AT SELECT * FROM t -- literals removed
ALTER TABLE _ UNSPLIT AT SELECT * FROM _ -- identifiers removed

parse
ALTER TABLE d.a UNSPLIT AT VALUES ('b', 2)
----
ALTER TABLE d.a UNSPLIT AT VALUES ('b', 2)
ALTER TABLE d.a UNSPLIT AT VALUES (('b'), (2)) -- fully parenthetized
ALTER TABLE d.a UNSPLIT AT VALUES (_, _) -- literals removed
ALTER TABLE _._ UNSPLIT AT VALUES ('b', 2) -- identifiers removed

parse
ALTER TABLE a EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1)
----
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1], 1) -- normalized!
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS VALUES ((ARRAY[(1)]), (1)) -- fully parenthetized
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[_], _) -- literals removed
ALTER TABLE _ EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1], 1) -- identifiers removed

parse
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE TABLE b
----
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS TABLE b -- normalized!
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS TABLE b -- fully parenthetized
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS TABLE b -- literals removed
EXPLAIN ALTER TABLE _ EXPERIMENTAL_RELOCATE VOTERS TABLE _ -- identifiers removed

parse
ALTER TABLE a EXPERIMENTAL_RELOCATE SELECT * FROM t
----
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS SELECT * FROM t -- normalized!
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS SELECT (*) FROM t -- fully parenthetized
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS SELECT * FROM t -- literals removed
ALTER TABLE _ EXPERIMENTAL_RELOCATE VOTERS SELECT * FROM _ -- identifiers removed

parse
ALTER TABLE d.a EXPERIMENTAL_RELOCATE VALUES (ARRAY[1, 2, 3], 'b', 2)
----
ALTER TABLE d.a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1, 2, 3], 'b', 2) -- normalized!
ALTER TABLE d.a EXPERIMENTAL_RELOCATE VOTERS VALUES ((ARRAY[(1), (2), (3)]), ('b'), (2)) -- fully parenthetized
ALTER TABLE d.a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[_, _, __more1__], _, _) -- literals removed
ALTER TABLE _._ EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1, 2, 3], 'b', 2) -- identifiers removed

parse
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1], 1)
----
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1], 1)
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS VALUES ((ARRAY[(1)]), (1)) -- fully parenthetized
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[_], _) -- literals removed
ALTER TABLE _ EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1], 1) -- identifiers removed

parse
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS TABLE b
----
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS TABLE b
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS TABLE b -- fully parenthetized
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS TABLE b -- literals removed
EXPLAIN ALTER TABLE _ EXPERIMENTAL_RELOCATE VOTERS TABLE _ -- identifiers removed

parse
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS SELECT * FROM t
----
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS SELECT * FROM t
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS SELECT (*) FROM t -- fully parenthetized
ALTER TABLE a EXPERIMENTAL_RELOCATE VOTERS SELECT * FROM t -- literals removed
ALTER TABLE _ EXPERIMENTAL_RELOCATE VOTERS SELECT * FROM _ -- identifiers removed

parse
ALTER TABLE d.a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1, 2, 3], 'b', 2)
----
ALTER TABLE d.a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1, 2, 3], 'b', 2)
ALTER TABLE d.a EXPERIMENTAL_RELOCATE VOTERS VALUES ((ARRAY[(1), (2), (3)]), ('b'), (2)) -- fully parenthetized
ALTER TABLE d.a EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[_, _, __more1__], _, _) -- literals removed
ALTER TABLE _._ EXPERIMENTAL_RELOCATE VOTERS VALUES (ARRAY[1, 2, 3], 'b', 2) -- identifiers removed

parse
ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS VALUES (ARRAY[1], 1)
----
ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS VALUES (ARRAY[1], 1)
ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS VALUES ((ARRAY[(1)]), (1)) -- fully parenthetized
ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS VALUES (ARRAY[_], _) -- literals removed
ALTER TABLE _ EXPERIMENTAL_RELOCATE NON_VOTERS VALUES (ARRAY[1], 1) -- identifiers removed

parse
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS TABLE b
----
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS TABLE b
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS TABLE b -- fully parenthetized
EXPLAIN ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS TABLE b -- literals removed
EXPLAIN ALTER TABLE _ EXPERIMENTAL_RELOCATE NON_VOTERS TABLE _ -- identifiers removed

parse
ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS SELECT * FROM t
----
ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS SELECT * FROM t
ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS SELECT (*) FROM t -- fully parenthetized
ALTER TABLE a EXPERIMENTAL_RELOCATE NON_VOTERS SELECT * FROM t -- literals removed
ALTER TABLE _ EXPERIMENTAL_RELOCATE NON_VOTERS SELECT * FROM _ -- identifiers removed

parse
ALTER TABLE d.a EXPERIMENTAL_RELOCATE NON_VOTERS VALUES (ARRAY[1, 2, 3], 'b', 2)
----
ALTER TABLE d.a EXPERIMENTAL_RELOCATE NON_VOTERS VALUES (ARRAY[1, 2, 3], 'b', 2)
ALTER TABLE d.a EXPERIMENTAL_RELOCATE NON_VOTERS VALUES ((ARRAY[(1), (2), (3)]), ('b'), (2)) -- fully parenthetized
ALTER TABLE d.a EXPERIMENTAL_RELOCATE NON_VOTERS VALUES (ARRAY[_, _, __more1__], _, _) -- literals removed
ALTER TABLE _._ EXPERIMENTAL_RELOCATE NON_VOTERS VALUES (ARRAY[1, 2, 3], 'b', 2) -- identifiers removed

parse
ALTER TABLE a EXPERIMENTAL_RELOCATE LEASE VALUES (1, 1)
----
ALTER TABLE a EXPERIMENTAL_RELOCATE LEASE VALUES (1, 1)
ALTER TABLE a EXPERIMENTAL_RELOCATE LEASE VALUES ((1), (1)) -- fully parenthetized
ALTER TABLE a EXPERIMENTAL_RELOCATE LEASE VALUES (_, _) -- literals removed
ALTER TABLE _ EXPERIMENTAL_RELOCATE LEASE VALUES (1, 1) -- identifiers removed

parse
ALTER TABLE a EXPERIMENTAL_RELOCATE LEASE SELECT * FROM t
----
ALTER TABLE a EXPERIMENTAL_RELOCATE LEASE SELECT * FROM t
ALTER TABLE a EXPERIMENTAL_RELOCATE LEASE SELECT (*) FROM t -- fully parenthetized
ALTER TABLE a EXPERIMENTAL_RELOCATE LEASE SELECT * FROM t -- literals removed
ALTER TABLE _ EXPERIMENTAL_RELOCATE LEASE SELECT * FROM _ -- identifiers removed

parse
ALTER TABLE d.a EXPERIMENTAL_RELOCATE LEASE VALUES (1, 'b', 2)
----
ALTER TABLE d.a EXPERIMENTAL_RELOCATE LEASE VALUES (1, 'b', 2)
ALTER TABLE d.a EXPERIMENTAL_RELOCATE LEASE VALUES ((1), ('b'), (2)) -- fully parenthetized
ALTER TABLE d.a EXPERIMENTAL_RELOCATE LEASE VALUES (_, _, __more1__) -- literals removed
ALTER TABLE _._ EXPERIMENTAL_RELOCATE LEASE VALUES (1, 'b', 2) -- identifiers removed

parse
ALTER TABLE a SCATTER
----
ALTER TABLE a SCATTER
ALTER TABLE a SCATTER -- fully parenthetized
ALTER TABLE a SCATTER -- literals removed
ALTER TABLE _ SCATTER -- identifiers removed

parse
EXPLAIN ALTER TABLE a SCATTER
----
EXPLAIN ALTER TABLE a SCATTER
EXPLAIN ALTER TABLE a SCATTER -- fully parenthetized
EXPLAIN ALTER TABLE a SCATTER -- literals removed
EXPLAIN ALTER TABLE _ SCATTER -- identifiers removed

parse
ALTER TABLE a SCATTER FROM (1, 2, 3) TO (4, 5, 6)
----
ALTER TABLE a SCATTER FROM (1, 2, 3) TO (4, 5, 6)
ALTER TABLE a SCATTER FROM ((1), (2), (3)) TO ((4), (5), (6)) -- fully parenthetized
ALTER TABLE a SCATTER FROM (_, _, _) TO (_, _, _) -- literals removed
ALTER TABLE _ SCATTER FROM (1, 2, 3) TO (4, 5, 6) -- identifiers removed

parse
ALTER TABLE d.a SCATTER
----
ALTER TABLE d.a SCATTER
ALTER TABLE d.a SCATTER -- fully parenthetized
ALTER TABLE d.a SCATTER -- literals removed
ALTER TABLE _._ SCATTER -- identifiers removed

parse
ALTER TABLE db.t CONFIGURE ZONE = 'foo'
----
ALTER TABLE db.t CONFIGURE ZONE = 'foo'
ALTER TABLE db.t CONFIGURE ZONE = ('foo') -- fully parenthetized
ALTER TABLE db.t CONFIGURE ZONE = _ -- literals removed
ALTER TABLE _._ CONFIGURE ZONE = 'foo' -- identifiers removed

parse
EXPLAIN ALTER TABLE db.t CONFIGURE ZONE = 'foo'
----
EXPLAIN ALTER TABLE db.t CONFIGURE ZONE = 'foo'
EXPLAIN ALTER TABLE db.t CONFIGURE ZONE = ('foo') -- fully parenthetized
EXPLAIN ALTER TABLE db.t CONFIGURE ZONE = _ -- literals removed
EXPLAIN ALTER TABLE _._ CONFIGURE ZONE = 'foo' -- identifiers removed

parse
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE = 'foo'
----
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE = 'foo'
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE = ('foo') -- fully parenthetized
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE = _ -- literals removed
ALTER PARTITION _ OF TABLE _._ CONFIGURE ZONE = 'foo' -- identifiers removed

parse
EXPLAIN ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE = 'foo'
----
EXPLAIN ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE = 'foo'
EXPLAIN ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE = ('foo') -- fully parenthetized
EXPLAIN ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE = _ -- literals removed
EXPLAIN ALTER PARTITION _ OF TABLE _._ CONFIGURE ZONE = 'foo' -- identifiers removed

parse
ALTER TABLE t CONFIGURE ZONE = 'foo'
----
ALTER TABLE t CONFIGURE ZONE = 'foo'
ALTER TABLE t CONFIGURE ZONE = ('foo') -- fully parenthetized
ALTER TABLE t CONFIGURE ZONE = _ -- literals removed
ALTER TABLE _ CONFIGURE ZONE = 'foo' -- identifiers removed

parse
ALTER PARTITION p OF TABLE t CONFIGURE ZONE = 'foo'
----
ALTER PARTITION p OF TABLE t CONFIGURE ZONE = 'foo'
ALTER PARTITION p OF TABLE t CONFIGURE ZONE = ('foo') -- fully parenthetized
ALTER PARTITION p OF TABLE t CONFIGURE ZONE = _ -- literals removed
ALTER PARTITION _ OF TABLE _ CONFIGURE ZONE = 'foo' -- identifiers removed

parse
ALTER TABLE t CONFIGURE ZONE = b'foo'
----
ALTER TABLE t CONFIGURE ZONE = b'foo'
ALTER TABLE t CONFIGURE ZONE = (b'foo') -- fully parenthetized
ALTER TABLE t CONFIGURE ZONE = _ -- literals removed
ALTER TABLE _ CONFIGURE ZONE = b'foo' -- identifiers removed

parse
ALTER TABLE t CONFIGURE ZONE = a || b
----
ALTER TABLE t CONFIGURE ZONE = a || b
ALTER TABLE t CONFIGURE ZONE = ((a) || (b)) -- fully parenthetized
ALTER TABLE t CONFIGURE ZONE = a || b -- literals removed
ALTER TABLE _ CONFIGURE ZONE = _ || _ -- identifiers removed

parse
ALTER TABLE db.t CONFIGURE ZONE USING foo = bar, baz = yay
----
ALTER TABLE db.t CONFIGURE ZONE USING foo = bar, baz = yay
ALTER TABLE db.t CONFIGURE ZONE USING foo = (bar), baz = (yay) -- fully parenthetized
ALTER TABLE db.t CONFIGURE ZONE USING foo = bar, baz = yay -- literals removed
ALTER TABLE _._ CONFIGURE ZONE USING _ = _, _ = _ -- identifiers removed

parse
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING foo = bar, baz = yay
----
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING foo = bar, baz = yay
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING foo = (bar), baz = (yay) -- fully parenthetized
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING foo = bar, baz = yay -- literals removed
ALTER PARTITION _ OF TABLE _._ CONFIGURE ZONE USING _ = _, _ = _ -- identifiers removed

parse
ALTER TABLE t CONFIGURE ZONE USING foo = bar, baz = yay
----
ALTER TABLE t CONFIGURE ZONE USING foo = bar, baz = yay
ALTER TABLE t CONFIGURE ZONE USING foo = (bar), baz = (yay) -- fully parenthetized
ALTER TABLE t CONFIGURE ZONE USING foo = bar, baz = yay -- literals removed
ALTER TABLE _ CONFIGURE ZONE USING _ = _, _ = _ -- identifiers removed

parse
ALTER TABLE db.t CONFIGURE ZONE USING foo.bar = yay
----
ALTER TABLE db.t CONFIGURE ZONE USING "foo.bar" = yay -- normalized!
ALTER TABLE db.t CONFIGURE ZONE USING "foo.bar" = (yay) -- fully parenthetized
ALTER TABLE db.t CONFIGURE ZONE USING "foo.bar" = yay -- literals removed
ALTER TABLE _._ CONFIGURE ZONE USING _ = _ -- identifiers removed

parse
ALTER TABLE t CONFIGURE ZONE USING foo.bar = yay
----
ALTER TABLE t CONFIGURE ZONE USING "foo.bar" = yay -- normalized!
ALTER TABLE t CONFIGURE ZONE USING "foo.bar" = (yay) -- fully parenthetized
ALTER TABLE t CONFIGURE ZONE USING "foo.bar" = yay -- literals removed
ALTER TABLE _ CONFIGURE ZONE USING _ = _ -- identifiers removed

parse
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING foo = bar, baz = yay
----
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING foo = bar, baz = yay
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING foo = (bar), baz = (yay) -- fully parenthetized
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING foo = bar, baz = yay -- literals removed
ALTER PARTITION _ OF TABLE _ CONFIGURE ZONE USING _ = _, _ = _ -- identifiers removed

parse
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING foo.bar = yay
----
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING "foo.bar" = yay -- normalized!
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING "foo.bar" = (yay) -- fully parenthetized
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING "foo.bar" = yay -- literals removed
ALTER PARTITION _ OF TABLE _ CONFIGURE ZONE USING _ = _ -- identifiers removed

parse
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING foo.bar = yay
----
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING "foo.bar" = yay -- normalized!
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING "foo.bar" = (yay) -- fully parenthetized
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING "foo.bar" = yay -- literals removed
ALTER PARTITION _ OF TABLE _._ CONFIGURE ZONE USING _ = _ -- identifiers removed

parse
ALTER TABLE db.t CONFIGURE ZONE DISCARD
----
ALTER TABLE db.t CONFIGURE ZONE DISCARD
ALTER TABLE db.t CONFIGURE ZONE DISCARD -- fully parenthetized
ALTER TABLE db.t CONFIGURE ZONE DISCARD -- literals removed
ALTER TABLE _._ CONFIGURE ZONE DISCARD -- identifiers removed

parse
ALTER TABLE t CONFIGURE ZONE = NULL
----
ALTER TABLE t CONFIGURE ZONE DISCARD -- normalized!
ALTER TABLE t CONFIGURE ZONE DISCARD -- fully parenthetized
ALTER TABLE t CONFIGURE ZONE DISCARD -- literals removed
ALTER TABLE _ CONFIGURE ZONE DISCARD -- identifiers removed

parse
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE DISCARD
----
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE DISCARD
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE DISCARD -- fully parenthetized
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE DISCARD -- literals removed
ALTER PARTITION _ OF TABLE _._ CONFIGURE ZONE DISCARD -- identifiers removed

parse
ALTER TABLE t CONFIGURE ZONE DISCARD
----
ALTER TABLE t CONFIGURE ZONE DISCARD
ALTER TABLE t CONFIGURE ZONE DISCARD -- fully parenthetized
ALTER TABLE t CONFIGURE ZONE DISCARD -- literals removed
ALTER TABLE _ CONFIGURE ZONE DISCARD -- identifiers removed

parse
ALTER PARTITION p OF TABLE t CONFIGURE ZONE DISCARD
----
ALTER PARTITION p OF TABLE t CONFIGURE ZONE DISCARD
ALTER PARTITION p OF TABLE t CONFIGURE ZONE DISCARD -- fully parenthetized
ALTER PARTITION p OF TABLE t CONFIGURE ZONE DISCARD -- literals removed
ALTER PARTITION _ OF TABLE _ CONFIGURE ZONE DISCARD -- identifiers removed


parse
ALTER TABLE db.t CONFIGURE ZONE USING DEFAULT
----
ALTER TABLE db.t CONFIGURE ZONE USING DEFAULT
ALTER TABLE db.t CONFIGURE ZONE USING DEFAULT -- fully parenthetized
ALTER TABLE db.t CONFIGURE ZONE USING DEFAULT -- literals removed
ALTER TABLE _._ CONFIGURE ZONE USING DEFAULT -- identifiers removed

parse
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING DEFAULT
----
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING DEFAULT
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING DEFAULT -- fully parenthetized
ALTER PARTITION p OF TABLE db.t CONFIGURE ZONE USING DEFAULT -- literals removed
ALTER PARTITION _ OF TABLE _._ CONFIGURE ZONE USING DEFAULT -- identifiers removed

parse
ALTER TABLE t CONFIGURE ZONE USING DEFAULT
----
ALTER TABLE t CONFIGURE ZONE USING DEFAULT
ALTER TABLE t CONFIGURE ZONE USING DEFAULT -- fully parenthetized
ALTER TABLE t CONFIGURE ZONE USING DEFAULT -- literals removed
ALTER TABLE _ CONFIGURE ZONE USING DEFAULT -- identifiers removed

parse
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING DEFAULT
----
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING DEFAULT
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING DEFAULT -- fully parenthetized
ALTER PARTITION p OF TABLE t CONFIGURE ZONE USING DEFAULT -- literals removed
ALTER PARTITION _ OF TABLE _ CONFIGURE ZONE USING DEFAULT -- identifiers removed

parse
ALTER TABLE t EXPERIMENTAL_AUDIT SET READ WRITE
----
ALTER TABLE t EXPERIMENTAL_AUDIT SET READ WRITE
ALTER TABLE t EXPERIMENTAL_AUDIT SET READ WRITE -- fully parenthetized
ALTER TABLE t EXPERIMENTAL_AUDIT SET READ WRITE -- literals removed
ALTER TABLE _ EXPERIMENTAL_AUDIT SET READ WRITE -- identifiers removed

parse
EXPLAIN ALTER TABLE t EXPERIMENTAL_AUDIT SET READ WRITE
----
EXPLAIN ALTER TABLE t EXPERIMENTAL_AUDIT SET READ WRITE
EXPLAIN ALTER TABLE t EXPERIMENTAL_AUDIT SET READ WRITE -- fully parenthetized
EXPLAIN ALTER TABLE t EXPERIMENTAL_AUDIT SET READ WRITE -- literals removed
EXPLAIN ALTER TABLE _ EXPERIMENTAL_AUDIT SET READ WRITE -- identifiers removed

parse
ALTER TABLE t EXPERIMENTAL_AUDIT SET OFF
----
ALTER TABLE t EXPERIMENTAL_AUDIT SET OFF
ALTER TABLE t EXPERIMENTAL_AUDIT SET OFF -- fully parenthetized
ALTER TABLE t EXPERIMENTAL_AUDIT SET OFF -- literals removed
ALTER TABLE _ EXPERIMENTAL_AUDIT SET OFF -- identifiers removed
