// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5871

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	354, 32,
	-2, 505,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 65,
	1, 477,
	197, 477,
	241, 477,
	350, 477,
	352, 477,
	354, 477,
	-2, 487,
	-1, 111,
	1, 480,
	197, 480,
	241, 480,
	350, 480,
	352, 480,
	354, 480,
	-2, 486,
	-1, 129,
	1, 32,
	354, 32,
	-2, 505,
	-1, 510,
	122, 1086,
	293, 1086,
	336, 1086,
	353, 1086,
	-2, 0,
	-1, 521,
	1, 214,
	354, 214,
	-2, 1091,
	-1, 533,
	111, 515,
	170, 515,
	195, 515,
	-2, 483,
	-1, 541,
	111, 514,
	170, 514,
	195, 514,
	-2, 481,
	-1, 689,
	351, 1018,
	-2, 1011,
	-1, 690,
	351, 1019,
	-2, 1012,
	-1, 696,
	5, 685,
	351, 685,
	-2, 1216,
	-1, 721,
	5, 644,
	-2, 1186,
	-1, 722,
	5, 679,
	351, 679,
	-2, 1188,
	-1, 723,
	5, 654,
	-2, 1189,
	-1, 724,
	5, 653,
	-2, 1190,
	-1, 725,
	5, 679,
	351, 679,
	-2, 1193,
	-1, 726,
	5, 679,
	351, 679,
	-2, 1194,
	-1, 727,
	5, 680,
	-2, 1197,
	-1, 728,
	5, 636,
	-2, 1198,
	-1, 729,
	5, 636,
	-2, 1199,
	-1, 730,
	5, 661,
	-2, 1203,
	-1, 731,
	5, 646,
	-2, 1204,
	-1, 732,
	5, 647,
	-2, 1205,
	-1, 733,
	5, 637,
	-2, 1210,
	-1, 734,
	5, 638,
	-2, 1211,
	-1, 735,
	5, 639,
	-2, 1212,
	-1, 736,
	5, 640,
	-2, 1213,
	-1, 737,
	5, 641,
	-2, 1214,
	-1, 738,
	5, 642,
	-2, 1215,
	-1, 739,
	5, 636,
	-2, 1220,
	-1, 740,
	5, 645,
	-2, 1225,
	-1, 741,
	5, 643,
	-2, 1228,
	-1, 742,
	5, 677,
	351, 677,
	-2, 1230,
	-1, 743,
	5, 681,
	-2, 1233,
	-1, 744,
	5, 683,
	-2, 1234,
	-1, 745,
	5, 676,
	351, 676,
	-2, 1239,
	-1, 788,
	211, 503,
	-2, 377,
	-1, 793,
	111, 514,
	170, 514,
	195, 514,
	-2, 484,
	-1, 957,
	102, 487,
	111, 487,
	151, 487,
	170, 487,
	195, 487,
	201, 487,
	304, 487,
	-2, 804,
	-1, 966,
	351, 995,
	-2, 983,
	-1, 1237,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 720,
	-1, 1238,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 721,
	-1, 1239,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 722,
	-1, 1243,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 726,
	-1, 1244,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 727,
	-1, 1245,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 728,
	-1, 1248,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 733,
	-1, 1254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 735,
	-1, 1256,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 739,
	-1, 1257,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 740,
	-1, 1258,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 741,
	-1, 1259,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 742,
	-1, 1285,
	206, 877,
	-2, 880,
	-1, 1322,
	122, 917,
	351, 1018,
	-2, 1011,
	-1, 1323,
	122, 918,
	-2, 1182,
	-1, 1324,
	122, 919,
	-2, 1090,
	-1, 1325,
	122, 920,
	-2, 1054,
	-1, 1326,
	122, 921,
	-2, 1071,
	-1, 1327,
	122, 922,
	-2, 1089,
	-1, 1328,
	122, 923,
	-2, 1141,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 734,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 736,
	-1, 1514,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 737,
	-1, 1532,
	206, 876,
	-2, 879,
	-1, 1711,
	102, 487,
	111, 487,
	151, 487,
	170, 487,
	195, 487,
	201, 487,
	304, 487,
	-2, 571,
	-1, 1731,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 738,
	-1, 1736,
	154, 0,
	-2, 754,
	-1, 1746,
	206, 878,
	-2, 881,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 781,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 782,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 783,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 787,
	-1, 1795,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 788,
	-1, 1796,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 789,
	-1, 1902,
	1, 572,
	70, 572,
	102, 572,
	111, 572,
	123, 572,
	127, 572,
	129, 572,
	142, 572,
	151, 572,
	158, 572,
	167, 572,
	170, 572,
	182, 572,
	195, 572,
	197, 572,
	201, 572,
	241, 572,
	243, 572,
	304, 572,
	312, 572,
	323, 572,
	324, 572,
	333, 572,
	350, 572,
	352, 572,
	354, 572,
	355, 572,
	-2, 571,
	-1, 1915,
	154, 0,
	-2, 755,
	-1, 1918,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 758,
	-1, 1919,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 760,
	-1, 2046,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 759,
	-1, 2047,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 761,
	-1, 2054,
	154, 0,
	-2, 790,
	-1, 2135,
	154, 0,
	-2, 791,
	-1, 2216,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1185,
}

const sqlPrivate = 57344

const sqlLast = 31467

var sqlAct = [...]int{

	690, 1822, 2215, 2223, 2188, 2224, 2261, 2073, 2225, 1196,
	1092, 1765, 2214, 1204, 542, 392, 2105, 2038, 1982, 1897,
	1898, 2026, 1384, 1845, 1099, 1007, 1706, 64, 1953, 1709,
	1968, 1649, 1651, 680, 1425, 1470, 616, 138, 138, 1829,
	666, 138, 2013, 1388, 2007, 1406, 1598, 1490, 138, 634,
	1383, 1876, 888, 1697, 1396, 1439, 138, 1387, 1597, 394,
	1885, 138, 1828, 1351, 138, 1543, 1216, 138, 1095, 1308,
	962, 1283, 877, 870, 138, 1469, 1484, 1205, 1692, 1157,
	1188, 1087, 1159, 688, 1130, 1475, 767, 368, 1421, 1081,
	1430, 1293, 1271, 139, 660, 1268, 366, 376, 23, 892,
	1348, 871, 557, 889, 766, 1391, 800, 1302, 1472, 560,
	1319, 953, 561, 647, 659, 566, 549, 109, 687, 520,
	1179, 608, 130, 138, 138, 1198, 795, 518, 498, 138,
	809, 1079, 802, 138, 138, 111, 993, 112, 810, 808,
	552, 547, 682, 854, 997, 1969, 896, 384, 516, 642,
	134, 606, 395, 853, 814, 514, 625, 1531, 502, 2116,
	349, 2247, 2117, 1089, 885, 665, 1089, 1089, 1197, 2237,
	1201, 546, 1212, 109, 1305, 546, 2236, 2234, 541, 1212,
	1967, 2232, 2210, 2207, 885, 885, 885, 2184, 1707, 2174,
	1366, 1704, 885, 2147, 2137, 501, 1967, 1366, 2130, 2125,
	1501, 885, 2124, 1502, 550, 1661, 350, 121, 567, 2112,
	2088, 2085, 2113, 1967, 885, 2084, 2083, 2071, 1967, 885,
	1967, 1306, 1189, 1181, 1113, 908, 909, 23, 928, 929,
	930, 938, 939, 940, 1189, 2048, 124, 618, 1366, 2029,
	1212, 931, 1212, 1008, 1695, 534, 109, 533, 911, 2004,
	2164, 942, 1212, 108, 908, 909, 1192, 928, 929, 930,
	938, 939, 940, 1192, 128, 2003, 1307, 1304, 1212, 1695,
	931, 1180, 910, 1966, 569, 610, 1967, 911, 925, 1942,
	942, 110, 1212, 1920, 1917, 1437, 1212, 1366, 55, 1740,
	56, 1662, 1212, 1729, 619, 1724, 1195, 1801, 1195, 1632,
	127, 910, 885, 1615, 1743, 885, 1616, 925, 122, 1613,
	1612, 1633, 1212, 1212, 58, 123, 1611, 1535, 1534, 1212,
	1424, 1532, 1536, 1212, 1212, 1212, 1380, 1466, 1372, 1542,
	885, 1212, 916, 1365, 113, 124, 1366, 1211, 1970, 1194,
	1212, 1309, 1195, 1186, 904, 1063, 1185, 905, 1287, 866,
	623, 935, 943, 651, 1090, 138, 615, 1090, 1090, 563,
	138, 916, 129, 128, 629, 2021, 124, 1710, 566, 941,
	1085, 781, 2239, 2230, 2213, 2195, 2132, 2086, 1947, 121,
	935, 943, 1943, 1935, 933, 1934, 1933, 821, 1929, 1928,
	926, 1927, 1926, 1909, 128, 547, 1902, 1875, 941, 127,
	1821, 1816, 1811, 1810, 1809, 1751, 1636, 122, 1631, 880,
	1620, 1617, 1605, 933, 123, 932, 1708, 970, 1303, 926,
	1596, 1567, 1564, 1563, 1561, 108, 1548, 1547, 1480, 1316,
	127, 1315, 1314, 1200, 631, 821, 1501, 124, 121, 1279,
	1370, 963, 820, 113, 932, 1098, 1767, 115, 2185, 2163,
	2162, 2155, 2238, 110, 2149, 2145, 1180, 2123, 908, 909,
	55, 567, 56, 927, 113, 128, 1819, 2120, 643, 2127,
	1111, 2108, 2068, 1106, 1088, 2056, 2045, 2031, 1973, 936,
	648, 911, 1965, 1940, 108, 1906, 58, 1890, 1843, 1841,
	1840, 1839, 927, 1836, 1826, 1735, 1685, 633, 1683, 1637,
	138, 127, 1640, 1595, 1557, 910, 1556, 1553, 936, 122,
	1528, 1523, 110, 1273, 138, 1465, 123, 998, 1001, 55,
	1358, 56, 566, 1313, 138, 619, 1091, 1005, 138, 138,
	138, 991, 138, 990, 989, 113, 988, 138, 138, 138,
	138, 138, 987, 986, 1280, 58, 934, 1908, 794, 922,
	923, 924, 937, 985, 921, 919, 920, 912, 913, 914,
	915, 917, 918, 806, 984, 916, 776, 983, 982, 981,
	1944, 980, 566, 979, 978, 934, 977, 976, 922, 923,
	924, 937, 975, 921, 919, 920, 912, 913, 914, 915,
	917, 918, 974, 967, 1568, 1569, 2187, 956, 113, 793,
	617, 869, 138, 138, 138, 138, 138, 761, 138, 124,
	753, 777, 645, 1432, 2115, 567, 2018, 963, 1637, 115,
	1949, 138, 1948, 566, 138, 1922, 1891, 1623, 1622, 954,
	394, 566, 783, 138, 629, 908, 909, 128, 1568, 1569,
	138, 138, 138, 880, 138, 886, 2118, 786, 774, 789,
	1652, 138, 875, 1912, 1503, 1189, 797, 797, 911, 765,
	1167, 1003, 757, 632, 798, 567, 1004, 1710, 124, 762,
	1619, 1618, 1146, 127, 827, 826, 1568, 1569, 115, 1507,
	1165, 122, 910, 894, 773, 534, 874, 533, 123, 619,
	758, 775, 547, 1069, 564, 1420, 128, 1166, 972, 817,
	818, 1574, 1096, 1419, 803, 1485, 2008, 113, 1197, 902,
	2019, 858, 1768, 1539, 864, 1294, 567, 994, 1073, 1072,
	1497, 563, 558, 395, 567, 827, 883, 1859, 959, 825,
	857, 683, 127, 827, 2201, 2254, 861, 774, 849, 1160,
	122, 1161, 2129, 2253, 1997, 1568, 1569, 123, 643, 1628,
	855, 1373, 595, 844, 880, 545, 138, 596, 2103, 867,
	604, 138, 601, 969, 531, 600, 113, 2102, 860, 803,
	2101, 619, 2100, 906, 884, 566, 566, 850, 1874, 1873,
	775, 1397, 394, 1574, 1856, 1855, 881, 1552, 898, 895,
	356, 138, 914, 915, 917, 918, 1551, 1086, 893, 907,
	1097, 539, 1076, 1550, 544, 619, 897, 897, 1441, 1818,
	1549, 1568, 1569, 1510, 1870, 1162, 1441, 603, 1463, 1462,
	1460, 966, 1440, 1070, 1255, 1060, 1215, 1160, 856, 1161,
	138, 622, 1905, 1362, 138, 1361, 138, 138, 138, 138,
	138, 138, 357, 1226, 1407, 1160, 138, 1161, 1399, 1154,
	138, 138, 1574, 1155, 546, 524, 1717, 138, 538, 2075,
	1102, 2128, 995, 996, 1270, 1719, 1051, 138, 567, 567,
	138, 1270, 1487, 890, 999, 395, 1136, 1105, 1057, 1171,
	1108, 2264, 1110, 138, 1002, 1077, 138, 760, 1059, 1277,
	2178, 899, 1178, 1309, 1275, 1170, 360, 1334, 830, 1861,
	138, 2244, 138, 1162, 1422, 1423, 566, 1082, 1062, 1058,
	1584, 394, 2181, 1491, 1075, 1168, 1074, 846, 1574, 1690,
	1687, 1162, 1761, 2152, 1174, 841, 1225, 1495, 1572, 1573,
	1575, 1576, 1169, 1305, 1104, 831, 2182, 1294, 829, 1173,
	1147, 1117, 2227, 992, 746, 1629, 1398, 1402, 1116, 1134,
	534, 2253, 1126, 534, 534, 1127, 1128, 543, 1140, 602,
	109, 1137, 842, 527, 1141, 1142, 1143, 1144, 1145, 1191,
	1758, 1491, 918, 2259, 2052, 1576, 1584, 1151, 1152, 1089,
	1306, 2060, 847, 1585, 951, 1156, 1555, 532, 1176, 1886,
	1627, 1153, 528, 546, 1199, 1184, 1199, 1309, 605, 567,
	537, 1213, 529, 396, 395, 748, 359, 358, 1570, 1571,
	1572, 1573, 1575, 1576, 1901, 1759, 894, 2262, 648, 1214,
	1284, 109, 2243, 121, 1203, 1307, 1304, 1288, 2228, 540,
	1718, 1296, 1447, 1163, 1291, 848, 525, 813, 1850, 536,
	1681, 1376, 1868, 1321, 1321, 1332, 2226, 1343, 1187, 1585,
	1438, 2252, 1378, 1355, 1356, 1357, 564, 559, 1158, 568,
	2250, 1981, 1862, 1404, 1281, 1208, 1278, 812, 2076, 108,
	835, 1483, 2263, 1379, 1579, 1577, 1578, 1570, 1571, 1572,
	1573, 1575, 1576, 755, 2229, 1377, 394, 1252, 361, 138,
	1309, 1329, 138, 2265, 1364, 650, 1938, 110, 770, 138,
	1309, 1381, 526, 382, 55, 2272, 56, 138, 138, 1797,
	138, 1512, 138, 138, 394, 138, 138, 2095, 1269, 2094,
	2242, 1163, 1369, 109, 2066, 2142, 811, 1858, 362, 1414,
	58, 1672, 1668, 1405, 138, 1103, 1276, 1068, 1416, 1163,
	138, 1577, 1578, 1570, 1571, 1572, 1573, 1575, 1576, 1093,
	385, 813, 1217, 1224, 138, 138, 138, 363, 2027, 364,
	1757, 138, 1993, 771, 2260, 138, 2189, 772, 1374, 1122,
	1090, 1150, 390, 138, 675, 1064, 138, 1303, 386, 395,
	1066, 504, 138, 394, 999, 1846, 1002, 1250, 1253, 1467,
	996, 995, 1067, 566, 1478, 1939, 138, 1382, 1477, 505,
	1983, 138, 1798, 138, 1442, 387, 2271, 395, 1799, 2067,
	138, 135, 135, 747, 1642, 351, 138, 1448, 1450, 1413,
	1249, 1641, 353, 2028, 389, 1996, 1409, 797, 547, 797,
	365, 1418, 1995, 812, 1410, 495, 1411, 1428, 500, 1123,
	2016, 500, 1881, 1880, 1412, 1433, 1493, 496, 522, 494,
	770, 1499, 641, 124, 619, 640, 544, 1961, 1479, 506,
	1954, 1992, 790, 115, 1455, 109, 1445, 1458, 1952, 1823,
	1950, 1696, 1956, 1453, 1482, 1520, 395, 803, 803, 908,
	909, 128, 1468, 131, 1464, 636, 567, 1435, 635, 1877,
	1518, 1962, 811, 3, 2064, 827, 1486, 609, 609, 1429,
	1496, 547, 911, 351, 2055, 1461, 1506, 135, 626, 1504,
	1693, 1541, 568, 1955, 1312, 1251, 1937, 127, 2065, 1434,
	803, 1436, 1599, 1600, 1700, 122, 910, 380, 31, 1734,
	619, 1994, 123, 1716, 388, 1266, 1700, 1526, 803, 1562,
	1522, 619, 1488, 1703, 1529, 1459, 1513, 1473, 1511, 1456,
	1264, 113, 379, 30, 1371, 1703, 374, 27, 507, 1698,
	1515, 1489, 1545, 1546, 504, 1193, 893, 547, 1701, 1527,
	1516, 1884, 138, 852, 1521, 893, 851, 845, 840, 839,
	1701, 566, 505, 1699, 1538, 838, 916, 837, 391, 836,
	1957, 1311, 1958, 138, 833, 138, 138, 695, 2015, 639,
	378, 17, 138, 1594, 630, 138, 372, 13, 1148, 138,
	750, 1139, 594, 973, 1607, 843, 624, 1635, 2222, 1638,
	1260, 627, 1960, 621, 628, 2186, 1991, 1866, 1261, 138,
	1262, 1963, 1864, 1857, 1267, 1648, 508, 1408, 1401, 138,
	138, 138, 506, 1175, 1702, 138, 1602, 1603, 1604, 138,
	138, 138, 138, 138, 373, 16, 1702, 31, 1172, 1164,
	1626, 138, 1625, 138, 138, 1115, 568, 509, 1114, 385,
	1630, 375, 14, 1961, 567, 371, 12, 138, 1112, 1109,
	1517, 1107, 30, 1748, 1650, 1014, 27, 1519, 1669, 2040,
	1426, 390, 1654, 1655, 815, 1656, 2254, 386, 1643, 613,
	1084, 1646, 138, 138, 547, 1078, 1657, 1962, 1959, 1659,
	1725, 2042, 1713, 2014, 1452, 1723, 568, 1663, 377, 10,
	1664, 1644, 1441, 381, 387, 2159, 370, 8, 1451, 637,
	17, 597, 598, 1680, 351, 1970, 13, 832, 908, 909,
	1263, 507, 1722, 389, 121, 369, 4, 1265, 1441, 1737,
	1694, 1427, 1682, 1691, 1449, 1684, 138, 1714, 1715, 1753,
	1754, 1755, 1712, 2134, 1878, 1720, 816, 568, 1705, 819,
	1647, 614, 1457, 1454, 396, 568, 1728, 2165, 1727, 1726,
	1979, 1403, 109, 1400, 16, 910, 497, 1202, 109, 1177,
	108, 1061, 1741, 1006, 1660, 1368, 2257, 2270, 1568, 1569,
	2209, 14, 2168, 1744, 1665, 12, 1957, 1747, 1958, 2024,
	1621, 912, 913, 914, 915, 917, 918, 503, 110, 508,
	1760, 1762, 1763, 1769, 1774, 55, 1771, 56, 1924, 1689,
	1634, 908, 909, 1820, 138, 1776, 1817, 138, 1960, 1764,
	1014, 1014, 1473, 823, 1804, 908, 909, 1963, 10, 138,
	509, 58, 566, 388, 911, 1842, 8, 1805, 1624, 1802,
	1614, 1827, 394, 138, 823, 822, 1363, 1208, 1473, 1360,
	1812, 1835, 1359, 1301, 756, 4, 960, 1853, 910, 824,
	2177, 2039, 1756, 1847, 1645, 970, 968, 759, 522, 523,
	1634, 1824, 2074, 383, 1837, 1852, 138, 1138, 351, 138,
	834, 2020, 522, 788, 522, 1889, 791, 391, 394, 2180,
	138, 522, 522, 351, 804, 626, 1930, 566, 1554, 568,
	568, 1834, 1849, 1893, 1959, 2104, 396, 2051, 1310, 971,
	48, 1879, 1831, 669, 1882, 1951, 1892, 1869, 1825, 749,
	1390, 1389, 397, 1071, 691, 567, 551, 1871, 1320, 1872,
	1218, 751, 693, 1883, 1848, 395, 1833, 1011, 1865, 1045,
	1867, 1916, 1887, 1888, 694, 692, 1903, 1012, 138, 1904,
	903, 1000, 1896, 1911, 124, 681, 500, 351, 351, 863,
	351, 1009, 609, 646, 115, 1206, 1274, 1292, 1537, 964,
	661, 673, 672, 1289, 752, 351, 2025, 1494, 135, 1907,
	1121, 395, 128, 1217, 1772, 1417, 1118, 351, 1863, 530,
	567, 1565, 1217, 1777, 351, 351, 351, 644, 900, 827,
	1341, 1936, 1910, 1333, 1330, 135, 782, 876, 952, 1207,
	780, 1500, 1367, 868, 1129, 612, 611, 138, 127, 1385,
	778, 138, 138, 1065, 1375, 1808, 122, 945, 566, 944,
	568, 599, 2144, 123, 769, 396, 138, 138, 138, 1974,
	1835, 1473, 1971, 1977, 1473, 138, 1696, 138, 768, 138,
	138, 138, 367, 1835, 138, 138, 1094, 1835, 1671, 1984,
	2258, 138, 138, 2158, 1860, 138, 2200, 126, 1987, 1964,
	125, 2126, 1978, 138, 2037, 1986, 1481, 72, 29, 28,
	138, 1990, 1976, 91, 90, 89, 1980, 653, 88, 138,
	1834, 87, 2023, 86, 1045, 1045, 2011, 2012, 85, 1700,
	2017, 2022, 84, 1834, 83, 82, 81, 1834, 80, 79,
	135, 2041, 2032, 78, 77, 522, 76, 75, 1703, 2035,
	2050, 567, 2010, 74, 519, 1833, 2034, 71, 2033, 2043,
	1985, 70, 69, 138, 1698, 394, 138, 68, 1833, 26,
	22, 94, 1833, 1701, 138, 1101, 2057, 1044, 21, 20,
	2062, 394, 25, 24, 18, 15, 9, 19, 1699, 53,
	54, 52, 138, 51, 50, 566, 2079, 11, 46, 45,
	44, 43, 138, 42, 41, 7, 93, 39, 38, 1835,
	6, 1835, 92, 2078, 522, 5, 2080, 2077, 522, 138,
	135, 522, 522, 522, 522, 522, 2090, 138, 2092, 894,
	1149, 105, 102, 138, 522, 522, 1568, 1569, 2072, 104,
	396, 500, 138, 138, 2000, 2093, 101, 2082, 103, 1702,
	2006, 609, 2114, 138, 626, 2111, 1473, 1473, 395, 1834,
	1473, 1834, 2110, 2122, 2121, 2107, 106, 351, 396, 2119,
	1190, 138, 98, 99, 395, 138, 2133, 100, 97, 96,
	35, 34, 33, 547, 351, 2148, 1210, 2087, 567, 2146,
	2098, 2099, 2136, 32, 1833, 2, 1833, 2091, 2153, 2141,
	2140, 566, 1, 0, 0, 0, 2154, 2151, 1014, 0,
	0, 138, 138, 0, 0, 0, 0, 908, 909, 138,
	0, 0, 2150, 0, 1568, 1569, 2157, 0, 1014, 394,
	138, 138, 1044, 1044, 0, 0, 0, 396, 0, 2070,
	911, 2166, 0, 1574, 2170, 0, 0, 568, 2169, 2172,
	2179, 2167, 2176, 2173, 0, 0, 138, 2089, 2191, 0,
	138, 1013, 0, 138, 910, 2192, 2197, 0, 0, 0,
	394, 0, 0, 0, 1047, 138, 1524, 1525, 138, 0,
	0, 0, 2193, 908, 909, 2202, 2199, 2206, 1014, 138,
	0, 2205, 1473, 0, 567, 2194, 138, 2175, 2208, 1835,
	2211, 1584, 2212, 2156, 2231, 2220, 911, 0, 2183, 0,
	0, 0, 0, 0, 0, 0, 0, 2233, 2221, 0,
	0, 0, 395, 0, 916, 0, 0, 0, 2198, 2241,
	910, 1574, 2240, 138, 0, 0, 2203, 2204, 0, 0,
	0, 2251, 0, 2249, 1591, 1592, 1593, 0, 2255, 1834,
	0, 2097, 2256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 395, 0, 1014, 0, 0, 2268, 2267,
	2269, 2266, 0, 351, 1585, 652, 1386, 754, 0, 0,
	0, 0, 926, 626, 1833, 670, 65, 0, 0, 1584,
	916, 522, 522, 0, 522, 0, 351, 351, 0, 1415,
	626, 1014, 1014, 0, 0, 0, 784, 785, 0, 0,
	1014, 1014, 0, 0, 0, 0, 1013, 1013, 351, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 2196, 1047,
	1047, 0, 0, 0, 0, 568, 0, 0, 351, 351,
	351, 0, 65, 1014, 0, 1446, 0, 0, 926, 351,
	0, 0, 0, 0, 1208, 927, 0, 351, 0, 0,
	351, 0, 1585, 0, 0, 0, 351, 1578, 1570, 1571,
	1572, 1573, 1575, 1576, 0, 0, 0, 0, 0, 0,
	351, 0, 1045, 0, 0, 351, 0, 1498, 0, 0,
	0, 0, 872, 872, 351, 535, 0, 0, 878, 548,
	1431, 0, 1045, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 1732,
	1733, 927, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 947, 948, 949, 950,
	0, 0, 0, 0, 0, 958, 921, 919, 920, 912,
	913, 914, 915, 917, 918, 965, 1570, 1571, 1572, 1573,
	1575, 1576, 1045, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 0, 1800, 0,
	0, 0, 0, 1046, 0, 0, 0, 908, 909, 0,
	0, 0, 0, 919, 920, 912, 913, 914, 915, 917,
	918, 0, 0, 0, 0, 908, 909, 0, 0, 1010,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 0, 0, 0, 0, 911, 0,
	0, 0, 0, 0, 910, 0, 1431, 0, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 1045, 1045, 1101, 0, 1101,
	1639, 908, 909, 0, 1045, 1045, 522, 0, 0, 351,
	1044, 0, 1119, 1653, 1124, 0, 0, 0, 0, 0,
	1131, 0, 0, 0, 911, 0, 568, 0, 0, 0,
	1044, 0, 0, 351, 916, 0, 396, 1045, 0, 0,
	0, 0, 0, 351, 1666, 1667, 0, 0, 910, 1446,
	0, 0, 916, 1673, 1674, 1676, 1678, 1679, 0, 0,
	0, 0, 0, 0, 0, 1686, 0, 1688, 351, 0,
	0, 0, 0, 548, 0, 0, 0, 0, 1046, 1046,
	0, 351, 396, 0, 0, 0, 0, 0, 0, 0,
	1044, 568, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 1010, 1010, 351, 351, 916, 0,
	926, 0, 0, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 0, 1254, 0, 1256, 1257,
	1258, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1125, 0, 0, 0, 1282, 0, 0, 0, 1014,
	1766, 0, 0, 0, 0, 927, 926, 1044, 0, 0,
	0, 1045, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 1331, 927, 1342, 1344, 1349, 1352, 1353, 1354,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 1044, 0, 0, 1047, 0, 0,
	0, 0, 1044, 1044, 1013, 0, 0, 0, 1014, 0,
	0, 0, 568, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 927,
	0, 1101, 1830, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 1844, 0, 535, 921, 919, 920, 912,
	913, 914, 915, 917, 918, 2054, 0, 1854, 0, 0,
	0, 0, 0, 0, 1013, 0, 920, 912, 913, 914,
	915, 917, 918, 0, 0, 0, 0, 1047, 0, 0,
	2069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 0, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1900, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 0, 912, 913, 914, 915, 917, 918, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 0, 0,
	0, 1013, 1568, 1569, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 1047, 0, 0, 0, 955, 0,
	957, 0, 1931, 0, 0, 0, 1045, 961, 0, 1044,
	0, 872, 0, 2135, 0, 0, 878, 1013, 1013, 0,
	0, 0, 0, 0, 0, 0, 1013, 1013, 1492, 0,
	1047, 1047, 0, 0, 0, 1583, 0, 0, 0, 1047,
	1047, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 1830, 0, 1045, 0, 0, 0, 0, 0, 0,
	0, 626, 1047, 0, 1830, 626, 1386, 0, 1830, 0,
	1508, 1509, 0, 0, 0, 0, 1514, 0, 0, 1574,
	1988, 1989, 1446, 0, 0, 568, 0, 0, 0, 1998,
	0, 1999, 0, 351, 2001, 2002, 0, 0, 2005, 351,
	0, 0, 0, 0, 0, 351, 351, 0, 1533, 351,
	0, 0, 1045, 396, 0, 1540, 0, 1900, 1544, 0,
	0, 0, 0, 0, 2030, 0, 0, 0, 0, 0,
	2036, 0, 0, 626, 1558, 0, 0, 1584, 0, 0,
	535, 0, 0, 535, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 0, 1046, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 1349, 1349, 1349, 65,
	0, 0, 0, 0, 0, 0, 1046, 2061, 0, 0,
	2063, 0, 1010, 1013, 0, 0, 0, 0, 351, 0,
	1830, 0, 1830, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 1010, 0, 1044, 0, 351, 0, 0, 0,
	1585, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 65, 0, 65, 0, 1335, 1335, 0, 0,
	65, 0, 0, 2106, 0, 0, 1046, 0, 0, 0,
	1658, 351, 0, 0, 0, 1131, 0, 1900, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 1900, 0, 0,
	0, 1044, 1010, 0, 0, 0, 0, 2131, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2139, 0, 0, 0, 1101,
	0, 0, 0, 0, 1335, 1335, 1335, 0, 0, 0,
	0, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575, 1576,
	0, 0, 872, 1046, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 878, 2160, 2161, 0, 1730, 0,
	0, 1731, 65, 626, 0, 0, 0, 1568, 1569, 1010,
	1586, 1587, 1588, 1736, 1900, 626, 0, 0, 0, 1046,
	1046, 0, 1745, 1914, 0, 0, 0, 0, 1046, 1046,
	1749, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	2190, 0, 0, 0, 626, 1010, 1010, 351, 0, 0,
	1830, 0, 0, 1773, 1010, 1010, 0, 1775, 1013, 2106,
	1583, 1046, 1900, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 0, 351, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 1010, 0, 0,
	1806, 1807, 0, 0, 0, 0, 0, 0, 0, 1813,
	1814, 1815, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1574, 1013, 0, 2248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 1838, 0, 0, 0, 0, 0, 0, 0, 1335,
	1335, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 1589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 1584, 0, 1013, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 1046, 548, 0, 1335, 1335,
	1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
	1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 1335, 0,
	0, 1010, 0, 0, 0, 1915, 0, 0, 0, 1918,
	1919, 0, 0, 0, 1921, 0, 0, 0, 0, 0,
	0, 1923, 0, 1925, 0, 1585, 0, 908, 909, 1272,
	928, 929, 930, 938, 939, 940, 0, 0, 0, 1932,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 957,
	911, 0, 0, 942, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 0, 0,
	0, 931, 1941, 0, 910, 0, 0, 0, 911, 0,
	925, 942, 0, 908, 909, 0, 928, 929, 930, 938,
	939, 940, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 910, 1972, 0, 0, 911, 0, 925, 942,
	0, 1580, 1581, 1582, 0, 957, 1579, 1577, 1578, 1570,
	1571, 1572, 1573, 1575, 1576, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 916, 0, 925, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2009, 0,
	0, 0, 0, 935, 943, 0, 0, 0, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 65, 0, 0, 65,
	1046, 935, 943, 0, 2046, 2047, 933, 0, 0, 0,
	916, 0, 926, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 935,
	943, 0, 0, 0, 933, 2059, 0, 932, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	65, 0, 0, 65, 0, 0, 0, 1046, 0, 0,
	0, 65, 933, 0, 0, 932, 0, 65, 926, 0,
	0, 0, 1711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 0, 927, 2096, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 1474, 0,
	0, 936, 0, 0, 0, 0, 2109, 0, 0, 0,
	0, 0, 0, 927, 0, 0, 1046, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 878, 0, 908, 909,
	0, 927, 1010, 0, 938, 939, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 2143,
	0, 911, 0, 0, 942, 1335, 0, 0, 934, 0,
	0, 922, 923, 924, 937, 0, 921, 919, 920, 912,
	913, 914, 915, 917, 918, 910, 0, 0, 0, 0,
	1335, 925, 1610, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 937, 0, 921, 919, 920, 912, 913, 914,
	915, 917, 918, 0, 0, 0, 0, 0, 1568, 1569,
	1609, 1586, 1587, 1588, 934, 0, 0, 922, 923, 924,
	937, 0, 921, 919, 920, 912, 913, 914, 915, 917,
	918, 0, 0, 0, 0, 916, 0, 0, 1608, 0,
	0, 0, 908, 909, 0, 928, 929, 930, 938, 939,
	940, 0, 0, 0, 935, 943, 0, 0, 931, 0,
	0, 1583, 2219, 2219, 0, 911, 0, 0, 942, 0,
	0, 0, 0, 1335, 1568, 1569, 0, 1586, 1587, 1588,
	0, 1474, 2235, 0, 1474, 0, 0, 933, 0, 910,
	1913, 0, 0, 926, 0, 925, 0, 2219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 0, 0, 0, 1574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1583, 0, 0,
	0, 0, 0, 0, 0, 1590, 0, 0, 2219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 1589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 935, 943,
	0, 0, 0, 1584, 0, 0, 0, 0, 0, 0,
	0, 1574, 936, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 1584,
	0, 0, 0, 0, 0, 0, 1585, 0, 0, 934,
	0, 0, 0, 0, 0, 937, 0, 921, 919, 920,
	912, 913, 914, 915, 917, 918, 1474, 1474, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 2044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1580, 1581, 1582, 0, 0, 1579, 1577, 1578,
	1570, 1571, 1572, 1573, 1575, 1576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 65, 922, 923, 924, 937,
	0, 921, 919, 920, 912, 913, 914, 915, 917, 918,
	0, 0, 0, 0, 0, 0, 0, 1560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1580, 1581,
	1582, 0, 1474, 1579, 1577, 1578, 1570, 1571, 1572, 1573,
	1575, 1576, 0, 0, 0, 0, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 140, 141, 412, 142, 413, 414, 415, 416,
	293, 417, 418, 419, 420, 143, 144, 145, 294, 295,
	296, 297, 146, 298, 299, 421, 147, 300, 301, 148,
	149, 422, 423, 302, 303, 304, 424, 150, 305, 425,
	398, 426, 151, 152, 153, 0, 154, 427, 155, 156,
	157, 428, 399, 158, 159, 429, 430, 432, 431, 433,
	434, 435, 160, 161, 352, 162, 306, 163, 307, 308,
	436, 164, 437, 165, 438, 166, 439, 440, 167, 168,
	441, 169, 442, 0, 443, 309, 170, 171, 172, 310,
	311, 444, 445, 446, 173, 174, 312, 313, 314, 0,
	175, 447, 176, 448, 449, 400, 450, 177, 315, 451,
	316, 452, 178, 179, 180, 181, 317, 318, 402, 453,
	185, 454, 182, 455, 401, 183, 319, 184, 320, 321,
	322, 323, 324, 456, 325, 457, 403, 186, 187, 188,
	404, 189, 190, 191, 458, 193, 192, 459, 326, 405,
	194, 406, 460, 195, 461, 462, 196, 0, 197, 198,
	199, 201, 327, 200, 407, 202, 203, 205, 204, 463,
	464, 465, 328, 206, 329, 207, 208, 466, 209, 467,
	468, 210, 469, 470, 211, 330, 408, 212, 409, 331,
	213, 214, 215, 216, 217, 471, 218, 332, 219, 333,
	220, 472, 221, 222, 223, 224, 225, 334, 226, 227,
	473, 228, 229, 230, 231, 232, 234, 235, 233, 236,
	237, 238, 239, 474, 240, 410, 241, 242, 335, 243,
	0, 247, 248, 249, 250, 475, 252, 336, 251, 253,
	254, 476, 255, 244, 245, 256, 411, 257, 337, 338,
	258, 477, 264, 259, 260, 246, 261, 263, 339, 262,
	340, 478, 265, 479, 266, 267, 268, 269, 270, 271,
	272, 480, 341, 342, 343, 481, 482, 273, 274, 344,
	345, 483, 275, 276, 277, 278, 484, 485, 279, 280,
	281, 282, 486, 283, 487, 346, 284, 285, 286, 347,
	348, 488, 489, 287, 490, 491, 492, 493, 288, 289,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 0, 0, 0,
	0, 1894, 0, 0, 0, 0, 0, 0, 0, 1895,
	140, 141, 412, 142, 413, 414, 415, 416, 293, 417,
	418, 419, 420, 143, 144, 145, 294, 295, 296, 297,
	146, 298, 299, 421, 147, 300, 301, 148, 149, 422,
	423, 302, 303, 304, 424, 150, 305, 425, 398, 426,
	151, 152, 153, 0, 154, 427, 155, 156, 157, 428,
	399, 158, 159, 429, 430, 432, 431, 433, 434, 435,
	160, 161, 352, 162, 306, 163, 307, 308, 436, 164,
	437, 165, 438, 166, 439, 440, 167, 168, 441, 169,
	442, 0, 443, 309, 170, 171, 172, 310, 311, 444,
	445, 446, 173, 174, 312, 313, 314, 0, 175, 447,
	176, 448, 449, 400, 450, 177, 315, 451, 316, 452,
	178, 179, 180, 181, 317, 318, 402, 453, 185, 454,
	182, 455, 401, 183, 319, 184, 320, 321, 322, 323,
	324, 456, 325, 457, 403, 186, 187, 188, 404, 189,
	190, 191, 458, 193, 192, 459, 326, 405, 194, 406,
	460, 195, 461, 462, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 463, 464, 465,
	328, 206, 329, 207, 208, 466, 209, 467, 468, 210,
	469, 470, 211, 330, 408, 212, 409, 331, 213, 214,
	215, 216, 217, 471, 218, 332, 219, 333, 220, 472,
	221, 222, 223, 224, 225, 334, 226, 227, 473, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 474, 240, 410, 241, 242, 335, 243, 0, 247,
	248, 249, 250, 475, 252, 336, 251, 253, 254, 476,
	255, 244, 245, 256, 411, 257, 337, 338, 258, 477,
	264, 259, 260, 246, 261, 263, 339, 262, 340, 478,
	265, 479, 266, 267, 268, 269, 270, 271, 272, 480,
	341, 342, 343, 481, 482, 273, 274, 344, 345, 483,
	275, 276, 277, 278, 484, 485, 279, 280, 281, 282,
	486, 283, 487, 346, 284, 285, 286, 347, 348, 488,
	489, 287, 490, 491, 492, 493, 288, 289, 290, 291,
	292, 0, 0, 0, 393, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2171,
	140, 141, 412, 142, 413, 414, 415, 416, 293, 417,
	418, 419, 420, 143, 144, 145, 294, 295, 296, 297,
	146, 298, 299, 421, 147, 300, 301, 148, 149, 422,
	423, 302, 303, 304, 424, 150, 305, 425, 398, 426,
	151, 152, 153, 0, 154, 427, 155, 156, 157, 428,
	399, 158, 159, 429, 430, 432, 431, 433, 434, 435,
	160, 161, 352, 162, 306, 163, 307, 308, 436, 164,
	437, 165, 438, 166, 439, 440, 167, 168, 441, 169,
	442, 0, 443, 309, 170, 171, 172, 310, 311, 444,
	445, 446, 173, 174, 312, 313, 314, 0, 175, 447,
	176, 448, 449, 400, 450, 177, 315, 451, 316, 452,
	178, 179, 180, 181, 317, 318, 402, 453, 185, 454,
	182, 455, 401, 183, 319, 184, 320, 321, 322, 323,
	324, 456, 325, 457, 403, 186, 187, 188, 404, 189,
	190, 191, 458, 193, 192, 459, 326, 405, 194, 406,
	460, 195, 461, 462, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 463, 464, 465,
	328, 206, 329, 207, 208, 466, 209, 467, 468, 210,
	469, 470, 211, 330, 408, 212, 409, 331, 213, 214,
	215, 216, 217, 471, 218, 332, 219, 333, 220, 472,
	221, 222, 223, 224, 225, 334, 226, 227, 473, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 474, 240, 410, 241, 242, 335, 243, 0, 247,
	248, 249, 250, 475, 252, 336, 251, 253, 254, 476,
	255, 244, 245, 256, 411, 257, 337, 338, 258, 477,
	264, 259, 260, 246, 261, 263, 339, 262, 340, 478,
	265, 479, 266, 267, 268, 269, 270, 271, 272, 480,
	341, 342, 343, 481, 482, 273, 274, 344, 345, 483,
	275, 276, 277, 278, 484, 485, 279, 280, 281, 282,
	486, 283, 487, 346, 284, 285, 286, 347, 348, 488,
	489, 287, 490, 491, 492, 493, 288, 289, 290, 291,
	292, 393, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 887, 0, 0, 140, 141, 412,
	142, 413, 414, 415, 416, 293, 417, 418, 419, 420,
	143, 144, 145, 294, 295, 296, 297, 146, 298, 299,
	421, 147, 300, 301, 148, 149, 422, 423, 302, 303,
	304, 424, 150, 305, 425, 398, 426, 151, 152, 153,
	0, 154, 427, 155, 156, 157, 428, 399, 158, 159,
	429, 430, 432, 431, 433, 434, 435, 160, 161, 352,
	162, 306, 163, 307, 308, 436, 164, 437, 165, 438,
	166, 439, 440, 167, 168, 441, 169, 442, 0, 443,
	309, 170, 171, 172, 310, 311, 444, 445, 446, 173,
	174, 312, 313, 314, 0, 175, 447, 176, 448, 449,
	400, 450, 177, 315, 451, 316, 452, 178, 179, 180,
	181, 317, 318, 402, 453, 185, 454, 182, 455, 401,
	183, 319, 184, 320, 321, 322, 323, 324, 456, 325,
	457, 403, 186, 187, 188, 404, 189, 190, 191, 458,
	193, 192, 459, 326, 405, 194, 406, 460, 195, 461,
	462, 196, 0, 197, 198, 199, 201, 327, 200, 407,
	202, 203, 205, 204, 463, 464, 465, 328, 206, 329,
	207, 208, 466, 209, 467, 468, 210, 469, 470, 211,
	330, 408, 212, 409, 331, 213, 214, 215, 216, 217,
	471, 218, 332, 219, 333, 220, 472, 221, 222, 223,
	224, 225, 334, 226, 227, 473, 228, 229, 230, 231,
	232, 234, 235, 233, 236, 237, 238, 239, 474, 240,
	410, 241, 242, 335, 243, 0, 247, 248, 249, 250,
	475, 252, 336, 251, 253, 254, 476, 255, 244, 245,
	256, 411, 257, 337, 338, 258, 477, 264, 259, 260,
	246, 261, 263, 339, 262, 340, 478, 265, 479, 266,
	267, 268, 269, 270, 271, 272, 480, 341, 342, 343,
	481, 482, 273, 274, 344, 345, 483, 275, 276, 277,
	278, 484, 485, 279, 280, 281, 282, 486, 283, 487,
	346, 284, 285, 286, 347, 348, 488, 489, 287, 490,
	491, 492, 493, 288, 289, 290, 291, 292, 689, 678,
	679, 676, 677, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 141, 0, 142, 0, 0,
	0, 0, 706, 671, 0, 0, 0, 143, 144, 145,
	294, 721, 296, 722, 146, 723, 724, 0, 147, 300,
	301, 148, 149, 674, 705, 725, 726, 304, 0, 150,
	717, 0, 697, 0, 151, 152, 153, 0, 154, 0,
	155, 156, 157, 0, 399, 158, 159, 0, 698, 699,
	701, 0, 700, 702, 160, 161, 352, 162, 727, 163,
	728, 729, 879, 164, 0, 165, 0, 166, 0, 0,
	720, 168, 0, 169, 0, 0, 0, 662, 170, 171,
	172, 707, 708, 685, 0, 0, 173, 174, 730, 731,
	732, 0, 175, 0, 176, 0, 0, 400, 0, 177,
	718, 0, 316, 0, 178, 179, 180, 181, 714, 716,
	402, 0, 185, 0, 182, 0, 401, 183, 733, 184,
	734, 735, 736, 737, 738, 0, 696, 0, 403, 186,
	187, 188, 404, 189, 190, 191, 0, 193, 192, 0,
	719, 405, 194, 406, 0, 195, 0, 0, 196, 0,
	197, 198, 199, 201, 327, 200, 407, 202, 203, 205,
	204, 657, 0, 686, 715, 206, 739, 207, 208, 0,
	209, 0, 0, 210, 0, 0, 211, 330, 408, 212,
	409, 709, 213, 214, 215, 216, 217, 0, 218, 710,
	219, 333, 220, 0, 221, 222, 223, 224, 225, 740,
	226, 227, 0, 228, 229, 230, 231, 232, 234, 235,
	233, 236, 237, 238, 239, 0, 240, 410, 241, 242,
	663, 243, 0, 247, 248, 249, 250, 124, 252, 336,
	251, 253, 254, 703, 255, 244, 245, 256, 411, 257,
	741, 338, 258, 0, 264, 259, 260, 246, 261, 263,
	742, 262, 711, 0, 265, 128, 266, 267, 268, 269,
	270, 271, 272, 0, 341, 743, 744, 0, 0, 273,
	274, 712, 713, 684, 275, 276, 277, 278, 0, 0,
	279, 280, 281, 282, 704, 283, 0, 346, 284, 285,
	286, 649, 745, 0, 0, 287, 0, 0, 0, 122,
	288, 289, 290, 291, 292, 658, 123, 0, 0, 0,
	0, 656, 0, 0, 0, 0, 654, 655, 689, 678,
	679, 676, 677, 668, 0, 664, 0, 0, 0, 0,
	667, 0, 0, 0, 140, 141, 1298, 142, 0, 0,
	0, 0, 706, 671, 0, 0, 0, 143, 144, 145,
	294, 721, 296, 722, 146, 723, 724, 0, 147, 300,
	301, 148, 149, 674, 705, 725, 726, 304, 0, 150,
	717, 0, 697, 0, 151, 152, 153, 0, 154, 0,
	155, 156, 157, 0, 399, 158, 159, 0, 698, 699,
	701, 0, 700, 702, 160, 161, 352, 162, 727, 163,
	728, 729, 0, 164, 0, 165, 0, 166, 1299, 0,
	720, 168, 0, 169, 0, 0, 0, 662, 170, 171,
	172, 707, 708, 685, 0, 0, 173, 174, 730, 731,
	732, 0, 175, 0, 176, 0, 0, 400, 0, 177,
	718, 0, 316, 0, 178, 179, 180, 181, 714, 716,
	402, 0, 185, 0, 182, 0, 401, 183, 733, 184,
	734, 735, 736, 737, 738, 0, 696, 0, 403, 186,
	187, 188, 404, 189, 190, 191, 0, 193, 192, 0,
	719, 405, 194, 406, 0, 195, 0, 0, 196, 0,
	197, 198, 199, 201, 327, 200, 407, 202, 203, 205,
	204, 657, 0, 686, 715, 206, 739, 207, 208, 0,
	209, 0, 0, 210, 0, 0, 211, 330, 408, 212,
	409, 709, 213, 214, 215, 216, 217, 0, 218, 710,
	219, 333, 220, 0, 221, 222, 223, 224, 225, 740,
	226, 227, 0, 228, 229, 230, 231, 232, 234, 235,
	233, 236, 237, 238, 239, 0, 240, 410, 241, 242,
	663, 243, 0, 247, 248, 249, 250, 0, 252, 336,
	251, 253, 254, 703, 255, 244, 245, 256, 411, 257,
	741, 338, 258, 0, 264, 259, 260, 246, 261, 263,
	742, 262, 711, 0, 265, 0, 266, 267, 268, 269,
	270, 271, 272, 0, 341, 743, 744, 0, 0, 273,
	274, 712, 713, 684, 275, 276, 277, 278, 0, 0,
	279, 280, 281, 282, 704, 283, 0, 346, 284, 285,
	286, 347, 745, 1297, 0, 287, 0, 0, 0, 0,
	288, 289, 290, 291, 292, 658, 0, 0, 0, 0,
	0, 656, 0, 0, 0, 0, 654, 655, 1300, 689,
	678, 679, 676, 677, 668, 664, 1295, 0, 0, 0,
	667, 0, 0, 0, 0, 140, 141, 0, 142, 0,
	0, 0, 0, 706, 671, 0, 0, 0, 143, 144,
	145, 294, 721, 296, 722, 146, 723, 724, 0, 147,
	300, 301, 148, 149, 674, 705, 725, 726, 304, 0,
	150, 717, 0, 697, 0, 151, 152, 153, 0, 154,
	0, 155, 156, 157, 0, 399, 158, 159, 0, 698,
	699, 701, 0, 700, 702, 160, 161, 352, 162, 727,
	163, 728, 729, 0, 164, 0, 165, 0, 166, 0,
	0, 720, 168, 0, 169, 0, 0, 0, 662, 170,
	171, 172, 707, 708, 685, 0, 0, 173, 174, 730,
	731, 732, 0, 175, 0, 176, 0, 0, 400, 0,
	177, 718, 0, 316, 0, 178, 179, 180, 181, 714,
	716, 402, 0, 185, 0, 182, 0, 401, 183, 733,
	184, 734, 735, 736, 737, 738, 0, 696, 0, 403,
	186, 187, 188, 404, 189, 190, 191, 0, 193, 192,
	0, 719, 405, 194, 406, 0, 195, 0, 0, 196,
	0, 197, 198, 199, 201, 327, 200, 407, 202, 203,
	205, 204, 657, 0, 686, 715, 206, 739, 207, 208,
	0, 209, 0, 0, 210, 0, 0, 211, 330, 408,
	212, 409, 709, 213, 214, 215, 216, 217, 0, 218,
	710, 219, 333, 220, 0, 221, 222, 223, 224, 225,
	740, 226, 227, 0, 228, 229, 230, 231, 232, 234,
	235, 233, 236, 237, 238, 239, 0, 240, 410, 241,
	242, 663, 243, 0, 247, 248, 249, 250, 124, 252,
	336, 251, 253, 254, 703, 255, 244, 245, 256, 411,
	257, 741, 338, 258, 0, 264, 259, 260, 246, 261,
	263, 742, 262, 711, 0, 265, 128, 266, 267, 268,
	269, 270, 271, 272, 0, 341, 743, 744, 0, 0,
	273, 274, 712, 713, 684, 275, 276, 277, 278, 0,
	0, 279, 280, 281, 282, 704, 283, 0, 346, 284,
	285, 286, 649, 745, 0, 0, 287, 0, 0, 0,
	122, 288, 289, 290, 291, 292, 658, 123, 0, 0,
	0, 0, 656, 0, 0, 0, 0, 654, 655, 689,
	678, 679, 676, 677, 668, 0, 664, 0, 0, 0,
	0, 667, 0, 0, 0, 140, 141, 0, 142, 0,
	0, 0, 0, 706, 671, 0, 0, 0, 143, 144,
	145, 294, 721, 296, 722, 146, 723, 724, 1345, 147,
	300, 301, 148, 149, 674, 705, 725, 726, 304, 0,
	150, 717, 0, 697, 0, 151, 152, 153, 0, 154,
	0, 155, 156, 157, 0, 399, 158, 159, 0, 698,
	699, 701, 0, 700, 702, 160, 161, 352, 162, 727,
	163, 728, 729, 0, 164, 0, 165, 0, 166, 0,
	0, 720, 168, 0, 169, 0, 0, 0, 662, 170,
	171, 172, 707, 708, 685, 0, 0, 173, 174, 730,
	731, 732, 0, 175, 0, 176, 0, 1350, 400, 0,
	177, 718, 0, 316, 0, 178, 179, 180, 181, 714,
	716, 402, 0, 185, 0, 182, 0, 401, 183, 733,
	184, 734, 735, 736, 737, 738, 0, 696, 0, 403,
	186, 187, 188, 404, 189, 190, 191, 0, 193, 192,
	1346, 719, 405, 194, 406, 0, 195, 0, 0, 196,
	0, 197, 198, 199, 201, 327, 200, 407, 202, 203,
	205, 204, 657, 0, 686, 715, 206, 739, 207, 208,
	0, 209, 0, 0, 210, 0, 0, 211, 330, 408,
	212, 409, 709, 213, 214, 215, 216, 217, 0, 218,
	710, 219, 333, 220, 0, 221, 222, 223, 224, 225,
	740, 226, 227, 0, 228, 229, 230, 231, 232, 234,
	235, 233, 236, 237, 238, 239, 0, 240, 410, 241,
	242, 663, 243, 0, 247, 248, 249, 250, 0, 252,
	336, 251, 253, 254, 703, 255, 244, 245, 256, 411,
	257, 741, 338, 258, 0, 264, 259, 260, 246, 261,
	263, 742, 262, 711, 0, 265, 0, 266, 267, 268,
	269, 270, 271, 272, 0, 341, 743, 744, 0, 1347,
	273, 274, 712, 713, 684, 275, 276, 277, 278, 0,
	0, 279, 280, 281, 282, 704, 283, 0, 346, 284,
	285, 286, 347, 745, 0, 0, 287, 0, 0, 0,
	0, 288, 289, 290, 291, 292, 658, 0, 0, 0,
	0, 0, 656, 0, 0, 0, 0, 654, 655, 689,
	678, 679, 676, 677, 668, 0, 664, 0, 0, 0,
	0, 667, 0, 0, 0, 140, 141, 0, 142, 0,
	0, 0, 0, 706, 671, 0, 0, 0, 143, 144,
	145, 294, 721, 296, 722, 146, 723, 724, 0, 147,
	300, 301, 148, 149, 674, 705, 725, 726, 304, 0,
	150, 717, 0, 697, 0, 151, 152, 153, 0, 154,
	0, 155, 156, 157, 0, 399, 158, 159, 0, 698,
	699, 701, 0, 700, 702, 160, 161, 352, 162, 727,
	163, 728, 729, 0, 164, 0, 165, 0, 166, 0,
	0, 720, 168, 0, 169, 0, 0, 0, 662, 170,
	171, 172, 707, 708, 685, 0, 0, 173, 174, 730,
	731, 732, 0, 175, 0, 176, 0, 0, 400, 0,
	177, 718, 0, 316, 0, 178, 179, 180, 181, 714,
	716, 402, 0, 185, 0, 182, 0, 401, 183, 733,
	184, 734, 735, 736, 737, 738, 0, 696, 0, 403,
	186, 187, 188, 404, 189, 190, 191, 0, 193, 192,
	0, 719, 405, 194, 406, 0, 195, 0, 0, 196,
	0, 197, 198, 199, 201, 327, 200, 407, 202, 203,
	205, 204, 657, 1721, 686, 715, 206, 739, 207, 208,
	0, 209, 0, 0, 210, 0, 0, 211, 330, 408,
	212, 409, 709, 213, 214, 215, 216, 217, 0, 218,
	710, 219, 333, 220, 0, 221, 222, 223, 224, 225,
	740, 226, 227, 0, 228, 229, 230, 231, 232, 234,
	235, 233, 236, 237, 238, 239, 0, 240, 410, 241,
	242, 663, 243, 0, 247, 248, 249, 250, 0, 252,
	336, 251, 253, 254, 703, 255, 244, 245, 256, 411,
	257, 741, 338, 258, 0, 264, 259, 260, 246, 261,
	263, 742, 262, 711, 0, 265, 0, 266, 267, 268,
	269, 270, 271, 272, 0, 341, 743, 744, 0, 0,
	273, 274, 712, 713, 684, 275, 276, 277, 278, 0,
	0, 279, 280, 281, 282, 704, 283, 0, 346, 284,
	285, 286, 347, 745, 0, 0, 287, 0, 0, 0,
	0, 288, 289, 290, 291, 292, 658, 0, 0, 0,
	0, 0, 656, 0, 0, 0, 0, 654, 655, 873,
	689, 678, 679, 676, 677, 668, 664, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 140, 141, 0, 142,
	0, 0, 0, 0, 706, 671, 0, 0, 0, 143,
	144, 145, 294, 721, 296, 722, 146, 723, 724, 0,
	147, 300, 301, 148, 149, 674, 705, 725, 726, 304,
	0, 150, 717, 0, 697, 0, 151, 152, 153, 0,
	154, 0, 155, 156, 157, 0, 399, 158, 159, 0,
	698, 699, 701, 0, 700, 702, 160, 161, 352, 162,
	727, 163, 728, 729, 0, 164, 0, 165, 0, 166,
	0, 0, 720, 168, 0, 169, 0, 0, 0, 662,
	170, 171, 172, 707, 708, 685, 0, 0, 173, 174,
	730, 731, 732, 0, 175, 0, 176, 0, 0, 400,
	0, 177, 718, 0, 316, 0, 178, 179, 180, 181,
	714, 716, 402, 0, 185, 1133, 182, 0, 401, 183,
	733, 184, 734, 735, 736, 737, 738, 0, 696, 0,
	403, 186, 187, 188, 404, 189, 190, 191, 0, 193,
	192, 0, 719, 405, 194, 406, 0, 195, 0, 0,
	196, 0, 197, 198, 199, 201, 327, 200, 407, 202,
	203, 205, 204, 657, 0, 686, 715, 206, 739, 207,
	208, 0, 209, 0, 0, 210, 0, 0, 211, 330,
	408, 212, 409, 709, 213, 214, 215, 216, 217, 0,
	218, 710, 219, 333, 220, 1132, 221, 222, 223, 224,
	225, 740, 226, 227, 0, 228, 229, 230, 231, 232,
	234, 235, 233, 236, 237, 238, 239, 0, 240, 410,
	241, 242, 663, 243, 0, 247, 248, 249, 250, 0,
	252, 336, 251, 253, 254, 703, 255, 244, 245, 256,
	411, 257, 741, 338, 258, 0, 264, 259, 260, 246,
	261, 263, 742, 262, 711, 0, 265, 0, 266, 267,
	268, 269, 270, 271, 272, 0, 341, 743, 744, 0,
	0, 273, 274, 712, 713, 684, 275, 276, 277, 278,
	0, 0, 279, 280, 281, 282, 704, 283, 0, 346,
	284, 285, 286, 347, 745, 0, 0, 287, 0, 0,
	0, 0, 288, 289, 290, 291, 292, 658, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 655,
	689, 678, 679, 676, 677, 668, 0, 664, 0, 0,
	0, 0, 667, 0, 0, 0, 140, 141, 0, 142,
	0, 0, 0, 0, 706, 671, 0, 0, 0, 143,
	144, 145, 294, 721, 296, 722, 146, 723, 724, 0,
	147, 300, 301, 148, 149, 674, 705, 725, 726, 304,
	0, 150, 717, 0, 697, 0, 151, 152, 153, 0,
	154, 0, 155, 156, 157, 0, 399, 158, 159, 0,
	698, 699, 701, 0, 700, 702, 160, 161, 352, 162,
	727, 163, 728, 729, 0, 164, 0, 165, 0, 166,
	0, 0, 720, 168, 0, 169, 0, 0, 0, 662,
	170, 171, 172, 707, 708, 685, 0, 0, 173, 174,
	730, 731, 732, 0, 175, 0, 176, 0, 0, 400,
	0, 177, 718, 0, 316, 0, 178, 179, 180, 181,
	714, 716, 402, 0, 185, 0, 182, 0, 401, 183,
	733, 184, 734, 735, 736, 737, 738, 0, 696, 0,
	403, 186, 187, 188, 404, 189, 190, 191, 0, 193,
	192, 0, 719, 405, 194, 406, 0, 195, 0, 0,
	196, 0, 197, 198, 199, 201, 327, 200, 407, 202,
	203, 205, 204, 657, 0, 686, 715, 206, 739, 207,
	208, 0, 209, 0, 0, 210, 0, 0, 211, 330,
	408, 212, 409, 709, 213, 214, 215, 216, 217, 0,
	218, 710, 219, 333, 220, 0, 221, 222, 223, 224,
	225, 740, 226, 227, 0, 228, 229, 230, 231, 232,
	234, 235, 233, 236, 237, 238, 239, 0, 240, 410,
	241, 242, 663, 243, 0, 247, 248, 249, 250, 0,
	252, 336, 251, 253, 254, 703, 255, 244, 245, 256,
	411, 257, 741, 338, 258, 0, 264, 259, 260, 246,
	261, 263, 742, 262, 711, 0, 265, 0, 266, 267,
	268, 269, 270, 271, 272, 0, 341, 743, 744, 0,
	0, 273, 274, 712, 713, 684, 275, 276, 277, 278,
	0, 0, 279, 280, 281, 282, 704, 283, 0, 346,
	284, 285, 286, 347, 745, 0, 0, 287, 0, 0,
	0, 0, 288, 289, 290, 291, 292, 658, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 655,
	0, 0, 0, 0, 0, 963, 1290, 664, 0, 0,
	0, 0, 667, 689, 678, 679, 676, 677, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	141, 0, 142, 0, 0, 0, 0, 706, 671, 0,
	0, 0, 143, 144, 145, 294, 721, 296, 722, 146,
	723, 724, 0, 147, 300, 301, 148, 149, 674, 705,
	725, 726, 304, 0, 150, 717, 0, 697, 0, 151,
	152, 153, 0, 154, 0, 155, 156, 157, 0, 399,
	158, 159, 0, 698, 699, 701, 0, 700, 702, 160,
	161, 352, 162, 727, 163, 728, 729, 0, 164, 0,
	165, 0, 166, 0, 0, 720, 168, 0, 169, 0,
	0, 0, 662, 170, 171, 172, 707, 708, 685, 0,
	0, 173, 174, 730, 731, 732, 0, 175, 0, 176,
	0, 0, 400, 0, 177, 718, 0, 316, 0, 178,
	179, 180, 181, 714, 716, 402, 0, 185, 0, 182,
	0, 401, 183, 733, 184, 734, 735, 736, 737, 738,
	0, 696, 0, 403, 186, 187, 188, 404, 189, 190,
	191, 0, 193, 192, 0, 719, 405, 194, 406, 0,
	195, 0, 0, 196, 0, 197, 198, 199, 201, 327,
	200, 407, 202, 203, 205, 204, 657, 0, 686, 715,
	206, 739, 207, 208, 0, 209, 0, 0, 210, 0,
	0, 211, 330, 408, 212, 409, 709, 213, 214, 215,
	216, 217, 0, 218, 710, 219, 333, 220, 0, 221,
	222, 223, 224, 225, 740, 226, 227, 0, 228, 229,
	230, 231, 232, 234, 235, 233, 236, 237, 238, 239,
	0, 240, 410, 241, 242, 663, 243, 0, 247, 248,
	249, 250, 0, 252, 336, 251, 253, 254, 703, 255,
	244, 245, 256, 411, 257, 741, 338, 258, 0, 264,
	259, 260, 246, 261, 263, 742, 262, 711, 0, 265,
	0, 266, 267, 268, 269, 270, 271, 272, 0, 341,
	743, 744, 0, 0, 273, 274, 712, 713, 684, 275,
	276, 277, 278, 0, 0, 279, 280, 281, 282, 704,
	283, 0, 346, 284, 285, 286, 347, 745, 0, 0,
	287, 0, 0, 0, 0, 288, 289, 290, 291, 292,
	658, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	0, 654, 655, 689, 678, 679, 676, 677, 668, 0,
	664, 1803, 0, 0, 0, 667, 0, 0, 0, 140,
	141, 0, 142, 0, 0, 0, 0, 706, 671, 0,
	0, 0, 143, 144, 145, 294, 721, 296, 722, 146,
	723, 724, 0, 147, 300, 301, 148, 149, 674, 705,
	725, 726, 304, 0, 150, 717, 0, 697, 0, 151,
	152, 153, 0, 154, 0, 155, 156, 157, 0, 399,
	158, 159, 0, 698, 699, 701, 0, 700, 702, 160,
	161, 352, 162, 727, 163, 728, 729, 0, 164, 0,
	165, 0, 166, 0, 0, 720, 168, 0, 169, 0,
	0, 0, 662, 170, 171, 172, 707, 708, 685, 0,
	0, 173, 174, 730, 731, 732, 0, 175, 0, 176,
	0, 0, 400, 0, 177, 718, 0, 316, 0, 178,
	179, 180, 181, 714, 716, 402, 0, 185, 0, 182,
	0, 401, 183, 733, 184, 734, 735, 736, 737, 738,
	0, 696, 0, 403, 186, 187, 188, 404, 189, 190,
	191, 0, 193, 192, 0, 719, 405, 194, 406, 0,
	195, 0, 0, 196, 0, 197, 198, 199, 201, 327,
	200, 407, 202, 203, 205, 204, 657, 0, 686, 715,
	206, 739, 207, 208, 0, 209, 0, 0, 210, 0,
	0, 211, 330, 408, 212, 409, 709, 213, 214, 215,
	216, 217, 0, 218, 710, 219, 333, 220, 0, 221,
	222, 223, 224, 225, 740, 226, 227, 0, 228, 229,
	230, 231, 232, 234, 235, 233, 236, 237, 238, 239,
	0, 240, 410, 241, 242, 663, 243, 0, 247, 248,
	249, 250, 0, 252, 336, 251, 253, 254, 703, 255,
	244, 245, 256, 411, 257, 741, 338, 258, 0, 264,
	259, 260, 246, 261, 263, 742, 262, 711, 0, 265,
	0, 266, 267, 268, 269, 270, 271, 272, 0, 341,
	743, 744, 0, 0, 273, 274, 712, 713, 684, 275,
	276, 277, 278, 0, 0, 279, 280, 281, 282, 704,
	283, 0, 346, 284, 285, 286, 347, 745, 1752, 0,
	287, 0, 0, 0, 0, 288, 289, 290, 291, 292,
	658, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	0, 654, 655, 689, 678, 679, 676, 677, 668, 0,
	664, 0, 0, 0, 0, 667, 0, 0, 0, 140,
	141, 0, 142, 0, 0, 0, 0, 706, 671, 0,
	0, 0, 143, 144, 145, 294, 721, 296, 722, 146,
	723, 724, 0, 147, 300, 301, 148, 149, 674, 705,
	725, 726, 304, 0, 150, 717, 0, 697, 0, 151,
	152, 153, 0, 154, 0, 155, 156, 157, 0, 399,
	158, 159, 0, 698, 699, 701, 0, 700, 702, 160,
	161, 352, 162, 727, 163, 728, 729, 0, 164, 0,
	165, 0, 166, 0, 0, 720, 168, 0, 169, 0,
	0, 0, 662, 170, 171, 172, 707, 708, 685, 0,
	0, 173, 174, 730, 731, 732, 0, 175, 0, 176,
	0, 0, 400, 0, 177, 718, 0, 316, 0, 178,
	179, 180, 181, 714, 716, 402, 0, 185, 0, 182,
	0, 401, 183, 733, 184, 734, 735, 736, 737, 738,
	0, 696, 0, 403, 186, 187, 188, 404, 189, 190,
	191, 0, 193, 192, 0, 719, 405, 194, 406, 0,
	195, 0, 0, 196, 0, 197, 198, 199, 201, 327,
	200, 407, 202, 203, 205, 204, 657, 0, 686, 715,
	206, 739, 207, 208, 0, 209, 0, 0, 210, 0,
	0, 211, 330, 408, 212, 409, 709, 213, 214, 215,
	216, 217, 0, 218, 710, 219, 333, 220, 0, 221,
	222, 223, 224, 225, 740, 226, 227, 0, 228, 229,
	230, 231, 232, 234, 235, 233, 236, 237, 238, 239,
	0, 240, 410, 241, 242, 663, 243, 0, 247, 248,
	249, 250, 0, 252, 336, 251, 253, 254, 703, 255,
	244, 245, 256, 411, 257, 741, 338, 258, 0, 264,
	259, 260, 246, 261, 263, 742, 262, 711, 0, 265,
	0, 266, 267, 268, 269, 270, 271, 272, 0, 341,
	743, 744, 0, 0, 273, 274, 712, 713, 684, 275,
	276, 277, 278, 0, 0, 279, 280, 281, 282, 704,
	283, 0, 346, 284, 285, 286, 347, 745, 0, 0,
	287, 0, 0, 0, 0, 288, 289, 290, 291, 292,
	658, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	0, 654, 655, 689, 678, 679, 676, 677, 668, 0,
	664, 1742, 0, 0, 0, 667, 0, 0, 0, 140,
	141, 0, 142, 0, 0, 0, 0, 706, 671, 0,
	0, 0, 143, 144, 145, 294, 721, 296, 722, 146,
	723, 724, 0, 147, 300, 301, 148, 149, 674, 705,
	725, 726, 304, 0, 150, 717, 0, 697, 0, 151,
	152, 153, 0, 154, 0, 155, 156, 157, 0, 399,
	158, 159, 0, 698, 699, 701, 0, 700, 702, 160,
	161, 352, 162, 727, 163, 728, 729, 879, 164, 0,
	165, 0, 166, 0, 0, 720, 168, 0, 169, 0,
	0, 0, 662, 170, 171, 172, 707, 708, 685, 0,
	0, 173, 174, 730, 731, 732, 0, 175, 0, 176,
	0, 0, 400, 0, 177, 718, 0, 316, 0, 178,
	179, 180, 181, 714, 716, 402, 0, 185, 0, 182,
	0, 401, 183, 733, 184, 734, 735, 736, 737, 738,
	0, 696, 0, 403, 186, 187, 188, 404, 189, 190,
	191, 0, 193, 192, 0, 719, 405, 194, 406, 0,
	195, 0, 0, 196, 0, 197, 198, 199, 201, 327,
	200, 407, 202, 203, 205, 204, 657, 0, 686, 715,
	206, 739, 207, 208, 0, 209, 0, 0, 210, 0,
	0, 211, 330, 408, 212, 409, 709, 213, 214, 215,
	216, 217, 0, 218, 710, 219, 333, 220, 0, 221,
	222, 223, 224, 225, 740, 226, 227, 0, 228, 229,
	230, 231, 232, 234, 235, 233, 236, 237, 238, 239,
	0, 240, 410, 241, 242, 663, 243, 0, 247, 248,
	249, 250, 0, 252, 336, 251, 253, 254, 703, 255,
	244, 245, 256, 411, 257, 741, 338, 258, 0, 264,
	259, 260, 246, 261, 263, 742, 262, 711, 0, 265,
	0, 266, 267, 268, 269, 270, 271, 272, 0, 341,
	743, 744, 0, 0, 273, 274, 712, 713, 684, 275,
	276, 277, 278, 0, 0, 279, 280, 281, 282, 704,
	283, 0, 346, 284, 285, 286, 347, 745, 0, 0,
	287, 0, 0, 0, 0, 288, 289, 290, 291, 292,
	658, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	0, 654, 655, 689, 678, 679, 676, 677, 668, 0,
	664, 0, 0, 0, 0, 667, 0, 0, 0, 140,
	141, 0, 142, 0, 0, 0, 0, 706, 671, 0,
	0, 0, 143, 144, 145, 294, 721, 296, 722, 146,
	723, 724, 0, 147, 300, 301, 148, 149, 674, 705,
	725, 726, 304, 0, 150, 717, 0, 697, 0, 151,
	152, 153, 0, 154, 0, 155, 156, 157, 0, 399,
	158, 159, 0, 698, 699, 701, 0, 700, 702, 160,
	161, 352, 162, 727, 163, 728, 729, 0, 164, 0,
	165, 0, 166, 0, 0, 720, 168, 0, 169, 0,
	0, 0, 662, 170, 171, 172, 707, 708, 685, 0,
	0, 173, 174, 730, 731, 732, 0, 175, 0, 176,
	0, 1350, 400, 0, 177, 718, 0, 316, 0, 178,
	179, 180, 181, 714, 716, 402, 0, 185, 0, 182,
	0, 401, 183, 733, 184, 734, 735, 736, 737, 738,
	0, 696, 0, 403, 186, 187, 188, 404, 189, 190,
	191, 0, 193, 192, 0, 719, 405, 194, 406, 0,
	195, 0, 0, 196, 0, 197, 198, 199, 201, 327,
	200, 407, 202, 203, 205, 204, 657, 0, 686, 715,
	206, 739, 207, 208, 0, 209, 0, 0, 210, 0,
	0, 211, 330, 408, 212, 409, 709, 213, 214, 215,
	216, 217, 0, 218, 710, 219, 333, 220, 0, 221,
	222, 223, 224, 225, 740, 226, 227, 0, 228, 229,
	230, 231, 232, 234, 235, 233, 236, 237, 238, 239,
	0, 240, 410, 241, 242, 663, 243, 0, 247, 248,
	249, 250, 0, 252, 336, 251, 253, 254, 703, 255,
	244, 245, 256, 411, 257, 741, 338, 258, 0, 264,
	259, 260, 246, 261, 263, 742, 262, 711, 0, 265,
	0, 266, 267, 268, 269, 270, 271, 272, 0, 341,
	743, 744, 0, 0, 273, 274, 712, 713, 684, 275,
	276, 277, 278, 0, 0, 279, 280, 281, 282, 704,
	283, 0, 346, 284, 285, 286, 347, 745, 0, 0,
	287, 0, 0, 0, 0, 288, 289, 290, 291, 292,
	658, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	0, 654, 655, 689, 678, 679, 676, 677, 668, 0,
	664, 0, 0, 0, 0, 667, 0, 0, 0, 140,
	141, 0, 142, 0, 0, 0, 0, 706, 671, 0,
	0, 0, 143, 144, 145, 294, 721, 296, 722, 146,
	723, 724, 0, 147, 300, 301, 148, 149, 674, 705,
	725, 726, 304, 0, 150, 717, 0, 697, 0, 151,
	152, 153, 0, 154, 0, 155, 156, 157, 0, 399,
	158, 159, 0, 698, 699, 701, 0, 700, 702, 160,
	161, 352, 162, 727, 163, 728, 729, 0, 164, 0,
	165, 0, 166, 0, 0, 720, 168, 0, 169, 0,
	0, 0, 662, 170, 171, 172, 707, 708, 685, 0,
	0, 173, 174, 730, 731, 732, 0, 175, 0, 176,
	0, 0, 400, 0, 177, 718, 0, 316, 0, 178,
	179, 180, 181, 714, 716, 402, 0, 185, 0, 182,
	0, 401, 183, 733, 184, 734, 735, 736, 737, 738,
	0, 696, 0, 403, 186, 187, 188, 404, 189, 190,
	191, 0, 193, 192, 0, 719, 405, 194, 406, 0,
	195, 0, 0, 196, 0, 197, 198, 199, 201, 327,
	200, 407, 202, 203, 205, 204, 657, 0, 686, 715,
	206, 739, 207, 208, 0, 209, 0, 0, 210, 0,
	0, 211, 330, 408, 212, 409, 709, 213, 214, 215,
	216, 217, 0, 218, 710, 219, 333, 220, 0, 221,
	222, 223, 224, 225, 740, 226, 227, 0, 228, 229,
	230, 231, 232, 234, 235, 233, 236, 237, 238, 239,
	0, 240, 410, 241, 242, 663, 243, 0, 247, 248,
	249, 250, 0, 252, 336, 251, 253, 254, 703, 255,
	244, 245, 256, 411, 257, 741, 338, 258, 0, 264,
	259, 260, 246, 261, 263, 742, 262, 711, 0, 265,
	0, 266, 267, 268, 269, 270, 271, 272, 0, 341,
	743, 744, 0, 0, 273, 274, 712, 713, 684, 275,
	276, 277, 278, 0, 0, 279, 280, 281, 282, 704,
	283, 0, 346, 284, 285, 286, 347, 745, 0, 0,
	287, 0, 0, 0, 0, 288, 289, 290, 291, 292,
	658, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	0, 654, 655, 873, 689, 678, 679, 676, 677, 668,
	664, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	140, 141, 0, 142, 0, 0, 0, 0, 706, 671,
	0, 0, 0, 143, 144, 145, 294, 721, 296, 722,
	146, 723, 724, 0, 147, 300, 301, 148, 149, 674,
	705, 725, 726, 304, 0, 150, 717, 0, 697, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	399, 158, 159, 0, 698, 699, 701, 0, 700, 702,
	160, 161, 352, 162, 727, 163, 728, 729, 0, 164,
	0, 165, 0, 166, 0, 0, 720, 168, 0, 169,
	0, 0, 0, 662, 170, 171, 172, 707, 708, 685,
	0, 0, 173, 174, 730, 731, 732, 0, 175, 0,
	176, 0, 0, 400, 0, 177, 718, 0, 316, 0,
	178, 179, 180, 181, 714, 716, 402, 0, 185, 0,
	182, 0, 401, 183, 733, 184, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 186, 187, 188, 404, 189,
	190, 191, 0, 193, 192, 0, 719, 405, 194, 406,
	0, 195, 0, 0, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 657, 0, 686,
	715, 206, 739, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 408, 212, 409, 709, 213, 214,
	215, 216, 217, 0, 218, 710, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 740, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 410, 241, 242, 663, 243, 0, 247,
	248, 249, 250, 0, 252, 336, 251, 253, 254, 703,
	255, 244, 245, 256, 411, 257, 741, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 742, 262, 711, 0,
	265, 0, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 743, 744, 0, 0, 273, 274, 712, 713, 684,
	275, 276, 277, 278, 0, 0, 279, 280, 281, 282,
	704, 283, 0, 346, 284, 285, 286, 347, 745, 0,
	0, 287, 0, 0, 0, 0, 288, 289, 290, 291,
	292, 658, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 654, 655, 689, 678, 679, 676, 677, 668,
	0, 664, 1285, 0, 0, 0, 667, 0, 0, 0,
	140, 141, 1120, 142, 0, 0, 0, 0, 706, 671,
	0, 0, 0, 143, 144, 145, 294, 721, 296, 722,
	146, 723, 724, 0, 147, 300, 301, 148, 149, 674,
	705, 725, 726, 304, 0, 150, 717, 0, 697, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	399, 158, 159, 0, 698, 699, 701, 0, 700, 702,
	160, 161, 352, 162, 727, 163, 728, 729, 0, 164,
	0, 165, 0, 166, 0, 0, 720, 168, 0, 169,
	0, 0, 0, 662, 170, 171, 172, 707, 708, 685,
	0, 0, 173, 174, 730, 731, 732, 0, 175, 0,
	176, 0, 0, 400, 0, 177, 718, 0, 316, 0,
	178, 179, 180, 181, 714, 716, 402, 0, 185, 0,
	182, 0, 401, 183, 733, 184, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 186, 187, 188, 404, 189,
	190, 191, 0, 193, 192, 0, 719, 405, 194, 406,
	0, 195, 0, 0, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 657, 0, 686,
	715, 206, 739, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 408, 212, 409, 709, 213, 214,
	215, 216, 217, 0, 218, 710, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 740, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 410, 241, 242, 663, 243, 0, 247,
	248, 249, 250, 0, 252, 336, 251, 253, 254, 703,
	255, 244, 245, 256, 411, 257, 741, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 742, 262, 711, 0,
	265, 0, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 743, 744, 0, 0, 273, 274, 712, 713, 684,
	275, 276, 277, 278, 0, 0, 279, 280, 281, 282,
	704, 283, 0, 346, 284, 285, 286, 347, 745, 0,
	0, 287, 0, 0, 0, 0, 288, 289, 290, 291,
	292, 658, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 654, 655, 689, 678, 679, 676, 677, 668,
	0, 664, 0, 0, 0, 0, 667, 0, 0, 0,
	140, 141, 0, 142, 0, 0, 0, 0, 706, 671,
	0, 0, 0, 143, 144, 145, 294, 721, 296, 722,
	146, 723, 724, 0, 147, 300, 301, 148, 149, 674,
	705, 725, 726, 304, 0, 150, 717, 0, 697, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	399, 158, 2218, 0, 698, 699, 701, 0, 700, 702,
	160, 161, 352, 162, 727, 163, 728, 729, 0, 164,
	0, 165, 0, 166, 0, 0, 720, 168, 0, 169,
	0, 0, 0, 662, 170, 171, 172, 707, 708, 685,
	0, 0, 173, 174, 730, 731, 732, 0, 175, 0,
	176, 0, 0, 400, 0, 177, 718, 0, 316, 0,
	178, 179, 180, 181, 714, 716, 402, 0, 185, 0,
	182, 0, 401, 183, 733, 184, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 186, 187, 188, 404, 189,
	190, 191, 0, 193, 192, 0, 719, 405, 194, 406,
	0, 195, 0, 0, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 657, 0, 686,
	715, 206, 739, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 408, 212, 409, 709, 213, 214,
	215, 216, 217, 0, 218, 710, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 740, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 410, 241, 242, 663, 243, 0, 247,
	248, 249, 250, 0, 252, 336, 251, 253, 254, 703,
	255, 244, 245, 256, 411, 257, 741, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 742, 262, 711, 0,
	265, 0, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 743, 744, 0, 0, 273, 274, 712, 713, 684,
	275, 276, 2217, 278, 0, 0, 279, 280, 281, 282,
	704, 283, 0, 346, 284, 285, 286, 347, 745, 0,
	0, 287, 0, 0, 0, 0, 288, 289, 290, 291,
	292, 658, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 654, 655, 689, 678, 679, 676, 677, 668,
	0, 664, 0, 0, 0, 0, 667, 0, 0, 0,
	140, 141, 0, 142, 0, 0, 0, 0, 706, 671,
	0, 0, 0, 143, 144, 145, 294, 721, 296, 722,
	146, 723, 724, 0, 147, 300, 301, 148, 149, 674,
	705, 725, 726, 304, 0, 150, 717, 0, 697, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	399, 158, 159, 0, 698, 699, 701, 0, 700, 702,
	160, 161, 352, 162, 727, 163, 728, 729, 0, 164,
	0, 165, 0, 166, 0, 0, 720, 168, 0, 169,
	0, 0, 0, 662, 170, 171, 172, 707, 708, 685,
	0, 0, 173, 174, 730, 731, 732, 0, 175, 0,
	176, 0, 0, 400, 0, 177, 718, 0, 316, 0,
	178, 179, 180, 181, 714, 716, 402, 0, 185, 0,
	182, 0, 401, 183, 733, 184, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 186, 187, 188, 404, 189,
	190, 191, 0, 193, 192, 0, 719, 405, 194, 406,
	0, 195, 0, 0, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 657, 0, 686,
	715, 206, 739, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 408, 212, 409, 709, 213, 214,
	215, 216, 217, 0, 218, 710, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 740, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 410, 241, 242, 663, 243, 0, 247,
	248, 249, 250, 0, 252, 336, 251, 253, 254, 703,
	255, 244, 245, 256, 411, 257, 741, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 742, 262, 711, 0,
	265, 0, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 743, 744, 0, 0, 273, 274, 712, 713, 684,
	275, 276, 277, 278, 0, 0, 279, 280, 281, 282,
	704, 283, 0, 346, 284, 285, 286, 347, 745, 0,
	0, 287, 0, 0, 0, 0, 288, 289, 290, 291,
	292, 658, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 654, 655, 689, 678, 679, 676, 677, 668,
	0, 664, 0, 0, 0, 0, 667, 0, 0, 0,
	140, 141, 0, 142, 0, 0, 0, 0, 706, 671,
	0, 0, 0, 143, 144, 145, 2216, 721, 296, 722,
	146, 723, 724, 0, 147, 300, 301, 148, 149, 674,
	705, 725, 726, 304, 0, 150, 717, 0, 697, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	399, 158, 2218, 0, 698, 699, 701, 0, 700, 702,
	160, 161, 352, 162, 727, 163, 728, 729, 0, 164,
	0, 165, 0, 166, 0, 0, 720, 168, 0, 169,
	0, 0, 0, 662, 170, 171, 172, 707, 708, 685,
	0, 0, 173, 174, 730, 731, 732, 0, 175, 0,
	176, 0, 0, 400, 0, 177, 718, 0, 316, 0,
	178, 179, 180, 181, 714, 716, 402, 0, 185, 0,
	182, 0, 401, 183, 733, 184, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 186, 187, 188, 404, 189,
	190, 191, 0, 193, 192, 0, 719, 405, 194, 406,
	0, 195, 0, 0, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 657, 0, 686,
	715, 206, 739, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 408, 212, 409, 709, 213, 214,
	215, 216, 217, 0, 218, 710, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 740, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 410, 241, 242, 663, 243, 0, 247,
	248, 249, 250, 0, 252, 336, 251, 253, 254, 703,
	255, 244, 245, 256, 411, 257, 741, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 742, 262, 711, 0,
	265, 0, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 743, 744, 0, 0, 273, 274, 712, 713, 684,
	275, 276, 2217, 278, 0, 0, 279, 280, 281, 282,
	704, 283, 0, 346, 284, 285, 286, 347, 745, 0,
	0, 287, 0, 0, 0, 0, 288, 289, 290, 291,
	292, 658, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 654, 655, 1322, 678, 679, 676, 677, 668,
	0, 664, 0, 0, 0, 0, 667, 0, 0, 0,
	140, 141, 0, 142, 0, 0, 0, 0, 706, 671,
	0, 0, 0, 143, 144, 145, 294, 721, 296, 722,
	146, 723, 724, 0, 147, 300, 301, 148, 149, 674,
	705, 725, 726, 304, 0, 150, 717, 0, 697, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	399, 158, 159, 0, 698, 699, 701, 0, 700, 702,
	160, 161, 352, 162, 727, 1325, 728, 729, 0, 164,
	0, 165, 0, 166, 0, 0, 720, 168, 0, 169,
	0, 0, 0, 662, 170, 171, 172, 707, 708, 685,
	0, 0, 173, 174, 730, 731, 732, 0, 175, 0,
	176, 0, 0, 400, 0, 177, 718, 0, 316, 0,
	178, 179, 1326, 181, 714, 716, 402, 0, 185, 0,
	182, 0, 401, 183, 733, 184, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 186, 187, 188, 404, 189,
	190, 191, 0, 193, 192, 0, 719, 405, 194, 406,
	0, 195, 0, 0, 196, 0, 197, 1327, 1324, 201,
	327, 200, 407, 202, 203, 205, 204, 657, 0, 686,
	715, 206, 739, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 408, 212, 409, 709, 213, 214,
	215, 216, 217, 0, 218, 710, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 740, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 410, 241, 242, 663, 243, 0, 247,
	248, 249, 1328, 0, 252, 336, 251, 253, 254, 703,
	255, 244, 245, 256, 411, 257, 741, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 742, 262, 711, 0,
	265, 0, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 743, 744, 0, 0, 273, 274, 712, 713, 684,
	275, 276, 277, 278, 0, 0, 279, 280, 281, 282,
	704, 283, 0, 346, 284, 285, 286, 347, 745, 0,
	0, 287, 0, 0, 0, 0, 288, 289, 290, 1323,
	292, 658, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 654, 655, 689, 678, 679, 676, 677, 668,
	0, 664, 0, 0, 0, 0, 667, 0, 0, 0,
	140, 141, 0, 142, 0, 0, 0, 0, 706, 671,
	0, 0, 0, 143, 144, 145, 294, 721, 296, 722,
	146, 723, 724, 0, 147, 300, 301, 148, 149, 674,
	705, 725, 726, 304, 0, 150, 717, 0, 697, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	399, 158, 159, 0, 698, 699, 701, 0, 700, 702,
	160, 161, 352, 162, 727, 163, 728, 729, 0, 164,
	0, 165, 0, 166, 0, 0, 720, 168, 0, 169,
	0, 0, 0, 662, 170, 171, 172, 707, 708, 685,
	0, 0, 173, 174, 730, 731, 732, 0, 175, 0,
	176, 0, 0, 400, 0, 177, 718, 0, 316, 0,
	178, 179, 180, 181, 714, 716, 402, 0, 185, 0,
	182, 0, 401, 183, 733, 184, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 186, 187, 188, 404, 189,
	190, 191, 0, 193, 192, 0, 719, 405, 194, 406,
	0, 195, 0, 0, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 0, 0, 686,
	715, 206, 739, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 408, 212, 409, 709, 213, 214,
	215, 216, 217, 0, 218, 710, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 740, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 410, 241, 242, 1340, 243, 0, 247,
	248, 249, 250, 0, 252, 336, 251, 253, 254, 703,
	255, 244, 245, 256, 411, 257, 741, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 742, 262, 711, 0,
	265, 0, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 743, 744, 0, 0, 273, 274, 712, 713, 684,
	275, 276, 277, 278, 0, 0, 279, 280, 281, 282,
	704, 283, 0, 346, 284, 285, 286, 347, 745, 0,
	0, 287, 0, 0, 0, 0, 288, 289, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 1336, 1337, 689, 678, 679, 676, 677, 668,
	0, 1339, 0, 0, 0, 0, 667, 0, 0, 0,
	140, 141, 0, 142, 0, 0, 0, 0, 706, 671,
	0, 0, 0, 143, 144, 145, 294, 721, 296, 722,
	146, 723, 724, 0, 147, 300, 301, 148, 149, 0,
	705, 725, 726, 304, 0, 150, 717, 0, 697, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	399, 158, 159, 0, 698, 699, 701, 0, 700, 702,
	160, 161, 352, 162, 727, 163, 728, 729, 0, 164,
	0, 165, 0, 166, 0, 0, 720, 168, 0, 169,
	0, 0, 0, 309, 170, 171, 172, 707, 708, 685,
	0, 0, 173, 174, 730, 731, 732, 0, 175, 0,
	176, 0, 0, 400, 0, 177, 718, 0, 316, 0,
	178, 179, 180, 181, 714, 716, 402, 0, 185, 0,
	182, 0, 401, 183, 733, 184, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 186, 187, 188, 404, 189,
	190, 191, 0, 193, 192, 0, 719, 405, 194, 406,
	0, 195, 0, 0, 196, 0, 197, 198, 199, 201,
	327, 200, 407, 202, 203, 205, 204, 0, 0, 686,
	715, 206, 739, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 408, 212, 409, 709, 213, 214,
	215, 216, 217, 0, 218, 710, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 740, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 410, 241, 242, 1340, 243, 0, 247,
	248, 249, 250, 0, 252, 336, 251, 253, 254, 703,
	255, 244, 245, 256, 411, 257, 741, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 742, 262, 711, 0,
	265, 0, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 743, 744, 0, 0, 273, 274, 712, 713, 684,
	275, 276, 277, 278, 0, 0, 279, 280, 281, 282,
	704, 283, 0, 346, 284, 285, 286, 347, 745, 0,
	0, 287, 0, 0, 0, 0, 288, 289, 290, 291,
	292, 0, 0, 689, 678, 679, 676, 677, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	141, 1339, 142, 0, 0, 0, 667, 706, 671, 0,
	0, 0, 143, 144, 145, 0, 721, 296, 722, 146,
	723, 724, 0, 147, 300, 301, 148, 149, 674, 705,
	725, 726, 304, 0, 150, 717, 0, 697, 0, 151,
	152, 153, 0, 154, 0, 155, 156, 157, 0, 399,
	158, 2218, 0, 698, 699, 701, 0, 700, 702, 160,
	161, 352, 162, 727, 163, 728, 729, 0, 164, 0,
	165, 0, 166, 0, 0, 720, 168, 0, 169, 0,
	0, 0, 662, 170, 171, 172, 707, 708, 685, 0,
	0, 173, 174, 730, 731, 732, 0, 175, 0, 176,
	0, 0, 400, 0, 177, 718, 0, 316, 0, 178,
	179, 180, 181, 714, 716, 0, 0, 185, 0, 182,
	0, 401, 183, 733, 184, 734, 735, 736, 737, 738,
	0, 696, 0, 0, 186, 187, 188, 404, 189, 190,
	191, 0, 193, 192, 0, 719, 405, 194, 0, 0,
	195, 0, 0, 196, 0, 197, 198, 199, 201, 327,
	200, 407, 202, 203, 205, 204, 657, 0, 686, 715,
	206, 739, 207, 208, 0, 209, 0, 0, 210, 0,
	0, 211, 330, 408, 212, 409, 709, 213, 214, 215,
	216, 217, 0, 218, 710, 219, 333, 220, 0, 221,
	222, 223, 224, 225, 740, 226, 227, 0, 228, 229,
	230, 231, 232, 234, 235, 233, 236, 237, 238, 239,
	0, 240, 410, 241, 242, 663, 243, 0, 247, 248,
	249, 250, 0, 252, 336, 251, 253, 254, 703, 255,
	244, 245, 256, 0, 257, 741, 338, 258, 0, 264,
	259, 260, 246, 261, 263, 742, 262, 711, 0, 265,
	0, 266, 267, 268, 269, 270, 271, 272, 0, 341,
	743, 744, 0, 0, 273, 274, 712, 713, 684, 275,
	276, 2217, 278, 0, 0, 279, 280, 281, 282, 704,
	283, 0, 346, 284, 285, 286, 347, 745, 0, 0,
	287, 0, 0, 0, 0, 288, 289, 290, 291, 292,
	689, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 655, 0, 0, 0, 140, 141, 0, 142,
	664, 0, 0, 0, 706, 667, 0, 0, 0, 143,
	144, 145, 294, 295, 296, 297, 146, 298, 299, 0,
	147, 300, 301, 148, 149, 0, 705, 302, 303, 304,
	0, 150, 717, 0, 697, 0, 151, 152, 153, 0,
	154, 0, 155, 156, 157, 0, 399, 158, 159, 0,
	698, 699, 701, 0, 700, 702, 160, 161, 352, 162,
	306, 163, 307, 308, 0, 164, 0, 165, 0, 166,
	0, 0, 167, 168, 0, 169, 0, 0, 0, 309,
	170, 171, 172, 707, 708, 0, 0, 0, 173, 174,
	312, 313, 314, 0, 175, 0, 176, 0, 0, 400,
	0, 177, 718, 0, 316, 0, 178, 179, 180, 181,
	714, 716, 402, 0, 185, 0, 182, 0, 401, 183,
	319, 184, 320, 321, 322, 323, 324, 0, 325, 0,
	403, 186, 187, 188, 404, 189, 190, 191, 0, 193,
	192, 0, 719, 405, 194, 406, 0, 195, 0, 0,
	196, 0, 197, 198, 199, 201, 327, 200, 407, 202,
	203, 205, 204, 0, 0, 0, 715, 206, 329, 207,
	208, 0, 209, 0, 0, 210, 0, 0, 211, 330,
	408, 212, 409, 709, 213, 214, 215, 216, 217, 0,
	218, 710, 219, 333, 220, 0, 221, 222, 223, 224,
	225, 334, 226, 227, 0, 228, 229, 230, 231, 232,
	234, 235, 233, 236, 237, 238, 239, 0, 240, 410,
	241, 242, 335, 243, 0, 247, 248, 249, 250, 0,
	252, 336, 251, 253, 254, 703, 255, 244, 245, 256,
	411, 257, 337, 338, 258, 0, 264, 259, 260, 246,
	261, 263, 339, 262, 711, 0, 265, 0, 266, 267,
	268, 269, 270, 271, 272, 0, 341, 342, 343, 0,
	0, 273, 274, 712, 713, 0, 275, 276, 277, 278,
	0, 0, 279, 280, 281, 282, 704, 283, 0, 346,
	284, 285, 286, 347, 348, 0, 0, 287, 0, 565,
	0, 0, 288, 289, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 141, 0, 142, 0,
	0, 0, 0, 293, 0, 0, 0, 1832, 143, 144,
	145, 294, 295, 296, 297, 146, 298, 299, 0, 147,
	300, 301, 148, 149, 0, 0, 302, 303, 304, 0,
	150, 305, 0, 398, 0, 151, 152, 153, 0, 154,
	0, 155, 156, 157, 0, 399, 158, 159, 0, 0,
	0, 0, 0, 0, 0, 160, 161, 352, 162, 306,
	163, 307, 308, 0, 164, 0, 165, 0, 166, 0,
	0, 167, 168, 0, 169, 0, 0, 0, 309, 170,
	171, 172, 310, 311, 0, 0, 0, 173, 174, 312,
	313, 314, 0, 175, 0, 176, 0, 0, 400, 0,
	177, 315, 0, 316, 0, 178, 179, 180, 181, 317,
	318, 402, 0, 185, 0, 182, 0, 401, 183, 319,
	184, 320, 321, 322, 323, 324, 0, 325, 0, 403,
	186, 187, 188, 404, 189, 190, 191, 0, 193, 192,
	0, 326, 405, 194, 406, 0, 195, 0, 0, 196,
	0, 197, 198, 199, 201, 327, 200, 407, 202, 203,
	205, 204, 0, 0, 0, 328, 206, 329, 207, 208,
	0, 209, 0, 0, 210, 0, 0, 211, 330, 408,
	212, 409, 331, 213, 214, 215, 216, 217, 0, 218,
	332, 219, 333, 220, 0, 221, 222, 223, 224, 225,
	334, 226, 227, 0, 228, 229, 230, 231, 232, 234,
	235, 233, 236, 237, 238, 239, 0, 240, 410, 241,
	242, 335, 243, 0, 247, 248, 249, 250, 124, 252,
	336, 251, 253, 254, 0, 255, 244, 245, 256, 411,
	257, 337, 338, 258, 0, 264, 259, 260, 246, 261,
	263, 339, 262, 340, 0, 265, 128, 266, 267, 268,
	269, 270, 271, 272, 0, 341, 342, 343, 0, 0,
	273, 274, 344, 345, 0, 275, 276, 277, 278, 0,
	0, 279, 280, 281, 282, 0, 283, 0, 346, 284,
	285, 286, 649, 348, 0, 0, 287, 0, 0, 0,
	122, 288, 289, 290, 291, 292, 0, 123, 565, 562,
	0, 563, 558, 553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 141, 113, 142, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 143, 144, 145,
	294, 295, 296, 297, 146, 298, 299, 0, 147, 300,
	301, 148, 149, 0, 0, 302, 303, 304, 0, 150,
	305, 0, 398, 0, 151, 152, 153, 0, 154, 0,
	155, 156, 157, 0, 399, 158, 159, 0, 0, 0,
	0, 0, 0, 0, 160, 161, 352, 162, 306, 163,
	307, 308, 1083, 164, 0, 165, 0, 166, 0, 0,
	167, 168, 0, 169, 0, 0, 0, 309, 170, 171,
	172, 310, 311, 555, 0, 0, 173, 174, 312, 313,
	314, 0, 175, 0, 176, 0, 0, 400, 0, 177,
	315, 0, 316, 0, 178, 179, 180, 181, 317, 318,
	402, 0, 185, 0, 182, 0, 401, 183, 319, 184,
	320, 321, 322, 323, 324, 0, 325, 0, 403, 186,
	187, 188, 404, 189, 190, 191, 0, 193, 192, 0,
	326, 405, 194, 406, 0, 195, 0, 0, 196, 0,
	197, 198, 199, 201, 327, 200, 407, 202, 203, 205,
	204, 0, 0, 0, 328, 206, 329, 207, 208, 0,
	209, 556, 0, 210, 0, 0, 211, 330, 408, 212,
	409, 331, 213, 214, 215, 216, 217, 0, 218, 332,
	219, 333, 220, 0, 221, 222, 223, 224, 225, 334,
	226, 227, 0, 228, 229, 230, 231, 232, 234, 235,
	233, 236, 237, 238, 239, 0, 240, 410, 241, 242,
	335, 243, 0, 247, 248, 249, 250, 0, 252, 336,
	251, 253, 254, 0, 255, 244, 245, 256, 411, 257,
	337, 338, 258, 0, 264, 259, 260, 246, 261, 263,
	339, 262, 340, 0, 265, 0, 266, 267, 268, 269,
	270, 271, 272, 0, 341, 342, 343, 0, 0, 273,
	274, 344, 345, 554, 275, 276, 277, 278, 0, 0,
	279, 280, 281, 282, 0, 283, 0, 346, 284, 285,
	286, 347, 348, 0, 0, 287, 0, 0, 0, 0,
	288, 289, 290, 291, 292, 565, 562, 0, 563, 558,
	553, 0, 0, 0, 0, 0, 564, 559, 0, 0,
	0, 140, 141, 0, 142, 0, 0, 0, 0, 293,
	0, 0, 0, 0, 143, 144, 145, 294, 295, 296,
	297, 146, 298, 299, 0, 147, 300, 301, 148, 149,
	0, 0, 302, 303, 304, 0, 150, 305, 0, 398,
	0, 151, 152, 153, 0, 154, 0, 155, 156, 157,
	0, 399, 158, 159, 0, 0, 0, 0, 0, 0,
	0, 160, 161, 352, 162, 306, 163, 307, 308, 1080,
	164, 0, 165, 0, 166, 0, 0, 167, 168, 0,
	169, 0, 0, 0, 309, 170, 171, 172, 310, 311,
	555, 0, 0, 173, 174, 312, 313, 314, 0, 175,
	0, 176, 0, 0, 400, 0, 177, 315, 0, 316,
	0, 178, 179, 180, 181, 317, 318, 402, 0, 185,
	0, 182, 0, 401, 183, 319, 184, 320, 321, 322,
	323, 324, 0, 325, 0, 403, 186, 187, 188, 404,
	189, 190, 191, 0, 193, 192, 0, 326, 405, 194,
	406, 0, 195, 0, 0, 196, 0, 197, 198, 199,
	201, 327, 200, 407, 202, 203, 205, 204, 0, 0,
	0, 328, 206, 329, 207, 208, 0, 209, 556, 0,
	210, 0, 0, 211, 330, 408, 212, 409, 331, 213,
	214, 215, 216, 217, 0, 218, 332, 219, 333, 220,
	0, 221, 222, 223, 224, 225, 334, 226, 227, 0,
	228, 229, 230, 231, 232, 234, 235, 233, 236, 237,
	238, 239, 0, 240, 410, 241, 242, 335, 243, 0,
	247, 248, 249, 250, 0, 252, 336, 251, 253, 254,
	0, 255, 244, 245, 256, 411, 257, 337, 338, 258,
	0, 264, 259, 260, 246, 261, 263, 339, 262, 340,
	0, 265, 0, 266, 267, 268, 269, 270, 271, 272,
	0, 341, 342, 343, 0, 0, 273, 274, 344, 345,
	554, 275, 276, 277, 278, 0, 0, 279, 280, 281,
	282, 0, 283, 0, 346, 284, 285, 286, 347, 348,
	0, 0, 287, 0, 0, 0, 0, 288, 289, 290,
	291, 292, 565, 562, 0, 563, 558, 553, 0, 0,
	0, 0, 0, 564, 559, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 398, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 399, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 779, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 555, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 400, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 402, 0, 185, 0, 182, 0,
	401, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 403, 186, 187, 188, 404, 189, 190, 191,
	0, 193, 192, 0, 326, 405, 194, 406, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	407, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 556, 0, 210, 0, 0,
	211, 330, 408, 212, 409, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 410, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 411, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 554, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 0, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 565,
	562, 0, 563, 558, 553, 0, 0, 0, 0, 0,
	564, 559, 0, 0, 0, 140, 141, 0, 142, 0,
	0, 0, 0, 293, 0, 0, 0, 0, 143, 144,
	145, 294, 295, 296, 297, 146, 298, 299, 0, 147,
	300, 301, 148, 149, 0, 0, 302, 303, 304, 0,
	150, 305, 0, 398, 0, 151, 152, 153, 0, 154,
	0, 155, 156, 157, 0, 399, 158, 159, 0, 0,
	0, 0, 0, 0, 0, 160, 161, 352, 162, 306,
	163, 307, 308, 0, 164, 0, 165, 0, 166, 0,
	0, 167, 168, 0, 169, 0, 0, 0, 309, 170,
	171, 172, 310, 311, 555, 0, 0, 173, 174, 312,
	313, 314, 0, 175, 0, 176, 0, 0, 400, 0,
	177, 315, 0, 316, 0, 178, 179, 180, 181, 317,
	318, 402, 0, 185, 0, 182, 0, 401, 183, 319,
	184, 320, 321, 322, 323, 324, 0, 325, 0, 403,
	186, 187, 188, 404, 189, 190, 191, 0, 193, 192,
	0, 326, 405, 194, 406, 0, 195, 0, 0, 196,
	0, 197, 198, 199, 201, 327, 200, 407, 202, 203,
	205, 204, 0, 0, 0, 328, 206, 329, 207, 208,
	0, 209, 556, 0, 210, 0, 0, 211, 330, 408,
	212, 409, 331, 213, 214, 215, 216, 217, 0, 218,
	332, 219, 333, 220, 0, 221, 222, 223, 224, 225,
	334, 226, 227, 0, 228, 229, 230, 231, 232, 234,
	235, 233, 236, 237, 238, 239, 0, 240, 410, 241,
	242, 335, 243, 0, 247, 248, 249, 250, 0, 252,
	336, 251, 253, 254, 0, 255, 244, 245, 256, 411,
	257, 337, 338, 258, 0, 264, 259, 260, 246, 261,
	263, 339, 262, 340, 0, 265, 0, 266, 267, 268,
	269, 270, 271, 272, 0, 341, 342, 343, 0, 0,
	273, 274, 344, 345, 554, 275, 276, 277, 278, 0,
	0, 279, 280, 281, 282, 0, 283, 0, 346, 284,
	285, 286, 347, 348, 0, 137, 287, 0, 0, 0,
	0, 288, 289, 290, 291, 292, 0, 0, 0, 0,
	0, 140, 141, 0, 142, 0, 0, 564, 559, 293,
	0, 0, 0, 0, 143, 144, 145, 294, 295, 296,
	297, 146, 298, 299, 0, 147, 300, 301, 148, 149,
	0, 0, 302, 303, 304, 0, 150, 305, 0, 0,
	0, 151, 152, 153, 0, 154, 0, 155, 156, 157,
	0, 0, 158, 159, 0, 0, 0, 0, 0, 0,
	0, 160, 161, 352, 162, 306, 163, 307, 308, 0,
	164, 0, 165, 0, 166, 0, 0, 167, 168, 0,
	169, 0, 0, 0, 309, 170, 171, 172, 310, 311,
	0, 0, 0, 173, 174, 312, 313, 314, 0, 175,
	0, 176, 0, 0, 0, 0, 177, 315, 0, 316,
	0, 178, 179, 180, 181, 317, 318, 0, 0, 185,
	0, 182, 0, 0, 183, 319, 184, 320, 321, 322,
	323, 324, 0, 325, 0, 0, 186, 187, 188, 0,
	189, 190, 191, 0, 193, 192, 0, 326, 0, 194,
	0, 0, 195, 0, 0, 196, 0, 197, 198, 199,
	201, 327, 200, 0, 202, 203, 205, 204, 0, 0,
	0, 328, 206, 329, 207, 208, 0, 209, 0, 620,
	210, 0, 0, 211, 330, 0, 212, 0, 331, 213,
	214, 215, 216, 217, 0, 218, 332, 219, 333, 220,
	0, 221, 222, 223, 224, 225, 334, 226, 227, 0,
	228, 229, 230, 231, 232, 234, 235, 233, 236, 237,
	238, 239, 0, 240, 0, 241, 242, 335, 243, 0,
	247, 248, 249, 250, 124, 252, 336, 251, 253, 254,
	0, 255, 244, 245, 256, 0, 257, 337, 338, 258,
	0, 264, 259, 260, 246, 261, 263, 339, 262, 340,
	0, 265, 128, 266, 267, 268, 269, 270, 271, 272,
	0, 341, 342, 343, 0, 0, 273, 274, 344, 345,
	0, 275, 276, 277, 278, 0, 0, 279, 280, 281,
	282, 0, 283, 0, 346, 284, 285, 286, 649, 348,
	0, 0, 287, 0, 137, 0, 122, 288, 289, 290,
	291, 292, 0, 123, 0, 0, 0, 0, 0, 0,
	140, 141, 0, 142, 0, 0, 0, 0, 293, 0,
	1471, 0, 1476, 143, 144, 145, 294, 295, 296, 297,
	146, 298, 299, 0, 147, 300, 301, 148, 149, 0,
	0, 302, 303, 304, 0, 150, 305, 0, 0, 0,
	151, 152, 153, 0, 154, 0, 155, 156, 157, 0,
	0, 158, 159, 0, 0, 0, 0, 0, 0, 0,
	160, 161, 352, 162, 306, 163, 307, 308, 0, 164,
	0, 165, 0, 166, 0, 0, 167, 168, 0, 169,
	0, 0, 0, 309, 170, 171, 172, 310, 311, 0,
	0, 0, 173, 174, 312, 313, 314, 0, 175, 0,
	176, 0, 0, 0, 0, 177, 315, 0, 316, 0,
	178, 179, 180, 181, 317, 318, 0, 0, 185, 0,
	182, 0, 0, 183, 319, 184, 320, 321, 322, 323,
	324, 0, 325, 0, 0, 186, 187, 188, 0, 189,
	190, 191, 0, 193, 192, 0, 326, 0, 194, 0,
	0, 195, 0, 0, 196, 0, 197, 198, 199, 201,
	327, 200, 0, 202, 203, 205, 204, 0, 0, 0,
	328, 206, 329, 207, 208, 0, 209, 0, 0, 210,
	0, 0, 211, 330, 0, 212, 0, 331, 213, 214,
	215, 216, 217, 0, 218, 332, 219, 333, 220, 0,
	221, 222, 223, 224, 225, 334, 226, 227, 0, 228,
	229, 230, 231, 232, 234, 235, 233, 236, 237, 238,
	239, 0, 240, 0, 241, 242, 335, 243, 0, 247,
	248, 249, 250, 124, 252, 336, 251, 253, 254, 0,
	255, 244, 245, 256, 0, 257, 337, 338, 258, 0,
	264, 259, 260, 246, 261, 263, 339, 262, 340, 0,
	265, 128, 266, 267, 268, 269, 270, 271, 272, 0,
	341, 342, 343, 0, 0, 273, 274, 344, 345, 0,
	275, 276, 277, 278, 0, 0, 279, 280, 281, 282,
	0, 283, 0, 346, 284, 285, 286, 649, 348, 0,
	0, 287, 0, 137, 0, 122, 288, 289, 290, 291,
	292, 0, 123, 0, 0, 0, 0, 0, 0, 140,
	141, 0, 142, 0, 0, 0, 0, 293, 0, 0,
	0, 113, 143, 144, 145, 294, 295, 296, 297, 146,
	298, 299, 0, 147, 300, 301, 148, 149, 0, 0,
	302, 303, 304, 0, 150, 305, 0, 0, 0, 151,
	152, 153, 0, 154, 0, 155, 156, 157, 0, 0,
	158, 159, 0, 0, 0, 0, 0, 0, 0, 160,
	161, 352, 162, 306, 163, 307, 308, 0, 164, 0,
	165, 0, 166, 0, 0, 167, 168, 0, 169, 0,
	0, 0, 309, 170, 171, 172, 310, 311, 0, 0,
	0, 173, 174, 312, 313, 314, 0, 175, 0, 176,
	0, 0, 0, 0, 177, 315, 0, 316, 0, 178,
	179, 180, 181, 317, 318, 0, 0, 185, 0, 182,
	0, 0, 183, 319, 184, 320, 321, 322, 323, 324,
	0, 325, 0, 0, 186, 187, 188, 0, 189, 190,
	191, 0, 193, 192, 0, 326, 0, 194, 0, 0,
	195, 0, 0, 196, 0, 197, 198, 199, 201, 327,
	200, 0, 202, 203, 205, 204, 0, 0, 0, 328,
	206, 329, 207, 208, 0, 209, 0, 620, 210, 0,
	0, 211, 330, 0, 212, 0, 331, 213, 214, 215,
	216, 217, 0, 218, 332, 219, 333, 220, 0, 221,
	222, 223, 224, 225, 334, 226, 227, 0, 228, 229,
	230, 231, 232, 234, 235, 233, 236, 237, 238, 239,
	0, 240, 0, 241, 242, 335, 243, 0, 247, 248,
	249, 250, 0, 252, 336, 251, 253, 254, 0, 255,
	244, 245, 256, 0, 257, 337, 338, 258, 0, 264,
	259, 260, 246, 261, 263, 339, 262, 340, 0, 265,
	0, 266, 267, 268, 269, 270, 271, 272, 0, 341,
	342, 343, 0, 0, 273, 274, 344, 345, 0, 275,
	276, 277, 278, 0, 0, 279, 280, 281, 282, 0,
	283, 0, 346, 284, 285, 286, 347, 348, 0, 0,
	287, 0, 137, 0, 0, 288, 289, 290, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 1471, 0,
	1476, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 0, 0, 287,
	0, 0, 137, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	891, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 0, 0, 287,
	0, 137, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 141, 0,
	142, 0, 0, 0, 0, 293, 0, 0, 0, 1209,
	143, 144, 145, 294, 295, 296, 297, 146, 298, 299,
	0, 147, 300, 301, 148, 149, 0, 0, 302, 303,
	304, 0, 150, 305, 0, 0, 0, 151, 152, 153,
	0, 154, 0, 155, 156, 157, 0, 0, 158, 159,
	0, 0, 0, 0, 0, 0, 0, 160, 161, 352,
	162, 306, 163, 307, 308, 0, 164, 0, 165, 0,
	166, 0, 0, 167, 168, 0, 169, 0, 0, 0,
	309, 170, 171, 172, 310, 311, 0, 0, 0, 173,
	174, 312, 313, 314, 0, 175, 0, 176, 0, 0,
	0, 0, 177, 315, 0, 316, 0, 178, 179, 180,
	181, 317, 318, 0, 0, 185, 0, 182, 0, 0,
	183, 319, 184, 320, 321, 322, 323, 324, 0, 325,
	0, 0, 186, 187, 188, 0, 189, 190, 191, 0,
	193, 192, 0, 326, 0, 194, 0, 0, 195, 0,
	0, 196, 0, 197, 198, 199, 201, 327, 200, 0,
	202, 203, 205, 204, 0, 0, 0, 328, 206, 329,
	207, 208, 0, 209, 0, 0, 210, 0, 0, 211,
	330, 0, 212, 0, 331, 213, 214, 215, 216, 217,
	0, 218, 332, 219, 333, 220, 0, 221, 222, 223,
	224, 225, 334, 226, 227, 0, 228, 229, 230, 231,
	232, 234, 235, 233, 236, 237, 238, 239, 0, 240,
	0, 241, 242, 335, 243, 0, 247, 248, 249, 250,
	0, 252, 336, 251, 253, 254, 0, 255, 244, 245,
	256, 0, 257, 337, 338, 258, 0, 264, 259, 260,
	246, 261, 263, 339, 262, 340, 0, 265, 0, 266,
	267, 268, 269, 270, 271, 272, 0, 341, 342, 343,
	0, 0, 273, 274, 344, 345, 0, 275, 276, 277,
	278, 0, 0, 279, 280, 281, 282, 0, 283, 0,
	346, 284, 285, 286, 347, 348, 0, 0, 287, 0,
	137, 0, 0, 288, 289, 290, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 141, 0, 142,
	0, 0, 0, 0, 293, 0, 0, 0, 1767, 143,
	144, 145, 294, 295, 296, 297, 146, 298, 299, 0,
	147, 300, 301, 148, 149, 0, 0, 302, 303, 304,
	0, 150, 305, 0, 0, 0, 151, 152, 153, 0,
	154, 0, 155, 156, 157, 0, 0, 158, 159, 0,
	0, 0, 0, 0, 0, 0, 160, 161, 352, 162,
	306, 163, 307, 308, 0, 164, 0, 165, 0, 166,
	0, 0, 167, 168, 0, 169, 0, 0, 0, 309,
	170, 171, 172, 310, 311, 0, 0, 0, 173, 174,
	312, 313, 314, 0, 175, 0, 176, 0, 0, 0,
	0, 177, 315, 0, 316, 0, 178, 179, 180, 181,
	317, 318, 0, 0, 185, 0, 182, 0, 0, 183,
	319, 184, 320, 321, 322, 323, 324, 0, 325, 0,
	0, 186, 187, 188, 0, 189, 190, 191, 0, 193,
	192, 0, 326, 0, 194, 0, 0, 195, 0, 0,
	196, 0, 197, 198, 199, 201, 327, 200, 0, 202,
	203, 205, 204, 0, 0, 0, 328, 206, 329, 207,
	208, 0, 209, 0, 0, 210, 0, 0, 211, 330,
	0, 212, 0, 331, 213, 214, 215, 216, 217, 0,
	218, 332, 219, 333, 220, 0, 221, 222, 223, 224,
	225, 334, 226, 227, 0, 228, 229, 230, 231, 232,
	234, 235, 233, 236, 237, 238, 239, 0, 240, 0,
	241, 242, 335, 243, 0, 247, 248, 249, 250, 0,
	252, 336, 251, 253, 254, 0, 255, 244, 245, 256,
	0, 257, 337, 338, 258, 0, 264, 259, 260, 246,
	261, 263, 339, 262, 340, 0, 265, 0, 266, 267,
	268, 269, 270, 271, 272, 0, 341, 342, 343, 0,
	0, 273, 274, 344, 345, 0, 275, 276, 277, 278,
	0, 0, 279, 280, 281, 282, 0, 283, 0, 346,
	284, 285, 286, 347, 348, 0, 0, 287, 0, 0,
	0, 0, 288, 289, 290, 291, 292, 689, 678, 679,
	676, 677, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 141, 0, 142, 882, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	721, 296, 722, 146, 723, 724, 0, 147, 300, 301,
	148, 149, 0, 0, 725, 726, 304, 0, 150, 305,
	0, 398, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 399, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 727, 163, 728,
	729, 0, 164, 0, 165, 0, 166, 0, 0, 720,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 685, 0, 0, 173, 174, 730, 731, 732,
	0, 175, 0, 176, 0, 0, 400, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 402,
	0, 185, 0, 182, 0, 401, 183, 733, 184, 734,
	735, 736, 737, 738, 0, 696, 0, 403, 186, 187,
	188, 404, 189, 190, 191, 0, 193, 192, 0, 326,
	405, 194, 406, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 407, 202, 203, 205, 204,
	0, 0, 686, 328, 206, 739, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 408, 212, 409,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 740, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 410, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 411, 257, 741,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 742,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 743, 744, 0, 0, 273, 274,
	344, 345, 684, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 745, 565, 562, 287, 0, 0, 828, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 398, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 399, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 400, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 402, 0, 185, 0, 182, 0,
	401, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 403, 186, 187, 188, 404, 189, 190, 191,
	0, 193, 192, 0, 326, 405, 194, 406, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	407, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 408, 212, 409, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 410, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 411, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 133, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 132, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 565, 562, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 136, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 398, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 399, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 400, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 402, 0, 185, 0, 182, 0,
	401, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 403, 186, 187, 188, 404, 189, 190, 191,
	0, 193, 192, 0, 326, 405, 194, 406, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	407, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 408, 212, 409, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 410, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 411, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 565, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 136, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 398, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 399, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 400, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 402, 0, 185, 0, 182, 0,
	401, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 403, 186, 187, 188, 404, 189, 190, 191,
	0, 193, 192, 0, 326, 405, 194, 406, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	407, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 408, 212, 409, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 410, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 411, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 1397, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 1395, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 1394, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 1399, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 0,
	0, 185, 1392, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 1398, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 1393, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 1397, 150, 305, 0, 0, 1444, 151, 152,
	153, 0, 154, 1395, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 1399,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 1443, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 1398, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 1447, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 1899, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 620, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 1135, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 865, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 620, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 859, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 620, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	638, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 355, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 354, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 1677, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 1675, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 1670, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 499, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 1100, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 901, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 0, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 862, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 807, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 805, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 801, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 799, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 796, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 792, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 200, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 341, 342, 343, 0, 0, 273, 274,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 787, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 763, 0, 150, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 195, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 521, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 335,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	253, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 517, 342, 343, 0, 0, 273, 764,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 215, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 224, 225, 334, 607, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 243, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 137, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 140, 141, 0, 142, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 143, 144, 145, 294,
	295, 296, 297, 146, 298, 299, 0, 147, 300, 301,
	148, 149, 0, 0, 302, 303, 304, 0, 511, 305,
	0, 0, 0, 151, 152, 153, 0, 154, 0, 155,
	156, 157, 0, 0, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 352, 162, 306, 163, 307,
	308, 0, 164, 0, 165, 0, 166, 0, 0, 167,
	168, 0, 169, 0, 0, 0, 309, 170, 171, 172,
	310, 311, 0, 0, 0, 173, 174, 312, 313, 314,
	0, 175, 0, 176, 0, 0, 0, 0, 177, 315,
	0, 316, 0, 178, 179, 180, 181, 317, 318, 0,
	0, 185, 0, 182, 0, 0, 183, 319, 184, 320,
	321, 322, 323, 324, 0, 325, 0, 0, 186, 187,
	188, 0, 189, 190, 191, 0, 193, 192, 0, 326,
	0, 194, 0, 0, 510, 0, 0, 196, 0, 197,
	198, 199, 201, 327, 521, 0, 202, 203, 205, 204,
	0, 0, 0, 328, 206, 329, 207, 208, 0, 209,
	0, 0, 210, 0, 0, 211, 330, 0, 212, 0,
	331, 213, 214, 215, 216, 217, 0, 218, 332, 219,
	333, 220, 0, 221, 222, 223, 224, 225, 334, 226,
	227, 0, 228, 229, 230, 231, 232, 234, 235, 233,
	236, 237, 238, 239, 0, 240, 0, 241, 242, 512,
	243, 0, 247, 248, 249, 250, 0, 252, 336, 251,
	513, 254, 0, 255, 244, 245, 256, 0, 257, 337,
	338, 258, 0, 264, 259, 260, 246, 261, 263, 339,
	262, 340, 0, 265, 0, 266, 267, 268, 269, 270,
	271, 272, 0, 517, 342, 343, 0, 0, 273, 515,
	344, 345, 0, 275, 276, 277, 278, 0, 0, 279,
	280, 281, 282, 0, 283, 0, 346, 284, 285, 286,
	347, 348, 137, 0, 287, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 0, 0, 0, 0, 140, 141,
	0, 142, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 143, 144, 145, 294, 295, 296, 297, 146, 298,
	299, 0, 147, 300, 301, 148, 149, 0, 0, 302,
	303, 304, 0, 150, 305, 0, 0, 0, 151, 152,
	153, 0, 154, 0, 155, 156, 157, 0, 0, 158,
	159, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	352, 162, 306, 163, 307, 308, 0, 164, 0, 165,
	0, 166, 0, 0, 167, 168, 0, 169, 0, 0,
	0, 309, 170, 171, 172, 310, 311, 0, 0, 0,
	173, 174, 312, 313, 314, 0, 175, 0, 176, 0,
	0, 0, 0, 177, 315, 0, 316, 0, 178, 179,
	180, 181, 317, 318, 0, 0, 185, 0, 182, 0,
	0, 183, 319, 184, 320, 321, 322, 323, 324, 0,
	325, 0, 0, 186, 187, 188, 0, 189, 190, 191,
	0, 193, 192, 0, 326, 0, 194, 0, 0, 195,
	0, 0, 196, 0, 197, 198, 199, 201, 327, 200,
	0, 202, 203, 205, 204, 0, 0, 0, 328, 206,
	329, 207, 208, 0, 209, 0, 0, 210, 0, 0,
	211, 330, 0, 212, 0, 331, 213, 214, 0, 216,
	217, 0, 218, 332, 219, 333, 220, 0, 221, 222,
	223, 0, 225, 334, 226, 227, 0, 228, 229, 230,
	231, 232, 234, 235, 233, 236, 237, 238, 239, 0,
	240, 0, 241, 242, 335, 0, 0, 247, 248, 249,
	250, 0, 252, 336, 251, 253, 254, 0, 255, 244,
	245, 256, 0, 257, 337, 338, 258, 0, 264, 259,
	260, 246, 261, 263, 339, 262, 340, 0, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 0, 341, 342,
	343, 0, 0, 273, 274, 344, 345, 0, 275, 276,
	277, 278, 0, 0, 279, 280, 281, 282, 0, 283,
	0, 346, 284, 285, 286, 347, 348, 0, 0, 287,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 908,
	909, 0, 928, 929, 930, 938, 939, 940, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 911, 0, 0, 942, 0, 908, 909, 0,
	928, 929, 930, 938, 939, 940, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 910, 0, 0, 0,
	911, 0, 925, 942, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 910, 0, 0, 0, 911, 0,
	925, 942, 0, 0, 908, 909, 0, 928, 929, 930,
	938, 939, 940, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 910, 0, 0, 0, 916, 911, 925, 0,
	942, 0, 908, 909, 0, 928, 929, 930, 938, 939,
	940, 0, 0, 0, 0, 935, 943, 0, 931, 0,
	0, 910, 0, 0, 916, 911, 0, 925, 942, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 943, 0, 0, 0, 933, 910,
	0, 0, 916, 0, 926, 925, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 943, 0, 0, 0, 933, 0, 0, 932,
	0, 916, 926, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 943, 0, 0, 933, 0, 0, 932, 0, 916,
	926, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 927, 935, 943,
	0, 0, 0, 933, 0, 932, 0, 0, 0, 926,
	0, 0, 0, 936, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 927, 0, 0, 0, 0,
	0, 933, 0, 0, 932, 0, 0, 926, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 0, 927, 922, 923, 924, 937, 0, 921, 919,
	920, 912, 913, 914, 915, 917, 918, 0, 936, 0,
	0, 2138, 0, 0, 0, 0, 0, 0, 934, 0,
	927, 922, 923, 924, 937, 0, 921, 919, 920, 912,
	913, 914, 915, 917, 918, 0, 936, 0, 0, 2081,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 937, 0, 921, 919, 920, 912, 913, 914,
	915, 917, 918, 0, 0, 0, 0, 2058, 0, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 922, 923,
	924, 937, 0, 921, 919, 920, 912, 913, 914, 915,
	917, 918, 0, 0, 0, 0, 2053, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 922, 923, 924, 937,
	0, 921, 919, 920, 912, 913, 914, 915, 917, 918,
	0, 0, 908, 909, 2049, 928, 929, 930, 938, 939,
	940, 0, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 0, 911, 0, 0, 942, 0,
	908, 909, 0, 928, 929, 930, 938, 939, 940, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 910,
	0, 0, 0, 911, 0, 925, 942, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 910, 0, 0,
	0, 911, 0, 925, 942, 0, 0, 908, 909, 0,
	928, 929, 930, 938, 939, 940, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 910, 0, 0, 0, 916,
	911, 925, 0, 942, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 935, 943,
	0, 931, 0, 0, 910, 0, 0, 916, 911, 0,
	925, 942, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 943, 0, 0,
	0, 933, 910, 0, 0, 916, 0, 926, 925, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 943, 0, 0, 0, 933,
	0, 0, 932, 0, 916, 926, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 943, 0, 0, 933, 0, 0,
	932, 0, 916, 926, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 935, 943, 0, 0, 0, 933, 0, 932, 0,
	0, 0, 926, 0, 0, 0, 936, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 933, 0, 0, 932, 0, 0,
	926, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 927, 922, 923, 924, 937,
	0, 921, 919, 920, 912, 913, 914, 915, 917, 918,
	0, 936, 0, 0, 1975, 0, 0, 0, 0, 0,
	0, 934, 0, 927, 922, 923, 924, 937, 0, 921,
	919, 920, 912, 913, 914, 915, 917, 918, 0, 936,
	0, 0, 1946, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 922, 923, 924, 937, 0, 921, 919, 920,
	912, 913, 914, 915, 917, 918, 0, 0, 0, 0,
	1945, 0, 0, 0, 0, 0, 0, 0, 934, 0,
	0, 922, 923, 924, 937, 0, 921, 919, 920, 912,
	913, 914, 915, 917, 918, 0, 0, 0, 0, 1851,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 937, 0, 921, 919, 920, 912, 913, 914,
	915, 917, 918, 0, 0, 908, 909, 1770, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 911, 0,
	0, 942, 0, 908, 909, 0, 928, 929, 930, 938,
	939, 940, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 910, 0, 0, 0, 911, 0, 925, 942,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 0, 0, 0, 0, 0, 0, 931, 0, 0,
	910, 0, 0, 0, 911, 0, 925, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 910, 0,
	0, 0, 916, 0, 925, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 943, 0, 0, 0, 0, 0, 0, 0,
	916, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 935,
	943, 0, 0, 0, 933, 0, 0, 0, 916, 0,
	926, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 943, 0,
	0, 0, 933, 0, 0, 932, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 932, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 927, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 36, 116, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 927, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 40, 936, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 0, 49, 0, 0, 936, 110, 0, 0, 119,
	0, 0, 0, 55, 0, 56, 934, 0, 0, 922,
	923, 924, 937, 0, 921, 919, 920, 912, 913, 914,
	915, 917, 918, 57, 0, 0, 0, 1746, 0, 58,
	0, 0, 0, 0, 934, 0, 0, 922, 923, 924,
	937, 0, 921, 919, 920, 912, 913, 914, 915, 917,
	918, 0, 0, 0, 0, 1286, 1568, 1569, 0, 1586,
	1587, 1588, 934, 0, 0, 922, 923, 924, 937, 0,
	921, 919, 920, 912, 913, 914, 915, 917, 918, 908,
	909, 1530, 928, 929, 930, 938, 939, 940, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 911, 0, 0, 942, 0, 0, 0, 1583,
	0, 59, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 0, 925, 0, 0, 66, 67, 37, 0, 61,
	0, 62, 0, 120, 0, 0, 0, 0, 63, 0,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 73,
	0, 0, 115, 1574, 0, 0, 0, 0, 0, 1568,
	1569, 117, 1586, 1587, 1588, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 1739, 916, 2246, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 0, 0, 95,
	1589, 0, 0, 0, 931, 935, 943, 0, 114, 0,
	0, 911, 0, 0, 942, 0, 127, 0, 0, 0,
	0, 1584, 1583, 941, 122, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 910, 0, 0, 933, 0,
	0, 925, 0, 0, 926, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 1574, 0, 0, 0,
	0, 0, 0, 0, 0, 2245, 0, 0, 0, 0,
	0, 0, 0, 0, 1585, 916, 0, 1600, 0, 0,
	1599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1589, 935, 943, 0, 927, 0, 0,
	908, 909, 0, 928, 929, 930, 938, 939, 940, 0,
	0, 0, 941, 936, 1584, 0, 931, 0, 0, 0,
	0, 1426, 0, 911, 0, 0, 942, 933, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 910, 0, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 932, 0,
	1580, 1581, 1582, 0, 0, 1579, 1577, 1578, 1570, 1571,
	1572, 1573, 1575, 1576, 0, 0, 0, 0, 0, 0,
	934, 0, 1427, 922, 923, 924, 937, 1585, 921, 919,
	920, 912, 913, 914, 915, 917, 918, 0, 0, 0,
	0, 0, 1183, 0, 0, 0, 927, 916, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 0, 0, 0,
	0, 0, 936, 0, 931, 0, 935, 943, 1182, 0,
	0, 911, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 910, 0, 0, 0, 933,
	0, 925, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 1580, 1581, 1582, 0, 0, 1579, 1577,
	1578, 1570, 1571, 1572, 1573, 1575, 1576, 0, 0, 934,
	932, 0, 922, 923, 924, 937, 0, 921, 919, 920,
	912, 913, 914, 915, 917, 918, 0, 0, 0, 0,
	0, 0, 0, 908, 909, 916, 928, 929, 930, 938,
	939, 940, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 935, 943, 911, 0, 927, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 936, 0, 0, 0, 1568, 1569,
	910, 1586, 1587, 1588, 0, 0, 925, 933, 0, 0,
	0, 0, 0, 926, 1738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1583, 0, 0, 0, 0, 0, 0, 0, 0,
	916, 934, 0, 0, 922, 923, 924, 937, 0, 921,
	919, 920, 912, 913, 914, 915, 917, 918, 0, 935,
	943, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 936, 908, 909, 1574, 928, 929, 930, 938,
	939, 940, 933, 0, 0, 0, 0, 0, 926, 931,
	0, 0, 0, 0, 0, 0, 911, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1589, 932, 546, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 1584, 0, 0, 0, 0, 0, 934,
	0, 0, 922, 923, 924, 937, 0, 921, 919, 920,
	912, 913, 914, 915, 917, 918, 0, 0, 0, 0,
	0, 927, 0, 908, 909, 0, 928, 929, 930, 938,
	939, 940, 0, 0, 0, 0, 0, 936, 0, 931,
	916, 0, 0, 0, 0, 0, 911, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 935,
	943, 0, 0, 0, 0, 0, 1585, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 925, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 934, 0, 0, 922, 923, 924,
	937, 0, 921, 919, 920, 912, 913, 914, 915, 917,
	918, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	916, 0, 0, 0, 0, 1606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 935,
	943, 0, 1580, 1581, 1582, 0, 0, 1579, 1577, 1578,
	1570, 1571, 1572, 1573, 1575, 1576, 0, 941, 0, 0,
	0, 927, 0, 908, 909, 0, 928, 929, 930, 938,
	939, 940, 933, 0, 0, 0, 0, 936, 926, 931,
	0, 0, 0, 1601, 0, 0, 911, 0, 0, 942,
	0, 0, 908, 909, 0, 928, 929, 930, 938, 939,
	940, 0, 1750, 932, 0, 0, 0, 0, 931, 0,
	910, 0, 0, 0, 0, 911, 925, 0, 942, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 934, 925, 0, 922, 923, 924,
	937, 927, 921, 919, 920, 912, 913, 914, 915, 917,
	918, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	916, 0, 0, 0, 0, 0, 0, 908, 909, 0,
	928, 929, 930, 938, 939, 940, 0, 0, 0, 935,
	943, 0, 0, 931, 0, 0, 0, 1559, 0, 916,
	911, 1568, 1569, 942, 1586, 1587, 1588, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 943,
	0, 0, 933, 0, 910, 0, 0, 0, 926, 0,
	925, 0, 0, 0, 934, 0, 941, 922, 923, 924,
	937, 0, 921, 919, 920, 912, 913, 914, 915, 917,
	918, 933, 0, 932, 1583, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1566, 0, 0, 0, 0,
	0, 927, 0, 935, 943, 0, 0, 0, 1574, 0,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 0, 933, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 908, 909, 0, 928,
	929, 930, 938, 939, 940, 0, 1584, 932, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 942, 0, 934, 0, 0, 922, 923, 924,
	937, 0, 921, 919, 920, 912, 913, 914, 915, 917,
	918, 0, 0, 910, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 934, 0, 927, 922, 923, 924, 937,
	0, 921, 919, 920, 912, 913, 914, 915, 917, 918,
	0, 936, 0, 0, 0, 0, 0, 0, 0, 1585,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 0, 0, 0, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 916, 911, 0, 0, 942, 0, 908,
	909, 0, 928, 929, 930, 938, 939, 940, 0, 0,
	0, 0, 935, 943, 0, 0, 0, 0, 910, 0,
	0, 0, 911, 0, 925, 942, 0, 0, 934, 0,
	941, 922, 923, 924, 937, 0, 921, 919, 920, 912,
	913, 914, 915, 917, 918, 933, 910, 0, 0, 0,
	0, 926, 925, 0, 0, 1580, 1581, 1582, 0, 0,
	1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575, 1576, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 943, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 935, 943, 0, 0, 0,
	933, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	936, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 0, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 927,
	922, 923, 924, 937, 0, 921, 919, 920, 912, 913,
	914, 915, 917, 918, 0, 936, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 908, 909, 927, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 911, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 0, 925, 0,
	0, 0, 934, 0, 0, 922, 923, 924, 937, 0,
	921, 919, 920, 912, 913, 914, 915, 917, 918, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 922, 923, 924, 937, 0, 921, 919,
	920, 912, 913, 914, 915, 917, 918, 0, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1033, 1023, 1052, 1015, 1043,
	1042, 935, 943, 1017, 1016, 0, 0, 0, 0, 1054,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	926, 0, 1048, 0, 1040, 1039, 0, 0, 0, 0,
	0, 0, 0, 0, 1038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1037, 1035, 1036, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1026, 1025, 1027, 1028, 1029, 1030, 1031, 0,
	1051, 0, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1041, 0, 0, 0, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1034, 0, 0, 0, 1221, 1219, 1220,
	1223, 1222, 0, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 937, 0, 921, 919, 920, 912, 913, 914,
	915, 917, 918, 1020, 1033, 1023, 1052, 1015, 1043, 1042,
	0, 0, 1017, 1016, 1032, 1021, 0, 0, 1054, 1053,
	0, 0, 0, 0, 1056, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 1049,
	1050, 0, 0, 0, 0, 0, 0, 573, 0, 0,
	0, 1048, 0, 1040, 1039, 0, 0, 0, 0, 571,
	0, 1022, 0, 1038, 0, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	572, 1037, 1035, 1036, 0, 574, 0, 0, 0, 0,
	580, 581, 0, 0, 590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 506, 575, 0,
	0, 1026, 1025, 1027, 1028, 1029, 1030, 1031, 0, 1051,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1019, 0, 0,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 1041,
	0, 0, 0, 1024, 577, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 579, 586, 0, 0, 0,
	0, 0, 1034, 0, 0, 0, 583, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1020, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1032, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 1049, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 0, 570, 587, 508, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 0, 0,
	0, 592, 0, 0, 0, 509, 0, 0, 0, 0,
	585, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591,
}
var sqlPact = [...]int{

	29129, -1000, 8, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17913, 17913, -1000, -1000,
	22008, -1000, -1000, -1000, -1000, -1000, -1000, 21693, 699, 874,
	-1000, -1000, -1000, -1000, -1000, 22008, 1521, 1081, 5297, 1093,
	22008, 1091, 1081, 23268, -1000, -1000, 23268, 1360, -1000, -1000,
	-1000, -1000, -1000, 27363, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 574, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 880, 682, 113,
	719, -1000, 653, -17, 14725, 31155, 456, 461, 456, 456,
	469, 678, 27048, 22008, 1477, 1, -1000, 249, 20118, 29129,
	538, -5, 18543, 22008, -1000, 11, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1282,
	312, 11, -1000, -1000, 21378, -1000, 1277, 1102, 1099, 20118,
	-1000, -1000, -1000, -1000, -1000, 261, -1000, 13415, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 898, -1000, -2, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11080, 259, 11080, 886, -1000, 22008,
	-1000, -1000, -1000, 1177, -1000, -1000, -1000, -1000, -1000, 360,
	1685, 626, 256, 26733, -1000, 943, -1000, 354, 444, -1000,
	-1000, 14398, 18, 20118, -1000, 11080, 11080, 26418, 22008, 22008,
	1123, 26103, -1000, 653, -1000, -1000, 25788, 25473, 25158, 24843,
	24528, -1000, 956, 1472, 1472, 1472, 1525, 90, 83, 113,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1657,
	-1000, -1000, -1000, -1000, 1672, -1000, -1000, -1000, -1000, -1000,
	1177, 17598, 677, 1482, 1272, -1000, 873, 1267, 1265, 1263,
	1257, 1256, -1000, 704, -1000, 1296, 458, -1000, 1255, 762,
	457, -1000, 1254, 1251, 943, -1000, 943, -1000, -1000, -1000,
	535, 23268, 21063, 24213, 22008, 20748, -6, 22008, -1000, 250,
	-6, 9719, 9719, -1000, -1000, 249, -1000, 9039, -1000, 299,
	16956, -1000, 17598, 18543, -5, -50, -1000, -1000, -1000, 4970,
	17598, 599, 15998, 11, -1000, -1000, -1000, -1000, -1000, 20118,
	22008, 22008, 631, 23898, -1000, 11080, -8, -1000, -1000, 249,
	17913, 1400, 30436, -1000, 11080, 11080, 11080, 11080, 11080, 778,
	280, -1000, 247, 246, 6305, -1000, -1000, 1669, -1000, -1000,
	-1000, 92, -1000, -1000, 11080, 11, -1000, -1000, -1000, -1000,
	242, 1681, -1000, 412, -1000, -1000, -1000, 372, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1294, 241, 231,
	226, -1000, -1000, -1000, -1000, 225, 223, 222, 220, 218,
	217, 216, 213, 202, 192, 191, 185, 183, 182, 180,
	726, -1000, 396, -1000, -1000, 396, 396, -1000, 166, 166,
	167, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 166,
	-1000, -1000, -1000, 334, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 176, 1563, 31097, 30436, 17913, -1000, -1000, -1000, -1000,
	22008, 11080, -1000, 1561, 943, -10, -1000, -1000, -1000, -1000,
	1007, 1006, 495, 714, 14071, 13744, 1428, -1000, -1000, -1000,
	17, 5297, 119, -1000, 30436, 30436, 175, 962, 377, 94,
	23583, 377, 948, -1000, 956, 118, 1378, -1000, 118, 1376,
	115, 1375, -1000, -132, -1000, 1365, -50, 1362, -1000, 842,
	1122, 10400, 1056, 11080, 113, -1000, -1000, 113, 113, 7326,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20433,
	-1000, -1000, 614, 22008, 1292, 17913, 22008, 22008, 22008, 22008,
	22008, -1000, -1000, 415, 1289, 22008, 1003, -1000, -1000, 22008,
	22008, 710, 572, -1000, -10, -1000, 23268, -1000, 824, 1356,
	410, 645, 1355, 705, 690, 1340, 22008, -6, 1559, 22008,
	101, -1000, 29648, -1000, 101, -1000, -9, -1000, 30436, -1000,
	-1000, -1000, 22008, 322, -1000, 22008, -1000, -1000, -99, -1000,
	-1000, 1243, -13, -1000, -1000, 385, 82, 1557, 82, 16318,
	-1000, 22008, -15, 30436, 1000, 18858, 533, -1000, 30878, 31097,
	5297, 553, 11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080,
	11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080,
	11080, 11080, 11080, 11080, 1051, 11080, 531, 11080, 11080, 11080,
	11080, 1241, 839, 162, 867, -1000, 1635, 1635, 1635, 30549,
	30549, 193, 280, -1000, 11080, -1000, 10060, 83, 28933, -7,
	-1000, -1000, -1000, 7666, 393, 30436, 11, 5964, -1000, 1666,
	848, 1279, 1187, 172, 80, 79, 77, 11080, 11080, 11760,
	11760, 11080, 12100, 11080, 11080, 6645, 11080, 11080, 11080, 11080,
	11080, 11080, -1000, 169, -1000, -1000, -1000, -1000, 1665, -1000,
	-1000, 1662, -1000, 545, 543, 1659, -17, -19, -1000, 1566,
	-1000, -1000, -1000, -1000, 89, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 167, 726, 166,
	166, 166, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 334,
	-1000, -1000, 396, 396, 396, -1000, -1000, 1232, -1000, 355,
	-24, 455, -10, 943, 817, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1680, -29,
	-1000, -1000, -29, -1000, -1000, 5297, -1000, -1000, 20118, -1000,
	-1000, 19173, 1553, 1335, -1000, 736, -1000, 1551, 22008, 866,
	946, -1000, 560, 1334, -1000, -1000, 22008, 22008, -1000, 22008,
	-1000, 22008, 22008, 5297, 22008, 22008, -1000, -1000, -1000, 30436,
	-1000, 352, -1000, -1000, 30436, 658, 1105, -1000, 1105, -35,
	-1000, 29540, 1078, 22008, -1000, -1000, -1000, -1000, -1000, 22008,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 356, -1000,
	-1000, -1000, -1000, 22008, 22008, 22008, -1000, -70, 757, -1000,
	19488, 1489, 1463, 1449, 20118, 1540, -17, 1227, 1539, -17,
	1223, 527, 22008, 526, 525, 20118, -1000, 164, -25, 385,
	9719, 15679, 5297, -1000, 385, 9039, -1000, 76, 1141, 878,
	-1000, 380, 17598, 598, 1220, 22008, 672, 11080, 730, -1000,
	15360, 403, 22008, 672, 81, -1000, -1000, -1000, 318, 22008,
	-1000, -1000, 11080, -1000, -1000, 22008, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 349, 448, 448, 625,
	625, 625, 625, 1621, 2505, 2561, 2163, 3808, 3808, 3808,
	2097, 1269, 1269, 3808, 3808, 3808, 30549, 30521, 2487, 11080,
	11080, 520, 832, 162, 2487, 11080, 2487, 2487, 2487, 2487,
	-1000, 1181, -1000, -1000, -1000, -1000, 1218, 160, 12100, 12100,
	-1000, -1000, -1000, 6305, 12440, -1000, -1000, -1000, -1000, 159,
	11080, -1000, 28961, -202, -31, -1000, -1000, 11080, -32, -33,
	-1000, -1000, 615, -1000, 11080, -1000, -26, 11080, 11080, 11080,
	75, 74, -1000, 517, -1000, 510, 503, 494, -1000, 156,
	781, 155, 153, 11080, -1000, -1000, -1000, 30257, 3922, 72,
	1217, -115, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 71,
	70, 30172, -115, 69, 3888, -1000, 12100, 12100, 12100, 6305,
	152, 68, 29408, -115, 30143, 9379, 9379, 9379, 60, 29993,
	11080, -115, 3573, 3545, 3517, -36, -42, -43, 1653, -49,
	59, 341, 340, 58, -1000, -1000, 31097, 279, 278, -1000,
	1651, 22008, -1000, 1095, -1000, -1000, 687, -1000, 721, -1000,
	14725, -1000, -1000, 56, -53, -44, 31097, -1000, -1000, -1000,
	-1000, -1000, 22008, 267, 22008, 22008, -1000, 151, 1062, 1055,
	-17, 22008, 1679, -17, 22008, 1332, 1385, 314, 22008, -1000,
	118, 118, -1000, 115, -1000, -1000, -50, 658, -1000, 11080,
	1636, -1000, -1000, -1000, 7326, -1000, -1000, -1000, 22008, -151,
	-64, -1000, -1000, -1000, -1000, -1000, 322, 718, 22008, 22008,
	22008, -1000, -1000, 945, 22953, 944, 31097, 148, 22008, 22008,
	22638, 22323, 22008, 806, -17, -1000, 147, -17, -1000, 145,
	22008, 686, 22008, 22008, 685, -17, -1000, 1183, -1000, -111,
	1796, 184, -168, 65, 335, -1000, 15041, -1000, 1183, -1000,
	-1000, 380, 1211, 576, -1000, 831, -1000, -1000, 591, -1000,
	-1000, 6985, 30436, -1000, 672, 1451, -57, -1000, -1000, -1000,
	385, 16318, 15679, 9039, -59, 30436, -64, 11080, 2487, 2487,
	11080, 12100, 12100, -1000, 2487, -1000, -1000, -1000, -1000, -1000,
	1207, 144, 11080, 31097, 29798, 29389, -63, -1000, 8699, -51,
	-1000, 11080, -1000, 28905, -1000, -1000, 268, 1383, -1000, 11080,
	29903, 53, 8359, -1000, 29753, -30, -30, -1000, 1677, 982,
	838, 745, 641, 1632, -1000, 16637, 389, 792, 28565, 30878,
	31097, -1000, 11080, -1000, -1000, 1200, 11080, -1000, 30878, 31097,
	12100, 12100, 12100, 12100, 12100, 12100, 12100, 12100, 12100, 12100,
	12100, 12100, 12100, 12100, 12100, 12100, 12100, 12100, 12100, 1015,
	12100, 1588, 1588, 1588, -58, 8019, -1000, 1204, 1200, 11080,
	11080, 31097, 52, 51, 50, -1000, 11080, -115, 11080, 11080,
	11080, -1000, -1000, -1000, 49, -1000, 1629, -1000, -1000, -1000,
	-1000, -1000, 459, 1626, 48, -64, -1000, -1000, -1000, -1000,
	-1000, 1131, -1000, 19173, -1000, 143, 22008, 13096, 142, 727,
	11080, 140, 139, -1000, 138, -1000, -1000, 137, 22008, 1021,
	314, 18228, -1000, 377, -1000, -1000, -1000, 840, 28537, -1000,
	1459, 5297, 22008, -1000, -1000, -1000, 492, 491, 1330, -1000,
	940, -1000, 413, 802, -1000, 1329, 931, 1324, 931, -1000,
	-70, 749, -1000, 11080, -1000, 11080, -1000, 486, -1000, -1000,
	485, 45, 1160, 1520, -1000, 15679, 1085, 1084, 15679, 1213,
	785, 785, 785, -1000, 136, 276, 335, 4302, 11080, 19803,
	812, 35, 44, 1796, 1160, -1000, 17598, 542, 134, -1000,
	-84, -1000, -1000, 196, -17, 672, -1000, -86, -1000, 317,
	1528, 2487, 3954, 3277, 11080, 31097, 30785, -68, 11080, 11080,
	-1000, -69, -1000, 11080, 275, 30436, -1000, -1000, -1000, 30436,
	11080, 1623, 11080, 40, 39, 37, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36, -1000, -1000, 27678, 11080, 34,
	-1000, 33, 31, 30436, 1204, 30436, -1000, -1000, 584, 584,
	628, 628, 628, 628, 1588, 2016, 2104, 801, 2912, 2912,
	2912, 735, 666, 666, 2912, 2912, 2912, 1194, 1002, 132,
	29276, 11080, -73, -1000, -1000, -1000, 30436, 30436, 30, -1000,
	-1000, -1000, -115, 215, 28508, 28480, -1000, 26, -1000, 272,
	270, -1000, -1000, 1133, -1000, 1203, 13096, 131, -79, -1000,
	281, 1478, 11080, -1000, -1000, 127, 22008, -1000, 28452, 13096,
	22008, 19173, 1550, 13096, 864, 1037, 314, 18228, -1000, 560,
	-1000, -1000, -1000, 1459, -1000, 22008, 22008, 22008, 1323, -1000,
	-1000, 1074, 1144, 443, 22008, -1000, 22008, -1000, 22008, 22008,
	22008, -87, -103, 22008, 22008, -1000, 382, 11080, 11080, 1796,
	15679, 15679, 1201, 1082, 15679, -1000, -1000, -1000, -1000, 266,
	358, 335, 19803, -1000, 1602, 1038, -113, -1000, -1000, 22008,
	126, -1000, 335, 382, -92, 17283, 1676, 1394, 22008, 1446,
	-1000, -1000, 125, 11080, 11080, 30785, -117, -1000, 2487, 2487,
	-1000, 28112, -1000, 30436, -1000, 29753, -1000, -1000, -1000, -1000,
	764, -1000, 28084, -1000, -1000, -1000, -1000, 12100, 1182, 124,
	31097, 28055, -1000, -1000, 11080, -1000, -1000, -1000, -1000, -1000,
	773, -1000, 22008, -1000, 5297, 22008, 1184, 935, -1000, -1000,
	1050, 121, 12100, 22008, -135, 13096, 791, 13096, 1459, 11,
	5297, 1459, 28027, 5964, -136, -1000, -137, -141, 25, -17,
	-142, 22008, -1000, 314, 18228, -1000, 1385, -1000, -1000, -1000,
	-1000, 22008, 930, -1000, 928, 11080, -1000, 31097, 931, 931,
	-1000, 479, 477, 474, 465, -1000, -1000, -1000, 22008, 30436,
	-115, -1000, 1201, -1000, 120, 11080, 15679, -1000, -168, -1000,
	-143, -1000, 19803, -1000, 264, -196, -1000, 310, -1000, 335,
	116, 22008, 19803, -1000, -1000, 106, 11, -153, -1000, 133,
	554, -154, 22008, -1000, -1000, 5624, 2487, 2487, -1000, -1000,
	24, 792, 1519, -1000, 30281, 12100, 31097, -158, -1000, 27999,
	22008, 1419, -1000, -1000, 22008, 938, -1000, -1000, 11080, 29276,
	104, 791, -159, 1131, 103, -1000, -1000, -1000, -1000, -1000,
	-1000, 1478, -26, -1000, -1000, 695, 1131, -1000, 791, 100,
	18228, -1000, 1021, -1000, -1000, -1000, 30436, 1468, -1000, -1000,
	22008, 22008, 99, 98, -105, -1000, 1547, -1000, 22008, 30436,
	-1000, 335, -1000, 1595, -1000, -1000, 1038, -1000, 4640, 19803,
	22008, -163, -1000, 11080, 1676, -1000, -1000, 1675, 630, -1000,
	385, -1000, -1000, 689, 11080, 30281, -165, -1000, -1000, 97,
	-1000, -1000, 1322, 244, 990, 22008, 1131, 791, -1000, 22008,
	1459, 23, 22008, -1000, 1131, 13096, -1000, 1037, 422, 5297,
	-1000, -1000, 11080, 11080, 22008, 95, -169, 19803, -1000, -1000,
	-1000, 1593, -1000, -170, -1000, -30, -1000, -1000, 16318, -1000,
	22, 11420, 11420, -115, -1000, 22008, 1308, -1000, 849, 819,
	21, -1000, 1131, -171, -1000, -1000, 94, -1000, -175, -1000,
	-1000, 11080, -1000, -176, -183, -1000, -1000, -1000, -1000, 102,
	-1000, 20, -155, -1000, -1000, -1000, 12769, 904, 655, 29299,
	-1000, -191, 22008, -1000, 863, 854, 644, -1000, -1000, -1000,
	-1000, -1000, -1000, 990, 791, 30436, -1000, -1000, -1000, 1623,
	-1000, 1570, -1000, -1000, -1000, -1000, -1000, 925, -1000, -1000,
	1405, -1000, 436, 833, 833, 849, 1131, 10740, -1000, -1000,
	-1000, -1000, 1577, -1000, -1000, 1017, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2092, 2085, 1293, 1545, 2083, 2072, 2071, 2070, 2069,
	2068, 2067, 2063, 2062, 2056, 2038, 2036, 2029, 2022, 2021,
	2005, 2002, 2000, 1998, 1997, 1996, 1995, 1526, 1994, 1993,
	1991, 1990, 1989, 1988, 1518, 1987, 1475, 1984, 1983, 1981,
	1980, 1979, 1471, 1454, 1977, 87, 96, 1406, 1976, 1975,
	1400, 1974, 1973, 1972, 1969, 1968, 97, 1961, 1960, 1959,
	1957, 1952, 1951, 1947, 148, 155, 1944, 1356, 1943, 1937,
	1936, 1934, 1933, 1929, 1928, 1926, 1925, 1924, 1922, 1918,
	1913, 1911, 1908, 1905, 1904, 1903, 158, 1899, 1898, 1352,
	1327, 1897, 1896, 17, 1894, 76, 1891, 27, 137, 2275,
	135, 1890, 1887, 1886, 1884, 34, 82, 79, 1883, 81,
	1880, 1878, 45, 31, 23, 18, 1876, 86, 1868, 1854,
	1174, 24, 1852, 1851, 128, 1849, 33, 30, 165, 150,
	146, 132, 106, 1847, 1844, 1843, 1840, 50, 1839, 1,
	1836, 1835, 10, 65, 14, 1834, 62, 22, 1833, 1832,
	120, 1831, 75, 99, 1283, 119, 126, 63, 1830, 73,
	13, 77, 1829, 1828, 145, 49, 1827, 36, 78, 139,
	1826, 47, 154, 60, 42, 53, 110, 1824, 1823, 1820,
	100, 1817, 107, 69, 1811, 1809, 55, 1808, 130, 138,
	1806, 1805, 88, 1800, 125, 1799, 1797, 153, 143, 104,
	7, 43, 57, 9, 1288, 1285, 111, 71, 26, 21,
	1796, 1770, 897, 1907, 40, 94, 58, 46, 92, 51,
	70, 142, 25, 1794, 1793, 114, 1792, 1791, 1790, 1789,
	1788, 91, 1787, 1786, 72, 140, 20, 19, 29, 84,
	39, 35, 85, 108, 149, 101, 1785, 80, 113, 1783,
	243, 1781, 1775, 1765, 144, 1771, 1767, 1764, 1739, 1410,
	1397, 731, 1757, 1752, 1213, 1005, 1751, 1750, 66, 1748,
	136, 109, 1746, 131, 127, 15, 1744, 112, 102, 89,
	1743, 103, 52, 0, 944, 93, 1742, 105, 54, 1741,
	1740, 1738, 1735, 28, 3, 8, 4, 5, 6, 118,
	83, 1733, 1732, 121, 116, 68, 1730, 151, 1729, 1728,
	1727, 44, 1725, 16, 1718, 11, 1716, 1709, 12, 2,
	1705, 1701, 122, 1700, 90, 1697, 1523, 1693, 147, 1692,
	1689, 1412, 32, 95,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 5, 5, 5,
	5, 5, 7, 8, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 107, 107,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 104, 104, 109, 109, 109,
	111, 111, 108, 108, 103, 103, 20, 20, 281, 281,
	282, 282, 92, 92, 96, 96, 93, 94, 94, 95,
	95, 26, 26, 26, 22, 22, 23, 24, 27, 27,
	27, 27, 27, 27, 34, 35, 35, 35, 35, 35,
	36, 36, 36, 36, 36, 41, 41, 39, 39, 38,
	38, 37, 37, 40, 40, 156, 156, 155, 155, 158,
	158, 42, 42, 45, 45, 45, 45, 45, 46, 46,
	46, 46, 46, 46, 46, 46, 249, 249, 248, 44,
	223, 223, 47, 181, 181, 48, 48, 48, 48, 49,
	55, 322, 322, 322, 326, 326, 327, 327, 328, 328,
	328, 328, 328, 328, 328, 324, 324, 53, 53, 91,
	59, 59, 59, 59, 59, 59, 61, 63, 60, 60,
	60, 62, 62, 64, 64, 64, 64, 65, 65, 65,
	65, 66, 66, 136, 136, 274, 273, 273, 279, 279,
	279, 134, 134, 134, 134, 134, 135, 135, 135, 272,
	272, 272, 272, 280, 280, 280, 280, 280, 280, 278,
	278, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 79,
	79, 86, 86, 86, 86, 86, 86, 68, 73, 73,
	73, 69, 74, 75, 76, 76, 76, 70, 70, 78,
	78, 78, 77, 83, 83, 83, 83, 80, 80, 80,
	81, 81, 84, 84, 84, 71, 72, 85, 82, 82,
	82, 43, 323, 323, 325, 325, 51, 30, 30, 31,
	31, 137, 137, 138, 138, 202, 202, 202, 202, 139,
	139, 110, 110, 110, 201, 291, 291, 292, 292, 292,
	292, 292, 292, 293, 293, 293, 293, 293, 293, 293,
	289, 289, 290, 287, 287, 288, 288, 288, 288, 329,
	329, 200, 200, 142, 142, 296, 296, 296, 296, 294,
	294, 294, 294, 294, 297, 295, 298, 298, 298, 298,
	298, 235, 235, 235, 88, 32, 116, 116, 33, 29,
	29, 185, 185, 146, 146, 240, 240, 240, 127, 127,
	105, 105, 105, 14, 11, 11, 11, 11, 11, 11,
	19, 19, 17, 17, 186, 186, 187, 187, 52, 54,
	58, 87, 87, 87, 21, 21, 25, 25, 57, 331,
	331, 123, 123, 123, 123, 124, 124, 197, 197, 198,
	198, 199, 199, 199, 118, 117, 119, 119, 28, 28,
	112, 112, 113, 113, 114, 114, 115, 115, 332, 332,
	50, 50, 90, 130, 130, 194, 194, 194, 196, 196,
	195, 195, 195, 171, 171, 171, 89, 151, 151, 160,
	160, 161, 161, 246, 162, 162, 56, 56, 99, 99,
	97, 97, 97, 97, 97, 97, 98, 98, 100, 100,
	100, 100, 100, 100, 100, 102, 304, 304, 304, 307,
	307, 303, 305, 305, 306, 306, 330, 330, 172, 172,
	172, 141, 140, 140, 144, 144, 143, 145, 145, 239,
	239, 239, 169, 169, 169, 169, 188, 188, 189, 189,
	190, 190, 191, 191, 191, 192, 192, 193, 193, 168,
	168, 219, 219, 101, 101, 150, 150, 152, 152, 209,
	209, 209, 210, 210, 208, 208, 208, 208, 241, 241,
	241, 241, 241, 241, 241, 320, 320, 320, 321, 321,
	238, 238, 242, 242, 242, 242, 242, 242, 236, 236,
	236, 236, 237, 237, 247, 247, 175, 175, 175, 175,
	173, 173, 174, 174, 243, 243, 243, 243, 170, 170,
	244, 244, 244, 203, 203, 250, 250, 250, 268, 268,
	149, 149, 149, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	252, 252, 252, 252, 254, 254, 254, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 267, 267, 267, 267, 267,
	255, 255, 262, 262, 263, 263, 264, 265, 256, 256,
	257, 257, 258, 259, 266, 266, 266, 266, 270, 270,
	260, 260, 260, 260, 260, 261, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	183, 183, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 213, 213, 213, 213, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 299,
	299, 299, 299, 299, 299, 299, 301, 301, 302, 302,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 308,
	308, 309, 309, 311, 311, 312, 312, 313, 314, 314,
	314, 315, 316, 316, 310, 310, 317, 317, 317, 318,
	318, 319, 319, 319, 319, 319, 225, 225, 225, 226,
	226, 227, 233, 233, 233, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 125, 125, 125, 125, 125, 157, 157, 222, 222,
	220, 220, 220, 224, 224, 176, 176, 269, 269, 269,
	269, 269, 269, 269, 177, 177, 177, 184, 178, 178,
	179, 179, 179, 179, 179, 179, 216, 217, 180, 180,
	180, 218, 218, 228, 232, 232, 231, 230, 230, 229,
	229, 206, 206, 207, 207, 205, 204, 165, 165, 164,
	164, 163, 163, 333, 333, 234, 234, 166, 166, 167,
	159, 159, 245, 245, 245, 245, 153, 153, 132, 132,
	154, 154, 128, 128, 131, 131, 129, 129, 129, 129,
	147, 147, 148, 148, 126, 126, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 271, 271, 271,
	221, 120, 120, 120, 121, 121, 122, 122, 276, 276,
	276, 277, 277, 277, 277, 275, 275, 275, 275, 275,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 6, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 4, 6, 4, 6, 4,
	6, 3, 5, 3, 5, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 3, 3, 0, 2, 3, 2, 3, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 2,
	1, 1, 1, 1, 1, 3, 4, 5, 3, 2,
	6, 3, 4, 3, 3, 3, 3, 1, 3, 3,
	1, 2, 2, 1, 0, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 1, 1, 1, 1, 1, 2, 3, 4, 4,
	4, 4, 2, 4, 4, 4, 4, 4, 4, 2,
	3, 3, 2, 4, 5, 4, 5, 2, 3, 3,
	4, 2, 4, 3, 3, 4, 4, 2, 5, 5,
	6, 2, 2, 0, 2, 0, 3, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 4, 3, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 3,
	2, 1, 1, 1, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 6, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 1, 4, 4, 4, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 2, 2, 1, 1, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 7, 4,
	6, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -44,
	-54, -55, -58, -56, -52, -53, -59, -67, -87, -88,
	-89, -90, -5, -6, -7, -8, 34, 238, -23, -24,
	67, -28, -29, -30, -31, -32, -33, 89, -306, 93,
	-37, -38, -39, -41, -40, 104, 106, 124, 130, 212,
	218, 240, 242, 249, -97, -99, 236, 237, -60, -61,
	-62, -63, -91, 260, -68, -69, -70, -71, -72, -73,
	-74, -75, -76, -77, -78, -79, -80, -81, -82, -83,
	-84, -85, -21, -25, -57, 300, -9, -10, -13, -12,
	-11, -16, -18, -15, -17, -19, -14, 47, 69, -304,
	97, -100, -98, 351, 309, 263, 35, 272, 61, 100,
	244, 23, 325, 332, 253, -101, -102, 317, 281, 354,
	-322, -154, 281, 82, -129, -120, 344, 4, -283, -285,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 48,
	55, 60, 61, 62, 64, 66, 67, 68, 71, 72,
	80, 81, 83, 85, 89, 91, 93, 96, 97, 99,
	104, 105, 106, 112, 113, 118, 120, 125, 130, 131,
	132, 133, 140, 143, 145, 138, 155, 156, 157, 159,
	160, 161, 164, 163, 168, 171, 174, 176, 177, 178,
	181, 179, 183, 184, 186, 185, 191, 193, 194, 196,
	199, 202, 205, 208, 209, 210, 211, 212, 214, 216,
	218, 220, 221, 222, 223, 224, 226, 227, 229, 230,
	231, 232, 233, 236, 234, 235, 237, 238, 239, 240,
	242, 244, 245, 247, 261, 262, 273, 249, 250, 251,
	252, 256, 254, 257, 258, 260, 263, 265, 268, 271,
	272, 274, 277, 275, 270, 280, 282, 283, 284, 285,
	286, 287, 288, 295, 296, 300, 301, 302, 303, 306,
	307, 308, 309, 311, 314, 315, 316, 321, 326, 327,
	328, 329, 330, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 84, 86, 87, 103,
	107, 108, 114, 115, 116, 126, 128, 134, 135, 144,
	146, 147, 148, 149, 150, 152, 166, 180, 190, 192,
	203, 207, 215, 217, 225, 246, 255, 266, 267, 276,
	278, 290, 291, 292, 297, 298, 313, 317, 318, -322,
	-128, -120, 82, -120, 218, 22, 91, 143, 308, 307,
	22, 214, 254, 283, 285, -120, -46, 351, -45, -4,
	-27, -36, -47, -43, -67, -42, -56, -34, -50, -89,
	-90, -326, 22, -327, -328, 69, 97, 124, 253, 143,
	91, 307, -275, 4, -283, -285, -284, -286, 58, 70,
	123, 142, 136, 154, 158, 167, 169, 182, 204, 206,
	243, 264, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 65, 69, 73,
	74, 76, 75, 77, 78, 79, 88, 90, 92, 94,
	95, 98, 100, 102, 109, 110, 111, 119, 121, 122,
	124, 127, 129, 137, 139, 141, 151, 153, 162, 165,
	170, 172, 173, 187, 188, 189, 195, 197, 198, 200,
	201, 213, 219, 228, 241, 253, 259, 269, 279, 281,
	289, 293, 294, 299, 304, 305, 310, 312, 319, 320,
	322, 323, 324, 325, 156, -120, 156, -326, -124, 249,
	-120, -124, -86, 257, 4, 22, 82, 181, 259, 290,
	171, 55, 246, 257, -65, 296, -64, 290, -274, -66,
	-155, 181, -120, -330, 281, 156, 222, 281, 310, 320,
	-185, 82, 305, -98, -100, -99, 320, 281, 139, 82,
	310, -143, -144, 304, 151, 102, 201, -97, -99, -304,
	-279, -272, -235, 9, 299, 109, 197, -278, 8, 343,
	-271, -277, 5, 7, 342, 4, -283, -285, -284, -86,
	257, 34, 55, 22, 60, 83, 125, 139, 140, 160,
	65, 66, 221, 171, 157, 295, 161, 258, 282, 296,
	69, 311, 286, 105, -331, 296, 296, -331, -331, -123,
	296, 293, 281, 139, 82, 320, -307, 226, -303, -120,
	-307, -140, -141, 22, 94, 355, -167, 351, -243, -128,
	198, -3, 293, 355, -154, -147, -120, -205, -204, 353,
	122, 122, 351, -164, -165, -204, -205, -120, 22, 122,
	153, 153, -244, -243, -181, 351, -249, -248, -277, 317,
	197, 355, -211, -213, 342, 343, 337, 187, 331, -225,
	-215, -228, 103, 246, 351, -128, -214, 356, 9, -301,
	-99, 29, -226, -227, 49, -120, 7, 8, 5, 6,
	-126, -252, -221, -261, 299, 109, 189, -299, -300, 4,
	-283, -276, -253, -263, -257, -260, 152, 58, 74, 75,
	78, 76, 79, 259, 310, 50, 28, 107, 108, 207,
	215, 278, 297, 298, 134, 190, 135, 56, 126, 166,
	96, 37, 39, 41, 42, 51, 52, 84, 86, 87,
	114, 115, 116, 144, 146, 147, 148, 149, 150, 192,
	225, 266, 276, 291, 292, 318, -284, -264, -265, -258,
	-259, -266, -223, 351, -211, 197, -120, -86, 330, 2,
	261, 351, -65, 53, 296, -198, -199, -117, -118, -119,
	155, 220, 224, 330, 293, 336, 122, -279, -136, 88,
	-158, 353, -170, -243, -211, -211, -155, 134, -120, -155,
	139, -120, 134, -143, -144, -156, 134, -155, -156, 134,
	-132, 134, -131, -128, -120, 134, -147, 134, -169, -188,
	-189, 170, 111, 195, -172, 22, 94, -172, -172, 44,
	352, 352, 8, 7, 7, -86, -281, -278, 9, 261,
	221, 258, 55, 122, -323, 197, 122, 122, 122, 122,
	122, 221, 258, 119, 295, 122, 155, 220, 273, 281,
	320, 122, 122, -197, -198, -197, 293, -124, -243, 134,
	-128, -131, 134, -120, -243, 134, 355, -307, -148, 351,
	-159, -245, -211, 344, -159, -167, -166, -234, -211, 88,
	344, -128, 351, -281, -129, 355, -275, 344, -282, -281,
	274, 352, -153, -128, -165, -244, -130, -128, -130, 260,
	-120, 30, -157, -211, 352, 355, -322, -328, 10, 11,
	57, 33, 342, 343, 344, 345, 117, 346, 347, 340,
	341, 339, 334, 335, 336, 63, 175, 248, 13, 14,
	15, 26, 200, 169, 331, 136, 264, 337, 16, 17,
	18, 154, 36, 137, -125, -133, -211, -211, -211, -211,
	-211, 206, -163, -206, 349, -99, 351, -99, -211, -157,
	7, -99, -220, 349, -229, -211, -164, 351, 5, 351,
	5, -308, 326, 119, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 217, -270, 321, -270, -270, -254, 351, -254,
	-255, 351, -254, 327, 332, 351, 30, -222, -250, -251,
	-253, -262, -256, -260, -261, 40, 46, 45, 288, 180,
	255, 267, 313, 38, 196, 145, 144, 146, 147, 148,
	149, 150, 266, 37, 225, 115, 116, 114, 96, 87,
	86, 192, 42, 41, -264, -265, -258, -259, 84, 291,
	292, 152, 39, 52, 51, 318, 276, -322, -64, -274,
	-157, 30, -198, 355, 168, -135, 174, 186, 131, 198,
	328, -280, 5, 4, -221, -235, 88, 171, -261, -273,
	88, -279, -273, 88, 72, 353, -275, -109, 355, 48,
	239, 351, -142, 187, -116, -305, 325, -142, 351, -121,
	134, -120, -305, 187, -169, -109, 355, 103, -109, 103,
	-109, 355, 103, 356, 103, 103, -189, -188, -190, -211,
	22, -193, 113, 183, -211, -213, -98, -98, -98, -145,
	-239, -211, 219, 139, -155, 22, 262, -274, -325, 119,
	-322, -274, -274, -274, -274, -274, 257, -46, 119, -120,
	168, -274, -274, 281, 139, 281, -124, -107, 234, -106,
	21, 23, 97, 315, 103, 270, 287, 250, 270, 287,
	250, 234, 103, 234, 234, 103, -303, 30, -147, -150,
	355, 122, 30, 4, -150, 355, 352, -128, -247, 333,
	-120, -247, 355, 122, 352, 355, -203, 323, -194, -56,
	351, 88, 30, -194, -160, -161, -246, -162, -128, 351,
	-120, 352, 355, -46, -248, 293, -268, -250, -267, 230,
	231, 229, 233, 232, -250, -275, 290, -211, -211, -211,
	-211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
	-211, -211, -211, -211, -211, -211, -211, -211, -211, 169,
	136, 264, 36, 137, -211, 293, -211, -211, -211, -211,
	179, 187, 189, 299, 109, 306, 94, 193, -333, 279,
	32, -218, -99, 351, -233, 27, 269, 22, -225, 246,
	351, -206, -211, -207, -157, 352, 352, 355, -157, -224,
	350, -220, -232, -231, 322, 352, -157, 319, 22, 94,
	344, 7, -182, 329, 178, 85, 132, 177, -183, 252,
	-309, 112, 127, 351, 352, 352, 352, -211, -211, -176,
	-269, -157, 4, 329, 178, 85, 132, 177, 252, -176,
	-177, -211, -157, -178, -212, -213, 342, 343, 337, 351,
	246, -179, -211, -157, -211, 43, 165, 294, -180, -211,
	122, -157, -211, -211, -211, -157, -157, -157, 351, 7,
	7, 290, 290, 7, -45, 352, 355, -149, 29, -182,
	351, 122, 352, 296, -199, -134, 224, 268, 235, 256,
	355, -275, -243, -137, -147, -138, -120, -202, -201, -289,
	-290, -287, 139, 305, 110, 65, -288, 54, 219, 121,
	30, 103, 211, 30, 197, 187, -112, 284, 103, -155,
	-156, -156, -131, -132, -275, -120, -147, -191, -271, 351,
	343, -192, 246, 247, 355, -105, 31, 92, 159, -128,
	-324, -120, 257, -46, -128, -131, -128, 355, 293, -186,
	65, 59, -201, 134, 59, -287, -120, 305, -186, 65,
	-186, 65, 65, -243, 33, -56, 122, 33, -56, 122,
	293, -131, 293, 293, -243, 351, 352, -203, -245, -152,
	-241, 349, -243, -128, -99, -242, 351, -275, -203, -234,
	352, -92, 133, 193, -95, 325, -281, 274, 122, -128,
	-171, 241, -211, -171, -196, 197, -153, 317, -120, -171,
	-151, 355, 122, 336, -153, -211, -324, 330, -211, -211,
	293, -333, 279, -218, -211, 179, 189, 299, 109, 306,
	94, 193, 122, 351, -212, -212, -157, -215, 351, -157,
	350, 359, 352, -211, 350, 350, 355, -230, -231, 98,
	-211, -144, 355, -143, -211, -157, -157, 352, 352, 293,
	293, 293, 293, 351, -314, 205, 351, 351, -211, 30,
	355, 352, 122, 352, 352, -184, 213, 352, 10, 11,
	342, 343, 344, 345, 117, 346, 347, 340, 341, 339,
	334, 335, 336, 63, 175, 248, 13, 14, 15, 154,
	137, -212, -212, -212, -157, 351, 352, -216, -217, 122,
	119, 30, -180, -180, -180, 352, 122, -157, 355, 355,
	355, 352, 352, 352, 7, 352, 355, 352, 330, 330,
	352, -250, 349, 349, 7, -324, -117, 303, 62, 224,
	-279, 352, 352, 355, -250, -121, 139, 351, -121, -120,
	351, 159, 159, -56, -155, 5, -56, -128, 103, -113,
	99, -332, 336, -120, -109, -109, -109, -192, -211, -239,
	-128, 356, 355, -247, -106, -128, -120, -120, 187, -201,
	134, -111, 187, -120, -120, 134, -120, 134, -120, -120,
	-107, 234, -56, 351, -56, 351, -120, 234, -120, -128,
	234, -45, -168, 127, -247, 355, 70, -175, 158, 182,
	123, 167, 243, 142, 7, -46, -208, 356, 351, -238,
	332, -99, -242, -241, -168, -95, 122, 280, 199, 274,
	-159, 188, -171, 64, 352, -203, -161, -152, -234, 352,
	-211, -211, -212, -212, 122, 351, -211, -222, 26, 26,
	352, -157, 352, 355, -207, -211, 352, -220, 100, -211,
	289, 352, 319, -144, -144, -144, 5, 178, 132, 177,
	-183, 177, -183, -183, 7, -315, -120, 351, 323, -143,
	352, -268, -250, -211, -216, -211, -268, -250, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, 94, 187, 193,
	-212, 355, -157, 352, -217, -216, -211, -211, -250, 352,
	352, 352, -157, -211, -211, -211, 352, 7, 350, 7,
	7, 352, -139, 138, -202, -291, 351, -121, -146, -240,
	-120, -302, 351, -299, -300, -126, 351, -288, -211, 351,
	351, 351, -142, 351, -120, -114, 164, -332, -278, -305,
	198, 352, -105, -275, -120, 293, 293, 103, 187, 314,
	-104, 97, 260, -187, 103, -109, 103, -109, 293, -186,
	65, -157, -157, 293, 293, 352, -219, 129, 44, -241,
	158, 158, -241, -175, 158, -173, 204, -173, -173, -320,
	351, 350, -238, -275, 349, 357, -157, -237, -236, 30,
	-120, 202, 352, -219, -282, 290, 351, -195, 351, 197,
	-56, -171, 336, 26, 26, -211, -222, 352, -211, -211,
	352, -211, 350, -211, 5, -211, 352, 352, 352, 352,
	-316, -120, -211, 352, 352, 352, -217, 122, 94, 193,
	351, -211, 352, 352, 355, 352, 352, 352, 350, 350,
	137, -292, 65, -293, 57, 110, 69, 187, 189, 305,
	219, 54, 88, 228, -146, 351, 352, 355, -127, -164,
	57, -127, -211, 351, -147, 352, -146, -147, -137, 30,
	-146, 197, -115, 163, -332, -278, -112, -105, -120, -120,
	-201, 103, 187, 88, 187, 88, 81, 301, -120, -120,
	-128, -120, -120, 352, 352, -120, -128, -311, 324, -211,
	-157, -241, -241, -174, 312, 197, 158, -241, 350, 352,
	-321, 7, -238, -237, 7, -210, -209, 120, 185, 352,
	-120, 351, -238, -311, -214, -126, -120, -94, -93, 5,
	95, -147, 65, -167, -99, 351, -211, -211, 352, 352,
	-144, -310, 210, 352, -212, 122, 351, -222, 352, -211,
	208, -120, -275, -120, 110, 134, 189, 159, 351, -212,
	-128, 352, -146, -200, -329, 68, 277, -240, -105, -275,
	-105, 352, -157, 352, 352, 352, 352, -56, 352, -128,
	-332, -278, -113, -201, 189, 189, -211, -250, -109, -109,
	293, 293, 293, 293, -312, -313, -120, -174, 351, -211,
	-241, -208, 352, 355, -237, 350, 355, 358, 336, -238,
	351, -147, -236, 351, 355, 352, -96, 336, 307, 188,
	352, -120, 352, -144, 44, -212, -222, 352, 352, -120,
	-293, -121, 187, -211, -122, 351, -200, 352, -139, 351,
	-127, -144, 228, -139, -200, 351, -278, -114, -108, 57,
	-120, -120, 351, 351, 355, 30, -147, -238, 7, -209,
	-275, 349, -237, -147, 352, -157, -93, 5, 260, -203,
	-317, 223, 247, -157, 352, 351, 103, 352, -296, 176,
	-120, -139, -200, -147, -105, 352, -128, -139, -146, -115,
	-103, 312, -275, -157, -157, -313, -315, 352, -236, 7,
	352, -144, -160, 352, -318, -319, 36, 302, 72, -211,
	-318, -147, 110, -294, -297, -295, 197, 123, 209, 265,
	352, -139, 352, -142, 352, -211, 352, 352, 350, 352,
	-203, -319, 216, 118, 246, 216, 118, 352, -120, -295,
	197, -297, 197, 307, 91, -296, -200, 26, -110, 48,
	239, -298, 184, 239, 48, 260, -298, -294, -139, -319,
	20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 33, 34, 35, 36, 0, 0, 104, 105,
	0, 108, 109, 110, 111, 112, 113, 0, 0, 0,
	120, 121, 122, 123, 124, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 476, -2, 0, 0, 190, 191,
	192, 193, 194, 0, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 411, 412, 413, 507, 37, 38, 39, 40,
	41, 44, 45, 46, 47, 42, 43, 0, 382, 504,
	0, -2, 515, 0, 0, 0, 420, 0, 420, 420,
	424, 0, 0, 0, 513, 490, 491, 0, 0, -2,
	0, 171, 0, 1052, 980, 986, 987, 1011, 1012, 1013,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 0,
	0, 982, 1052, 165, 1111, 167, 0, 0, 0, 0,
	115, 116, 117, 118, 119, 164, 141, 0, 148, 149,
	150, 151, 152, 153, 154, 155, 143, 144, 145, 146,
	147, 0, 174, 175, 176, 178, 179, 180, 181, 182,
	183, 184, 301, 1025, 1026, 1027, 1028, 1029, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 0, 161, 0, 0, 410, 1138,
	426, 408, 187, 0, 261, 262, 263, 264, 265, 0,
	-2, 1040, 1226, 1144, 199, 1165, 207, 1232, 0, 210,
	215, -2, 137, 0, 506, 0, 0, 0, 0, 0,
	0, 0, 381, -2, 486, 487, 0, 0, 0, 0,
	0, -2, 0, 510, 510, 510, 0, 0, 487, 0,
	189, 218, 219, 220, 229, 230, 231, 232, 371, 0,
	373, 239, 240, 1007, 0, 1021, 1022, 1023, 1024, 259,
	0, 0, 0, 262, 0, 272, 303, 0, 0, 0,
	0, 0, 279, 0, 282, 0, 0, 287, 291, 0,
	0, 297, 0, 0, 428, 419, 428, 416, 417, 418,
	421, 0, 0, 0, 0, 0, 496, 1117, 499, 993,
	497, 0, 0, 512, 511, 0, 543, 0, 495, 594,
	0, 2, 0, 0, 172, 173, 990, 988, 989, 0,
	0, 0, 0, 983, 959, 957, 958, 166, 168, 0,
	0, 0, 0, 600, 162, 0, 0, 156, 158, 1238,
	0, 0, 306, 702, 0, 0, 0, 0, 0, 0,
	794, 796, 1200, 1226, 0, 798, 799, 0, 801, 803,
	804, 0, 807, 808, 950, 982, 996, 997, 998, 999,
	0, 0, 1002, 0, 1004, 1005, 1006, 850, 817, -2,
	-2, 994, 630, 631, 632, 633, -2, 1240, 821, 823,
	825, 827, 828, 829, 830, 0, 1184, 1201, 1202, 1222,
	1223, 1231, 1235, 1236, 1208, 1219, 1209, 1196, 1206, 1217,
	1058, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1020, 664, 665, 670,
	671, 673, 0, 0, 409, 0, 425, 188, 266, 195,
	0, 0, 198, 1195, 1165, 201, 429, 431, 432, 433,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	138, 0, 79, 598, 106, 107, 354, 1208, -2, 354,
	1015, 503, 1208, -2, 0, 79, 1208, 135, 79, 1208,
	79, 1208, 978, 985, 131, 1208, 133, 1208, 482, 524,
	525, 0, 0, 0, 0, 508, 509, 0, 0, 0,
	478, 479, 372, 1009, 1008, 260, 267, 88, 89, 0,
	280, 288, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 281, 289, 505, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 414, 427, 415, 0, 423, 0, 1208,
	594, 0, 1208, 0, 0, 1208, 0, 498, 0, 0,
	546, 970, 974, 975, 546, 544, 0, 967, 965, 966,
	595, 596, 0, 585, 981, 0, 955, 956, 585, 90,
	101, 0, 0, 976, 960, 604, 0, 453, 0, 0,
	601, 0, 0, 906, 505, 0, 0, 177, 0, 0,
	0, 0, 885, 886, 887, 888, 889, 890, 893, 894,
	891, 892, 895, 896, 897, 0, 0, 0, 898, 899,
	900, 0, 0, 902, 0, 904, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 901, 707, 708, 709, 731,
	732, 0, 795, 961, 954, 797, 0, -2, 906, 0,
	800, 805, 806, 0, 0, 949, -2, 0, 1001, 0,
	699, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 935, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 667, 678, 675, 674, 651, 0, 650,
	648, 0, 652, 0, 0, 0, 505, 0, 908, 612,
	613, 614, 615, 616, 699, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 661, 0, 636,
	636, 636, 653, 654, 662, 663, 668, 669, 680, 681,
	683, 685, 679, 679, 679, 676, 677, 0, 196, 0,
	0, 0, 202, 0, 0, 434, 226, 227, 228, 436,
	437, 208, 233, 234, 235, 236, 237, 238, 0, 203,
	205, 216, 204, 206, 209, 0, 139, 374, 0, 77,
	78, 312, 0, 0, 375, 0, 502, 0, 0, 0,
	1208, 1014, 441, 0, 485, 125, 0, 0, 127, 0,
	129, 0, 0, 0, 0, 0, 522, 523, 526, 530,
	531, 534, 537, 538, 528, 702, 492, 493, 494, 516,
	517, 392, 0, 0, 268, 269, 270, 271, 273, 0,
	302, 274, 275, 276, 277, 278, 283, 285, 505, 290,
	292, 295, 296, 0, 0, 0, 422, 48, 405, 58,
	0, 405, 405, 0, 0, 0, 0, 54, 0, 0,
	56, 0, 0, 0, 0, 0, 500, 0, 0, 604,
	0, 0, 0, 973, 604, 0, 969, 0, 93, 0,
	991, 100, 0, 0, 0, 0, 465, 0, 465, 455,
	0, 0, 0, 465, 468, 469, 471, 472, 0, 0,
	602, 163, 0, 142, 157, 0, 703, 608, 609, 655,
	656, 657, 658, 659, 704, 705, 0, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, -2, -2, -2,
	723, 724, 725, -2, -2, -2, 729, 730, -2, 903,
	905, 0, 964, 0, -2, 0, -2, -2, -2, -2,
	743, 0, 745, 748, 750, 752, 0, 0, 0, 0,
	963, 762, 941, 0, 0, 882, 883, 884, 747, 0,
	0, 962, 953, 0, 0, -2, 802, 0, 0, 0,
	912, 913, 948, 944, 0, 809, 515, 0, 0, 0,
	0, 0, 1010, 686, 687, 688, 689, 690, 691, 700,
	860, 0, 0, 0, 822, 824, 826, 0, 0, 0,
	0, 916, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 906, 926, 0, 0, 765, 0, 0, 0, 0,
	1226, 0, 906, 934, 0, 0, 0, 0, 0, 906,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 160, 0, 605, 607, 617,
	0, 0, 197, 0, 430, 435, 0, 223, 0, 225,
	0, 140, 599, 0, 0, 311, 990, 313, 315, 316,
	317, 318, 1015, 0, 1015, 0, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 443, 449, 0, 136,
	79, 79, 979, 79, 984, 132, 134, 0, 532, 0,
	0, 529, 535, 536, 0, 519, 390, 391, 0, 0,
	304, 185, 284, 286, 298, 299, 585, 0, 0, 0,
	0, 404, 60, 1208, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 53, 0,
	0, 0, 0, 0, 0, 505, 992, 540, 971, 585,
	547, 505, 557, 594, 571, 562, 0, 972, 540, 968,
	597, 100, 0, 0, 87, 0, 91, 102, 0, 977,
	114, 0, 603, 450, 465, 0, 0, 457, 454, 452,
	604, 0, 0, 0, 0, 907, 169, 0, -2, -2,
	0, 0, 0, 763, -2, 744, 746, 749, 751, 753,
	0, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	951, 954, -2, 907, 910, 911, 0, 0, 945, 0,
	0, 0, 0, 514, 515, 515, 515, 815, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 833, 0, 834, 835, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 768, 769, 770, 0, 0, 837, 932, 933, 0,
	0, 0, 0, 0, 0, 842, 0, 939, 0, 0,
	0, 846, 847, 848, 0, 634, 0, 660, 682, 684,
	672, 909, 0, 0, 0, 170, 200, 221, 222, 224,
	217, 320, 353, 0, 326, 0, 1015, 0, 0, 0,
	0, 0, 0, 309, 354, 376, 378, 0, 0, 445,
	449, 0, 448, 503, 126, 128, 130, 0, 0, 518,
	392, 0, 0, 300, 59, 394, 0, 0, 0, 62,
	1208, 70, 0, 407, 71, 1208, 79, 1208, 79, 72,
	49, 405, 50, 0, 51, 0, 402, 0, 393, 400,
	0, 0, 542, 0, 545, 0, 0, 0, 0, 0,
	591, 591, 591, 589, 565, 0, 571, 0, 0, 583,
	0, -2, 562, 0, 542, 86, 0, 0, 0, 103,
	463, 464, 451, 462, 0, 465, 470, 467, 473, 0,
	706, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	942, 0, 877, 0, 0, 953, -2, 914, 943, 947,
	0, 810, 0, 0, 0, 0, 1003, 692, 693, 694,
	695, 696, 697, 698, 0, 858, 859, 863, 0, 0,
	820, 0, 0, 915, 925, 927, 766, 767, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, -2, -2,
	-2, 784, 785, 786, -2, -2, -2, 0, 0, 0,
	928, 0, 0, 880, 930, 931, 936, 937, 0, 839,
	840, 841, 938, 0, 0, 0, 666, 0, 610, 0,
	0, 618, 307, 0, 314, 324, 0, 0, 0, 383,
	389, 389, 0, 818, 819, 0, 0, 343, 0, 0,
	0, 312, 0, 0, 0, 447, 449, 0, 440, 441,
	527, 533, 520, 392, 186, 0, 0, 0, 0, 80,
	64, 0, 0, 0, 0, 68, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 501, 854, 0, 0, 548,
	0, 0, 0, 0, 0, 586, 590, 587, 588, 0,
	0, 571, 583, 554, 0, 0, 0, 561, 582, 0,
	581, 570, -2, 854, 92, 0, 0, 0, 0, 0,
	456, 466, 0, 0, 0, -2, 0, 756, -2, -2,
	876, 907, 952, 946, 1000, 515, 811, 813, 814, 701,
	865, 862, 0, 849, 831, 832, 924, 0, 0, 0,
	0, 907, 879, 838, 0, 844, 845, 635, 611, 606,
	0, 325, 0, 328, 0, 0, 0, 0, 334, 335,
	0, 0, 0, 0, 0, 0, 352, 0, 392, 995,
	0, 392, 0, 0, 0, 345, 0, 0, 0, 0,
	0, 0, 438, 449, 0, 442, 443, 521, 396, 398,
	61, 0, 0, 76, 0, 0, 406, 0, 79, 79,
	395, 0, 0, 0, 0, 403, 401, 488, 0, 541,
	539, 573, 0, 575, 0, 0, 0, 577, 557, 566,
	0, 568, 583, 559, 0, 0, 552, 0, 551, 571,
	579, 0, 0, 489, 584, 0, 0, 0, 97, 95,
	0, 0, 0, 474, 475, 0, -2, -2, 757, 878,
	0, 515, 0, 851, -2, 0, 0, 0, 881, 0,
	0, 0, 329, 330, 1015, 0, 333, 336, 0, 338,
	1017, 352, 0, 320, 0, 349, 350, 384, 385, 388,
	386, 389, 515, 342, 347, 0, 320, 310, 352, 0,
	0, 444, 445, 63, 65, 66, 75, 83, 67, 73,
	0, 0, 0, 0, 853, 855, 0, 574, 0, 593,
	576, 571, 567, 0, 564, 555, 0, 556, 0, 583,
	0, 0, 563, 0, 0, 99, 96, 0, 0, 459,
	604, 461, 812, 868, 0, -2, 0, 792, 843, 0,
	327, 331, 0, 0, 358, 0, 320, 352, 346, 0,
	392, 0, 0, 308, 320, 0, 446, 447, 85, 0,
	397, 399, 0, 0, 0, 0, 0, 0, 569, 553,
	549, 0, 560, 0, 580, 515, 98, 94, 0, 460,
	0, 0, 0, 864, 793, 0, 0, 337, 363, 0,
	0, 340, 320, 0, 387, 810, 354, 379, 0, 439,
	69, 0, 82, 0, 0, 856, 857, 592, 558, 0,
	578, 0, 604, 861, 866, 869, -2, 1168, 1049, 0,
	867, 0, 0, 339, 359, 360, 0, 355, 356, 357,
	1016, 341, 351, 358, 352, 84, 55, 57, 550, 0,
	458, 0, 871, 872, 873, 874, 875, 323, 332, 361,
	0, 362, 0, 0, 0, 363, 320, 0, 319, 321,
	322, 364, 0, 367, 368, 0, 365, 348, 380, 870,
	366, 369, 370,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:954
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:960
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:966
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:972
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:982
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:988
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:992
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1038
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1061
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1071
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = nil
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = DropCascade
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = DropRestrict
		}
	case 79:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = DropDefault
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1134
		{
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1137
		{
			return unimplemented(sqllex, "alter using")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1138
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.str = ""
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1211
		{
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1396
		{ /* SKIP DOC */
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{ /* SKIP DOC */
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{ /* SKIP DOC */
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1594
		{
			return unimplemented(sqllex, "set local")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			return unimplemented(sqllex, "set from current")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1679
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1681
		{
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = Low
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = Normal
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = High
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.str = "client_encoding"
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1957
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1989
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = DropDefault
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			return unimplemented(sqllex, "match full")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			return unimplemented(sqllex, "match partial")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			return unimplemented(sqllex, "match simple")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2324
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2337
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
			return unimplemented(sqllex, "no action")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2346
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2347
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			return unimplemented(sqllex, "action set null")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			return unimplemented(sqllex, "action set default")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = true
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = false
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2457
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2460
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2461
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = Ascending
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = Descending
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2501
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2503
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = true
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = false
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2536
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2537
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2595
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2596
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.str = ""
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.str = ""
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = ReadOnly
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = ReadWrite
		}
	case 438:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.str = ""
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = ""
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.str = ""
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = ""
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2751
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2817
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 466:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2852
		{
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3091
		{
			return unimplemented(sqllex, "cte")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3095
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3103
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = true
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = false
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = false
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = true
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3127
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &From{}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3341
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3359
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3386
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3403
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = nil
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = true
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = false
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.str = astFullJoin
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.str = astLeftJoin
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.str = astRightJoin
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.str = astInnerJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3579
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3678
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3679
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3693
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3702
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3765
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3774
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = nil
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3935
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3967
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4006
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4007
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = year
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = month
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = day
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = hour
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = minute
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = month
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = hour
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = minute
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = minute
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = nil
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = second
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4137
		{
			return unimplemented(sqllex, "at tz")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4371
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4544
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4597
		{
			return unimplemented(sqllex, "variadic")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4598
		{
			return unimplemented(sqllex, "variadic")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4621
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			return unimplemented(sqllex, "func_application")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4642
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			return unimplemented(sqllex, "current role")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			return unimplemented(sqllex, "current user")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			return unimplemented(sqllex, "session user")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			return unimplemented(sqllex, "user")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4699
		{
			return unimplemented(sqllex, "treat")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4743
		{
			return unimplemented(sqllex, "within group")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4744
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = Window(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.str = ""
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			return unimplemented(sqllex, "frame range")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4842
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4843
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4847
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4853
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4854
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4855
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4856
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4857
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = Any
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = Some
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = All
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = Plus
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = Minus
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = Mult
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = Div
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = FloorDiv
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = Mod
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = Bitand
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = Bitor
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = Pow
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = Bitxor
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = LT
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = GT
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = EQ
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = LE
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = GE
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = NE
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = Like
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = NotLike
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = ILike
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = NotILike
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5221
		{
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5222
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5340
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5384
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5420
		{
			return unimplemented(sqllex, "func const")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5429
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = DNull
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.str = ""
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
