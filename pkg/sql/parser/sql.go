// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PASSWORD = 57533
const PLACING = 57534
const POSITION = 57535
const PRECEDING = 57536
const PRECISION = 57537
const PREPARE = 57538
const PRIMARY = 57539
const PRIORITY = 57540
const RANGE = 57541
const READ = 57542
const REAL = 57543
const RECURSIVE = 57544
const REF = 57545
const REFERENCES = 57546
const RENAME = 57547
const REPEATABLE = 57548
const RELEASE = 57549
const RESTRICT = 57550
const RETURNING = 57551
const REVOKE = 57552
const RIGHT = 57553
const ROLLBACK = 57554
const ROLLUP = 57555
const ROW = 57556
const ROWS = 57557
const RSHIFT = 57558
const STATUS = 57559
const SAVEPOINT = 57560
const SEARCH = 57561
const SECOND = 57562
const SELECT = 57563
const SERIAL = 57564
const SERIALIZABLE = 57565
const SESSION = 57566
const SESSION_USER = 57567
const SET = 57568
const SHOW = 57569
const SIMILAR = 57570
const SIMPLE = 57571
const SMALLINT = 57572
const SMALLSERIAL = 57573
const SNAPSHOT = 57574
const SOME = 57575
const SPLIT = 57576
const SQL = 57577
const START = 57578
const STDIN = 57579
const STRICT = 57580
const STRING = 57581
const STORING = 57582
const SUBSTRING = 57583
const SYMMETRIC = 57584
const SYSTEM = 57585
const TABLE = 57586
const TABLES = 57587
const TEXT = 57588
const THEN = 57589
const TIME = 57590
const TIMESTAMP = 57591
const TIMESTAMPTZ = 57592
const TO = 57593
const TRAILING = 57594
const TRANSACTION = 57595
const TREAT = 57596
const TRIM = 57597
const TRUE = 57598
const TRUNCATE = 57599
const TYPE = 57600
const UNBOUNDED = 57601
const UNCOMMITTED = 57602
const UNION = 57603
const UNIQUE = 57604
const UNKNOWN = 57605
const UPDATE = 57606
const UPSERT = 57607
const USER = 57608
const USERS = 57609
const USING = 57610
const VALID = 57611
const VALIDATE = 57612
const VALUE = 57613
const VALUES = 57614
const VARCHAR = 57615
const VARIADIC = 57616
const VIEW = 57617
const VARYING = 57618
const WHEN = 57619
const WHERE = 57620
const WINDOW = 57621
const WITH = 57622
const WITHIN = 57623
const WITHOUT = 57624
const YEAR = 57625
const ZONE = 57626
const NOT_LA = 57627
const WITH_LA = 57628
const AS_LA = 57629
const POSTFIXOP = 57630
const UMINUS = 57631

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4938

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	308, 27,
	-2, 388,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 361,
	178, 361,
	209, 361,
	306, 361,
	308, 361,
	-2, 371,
	-1, 59,
	1, 364,
	178, 364,
	209, 364,
	306, 364,
	308, 364,
	-2, 370,
	-1, 68,
	1, 27,
	308, 27,
	-2, 388,
	-1, 395,
	1, 177,
	308, 177,
	-2, 895,
	-1, 431,
	153, 398,
	177, 398,
	-2, 367,
	-1, 434,
	153, 397,
	177, 397,
	-2, 365,
	-1, 559,
	153, 397,
	177, 397,
	-2, 368,
	-1, 615,
	305, 833,
	-2, 826,
	-1, 616,
	305, 834,
	-2, 827,
	-1, 622,
	5, 533,
	305, 533,
	-2, 989,
	-1, 646,
	5, 499,
	-2, 963,
	-1, 647,
	5, 527,
	305, 527,
	-2, 965,
	-1, 648,
	5, 507,
	-2, 966,
	-1, 649,
	5, 506,
	-2, 967,
	-1, 650,
	5, 527,
	305, 527,
	-2, 970,
	-1, 651,
	5, 527,
	305, 527,
	-2, 971,
	-1, 652,
	5, 528,
	-2, 974,
	-1, 653,
	5, 493,
	-2, 975,
	-1, 654,
	5, 493,
	-2, 976,
	-1, 655,
	5, 509,
	-2, 980,
	-1, 656,
	5, 494,
	-2, 985,
	-1, 657,
	5, 495,
	-2, 986,
	-1, 658,
	5, 496,
	-2, 987,
	-1, 659,
	5, 497,
	-2, 988,
	-1, 660,
	5, 493,
	-2, 992,
	-1, 661,
	5, 500,
	-2, 997,
	-1, 662,
	5, 498,
	-2, 1000,
	-1, 663,
	5, 525,
	305, 525,
	-2, 1002,
	-1, 664,
	5, 529,
	-2, 1005,
	-1, 665,
	5, 531,
	-2, 1006,
	-1, 666,
	5, 524,
	305, 524,
	-2, 1010,
	-1, 919,
	97, 371,
	139, 371,
	153, 371,
	177, 371,
	181, 371,
	261, 371,
	-2, 645,
	-1, 927,
	305, 811,
	-2, 799,
	-1, 1131,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 568,
	-1, 1132,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 569,
	-1, 1133,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 570,
	-1, 1137,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 574,
	-1, 1138,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 575,
	-1, 1139,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 576,
	-1, 1142,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 581,
	-1, 1148,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 583,
	-1, 1151,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 588,
	-1, 1152,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 589,
	-1, 1153,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 590,
	-1, 1179,
	186, 717,
	-2, 720,
	-1, 1202,
	114, 733,
	305, 833,
	-2, 826,
	-1, 1203,
	114, 734,
	-2, 959,
	-1, 1204,
	114, 735,
	-2, 893,
	-1, 1205,
	114, 736,
	-2, 866,
	-1, 1206,
	114, 737,
	-2, 881,
	-1, 1207,
	114, 738,
	-2, 892,
	-1, 1208,
	114, 739,
	-2, 928,
	-1, 1358,
	97, 371,
	139, 371,
	153, 371,
	177, 371,
	181, 371,
	261, 371,
	-2, 446,
	-1, 1362,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 582,
	-1, 1363,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 584,
	-1, 1368,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 585,
	-1, 1387,
	186, 716,
	-2, 719,
	-1, 1552,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 586,
	-1, 1557,
	142, 0,
	-2, 600,
	-1, 1565,
	186, 718,
	-2, 721,
	-1, 1599,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 626,
	-1, 1600,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 627,
	-1, 1601,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 628,
	-1, 1605,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 632,
	-1, 1606,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 633,
	-1, 1607,
	13, 0,
	14, 0,
	15, 0,
	288, 0,
	289, 0,
	290, 0,
	-2, 634,
	-1, 1712,
	142, 0,
	-2, 601,
	-1, 1715,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 604,
	-1, 1716,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 606,
	-1, 1803,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 605,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 607,
	-1, 1811,
	142, 0,
	-2, 635,
	-1, 1858,
	142, 0,
	-2, 636,
	-1, 1912,
	35, 0,
	127, 0,
	152, 0,
	228, 0,
	285, 0,
	-2, 962,
}

const sqlNprod = 1105
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25570

var sqlAct = [...]int{

	616, 1911, 1891, 1519, 1935, 1864, 1893, 1892, 1755, 1007,
	1910, 435, 1576, 1103, 1015, 841, 922, 1636, 1791, 1079,
	606, 1678, 1704, 266, 614, 590, 613, 456, 1677, 76,
	45, 1444, 1698, 1355, 1691, 1778, 1078, 847, 1283, 268,
	76, 76, 76, 1083, 578, 76, 1354, 1531, 76, 850,
	1082, 1390, 1345, 924, 1112, 77, 76, 1016, 679, 974,
	1443, 682, 1047, 76, 76, 1541, 1111, 76, 983, 396,
	76, 76, 76, 76, 1339, 471, 1189, 19, 1228, 918,
	1164, 1115, 1161, 1031, 26, 667, 865, 442, 58, 795,
	1073, 470, 440, 15, 269, 545, 7, 732, 779, 700,
	704, 1040, 684, 1113, 731, 546, 1199, 588, 579, 472,
	473, 776, 434, 486, 955, 254, 492, 483, 806, 1009,
	22, 1086, 259, 21, 270, 58, 10, 9, 8, 6,
	4, 258, 252, 445, 260, 871, 59, 562, 561, 563,
	485, 959, 383, 775, 797, 793, 374, 708, 479, 443,
	566, 544, 386, 1006, 1798, 717, 58, 1799, 263, 1012,
	265, 261, 717, 439, 262, 264, 256, 255, 257, 60,
	453, 717, 1926, 459, 1008, 1107, 466, 874, 875, 1907,
	1899, 1889, 1777, 1107, 1037, 1884, 439, 1860, 1107, 265,
	1037, 1854, 1044, 1842, 1107, 432, 1777, 1295, 422, 1353,
	877, 874, 875, 57, 1832, 1294, 1805, 1107, 1050, 1037,
	64, 462, 1802, 447, 1788, 1107, 1785, 1777, 873, 1107,
	1343, 876, 1776, 1231, 877, 1777, 1846, 393, 431, 36,
	1414, 1415, 57, 66, 694, 1045, 1760, 37, 1759, 1107,
	1737, 1107, 1342, 1050, 1717, 876, 872, 1050, 76, 76,
	76, 76, 76, 1780, 495, 1342, 608, 1714, 36, 38,
	1037, 67, 1663, 715, 1662, 1050, 37, 1050, 1612, 62,
	1648, 1046, 1043, 1107, 1561, 63, 882, 1050, 1505, 1499,
	1429, 1004, 1004, 1461, 440, 1564, 1462, 1459, 38, 1458,
	1050, 1050, 1050, 1321, 61, 972, 64, 1324, 1457, 1387,
	882, 1050, 1050, 1385, 1323, 1384, 1107, 1107, 1386, 496,
	1050, 1052, 874, 875, 1389, 1108, 1173, 718, 1107, 66,
	488, 488, 1102, 1059, 718, 892, 1050, 1049, 1067, 1420,
	1050, 1048, 574, 718, 1036, 877, 836, 1037, 835, 497,
	874, 875, 1003, 971, 787, 1004, 970, 67, 786, 892,
	725, 480, 508, 726, 452, 62, 876, 68, 64, 874,
	875, 63, 474, 877, 49, 489, 475, 475, 669, 820,
	76, 528, 493, 1946, 1909, 1414, 1415, 1905, 1430, 1898,
	1011, 66, 877, 893, 876, 76, 1855, 64, 76, 76,
	1786, 1742, 1294, 49, 1042, 474, 1738, 1730, 573, 475,
	1729, 1728, 1723, 876, 1722, 1721, 1675, 893, 1627, 67,
	66, 882, 1669, 872, 1622, 1326, 1041, 62, 721, 1621,
	1620, 64, 76, 63, 76, 716, 76, 76, 76, 1567,
	76, 930, 1550, 1530, 839, 1509, 1431, 1466, 67, 882,
	1463, 1451, 61, 560, 66, 76, 62, 1442, 1413, 1410,
	1409, 1407, 63, 1395, 1394, 1322, 76, 1245, 882, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 1196, 903,
	76, 253, 67, 846, 1420, 1195, 268, 76, 76, 76,
	674, 76, 573, 559, 572, 468, 516, 878, 879, 880,
	881, 883, 1169, 903, 673, 552, 517, 555, 1883, 705,
	76, 76, 474, 874, 875, 61, 475, 892, 76, 1578,
	76, 1874, 1425, 1422, 1423, 1424, 1416, 1417, 1418, 1419,
	1421, 495, 495, 1430, 1845, 1674, 877, 551, 1824, 268,
	76, 269, 76, 76, 76, 76, 76, 76, 76, 1668,
	511, 513, 1822, 76, 76, 1813, 702, 876, 1795, 76,
	1783, 1774, 821, 1752, 1735, 1707, 1685, 76, 1556, 1549,
	1527, 270, 1525, 1524, 549, 893, 1522, 1507, 547, 1478,
	1477, 845, 1441, 1414, 1415, 76, 496, 496, 76, 432,
	480, 1431, 1403, 1170, 269, 1402, 1380, 1376, 569, 570,
	1259, 1166, 1310, 1272, 575, 874, 875, 869, 878, 879,
	880, 881, 883, 727, 903, 1271, 497, 497, 1259, 1258,
	1238, 1194, 431, 1106, 270, 960, 963, 967, 927, 1414,
	1415, 953, 952, 440, 951, 707, 710, 950, 880, 881,
	883, 949, 903, 948, 947, 1673, 1414, 1415, 946, 876,
	945, 729, 944, 668, 886, 878, 879, 880, 881, 883,
	943, 903, 942, 783, 1495, 782, 941, 1425, 1422, 1423,
	1424, 1416, 1417, 1418, 1419, 1421, 940, 810, 817, 939,
	925, 938, 1420, 937, 928, 825, 469, 926, 76, 61,
	840, 457, 577, 514, 504, 502, 76, 1304, 1303, 675,
	76, 837, 874, 875, 76, 76, 522, 1800, 76, 853,
	1672, 855, 854, 432, 690, 1296, 432, 432, 867, 1097,
	844, 1465, 76, 1464, 76, 76, 1361, 76, 1420, 538,
	76, 523, 76, 76, 935, 76, 965, 495, 773, 977,
	966, 931, 1692, 1008, 1579, 1420, 861, 1190, 785, 862,
	863, 956, 582, 1398, 542, 1290, 988, 990, 248, 1472,
	720, 1870, 1922, 723, 1923, 375, 1831, 822, 1058, 738,
	826, 827, 828, 829, 830, 957, 958, 1656, 675, 1317,
	833, 834, 415, 416, 71, 543, 380, 1768, 76, 76,
	816, 376, 496, 421, 1430, 420, 1010, 1767, 1010, 1493,
	1492, 1025, 488, 993, 488, 903, 961, 685, 1054, 686,
	249, 1001, 964, 254, 1469, 377, 1468, 980, 1032, 968,
	259, 976, 497, 58, 838, 1034, 921, 1489, 58, 258,
	1364, 268, 260, 379, 1033, 76, 70, 1035, 1309, 429,
	1014, 1308, 1307, 520, 997, 1306, 1026, 1024, 1027, 1149,
	76, 76, 1431, 1029, 1072, 493, 263, 76, 1051, 261,
	1830, 1000, 262, 264, 256, 255, 257, 1023, 1028, 1416,
	1417, 1418, 1419, 1421, 1506, 999, 996, 976, 687, 1044,
	548, 761, 521, 975, 76, 1793, 269, 76, 1242, 1241,
	1120, 1109, 424, 1061, 958, 957, 1695, 903, 601, 1053,
	1055, 1056, 1060, 1214, 1163, 500, 1494, 961, 1278, 964,
	1163, 1757, 698, 691, 1480, 1872, 270, 1418, 1419, 1421,
	378, 268, 1045, 692, 250, 1048, 711, 74, 1644, 1422,
	1423, 1424, 1416, 1417, 1418, 1419, 1421, 1190, 366, 367,
	368, 1922, 1076, 385, 1167, 244, 397, 1932, 1886, 1284,
	69, 1075, 691, 1077, 385, 251, 1119, 1943, 1046, 1043,
	1645, 446, 446, 381, 1887, 74, 1514, 1497, 74, 74,
	465, 74, 1344, 1292, 815, 814, 269, 808, 803, 1895,
	1316, 72, 1117, 1118, 76, 76, 76, 438, 1244, 1177,
	76, 1110, 245, 76, 903, 1277, 685, 1274, 686, 76,
	76, 76, 76, 76, 1171, 425, 270, 76, 702, 984,
	76, 76, 717, 702, 696, 76, 1487, 372, 1048, 499,
	1348, 695, 76, 430, 76, 1318, 1048, 426, 685, 437,
	686, 76, 1825, 1252, 1063, 1168, 427, 518, 1351, 1246,
	1065, 76, 1186, 1511, 1931, 1640, 1288, 1641, 1481, 1346,
	1373, 519, 440, 1896, 818, 1349, 688, 1066, 1286, 1209,
	539, 375, 76, 76, 1371, 1269, 1064, 687, 76, 1347,
	987, 439, 973, 1643, 1100, 1101, 1146, 1284, 495, 1512,
	1646, 1042, 380, 1700, 954, 1247, 1758, 376, 1093, 1256,
	1809, 1775, 519, 1897, 1938, 917, 439, 1401, 76, 687,
	76, 1894, 76, 1414, 1415, 1542, 76, 1921, 1919, 76,
	767, 377, 1608, 1690, 1366, 540, 1350, 1281, 76, 1944,
	1162, 1289, 247, 246, 819, 76, 1095, 76, 1930, 379,
	1297, 564, 1369, 496, 541, 1325, 1374, 1327, 1642, 1048,
	531, 738, 738, 509, 1301, 1302, 74, 481, 74, 397,
	397, 436, 1312, 565, 986, 565, 760, 440, 1314, 1174,
	1178, 1313, 1181, 497, 1315, 507, 1733, 1319, 1144, 1147,
	1950, 1329, 1535, 1699, 718, 1201, 1201, 1212, 1328, 1223,
	1270, 1360, 1331, 1320, 1762, 1235, 1236, 1237, 1761, 1256,
	1750, 1652, 1609, 1143, 1032, 792, 1819, 1348, 1610, 1336,
	1337, 1034, 1420, 1388, 58, 1471, 1255, 440, 1359, 1251,
	1033, 1655, 683, 1035, 1936, 1351, 378, 1370, 1654, 985,
	1096, 852, 842, 1705, 1372, 1510, 1540, 1865, 564, 790,
	832, 788, 1349, 621, 1751, 1261, 1260, 518, 1367, 1365,
	791, 1701, 1537, 1536, 478, 688, 477, 437, 738, 556,
	1520, 1430, 1734, 761, 761, 774, 1937, 1949, 1676, 381,
	440, 1748, 1382, 1532, 1340, 1193, 809, 804, 505, 1145,
	76, 1446, 1812, 1732, 1939, 1397, 1651, 688, 1706, 1445,
	1555, 1408, 1749, 510, 1375, 1279, 397, 397, 1057, 1476,
	1002, 537, 536, 1350, 535, 534, 533, 532, 1298, 529,
	1299, 1300, 476, 1653, 738, 76, 76, 936, 824, 1431,
	1192, 1890, 1862, 1501, 1448, 1449, 1450, 1633, 860, 1485,
	385, 1483, 74, 1470, 397, 554, 397, 1333, 557, 1467,
	1098, 1091, 76, 1030, 724, 76, 1474, 76, 722, 1496,
	1488, 719, 714, 446, 76, 697, 693, 1500, 738, 689,
	1573, 851, 1769, 76, 74, 1526, 567, 76, 1923, 671,
	761, 812, 1502, 76, 268, 1504, 525, 76, 74, 76,
	450, 1771, 1503, 1269, 1523, 74, 74, 74, 976, 712,
	1513, 1515, 1516, 1104, 991, 1521, 992, 1546, 1424, 1416,
	1417, 1418, 1419, 1421, 3, 1529, 976, 1498, 74, 74,
	1379, 1780, 989, 414, 1381, 1827, 780, 1534, 780, 1545,
	1539, 1538, 76, 1569, 1570, 1571, 761, 1392, 1393, 269,
	1857, 1533, 670, 568, 571, 1543, 1544, 995, 397, 994,
	780, 397, 397, 397, 397, 397, 831, 451, 1847, 371,
	1105, 397, 397, 1688, 1094, 526, 1090, 385, 1013, 270,
	1566, 868, 784, 1440, 730, 849, 417, 418, 1159, 1039,
	761, 1947, 1948, 458, 1453, 1580, 1414, 1415, 1171, 874,
	875, 618, 1157, 446, 1719, 1628, 870, 1069, 1068, 76,
	76, 76, 1585, 382, 1517, 1615, 1508, 1460, 76, 76,
	1305, 1558, 1243, 1240, 76, 1239, 76, 1187, 76, 76,
	76, 1070, 1572, 76, 76, 1490, 1491, 1649, 1650, 1334,
	1330, 1071, 929, 1582, 1583, 1616, 423, 1644, 1756, 1637,
	373, 823, 1587, 1588, 1632, 1629, 530, 1635, 760, 760,
	1885, 1639, 1725, 1400, 1344, 76, 76, 1790, 1155, 1484,
	1154, 1486, 1808, 1191, 1160, 934, 35, 76, 76, 1645,
	1671, 76, 1666, 1684, 1686, 1619, 843, 1683, 1684, 1682,
	76, 76, 1683, 1680, 1682, 594, 1689, 1634, 1473, 1638,
	1085, 1084, 1687, 271, 813, 802, 74, 617, 796, 1708,
	805, 1200, 1348, 672, 981, 619, 735, 1670, 74, 76,
	620, 736, 74, 998, 1709, 962, 74, 589, 607, 733,
	1351, 1696, 1697, 491, 1341, 1702, 1017, 1188, 1396, 932,
	74, 1346, 1021, 1022, 1562, 74, 593, 1349, 74, 599,
	397, 397, 598, 397, 1175, 1156, 73, 1731, 501, 1703,
	1352, 1347, 1158, 48, 1640, 760, 1641, 515, 391, 392,
	1287, 1667, 1099, 738, 76, 856, 76, 1482, 76, 76,
	428, 1411, 503, 1221, 1213, 1210, 550, 76, 678, 1018,
	527, 1293, 1643, 1038, 454, 576, 864, 461, 464, 1646,
	454, 1713, 738, 738, 1743, 1613, 780, 870, 1350, 76,
	449, 738, 738, 448, 1080, 524, 1623, 1744, 789, 1062,
	419, 760, 1821, 1092, 1254, 1942, 1826, 1215, 1770, 1479,
	1869, 76, 65, 76, 580, 580, 1779, 25, 23, 20,
	1772, 18, 76, 680, 738, 17, 1684, 1746, 76, 16,
	1683, 24, 1682, 1074, 1784, 14, 1781, 1642, 13, 12,
	703, 11, 34, 33, 32, 760, 737, 1801, 74, 1081,
	1794, 31, 1807, 30, 29, 870, 5, 2, 1, 0,
	0, 0, 0, 0, 0, 761, 0, 874, 875, 76,
	0, 0, 0, 0, 1764, 0, 1797, 1694, 0, 1823,
	0, 0, 74, 1817, 0, 397, 1787, 0, 76, 76,
	877, 0, 76, 0, 761, 761, 76, 0, 0, 0,
	0, 76, 0, 761, 761, 1835, 1818, 0, 0, 0,
	1843, 876, 1837, 0, 0, 1839, 76, 1844, 1684, 1836,
	0, 268, 1683, 0, 1682, 440, 0, 0, 0, 0,
	857, 859, 0, 738, 1849, 1851, 761, 866, 0, 1848,
	1856, 1852, 0, 76, 1853, 76, 76, 0, 76, 912,
	913, 914, 915, 916, 0, 454, 0, 464, 920, 1875,
	1814, 0, 1873, 0, 1867, 0, 882, 76, 1879, 0,
	1838, 1878, 763, 1877, 0, 702, 269, 0, 933, 0,
	1882, 0, 74, 1249, 1250, 1881, 1684, 1779, 981, 0,
	1683, 1257, 1682, 76, 1880, 76, 1876, 1262, 1263, 1265,
	1267, 1268, 1906, 0, 1900, 1273, 270, 1902, 1275, 74,
	1904, 76, 0, 74, 1903, 892, 0, 1871, 1916, 1918,
	74, 1920, 1291, 0, 1215, 1215, 1924, 0, 0, 74,
	0, 0, 1925, 738, 1929, 762, 1927, 0, 1859, 74,
	1928, 1765, 1766, 0, 0, 761, 0, 1941, 1940, 0,
	0, 1945, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 780, 0, 0, 0, 0, 1074, 0, 0, 1951,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 1215,
	1215, 1215, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 849, 0,
	397, 0, 0, 0, 74, 0, 0, 1335, 0, 0,
	0, 0, 738, 0, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 1357, 0, 74, 0, 1841, 0, 0,
	0, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	760, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	0, 0, 0, 676, 0, 0, 0, 0, 0, 760,
	760, 0, 0, 0, 0, 1377, 1378, 701, 760, 760,
	0, 0, 0, 0, 454, 709, 709, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1888, 0, 0, 0, 0, 0, 461, 464, 0,
	0, 760, 0, 0, 0, 0, 0, 0, 737, 737,
	0, 0, 0, 0, 761, 0, 0, 1908, 1215, 1215,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 580, 0,
	0, 0, 0, 0, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 0, 1148, 870, 1150,
	1151, 1152, 1153, 0, 0, 0, 0, 0, 0, 1215,
	1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
	1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 0, 1215,
	0, 0, 761, 74, 74, 1197, 1198, 0, 0, 1211,
	0, 1222, 1224, 1229, 1232, 1233, 1234, 0, 1414, 1415,
	760, 1432, 1433, 1434, 0, 737, 0, 0, 0, 0,
	1518, 0, 0, 981, 0, 849, 680, 0, 0, 0,
	0, 0, 1528, 0, 763, 763, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 1357, 0, 0, 0, 1548, 0, 1357, 1429, 0,
	0, 0, 1282, 0, 1285, 0, 0, 0, 0, 1553,
	1554, 737, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 0, 0,
	0, 464, 0, 0, 0, 454, 0, 762, 762, 0,
	1577, 0, 0, 0, 0, 0, 1311, 1420, 0, 1019,
	760, 0, 595, 46, 464, 737, 0, 464, 0, 0,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 0,
	1611, 763, 0, 0, 0, 0, 734, 734, 0, 0,
	46, 0, 0, 0, 0, 0, 1430, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 1630, 1631, 981,
	0, 433, 0, 0, 441, 0, 870, 870, 0, 0,
	0, 46, 1657, 0, 1658, 0, 74, 1660, 1661, 760,
	0, 1664, 74, 0, 0, 0, 0, 763, 1215, 1362,
	1363, 0, 0, 0, 762, 1368, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 1679, 0, 870, 1081, 0, 1679, 0, 0, 1383,
	0, 0, 0, 0, 0, 74, 74, 454, 1391, 74,
	0, 763, 0, 0, 1414, 1415, 1399, 0, 870, 1357,
	1404, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	762, 0, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 454, 0, 0, 0, 920, 0, 1726, 0, 0,
	0, 1229, 1229, 1229, 0, 1215, 1426, 1427, 1428, 0,
	1425, 1422, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 0,
	0, 0, 0, 0, 762, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 1745, 0, 397, 1747, 0, 0,
	580, 0, 0, 1420, 0, 74, 0, 0, 580, 1753,
	0, 0, 680, 734, 0, 0, 0, 874, 875, 0,
	0, 0, 0, 0, 0, 1215, 441, 870, 0, 0,
	0, 1248, 1414, 1415, 0, 1432, 1433, 1434, 0, 0,
	877, 0, 0, 0, 1679, 0, 0, 0, 1711, 74,
	0, 1792, 1430, 0, 0, 0, 0, 0, 1276, 0,
	74, 876, 1280, 0, 0, 0, 870, 891, 0, 701,
	737, 0, 0, 0, 0, 0, 0, 1551, 701, 0,
	1552, 0, 1429, 0, 0, 398, 0, 0, 454, 0,
	0, 1557, 0, 0, 0, 0, 1811, 0, 0, 737,
	737, 0, 0, 399, 0, 1311, 0, 849, 737, 737,
	1431, 0, 0, 0, 1574, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 1584, 0, 1828, 1829, 1586, 0,
	1833, 1420, 0, 0, 1834, 0, 1679, 0, 401, 397,
	0, 737, 0, 406, 407, 0, 0, 412, 0, 0,
	0, 0, 1850, 1332, 870, 0, 0, 0, 0, 400,
	402, 1617, 1618, 0, 1435, 892, 0, 0, 0, 0,
	1624, 1625, 1626, 0, 454, 0, 1858, 0, 0, 0,
	1430, 1866, 0, 870, 74, 0, 397, 0, 0, 0,
	1416, 1417, 1418, 1419, 1421, 0, 763, 0, 403, 0,
	0, 0, 0, 0, 1679, 1792, 0, 0, 0, 0,
	0, 404, 405, 580, 0, 433, 0, 0, 0, 0,
	0, 0, 0, 893, 0, 763, 763, 408, 0, 0,
	0, 74, 0, 870, 763, 763, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1693, 1917,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 1712, 0, 0, 0, 1715, 1716, 0, 0, 0,
	1718, 0, 0, 0, 1720, 0, 0, 0, 762, 762,
	0, 1724, 0, 0, 0, 1727, 0, 762, 762, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 734, 903,
	1426, 1427, 1428, 0, 1425, 1422, 1423, 1424, 1416, 1417,
	1418, 1419, 1421, 0, 0, 0, 409, 0, 1736, 410,
	762, 0, 0, 0, 411, 0, 0, 734, 734, 433,
	0, 0, 433, 433, 0, 0, 734, 734, 413, 0,
	737, 0, 1019, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 0, 923,
	1763, 0, 0, 0, 0, 0, 763, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1782, 0, 0,
	454, 0, 0, 0, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1796, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 1803, 1804, 50, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	0, 874, 875, 0, 894, 895, 896, 904, 905, 906,
	0, 0, 52, 0, 0, 1816, 0, 897, 28, 0,
	57, 0, 0, 0, 877, 0, 908, 0, 1820, 0,
	0, 0, 0, 0, 0, 0, 763, 0, 0, 41,
	0, 46, 0, 46, 0, 876, 36, 0, 734, 53,
	680, 891, 0, 40, 37, 0, 0, 0, 46, 0,
	0, 0, 0, 46, 0, 0, 0, 737, 0, 0,
	42, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1414, 1415,
	0, 1432, 1433, 1434, 0, 0, 0, 0, 0, 762,
	882, 0, 0, 0, 1710, 1659, 0, 0, 0, 1414,
	1415, 1665, 1432, 1433, 1434, 763, 0, 0, 901, 909,
	0, 0, 0, 1414, 1415, 1560, 1432, 1433, 1434, 0,
	0, 0, 0, 907, 0, 0, 0, 0, 1429, 1559,
	0, 0, 0, 899, 0, 0, 1901, 0, 734, 892,
	39, 0, 0, 0, 454, 454, 0, 0, 454, 1429,
	0, 55, 1915, 1915, 43, 0, 54, 0, 0, 0,
	0, 898, 44, 1429, 0, 64, 0, 0, 762, 0,
	47, 49, 0, 0, 0, 0, 0, 1420, 1915, 0,
	51, 0, 0, 763, 0, 0, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 0, 1114, 893, 1420, 0,
	0, 56, 0, 0, 0, 0, 0, 0, 0, 902,
	1435, 0, 1420, 1915, 0, 0, 67, 734, 0, 0,
	0, 0, 0, 0, 62, 0, 1430, 0, 0, 0,
	63, 1435, 1165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 762, 1430, 0, 61,
	0, 0, 0, 0, 1754, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 0, 900, 0, 0, 888,
	889, 890, 0, 887, 884, 885, 886, 878, 879, 880,
	881, 883, 0, 903, 1431, 0, 0, 0, 0, 0,
	1739, 0, 0, 0, 0, 734, 0, 0, 1789, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 1427, 1428, 0,
	1425, 1422, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 1427, 1428,
	0, 1425, 1422, 1423, 1424, 1416, 1417, 1418, 1419, 1421,
	0, 1426, 1427, 1428, 0, 1425, 1422, 1423, 1424, 1416,
	1417, 1418, 1419, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 1868, 0, 0, 0, 0, 0, 1358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1019, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 615, 604, 605, 602, 603, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	1183, 80, 0, 0, 0, 0, 631, 597, 0, 0,
	0, 81, 82, 195, 646, 197, 647, 83, 648, 649,
	0, 84, 201, 202, 85, 612, 630, 650, 651, 205,
	0, 642, 919, 623, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 273, 93, 94, 0, 624,
	626, 0, 625, 627, 95, 96, 97, 98, 652, 99,
	653, 654, 0, 100, 0, 101, 0, 1184, 0, 645,
	103, 0, 104, 0, 0, 0, 596, 105, 106, 632,
	633, 610, 0, 0, 107, 108, 655, 0, 109, 0,
	110, 0, 0, 274, 0, 111, 643, 0, 215, 0,
	112, 113, 114, 639, 641, 276, 0, 117, 1114, 115,
	0, 275, 116, 656, 657, 658, 659, 0, 622, 0,
	277, 118, 278, 119, 120, 0, 0, 644, 279, 121,
	280, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 281, 129, 130, 133, 131, 586, 132, 611,
	640, 134, 660, 135, 136, 1114, 0, 0, 0, 1114,
	137, 226, 282, 138, 283, 634, 139, 140, 141, 142,
	0, 635, 143, 229, 144, 0, 145, 146, 147, 661,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 284,
	155, 156, 600, 157, 0, 158, 159, 160, 161, 0,
	232, 162, 163, 628, 164, 165, 285, 166, 662, 234,
	167, 0, 173, 168, 169, 170, 172, 663, 171, 636,
	0, 174, 0, 175, 176, 0, 237, 664, 665, 0,
	0, 177, 637, 638, 609, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 629, 185, 0, 186, 187, 188,
	242, 666, 1182, 0, 189, 0, 0, 0, 0, 190,
	191, 192, 193, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 584, 1185, 0, 0, 0,
	585, 0, 0, 592, 1180, 751, 745, 768, 739, 759,
	758, 0, 0, 741, 740, 0, 0, 0, 770, 769,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 764,
	0, 756, 755, 0, 0, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	1114, 0, 0, 1114, 0, 0, 0, 753, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 747, 748, 749, 0, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 0, 0, 0, 750,
	744, 0, 0, 0, 0, 1773, 0, 0, 772, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 765, 766,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 286,
	80, 287, 288, 289, 290, 194, 291, 292, 293, 294,
	81, 82, 195, 196, 197, 198, 83, 199, 200, 295,
	84, 201, 202, 85, 296, 297, 203, 204, 205, 298,
	206, 299, 272, 300, 86, 87, 88, 919, 89, 301,
	90, 91, 92, 302, 273, 93, 94, 303, 304, 305,
	306, 307, 308, 95, 96, 97, 98, 207, 99, 208,
	209, 309, 100, 310, 101, 311, 312, 313, 102, 103,
	314, 104, 315, 0, 316, 210, 105, 106, 211, 212,
	317, 318, 319, 107, 108, 213, 0, 109, 320, 110,
	321, 322, 274, 323, 111, 214, 324, 215, 325, 112,
	113, 114, 216, 217, 276, 326, 117, 327, 115, 328,
	275, 116, 218, 219, 220, 221, 329, 222, 330, 277,
	118, 278, 119, 120, 331, 332, 223, 279, 121, 280,
	333, 122, 334, 335, 123, 0, 124, 125, 126, 127,
	128, 281, 129, 130, 133, 131, 336, 132, 337, 224,
	134, 225, 135, 136, 338, 339, 340, 341, 342, 137,
	226, 282, 138, 283, 227, 139, 140, 141, 142, 343,
	228, 143, 229, 144, 344, 145, 146, 147, 230, 148,
	149, 345, 151, 152, 150, 153, 346, 154, 284, 155,
	156, 231, 157, 0, 158, 159, 160, 161, 347, 232,
	162, 163, 348, 164, 165, 285, 166, 233, 234, 167,
	349, 173, 168, 169, 170, 172, 235, 171, 236, 350,
	174, 351, 175, 176, 352, 237, 238, 239, 353, 354,
	177, 240, 241, 355, 178, 179, 180, 181, 356, 357,
	182, 183, 184, 358, 185, 359, 186, 187, 188, 242,
	243, 360, 361, 189, 362, 363, 364, 365, 190, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1547, 78,
	79, 286, 80, 287, 288, 289, 290, 194, 291, 292,
	293, 294, 81, 82, 195, 196, 197, 198, 83, 199,
	200, 295, 84, 201, 202, 85, 296, 297, 203, 204,
	205, 298, 206, 299, 272, 300, 86, 87, 88, 0,
	89, 301, 90, 91, 92, 302, 273, 93, 94, 303,
	304, 305, 306, 307, 308, 95, 96, 97, 98, 207,
	99, 208, 209, 309, 100, 310, 101, 311, 312, 313,
	102, 103, 314, 104, 315, 0, 316, 210, 105, 106,
	211, 212, 317, 318, 319, 107, 108, 213, 0, 109,
	320, 110, 321, 322, 274, 323, 111, 214, 324, 215,
	325, 112, 113, 114, 216, 217, 276, 326, 117, 327,
	115, 328, 275, 116, 218, 219, 220, 221, 329, 222,
	330, 277, 118, 278, 119, 120, 331, 332, 223, 279,
	121, 280, 333, 122, 334, 335, 123, 0, 124, 125,
	126, 127, 128, 281, 129, 130, 133, 131, 336, 132,
	337, 224, 134, 225, 135, 136, 338, 339, 340, 341,
	342, 137, 226, 282, 138, 283, 227, 139, 140, 141,
	142, 343, 228, 143, 229, 144, 344, 145, 146, 147,
	230, 148, 149, 345, 151, 152, 150, 153, 346, 154,
	284, 155, 156, 231, 157, 0, 158, 159, 160, 161,
	347, 232, 162, 163, 348, 164, 165, 285, 166, 233,
	234, 167, 349, 173, 168, 169, 170, 172, 235, 171,
	236, 350, 174, 351, 175, 176, 352, 237, 238, 239,
	353, 354, 177, 240, 241, 355, 178, 179, 180, 181,
	356, 357, 182, 183, 184, 358, 185, 359, 186, 187,
	188, 242, 243, 360, 361, 189, 362, 363, 364, 365,
	190, 191, 192, 193, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	78, 79, 286, 80, 287, 288, 289, 290, 194, 291,
	292, 293, 294, 81, 82, 195, 196, 197, 198, 83,
	199, 200, 295, 84, 201, 202, 85, 296, 297, 203,
	204, 205, 298, 206, 299, 272, 300, 86, 87, 88,
	0, 89, 301, 90, 91, 92, 302, 273, 93, 94,
	303, 304, 305, 306, 307, 308, 95, 96, 97, 98,
	207, 99, 208, 209, 309, 100, 310, 101, 311, 312,
	313, 102, 103, 314, 104, 315, 0, 316, 210, 105,
	106, 211, 212, 317, 318, 319, 107, 108, 213, 0,
	109, 320, 110, 321, 322, 274, 323, 111, 214, 324,
	215, 325, 112, 113, 114, 216, 217, 276, 326, 117,
	327, 115, 328, 275, 116, 218, 219, 220, 221, 329,
	222, 330, 277, 118, 278, 119, 120, 331, 332, 223,
	279, 121, 280, 333, 122, 334, 335, 123, 0, 124,
	125, 126, 127, 128, 281, 129, 130, 133, 131, 336,
	132, 337, 224, 134, 225, 135, 136, 338, 339, 340,
	341, 342, 137, 226, 282, 138, 283, 227, 139, 140,
	141, 142, 343, 228, 143, 229, 144, 344, 145, 146,
	147, 230, 148, 149, 345, 151, 152, 150, 153, 346,
	154, 284, 155, 156, 231, 157, 0, 158, 159, 160,
	161, 347, 232, 162, 163, 348, 164, 165, 285, 166,
	233, 234, 167, 349, 173, 168, 169, 170, 172, 235,
	171, 236, 350, 174, 351, 175, 176, 352, 237, 238,
	239, 353, 354, 177, 240, 241, 355, 178, 179, 180,
	181, 356, 357, 182, 183, 184, 358, 185, 359, 186,
	187, 188, 242, 243, 360, 361, 189, 362, 363, 364,
	365, 190, 191, 192, 193, 615, 604, 605, 602, 603,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 631,
	597, 0, 0, 0, 81, 82, 195, 646, 197, 647,
	83, 648, 649, 0, 84, 201, 202, 85, 612, 630,
	650, 651, 205, 0, 642, 0, 623, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 273, 93,
	94, 0, 624, 626, 0, 625, 627, 95, 96, 97,
	98, 652, 99, 653, 654, 681, 100, 0, 101, 0,
	0, 0, 645, 103, 0, 104, 0, 0, 0, 596,
	105, 106, 632, 633, 610, 0, 0, 107, 108, 655,
	0, 109, 0, 110, 0, 0, 274, 0, 111, 643,
	0, 215, 0, 112, 113, 114, 639, 641, 276, 0,
	117, 0, 115, 0, 275, 116, 656, 657, 658, 659,
	0, 622, 0, 277, 118, 278, 119, 120, 0, 0,
	644, 279, 121, 280, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 281, 129, 130, 133, 131,
	586, 132, 611, 640, 134, 660, 135, 136, 0, 0,
	0, 0, 0, 137, 226, 282, 138, 283, 634, 139,
	140, 141, 142, 0, 635, 143, 229, 144, 0, 145,
	146, 147, 661, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 284, 155, 156, 600, 157, 0, 158, 159,
	160, 161, 64, 232, 162, 163, 628, 164, 165, 285,
	166, 662, 234, 167, 0, 173, 168, 169, 170, 172,
	663, 171, 636, 0, 174, 66, 175, 176, 0, 237,
	664, 665, 0, 0, 177, 637, 638, 609, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 629, 185, 0,
	186, 187, 188, 498, 666, 0, 0, 189, 0, 0,
	0, 62, 190, 191, 192, 193, 587, 63, 615, 604,
	605, 602, 603, 591, 0, 0, 0, 583, 584, 0,
	0, 0, 0, 585, 78, 79, 592, 80, 0, 0,
	0, 0, 631, 597, 0, 0, 0, 81, 82, 195,
	646, 197, 647, 83, 648, 649, 0, 84, 201, 202,
	85, 612, 630, 650, 651, 205, 0, 642, 0, 623,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 273, 93, 94, 0, 624, 626, 0, 625, 627,
	95, 96, 97, 98, 652, 99, 653, 654, 0, 100,
	0, 101, 0, 0, 0, 645, 103, 0, 104, 0,
	0, 0, 596, 105, 106, 632, 633, 610, 0, 0,
	107, 108, 655, 0, 109, 0, 110, 0, 0, 274,
	0, 111, 643, 0, 215, 0, 112, 113, 114, 639,
	641, 276, 0, 117, 0, 115, 0, 275, 116, 656,
	657, 658, 659, 0, 622, 0, 277, 118, 278, 119,
	120, 0, 0, 644, 279, 121, 280, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 281, 129,
	130, 133, 131, 586, 132, 611, 640, 134, 660, 135,
	136, 0, 0, 0, 0, 0, 137, 226, 282, 138,
	283, 634, 139, 140, 141, 142, 0, 635, 143, 229,
	144, 0, 145, 146, 147, 661, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 284, 155, 156, 600, 157,
	0, 158, 159, 160, 161, 64, 232, 162, 163, 628,
	164, 165, 285, 166, 662, 234, 167, 0, 173, 168,
	169, 170, 172, 663, 171, 636, 0, 174, 66, 175,
	176, 0, 237, 664, 665, 0, 0, 177, 637, 638,
	609, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	629, 185, 0, 186, 187, 188, 498, 666, 0, 0,
	189, 0, 0, 0, 62, 190, 191, 192, 193, 587,
	63, 615, 604, 605, 602, 603, 591, 0, 0, 0,
	583, 584, 0, 0, 0, 0, 585, 78, 79, 592,
	80, 0, 0, 0, 0, 631, 597, 0, 0, 0,
	81, 82, 195, 646, 197, 647, 83, 648, 649, 1225,
	84, 201, 202, 85, 612, 630, 650, 651, 205, 0,
	642, 0, 623, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 273, 93, 94, 0, 624, 626,
	0, 625, 627, 95, 96, 97, 98, 652, 99, 653,
	654, 0, 100, 0, 101, 0, 0, 0, 645, 103,
	0, 104, 0, 0, 0, 596, 105, 106, 632, 633,
	610, 0, 0, 107, 108, 655, 0, 109, 0, 110,
	0, 1230, 274, 0, 111, 643, 0, 215, 0, 112,
	113, 114, 639, 641, 276, 0, 117, 0, 115, 0,
	275, 116, 656, 657, 658, 659, 0, 622, 0, 277,
	118, 278, 119, 120, 0, 1226, 644, 279, 121, 280,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 281, 129, 130, 133, 131, 586, 132, 611, 640,
	134, 660, 135, 136, 0, 0, 0, 0, 0, 137,
	226, 282, 138, 283, 634, 139, 140, 141, 142, 0,
	635, 143, 229, 144, 0, 145, 146, 147, 661, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 284, 155,
	156, 600, 157, 0, 158, 159, 160, 161, 0, 232,
	162, 163, 628, 164, 165, 285, 166, 662, 234, 167,
	0, 173, 168, 169, 170, 172, 663, 171, 636, 0,
	174, 0, 175, 176, 0, 237, 664, 665, 0, 1227,
	177, 637, 638, 609, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 629, 185, 0, 186, 187, 188, 242,
	666, 0, 0, 189, 0, 0, 0, 0, 190, 191,
	192, 193, 587, 0, 615, 604, 605, 602, 603, 591,
	0, 0, 0, 583, 584, 0, 0, 0, 0, 585,
	78, 79, 592, 80, 0, 0, 0, 0, 631, 597,
	0, 0, 0, 81, 82, 195, 646, 197, 647, 83,
	648, 649, 0, 84, 201, 202, 85, 612, 630, 650,
	651, 205, 0, 642, 0, 623, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 273, 93, 94,
	0, 624, 626, 0, 625, 627, 95, 96, 97, 98,
	652, 99, 653, 654, 0, 100, 0, 101, 0, 0,
	0, 645, 103, 0, 104, 0, 0, 0, 596, 105,
	106, 632, 633, 610, 0, 0, 107, 108, 655, 0,
	109, 0, 110, 0, 0, 274, 0, 111, 643, 0,
	215, 0, 112, 113, 114, 639, 641, 276, 0, 117,
	0, 115, 0, 275, 116, 656, 657, 658, 659, 0,
	622, 0, 277, 118, 278, 119, 120, 0, 0, 644,
	279, 121, 280, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 281, 129, 130, 133, 131, 586,
	132, 611, 640, 134, 660, 135, 136, 0, 0, 0,
	0, 0, 137, 226, 282, 138, 283, 634, 139, 140,
	141, 142, 0, 635, 143, 229, 144, 0, 145, 146,
	147, 661, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 284, 155, 156, 600, 157, 0, 158, 159, 160,
	161, 0, 232, 162, 163, 628, 164, 165, 285, 166,
	662, 234, 167, 0, 173, 168, 169, 170, 172, 663,
	171, 636, 0, 174, 0, 175, 176, 0, 237, 664,
	665, 0, 0, 177, 637, 638, 609, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 629, 185, 0, 186,
	187, 188, 242, 666, 0, 0, 189, 0, 0, 0,
	0, 190, 191, 192, 193, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 584, 0, 0,
	0, 0, 585, 0, 0, 592, 1614, 615, 604, 605,
	602, 603, 591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 631, 597, 0, 0, 0, 81, 82, 195, 646,
	197, 647, 83, 648, 649, 0, 84, 201, 202, 85,
	612, 630, 650, 651, 205, 0, 642, 0, 623, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	273, 93, 94, 0, 624, 626, 0, 625, 627, 95,
	96, 97, 98, 652, 99, 653, 654, 0, 100, 0,
	101, 0, 0, 0, 645, 103, 0, 104, 0, 0,
	0, 596, 105, 106, 632, 633, 610, 0, 0, 107,
	108, 655, 0, 109, 0, 110, 0, 0, 274, 0,
	111, 643, 0, 215, 0, 112, 113, 114, 639, 641,
	276, 0, 117, 0, 115, 0, 275, 116, 656, 657,
	658, 659, 0, 622, 0, 277, 118, 278, 119, 120,
	0, 0, 644, 279, 121, 280, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 281, 129, 130,
	133, 131, 586, 132, 611, 640, 134, 660, 135, 136,
	0, 0, 0, 0, 0, 137, 226, 282, 138, 283,
	634, 139, 140, 141, 142, 0, 635, 143, 229, 144,
	0, 145, 146, 147, 661, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 284, 155, 156, 600, 157, 0,
	158, 159, 160, 161, 0, 232, 162, 163, 628, 164,
	165, 285, 166, 662, 234, 167, 0, 173, 168, 169,
	170, 172, 663, 171, 636, 0, 174, 0, 175, 176,
	0, 237, 664, 665, 0, 0, 177, 637, 638, 609,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 629,
	185, 0, 186, 187, 188, 242, 666, 0, 0, 189,
	0, 0, 0, 0, 190, 191, 192, 193, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	584, 0, 0, 0, 0, 585, 0, 0, 592, 1563,
	615, 604, 605, 602, 603, 591, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 631, 597, 0, 0, 0, 81,
	82, 195, 646, 197, 647, 83, 648, 649, 0, 84,
	201, 202, 85, 612, 630, 650, 651, 205, 0, 642,
	0, 623, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 273, 93, 94, 0, 624, 626, 0,
	625, 627, 95, 96, 97, 98, 652, 99, 653, 654,
	0, 100, 0, 101, 0, 0, 0, 645, 103, 0,
	104, 0, 0, 0, 596, 105, 106, 632, 633, 610,
	0, 0, 107, 108, 655, 0, 109, 0, 110, 0,
	0, 274, 0, 111, 643, 0, 215, 0, 112, 113,
	114, 639, 641, 276, 0, 117, 0, 115, 0, 275,
	116, 656, 657, 658, 659, 0, 622, 0, 277, 118,
	278, 119, 120, 0, 0, 644, 279, 121, 280, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	281, 129, 130, 133, 131, 586, 132, 611, 640, 134,
	660, 135, 136, 0, 0, 0, 0, 0, 137, 226,
	282, 138, 283, 634, 139, 140, 141, 142, 0, 635,
	143, 229, 144, 0, 145, 146, 147, 661, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 284, 155, 156,
	600, 157, 0, 158, 159, 160, 161, 0, 232, 162,
	163, 628, 164, 165, 285, 166, 662, 234, 167, 0,
	173, 168, 169, 170, 172, 663, 171, 636, 0, 174,
	0, 175, 176, 0, 237, 664, 665, 0, 0, 177,
	637, 638, 609, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 629, 185, 0, 186, 187, 188, 242, 666,
	0, 0, 189, 0, 0, 0, 0, 190, 191, 192,
	193, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 584, 0, 0, 0, 0, 585, 0,
	0, 592, 1179, 615, 604, 605, 602, 603, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 631, 597, 0,
	0, 0, 81, 82, 195, 646, 197, 647, 83, 648,
	649, 0, 84, 201, 202, 85, 612, 630, 650, 651,
	205, 0, 642, 0, 623, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 273, 93, 94, 0,
	624, 626, 0, 625, 627, 95, 96, 97, 98, 652,
	99, 653, 654, 0, 100, 0, 101, 0, 0, 0,
	645, 103, 0, 104, 0, 0, 0, 596, 105, 106,
	632, 633, 610, 0, 0, 107, 108, 655, 0, 109,
	0, 110, 0, 0, 274, 0, 111, 643, 0, 215,
	0, 112, 113, 114, 639, 641, 276, 0, 117, 0,
	115, 0, 275, 116, 656, 657, 658, 659, 0, 622,
	0, 277, 118, 278, 119, 120, 0, 0, 644, 279,
	121, 280, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 281, 129, 130, 133, 131, 586, 132,
	611, 640, 134, 660, 135, 136, 0, 0, 0, 0,
	0, 137, 226, 282, 138, 283, 634, 139, 140, 141,
	142, 0, 635, 143, 229, 144, 0, 145, 146, 147,
	661, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	284, 155, 156, 600, 157, 0, 158, 159, 160, 161,
	0, 232, 162, 163, 628, 164, 165, 285, 166, 662,
	234, 167, 0, 173, 168, 169, 170, 172, 663, 171,
	636, 0, 174, 0, 175, 176, 0, 237, 664, 665,
	0, 0, 177, 637, 638, 609, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 629, 185, 0, 186, 187,
	188, 242, 666, 0, 0, 189, 0, 0, 0, 0,
	190, 191, 192, 193, 587, 0, 0, 0, 0, 615,
	604, 605, 602, 603, 591, 583, 584, 0, 0, 0,
	0, 585, 925, 1176, 592, 78, 79, 0, 80, 0,
	0, 0, 0, 631, 597, 0, 0, 0, 81, 82,
	195, 646, 197, 647, 83, 648, 649, 0, 84, 201,
	202, 85, 612, 630, 650, 651, 205, 0, 642, 0,
	623, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 273, 93, 94, 0, 624, 626, 0, 625,
	627, 95, 96, 97, 98, 652, 99, 653, 654, 0,
	100, 0, 101, 0, 0, 0, 645, 103, 0, 104,
	0, 0, 0, 596, 105, 106, 632, 633, 610, 0,
	0, 107, 108, 655, 0, 109, 0, 110, 0, 0,
	274, 0, 111, 643, 0, 215, 0, 112, 113, 114,
	639, 641, 276, 0, 117, 0, 115, 0, 275, 116,
	656, 657, 658, 659, 0, 622, 0, 277, 118, 278,
	119, 120, 0, 0, 644, 279, 121, 280, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 281,
	129, 130, 133, 131, 586, 132, 611, 640, 134, 660,
	135, 136, 0, 0, 0, 0, 0, 137, 226, 282,
	138, 283, 634, 139, 140, 141, 142, 0, 635, 143,
	229, 144, 0, 145, 146, 147, 661, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 284, 155, 156, 600,
	157, 0, 158, 159, 160, 161, 0, 232, 162, 163,
	628, 164, 165, 285, 166, 662, 234, 167, 0, 173,
	168, 169, 170, 172, 663, 171, 636, 0, 174, 0,
	175, 176, 0, 237, 664, 665, 0, 0, 177, 637,
	638, 609, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 629, 185, 0, 186, 187, 188, 242, 666, 0,
	0, 189, 0, 0, 0, 0, 190, 191, 192, 193,
	587, 0, 615, 604, 605, 602, 603, 591, 0, 0,
	0, 583, 584, 581, 0, 0, 0, 585, 78, 79,
	592, 80, 0, 0, 0, 0, 631, 597, 0, 0,
	0, 81, 82, 195, 646, 197, 647, 83, 648, 649,
	0, 84, 201, 202, 85, 612, 630, 650, 651, 205,
	0, 642, 0, 623, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 273, 93, 94, 0, 624,
	626, 0, 625, 627, 95, 96, 97, 98, 652, 99,
	653, 654, 0, 100, 0, 101, 0, 0, 0, 645,
	103, 0, 104, 0, 0, 0, 596, 105, 106, 632,
	633, 610, 0, 0, 107, 108, 655, 0, 109, 0,
	110, 0, 0, 274, 0, 111, 643, 0, 215, 0,
	112, 113, 114, 639, 641, 276, 0, 117, 0, 115,
	0, 275, 116, 656, 657, 658, 659, 0, 622, 0,
	277, 118, 278, 119, 120, 0, 0, 644, 279, 121,
	280, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 281, 129, 130, 133, 131, 586, 132, 611,
	640, 134, 660, 135, 136, 0, 0, 0, 0, 0,
	137, 226, 282, 138, 283, 634, 139, 140, 141, 142,
	0, 635, 143, 229, 144, 0, 145, 146, 147, 661,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 284,
	155, 156, 600, 157, 0, 158, 159, 160, 161, 0,
	232, 162, 163, 628, 164, 165, 285, 166, 662, 234,
	167, 0, 173, 168, 169, 170, 172, 663, 171, 636,
	0, 174, 0, 175, 176, 0, 237, 664, 665, 0,
	0, 177, 637, 638, 609, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 629, 185, 0, 186, 187, 188,
	242, 666, 1568, 0, 189, 0, 0, 0, 0, 190,
	191, 192, 193, 587, 0, 615, 604, 605, 602, 603,
	591, 0, 0, 0, 583, 584, 0, 0, 0, 0,
	585, 78, 79, 592, 80, 0, 0, 0, 0, 631,
	597, 0, 0, 0, 81, 82, 195, 646, 197, 647,
	83, 648, 649, 0, 84, 201, 202, 85, 612, 630,
	650, 651, 205, 0, 642, 0, 623, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 273, 93,
	94, 0, 624, 626, 0, 625, 627, 95, 96, 97,
	98, 652, 99, 653, 654, 681, 100, 0, 101, 0,
	0, 0, 645, 103, 0, 104, 0, 0, 0, 596,
	105, 106, 632, 633, 610, 0, 0, 107, 108, 655,
	0, 109, 0, 110, 0, 0, 274, 0, 111, 643,
	0, 215, 0, 112, 113, 114, 639, 641, 276, 0,
	117, 0, 115, 0, 275, 116, 656, 657, 658, 659,
	0, 622, 0, 277, 118, 278, 119, 120, 0, 0,
	644, 279, 121, 280, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 281, 129, 130, 133, 131,
	586, 132, 611, 640, 134, 660, 135, 136, 0, 0,
	0, 0, 0, 137, 226, 282, 138, 283, 634, 139,
	140, 141, 142, 0, 635, 143, 229, 144, 0, 145,
	146, 147, 661, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 284, 155, 156, 600, 157, 0, 158, 159,
	160, 161, 0, 232, 162, 163, 628, 164, 165, 285,
	166, 662, 234, 167, 0, 173, 168, 169, 170, 172,
	663, 171, 636, 0, 174, 0, 175, 176, 0, 237,
	664, 665, 0, 0, 177, 637, 638, 609, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 629, 185, 0,
	186, 187, 188, 242, 666, 0, 0, 189, 0, 0,
	0, 0, 190, 191, 192, 193, 587, 0, 615, 604,
	605, 602, 603, 591, 0, 0, 0, 583, 584, 0,
	0, 0, 0, 585, 78, 79, 592, 80, 0, 0,
	0, 0, 631, 597, 0, 0, 0, 81, 82, 195,
	646, 197, 647, 83, 648, 649, 0, 84, 201, 202,
	85, 612, 630, 650, 651, 205, 0, 642, 0, 623,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 273, 93, 94, 0, 624, 626, 0, 625, 627,
	95, 96, 97, 98, 652, 99, 653, 654, 0, 100,
	0, 101, 0, 0, 0, 645, 103, 0, 104, 0,
	0, 0, 596, 105, 106, 632, 633, 610, 0, 0,
	107, 108, 655, 0, 109, 0, 110, 0, 1230, 274,
	0, 111, 643, 0, 215, 0, 112, 113, 114, 639,
	641, 276, 0, 117, 0, 115, 0, 275, 116, 656,
	657, 658, 659, 0, 622, 0, 277, 118, 278, 119,
	120, 0, 0, 644, 279, 121, 280, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 281, 129,
	130, 133, 131, 586, 132, 611, 640, 134, 660, 135,
	136, 0, 0, 0, 0, 0, 137, 226, 282, 138,
	283, 634, 139, 140, 141, 142, 0, 635, 143, 229,
	144, 0, 145, 146, 147, 661, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 284, 155, 156, 600, 157,
	0, 158, 159, 160, 161, 0, 232, 162, 163, 628,
	164, 165, 285, 166, 662, 234, 167, 0, 173, 168,
	169, 170, 172, 663, 171, 636, 0, 174, 0, 175,
	176, 0, 237, 664, 665, 0, 0, 177, 637, 638,
	609, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	629, 185, 0, 186, 187, 188, 242, 666, 0, 0,
	189, 0, 0, 0, 0, 190, 191, 192, 193, 587,
	0, 0, 0, 0, 615, 604, 605, 602, 603, 591,
	583, 584, 0, 0, 0, 0, 585, 0, 0, 592,
	78, 79, 858, 80, 0, 0, 0, 0, 631, 597,
	0, 0, 0, 81, 82, 195, 646, 197, 647, 83,
	648, 649, 0, 84, 201, 202, 85, 612, 630, 650,
	651, 205, 0, 642, 0, 623, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 273, 93, 94,
	0, 624, 626, 0, 625, 627, 95, 96, 97, 98,
	652, 99, 653, 654, 0, 100, 0, 101, 0, 0,
	0, 645, 103, 0, 104, 0, 0, 0, 596, 105,
	106, 632, 633, 610, 0, 0, 107, 108, 655, 0,
	109, 0, 110, 0, 0, 274, 0, 111, 643, 0,
	215, 0, 112, 113, 114, 639, 641, 276, 0, 117,
	0, 115, 0, 275, 116, 656, 657, 658, 659, 0,
	622, 0, 277, 118, 278, 119, 120, 0, 0, 644,
	279, 121, 280, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 281, 129, 130, 133, 131, 586,
	132, 611, 640, 134, 660, 135, 136, 0, 0, 0,
	0, 0, 137, 226, 282, 138, 283, 634, 139, 140,
	141, 142, 0, 635, 143, 229, 144, 0, 145, 146,
	147, 661, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 284, 155, 156, 600, 157, 0, 158, 159, 160,
	161, 0, 232, 162, 163, 628, 164, 165, 285, 166,
	662, 234, 167, 0, 173, 168, 169, 170, 172, 663,
	171, 636, 0, 174, 0, 175, 176, 0, 237, 664,
	665, 0, 0, 177, 637, 638, 609, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 629, 185, 0, 186,
	187, 188, 242, 666, 0, 0, 189, 0, 0, 0,
	0, 190, 191, 192, 193, 587, 0, 615, 604, 605,
	602, 603, 591, 0, 0, 0, 583, 584, 0, 0,
	0, 0, 585, 78, 79, 592, 80, 0, 0, 0,
	0, 631, 597, 0, 0, 0, 81, 82, 195, 646,
	197, 647, 83, 648, 649, 0, 84, 201, 202, 85,
	612, 630, 650, 651, 205, 0, 642, 0, 623, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	273, 93, 1914, 0, 624, 626, 0, 625, 627, 95,
	96, 97, 98, 652, 99, 653, 654, 0, 100, 0,
	101, 0, 0, 0, 645, 103, 0, 104, 0, 0,
	0, 596, 105, 106, 632, 633, 610, 0, 0, 107,
	108, 655, 0, 109, 0, 110, 0, 0, 274, 0,
	111, 643, 0, 215, 0, 112, 113, 114, 639, 641,
	276, 0, 117, 0, 115, 0, 275, 116, 656, 657,
	658, 659, 0, 622, 0, 277, 118, 278, 119, 120,
	0, 0, 644, 279, 121, 280, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 281, 129, 130,
	133, 131, 586, 132, 611, 640, 134, 660, 135, 136,
	0, 0, 0, 0, 0, 137, 226, 282, 138, 283,
	634, 139, 140, 141, 142, 0, 635, 143, 229, 144,
	0, 145, 146, 147, 661, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 284, 155, 156, 600, 157, 0,
	158, 159, 160, 161, 0, 232, 162, 163, 628, 164,
	165, 285, 166, 662, 234, 167, 0, 173, 168, 169,
	170, 172, 663, 171, 636, 0, 174, 0, 175, 176,
	0, 237, 664, 665, 0, 0, 177, 637, 638, 609,
	178, 179, 1913, 181, 0, 0, 182, 183, 184, 629,
	185, 0, 186, 187, 188, 242, 666, 0, 0, 189,
	0, 0, 0, 0, 190, 191, 192, 193, 587, 0,
	615, 604, 605, 602, 603, 591, 0, 0, 0, 583,
	584, 0, 0, 0, 0, 585, 78, 79, 592, 80,
	0, 0, 0, 0, 631, 597, 0, 0, 0, 81,
	82, 1912, 646, 197, 647, 83, 648, 649, 0, 84,
	201, 202, 85, 612, 630, 650, 651, 205, 0, 642,
	0, 623, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 273, 93, 1914, 0, 624, 626, 0,
	625, 627, 95, 96, 97, 98, 652, 99, 653, 654,
	0, 100, 0, 101, 0, 0, 0, 645, 103, 0,
	104, 0, 0, 0, 596, 105, 106, 632, 633, 610,
	0, 0, 107, 108, 655, 0, 109, 0, 110, 0,
	0, 274, 0, 111, 643, 0, 215, 0, 112, 113,
	114, 639, 641, 276, 0, 117, 0, 115, 0, 275,
	116, 656, 657, 658, 659, 0, 622, 0, 277, 118,
	278, 119, 120, 0, 0, 644, 279, 121, 280, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	281, 129, 130, 133, 131, 586, 132, 611, 640, 134,
	660, 135, 136, 0, 0, 0, 0, 0, 137, 226,
	282, 138, 283, 634, 139, 140, 141, 142, 0, 635,
	143, 229, 144, 0, 145, 146, 147, 661, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 284, 155, 156,
	600, 157, 0, 158, 159, 160, 161, 0, 232, 162,
	163, 628, 164, 165, 285, 166, 662, 234, 167, 0,
	173, 168, 169, 170, 172, 663, 171, 636, 0, 174,
	0, 175, 176, 0, 237, 664, 665, 0, 0, 177,
	637, 638, 609, 178, 179, 1913, 181, 0, 0, 182,
	183, 184, 629, 185, 0, 186, 187, 188, 242, 666,
	0, 0, 189, 0, 0, 0, 0, 190, 191, 192,
	193, 587, 0, 615, 604, 605, 602, 603, 591, 0,
	0, 0, 583, 584, 0, 0, 0, 0, 585, 78,
	79, 592, 80, 0, 0, 0, 0, 631, 597, 0,
	0, 0, 81, 82, 195, 646, 197, 647, 83, 648,
	649, 0, 84, 201, 202, 85, 612, 630, 650, 651,
	205, 0, 642, 0, 623, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 273, 93, 94, 0,
	624, 626, 0, 625, 627, 95, 96, 97, 98, 652,
	99, 653, 654, 0, 100, 0, 101, 0, 0, 0,
	645, 103, 0, 104, 0, 0, 0, 596, 105, 106,
	632, 633, 610, 0, 0, 107, 108, 655, 0, 109,
	0, 110, 0, 0, 274, 0, 111, 643, 0, 215,
	0, 112, 113, 114, 639, 641, 276, 0, 117, 0,
	115, 0, 275, 116, 656, 657, 658, 659, 0, 622,
	0, 277, 118, 278, 119, 120, 0, 0, 644, 279,
	121, 280, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 281, 129, 130, 133, 131, 586, 132,
	611, 640, 134, 660, 135, 136, 0, 0, 0, 0,
	0, 137, 226, 282, 138, 283, 634, 139, 140, 141,
	142, 0, 635, 143, 229, 144, 0, 145, 146, 147,
	661, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	284, 155, 156, 600, 157, 0, 158, 159, 160, 161,
	0, 232, 162, 163, 628, 164, 165, 285, 166, 662,
	234, 167, 0, 173, 168, 169, 170, 172, 663, 171,
	636, 0, 174, 0, 175, 176, 0, 237, 664, 665,
	0, 0, 177, 637, 638, 609, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 629, 185, 0, 186, 187,
	188, 242, 666, 0, 0, 189, 0, 0, 0, 0,
	190, 191, 192, 193, 587, 0, 1202, 604, 605, 602,
	603, 591, 0, 0, 0, 583, 584, 0, 0, 0,
	0, 585, 78, 79, 592, 80, 0, 0, 0, 0,
	631, 597, 0, 0, 0, 81, 82, 195, 646, 197,
	647, 83, 648, 649, 0, 84, 201, 202, 85, 612,
	630, 650, 651, 205, 0, 642, 0, 623, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 273,
	93, 94, 0, 624, 626, 0, 625, 627, 95, 96,
	97, 98, 652, 1205, 653, 654, 0, 100, 0, 101,
	0, 0, 0, 645, 103, 0, 104, 0, 0, 0,
	596, 105, 106, 632, 633, 610, 0, 0, 107, 108,
	655, 0, 109, 0, 110, 0, 0, 274, 0, 111,
	643, 0, 215, 0, 112, 113, 1206, 639, 641, 276,
	0, 117, 0, 115, 0, 275, 116, 656, 657, 658,
	659, 0, 622, 0, 277, 118, 278, 119, 120, 0,
	0, 644, 279, 121, 280, 0, 122, 0, 0, 123,
	0, 124, 1207, 1204, 127, 128, 281, 129, 130, 133,
	131, 586, 132, 611, 640, 134, 660, 135, 136, 0,
	0, 0, 0, 0, 137, 226, 282, 138, 283, 634,
	139, 140, 141, 142, 0, 635, 143, 229, 144, 0,
	145, 146, 147, 661, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 284, 155, 156, 600, 157, 0, 158,
	159, 160, 1208, 0, 232, 162, 163, 628, 164, 165,
	285, 166, 662, 234, 167, 0, 173, 168, 169, 170,
	172, 663, 171, 636, 0, 174, 0, 175, 176, 0,
	237, 664, 665, 0, 0, 177, 637, 638, 609, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 629, 185,
	0, 186, 187, 188, 242, 666, 0, 0, 189, 0,
	0, 0, 0, 190, 191, 1203, 193, 587, 0, 615,
	604, 605, 602, 603, 591, 0, 0, 0, 583, 584,
	0, 0, 0, 0, 585, 78, 79, 592, 80, 0,
	0, 0, 0, 631, 597, 0, 0, 0, 81, 82,
	195, 646, 197, 647, 83, 648, 649, 0, 84, 201,
	202, 85, 612, 630, 650, 651, 205, 0, 642, 0,
	623, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 273, 93, 94, 0, 624, 626, 0, 625,
	627, 95, 96, 97, 98, 652, 99, 653, 654, 0,
	100, 0, 101, 0, 0, 0, 645, 103, 0, 104,
	0, 0, 0, 596, 105, 106, 632, 633, 610, 0,
	0, 107, 108, 655, 0, 109, 0, 110, 0, 0,
	274, 0, 111, 643, 0, 215, 0, 112, 113, 114,
	639, 641, 276, 0, 117, 0, 115, 0, 275, 116,
	656, 657, 658, 659, 0, 622, 0, 277, 118, 278,
	119, 120, 0, 0, 644, 279, 121, 280, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 281,
	129, 130, 133, 131, 0, 132, 611, 640, 134, 660,
	135, 136, 0, 0, 0, 0, 0, 137, 226, 282,
	138, 283, 634, 139, 140, 141, 142, 0, 635, 143,
	229, 144, 0, 145, 146, 147, 661, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 284, 155, 156, 1220,
	157, 0, 158, 159, 160, 161, 0, 232, 162, 163,
	628, 164, 165, 285, 166, 662, 234, 167, 0, 173,
	168, 169, 170, 172, 663, 171, 636, 0, 174, 0,
	175, 176, 0, 237, 664, 665, 0, 0, 177, 637,
	638, 609, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 629, 185, 0, 186, 187, 188, 242, 666, 0,
	0, 189, 0, 0, 0, 0, 190, 191, 192, 193,
	0, 0, 615, 604, 605, 602, 603, 591, 0, 0,
	0, 1216, 1217, 0, 0, 0, 0, 1218, 78, 79,
	1219, 80, 0, 0, 0, 0, 631, 597, 0, 0,
	0, 81, 82, 0, 646, 197, 647, 83, 648, 649,
	0, 84, 201, 202, 85, 612, 630, 650, 651, 205,
	0, 642, 0, 623, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 273, 93, 1914, 0, 624,
	626, 0, 625, 627, 95, 96, 97, 98, 652, 99,
	653, 654, 0, 100, 0, 101, 0, 0, 0, 645,
	103, 0, 104, 0, 0, 0, 596, 105, 106, 632,
	633, 610, 0, 0, 107, 108, 655, 0, 109, 0,
	110, 0, 0, 274, 0, 111, 643, 0, 215, 0,
	112, 113, 114, 639, 641, 0, 0, 117, 0, 115,
	0, 275, 116, 656, 657, 658, 659, 0, 622, 0,
	0, 118, 278, 119, 120, 0, 0, 644, 279, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 281, 129, 130, 133, 131, 586, 132, 611,
	640, 134, 660, 135, 136, 0, 0, 0, 0, 0,
	137, 226, 282, 138, 283, 634, 139, 140, 141, 142,
	0, 635, 143, 229, 144, 0, 145, 146, 147, 661,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 284,
	155, 156, 600, 157, 0, 158, 159, 160, 161, 0,
	232, 162, 163, 628, 164, 165, 0, 166, 662, 234,
	167, 0, 173, 168, 169, 170, 172, 663, 171, 636,
	0, 174, 0, 175, 176, 0, 237, 664, 665, 0,
	0, 177, 637, 638, 609, 178, 179, 1913, 181, 0,
	0, 182, 183, 184, 629, 185, 0, 186, 187, 188,
	242, 666, 0, 0, 189, 0, 0, 0, 0, 190,
	191, 192, 193, 0, 0, 615, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 584, 0, 0, 0, 0,
	585, 78, 79, 592, 80, 0, 0, 0, 0, 631,
	0, 0, 0, 0, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 630,
	203, 204, 205, 0, 642, 0, 623, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 273, 93,
	94, 0, 624, 626, 0, 625, 627, 95, 96, 97,
	98, 207, 99, 208, 209, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 632, 633, 0, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 274, 0, 111, 643,
	0, 215, 0, 112, 113, 114, 639, 641, 276, 0,
	117, 0, 115, 0, 275, 116, 218, 219, 220, 221,
	0, 222, 0, 277, 118, 278, 119, 120, 0, 0,
	644, 279, 121, 280, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 281, 129, 130, 133, 131,
	0, 132, 0, 640, 134, 225, 135, 136, 0, 0,
	0, 0, 0, 137, 226, 282, 138, 283, 634, 139,
	140, 141, 142, 0, 635, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 284, 155, 156, 231, 157, 0, 158, 159,
	160, 161, 0, 232, 162, 163, 628, 164, 165, 285,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 636, 0, 174, 0, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 637, 638, 0, 178, 179,
	180, 181, 494, 0, 182, 183, 184, 629, 185, 0,
	186, 187, 188, 242, 243, 0, 0, 189, 78, 79,
	0, 80, 190, 191, 192, 193, 194, 0, 0, 0,
	0, 81, 82, 195, 196, 197, 198, 83, 199, 200,
	0, 84, 201, 202, 85, 0, 1681, 203, 204, 205,
	0, 206, 0, 272, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 273, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 207, 99,
	208, 209, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 210, 105, 106, 211,
	212, 0, 0, 0, 107, 108, 213, 0, 109, 0,
	110, 0, 0, 274, 0, 111, 214, 0, 215, 0,
	112, 113, 114, 216, 217, 276, 0, 117, 0, 115,
	0, 275, 116, 218, 219, 220, 221, 0, 222, 0,
	277, 118, 278, 119, 120, 0, 0, 223, 279, 121,
	280, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 281, 129, 130, 133, 131, 0, 132, 0,
	224, 134, 225, 135, 136, 0, 0, 0, 0, 0,
	137, 226, 282, 138, 283, 227, 139, 140, 141, 142,
	0, 228, 143, 229, 144, 0, 145, 146, 147, 230,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 284,
	155, 156, 231, 157, 0, 158, 159, 160, 161, 64,
	232, 162, 163, 0, 164, 165, 285, 166, 233, 234,
	167, 0, 173, 168, 169, 170, 172, 235, 171, 236,
	0, 174, 66, 175, 176, 0, 237, 238, 239, 0,
	0, 177, 240, 241, 0, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	498, 243, 0, 0, 189, 0, 0, 0, 62, 190,
	191, 192, 193, 0, 63, 494, 807, 0, 808, 803,
	798, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 61, 80, 0, 0, 0, 0, 194,
	0, 0, 0, 0, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 0,
	203, 204, 205, 0, 206, 0, 272, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 273, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 207, 99, 208, 209, 811, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 211, 212, 800, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 274, 0, 111, 214,
	0, 215, 0, 112, 113, 114, 216, 217, 276, 0,
	117, 0, 115, 0, 275, 116, 218, 219, 220, 221,
	0, 222, 0, 277, 118, 278, 119, 120, 0, 0,
	223, 279, 121, 280, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 281, 129, 130, 133, 131,
	0, 132, 0, 224, 134, 225, 135, 136, 0, 801,
	0, 0, 0, 137, 226, 282, 138, 283, 227, 139,
	140, 141, 142, 0, 228, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 284, 155, 156, 231, 157, 0, 158, 159,
	160, 161, 0, 232, 162, 163, 0, 164, 165, 285,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 236, 0, 174, 0, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 240, 241, 799, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 242, 243, 494, 807, 189, 808, 803,
	798, 0, 190, 191, 192, 193, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 809, 804, 194,
	0, 0, 0, 0, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 0,
	203, 204, 205, 0, 206, 0, 272, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 273, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 207, 99, 208, 209, 794, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 211, 212, 800, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 274, 0, 111, 214,
	0, 215, 0, 112, 113, 114, 216, 217, 276, 0,
	117, 0, 115, 0, 275, 116, 218, 219, 220, 221,
	0, 222, 0, 277, 118, 278, 119, 120, 0, 0,
	223, 279, 121, 280, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 281, 129, 130, 133, 131,
	0, 132, 0, 224, 134, 225, 135, 136, 0, 801,
	0, 0, 0, 137, 226, 282, 138, 283, 227, 139,
	140, 141, 142, 0, 228, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 284, 155, 156, 231, 157, 0, 158, 159,
	160, 161, 0, 232, 162, 163, 0, 164, 165, 285,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 236, 0, 174, 0, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 240, 241, 799, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 242, 243, 494, 807, 189, 808, 803,
	798, 0, 190, 191, 192, 193, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 809, 804, 194,
	0, 0, 0, 0, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 0,
	203, 204, 205, 0, 206, 0, 272, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 273, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 207, 99, 208, 209, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 211, 212, 800, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 274, 0, 111, 214,
	0, 215, 0, 112, 113, 114, 216, 217, 276, 0,
	117, 0, 115, 0, 275, 116, 218, 219, 220, 221,
	0, 222, 0, 277, 118, 278, 119, 120, 0, 0,
	223, 279, 121, 280, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 281, 129, 130, 133, 131,
	0, 132, 0, 224, 134, 225, 135, 136, 0, 801,
	0, 0, 0, 137, 226, 282, 138, 283, 227, 139,
	140, 141, 142, 0, 228, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 284, 155, 156, 231, 157, 0, 158, 159,
	160, 161, 0, 232, 162, 163, 0, 164, 165, 285,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 236, 0, 174, 0, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 240, 241, 799, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 242, 243, 75, 0, 189, 0, 0,
	0, 0, 190, 191, 192, 193, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 809, 804, 194,
	0, 0, 0, 0, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 0,
	203, 204, 205, 0, 206, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 207, 99, 208, 209, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 211, 212, 0, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 214,
	0, 215, 0, 112, 113, 114, 216, 217, 0, 0,
	117, 0, 115, 0, 0, 116, 218, 219, 220, 221,
	0, 222, 0, 0, 118, 0, 119, 120, 0, 0,
	223, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 224, 134, 225, 135, 136, 0, 0,
	455, 0, 0, 137, 226, 0, 138, 0, 227, 139,
	140, 141, 142, 0, 228, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 231, 157, 0, 158, 159,
	160, 161, 64, 232, 162, 163, 0, 164, 165, 0,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 236, 0, 174, 66, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 240, 241, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 498, 243, 0, 0, 189, 75, 0,
	0, 62, 190, 191, 192, 193, 0, 63, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 194, 0, 0, 0, 1116, 81, 82, 195,
	196, 197, 198, 83, 199, 200, 0, 84, 201, 202,
	85, 0, 0, 203, 204, 205, 0, 206, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 207, 99, 208, 209, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 210, 105, 106, 211, 212, 0, 0, 0,
	107, 108, 213, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 214, 0, 215, 0, 112, 113, 114, 216,
	217, 0, 0, 117, 0, 115, 0, 0, 116, 218,
	219, 220, 221, 0, 222, 0, 0, 118, 0, 119,
	120, 0, 0, 223, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 224, 134, 225, 135,
	136, 0, 0, 0, 0, 0, 137, 226, 0, 138,
	0, 227, 139, 140, 141, 142, 0, 228, 143, 229,
	144, 0, 145, 146, 147, 230, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 231, 157,
	0, 158, 159, 160, 161, 64, 232, 162, 163, 0,
	164, 165, 0, 166, 233, 234, 167, 0, 173, 168,
	169, 170, 172, 235, 171, 236, 0, 174, 66, 175,
	176, 0, 237, 238, 239, 0, 0, 177, 240, 241,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 498, 243, 0, 0,
	189, 75, 0, 0, 62, 190, 191, 192, 193, 0,
	63, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 0, 0, 194, 0, 1356, 0, 61,
	81, 82, 195, 196, 197, 198, 83, 199, 200, 0,
	84, 201, 202, 85, 0, 0, 203, 204, 205, 0,
	206, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 207, 99, 208,
	209, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 210, 105, 106, 211, 212,
	0, 0, 0, 107, 108, 213, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 214, 0, 215, 0, 112,
	113, 114, 216, 217, 0, 0, 117, 0, 115, 0,
	0, 116, 218, 219, 220, 221, 0, 222, 0, 0,
	118, 0, 119, 120, 0, 0, 223, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 224,
	134, 225, 135, 136, 0, 0, 0, 0, 0, 137,
	226, 0, 138, 0, 227, 139, 140, 141, 142, 0,
	228, 143, 229, 144, 0, 145, 146, 147, 230, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 231, 157, 0, 158, 159, 160, 161, 0, 232,
	162, 163, 0, 164, 165, 0, 166, 233, 234, 167,
	0, 173, 168, 169, 170, 172, 235, 171, 236, 0,
	174, 0, 175, 176, 0, 237, 238, 239, 0, 0,
	177, 240, 241, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 242,
	243, 0, 0, 189, 0, 75, 0, 0, 190, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 194,
	0, 0, 0, 573, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 0,
	203, 204, 205, 0, 206, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 207, 99, 208, 209, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 211, 212, 0, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 214,
	0, 215, 0, 112, 113, 114, 216, 217, 0, 0,
	117, 0, 115, 0, 0, 116, 218, 219, 220, 221,
	0, 222, 0, 0, 118, 0, 119, 120, 0, 0,
	223, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 224, 134, 225, 135, 136, 0, 0,
	455, 0, 0, 137, 226, 0, 138, 0, 227, 139,
	140, 141, 142, 0, 228, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 231, 157, 0, 158, 159,
	160, 161, 0, 232, 162, 163, 0, 164, 165, 0,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 236, 0, 174, 0, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 240, 241, 0, 178, 179,
	180, 181, 75, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 242, 243, 0, 0, 189, 78, 79,
	0, 80, 190, 191, 192, 193, 194, 0, 0, 0,
	0, 81, 82, 195, 196, 197, 198, 83, 199, 200,
	0, 84, 201, 202, 85, 0, 1116, 203, 204, 205,
	0, 206, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 207, 99,
	208, 209, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 210, 105, 106, 211,
	212, 0, 0, 0, 107, 108, 213, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 214, 0, 215, 0,
	112, 113, 114, 216, 217, 0, 0, 117, 0, 115,
	0, 0, 116, 218, 219, 220, 221, 0, 222, 0,
	0, 118, 0, 119, 120, 0, 0, 223, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	224, 134, 225, 135, 136, 0, 0, 0, 0, 0,
	137, 226, 0, 138, 0, 227, 139, 140, 141, 142,
	0, 228, 143, 229, 144, 0, 145, 146, 147, 230,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 231, 157, 0, 158, 159, 160, 161, 0,
	232, 162, 163, 0, 164, 165, 0, 166, 233, 234,
	167, 0, 173, 168, 169, 170, 172, 235, 171, 236,
	0, 174, 0, 175, 176, 0, 237, 238, 239, 0,
	0, 177, 240, 241, 0, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	242, 243, 0, 0, 189, 0, 75, 0, 0, 190,
	191, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	194, 0, 0, 0, 699, 81, 82, 195, 196, 197,
	198, 83, 199, 200, 0, 84, 201, 202, 85, 0,
	0, 203, 204, 205, 0, 206, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 207, 99, 208, 209, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	210, 105, 106, 211, 212, 0, 0, 0, 107, 108,
	213, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	214, 0, 215, 0, 112, 113, 114, 216, 217, 0,
	0, 117, 0, 115, 0, 0, 116, 218, 219, 220,
	221, 0, 222, 0, 0, 118, 0, 119, 120, 0,
	0, 223, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 224, 134, 225, 135, 136, 0,
	0, 0, 0, 0, 137, 226, 0, 138, 0, 227,
	139, 140, 141, 142, 0, 228, 143, 229, 144, 0,
	145, 146, 147, 230, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 231, 157, 0, 158,
	159, 160, 161, 0, 232, 162, 163, 0, 164, 165,
	0, 166, 233, 234, 167, 0, 173, 168, 169, 170,
	172, 235, 171, 236, 0, 174, 0, 175, 176, 0,
	237, 238, 239, 0, 0, 177, 240, 241, 0, 178,
	179, 180, 181, 75, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 242, 243, 0, 0, 189, 78,
	79, 0, 80, 190, 191, 192, 193, 194, 0, 0,
	0, 0, 81, 82, 195, 196, 197, 198, 83, 199,
	200, 0, 84, 201, 202, 85, 0, 1020, 203, 204,
	205, 0, 206, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 207,
	99, 208, 209, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 210, 105, 106,
	211, 212, 0, 0, 0, 107, 108, 213, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 214, 0, 215,
	0, 112, 113, 114, 216, 217, 0, 0, 117, 0,
	115, 0, 0, 116, 218, 219, 220, 221, 0, 222,
	0, 0, 118, 0, 119, 120, 0, 0, 223, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 224, 134, 225, 135, 136, 0, 0, 0, 0,
	0, 137, 226, 0, 138, 0, 227, 139, 140, 141,
	142, 0, 228, 143, 229, 144, 0, 145, 146, 147,
	230, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 231, 157, 0, 158, 159, 160, 161,
	0, 232, 162, 163, 0, 164, 165, 0, 166, 233,
	234, 167, 0, 173, 168, 169, 170, 172, 235, 171,
	236, 0, 174, 0, 175, 176, 0, 237, 238, 239,
	0, 0, 177, 240, 241, 0, 178, 179, 180, 181,
	75, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 242, 243, 0, 0, 189, 78, 79, 0, 80,
	190, 191, 192, 193, 194, 0, 0, 0, 0, 81,
	82, 195, 196, 197, 198, 83, 199, 200, 0, 84,
	201, 202, 85, 0, 1578, 203, 204, 205, 0, 206,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 207, 99, 208, 209,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 210, 105, 106, 211, 212, 0,
	0, 0, 107, 108, 213, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 214, 0, 215, 0, 112, 113,
	114, 216, 217, 0, 0, 117, 0, 115, 0, 0,
	116, 218, 219, 220, 221, 0, 222, 0, 0, 118,
	0, 119, 120, 0, 0, 223, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 224, 134,
	225, 135, 136, 0, 0, 0, 0, 0, 137, 226,
	0, 138, 0, 227, 139, 140, 141, 142, 0, 228,
	143, 229, 144, 0, 145, 146, 147, 230, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	231, 157, 0, 158, 159, 160, 161, 0, 232, 162,
	163, 0, 164, 165, 0, 166, 233, 234, 167, 0,
	173, 168, 169, 170, 172, 235, 171, 236, 0, 174,
	0, 175, 176, 0, 237, 238, 239, 0, 0, 177,
	240, 241, 0, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 0, 185, 0, 186, 187, 188, 242, 243,
	0, 0, 189, 0, 0, 0, 0, 190, 191, 192,
	193, 615, 604, 605, 602, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 677, 0, 0, 0, 194, 0, 0, 0, 0,
	81, 82, 195, 646, 197, 647, 83, 648, 649, 0,
	84, 201, 202, 85, 0, 0, 650, 651, 205, 0,
	206, 0, 272, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 273, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 652, 99, 653,
	654, 0, 100, 0, 101, 0, 0, 0, 645, 103,
	0, 104, 0, 0, 0, 210, 105, 106, 211, 212,
	610, 0, 0, 107, 108, 655, 0, 109, 0, 110,
	0, 0, 274, 0, 111, 214, 0, 215, 0, 112,
	113, 114, 216, 217, 276, 0, 117, 0, 115, 0,
	275, 116, 656, 657, 658, 659, 0, 622, 0, 277,
	118, 278, 119, 120, 0, 0, 223, 279, 121, 280,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 281, 129, 130, 133, 131, 0, 132, 611, 224,
	134, 660, 135, 136, 0, 0, 0, 0, 0, 137,
	226, 282, 138, 283, 227, 139, 140, 141, 142, 0,
	228, 143, 229, 144, 0, 145, 146, 147, 661, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 284, 155,
	156, 231, 157, 0, 158, 159, 160, 161, 0, 232,
	162, 163, 0, 164, 165, 285, 166, 662, 234, 167,
	0, 173, 168, 169, 170, 172, 663, 171, 236, 0,
	174, 0, 175, 176, 0, 237, 664, 665, 0, 0,
	177, 240, 241, 609, 178, 179, 180, 181, 75, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 242,
	666, 0, 0, 189, 78, 79, 0, 80, 190, 191,
	192, 193, 194, 0, 0, 0, 0, 81, 82, 195,
	196, 197, 198, 83, 199, 200, 0, 84, 201, 202,
	85, 0, 0, 203, 204, 205, 0, 206, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 778, 98, 207, 99, 208, 209, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 210, 105, 106, 211, 212, 0, 0, 0,
	107, 108, 213, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 214, 0, 215, 0, 112, 113, 114, 216,
	217, 0, 0, 117, 0, 115, 0, 0, 116, 218,
	219, 220, 221, 0, 222, 0, 0, 118, 0, 119,
	120, 0, 0, 223, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 224, 134, 225, 135,
	136, 0, 0, 0, 0, 0, 137, 226, 0, 138,
	0, 227, 139, 140, 141, 142, 0, 228, 143, 229,
	144, 0, 145, 146, 147, 230, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 231, 157,
	0, 158, 159, 160, 161, 0, 232, 162, 163, 0,
	164, 165, 0, 166, 233, 234, 167, 0, 173, 168,
	169, 170, 172, 235, 171, 236, 0, 174, 777, 175,
	176, 0, 237, 238, 239, 0, 0, 177, 240, 241,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 242, 243, 0, 75,
	189, 0, 0, 0, 0, 190, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 781, 194, 0, 0, 0, 0, 81, 82,
	195, 196, 197, 198, 83, 199, 200, 0, 84, 201,
	202, 85, 0, 0, 203, 204, 205, 0, 206, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 207, 99, 208, 209, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 210, 105, 106, 211, 212, 0, 0,
	0, 107, 108, 213, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 214, 0, 215, 0, 112, 113, 114,
	216, 217, 0, 0, 117, 0, 115, 0, 0, 116,
	218, 219, 220, 221, 0, 222, 0, 0, 118, 0,
	119, 120, 0, 0, 223, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 224, 134, 225,
	135, 136, 0, 0, 0, 0, 0, 137, 226, 0,
	138, 0, 227, 139, 140, 141, 142, 0, 228, 143,
	229, 144, 0, 145, 146, 147, 230, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 231,
	157, 0, 158, 159, 160, 161, 0, 232, 162, 163,
	0, 164, 165, 0, 166, 233, 234, 167, 0, 173,
	168, 169, 170, 172, 235, 171, 236, 0, 174, 0,
	175, 176, 0, 237, 238, 239, 0, 0, 177, 240,
	241, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 242, 243, 0,
	494, 189, 0, 0, 0, 0, 190, 191, 192, 193,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 781, 194, 0, 0, 0, 0, 81,
	82, 195, 196, 197, 198, 83, 199, 200, 0, 84,
	201, 202, 85, 0, 0, 203, 204, 205, 0, 206,
	0, 272, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 273, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 207, 99, 208, 209,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 210, 105, 106, 211, 212, 0,
	0, 0, 107, 108, 213, 0, 109, 0, 110, 0,
	0, 274, 0, 111, 214, 0, 215, 0, 112, 113,
	114, 216, 217, 276, 0, 117, 0, 115, 0, 275,
	116, 218, 219, 220, 221, 0, 222, 0, 277, 118,
	278, 119, 120, 0, 0, 223, 279, 121, 280, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	281, 129, 130, 133, 131, 0, 132, 0, 224, 134,
	225, 135, 136, 0, 0, 0, 0, 0, 137, 226,
	282, 138, 283, 227, 139, 140, 141, 142, 0, 228,
	143, 229, 144, 0, 145, 146, 147, 230, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 284, 155, 156,
	231, 157, 0, 158, 159, 160, 161, 0, 232, 162,
	163, 0, 164, 165, 285, 166, 233, 234, 167, 0,
	173, 168, 169, 170, 172, 235, 171, 236, 0, 174,
	0, 175, 176, 0, 237, 238, 239, 0, 0, 177,
	240, 241, 0, 178, 179, 180, 181, 75, 0, 182,
	183, 184, 0, 185, 0, 186, 187, 188, 242, 243,
	0, 0, 189, 78, 79, 0, 80, 190, 191, 192,
	193, 194, 0, 0, 0, 0, 81, 82, 195, 196,
	197, 198, 83, 199, 200, 0, 84, 201, 202, 85,
	0, 0, 203, 204, 205, 984, 206, 0, 0, 0,
	86, 87, 88, 0, 89, 982, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 207, 99, 208, 209, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 210, 105, 106, 211, 212, 0, 1089, 0, 107,
	108, 213, 0, 109, 0, 110, 987, 0, 0, 0,
	111, 214, 0, 215, 0, 112, 113, 114, 216, 217,
	0, 0, 117, 1087, 115, 0, 0, 116, 218, 219,
	220, 221, 0, 222, 0, 0, 118, 0, 119, 120,
	0, 0, 223, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 224, 134, 225, 135, 136,
	0, 0, 0, 0, 0, 137, 226, 0, 138, 0,
	227, 139, 140, 141, 142, 0, 228, 143, 229, 144,
	986, 145, 146, 147, 230, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 231, 157, 0,
	158, 159, 160, 161, 0, 232, 162, 163, 0, 164,
	165, 0, 166, 233, 234, 167, 0, 173, 168, 169,
	170, 172, 235, 171, 236, 0, 174, 0, 175, 176,
	0, 237, 238, 239, 0, 0, 177, 240, 241, 0,
	178, 179, 180, 181, 75, 1088, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 242, 243, 0, 0, 189,
	78, 79, 0, 80, 190, 191, 192, 193, 194, 0,
	0, 0, 0, 81, 82, 195, 196, 197, 198, 83,
	199, 200, 0, 84, 201, 202, 85, 0, 0, 203,
	204, 205, 984, 206, 0, 0, 979, 86, 87, 88,
	0, 89, 982, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	207, 99, 208, 209, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 210, 105,
	106, 211, 212, 0, 0, 0, 107, 108, 213, 0,
	109, 0, 110, 987, 0, 0, 0, 111, 214, 0,
	215, 0, 112, 113, 114, 978, 217, 0, 0, 117,
	0, 115, 0, 0, 116, 218, 219, 220, 221, 0,
	222, 0, 0, 118, 0, 119, 120, 0, 0, 223,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 224, 134, 225, 135, 136, 0, 0, 0,
	0, 0, 137, 226, 0, 138, 0, 227, 139, 140,
	141, 142, 0, 228, 143, 229, 144, 986, 145, 146,
	147, 230, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 231, 157, 0, 158, 159, 160,
	161, 0, 232, 162, 163, 0, 164, 165, 0, 166,
	233, 234, 167, 0, 173, 168, 169, 170, 172, 235,
	171, 236, 0, 174, 0, 175, 176, 0, 237, 238,
	239, 0, 0, 177, 240, 241, 0, 178, 179, 180,
	181, 75, 985, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 242, 243, 0, 0, 189, 78, 79, 0,
	80, 190, 191, 192, 193, 194, 0, 1356, 0, 0,
	81, 82, 195, 196, 197, 198, 83, 199, 200, 0,
	84, 201, 202, 85, 0, 0, 203, 204, 205, 0,
	206, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 207, 99, 208,
	209, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 210, 105, 106, 211, 212,
	0, 0, 0, 107, 108, 213, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 214, 0, 215, 0, 112,
	113, 114, 216, 217, 0, 0, 117, 0, 115, 0,
	0, 116, 218, 219, 220, 221, 0, 222, 0, 0,
	118, 0, 119, 120, 0, 0, 223, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 224,
	134, 225, 135, 136, 0, 0, 0, 0, 0, 137,
	226, 0, 138, 0, 227, 139, 140, 141, 142, 0,
	228, 143, 229, 144, 0, 145, 146, 147, 230, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 231, 157, 0, 158, 159, 160, 161, 0, 232,
	162, 163, 0, 164, 165, 0, 166, 233, 234, 167,
	0, 173, 168, 169, 170, 172, 235, 171, 236, 0,
	174, 0, 175, 176, 0, 237, 238, 239, 0, 0,
	177, 240, 241, 0, 178, 179, 180, 181, 75, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 242,
	243, 0, 0, 189, 78, 79, 0, 80, 190, 191,
	192, 193, 194, 0, 0, 0, 0, 81, 82, 195,
	196, 197, 198, 83, 199, 200, 0, 84, 201, 202,
	85, 0, 0, 203, 204, 205, 0, 206, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 207, 99, 208, 209, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 210, 105, 106, 211, 212, 0, 0, 0,
	107, 108, 213, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 214, 0, 215, 0, 112, 113, 114, 216,
	217, 0, 0, 117, 0, 115, 0, 0, 116, 218,
	219, 220, 221, 0, 222, 0, 0, 118, 0, 119,
	120, 0, 0, 223, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 224, 134, 225, 135,
	136, 0, 0, 455, 0, 0, 137, 226, 0, 138,
	0, 227, 139, 140, 141, 142, 0, 228, 143, 229,
	144, 0, 145, 146, 147, 230, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 231, 157,
	0, 158, 159, 160, 161, 0, 232, 162, 163, 0,
	164, 165, 0, 166, 233, 234, 167, 0, 173, 168,
	169, 170, 172, 235, 171, 236, 0, 174, 0, 175,
	176, 0, 237, 238, 239, 0, 0, 177, 240, 241,
	0, 178, 179, 180, 181, 75, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 242, 243, 0, 0,
	189, 78, 79, 0, 80, 190, 191, 192, 193, 194,
	0, 0, 0, 0, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 0,
	203, 204, 205, 0, 206, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 207, 99, 208, 209, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 211, 212, 0, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 214,
	0, 215, 0, 112, 113, 114, 728, 217, 0, 0,
	117, 0, 115, 0, 0, 116, 218, 219, 220, 221,
	0, 222, 0, 0, 118, 0, 119, 120, 0, 0,
	223, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 224, 134, 225, 135, 136, 0, 0,
	455, 0, 0, 137, 226, 0, 138, 0, 227, 139,
	140, 141, 142, 0, 228, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 231, 157, 0, 158, 159,
	160, 161, 0, 232, 162, 163, 0, 164, 165, 0,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 236, 0, 174, 0, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 240, 241, 0, 178, 179,
	180, 181, 75, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 242, 243, 0, 0, 189, 78, 79,
	506, 80, 190, 191, 192, 193, 194, 0, 0, 0,
	0, 81, 82, 195, 196, 197, 198, 83, 199, 200,
	0, 84, 201, 202, 85, 0, 0, 203, 204, 205,
	0, 206, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 207, 99,
	208, 209, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 210, 105, 106, 211,
	212, 0, 0, 0, 107, 108, 213, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 214, 0, 215, 0,
	112, 113, 114, 216, 217, 0, 0, 117, 0, 115,
	0, 0, 116, 218, 219, 220, 221, 0, 222, 0,
	0, 118, 0, 119, 120, 0, 0, 223, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	224, 134, 225, 135, 136, 0, 0, 0, 0, 0,
	137, 226, 0, 138, 0, 227, 139, 140, 141, 142,
	0, 228, 143, 229, 144, 0, 145, 146, 147, 230,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 231, 157, 0, 158, 159, 160, 161, 0,
	232, 162, 163, 0, 164, 165, 0, 166, 233, 234,
	167, 0, 173, 168, 169, 170, 172, 235, 171, 236,
	0, 174, 0, 175, 176, 0, 237, 238, 239, 0,
	0, 177, 240, 241, 0, 178, 179, 180, 181, 75,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	242, 243, 0, 0, 189, 78, 79, 0, 80, 190,
	191, 192, 193, 194, 0, 0, 0, 0, 81, 82,
	195, 196, 197, 198, 83, 199, 200, 0, 84, 201,
	202, 85, 0, 0, 203, 204, 205, 0, 206, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 207, 99, 208, 209, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 210, 105, 106, 211, 212, 0, 0,
	0, 107, 108, 213, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 214, 0, 215, 0, 112, 113, 114,
	467, 217, 0, 0, 117, 0, 115, 0, 0, 116,
	218, 219, 220, 221, 0, 222, 0, 0, 118, 0,
	119, 120, 0, 0, 223, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 224, 134, 225,
	135, 136, 0, 0, 455, 0, 0, 137, 226, 0,
	138, 0, 227, 139, 140, 141, 142, 0, 228, 143,
	229, 144, 0, 145, 146, 147, 230, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 231,
	157, 0, 158, 159, 160, 161, 0, 232, 162, 163,
	0, 164, 165, 0, 166, 233, 234, 167, 0, 173,
	168, 169, 170, 172, 235, 171, 236, 0, 174, 0,
	175, 176, 0, 237, 238, 239, 0, 0, 177, 240,
	241, 0, 178, 179, 180, 181, 75, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 242, 243, 0,
	0, 189, 78, 79, 0, 80, 190, 191, 192, 193,
	194, 0, 0, 0, 0, 81, 82, 195, 196, 197,
	198, 83, 199, 200, 0, 84, 201, 202, 85, 0,
	0, 203, 204, 205, 0, 206, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 207, 99, 208, 209, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	210, 105, 106, 211, 212, 0, 0, 0, 107, 108,
	213, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	214, 0, 215, 0, 112, 113, 114, 460, 217, 0,
	0, 117, 0, 115, 0, 0, 116, 218, 219, 220,
	221, 0, 222, 0, 0, 118, 0, 119, 120, 0,
	0, 223, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 224, 134, 225, 135, 136, 0,
	0, 455, 0, 0, 137, 226, 0, 138, 0, 227,
	139, 140, 141, 142, 0, 228, 143, 229, 144, 0,
	145, 146, 147, 230, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 231, 157, 0, 158,
	159, 160, 161, 0, 232, 162, 163, 0, 164, 165,
	0, 166, 233, 234, 167, 0, 173, 168, 169, 170,
	172, 235, 171, 236, 0, 174, 0, 175, 176, 0,
	237, 238, 239, 0, 0, 177, 240, 241, 0, 178,
	179, 180, 181, 75, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 242, 243, 0, 0, 189, 78,
	79, 370, 80, 190, 191, 192, 193, 194, 0, 0,
	0, 0, 81, 82, 195, 196, 197, 198, 83, 199,
	200, 0, 84, 201, 202, 85, 0, 0, 203, 204,
	205, 0, 206, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 207,
	99, 208, 209, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 210, 105, 106,
	211, 212, 0, 0, 0, 107, 108, 213, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 214, 0, 215,
	0, 112, 113, 114, 216, 217, 0, 0, 117, 0,
	115, 0, 0, 116, 218, 219, 220, 221, 0, 222,
	0, 0, 118, 0, 119, 120, 0, 0, 223, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 224, 134, 225, 135, 136, 0, 0, 0, 0,
	0, 137, 226, 0, 138, 0, 227, 139, 140, 141,
	142, 0, 228, 143, 229, 369, 0, 145, 146, 147,
	230, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 231, 157, 0, 158, 159, 160, 161,
	0, 232, 162, 163, 0, 164, 165, 0, 166, 233,
	234, 167, 0, 173, 168, 169, 170, 172, 235, 171,
	236, 0, 174, 0, 175, 176, 0, 237, 238, 239,
	0, 0, 177, 240, 241, 0, 178, 179, 180, 181,
	75, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 242, 243, 0, 0, 189, 78, 79, 0, 80,
	190, 191, 192, 193, 194, 0, 0, 0, 0, 81,
	82, 195, 196, 197, 198, 83, 199, 200, 0, 84,
	201, 202, 85, 0, 0, 203, 204, 205, 0, 206,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 207, 99, 208, 209,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 210, 105, 106, 211, 212, 0,
	0, 0, 107, 108, 213, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 214, 0, 215, 0, 112, 113,
	114, 216, 217, 0, 0, 117, 0, 115, 0, 0,
	116, 218, 219, 220, 221, 0, 222, 0, 0, 118,
	0, 119, 120, 0, 0, 223, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 224, 134,
	225, 135, 136, 0, 0, 0, 0, 0, 137, 226,
	0, 138, 0, 227, 139, 140, 141, 142, 0, 228,
	143, 229, 144, 0, 145, 146, 147, 230, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	231, 157, 0, 158, 159, 160, 161, 0, 232, 162,
	163, 0, 164, 165, 0, 166, 233, 234, 167, 0,
	173, 168, 169, 170, 172, 235, 171, 236, 0, 174,
	0, 175, 176, 0, 237, 238, 239, 0, 0, 177,
	240, 241, 0, 178, 179, 180, 181, 75, 0, 182,
	183, 184, 0, 185, 0, 186, 187, 188, 242, 243,
	0, 0, 189, 78, 79, 0, 80, 190, 191, 192,
	193, 194, 0, 0, 0, 0, 81, 82, 195, 196,
	197, 198, 83, 199, 200, 0, 84, 201, 202, 85,
	0, 0, 203, 204, 205, 0, 206, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 207, 99, 208, 209, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 210, 105, 106, 211, 212, 0, 0, 0, 107,
	108, 213, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 214, 0, 215, 0, 112, 113, 114, 1266, 217,
	0, 0, 117, 0, 115, 0, 0, 116, 218, 219,
	220, 221, 0, 222, 0, 0, 118, 0, 119, 120,
	0, 0, 223, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 224, 134, 225, 135, 136,
	0, 0, 0, 0, 0, 137, 226, 0, 138, 0,
	227, 139, 140, 141, 142, 0, 228, 143, 229, 144,
	0, 145, 146, 147, 230, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 231, 157, 0,
	158, 159, 160, 161, 0, 232, 162, 163, 0, 164,
	165, 0, 166, 233, 234, 167, 0, 173, 168, 169,
	170, 172, 235, 171, 236, 0, 174, 0, 175, 176,
	0, 237, 238, 239, 0, 0, 177, 240, 241, 0,
	178, 179, 180, 181, 75, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 242, 243, 0, 0, 189,
	78, 79, 0, 80, 190, 191, 192, 193, 194, 0,
	0, 0, 0, 81, 82, 195, 196, 197, 198, 83,
	199, 200, 0, 84, 201, 202, 85, 0, 0, 203,
	204, 205, 0, 206, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	207, 99, 208, 209, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 210, 105,
	106, 211, 212, 0, 0, 0, 107, 108, 213, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 214, 0,
	215, 0, 112, 113, 114, 1264, 217, 0, 0, 117,
	0, 115, 0, 0, 116, 218, 219, 220, 221, 0,
	222, 0, 0, 118, 0, 119, 120, 0, 0, 223,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 224, 134, 225, 135, 136, 0, 0, 0,
	0, 0, 137, 226, 0, 138, 0, 227, 139, 140,
	141, 142, 0, 228, 143, 229, 144, 0, 145, 146,
	147, 230, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 231, 157, 0, 158, 159, 160,
	161, 0, 232, 162, 163, 0, 164, 165, 0, 166,
	233, 234, 167, 0, 173, 168, 169, 170, 172, 235,
	171, 236, 0, 174, 0, 175, 176, 0, 237, 238,
	239, 0, 0, 177, 240, 241, 0, 178, 179, 180,
	181, 75, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 242, 243, 0, 0, 189, 78, 79, 0,
	80, 190, 191, 192, 193, 194, 0, 0, 0, 0,
	81, 82, 195, 196, 197, 198, 83, 199, 200, 0,
	84, 201, 202, 85, 0, 0, 203, 204, 205, 0,
	206, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 207, 99, 208,
	209, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 210, 105, 106, 211, 212,
	0, 0, 0, 107, 108, 213, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 214, 0, 215, 0, 112,
	113, 114, 1253, 217, 0, 0, 117, 0, 115, 0,
	0, 116, 218, 219, 220, 221, 0, 222, 0, 0,
	118, 0, 119, 120, 0, 0, 223, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 224,
	134, 225, 135, 136, 0, 0, 0, 0, 0, 137,
	226, 0, 138, 0, 227, 139, 140, 141, 142, 0,
	228, 143, 229, 144, 0, 145, 146, 147, 230, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 231, 157, 0, 158, 159, 160, 161, 0, 232,
	162, 163, 0, 164, 165, 0, 166, 233, 234, 167,
	0, 173, 168, 169, 170, 172, 235, 171, 236, 0,
	174, 0, 175, 176, 0, 237, 238, 239, 0, 0,
	177, 240, 241, 0, 178, 179, 180, 181, 75, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 242,
	243, 0, 0, 189, 78, 79, 0, 80, 190, 191,
	192, 193, 194, 0, 0, 0, 0, 81, 82, 195,
	196, 197, 198, 83, 199, 200, 0, 84, 201, 202,
	85, 0, 0, 203, 204, 205, 0, 206, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 207, 99, 208, 209, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 210, 105, 106, 211, 212, 0, 0, 0,
	107, 108, 213, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 214, 0, 215, 0, 112, 113, 114, 848,
	217, 0, 0, 117, 0, 115, 0, 0, 116, 218,
	219, 220, 221, 0, 222, 0, 0, 118, 0, 119,
	120, 0, 0, 223, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 224, 134, 225, 135,
	136, 0, 0, 0, 0, 0, 137, 226, 0, 138,
	0, 227, 139, 140, 141, 142, 0, 228, 143, 229,
	144, 0, 145, 146, 147, 230, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 231, 157,
	0, 158, 159, 160, 161, 0, 232, 162, 163, 0,
	164, 165, 0, 166, 233, 234, 167, 0, 173, 168,
	169, 170, 172, 235, 171, 236, 0, 174, 0, 175,
	176, 0, 237, 238, 239, 0, 0, 177, 240, 241,
	0, 178, 179, 180, 181, 75, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 242, 243, 0, 0,
	189, 78, 79, 0, 80, 190, 191, 192, 193, 194,
	0, 0, 0, 0, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 0,
	203, 204, 205, 0, 206, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 207, 99, 208, 209, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 211, 212, 0, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 214,
	0, 215, 0, 112, 113, 114, 216, 217, 0, 0,
	117, 0, 115, 0, 0, 116, 218, 219, 220, 221,
	0, 222, 0, 0, 118, 0, 119, 120, 0, 0,
	223, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 224, 134, 225, 135, 136, 0, 0,
	0, 0, 0, 137, 226, 0, 138, 0, 227, 139,
	140, 141, 142, 0, 228, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 231, 157, 0, 158, 384,
	160, 161, 0, 232, 162, 163, 0, 164, 165, 0,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 236, 0, 174, 0, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 240, 241, 0, 178, 179,
	180, 181, 75, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 242, 243, 0, 0, 189, 78, 79,
	0, 80, 190, 191, 192, 193, 194, 0, 713, 0,
	0, 81, 82, 195, 196, 197, 198, 83, 199, 200,
	0, 84, 201, 202, 85, 0, 0, 203, 204, 205,
	0, 206, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 207, 99,
	208, 209, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 210, 105, 106, 211,
	212, 0, 0, 0, 107, 108, 213, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 214, 0, 215, 0,
	112, 113, 114, 216, 217, 0, 0, 117, 0, 115,
	0, 0, 116, 218, 219, 220, 221, 0, 222, 0,
	0, 118, 0, 119, 120, 0, 0, 223, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	224, 134, 225, 135, 136, 0, 0, 0, 0, 0,
	137, 226, 0, 138, 0, 227, 139, 140, 141, 142,
	0, 228, 143, 229, 144, 0, 145, 146, 147, 230,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 231, 157, 0, 158, 159, 160, 161, 0,
	232, 162, 163, 0, 0, 165, 0, 166, 233, 234,
	167, 0, 173, 168, 169, 170, 172, 235, 171, 236,
	0, 174, 0, 175, 176, 0, 237, 238, 239, 0,
	0, 177, 240, 241, 0, 178, 179, 180, 181, 75,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	242, 243, 0, 0, 189, 78, 79, 0, 80, 190,
	191, 192, 193, 194, 0, 0, 0, 0, 81, 82,
	195, 196, 197, 198, 83, 199, 200, 0, 84, 201,
	202, 85, 0, 0, 203, 204, 205, 0, 206, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 207, 99, 208, 209, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 210, 105, 106, 211, 212, 0, 0,
	0, 107, 108, 213, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 214, 0, 215, 0, 112, 113, 114,
	558, 217, 0, 0, 117, 0, 115, 0, 0, 116,
	218, 219, 220, 221, 0, 222, 0, 0, 118, 0,
	119, 120, 0, 0, 223, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 224, 134, 225,
	135, 136, 0, 0, 0, 0, 0, 137, 226, 0,
	138, 0, 227, 139, 140, 141, 142, 0, 228, 143,
	229, 144, 0, 145, 146, 147, 230, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 231,
	157, 0, 158, 159, 160, 161, 0, 232, 162, 163,
	0, 164, 165, 0, 166, 233, 234, 167, 0, 173,
	168, 169, 170, 172, 235, 171, 236, 0, 174, 0,
	175, 176, 0, 237, 238, 239, 0, 0, 177, 240,
	241, 0, 178, 179, 180, 181, 75, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 242, 243, 0,
	0, 189, 78, 79, 0, 80, 190, 191, 192, 193,
	194, 0, 0, 0, 0, 81, 82, 195, 196, 197,
	198, 83, 199, 200, 0, 84, 201, 202, 85, 0,
	0, 203, 204, 205, 0, 206, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 207, 99, 208, 209, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	210, 105, 106, 211, 212, 0, 0, 0, 107, 108,
	213, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	214, 0, 215, 0, 112, 113, 114, 553, 217, 0,
	0, 117, 0, 115, 0, 0, 116, 218, 219, 220,
	221, 0, 222, 0, 0, 118, 0, 119, 120, 0,
	0, 223, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 224, 134, 225, 135, 136, 0,
	0, 0, 0, 0, 137, 226, 0, 138, 0, 227,
	139, 140, 141, 142, 0, 228, 143, 229, 144, 0,
	145, 146, 147, 230, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 231, 157, 0, 158,
	159, 160, 161, 0, 232, 162, 163, 0, 164, 165,
	0, 166, 233, 234, 167, 0, 173, 168, 169, 170,
	172, 235, 171, 236, 0, 174, 0, 175, 176, 0,
	237, 238, 239, 0, 0, 177, 240, 241, 0, 178,
	179, 180, 181, 75, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 242, 243, 0, 0, 189, 78,
	79, 0, 80, 190, 191, 192, 193, 194, 0, 0,
	0, 0, 81, 82, 195, 196, 197, 198, 83, 199,
	200, 0, 84, 201, 202, 85, 0, 0, 203, 204,
	512, 0, 206, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 207,
	99, 208, 209, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 210, 105, 106,
	211, 212, 0, 0, 0, 107, 108, 213, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 214, 0, 215,
	0, 112, 113, 114, 216, 217, 0, 0, 117, 0,
	115, 0, 0, 116, 218, 219, 220, 221, 0, 222,
	0, 0, 118, 0, 119, 120, 0, 0, 223, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 395, 0, 129, 130, 133, 131, 0, 132,
	0, 224, 134, 225, 135, 136, 0, 0, 0, 0,
	0, 137, 226, 0, 138, 0, 227, 139, 140, 141,
	142, 0, 228, 143, 229, 144, 0, 145, 146, 147,
	230, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 231, 157, 0, 158, 159, 160, 161,
	0, 232, 162, 163, 0, 164, 165, 0, 166, 233,
	234, 167, 0, 173, 168, 169, 170, 172, 235, 171,
	236, 0, 174, 0, 175, 176, 0, 394, 238, 239,
	0, 0, 390, 240, 241, 0, 178, 179, 180, 181,
	75, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 242, 243, 0, 0, 189, 78, 79, 0, 80,
	190, 191, 192, 193, 194, 0, 0, 0, 0, 81,
	82, 195, 196, 197, 198, 83, 199, 200, 0, 84,
	201, 202, 85, 0, 0, 203, 204, 205, 0, 206,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 207, 99, 208, 209,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 210, 105, 106, 211, 212, 0,
	0, 0, 107, 108, 213, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 214, 0, 215, 0, 112, 113,
	114, 216, 217, 0, 0, 117, 0, 115, 0, 0,
	116, 218, 219, 220, 221, 0, 222, 0, 0, 118,
	0, 119, 120, 0, 0, 223, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 395,
	0, 129, 130, 133, 131, 0, 132, 0, 224, 134,
	225, 135, 136, 0, 0, 0, 0, 0, 137, 226,
	0, 138, 0, 227, 139, 140, 141, 142, 0, 228,
	143, 229, 144, 0, 145, 146, 147, 230, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	231, 157, 0, 158, 159, 160, 161, 0, 232, 162,
	163, 0, 164, 165, 0, 166, 233, 234, 167, 0,
	173, 168, 169, 170, 172, 235, 171, 236, 0, 174,
	0, 175, 176, 0, 394, 238, 239, 0, 0, 390,
	240, 241, 0, 178, 179, 180, 181, 75, 0, 182,
	183, 184, 0, 185, 0, 186, 187, 188, 242, 243,
	0, 0, 189, 78, 79, 0, 80, 190, 191, 192,
	193, 194, 0, 0, 0, 0, 81, 82, 195, 196,
	197, 198, 83, 199, 200, 0, 84, 201, 202, 85,
	0, 0, 203, 204, 205, 0, 206, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 207, 99, 208, 209, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 210, 105, 106, 211, 212, 0, 0, 0, 107,
	108, 213, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 214, 0, 215, 0, 112, 113, 114, 490, 217,
	0, 0, 117, 0, 115, 0, 0, 116, 218, 219,
	220, 221, 0, 222, 0, 0, 118, 0, 119, 120,
	0, 0, 223, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 224, 134, 225, 135, 136,
	0, 0, 0, 0, 0, 137, 226, 0, 138, 0,
	227, 139, 140, 141, 142, 0, 228, 143, 229, 144,
	0, 145, 146, 147, 230, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 231, 157, 0,
	158, 159, 160, 161, 0, 232, 162, 163, 0, 164,
	165, 0, 166, 233, 234, 167, 0, 173, 168, 169,
	170, 172, 235, 171, 236, 0, 174, 0, 175, 176,
	0, 237, 238, 239, 0, 0, 177, 240, 241, 0,
	178, 179, 180, 181, 75, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 242, 243, 0, 0, 189,
	78, 79, 0, 80, 190, 191, 192, 193, 194, 0,
	0, 0, 0, 81, 82, 195, 196, 197, 198, 83,
	199, 200, 0, 84, 201, 202, 85, 0, 0, 203,
	204, 205, 0, 206, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	207, 99, 208, 209, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 210, 105,
	106, 211, 212, 0, 0, 0, 107, 108, 213, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 214, 0,
	215, 0, 112, 113, 114, 487, 217, 0, 0, 117,
	0, 115, 0, 0, 116, 218, 219, 220, 221, 0,
	222, 0, 0, 118, 0, 119, 120, 0, 0, 223,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 224, 134, 225, 135, 136, 0, 0, 0,
	0, 0, 137, 226, 0, 138, 0, 227, 139, 140,
	141, 142, 0, 228, 143, 229, 144, 0, 145, 146,
	147, 230, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 231, 157, 0, 158, 159, 160,
	161, 0, 232, 162, 163, 0, 164, 165, 0, 166,
	233, 234, 167, 0, 173, 168, 169, 170, 172, 235,
	171, 236, 0, 174, 0, 175, 176, 0, 237, 238,
	239, 0, 0, 177, 240, 241, 0, 178, 179, 180,
	181, 75, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 242, 243, 0, 0, 189, 78, 79, 0,
	80, 190, 191, 192, 193, 194, 0, 0, 0, 0,
	81, 82, 195, 196, 197, 198, 83, 199, 200, 0,
	84, 201, 202, 85, 0, 0, 203, 204, 205, 0,
	206, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 207, 99, 208,
	209, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 210, 105, 106, 211, 212,
	0, 0, 0, 107, 108, 213, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 214, 0, 215, 0, 112,
	113, 114, 484, 217, 0, 0, 117, 0, 115, 0,
	0, 116, 218, 219, 220, 221, 0, 222, 0, 0,
	118, 0, 119, 120, 0, 0, 223, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 224,
	134, 225, 135, 136, 0, 0, 0, 0, 0, 137,
	226, 0, 138, 0, 227, 139, 140, 141, 142, 0,
	228, 143, 229, 144, 0, 145, 146, 147, 230, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 231, 157, 0, 158, 159, 160, 161, 0, 232,
	162, 163, 0, 164, 165, 0, 166, 233, 234, 167,
	0, 173, 168, 169, 170, 172, 235, 171, 236, 0,
	174, 0, 175, 176, 0, 237, 238, 239, 0, 0,
	177, 240, 241, 0, 178, 179, 180, 181, 75, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 242,
	243, 0, 0, 189, 78, 79, 0, 80, 190, 191,
	192, 193, 194, 0, 0, 0, 0, 81, 82, 195,
	196, 197, 198, 83, 199, 200, 0, 84, 201, 202,
	85, 0, 0, 203, 204, 205, 0, 206, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 207, 99, 208, 209, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 210, 105, 106, 211, 212, 0, 0, 0,
	107, 108, 213, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 214, 0, 215, 0, 112, 113, 114, 482,
	217, 0, 0, 117, 0, 115, 0, 0, 116, 218,
	219, 220, 221, 0, 222, 0, 0, 118, 0, 119,
	120, 0, 0, 223, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 224, 134, 225, 135,
	136, 0, 0, 0, 0, 0, 137, 226, 0, 138,
	0, 227, 139, 140, 141, 142, 0, 228, 143, 229,
	144, 0, 145, 146, 147, 230, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 231, 157,
	0, 158, 159, 160, 161, 0, 232, 162, 163, 0,
	164, 165, 0, 166, 233, 234, 167, 0, 173, 168,
	169, 170, 172, 235, 171, 236, 0, 174, 0, 175,
	176, 0, 237, 238, 239, 0, 0, 177, 240, 241,
	0, 178, 179, 180, 181, 75, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 242, 243, 0, 0,
	189, 78, 79, 0, 80, 190, 191, 192, 193, 194,
	0, 0, 0, 0, 81, 82, 195, 196, 197, 198,
	83, 199, 200, 0, 84, 201, 202, 85, 0, 0,
	203, 204, 205, 0, 206, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 207, 99, 208, 209, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 210,
	105, 106, 211, 212, 0, 0, 0, 107, 108, 213,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 214,
	0, 215, 0, 112, 113, 114, 463, 217, 0, 0,
	117, 0, 115, 0, 0, 116, 218, 219, 220, 221,
	0, 222, 0, 0, 118, 0, 119, 120, 0, 0,
	223, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 224, 134, 225, 135, 136, 0, 0,
	0, 0, 0, 137, 226, 0, 138, 0, 227, 139,
	140, 141, 142, 0, 228, 143, 229, 144, 0, 145,
	146, 147, 230, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 231, 157, 0, 158, 159,
	160, 161, 0, 232, 162, 163, 0, 164, 165, 0,
	166, 233, 234, 167, 0, 173, 168, 169, 170, 172,
	235, 171, 236, 0, 174, 0, 175, 176, 0, 237,
	238, 239, 0, 0, 177, 240, 241, 0, 178, 179,
	180, 181, 75, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 242, 243, 0, 0, 189, 78, 79,
	0, 80, 190, 191, 192, 193, 194, 0, 0, 0,
	0, 81, 82, 195, 196, 197, 198, 83, 199, 200,
	0, 84, 201, 202, 85, 0, 0, 203, 204, 205,
	0, 206, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 207, 99,
	208, 209, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 210, 105, 106, 211,
	212, 0, 0, 0, 107, 108, 213, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 214, 0, 215, 0,
	112, 113, 114, 216, 217, 0, 0, 117, 0, 115,
	0, 0, 116, 218, 219, 220, 221, 0, 222, 0,
	0, 118, 0, 119, 120, 0, 0, 223, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	224, 134, 225, 135, 136, 0, 0, 0, 0, 0,
	137, 226, 0, 138, 0, 227, 139, 140, 141, 142,
	0, 228, 143, 229, 144, 0, 145, 146, 147, 230,
	444, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 231, 157, 0, 158, 159, 160, 161, 0,
	232, 162, 163, 0, 164, 165, 0, 166, 233, 234,
	167, 0, 173, 168, 169, 170, 172, 235, 171, 236,
	0, 174, 0, 175, 176, 0, 237, 238, 239, 0,
	0, 177, 240, 241, 0, 178, 179, 180, 181, 75,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	242, 243, 0, 0, 189, 78, 79, 0, 80, 190,
	191, 192, 193, 194, 0, 0, 0, 0, 81, 82,
	195, 196, 197, 198, 83, 199, 200, 0, 84, 201,
	202, 85, 0, 0, 203, 204, 205, 0, 206, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 207, 99, 208, 209, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 210, 105, 106, 211, 212, 0, 0,
	0, 107, 108, 213, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 214, 0, 215, 0, 112, 113, 114,
	216, 217, 0, 0, 117, 0, 115, 0, 0, 116,
	218, 219, 220, 221, 0, 222, 0, 0, 118, 0,
	119, 120, 0, 0, 223, 0, 121, 0, 0, 387,
	0, 0, 123, 0, 124, 125, 126, 127, 395, 0,
	129, 130, 133, 131, 0, 132, 0, 224, 134, 225,
	135, 136, 0, 0, 0, 0, 0, 137, 226, 0,
	138, 0, 227, 139, 140, 141, 142, 0, 228, 143,
	229, 144, 0, 145, 146, 147, 230, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 389,
	157, 0, 158, 159, 160, 161, 0, 232, 162, 388,
	0, 164, 165, 0, 166, 233, 234, 167, 0, 173,
	168, 169, 170, 172, 235, 171, 236, 0, 174, 0,
	175, 176, 0, 394, 238, 239, 0, 0, 390, 240,
	241, 0, 178, 179, 180, 181, 75, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 242, 243, 0,
	0, 189, 78, 79, 0, 80, 190, 191, 192, 193,
	194, 0, 0, 0, 0, 81, 82, 195, 196, 197,
	198, 83, 199, 200, 0, 84, 201, 202, 85, 0,
	0, 203, 204, 205, 0, 206, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 207, 99, 208, 209, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	210, 105, 106, 211, 212, 0, 0, 0, 107, 108,
	213, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	214, 0, 215, 0, 112, 113, 114, 216, 217, 0,
	0, 117, 0, 115, 0, 0, 116, 218, 219, 220,
	221, 0, 222, 0, 0, 118, 0, 119, 120, 0,
	0, 223, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 224, 134, 225, 135, 136, 0,
	0, 0, 0, 0, 137, 226, 0, 138, 0, 227,
	139, 140, 0, 142, 0, 228, 143, 229, 144, 0,
	145, 0, 147, 230, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 231, 0, 0, 158,
	159, 160, 161, 0, 232, 162, 163, 0, 164, 165,
	0, 166, 233, 234, 167, 0, 173, 168, 169, 170,
	172, 235, 171, 236, 0, 174, 0, 175, 176, 0,
	237, 238, 239, 0, 0, 177, 240, 241, 0, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 242, 243, 0, 0, 189, 0,
	0, 0, 0, 190, 191, 192, 193, 874, 875, 0,
	894, 895, 896, 904, 905, 906, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 0, 0, 0,
	877, 0, 908, 874, 875, 0, 894, 895, 896, 904,
	905, 906, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 876, 0, 0, 0, 0, 877, 891, 908, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 875, 0, 894, 895, 896, 904, 905,
	906, 0, 0, 0, 0, 0, 882, 0, 897, 0,
	0, 0, 0, 0, 0, 877, 0, 908, 0, 0,
	0, 0, 0, 0, 901, 909, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 876, 0, 0, 907,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 899,
	901, 909, 0, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 907, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 898, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 0, 0, 0, 901,
	909, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 893,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 893, 903,
	0, 0, 0, 0, 0, 0, 1456, 0, 900, 0,
	902, 888, 889, 890, 0, 887, 884, 885, 886, 878,
	879, 880, 881, 883, 0, 903, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 874,
	875, 0, 894, 895, 896, 904, 905, 906, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 0,
	0, 0, 877, 0, 908, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 876, 903, 0, 0, 0, 0, 891,
	0, 1454, 0, 874, 875, 0, 894, 895, 896, 904,
	905, 906, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 0, 0, 877, 0, 908, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 882, 0,
	0, 0, 0, 891, 874, 875, 0, 894, 895, 896,
	904, 905, 906, 0, 0, 0, 901, 909, 0, 0,
	897, 0, 0, 0, 0, 0, 0, 877, 0, 908,
	0, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 892, 876, 0,
	0, 0, 882, 0, 891, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	901, 909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 907, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 892, 0, 882, 0, 893, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 0,
	0, 901, 909, 898, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 900, 0, 0, 888, 889, 890,
	0, 887, 884, 885, 886, 878, 879, 880, 881, 883,
	0, 903, 0, 0, 0, 0, 0, 0, 1406, 0,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	893, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 902, 877, 0, 908, 0, 0, 900, 0,
	0, 888, 889, 890, 0, 887, 884, 885, 886, 878,
	879, 880, 881, 883, 876, 903, 0, 0, 0, 1863,
	891, 874, 875, 0, 894, 895, 896, 904, 905, 906,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 0, 877, 0, 908, 0, 0, 900,
	0, 0, 888, 889, 890, 0, 887, 884, 885, 886,
	878, 879, 880, 881, 883, 876, 903, 0, 0, 882,
	0, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 892, 0,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 909,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 907, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 892,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 898, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 875, 0,
	894, 895, 896, 904, 905, 906, 0, 893, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 0, 0, 902,
	877, 0, 908, 0, 0, 900, 0, 0, 888, 889,
	890, 0, 887, 884, 885, 886, 878, 879, 880, 881,
	883, 876, 903, 0, 0, 0, 1861, 891, 874, 875,
	0, 894, 895, 896, 904, 905, 906, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 0, 0, 0,
	0, 877, 0, 908, 0, 0, 900, 0, 0, 888,
	889, 890, 0, 887, 884, 885, 886, 878, 879, 880,
	881, 883, 876, 903, 0, 0, 882, 1840, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 909, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 907,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 892, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 909, 898, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 875, 0, 894, 895, 896,
	904, 905, 906, 0, 893, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 0, 0, 902, 877, 0, 908,
	0, 0, 900, 0, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 876, 903,
	0, 0, 0, 1815, 891, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 0, 877, 0,
	908, 0, 0, 900, 0, 0, 888, 889, 890, 0,
	887, 884, 885, 886, 878, 879, 880, 881, 883, 876,
	903, 0, 0, 882, 1810, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 909, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 0,
	0, 0, 892, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 909, 898, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	893, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 875, 0, 894, 895, 896, 904, 905, 906,
	0, 893, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 902, 877, 0, 908, 0, 0, 900,
	0, 0, 888, 889, 890, 0, 887, 884, 885, 886,
	878, 879, 880, 881, 883, 876, 903, 0, 0, 0,
	1806, 891, 874, 875, 0, 894, 895, 896, 904, 905,
	906, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 0, 0, 0, 0, 877, 0, 908, 0, 0,
	900, 0, 0, 888, 889, 890, 0, 887, 884, 885,
	886, 878, 879, 880, 881, 883, 876, 903, 0, 0,
	882, 1741, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 909,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 907, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 892,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	909, 898, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 875,
	0, 894, 895, 896, 904, 905, 906, 0, 893, 0,
	0, 0, 0, 0, 897, 0, 0, 0, 0, 0,
	902, 877, 0, 908, 0, 0, 900, 0, 0, 888,
	889, 890, 0, 887, 884, 885, 886, 878, 879, 880,
	881, 883, 876, 903, 0, 0, 0, 1740, 891, 874,
	875, 0, 894, 895, 896, 904, 905, 906, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 0,
	0, 0, 877, 0, 908, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 876, 903, 0, 0, 882, 1647, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 909, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 892, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 909, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 893, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 902, 877, 0,
	908, 0, 0, 900, 0, 0, 888, 889, 890, 0,
	887, 884, 885, 886, 878, 879, 880, 881, 883, 876,
	903, 0, 0, 0, 1581, 891, 874, 875, 0, 894,
	895, 896, 904, 905, 906, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 0, 0, 877,
	0, 908, 0, 0, 900, 0, 0, 888, 889, 890,
	0, 887, 884, 885, 886, 878, 879, 880, 881, 883,
	876, 903, 0, 0, 882, 1565, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 892, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 909, 898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 899, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 875, 0, 894, 895, 896, 904, 905,
	906, 0, 893, 0, 0, 0, 0, 0, 897, 0,
	0, 0, 0, 0, 902, 877, 0, 908, 0, 0,
	900, 0, 0, 888, 889, 890, 0, 887, 884, 885,
	886, 878, 879, 880, 881, 883, 876, 903, 0, 0,
	0, 1172, 891, 874, 875, 0, 894, 895, 896, 904,
	905, 906, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 0, 0, 877, 0, 908, 0,
	0, 900, 0, 0, 888, 889, 890, 0, 887, 884,
	885, 886, 878, 879, 880, 881, 883, 876, 903, 0,
	1005, 882, 1934, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	892, 0, 882, 0, 1446, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 909, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 907, 1933, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 898, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	875, 0, 894, 895, 896, 904, 905, 906, 0, 893,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 0,
	1104, 902, 877, 0, 908, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 876, 903, 0, 0, 0, 0, 891,
	874, 875, 0, 0, 0, 0, 904, 905, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 908, 0, 1105, 900, 0,
	0, 888, 889, 890, 0, 887, 884, 885, 886, 878,
	879, 880, 881, 883, 876, 903, 911, 0, 882, 0,
	891, 0, 874, 875, 0, 894, 895, 896, 904, 905,
	906, 0, 0, 0, 0, 0, 901, 909, 897, 0,
	0, 0, 910, 0, 0, 877, 0, 908, 0, 0,
	0, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 876, 892, 0, 882,
	0, 0, 891, 0, 0, 0, 0, 0, 874, 875,
	0, 894, 895, 896, 904, 905, 906, 901, 909, 898,
	0, 0, 0, 0, 897, 0, 0, 0, 0, 0,
	0, 877, 0, 908, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 892, 0,
	0, 882, 876, 0, 0, 893, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 901,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 893, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 898, 0, 900, 901, 909, 888, 889, 890,
	0, 887, 884, 885, 886, 878, 879, 880, 881, 883,
	907, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 892, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 900, 0, 0, 898, 439,
	0, 0, 887, 884, 885, 886, 878, 879, 880, 881,
	883, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 0, 877, 0,
	908, 0, 0, 900, 0, 0, 888, 889, 890, 0,
	887, 884, 885, 886, 878, 879, 880, 881, 883, 876,
	903, 0, 0, 0, 0, 891, 874, 875, 0, 894,
	895, 896, 904, 905, 906, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 0, 0, 877,
	0, 908, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1414, 1415, 0, 1432, 1433, 1434, 0,
	876, 0, 0, 0, 882, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 907, 0, 0,
	0, 0, 0, 1429, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 892, 0, 882, 0, 0, 0, 0,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 909, 898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 899, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 902, 0, 1435, 898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 1575, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 875, 0, 894, 895, 896, 904, 905,
	906, 0, 893, 0, 0, 0, 0, 0, 897, 0,
	0, 0, 1447, 0, 902, 877, 0, 908, 0, 0,
	900, 0, 0, 888, 889, 890, 0, 887, 884, 885,
	886, 878, 879, 880, 881, 883, 876, 903, 0, 1431,
	0, 0, 891, 874, 875, 0, 894, 895, 896, 904,
	905, 906, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 0, 0, 877, 0, 908, 0,
	0, 900, 0, 0, 888, 889, 890, 0, 887, 884,
	885, 886, 878, 879, 880, 881, 883, 876, 903, 0,
	0, 882, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	909, 1426, 1427, 1428, 0, 1425, 1422, 1423, 1424, 1416,
	1417, 1418, 1419, 1421, 907, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	892, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 909, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 907, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 898, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	875, 0, 894, 895, 896, 904, 905, 906, 0, 893,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 1405,
	0, 902, 877, 0, 908, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 876, 903, 0, 0, 0, 0, 891,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 0, 877, 0, 908, 0, 0, 900, 0,
	0, 888, 889, 890, 0, 887, 884, 885, 886, 878,
	879, 880, 881, 883, 876, 903, 0, 0, 882, 0,
	891, 874, 875, 0, 894, 895, 896, 904, 905, 906,
	0, 0, 0, 0, 0, 0, 901, 909, 0, 0,
	0, 0, 0, 0, 877, 0, 908, 0, 0, 0,
	0, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 876, 0, 892, 0, 882,
	0, 891, 874, 875, 0, 894, 895, 896, 904, 905,
	906, 0, 0, 0, 0, 0, 0, 901, 909, 898,
	0, 0, 0, 0, 0, 877, 0, 908, 0, 0,
	0, 0, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 876, 0, 892, 0,
	882, 0, 891, 0, 0, 893, 0, 0, 0, 1414,
	1415, 0, 1432, 1433, 1434, 0, 0, 902, 901, 909,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 907, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 892,
	0, 882, 0, 0, 0, 0, 893, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 901,
	909, 0, 0, 0, 900, 0, 0, 888, 889, 890,
	0, 887, 884, 885, 886, 878, 879, 880, 881, 883,
	0, 903, 0, 0, 899, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 893, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 900, 0, 1436, 888, 889,
	890, 0, 887, 884, 885, 886, 878, 879, 880, 881,
	883, 1435, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1430, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 900, 0, 0, 888,
	889, 890, 0, 887, 884, 885, 886, 878, 879, 880,
	881, 883, 0, 903, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 1427, 1428,
	0, 1425, 1422, 1423, 1424, 1416, 1417, 1418, 1419, 1421,
}
var sqlPact = [...]int{

	2924, -1000, 49, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 696, 16896, -1000,
	-1000, -1000, -1000, -1000, -1000, 848, 670, 166, 4590, 16896,
	16896, 16639, 985, 985, 18181, -1000, -1000, 21265, -1000, 2611,
	519, 520, 519, 519, 532, 18181, 638, 751, 200, -1000,
	880, -11, 21008, 16896, 1338, 45, 15354, 376, 2924, 16382,
	20751, 16896, 16125, 371, 59, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1178, 1095, 1093, 15354, 20494, 20237,
	19980, 19723, -1000, 10288, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 765, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 380, 379, -1000, 15868,
	-1000, 977, -1000, 43, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 955, -1000, 16896, -1000, -1000, 19466, 19209, 378,
	884, -1000, -1000, 582, 437, 1351, -1000, 64, -1000, -1000,
	-1000, 1175, -1000, 952, 1173, 1172, 1171, 1170, 1168, 1167,
	435, 907, 500, -1000, 884, -1000, 884, -1000, -1000, -1000,
	619, 18181, -1000, 15354, -1000, 18952, 16896, 16896, 1109, 18695,
	-1000, 880, -1000, -1000, -1000, 968, 1324, 1324, 1324, 1371,
	178, 176, 200, 23, 16896, -1000, 377, 23, 6915, 6915,
	-1000, -1000, 376, -1000, 391, 13246, -1000, 7481, -1000, 997,
	1241, 470, 708, 1238, -76, 806, 799, 1237, 665, 12458,
	59, -1000, -1000, -1000, 8899, 4309, 15354, 16896, 16896, 690,
	18438, -1000, 1234, 116, 1233, -1000, 109, 1230, -1000, 109,
	1226, 44, -1000, -1000, -1000, -1000, -1000, -1000, 376, 15611,
	16896, 1414, 3739, -1000, 8899, -1000, -1000, 13784, 689, 13784,
	-1000, -1000, 1412, -1000, 8899, -1000, 39, 35, 1070, 1062,
	10841, 10571, 1282, 960, -1000, -1000, -1000, 62, 4590, 16896,
	1187, 13784, 16896, 16896, 16896, 16896, 16896, 16896, -1000, 1069,
	-1000, -1000, 16896, 16896, -1000, 29, 27, -1000, 18181, -1000,
	125, -1000, 375, 1043, 430, 168, 17924, 1247, 1042, -1000,
	968, -1000, 966, 1065, 8050, 8899, 200, -1000, -1000, 200,
	200, 8899, -1000, -1000, 16896, 23, 1411, 16896, 104, -1000,
	24262, -1000, -1000, 8899, 8899, 8899, 8899, 8899, 899, -1000,
	-1000, -1000, 5154, -1000, -1000, 59, 374, 367, -1000, -1000,
	372, 59, -1000, -1000, -1000, -1000, 369, 1497, 426, -1000,
	-1000, -1000, 8899, 443, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1186, 368, 366, -1000, -1000, -1000, -1000,
	364, 361, 351, 347, 345, 337, 335, 333, 329, 328,
	326, 322, 319, 317, 316, 879, -1000, 465, -1000, -1000,
	465, 465, -1000, 310, 310, 311, -1000, -1000, -1000, -1000,
	310, -1000, -1000, -1000, 444, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 312, 104, -1000, -1000, -1000, 16896, 37, -1000,
	25110, -1000, -14, 811, -1000, 14840, 1330, 1312, 1314, 15354,
	1386, 1384, 615, 16896, 16896, 614, 600, 15354, -1000, 1166,
	36, -1000, -1000, 23716, -160, -1000, -1000, 455, 75, 1408,
	75, 12732, -1000, 16896, 16896, -1000, 16896, -1000, -1000, 16896,
	-1000, 16896, 16896, -1000, 16896, 137, 14326, 776, 1225, 669,
	-11, 28, -1000, 1420, -1000, -1000, -1000, -1000, 111, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 311, 879, 310, 310, 310, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 444, -1000, -1000, 465, 465,
	465, -1000, -1000, 21, 25110, 597, 2, 14055, 16896, -1000,
	60, -1000, -1000, 1164, 505, 17, 843, 1084, 824, -1000,
	-1000, -1000, -1000, 19, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1460, -1000, -1000, -1000, -1000, 1484,
	19, -1000, -1000, -1000, -1000, -1000, 1496, -1000, -1000, -1000,
	4590, -1000, -1000, -1000, 16896, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 843, 1084, -1000, -1000, 15354,
	14583, 1406, 1223, 887, -1000, 1404, 16896, 938, 1041, -1000,
	-1000, 419, 1222, -1000, -1000, -1000, -1000, 25110, -1000, 25110,
	850, 1098, -1000, 1098, 13, -1000, 24159, -1000, 308, 9,
	-1000, 455, 6915, 12201, 3739, 3739, 16896, 632, 8899, 8899,
	8899, 8899, 8899, 8899, 8899, 8899, 8899, 8899, 8899, 8899,
	8899, 8899, 8899, 8899, 8899, 8899, 8899, 8899, 8899, 8899,
	1031, 8899, 588, 8899, 8899, 8899, 8899, 1359, 868, 286,
	4590, -1000, 682, 682, 682, 25161, 25161, 278, 59, 92,
	23665, 7, 59, -1000, -1000, 6629, 6326, 59, 3468, -1000,
	788, 1480, 460, 25110, 1194, 1136, 306, 169, 162, 8899,
	8899, 9182, 9182, 8899, 9465, 8899, 8899, 5437, 8899, 8899,
	8899, 8899, 8899, 8899, -1000, 305, -1000, -1000, -1000, -1000,
	1478, -1000, -1000, 1476, -1000, 631, 630, 1475, 455, 151,
	7481, -1000, 776, 16896, 16896, 16896, -1000, -1000, 1030, 17667,
	1027, 3739, 16896, -1000, 304, 303, 1081, 1080, 16896, 16896,
	17410, 17153, 16896, 965, 300, 288, 16896, 782, -1000, 16896,
	16896, 780, 661, 1161, 16896, -1000, 8899, 730, 8899, 858,
	-1000, 11654, 473, 16896, 754, 83, -1000, -1000, -1000, 415,
	16896, -1000, -1000, -1000, 116, -1000, 109, 109, -1000, -1000,
	15354, -1000, -1000, -1000, -1000, -1000, -1000, 3739, 385, 384,
	-1000, 1473, 584, -1000, 581, 580, 577, -1000, 287, -1000,
	8899, 16896, 14055, 2, -3, -1000, -1000, 16896, 1084, -1000,
	-1000, -1000, -1000, 710, -1000, 815, -1000, 11111, -1000, -1000,
	-1000, 788, -1000, -16, -1000, -1000, -1000, -1000, 149, -2,
	-12, 3739, -1000, -1000, -1000, -1000, -1000, 16896, 285, 16896,
	-11, 16896, -1000, 1495, -11, 16896, 1219, 1494, 16896, -1000,
	-1000, -1000, 8899, -1000, -1000, -1000, -11, 16896, -1000, 1135,
	-1000, -67, 1457, -111, 15097, -1000, 11381, -1000, -1000, -1000,
	432, 330, 330, 493, 493, 493, 493, 349, 349, 191,
	1737, 24210, 24210, 24210, 167, 302, 302, 24210, 24210, 24210,
	25161, 22234, 2537, 8899, 8899, 569, 862, 286, 2537, 8899,
	1449, 2537, 2537, 2537, -1000, 951, -1000, -1000, -1000, 1160,
	282, 9465, 9465, -1000, -1000, -1000, 5154, -1000, -1000, 281,
	8899, -1000, -1000, 8899, 1, -1, -1000, -1000, -7, -1000,
	-1000, 5, 8899, 8899, 8899, 148, -1000, 147, 650, -1000,
	8899, 902, 280, 277, 8899, -1000, -1000, 25059, 22129, 145,
	1157, -101, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 144,
	143, 24863, -101, 142, 25269, -1000, 9465, 9465, 9465, 5154,
	267, 141, 23963, -101, 24812, 7764, 7764, 7764, 135, 24616,
	8899, -101, 21882, 21823, 21797, -8, -17, -19, 1470, -23,
	134, 429, 427, 131, 1135, -1000, -1000, -1000, -1000, 555,
	553, 1215, -1000, 1026, -1000, 480, -1000, 947, 8899, 16896,
	265, 264, 812, -1000, 1213, 956, 1211, 956, -1000, -14,
	755, 8899, 8899, -1000, 539, -1000, -1000, 538, -1000, 659,
	-1000, 350, 25110, -1000, 6915, 25110, -1000, 748, 1326, -27,
	-1000, -1000, 6915, 455, 12732, 12201, 7481, -28, -1000, -1000,
	-1000, 776, -1000, 560, 1469, 129, 1054, 909, 796, 695,
	1467, 25110, -16, -1000, -16, -1000, -1000, -1000, -1000, -1000,
	-1000, 16896, 1111, -1000, 14583, 261, 16896, 258, -1000, 257,
	-1000, -1000, 255, 16896, -1000, 1247, -1000, 127, -1000, 1132,
	1368, -1000, 12201, 987, 1089, 1088, 12201, 1072, 911, 911,
	911, -1000, 15097, 4017, -1000, -1000, 16896, 254, 11927, 126,
	1457, 8899, 2537, 2537, 8899, 9465, 9465, -1000, 2537, -1000,
	-1000, -1000, -1000, 1156, 253, 8899, 3739, 3083, 3069, -32,
	6023, -24, 59, 23469, -1000, -1000, 367, -1000, 123, 7198,
	-1000, 24318, -18, -18, -1000, 1487, 1245, -1000, 8899, 24565,
	-1000, 12989, 456, 905, 23418, 3739, 3739, -1000, 8899, -1000,
	-1000, 1155, 8899, -1000, 3739, 3739, 9465, 9465, 9465, 9465,
	9465, 9465, 9465, 9465, 9465, 9465, 9465, 9465, 9465, 9465,
	9465, 9465, 9465, 9465, 9465, 1013, 9465, 1446, 1446, 1446,
	-41, 5720, -1000, 1150, 1155, 8899, 8899, 3739, 114, 113,
	108, -1000, 8899, -101, 8899, 8899, 8899, -1000, -1000, -1000,
	102, -1000, 1458, -1000, -1000, -1000, -1000, 1132, 16896, 16896,
	16896, 1209, -1000, 1455, -1000, 23222, -36, 16896, 16896, -1000,
	1097, 1124, 509, 16896, -1000, 16896, -1000, 16896, 16896, 16896,
	-42, -44, 16896, 16896, -1000, -1000, -63, 6915, 234, -11,
	-63, 730, -1000, -54, -1000, 410, -1000, 331, 221, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 100, -1000, -1000,
	1120, -1000, 10031, 251, 16896, 14583, 1403, 10031, 925, -1000,
	-1000, 453, 8899, 8899, 1457, 643, 12201, 12201, 895, 1087,
	12201, -1000, -1000, -1000, -1000, -1000, -1000, 1101, 250, 16896,
	15097, 585, 2537, 3048, 2552, 8899, 3739, 25212, -49, 8899,
	8899, -1000, -62, -1000, 8899, -1000, -1000, 1459, 8899, 99,
	98, 96, -1000, -1000, 25110, 8899, -1000, -1000, 21522, 8899,
	95, -1000, 94, 91, 25110, 1150, 25110, -1000, -1000, 609,
	609, 1446, 1446, 1446, 1446, 1083, 1083, 2424, 626, 220,
	220, 220, 365, 563, 563, 220, 220, 220, 1149, 1067,
	249, 24653, 8899, -66, -1000, -1000, -1000, 25110, 25110, 90,
	-1000, -1000, -1000, -101, 2961, 23171, 22975, -1000, 85, 453,
	-1000, -1000, -1000, 16896, -1000, 16896, -1000, 16896, 16896, 1147,
	1009, -1000, -1000, 1079, 248, 9465, 16896, -1000, 836, -68,
	-70, 1007, -1000, 1003, 8899, -1000, 3739, 956, 956, -1000,
	536, 526, -1000, -1000, -1000, -1000, -63, 1252, 16896, 1299,
	-1000, -1000, 246, -1000, -1000, -1000, 893, -84, -1000, 199,
	1337, 8899, -1000, -1000, 245, 10031, -90, 84, -11, -92,
	16896, -1000, 16896, 25110, -101, 627, -1000, 895, -1000, 243,
	8899, 12201, -1000, -155, -1000, 407, -1000, 16896, -94, -1000,
	8899, 8899, 25212, -100, -1000, 2537, 2537, -1000, 22924, -1000,
	24318, -1000, -1000, -1000, 25110, 890, -1000, 22728, -1000, -1000,
	-1000, -1000, 9465, 1148, 240, 3739, 22677, -1000, -1000, 8899,
	-1000, -1000, -1000, -1000, -1000, 866, -1000, -1000, 16896, 1017,
	-1000, -1000, 8899, 24653, 237, 1111, 223, -1000, -1000, -1000,
	818, -1000, -1000, 25110, 1341, -1000, -1000, 16896, 16896, 586,
	-102, 16896, -1000, -1000, 4871, 16896, 836, 10031, 1342, 59,
	16896, 1342, 22481, 3468, -113, -1000, 1111, -1000, 836, 219,
	-83, -1000, 1398, 13527, -1000, 16896, 25110, -1000, 1101, -1000,
	4590, -115, -1000, 2537, 2537, -1000, -1000, 80, 905, 1367,
	-1000, 2188, 9465, 3739, -119, -1000, 22430, -1000, -1000, 1204,
	22183, 1058, 16896, -1000, 16896, 16896, 483, 16896, -1000, -1000,
	679, -1000, 455, -1000, 206, 1111, -1000, -1000, -1000, -1000,
	1337, 5, 836, -1000, 1111, 10031, 16896, 204, -1000, 193,
	59, -121, -1000, -1000, -1000, -1000, 739, 8899, 2188, -125,
	-1000, -1000, 1197, -1000, 913, 854, 73, -126, 168, -1000,
	8899, -1000, 12732, -1000, 16896, -1000, 1342, 71, 1111, -1000,
	-127, -1000, -1000, 8899, -1000, 68, 8616, 8616, -101, -1000,
	16896, -1000, 920, 919, 667, -1000, -1000, -1000, -1000, -1000,
	1058, 25110, -104, -134, -1000, -1000, -1000, 836, -18, -1000,
	-1000, -1000, 9748, 924, 723, 23912, -1000, -1000, -1000, 1261,
	-1000, 488, 1038, 1038, 913, -1000, 901, 1111, 67, 1425,
	-1000, -1000, -1000, -1000, -1000, -1000, 1432, -1000, -1000, 1076,
	-1000, -1000, -1000, -1000, -1000, -1000, 1459, 8333, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1738, 1737, 1384, 130, 1736, 129, 1734, 1733, 1731,
	1724, 1723, 1722, 96, 128, 127, 132, 126, 1721, 83,
	1719, 1718, 1715, 93, 1711, 1709, 1705, 77, 1701, 1699,
	123, 120, 1698, 1697, 84, 30, 169, 2302, 136, 1692,
	1690, 1689, 13, 102, 61, 1686, 263, 1685, 1684, 49,
	1683, 95, 105, 888, 37, 1682, 1680, 142, 20, 35,
	1587, 98, 147, 140, 117, 1679, 1678, 1675, 36, 1674,
	3, 1673, 1670, 15, 51, 11, 1656, 28, 19, 1655,
	1653, 135, 1651, 66, 99, 111, 69, 113, 223, 1650,
	44, 14, 57, 1649, 16, 79, 1648, 27, 74, 138,
	1646, 38, 150, 65, 32, 52, 106, 1645, 1644, 1643,
	78, 1642, 101, 62, 1641, 1640, 59, 1637, 137, 139,
	1635, 1632, 119, 1631, 1630, 1629, 152, 1628, 1627, 151,
	1623, 8, 43, 50, 9, 110, 109, 75, 100, 1620,
	22, 1619, 1245, 893, 742, 25, 60, 31, 80, 47,
	53, 104, 1618, 1614, 107, 1612, 1609, 1606, 1599, 1598,
	76, 1597, 58, 144, 33, 46, 86, 21, 54, 81,
	103, 148, 108, 1596, 1594, 116, 1593, 97, 1589, 1588,
	1461, 141, 1585, 1581, 1580, 1412, 1349, 1223, 256, 1576,
	1575, 643, 368, 1573, 1571, 114, 1570, 1568, 145, 227,
	23, 1567, 118, 1565, 89, 1564, 0, 85, 55, 1563,
	121, 68, 1561, 1560, 1558, 1557, 17, 2, 6, 5,
	7, 4, 26, 24, 1555, 1553, 133, 87, 1546, 1536,
	149, 1535, 1533, 1532, 34, 1527, 18, 1523, 12, 1522,
	1520, 10, 1, 143, 1516, 90, 1511, 1429, 1510, 146,
	1508, 1506, 1393, 82,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 87, 87, 86, 86,
	89, 89, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 176, 176, 175, 18, 152,
	152, 19, 19, 19, 19, 20, 111, 111, 21, 21,
	21, 21, 22, 26, 243, 243, 243, 247, 247, 248,
	248, 249, 249, 249, 249, 249, 249, 249, 245, 245,
	29, 29, 29, 29, 29, 130, 126, 126, 128, 128,
	128, 128, 52, 125, 125, 125, 125, 127, 127, 127,
	127, 199, 198, 198, 204, 204, 204, 65, 65, 65,
	65, 65, 66, 66, 66, 197, 197, 197, 197, 205,
	205, 205, 205, 205, 205, 67, 67, 67, 203, 203,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	17, 244, 244, 246, 246, 31, 31, 9, 9, 10,
	10, 68, 68, 69, 69, 133, 133, 133, 133, 70,
	70, 47, 47, 47, 132, 214, 214, 215, 215, 215,
	215, 215, 215, 216, 216, 216, 216, 216, 216, 216,
	212, 212, 213, 210, 210, 211, 211, 211, 211, 250,
	250, 131, 131, 73, 73, 219, 219, 219, 219, 217,
	217, 217, 217, 217, 220, 218, 221, 221, 221, 221,
	221, 163, 163, 163, 33, 11, 50, 50, 12, 8,
	8, 115, 115, 77, 77, 167, 167, 167, 59, 59,
	42, 42, 42, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 116, 116, 117, 117, 24, 28,
	32, 32, 32, 32, 32, 252, 252, 56, 56, 56,
	56, 57, 57, 129, 129, 129, 129, 129, 51, 7,
	7, 49, 49, 23, 23, 23, 23, 23, 62, 62,
	122, 122, 122, 124, 124, 123, 123, 123, 101, 101,
	34, 82, 82, 91, 91, 92, 92, 173, 93, 93,
	27, 27, 37, 37, 35, 35, 35, 35, 35, 35,
	36, 36, 38, 38, 38, 38, 38, 38, 38, 227,
	227, 227, 230, 230, 226, 228, 228, 229, 229, 251,
	251, 102, 102, 102, 72, 71, 71, 75, 75, 74,
	76, 76, 166, 99, 99, 99, 99, 118, 119, 119,
	120, 120, 121, 121, 98, 98, 149, 149, 39, 39,
	81, 81, 83, 83, 140, 140, 141, 141, 139, 139,
	139, 168, 168, 168, 168, 169, 169, 169, 169, 169,
	169, 164, 164, 164, 164, 165, 165, 174, 174, 105,
	105, 105, 105, 103, 103, 104, 104, 170, 170, 170,
	170, 100, 100, 171, 171, 171, 134, 134, 177, 177,
	177, 80, 80, 80, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 179, 179, 179,
	179, 181, 181, 181, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 182, 182,
	189, 189, 190, 190, 191, 192, 183, 183, 184, 184,
	185, 186, 193, 193, 193, 193, 195, 195, 187, 187,
	187, 187, 187, 188, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 113, 113,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 222, 222, 222, 222, 222, 222, 222, 224, 224,
	225, 225, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 231,
	231, 232, 232, 234, 234, 235, 235, 236, 237, 237,
	237, 238, 239, 239, 233, 233, 240, 240, 240, 241,
	241, 242, 242, 242, 242, 242, 154, 154, 154, 155,
	155, 156, 88, 88, 151, 151, 150, 150, 150, 153,
	153, 106, 106, 194, 194, 194, 194, 194, 194, 194,
	107, 107, 107, 114, 108, 108, 109, 109, 109, 109,
	109, 109, 146, 147, 110, 110, 110, 148, 148, 157,
	161, 161, 160, 159, 159, 158, 158, 137, 137, 137,
	137, 138, 138, 136, 135, 94, 94, 95, 95, 253,
	253, 162, 162, 96, 96, 97, 90, 90, 172, 172,
	172, 172, 84, 84, 64, 64, 85, 85, 60, 60,
	63, 63, 61, 61, 61, 61, 78, 78, 79, 79,
	58, 58, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 196, 196, 196, 53, 53, 53, 54,
	54, 55, 55, 201, 201, 201, 202, 202, 202, 202,
	200, 200, 200, 200, 200, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	2, 2, 0, 2, 0, 8, 8, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 4,
	7, 3, 0, 6, 6, 8, 5, 7, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 0,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 1, 1, 3, 2, 4,
	0, 3, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 2, 4, 1, 1, 1, 2, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 1, 1, 3,
	5, 1, 0, 2, 2, 1, 2, 0, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -229, 92, 100, 122, 196,
	99, 85, 116, 210, 218, -35, -37, 226, -130, 227,
	34, 236, 58, 95, 212, 207, 257, 66, -227, -38,
	-36, 305, 280, 286, 221, -39, 244, 272, 308, 244,
	130, 78, 275, -60, -53, 4, -206, -208, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 151, 154, 157, 159, 160, 161, 162, 163, 165,
	166, 168, 170, 167, 173, 175, 176, 182, 185, 188,
	189, 190, 191, 194, 196, 198, 199, 200, 202, 203,
	207, 205, 206, 208, 210, 212, 213, 215, 217, 218,
	219, 220, 223, 224, 226, 227, 229, 232, 235, 236,
	237, 240, 238, 234, 243, 245, 246, 253, 257, 258,
	259, 260, 263, 264, 265, 267, 269, 270, 271, 276,
	281, 282, 283, 284, 28, 35, 36, 37, 38, 40,
	41, 44, 45, 49, 50, 51, 53, 80, 82, 83,
	98, 101, 102, 108, 118, 120, 125, 126, 135, 136,
	137, 138, 140, 149, 172, 174, 183, 187, 193, 195,
	201, 214, 222, 230, 231, 239, 241, 248, 249, 250,
	254, 255, 272, 273, 87, 134, 265, 264, 78, 130,
	244, 275, -16, 305, -27, -6, -14, -4, -23, -34,
	-13, -30, -17, -31, -15, 23, -200, 4, -206, -208,
	-207, -209, 55, 67, 115, 133, 127, 142, 144, 150,
	152, 164, 184, 186, 211, 228, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 42, 47, 48, 52, 54,
	56, 62, 66, 70, 71, 72, 73, 74, 75, 84,
	86, 88, 89, 90, 93, 95, 97, 103, 104, 105,
	111, 113, 114, 116, 119, 121, 128, 130, 132, 139,
	141, 147, 148, 153, 155, 156, 169, 171, 177, 178,
	179, 180, 181, 192, 197, 204, 209, 221, 225, 233,
	242, 244, 247, 251, 252, 256, 261, 262, 266, 268,
	274, 275, 277, 278, 279, 280, -53, -53, -53, 196,
	22, -247, 22, -248, -249, 66, 92, 116, 221, 134,
	87, 264, -247, -57, 218, -53, -126, 154, 224, 214,
	253, -127, -125, -199, 248, 163, -86, -53, 4, 22,
	78, 57, 79, 117, 130, 131, 62, 63, 146, 245,
	248, 253, 66, 267, -252, 253, 253, -252, -252, -56,
	253, 251, -57, -251, 244, 244, 266, 275, -115, 78,
	262, -36, -38, -37, -74, -75, 261, 139, 97, 181,
	-35, -37, -227, -230, 202, -226, -53, -230, -71, -72,
	22, 89, 309, -170, -60, 179, -97, 305, -3, -170,
	125, -60, -63, 125, -60, -53, -170, 125, 114, 305,
	-94, -137, -136, -135, 303, 307, 114, 141, 141, -171,
	-170, -53, 125, -64, 125, -63, -87, 125, -86, -87,
	125, -176, -175, -202, 4, -206, -208, -207, 272, 244,
	130, -152, 305, -111, 305, -53, 22, 178, 309, 178,
	-53, -126, 51, -126, 305, -128, -51, -52, 143, 198,
	251, 290, 114, 284, -67, 5, 84, -89, 307, 114,
	-244, 178, 114, 114, 114, 114, 114, 114, 284, 143,
	198, 217, 244, 275, -129, -51, -52, -129, 251, -57,
	-100, -170, -86, 125, -53, -86, 130, -53, 125, -74,
	-75, -99, -118, -119, 153, 177, -102, 22, 89, -102,
	-102, 43, 306, 306, 309, -230, -79, 305, -90, -172,
	-142, 298, -144, 296, 297, 302, 169, 285, -154, -60,
	-145, 9, 305, -157, -224, -37, 98, 29, -155, -156,
	214, -53, 7, 8, 5, 6, -58, -179, -188, 256,
	103, 171, 47, -222, -223, 4, -206, -201, -180, -190,
	-184, -187, 140, 55, 71, 74, 72, 75, 225, 266,
	48, 28, 101, 102, 187, 193, 241, 254, 255, 125,
	172, 126, 53, 118, 149, 91, 36, 38, 40, 41,
	49, 50, 80, 82, 83, 108, 135, 136, 137, 138,
	174, 201, 230, 239, 249, 250, 273, -207, -191, -192,
	-185, -186, -193, -90, -97, 298, -60, 305, -96, -162,
	-142, 84, -44, 205, -43, 21, 23, 92, 270, 98,
	234, 234, 205, 98, 310, 205, 205, 98, 237, 306,
	-84, -60, -137, -142, -138, -200, 298, -171, -62, -60,
	-62, 226, -53, 30, 98, -46, 309, 46, 208, 98,
	-46, 309, 98, -46, 98, 306, 309, -170, 125, -63,
	30, -151, -177, -178, -180, -189, -183, -187, -188, 39,
	45, 44, 246, 222, 231, 37, 135, 136, 137, 138,
	230, 36, 201, 108, 91, 83, 82, 174, 41, 40,
	-191, -192, -185, -186, 80, 249, 250, 140, 38, 50,
	49, 273, 239, -88, -142, -243, -85, 244, 78, -61,
	-53, 298, -249, -243, 30, -88, 309, 309, 151, -66,
	157, 168, 123, -198, 84, -204, -197, -163, 9, 256,
	103, 178, -203, 8, 297, -196, -202, 5, 7, 296,
	-198, 84, 69, -205, 5, 4, -188, -163, 84, 154,
	307, -200, -199, -246, 111, -243, -199, -199, -199, -199,
	-199, -53, 151, -199, -199, 309, 309, -57, -46, 309,
	305, -73, 169, -228, 280, -73, 305, -54, 125, -53,
	-49, 94, 169, -99, -119, -118, -120, -142, 22, -142,
	-144, -36, -36, -36, -76, -166, -142, -226, 30, -78,
	-53, -81, 309, 114, 10, 11, 54, 33, 296, 297,
	298, 299, 109, 300, 293, 294, 295, 292, 288, 289,
	290, 60, 158, 216, 13, 14, 15, 26, 180, 152,
	285, 127, 228, 302, 16, 17, 18, 142, 35, 128,
	30, 4, -142, -142, -142, -142, -142, 186, -95, -37,
	-142, -88, -94, -37, -150, 303, 305, -94, 305, 5,
	5, 305, -158, -142, -231, 281, 111, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 195, -195, 276, -195, -195, -181,
	305, -181, -182, 305, -181, 282, 286, 305, -81, -60,
	309, 306, 309, 251, -116, 62, 56, -132, 125, 56,
	-210, -53, 62, -211, 52, 262, 197, 113, -116, 62,
	-116, 62, 62, -170, 33, 33, 251, -63, -53, 251,
	251, -170, 114, 306, 309, 304, 313, -134, 278, -122,
	-27, 305, 84, 30, -122, -91, -92, -173, -93, -60,
	305, -53, -53, -63, -64, -86, -87, -87, -16, -175,
	98, -19, -27, -23, -34, -13, 306, 309, -80, 29,
	-112, 305, 283, 161, 81, 124, 160, -113, 220, 306,
	309, 251, 309, -85, -78, -136, -135, 114, 253, 306,
	-52, -51, -65, 200, 232, 206, 223, 309, 8, 7,
	7, 5, -200, -245, -53, -52, -51, -170, -68, -78,
	-69, -53, -133, -132, -212, -213, -210, 130, 262, 104,
	30, 98, -50, 191, 30, 178, 169, 290, 98, -121,
	214, 215, 309, -42, 31, 88, 305, 309, 306, -134,
	-172, -83, -168, -170, -37, -169, 305, -177, -177, -86,
	248, -142, -142, -142, -142, -142, -142, -142, -142, -142,
	-142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
	-142, -142, -142, 152, 127, 228, 35, 128, -142, 251,
	-142, -142, -142, -142, 171, 169, 256, 103, 263, 89,
	175, -253, 242, 32, -148, -37, 305, -200, -154, 214,
	305, -137, 306, 309, -88, -153, 304, -150, -88, 306,
	306, -88, 274, 22, 89, 298, -112, 7, -161, -160,
	277, -232, 106, 119, 305, 306, 306, -142, -142, -106,
	-194, -88, 4, 283, 161, 81, 124, 160, 220, -106,
	-107, -142, -88, -108, -143, -144, 296, 297, 302, 305,
	214, -109, -142, -88, -142, 42, 148, 252, -110, -142,
	114, -88, -142, -142, -142, -88, -88, -88, 305, 7,
	7, 248, 248, 7, -134, 306, -162, -43, -60, -53,
	-53, 169, -132, 125, -48, 169, -177, -53, 305, 305,
	145, 145, -53, -53, 125, -53, 125, -53, -53, -44,
	205, 305, 305, -53, 205, -53, -60, 205, 237, 114,
	-60, -138, -142, -101, 209, -142, -101, -124, 178, -84,
	272, -53, 209, -82, 309, 114, 290, -84, -46, -46,
	-46, -170, -177, 303, 303, 7, 251, 251, 251, 251,
	305, -142, -245, -61, -245, -51, 260, 59, 200, -204,
	-112, 309, 306, 306, 309, -54, 130, -54, -27, -86,
	5, -27, -60, 98, 5, -53, -166, -19, -53, -98,
	119, -174, 309, 287, 67, -105, 144, 164, 115, 150,
	211, 133, -139, 310, -165, -164, 30, -53, -37, -169,
	-168, 284, -142, -142, 251, -253, 242, -148, -142, 171,
	256, 103, 263, 89, 175, 114, 305, -143, -143, -88,
	305, -88, -95, -142, 304, 304, 309, 306, -75, 309,
	-74, -142, -88, -88, 306, 306, -159, -160, 93, -142,
	-237, 185, 305, 305, -142, 30, 309, 306, 114, 306,
	306, -114, 192, 306, 10, 11, 296, 297, 298, 299,
	109, 300, 293, 294, 295, 292, 288, 289, 290, 60,
	158, 216, 13, 14, 15, 142, 128, -143, -143, -143,
	-88, 305, 306, -146, -147, 114, 111, 30, -110, -110,
	-110, 306, 114, -88, 309, 309, 309, 306, 306, 306,
	7, 306, 309, 306, 284, 284, 306, -98, 251, 251,
	98, 169, 269, -214, -211, -142, -78, 305, 305, -41,
	92, 226, -117, 98, -46, 98, -46, 251, -116, 62,
	-88, -88, 251, 251, 237, 304, -90, 209, 61, 306,
	-90, -134, -92, -83, -162, 306, 304, 7, 7, 306,
	161, 124, 160, -113, 160, -113, -113, 7, -53, -70,
	129, -133, 305, -54, 305, 305, -73, 305, -53, -49,
	306, -149, 121, 43, -168, 175, 144, 144, -168, -105,
	144, -103, 184, -103, -103, -165, -200, 311, -53, 305,
	306, -142, -142, -143, -143, 114, 305, -142, -151, 26,
	26, 306, -88, 306, 309, 306, -150, 306, 274, -75,
	-75, -75, 5, 95, -142, 247, -238, -53, 305, 278,
	-74, 306, -177, -177, -142, -146, -142, -177, -177, -143,
	-143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
	-143, -143, -143, -143, -143, -143, -143, -143, 89, 169,
	175, -143, 309, -88, 306, -147, -146, -142, -142, -177,
	306, 306, 306, -88, -142, -142, -142, 306, 7, -149,
	-53, -53, -132, 98, -215, 62, -216, 54, 104, 66,
	169, 171, 262, 197, 52, 84, 204, 306, 306, -78,
	-78, 169, 84, 169, 84, 77, 258, -53, -53, -60,
	-53, -53, 306, 306, -53, -60, -90, -123, 305, 178,
	-27, -101, 290, 304, 304, 306, 128, -77, -167, -53,
	-225, 305, -222, -223, -58, 305, -78, -68, 30, -77,
	178, -234, 279, -142, -88, 243, -168, -168, -104, 268,
	178, 144, -168, -141, -140, 112, 167, 305, -78, -164,
	26, 26, -142, -151, 306, -142, -142, 306, -142, 5,
	-142, 306, 306, 306, -142, -239, -53, -142, 306, 306,
	306, -147, 114, 89, 175, 305, -142, 306, 306, 309,
	306, 306, 306, -234, -132, -53, -86, -53, 104, 125,
	171, 145, 305, -143, -60, -131, -250, 65, 240, 306,
	306, 171, 171, -142, -177, -46, -46, 251, 251, 90,
	-78, 62, -97, -37, 305, 188, 306, 309, -59, -94,
	54, -59, -142, 305, -77, 306, 306, -27, 306, -60,
	-235, -236, -53, 248, -104, 305, -142, -168, 309, 312,
	290, -78, 306, -142, -142, 306, 306, -75, -233, 190,
	306, -143, 114, 305, -151, 306, -142, -216, -54, 169,
	-142, -55, 305, -70, 305, 204, -45, 54, -53, -53,
	264, 170, 306, -53, -53, -131, -167, -42, -86, -42,
	306, -88, 306, -70, -131, 305, 309, 30, -145, -58,
	-53, -78, -140, -200, 306, 306, -75, 43, -143, -151,
	306, 306, 98, 306, -219, 159, -53, -78, -60, -40,
	268, -86, 226, -134, 305, -70, -59, -75, -131, -70,
	-77, -236, -238, 305, 306, -240, 199, 215, -88, 306,
	104, -217, -220, -218, 178, 115, 189, 229, 306, 306,
	-73, -142, -91, -78, -42, 306, -70, 306, -88, 306,
	-241, -242, 35, 259, 69, -142, -241, -53, -218, 178,
	-220, 178, 264, 87, -219, -134, 306, -131, -75, -242,
	194, 110, 214, 194, 110, -221, 166, 208, 46, 226,
	-221, -217, -47, 46, 208, -70, 306, 26, 20, 171,
	84, -242,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 388, 0, 0,
	0, 0, 0, 0, 0, 360, -2, 0, 134, 0,
	316, 0, 316, 316, 320, 0, 390, 282, 387, -2,
	398, 0, 0, 0, 396, 374, 0, 0, -2, 0,
	0, 0, 0, 0, 798, 826, 827, 828, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 0, 200, 840, 841, 842,
	843, 844, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 100, 107, 108, 911,
	110, 0, 117, 118, 119, 121, 122, 123, 124, 125,
	126, 127, 0, 309, 926, 322, 130, 889, 930, 998,
	944, 137, 147, 0, 1004, -2, 151, 78, 180, 181,
	182, 0, 184, 202, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 199, 327, 315, 327, 312, 313, 314,
	317, 0, 308, 0, 389, 0, 0, 0, 0, 0,
	281, -2, 370, 371, -2, 0, 393, 393, 393, 0,
	0, 371, 0, 379, 915, 382, 809, 380, 0, 0,
	395, 394, 0, 375, 457, 0, 418, 0, 2, 0,
	983, 457, 0, 983, 801, 0, 0, 983, 0, 0,
	799, 775, 767, 768, 772, 0, 0, 0, 0, 0,
	463, 68, 983, 51, 983, 794, 51, 983, 76, 51,
	983, 0, 95, 97, 836, 837, 838, 839, 1009, 0,
	0, 0, 0, 105, 0, 109, 111, 0, 0, 0,
	321, 131, 972, 133, 0, 136, 138, 139, 0, 0,
	0, 0, 0, 0, 150, 175, 176, 79, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	195, 196, 0, 0, 310, 323, 324, 311, 0, 319,
	51, 461, 254, 983, 386, 254, 830, 332, 983, -2,
	0, 366, 405, 406, 0, 0, 0, 391, 392, 0,
	0, 0, 362, 363, 0, 381, 0, 0, 421, 786,
	790, 791, 550, 0, 0, 0, 0, 0, 0, 639,
	640, 777, 0, 643, 644, 645, 977, 0, 649, 650,
	998, 798, 812, 813, 814, 815, 0, 0, 0, 820,
	821, 822, 766, 690, 659, -2, -2, 810, 487, 488,
	489, 490, -2, 1011, 663, 665, 667, 668, 669, 670,
	0, 961, 978, 979, 994, 995, 1003, 1007, 1008, 983,
	991, 984, 973, 981, 990, 869, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 835, 512, 513,
	518, 519, 521, 421, 419, 458, 459, 0, 0, 783,
	781, 782, 28, 305, 30, 0, 305, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 792, 776, 771, 0, 773, 774, 467, 0, 338,
	0, 0, 464, 0, 0, 70, 0, 49, 50, 0,
	72, 0, 0, 74, 0, 388, 0, 0, 983, 0,
	388, 0, 724, 473, 474, 475, 476, 477, 547, 480,
	481, 482, 483, 484, 485, 486, 494, 495, 496, 497,
	498, 499, 500, 509, 0, 493, 493, 493, 506, 507,
	510, 511, 516, 517, 528, 529, 531, 533, 527, 527,
	527, 524, 525, 0, 722, 0, 114, 0, 864, 796,
	802, 803, 120, 0, 0, 0, 0, 0, 0, 142,
	162, 163, 164, 143, 145, 152, 154, 155, 156, 165,
	166, 167, 168, 271, 0, 273, 178, 179, 823, 0,
	144, 146, 148, 149, 169, 170, 0, 172, 173, 174,
	0, 80, 183, 185, 0, 201, 186, 187, 188, 189,
	190, 191, 194, 197, 198, 0, 0, 318, 274, 0,
	212, 0, 0, 277, 385, 0, 0, 0, 983, 829,
	329, 0, 0, 369, 403, 404, 407, 410, 411, 408,
	550, 376, 377, 378, 399, 400, 292, 383, 0, 0,
	806, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 780, 0,
	0, 789, 555, 556, 557, 579, 580, 0, 641, -2,
	722, 0, 646, 647, 648, 0, 0, -2, 0, 817,
	547, 0, 0, 765, 692, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 751, 0, 0, 0, 0,
	0, 0, 0, 0, 502, 515, 526, 523, 522, 504,
	0, 503, 501, 0, 505, 0, 0, 0, 467, 0,
	0, 785, 0, 0, 0, 0, 304, 32, 983, 0,
	53, 0, 0, 244, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 800, 0,
	0, 0, 0, 0, 0, 769, 772, 349, 0, 349,
	340, 0, 0, 0, 336, 352, 353, 355, 356, 0,
	0, 465, 69, 795, 51, 77, 51, 51, 83, 96,
	0, 98, 101, 102, 103, 104, 99, 0, 468, 470,
	478, 0, 534, 535, 536, 537, 538, 539, 548, 106,
	0, 0, 0, 115, 116, 804, 805, 0, 0, 135,
	140, 141, 328, 0, 159, 0, 161, 0, 272, 825,
	824, 547, 81, 203, 128, 325, 326, 462, 0, 0,
	211, 806, 213, 215, 216, 217, 218, 830, 0, 830,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 409,
	412, 413, 0, 402, 290, 291, 388, 0, 808, 415,
	787, 448, 422, 430, 446, 433, 0, 551, 552, 553,
	0, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, -2, -2, -2, 571, 572, 573, -2, -2, -2,
	577, 578, -2, 0, 0, 0, 780, 0, -2, 0,
	587, -2, -2, -2, 591, 0, 594, 596, 598, 0,
	0, 0, 0, 779, 608, 757, 0, 788, 593, 0,
	0, 778, 777, 0, 0, 0, 728, 729, 0, -2,
	651, 398, 0, 0, 0, 0, 818, 0, 764, 760,
	0, 700, 0, 0, 0, 664, 666, 0, 0, 0,
	0, 732, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 722, 742, 0, 0, 610, 0, 0, 0, 0,
	998, 0, 722, 750, 0, 0, 0, 0, 0, 722,
	0, 756, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 415, 460, 784, 31, 294, 0,
	0, 0, 34, 983, 42, 0, 226, 0, 0, 0,
	0, 0, 307, 43, 983, 51, 983, 51, 44, 29,
	305, 0, 0, 298, 0, 293, 296, 0, 59, 0,
	793, 0, 771, 67, 0, 466, 333, 334, 0, 0,
	342, 339, 0, 467, 0, 0, 0, 0, 71, 73,
	75, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 112, 797, 113, 132, 157, 158, 160, 153,
	171, 0, 220, 253, 0, 0, 830, 0, 209, 254,
	276, 278, 0, 0, 331, 332, 401, 0, 807, 417,
	0, 420, 0, 0, 0, 0, 0, 0, 454, 454,
	454, 452, 446, 0, 432, 445, 0, 444, -2, 433,
	0, 0, -2, -2, 0, 0, 0, 609, -2, 592,
	595, 597, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 642, 723, 726, 727, 0, -2, 0, 0,
	397, 398, 398, 398, 657, 0, 0, 761, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 673, 0, 674,
	675, 0, 0, 676, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 613, 614, 615,
	0, 0, 677, 748, 749, 0, 0, 0, 0, 0,
	0, 682, 0, 755, 0, 0, 0, 686, 687, 688,
	0, 491, 0, 508, 530, 532, 520, 417, 0, 0,
	0, 0, 52, 224, 243, 0, 0, 0, 0, 36,
	0, 0, 0, 0, 40, 0, 46, 0, 0, 0,
	0, 0, 0, 0, 60, 770, 348, 0, 347, 0,
	337, 349, 354, 351, 357, 0, 471, 0, 0, 479,
	540, 541, 542, 543, 544, 545, 546, 0, 129, 207,
	0, 214, 0, 0, 0, 212, 0, 0, 0, 330,
	384, 694, 0, 0, 423, 0, 0, 0, 0, 0,
	0, 449, 453, 450, 451, 431, 428, 0, 442, 0,
	435, 554, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 758, 0, 717, 0, -2, 730, 652, 0, 0,
	0, 0, 819, 759, 763, 0, 698, 699, 703, 0,
	0, 662, 0, 0, 731, 741, 743, 611, 612, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, -2,
	-2, -2, 629, 630, 631, -2, -2, -2, 0, 0,
	0, 744, 0, 0, 720, 746, 747, 752, 753, 0,
	679, 680, 681, 754, 0, 0, 0, 514, 0, 694,
	300, 302, 33, 0, 225, 0, 228, 0, 0, 0,
	0, 234, 235, 0, 0, 0, 0, 245, 252, 0,
	0, 0, 48, 0, 0, 306, 0, 51, 51, 295,
	0, 0, 205, 206, 299, 297, 335, 0, 0, 0,
	341, 350, 0, 472, 469, 549, 0, 0, 283, 289,
	289, 0, 660, 661, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 416, 414, 0, 436, 0, 438, 0,
	0, 0, 440, 0, 426, 0, 425, 0, 0, 434,
	0, 0, -2, 0, 602, -2, -2, 716, 723, 816,
	398, 653, 655, 656, 762, 705, 702, 0, 689, 671,
	672, 740, 0, 0, 0, 0, 723, 719, 678, 0,
	684, 685, 492, 373, 35, 0, 229, 230, 830, 0,
	233, 236, 0, 238, 832, 220, 0, 249, 250, 247,
	0, 37, 38, 47, 55, 39, 45, 0, 0, 0,
	0, 0, 358, 359, 0, 0, 252, 0, 292, 811,
	0, 292, 0, 0, 0, 242, 220, 210, 252, 0,
	693, 695, 0, 0, 437, 0, 456, 439, 0, 429,
	0, 0, 443, -2, -2, 603, 718, 0, 398, 0,
	691, -2, 0, 0, 0, 721, 0, 227, 231, 0,
	0, 258, 0, 246, 0, 0, 57, 0, 301, 303,
	0, 344, 467, 346, 0, 220, 284, 285, 288, 286,
	289, 398, 252, 208, 220, 0, 0, 0, 447, 0,
	0, 0, 427, 424, 441, 654, 708, 0, -2, 0,
	637, 683, 0, 237, 263, 0, 0, 0, 254, 41,
	0, 54, 0, 345, 0, 240, 292, 0, 220, 279,
	0, 696, 697, 0, 455, 0, 0, 0, 704, 638,
	0, 239, 259, 260, 0, 255, 256, 257, 831, 251,
	258, 56, 467, 0, 287, 652, 241, 252, 398, 701,
	706, 709, -2, 947, 861, 0, 707, 232, 261, 0,
	262, 0, 0, 0, 263, 343, 223, 220, 0, 0,
	711, 712, 713, 714, 715, 264, 0, 267, 268, 0,
	265, 248, 219, 221, 222, 280, 0, 0, 266, 269,
	270, 710,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 294, 3, 300, 295, 3,
	305, 306, 298, 296, 309, 297, 307, 299, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 313, 308,
	288, 290, 289, 3, 310, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 303, 3, 304, 293, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 311, 292, 312, 302,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 291, 57631, 301, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:718
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:724
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:730
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:845
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1317
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1430
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION STATUS"}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = DropDefault
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return unimplemented(sqllex)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1847
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1858
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1864
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1978
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1982
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = Ascending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = Descending
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2036
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2037
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = true
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = false
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2051
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2094
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.str = ""
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.str = ""
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2188
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2195
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2237
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			return unimplemented(sqllex)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2267
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			return unimplemented(sqllex)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2495
		{
			return unimplemented(sqllex)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			return unimplemented(sqllex)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			return unimplemented(sqllex)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			return unimplemented(sqllex)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2503
		{
			return unimplemented(sqllex)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2511
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2515
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = true
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = false
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = false
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = true
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2539
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2689
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &From{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.str = astFullJoin
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.str = astLeftJoin
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.str = astRightJoin
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.str = astInnerJoin
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2884
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2974
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2979
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2980
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2988
		{
			return unimplemented(sqllex)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3044
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = nil
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3165
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3197
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3237
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			return unimplemented(sqllex)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			return unimplemented(sqllex)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3272
		{
			return unimplemented(sqllex)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			return unimplemented(sqllex)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			return unimplemented(sqllex)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			return unimplemented(sqllex)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3285
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3320
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3480
		{
			return unimplemented(sqllex)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3684
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3696
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3750
		{
			return unimplemented(sqllex)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3751
		{
			return unimplemented(sqllex)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3774
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			return unimplemented(sqllex)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3794
		{
			return unimplemented(sqllex)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			return unimplemented(sqllex)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
			return unimplemented(sqllex)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
			return unimplemented(sqllex)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			return unimplemented(sqllex)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3843
		{
			return unimplemented(sqllex)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3887
		{
			return unimplemented(sqllex)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3888
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3891
		{
			return unimplemented(sqllex)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3892
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = Window(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.str = ""
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3979
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			return unimplemented(sqllex)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3981
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3985
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3992
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3993
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3994
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			return unimplemented(sqllex)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4349
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4509
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4545
		{
			return unimplemented(sqllex)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = DNull
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.str = ""
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
