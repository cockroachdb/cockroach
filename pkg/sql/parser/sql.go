// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRANSACTION = 57620
const TREAT = 57621
const TRIM = 57622
const TRUE = 57623
const TRUNCATE = 57624
const TYPE = 57625
const UNBOUNDED = 57626
const UNCOMMITTED = 57627
const UNION = 57628
const UNIQUE = 57629
const UNKNOWN = 57630
const UPDATE = 57631
const UPSERT = 57632
const USE = 57633
const USER = 57634
const USERS = 57635
const USING = 57636
const UUID = 57637
const VALID = 57638
const VALIDATE = 57639
const VALUE = 57640
const VALUES = 57641
const VARCHAR = 57642
const VARIADIC = 57643
const VIEW = 57644
const VARYING = 57645
const WHEN = 57646
const WHERE = 57647
const WINDOW = 57648
const WITH = 57649
const WITHIN = 57650
const WITHOUT = 57651
const YEAR = 57652
const ZONE = 57653
const NOT_LA = 57654
const WITH_LA = 57655
const AS_LA = 57656
const POSTFIXOP = 57657
const UMINUS = 57658

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5566

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	335, 32,
	-2, 445,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 418,
	187, 418,
	227, 418,
	331, 418,
	333, 418,
	335, 418,
	-2, 428,
	-1, 68,
	1, 421,
	187, 421,
	227, 421,
	331, 421,
	333, 421,
	335, 421,
	-2, 427,
	-1, 77,
	1, 32,
	335, 32,
	-2, 445,
	-1, 444,
	1, 182,
	335, 182,
	-2, 1020,
	-1, 511,
	108, 455,
	160, 455,
	185, 455,
	-2, 424,
	-1, 514,
	108, 454,
	160, 454,
	185, 454,
	-2, 422,
	-1, 657,
	108, 454,
	160, 454,
	185, 454,
	-2, 425,
	-1, 717,
	332, 952,
	-2, 945,
	-1, 718,
	332, 953,
	-2, 946,
	-1, 724,
	5, 621,
	332, 621,
	-2, 1132,
	-1, 748,
	5, 582,
	-2, 1106,
	-1, 749,
	5, 615,
	332, 615,
	-2, 1108,
	-1, 750,
	5, 590,
	-2, 1109,
	-1, 751,
	5, 589,
	-2, 1110,
	-1, 752,
	5, 615,
	332, 615,
	-2, 1113,
	-1, 753,
	5, 615,
	332, 615,
	-2, 1114,
	-1, 754,
	5, 616,
	-2, 1117,
	-1, 755,
	5, 576,
	-2, 1118,
	-1, 756,
	5, 576,
	-2, 1119,
	-1, 757,
	5, 597,
	-2, 1123,
	-1, 758,
	5, 577,
	-2, 1128,
	-1, 759,
	5, 578,
	-2, 1129,
	-1, 760,
	5, 579,
	-2, 1130,
	-1, 761,
	5, 580,
	-2, 1131,
	-1, 762,
	5, 576,
	-2, 1136,
	-1, 763,
	5, 583,
	-2, 1141,
	-1, 764,
	5, 581,
	-2, 1144,
	-1, 765,
	5, 613,
	332, 613,
	-2, 1146,
	-1, 766,
	5, 617,
	-2, 1149,
	-1, 767,
	5, 619,
	-2, 1150,
	-1, 768,
	5, 612,
	332, 612,
	-2, 1155,
	-1, 1028,
	99, 428,
	108, 428,
	144, 428,
	160, 428,
	185, 428,
	191, 428,
	286, 428,
	-2, 740,
	-1, 1037,
	332, 929,
	-2, 917,
	-1, 1253,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 656,
	-1, 1254,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 657,
	-1, 1255,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 658,
	-1, 1259,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 662,
	-1, 1260,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 663,
	-1, 1261,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 664,
	-1, 1264,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 669,
	-1, 1270,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 671,
	-1, 1272,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 675,
	-1, 1273,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 676,
	-1, 1274,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 677,
	-1, 1275,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 678,
	-1, 1302,
	196, 811,
	-2, 814,
	-1, 1331,
	117, 851,
	332, 952,
	-2, 945,
	-1, 1332,
	117, 852,
	-2, 1102,
	-1, 1333,
	117, 853,
	-2, 1019,
	-1, 1334,
	117, 854,
	-2, 987,
	-1, 1335,
	117, 855,
	-2, 1003,
	-1, 1336,
	117, 856,
	-2, 1018,
	-1, 1337,
	117, 857,
	-2, 1066,
	-1, 1497,
	99, 428,
	108, 428,
	144, 428,
	160, 428,
	185, 428,
	191, 428,
	286, 428,
	-2, 511,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 670,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 672,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 673,
	-1, 1525,
	196, 810,
	-2, 813,
	-1, 1717,
	1, 512,
	69, 512,
	99, 512,
	108, 512,
	118, 512,
	122, 512,
	124, 512,
	137, 512,
	144, 512,
	149, 512,
	157, 512,
	160, 512,
	172, 512,
	185, 512,
	187, 512,
	191, 512,
	227, 512,
	229, 512,
	286, 512,
	294, 512,
	305, 512,
	306, 512,
	314, 512,
	331, 512,
	333, 512,
	335, 512,
	336, 512,
	-2, 511,
	-1, 1719,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 674,
	-1, 1724,
	147, 0,
	-2, 690,
	-1, 1734,
	196, 812,
	-2, 815,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 717,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 718,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 719,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 723,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 724,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	315, 0,
	316, 0,
	317, 0,
	-2, 725,
	-1, 1897,
	147, 0,
	-2, 691,
	-1, 1900,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 694,
	-1, 1901,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 696,
	-1, 2007,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 695,
	-1, 2008,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 697,
	-1, 2015,
	147, 0,
	-2, 726,
	-1, 2071,
	147, 0,
	-2, 727,
	-1, 2136,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	312, 0,
	318, 0,
	-2, 1105,
}

const sqlPrivate = 57344

const sqlLast = 30775

var sqlAct = [...]int{

	718, 2135, 2113, 1671, 2160, 2077, 2114, 2134, 1941, 2115,
	1130, 515, 1712, 1745, 1967, 1122, 1495, 1713, 943, 1987,
	1188, 1217, 1862, 522, 67, 1888, 1681, 708, 1819, 694,
	1618, 1805, 295, 311, 90, 90, 90, 1492, 949, 1468,
	560, 1470, 1192, 1206, 840, 52, 313, 90, 90, 90,
	1873, 1619, 90, 536, 1867, 90, 716, 497, 1232, 1187,
	1418, 1689, 1585, 90, 578, 1586, 502, 809, 67, 1033,
	1300, 1191, 90, 90, 945, 1698, 90, 1162, 781, 90,
	90, 90, 90, 1536, 715, 90, 90, 1482, 1224, 297,
	20, 784, 677, 1412, 1131, 1082, 1477, 1357, 1091, 1310,
	688, 67, 693, 1287, 1230, 1284, 551, 969, 1114, 1146,
	904, 1213, 304, 22, 640, 813, 520, 1179, 824, 302,
	30, 301, 16, 786, 810, 1328, 443, 303, 8, 1155,
	1024, 678, 687, 496, 641, 1227, 1063, 579, 284, 570,
	1225, 1067, 573, 1124, 572, 1195, 974, 1820, 525, 660,
	659, 488, 661, 514, 82, 710, 902, 439, 420, 817,
	566, 86, 523, 665, 429, 639, 2000, 20, 432, 2001,
	519, 68, 1524, 69, 826, 1123, 486, 826, 534, 1127,
	310, 541, 544, 826, 534, 2151, 1493, 800, 806, 283,
	22, 2130, 2125, 2124, 1818, 1165, 1165, 30, 519, 16,
	977, 978, 1165, 1430, 711, 8, 1429, 2121, 771, 2111,
	806, 533, 1152, 2106, 539, 1528, 806, 546, 1360, 2102,
	1529, 2055, 806, 980, 542, 66, 2073, 479, 2067, 1152,
	2049, 806, 976, 1818, 2045, 527, 1118, 806, 1480, 512,
	2040, 511, 2009, 2039, 1997, 1152, 979, 835, 73, 1994,
	975, 43, 1995, 32, 1981, 1159, 1978, 1818, 310, 806,
	44, 1781, 1527, 1976, 33, 57, 1818, 1165, 1952, 1951,
	493, 806, 1818, 1923, 1902, 75, 1165, 1165, 1899, 1731,
	1891, 1152, 45, 1165, 1839, 1838, 1817, 1165, 1165, 1818,
	59, 90, 90, 90, 90, 90, 35, 502, 66, 1160,
	1454, 1728, 985, 66, 1165, 1080, 1657, 1652, 76, 1121,
	1121, 1603, 1458, 1115, 1604, 1165, 71, 48, 1601, 1304,
	1600, 1165, 72, 1165, 43, 1599, 1216, 60, 1165, 43,
	1115, 47, 73, 44, 1525, 1480, 1177, 1165, 44, 1161,
	1158, 70, 520, 1535, 1457, 1221, 673, 806, 806, 49,
	938, 937, 1118, 827, 580, 45, 827, 440, 1169, 75,
	45, 1165, 827, 1164, 1151, 1120, 1165, 1152, 1121, 310,
	1079, 834, 896, 1078, 835, 895, 806, 549, 591, 532,
	1821, 77, 555, 1881, 73, 916, 612, 1496, 2149, 2133,
	1556, 1557, 76, 534, 2120, 544, 73, 2082, 499, 841,
	71, 2068, 1979, 1928, 1924, 56, 72, 672, 1916, 1915,
	1163, 75, 1914, 1910, 66, 1909, 90, 1908, 1556, 1557,
	575, 575, 1429, 75, 1853, 1126, 567, 1796, 1791, 1847,
	1790, 90, 1789, 559, 90, 90, 46, 576, 1739, 1717,
	43, 1688, 1571, 1661, 76, 502, 1608, 1605, 1041, 44,
	1593, 975, 502, 62, 63, 34, 76, 1584, 50, 1555,
	61, 1552, 1551, 830, 71, 51, 825, 1556, 1557, 73,
	72, 45, 941, 1549, 73, 54, 1541, 70, 56, 90,
	977, 978, 1157, 56, 1540, 90, 777, 58, 1456, 70,
	1460, 1374, 1562, 1494, 1659, 1325, 75, 1324, 672, 1296,
	1034, 75, 70, 980, 1156, 557, 90, 90, 90, 671,
	90, 948, 64, 981, 982, 983, 984, 986, 987, 1747,
	1562, 65, 2132, 658, 2094, 90, 979, 2052, 2038, 76,
	2037, 2036, 2028, 2026, 76, 2017, 90, 71, 2004, 1556,
	1557, 1990, 71, 72, 1974, 1572, 1938, 1921, 72, 502,
	90, 1893, 600, 1856, 1844, 608, 313, 502, 1824, 90,
	1723, 1703, 70, 1679, 90, 90, 90, 1705, 90, 1562,
	1677, 1676, 601, 1572, 1846, 1674, 614, 1627, 1626, 1583,
	1545, 1544, 985, 90, 90, 73, 776, 534, 1521, 807,
	1516, 90, 1289, 90, 56, 657, 1445, 1403, 90, 1297,
	815, 1401, 594, 596, 1388, 502, 502, 1387, 1367, 1323,
	1220, 1068, 75, 313, 1573, 1071, 1075, 1061, 90, 1060,
	646, 90, 775, 90, 90, 90, 90, 90, 90, 977,
	978, 90, 650, 1059, 653, 1058, 90, 90, 778, 642,
	1057, 1562, 1573, 644, 90, 76, 917, 1056, 1055, 1054,
	1053, 1052, 980, 71, 1051, 90, 1034, 1050, 555, 72,
	1049, 814, 1048, 1047, 1046, 1045, 534, 818, 818, 1038,
	1027, 70, 947, 804, 90, 979, 942, 90, 296, 537,
	676, 668, 669, 598, 587, 541, 544, 674, 1388, 770,
	585, 2104, 829, 1999, 512, 832, 511, 973, 1904, 567,
	1567, 1565, 1566, 1558, 1559, 1560, 1561, 1563, 1564, 1879,
	1882, 805, 1878, 1852, 500, 1212, 1851, 1706, 836, 1439,
	558, 606, 615, 1211, 816, 819, 1438, 1025, 838, 777,
	952, 1558, 1559, 1560, 1561, 1563, 1564, 604, 520, 1556,
	1557, 2042, 2002, 1471, 919, 888, 1850, 890, 1556, 1557,
	889, 1431, 1115, 1073, 1496, 892, 1607, 1074, 1606, 912,
	1500, 631, 905, 911, 940, 607, 1043, 946, 1123, 1413,
	1868, 1748, 1311, 1425, 1064, 1040, 1614, 924, 605, 635,
	90, 2146, 1560, 1561, 1563, 1564, 794, 1532, 90, 2085,
	847, 2147, 90, 1451, 874, 983, 984, 986, 987, 2044,
	90, 90, 509, 1832, 90, 792, 886, 90, 939, 954,
	1168, 956, 915, 955, 472, 636, 1159, 894, 1658, 615,
	793, 90, 971, 90, 90, 473, 90, 615, 1962, 90,
	1085, 90, 90, 478, 90, 477, 502, 512, 1084, 965,
	512, 512, 966, 967, 1638, 1961, 977, 978, 1960, 1959,
	1562, 1037, 1558, 1559, 1560, 1561, 1563, 1564, 67, 1642,
	1160, 1641, 1092, 67, 1611, 291, 1610, 1143, 787, 980,
	788, 1503, 1444, 1443, 1442, 777, 1441, 681, 1271, 1166,
	604, 1112, 1077, 1103, 1096, 1098, 1106, 1111, 1108, 1065,
	1066, 643, 979, 580, 534, 1843, 548, 1371, 1069, 80,
	1161, 1158, 544, 1572, 1072, 1370, 534, 1125, 1084, 1125,
	2043, 1030, 1242, 1207, 1083, 287, 936, 313, 1117, 292,
	935, 605, 1076, 1134, 90, 1095, 485, 1101, 544, 1147,
	518, 544, 787, 1088, 788, 90, 90, 90, 1645, 1113,
	1943, 789, 90, 90, 1109, 1286, 1647, 987, 985, 90,
	1178, 918, 787, 79, 788, 893, 1286, 1140, 575, 1149,
	575, 1148, 1415, 1129, 288, 811, 597, 1150, 1139, 2092,
	1138, 1163, 1573, 1144, 1141, 517, 1142, 90, 921, 583,
	313, 925, 926, 927, 928, 929, 1629, 797, 505, 820,
	1222, 2146, 798, 932, 933, 1163, 1311, 618, 2157, 910,
	909, 995, 499, 494, 1666, 789, 795, 797, 628, 510,
	1069, 1171, 1072, 1241, 506, 313, 1094, 1450, 1419, 1066,
	1065, 796, 519, 418, 507, 789, 795, 1293, 723, 1408,
	1170, 619, 1291, 632, 617, 1489, 1405, 1181, 544, 1183,
	2168, 796, 629, 1157, 534, 1214, 1215, 2117, 1294, 1423,
	2108, 293, 934, 1185, 826, 802, 1636, 1564, 1567, 1565,
	1566, 1558, 1559, 1560, 1561, 1563, 1564, 1556, 1557, 421,
	996, 2031, 1184, 2109, 801, 1163, 2163, 1186, 815, 1228,
	1182, 913, 90, 90, 90, 78, 1452, 294, 90, 1419,
	426, 90, 1373, 633, 1210, 422, 1093, 90, 90, 90,
	90, 90, 1663, 603, 1308, 1062, 602, 1223, 1202, 90,
	2013, 582, 90, 90, 1975, 290, 289, 516, 1513, 502,
	423, 81, 90, 1173, 1022, 2156, 1081, 90, 2118, 90,
	1381, 1490, 1399, 1511, 1175, 1944, 90, 1630, 1543, 425,
	880, 1699, 1664, 634, 790, 1716, 90, 519, 1646, 1686,
	2116, 2145, 785, 1176, 1298, 1295, 914, 1375, 989, 981,
	982, 983, 984, 986, 987, 1174, 603, 90, 90, 1562,
	2143, 1319, 520, 1861, 1204, 663, 1338, 1505, 502, 2119,
	1411, 773, 847, 847, 1377, 1421, 874, 874, 1285, 622,
	1427, 592, 1400, 1398, 664, 1402, 1508, 90, 590, 90,
	1268, 90, 1954, 2161, 1376, 90, 1509, 2023, 790, 90,
	1514, 1777, 1919, 1163, 1953, 1407, 2155, 1936, 2174, 2169,
	1613, 1384, 1572, 1380, 1417, 1828, 480, 662, 790, 814,
	1205, 953, 90, 827, 1831, 1459, 944, 1461, 814, 1662,
	424, 1830, 1424, 1414, 67, 2078, 1301, 931, 534, 1889,
	897, 1432, 664, 1305, 663, 2162, 1682, 1313, 1433, 1292,
	1434, 1435, 1863, 1937, 1390, 703, 961, 1389, 1330, 1330,
	1341, 1876, 1352, 1694, 2164, 873, 56, 520, 1364, 1365,
	1366, 1436, 1693, 1449, 1447, 1448, 602, 565, 1453, 1462,
	427, 1573, 1455, 1465, 847, 1266, 1269, 1778, 874, 87,
	87, 285, 481, 1779, 1920, 421, 662, 1466, 1510, 1890,
	1147, 2173, 412, 413, 414, 1512, 1827, 431, 500, 495,
	445, 1473, 564, 1265, 1475, 1534, 426, 1463, 431, 962,
	1476, 422, 1829, 1479, 1228, 520, 1498, 526, 526, 1491,
	1149, 285, 1148, 1813, 285, 285, 545, 285, 1150, 517,
	87, 552, 901, 654, 1672, 1854, 423, 847, 1343, 1410,
	1690, 874, 1478, 1322, 2016, 1934, 1588, 1485, 1918, 1481,
	1587, 1722, 1499, 1506, 1504, 425, 1814, 1233, 1240, 1566,
	1558, 1559, 1560, 1561, 1563, 1564, 1488, 1935, 1644, 615,
	899, 1520, 1550, 483, 520, 847, 1515, 1416, 1697, 874,
	1167, 1119, 900, 1107, 1104, 638, 1486, 2075, 637, 1531,
	630, 627, 1282, 1267, 626, 625, 1625, 1321, 1485, 624,
	623, 620, 563, 556, 1044, 923, 2112, 1280, 1802, 1634,
	90, 90, 1632, 1612, 1467, 1208, 1200, 1488, 1145, 833,
	831, 828, 823, 803, 1653, 1624, 799, 791, 1736, 1483,
	1469, 1969, 1590, 1591, 1592, 90, 666, 1486, 1218, 90,
	2147, 90, 530, 83, 907, 562, 482, 1809, 90, 1810,
	1609, 502, 1484, 1623, 1084, 1971, 424, 1100, 1487, 2033,
	1099, 90, 1678, 1650, 90, 1616, 561, 1875, 3, 1385,
	1276, 308, 25, 1651, 313, 1637, 90, 1812, 1277, 1675,
	1278, 307, 24, 1643, 1283, 1815, 306, 23, 1519, 1707,
	1656, 1683, 1648, 1633, 67, 1635, 1522, 1219, 1821, 1655,
	1665, 1667, 1668, 1704, 1654, 667, 427, 1708, 1398, 1487,
	1673, 531, 1134, 1228, 1538, 1539, 471, 1084, 613, 305,
	11, 2070, 964, 1097, 90, 309, 10, 1685, 550, 1741,
	1742, 1743, 1437, 553, 299, 9, 285, 568, 285, 445,
	445, 1725, 1700, 1701, 1691, 1813, 538, 1582, 1806, 25,
	670, 1105, 1696, 1102, 554, 772, 1804, 1811, 1595, 24,
	1808, 720, 2056, 1228, 23, 417, 1228, 298, 7, 1859,
	1385, 300, 4, 1203, 1874, 1732, 474, 475, 1814, 1735,
	977, 978, 1279, 1199, 1128, 972, 1751, 977, 978, 1281,
	891, 90, 90, 90, 846, 1756, 1754, 11, 839, 1807,
	1639, 1692, 1640, 10, 1695, 1154, 2171, 2172, 90, 1749,
	980, 2105, 9, 90, 2059, 90, 428, 90, 90, 90,
	1556, 1557, 90, 90, 1886, 502, 979, 1797, 1826, 1785,
	1822, 1784, 1669, 979, 1625, 1801, 1660, 1825, 977, 978,
	648, 647, 1602, 648, 1440, 7, 1372, 873, 873, 4,
	1369, 1798, 1368, 1318, 1031, 649, 1906, 90, 90, 2091,
	1968, 588, 1744, 1624, 502, 1464, 1041, 1039, 484, 1809,
	1942, 1810, 419, 922, 90, 90, 593, 1857, 90, 445,
	445, 621, 1625, 91, 1880, 1855, 502, 1625, 90, 1702,
	1860, 1623, 1842, 1711, 1849, 90, 2107, 1911, 1542, 1812,
	1885, 847, 1986, 1884, 1864, 874, 2012, 1815, 1320, 1866,
	1042, 1624, 42, 1621, 1894, 697, 1624, 1858, 1803, 1835,
	1729, 1684, 1848, 1615, 431, 1841, 1194, 1193, 90, 314,
	285, 520, 847, 847, 316, 908, 874, 874, 719, 1623,
	487, 847, 847, 580, 1623, 874, 874, 876, 1898, 503,
	1883, 445, 652, 445, 1329, 655, 1234, 774, 721, 873,
	844, 722, 845, 1070, 709, 842, 1132, 1290, 1309, 1530,
	526, 1035, 887, 689, 847, 701, 1228, 1228, 874, 1811,
	1228, 285, 1782, 90, 700, 90, 1306, 313, 90, 584,
	1887, 442, 55, 1792, 599, 87, 90, 438, 1422, 1845,
	1917, 960, 313, 1209, 285, 957, 1631, 508, 1553, 285,
	285, 285, 586, 821, 1871, 1872, 1350, 1342, 1877, 1339,
	1932, 1946, 873, 645, 1948, 1930, 1625, 90, 285, 285,
	780, 1023, 1133, 1929, 611, 1947, 87, 1428, 87, 1153,
	675, 815, 90, 445, 968, 502, 529, 1970, 528, 90,
	1945, 1964, 1189, 1963, 609, 1624, 898, 90, 1172, 1016,
	873, 1013, 476, 445, 1625, 90, 445, 1977, 87, 445,
	445, 445, 445, 445, 90, 90, 930, 1998, 2025, 1996,
	1201, 445, 445, 1623, 1972, 1983, 1985, 1383, 2003, 431,
	1870, 2167, 2006, 1624, 2005, 615, 1993, 2032, 1940, 2011,
	951, 1628, 2084, 1989, 74, 2041, 1966, 1409, 847, 31,
	1344, 29, 874, 26, 21, 90, 19, 18, 28, 526,
	17, 1623, 552, 27, 15, 2027, 14, 1233, 1752, 1980,
	13, 12, 1957, 1958, 1865, 41, 1233, 1757, 40, 39,
	90, 90, 2030, 2021, 1982, 38, 2018, 769, 37, 36,
	6, 5, 90, 2022, 2, 1, 90, 0, 2029, 1228,
	0, 0, 0, 2050, 502, 2048, 0, 0, 0, 1788,
	2051, 90, 0, 0, 0, 0, 0, 90, 0, 0,
	503, 0, 0, 313, 90, 90, 846, 846, 0, 2060,
	2058, 2057, 2054, 315, 0, 0, 2065, 1992, 0, 0,
	520, 67, 0, 0, 2069, 2066, 2062, 90, 0, 90,
	2061, 0, 90, 504, 313, 0, 2063, 847, 0, 0,
	0, 874, 0, 1950, 0, 285, 0, 0, 0, 2080,
	0, 2081, 2095, 1089, 2090, 2097, 90, 285, 2096, 90,
	0, 2093, 2072, 0, 0, 285, 1110, 2086, 0, 285,
	2101, 0, 1116, 0, 0, 2100, 2103, 2099, 0, 0,
	1625, 0, 0, 2098, 0, 0, 285, 0, 1136, 1137,
	0, 285, 0, 90, 285, 90, 445, 445, 0, 445,
	2129, 2126, 2122, 2127, 0, 0, 0, 0, 0, 1624,
	0, 0, 0, 90, 0, 2128, 0, 2140, 846, 0,
	0, 2131, 2144, 0, 2142, 1481, 847, 0, 2148, 0,
	874, 0, 90, 0, 2083, 1984, 0, 1623, 2154, 2152,
	0, 0, 0, 2150, 2153, 0, 0, 0, 503, 0,
	0, 2166, 2165, 0, 0, 503, 2170, 0, 0, 876,
	876, 875, 1344, 1344, 0, 0, 0, 843, 0, 0,
	0, 0, 0, 2175, 1485, 0, 1556, 1557, 0, 0,
	0, 846, 0, 0, 0, 0, 0, 0, 0, 1180,
	0, 0, 0, 1488, 0, 1134, 0, 977, 978, 0,
	285, 285, 285, 0, 0, 1483, 873, 285, 1190, 0,
	0, 0, 0, 1486, 552, 0, 0, 0, 0, 846,
	980, 0, 847, 1344, 1344, 1344, 874, 0, 1484, 0,
	0, 0, 1956, 0, 0, 0, 0, 873, 873, 0,
	0, 0, 285, 979, 0, 0, 873, 873, 0, 994,
	0, 0, 503, 0, 2053, 2087, 2088, 2089, 0, 314,
	503, 0, 0, 0, 504, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 977, 978, 0, 0, 1562, 873,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 2110,
	0, 0, 0, 0, 0, 0, 0, 980, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 503,
	0, 0, 977, 978, 0, 0, 314, 0, 0, 0,
	979, 679, 679, 0, 0, 0, 0, 0, 0, 0,
	782, 1572, 0, 0, 876, 980, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 1378, 1379,
	0, 0, 995, 1089, 0, 0, 1386, 0, 979, 0,
	0, 0, 1391, 1392, 1394, 1396, 1397, 0, 0, 0,
	0, 0, 876, 0, 1404, 0, 985, 1406, 285, 0,
	0, 0, 1344, 1344, 0, 0, 0, 285, 0, 0,
	0, 0, 285, 0, 1426, 0, 0, 0, 0, 0,
	1573, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 504, 873, 985, 0, 0, 0, 0, 504,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 995,
	0, 0, 1180, 1180, 0, 0, 1344, 1344, 1344, 1344,
	1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
	1344, 1344, 1344, 1344, 1344, 958, 1344, 963, 0, 0,
	0, 0, 951, 970, 951, 0, 445, 995, 0, 0,
	285, 0, 0, 0, 1472, 1017, 1018, 1019, 1020, 1021,
	0, 0, 0, 0, 0, 1029, 0, 1565, 1566, 1558,
	1559, 1560, 1561, 1563, 1564, 1036, 0, 285, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 990, 988, 989,
	981, 982, 983, 984, 986, 987, 504, 977, 978, 0,
	0, 0, 873, 315, 504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 503,
	980, 0, 0, 0, 0, 846, 0, 0, 0, 0,
	0, 0, 0, 875, 875, 0, 0, 0, 0, 843,
	843, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 504, 504, 0, 0, 846, 846, 0, 0,
	315, 0, 0, 0, 0, 846, 846, 981, 982, 983,
	984, 986, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 698, 53, 0, 0, 0, 846, 985,
	314, 0, 990, 988, 989, 981, 982, 983, 984, 986,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1620, 0, 0, 0, 53, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 843, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 0, 314, 521, 0, 0, 0, 0, 0,
	0, 53, 1344, 0, 0, 285, 285, 0, 876, 0,
	0, 0, 0, 0, 1579, 1580, 1581, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	1670, 0, 0, 0, 1089, 0, 951, 0, 875, 876,
	876, 0, 0, 1680, 843, 0, 0, 0, 876, 876,
	0, 996, 0, 0, 0, 0, 285, 0, 0, 285,
	0, 0, 846, 0, 0, 0, 0, 0, 0, 0,
	0, 1715, 0, 0, 0, 0, 875, 0, 679, 0,
	0, 876, 843, 0, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1344, 1270, 0, 1272,
	1273, 1274, 1275, 504, 0, 0, 0, 0, 0, 1746,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 503, 0, 0, 0, 0, 0, 988, 989,
	981, 982, 983, 984, 986, 987, 0, 0, 0, 0,
	1326, 1327, 0, 0, 1340, 0, 1351, 1353, 1358, 1361,
	1362, 1363, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 1720, 1721, 0, 0, 0, 0, 0,
	0, 782, 0, 0, 0, 0, 1799, 1800, 1089, 0,
	0, 503, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 1620, 552, 1344, 0, 0, 0, 1833, 0,
	1834, 0, 285, 1836, 1837, 876, 0, 1840, 285, 0,
	521, 0, 0, 0, 0, 0, 1420, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 0, 1780, 0, 0,
	1620, 0, 552, 1190, 0, 1620, 0, 315, 0, 0,
	846, 0, 0, 0, 0, 0, 0, 0, 1446, 285,
	285, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1715, 0, 0, 0, 0, 0, 0,
	1892, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 970,
	0, 0, 0, 1912, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1556, 1557, 0, 1574, 1575, 1576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1896, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 1502,
	0, 0, 0, 0, 1507, 0, 0, 0, 1089, 0,
	1931, 0, 0, 1933, 0, 0, 1571, 0, 0, 0,
	0, 285, 0, 0, 1620, 0, 504, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 1526, 843, 0,
	0, 0, 0, 876, 1533, 0, 0, 1537, 0, 1965,
	0, 0, 552, 0, 0, 0, 1546, 0, 0, 0,
	0, 0, 1620, 875, 875, 0, 1562, 285, 0, 843,
	843, 0, 875, 875, 1988, 0, 513, 0, 843, 843,
	0, 1029, 285, 0, 0, 504, 0, 1358, 1358, 1358,
	1715, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	1715, 1577, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 843, 0, 1939, 503, 0, 0, 0, 0, 1572,
	1617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 876,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 782, 2034, 2035, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2046, 0, 0,
	0, 2047, 0, 0, 0, 0, 0, 0, 1573, 0,
	0, 0, 0, 0, 0, 0, 552, 0, 0, 0,
	0, 0, 1715, 0, 0, 0, 0, 0, 0, 1715,
	552, 0, 0, 0, 0, 0, 0, 2015, 0, 513,
	0, 0, 513, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 2079, 1718, 552, 0, 1719, 285, 0, 875,
	0, 0, 0, 0, 1026, 843, 1028, 0, 1724, 0,
	0, 0, 0, 1032, 0, 0, 0, 1733, 1620, 0,
	0, 1988, 0, 0, 1715, 1737, 0, 0, 1446, 1568,
	1569, 1570, 0, 0, 1567, 1565, 1566, 1558, 1559, 1560,
	1561, 1563, 1564, 1753, 0, 0, 0, 1755, 503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2071, 0, 0, 2141, 0,
	1786, 1787, 0, 0, 0, 0, 0, 503, 0, 1793,
	1794, 1795, 0, 0, 0, 0, 0, 1715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 875, 503,
	53, 0, 0, 0, 843, 1823, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 53, 0, 0, 977, 978, 504, 997,
	998, 999, 1007, 1008, 1009, 0, 0, 0, 53, 0,
	0, 0, 1000, 53, 0, 0, 0, 0, 0, 980,
	0, 315, 1011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 1869, 0, 0, 0, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	314, 0, 0, 0, 0, 1897, 0, 0, 0, 1900,
	1901, 0, 0, 0, 1903, 314, 0, 0, 0, 0,
	0, 1905, 0, 1907, 0, 0, 977, 978, 985, 0,
	0, 1913, 1007, 1008, 1009, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1004, 1012, 980,
	0, 0, 1011, 0, 0, 0, 0, 0, 503, 0,
	0, 0, 0, 1010, 1922, 1556, 1557, 0, 1574, 1575,
	1576, 0, 979, 0, 0, 1002, 0, 0, 994, 0,
	1229, 995, 0, 875, 0, 0, 0, 0, 0, 843,
	0, 0, 1556, 1557, 0, 1574, 1575, 1576, 0, 0,
	0, 0, 504, 0, 0, 0, 1001, 0, 1895, 0,
	0, 0, 0, 1955, 0, 0, 1288, 1571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 504, 0, 0, 1571, 0, 0, 1004, 1012, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 1991, 0,
	0, 0, 0, 504, 0, 1005, 0, 1562, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 503, 2007, 2008,
	0, 995, 0, 0, 0, 0, 0, 1578, 0, 0,
	0, 0, 0, 0, 1562, 0, 314, 0, 0, 0,
	0, 0, 1577, 0, 0, 0, 53, 0, 2020, 53,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1572, 2024, 0, 0, 0, 0, 0, 314, 1003, 1577,
	521, 991, 992, 993, 1006, 0, 990, 988, 989, 981,
	982, 983, 984, 986, 987, 0, 0, 1572, 0, 0,
	996, 0, 1925, 0, 0, 0, 0, 782, 0, 0,
	0, 0, 0, 0, 315, 1005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 1573, 0, 0, 0,
	0, 0, 504, 0, 53, 0, 0, 0, 1003, 0,
	0, 0, 0, 0, 1006, 1497, 990, 988, 989, 981,
	982, 983, 984, 986, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2123, 0,
	1568, 1569, 1570, 1288, 0, 1567, 1565, 1566, 1558, 1559,
	1560, 1561, 1563, 1564, 0, 0, 0, 0, 0, 0,
	0, 2139, 2139, 1028, 0, 0, 0, 1568, 1569, 1570,
	0, 0, 1567, 1565, 1566, 1558, 1559, 1560, 1561, 1563,
	1564, 0, 0, 0, 0, 0, 0, 0, 0, 2139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1028, 0, 2139, 92, 93, 0, 94, 0,
	315, 0, 0, 231, 0, 0, 0, 0, 95, 96,
	97, 232, 233, 234, 235, 98, 236, 237, 0, 99,
	238, 239, 100, 0, 0, 240, 241, 242, 0, 101,
	243, 315, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 286, 113, 244, 114, 245,
	246, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 1229, 247, 120, 121, 122, 248,
	249, 0, 0, 0, 123, 124, 250, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 251, 0, 252, 0,
	128, 129, 130, 131, 253, 254, 0, 0, 135, 0,
	132, 0, 0, 133, 255, 134, 256, 257, 258, 0,
	259, 0, 0, 136, 1229, 137, 138, 1229, 140, 139,
	0, 260, 0, 141, 53, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 261, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 262, 153, 263, 154, 155,
	0, 156, 0, 535, 157, 0, 0, 158, 264, 0,
	159, 0, 265, 160, 161, 162, 163, 0, 266, 164,
	267, 165, 0, 166, 167, 168, 169, 268, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 269, 186, 0,
	190, 191, 192, 193, 73, 270, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 271, 272, 200, 0,
	206, 201, 202, 189, 203, 205, 273, 204, 274, 0,
	207, 75, 208, 209, 210, 211, 212, 0, 275, 276,
	277, 0, 0, 213, 278, 279, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	280, 223, 224, 225, 581, 282, 0, 0, 226, 0,
	0, 0, 71, 227, 228, 229, 230, 0, 72, 0,
	0, 0, 0, 0, 977, 978, 53, 997, 998, 999,
	1007, 1008, 1009, 0, 0, 1226, 0, 1231, 0, 0,
	1000, 0, 0, 0, 446, 0, 0, 980, 1556, 1557,
	1011, 1574, 1575, 1576, 0, 0, 0, 0, 0, 0,
	0, 0, 450, 0, 1727, 0, 0, 1229, 1229, 0,
	979, 1229, 0, 0, 451, 0, 994, 0, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 452, 0, 0, 0, 0, 453,
	1571, 0, 0, 0, 458, 459, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	449, 454, 0, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 470, 0, 0, 1004, 1012, 0, 0, 0,
	1562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	455, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1002, 456, 457, 0, 0, 0, 995,
	0, 0, 0, 0, 0, 1577, 0, 0, 0, 0,
	0, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 462, 0, 1572, 1001, 0, 0, 0, 0, 0,
	0, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1973, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 461,
	1229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1005, 0, 0, 0, 0, 0, 0,
	0, 0, 1573, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 464, 0, 469,
	0, 0, 0, 465, 0, 0, 0, 0, 466, 0,
	0, 0, 0, 0, 0, 0, 1003, 0, 0, 991,
	992, 993, 1006, 468, 990, 988, 989, 981, 982, 983,
	984, 986, 987, 0, 0, 0, 0, 0, 1028, 0,
	1598, 0, 0, 1568, 1569, 1570, 312, 0, 1567, 1565,
	1566, 1558, 1559, 1560, 1561, 1563, 1564, 0, 0, 0,
	0, 53, 92, 93, 331, 94, 332, 333, 334, 335,
	231, 336, 337, 338, 339, 95, 96, 97, 232, 233,
	234, 235, 98, 236, 237, 340, 99, 238, 239, 100,
	341, 342, 240, 241, 242, 343, 101, 243, 344, 317,
	345, 102, 103, 104, 0, 105, 346, 106, 107, 108,
	347, 318, 109, 110, 348, 349, 350, 351, 352, 353,
	111, 112, 286, 113, 244, 114, 245, 246, 354, 115,
	355, 116, 356, 357, 358, 117, 118, 359, 119, 360,
	0, 361, 247, 120, 121, 122, 248, 249, 362, 363,
	364, 123, 124, 250, 0, 125, 365, 126, 366, 367,
	319, 368, 127, 251, 369, 252, 370, 128, 129, 130,
	131, 253, 254, 321, 371, 135, 372, 132, 373, 320,
	133, 255, 134, 256, 257, 258, 374, 259, 375, 322,
	136, 323, 137, 138, 376, 140, 139, 377, 260, 324,
	141, 325, 378, 142, 379, 380, 143, 0, 144, 145,
	146, 148, 261, 147, 326, 149, 150, 152, 151, 381,
	382, 383, 262, 153, 263, 154, 155, 384, 156, 385,
	386, 157, 387, 388, 158, 264, 327, 159, 328, 265,
	160, 161, 162, 163, 389, 266, 164, 267, 165, 390,
	166, 167, 168, 169, 268, 170, 171, 391, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 392,
	183, 329, 184, 185, 269, 186, 0, 190, 191, 192,
	193, 393, 270, 194, 195, 196, 394, 197, 187, 188,
	198, 330, 199, 271, 272, 200, 395, 206, 201, 202,
	189, 203, 205, 273, 204, 274, 396, 207, 397, 208,
	209, 210, 211, 212, 398, 275, 276, 277, 399, 400,
	213, 278, 279, 401, 214, 215, 216, 217, 402, 403,
	218, 219, 220, 221, 404, 222, 405, 280, 223, 224,
	225, 281, 282, 406, 407, 226, 408, 409, 410, 411,
	227, 228, 229, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 1709, 0, 0, 0, 0, 0, 0, 0,
	1710, 92, 93, 331, 94, 332, 333, 334, 335, 231,
	336, 337, 338, 339, 95, 96, 97, 232, 233, 234,
	235, 98, 236, 237, 340, 99, 238, 239, 100, 341,
	342, 240, 241, 242, 343, 101, 243, 344, 317, 345,
	102, 103, 104, 0, 105, 346, 106, 107, 108, 347,
	318, 109, 110, 348, 349, 350, 351, 352, 353, 111,
	112, 286, 113, 244, 114, 245, 246, 354, 115, 355,
	116, 356, 357, 358, 117, 118, 359, 119, 360, 0,
	361, 247, 120, 121, 122, 248, 249, 362, 363, 364,
	123, 124, 250, 0, 125, 365, 126, 366, 367, 319,
	368, 127, 251, 369, 252, 370, 128, 129, 130, 131,
	253, 254, 321, 371, 135, 372, 132, 373, 320, 133,
	255, 134, 256, 257, 258, 374, 259, 375, 322, 136,
	323, 137, 138, 376, 140, 139, 377, 260, 324, 141,
	325, 378, 142, 379, 380, 143, 0, 144, 145, 146,
	148, 261, 147, 326, 149, 150, 152, 151, 381, 382,
	383, 262, 153, 263, 154, 155, 384, 156, 385, 386,
	157, 387, 388, 158, 264, 327, 159, 328, 265, 160,
	161, 162, 163, 389, 266, 164, 267, 165, 390, 166,
	167, 168, 169, 268, 170, 171, 391, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 392, 183,
	329, 184, 185, 269, 186, 0, 190, 191, 192, 193,
	393, 270, 194, 195, 196, 394, 197, 187, 188, 198,
	330, 199, 271, 272, 200, 395, 206, 201, 202, 189,
	203, 205, 273, 204, 274, 396, 207, 397, 208, 209,
	210, 211, 212, 398, 275, 276, 277, 399, 400, 213,
	278, 279, 401, 214, 215, 216, 217, 402, 403, 218,
	219, 220, 221, 404, 222, 405, 280, 223, 224, 225,
	281, 282, 406, 407, 226, 408, 409, 410, 411, 227,
	228, 229, 230, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2064, 92, 93, 331, 94, 332, 333, 334, 335,
	231, 336, 337, 338, 339, 95, 96, 97, 232, 233,
	234, 235, 98, 236, 237, 340, 99, 238, 239, 100,
	341, 342, 240, 241, 242, 343, 101, 243, 344, 317,
	345, 102, 103, 104, 0, 105, 346, 106, 107, 108,
	347, 318, 109, 110, 348, 349, 350, 351, 352, 353,
	111, 112, 286, 113, 244, 114, 245, 246, 354, 115,
	355, 116, 356, 357, 358, 117, 118, 359, 119, 360,
	0, 361, 247, 120, 121, 122, 248, 249, 362, 363,
	364, 123, 124, 250, 0, 125, 365, 126, 366, 367,
	319, 368, 127, 251, 369, 252, 370, 128, 129, 130,
	131, 253, 254, 321, 371, 135, 372, 132, 373, 320,
	133, 255, 134, 256, 257, 258, 374, 259, 375, 322,
	136, 323, 137, 138, 376, 140, 139, 377, 260, 324,
	141, 325, 378, 142, 379, 380, 143, 0, 144, 145,
	146, 148, 261, 147, 326, 149, 150, 152, 151, 381,
	382, 383, 262, 153, 263, 154, 155, 384, 156, 385,
	386, 157, 387, 388, 158, 264, 327, 159, 328, 265,
	160, 161, 162, 163, 389, 266, 164, 267, 165, 390,
	166, 167, 168, 169, 268, 170, 171, 391, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 392,
	183, 329, 184, 185, 269, 186, 0, 190, 191, 192,
	193, 393, 270, 194, 195, 196, 394, 197, 187, 188,
	198, 330, 199, 271, 272, 200, 395, 206, 201, 202,
	189, 203, 205, 273, 204, 274, 396, 207, 397, 208,
	209, 210, 211, 212, 398, 275, 276, 277, 399, 400,
	213, 278, 279, 401, 214, 215, 216, 217, 402, 403,
	218, 219, 220, 221, 404, 222, 405, 280, 223, 224,
	225, 281, 282, 406, 407, 226, 408, 409, 410, 411,
	227, 228, 229, 230, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 0,
	92, 93, 331, 94, 332, 333, 334, 335, 231, 336,
	337, 338, 339, 95, 96, 97, 232, 233, 234, 235,
	98, 236, 237, 340, 99, 238, 239, 100, 341, 342,
	240, 241, 242, 343, 101, 243, 344, 317, 345, 102,
	103, 104, 0, 105, 346, 106, 107, 108, 347, 318,
	109, 110, 348, 349, 350, 351, 352, 353, 111, 112,
	286, 113, 244, 114, 245, 246, 354, 115, 355, 116,
	356, 357, 358, 117, 118, 359, 119, 360, 0, 361,
	247, 120, 121, 122, 248, 249, 362, 363, 364, 123,
	124, 250, 0, 125, 365, 126, 366, 367, 319, 368,
	127, 251, 369, 252, 370, 128, 129, 130, 131, 253,
	254, 321, 371, 135, 372, 132, 373, 320, 133, 255,
	134, 256, 257, 258, 374, 259, 375, 322, 136, 323,
	137, 138, 376, 140, 139, 377, 260, 324, 141, 325,
	378, 142, 379, 380, 143, 0, 144, 145, 146, 148,
	261, 147, 326, 149, 150, 152, 151, 381, 382, 383,
	262, 153, 263, 154, 155, 384, 156, 385, 386, 157,
	387, 388, 158, 264, 327, 159, 328, 265, 160, 161,
	162, 163, 389, 266, 164, 267, 165, 390, 166, 167,
	168, 169, 268, 170, 171, 391, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 392, 183, 329,
	184, 185, 269, 186, 0, 190, 191, 192, 193, 393,
	270, 194, 195, 196, 394, 197, 187, 188, 198, 330,
	199, 271, 272, 200, 395, 206, 201, 202, 189, 203,
	205, 273, 204, 274, 396, 207, 397, 208, 209, 210,
	211, 212, 398, 275, 276, 277, 399, 400, 213, 278,
	279, 401, 214, 215, 216, 217, 402, 403, 218, 219,
	220, 221, 404, 222, 405, 280, 223, 224, 225, 281,
	282, 406, 407, 226, 408, 409, 410, 411, 227, 228,
	229, 230, 717, 706, 707, 704, 705, 696, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 733, 699, 0, 0,
	0, 95, 96, 97, 232, 748, 234, 749, 98, 750,
	751, 0, 99, 238, 239, 100, 702, 732, 752, 753,
	242, 0, 101, 744, 0, 725, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 318, 109, 110,
	0, 726, 728, 0, 727, 729, 111, 112, 286, 113,
	754, 114, 755, 756, 783, 115, 0, 116, 0, 0,
	0, 747, 118, 0, 119, 0, 0, 0, 690, 120,
	121, 122, 734, 735, 713, 0, 0, 123, 124, 757,
	0, 125, 0, 126, 0, 0, 319, 0, 127, 745,
	0, 252, 0, 128, 129, 130, 131, 741, 743, 321,
	0, 135, 0, 132, 0, 320, 133, 758, 134, 759,
	760, 761, 0, 724, 0, 322, 136, 323, 137, 138,
	0, 140, 139, 0, 746, 324, 141, 325, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 261, 147,
	326, 149, 150, 152, 151, 685, 0, 714, 742, 153,
	762, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 264, 327, 159, 328, 736, 160, 161, 162, 163,
	0, 737, 164, 267, 165, 0, 166, 167, 168, 169,
	763, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 329, 184, 185,
	691, 186, 0, 190, 191, 192, 193, 73, 270, 194,
	195, 196, 730, 197, 187, 188, 198, 330, 199, 764,
	272, 200, 0, 206, 201, 202, 189, 203, 205, 765,
	204, 738, 0, 207, 75, 208, 209, 210, 211, 212,
	0, 275, 766, 767, 0, 0, 213, 739, 740, 712,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	731, 222, 0, 280, 223, 224, 225, 581, 768, 0,
	0, 226, 0, 0, 0, 71, 227, 228, 229, 230,
	686, 72, 0, 0, 0, 0, 684, 0, 0, 0,
	0, 682, 683, 717, 706, 707, 704, 705, 696, 0,
	692, 0, 0, 0, 0, 695, 0, 0, 0, 92,
	93, 1315, 94, 0, 0, 0, 0, 733, 699, 0,
	0, 0, 95, 96, 97, 232, 748, 234, 749, 98,
	750, 751, 0, 99, 238, 239, 100, 702, 732, 752,
	753, 242, 0, 101, 744, 0, 725, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 318, 109,
	110, 0, 726, 728, 0, 727, 729, 111, 112, 286,
	113, 754, 114, 755, 756, 0, 115, 0, 116, 0,
	1316, 0, 747, 118, 0, 119, 0, 0, 0, 690,
	120, 121, 122, 734, 735, 713, 0, 0, 123, 124,
	757, 0, 125, 0, 126, 0, 0, 319, 0, 127,
	745, 0, 252, 0, 128, 129, 130, 131, 741, 743,
	321, 0, 135, 0, 132, 0, 320, 133, 758, 134,
	759, 760, 761, 0, 724, 0, 322, 136, 323, 137,
	138, 0, 140, 139, 0, 746, 324, 141, 325, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 326, 149, 150, 152, 151, 685, 0, 714, 742,
	153, 762, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 264, 327, 159, 328, 736, 160, 161, 162,
	163, 0, 737, 164, 267, 165, 0, 166, 167, 168,
	169, 763, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 329, 184,
	185, 691, 186, 0, 190, 191, 192, 193, 0, 270,
	194, 195, 196, 730, 197, 187, 188, 198, 330, 199,
	764, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	765, 204, 738, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 766, 767, 0, 0, 213, 739, 740,
	712, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 731, 222, 0, 280, 223, 224, 225, 281, 768,
	1314, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 686, 0, 0, 0, 0, 0, 684, 0, 0,
	0, 0, 682, 683, 1317, 717, 706, 707, 704, 705,
	696, 692, 1312, 0, 0, 0, 695, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 733,
	699, 0, 0, 0, 95, 96, 97, 232, 748, 234,
	749, 98, 750, 751, 0, 99, 238, 239, 100, 702,
	732, 752, 753, 242, 0, 101, 744, 0, 725, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	318, 109, 110, 0, 726, 728, 0, 727, 729, 111,
	112, 286, 113, 754, 114, 755, 756, 0, 115, 0,
	116, 0, 0, 0, 747, 118, 0, 119, 0, 0,
	0, 690, 120, 121, 122, 734, 735, 713, 0, 0,
	123, 124, 757, 0, 125, 0, 126, 0, 0, 319,
	0, 127, 745, 0, 252, 0, 128, 129, 130, 131,
	741, 743, 321, 0, 135, 0, 132, 0, 320, 133,
	758, 134, 759, 760, 761, 0, 724, 0, 322, 136,
	323, 137, 138, 0, 140, 139, 0, 746, 324, 141,
	325, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 261, 147, 326, 149, 150, 152, 151, 685, 0,
	714, 742, 153, 762, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 264, 327, 159, 328, 736, 160,
	161, 162, 163, 0, 737, 164, 267, 165, 0, 166,
	167, 168, 169, 763, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	329, 184, 185, 691, 186, 0, 190, 191, 192, 193,
	73, 270, 194, 195, 196, 730, 197, 187, 188, 198,
	330, 199, 764, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 765, 204, 738, 0, 207, 75, 208, 209,
	210, 211, 212, 0, 275, 766, 767, 0, 0, 213,
	739, 740, 712, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 731, 222, 0, 280, 223, 224, 225,
	581, 768, 0, 0, 226, 0, 0, 0, 71, 227,
	228, 229, 230, 686, 72, 0, 0, 0, 0, 684,
	0, 0, 0, 0, 682, 683, 717, 706, 707, 704,
	705, 696, 0, 692, 0, 0, 0, 0, 695, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	733, 699, 0, 0, 0, 95, 96, 97, 232, 748,
	234, 749, 98, 750, 751, 1354, 99, 238, 239, 100,
	702, 732, 752, 753, 242, 0, 101, 744, 0, 725,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 318, 109, 110, 0, 726, 728, 0, 727, 729,
	111, 112, 286, 113, 754, 114, 755, 756, 0, 115,
	0, 116, 0, 0, 0, 747, 118, 0, 119, 0,
	0, 0, 690, 120, 121, 122, 734, 735, 713, 0,
	0, 123, 124, 757, 0, 125, 0, 126, 0, 1359,
	319, 0, 127, 745, 0, 252, 0, 128, 129, 130,
	131, 741, 743, 321, 0, 135, 0, 132, 0, 320,
	133, 758, 134, 759, 760, 761, 0, 724, 0, 322,
	136, 323, 137, 138, 0, 140, 139, 1355, 746, 324,
	141, 325, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 326, 149, 150, 152, 151, 685,
	0, 714, 742, 153, 762, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 264, 327, 159, 328, 736,
	160, 161, 162, 163, 0, 737, 164, 267, 165, 0,
	166, 167, 168, 169, 763, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 329, 184, 185, 691, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 730, 197, 187, 188,
	198, 330, 199, 764, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 765, 204, 738, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 275, 766, 767, 0, 1356,
	213, 739, 740, 712, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 731, 222, 0, 280, 223, 224,
	225, 281, 768, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 686, 0, 0, 0, 0, 0,
	684, 0, 0, 0, 0, 682, 683, 717, 706, 707,
	704, 705, 696, 0, 692, 0, 0, 0, 0, 695,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 733, 699, 0, 0, 0, 95, 96, 97, 232,
	748, 234, 749, 98, 750, 751, 0, 99, 238, 239,
	100, 702, 732, 752, 753, 242, 0, 101, 744, 0,
	725, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 318, 109, 110, 0, 726, 728, 0, 727,
	729, 111, 112, 286, 113, 754, 114, 755, 756, 0,
	115, 0, 116, 0, 0, 0, 747, 118, 0, 119,
	0, 0, 0, 690, 120, 121, 122, 734, 735, 713,
	0, 0, 123, 124, 757, 0, 125, 0, 126, 0,
	0, 319, 0, 127, 745, 0, 252, 0, 128, 129,
	130, 131, 741, 743, 321, 0, 135, 0, 132, 0,
	320, 133, 758, 134, 759, 760, 761, 0, 724, 0,
	322, 136, 323, 137, 138, 0, 140, 139, 0, 746,
	324, 141, 325, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 261, 147, 326, 149, 150, 152, 151,
	685, 1649, 714, 742, 153, 762, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 264, 327, 159, 328,
	736, 160, 161, 162, 163, 0, 737, 164, 267, 165,
	0, 166, 167, 168, 169, 763, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 329, 184, 185, 691, 186, 0, 190, 191,
	192, 193, 0, 270, 194, 195, 196, 730, 197, 187,
	188, 198, 330, 199, 764, 272, 200, 0, 206, 201,
	202, 189, 203, 205, 765, 204, 738, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 275, 766, 767, 0,
	0, 213, 739, 740, 712, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 731, 222, 0, 280, 223,
	224, 225, 281, 768, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 686, 0, 0, 0, 0,
	0, 684, 0, 0, 0, 0, 682, 683, 680, 717,
	706, 707, 704, 705, 696, 692, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 733, 699, 0, 0, 0, 95, 96,
	97, 232, 748, 234, 749, 98, 750, 751, 0, 99,
	238, 239, 100, 702, 732, 752, 753, 242, 0, 101,
	744, 0, 725, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 318, 109, 110, 0, 726, 728,
	0, 727, 729, 111, 112, 286, 113, 754, 114, 755,
	756, 0, 115, 0, 116, 0, 0, 0, 747, 118,
	0, 119, 0, 0, 0, 690, 120, 121, 122, 734,
	735, 713, 0, 0, 123, 124, 757, 0, 125, 0,
	126, 0, 0, 319, 0, 127, 745, 0, 252, 0,
	128, 129, 130, 131, 741, 743, 321, 0, 135, 0,
	132, 0, 320, 133, 758, 134, 759, 760, 761, 0,
	724, 0, 322, 136, 323, 137, 138, 0, 140, 139,
	0, 746, 324, 141, 325, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 261, 147, 326, 149, 150,
	152, 151, 685, 0, 714, 742, 153, 762, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 264, 327,
	159, 328, 736, 160, 161, 162, 163, 0, 737, 164,
	267, 165, 0, 166, 167, 168, 169, 763, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 329, 184, 185, 691, 186, 0,
	190, 191, 192, 193, 0, 270, 194, 195, 196, 730,
	197, 187, 188, 198, 330, 199, 764, 272, 200, 0,
	206, 201, 202, 189, 203, 205, 765, 204, 738, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 275, 766,
	767, 0, 0, 213, 739, 740, 712, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 731, 222, 0,
	280, 223, 224, 225, 281, 768, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 686, 0, 0,
	0, 0, 0, 684, 0, 0, 0, 0, 682, 683,
	0, 0, 0, 0, 0, 1034, 1307, 692, 0, 0,
	0, 0, 695, 717, 706, 707, 704, 705, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 733, 699, 0,
	0, 0, 95, 96, 97, 232, 748, 234, 749, 98,
	750, 751, 0, 99, 238, 239, 100, 702, 732, 752,
	753, 242, 0, 101, 744, 0, 725, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 318, 109,
	110, 0, 726, 728, 0, 727, 729, 111, 112, 286,
	113, 754, 114, 755, 756, 0, 115, 0, 116, 0,
	0, 0, 747, 118, 0, 119, 0, 0, 0, 690,
	120, 121, 122, 734, 735, 713, 0, 0, 123, 124,
	757, 0, 125, 0, 126, 0, 0, 319, 0, 127,
	745, 0, 252, 0, 128, 129, 130, 131, 741, 743,
	321, 0, 135, 0, 132, 0, 320, 133, 758, 134,
	759, 760, 761, 0, 724, 0, 322, 136, 323, 137,
	138, 0, 140, 139, 0, 746, 324, 141, 325, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 326, 149, 150, 152, 151, 685, 0, 714, 742,
	153, 762, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 264, 327, 159, 328, 736, 160, 161, 162,
	163, 0, 737, 164, 267, 165, 0, 166, 167, 168,
	169, 763, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 329, 184,
	185, 691, 186, 0, 190, 191, 192, 193, 0, 270,
	194, 195, 196, 730, 197, 187, 188, 198, 330, 199,
	764, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	765, 204, 738, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 766, 767, 0, 0, 213, 739, 740,
	712, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 731, 222, 0, 280, 223, 224, 225, 281, 768,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 686, 0, 0, 0, 0, 0, 684, 0, 0,
	0, 0, 682, 683, 717, 706, 707, 704, 705, 696,
	0, 692, 1783, 0, 0, 0, 695, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 733, 699,
	0, 0, 0, 95, 96, 97, 232, 748, 234, 749,
	98, 750, 751, 0, 99, 238, 239, 100, 702, 732,
	752, 753, 242, 0, 101, 744, 0, 725, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 318,
	109, 110, 0, 726, 728, 0, 727, 729, 111, 112,
	286, 113, 754, 114, 755, 756, 0, 115, 0, 116,
	0, 0, 0, 747, 118, 0, 119, 0, 0, 0,
	690, 120, 121, 122, 734, 735, 713, 0, 0, 123,
	124, 757, 0, 125, 0, 126, 0, 0, 319, 0,
	127, 745, 0, 252, 0, 128, 129, 130, 131, 741,
	743, 321, 0, 135, 0, 132, 0, 320, 133, 758,
	134, 759, 760, 761, 0, 724, 0, 322, 136, 323,
	137, 138, 0, 140, 139, 0, 746, 324, 141, 325,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	261, 147, 326, 149, 150, 152, 151, 685, 0, 714,
	742, 153, 762, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 264, 327, 159, 328, 736, 160, 161,
	162, 163, 0, 737, 164, 267, 165, 0, 166, 167,
	168, 169, 763, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 329,
	184, 185, 691, 186, 0, 190, 191, 192, 193, 0,
	270, 194, 195, 196, 730, 197, 187, 188, 198, 330,
	199, 764, 272, 200, 0, 206, 201, 202, 189, 203,
	205, 765, 204, 738, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 275, 766, 767, 0, 0, 213, 739,
	740, 712, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 731, 222, 0, 280, 223, 224, 225, 281,
	768, 1740, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 686, 0, 0, 0, 0, 0, 684, 0,
	0, 0, 0, 682, 683, 717, 706, 707, 704, 705,
	696, 0, 692, 0, 0, 0, 0, 695, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 733,
	699, 0, 0, 0, 95, 96, 97, 232, 748, 234,
	749, 98, 750, 751, 0, 99, 238, 239, 100, 702,
	732, 752, 753, 242, 0, 101, 744, 0, 725, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	318, 109, 110, 0, 726, 728, 0, 727, 729, 111,
	112, 286, 113, 754, 114, 755, 756, 0, 115, 0,
	116, 0, 0, 0, 747, 118, 0, 119, 0, 0,
	0, 690, 120, 121, 122, 734, 735, 713, 0, 0,
	123, 124, 757, 0, 125, 0, 126, 0, 0, 319,
	0, 127, 745, 0, 252, 0, 128, 129, 130, 131,
	741, 743, 321, 0, 135, 0, 132, 0, 320, 133,
	758, 134, 759, 760, 761, 0, 724, 0, 322, 136,
	323, 137, 138, 0, 140, 139, 0, 746, 324, 141,
	325, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 261, 147, 326, 149, 150, 152, 151, 685, 0,
	714, 742, 153, 762, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 264, 327, 159, 328, 736, 160,
	161, 162, 163, 0, 737, 164, 267, 165, 0, 166,
	167, 168, 169, 763, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	329, 184, 185, 691, 186, 0, 190, 191, 192, 193,
	0, 270, 194, 195, 196, 730, 197, 187, 188, 198,
	330, 199, 764, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 765, 204, 738, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 275, 766, 767, 0, 0, 213,
	739, 740, 712, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 731, 222, 0, 280, 223, 224, 225,
	281, 768, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 686, 0, 0, 0, 0, 0, 684,
	0, 0, 0, 0, 682, 683, 717, 706, 707, 704,
	705, 696, 0, 692, 1730, 0, 0, 0, 695, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	733, 699, 0, 0, 0, 95, 96, 97, 232, 748,
	234, 749, 98, 750, 751, 0, 99, 238, 239, 100,
	702, 732, 752, 753, 242, 0, 101, 744, 0, 725,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 318, 109, 110, 0, 726, 728, 0, 727, 729,
	111, 112, 286, 113, 754, 114, 755, 756, 783, 115,
	0, 116, 0, 0, 0, 747, 118, 0, 119, 0,
	0, 0, 690, 120, 121, 122, 734, 735, 713, 0,
	0, 123, 124, 757, 0, 125, 0, 126, 0, 0,
	319, 0, 127, 745, 0, 252, 0, 128, 129, 130,
	131, 741, 743, 321, 0, 135, 0, 132, 0, 320,
	133, 758, 134, 759, 760, 761, 0, 724, 0, 322,
	136, 323, 137, 138, 0, 140, 139, 0, 746, 324,
	141, 325, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 326, 149, 150, 152, 151, 685,
	0, 714, 742, 153, 762, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 264, 327, 159, 328, 736,
	160, 161, 162, 163, 0, 737, 164, 267, 165, 0,
	166, 167, 168, 169, 763, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 329, 184, 185, 691, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 730, 197, 187, 188,
	198, 330, 199, 764, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 765, 204, 738, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 275, 766, 767, 0, 0,
	213, 739, 740, 712, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 731, 222, 0, 280, 223, 224,
	225, 281, 768, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 686, 0, 0, 0, 0, 0,
	684, 0, 0, 0, 0, 682, 683, 717, 706, 707,
	704, 705, 696, 0, 692, 0, 0, 0, 0, 695,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 733, 699, 0, 0, 0, 95, 96, 97, 232,
	748, 234, 749, 98, 750, 751, 0, 99, 238, 239,
	100, 702, 732, 752, 753, 242, 0, 101, 744, 0,
	725, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 318, 109, 110, 0, 726, 728, 0, 727,
	729, 111, 112, 286, 113, 754, 114, 755, 756, 0,
	115, 0, 116, 0, 0, 0, 747, 118, 0, 119,
	0, 0, 0, 690, 120, 121, 122, 734, 735, 713,
	0, 0, 123, 124, 757, 0, 125, 0, 126, 0,
	1359, 319, 0, 127, 745, 0, 252, 0, 128, 129,
	130, 131, 741, 743, 321, 0, 135, 0, 132, 0,
	320, 133, 758, 134, 759, 760, 761, 0, 724, 0,
	322, 136, 323, 137, 138, 0, 140, 139, 0, 746,
	324, 141, 325, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 261, 147, 326, 149, 150, 152, 151,
	685, 0, 714, 742, 153, 762, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 264, 327, 159, 328,
	736, 160, 161, 162, 163, 0, 737, 164, 267, 165,
	0, 166, 167, 168, 169, 763, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 329, 184, 185, 691, 186, 0, 190, 191,
	192, 193, 0, 270, 194, 195, 196, 730, 197, 187,
	188, 198, 330, 199, 764, 272, 200, 0, 206, 201,
	202, 189, 203, 205, 765, 204, 738, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 275, 766, 767, 0,
	0, 213, 739, 740, 712, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 731, 222, 0, 280, 223,
	224, 225, 281, 768, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 686, 0, 0, 0, 0,
	0, 684, 0, 0, 0, 0, 682, 683, 717, 706,
	707, 704, 705, 696, 0, 692, 0, 0, 0, 0,
	695, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 733, 699, 0, 0, 0, 95, 96, 97,
	232, 748, 234, 749, 98, 750, 751, 0, 99, 238,
	239, 100, 702, 732, 752, 753, 242, 0, 101, 744,
	0, 725, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 318, 109, 110, 0, 726, 728, 0,
	727, 729, 111, 112, 286, 113, 754, 114, 755, 756,
	0, 115, 0, 116, 0, 0, 0, 747, 118, 0,
	119, 0, 0, 0, 690, 120, 121, 122, 734, 735,
	713, 0, 0, 123, 124, 757, 0, 125, 0, 126,
	0, 0, 319, 0, 127, 745, 0, 252, 0, 128,
	129, 130, 131, 741, 743, 321, 0, 135, 0, 132,
	0, 320, 133, 758, 134, 759, 760, 761, 0, 724,
	0, 322, 136, 323, 137, 138, 0, 140, 139, 0,
	746, 324, 141, 325, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 261, 147, 326, 149, 150, 152,
	151, 685, 0, 714, 742, 153, 762, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 264, 327, 159,
	328, 736, 160, 161, 162, 163, 0, 737, 164, 267,
	165, 0, 166, 167, 168, 169, 763, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 329, 184, 185, 691, 186, 0, 190,
	191, 192, 193, 0, 270, 194, 195, 196, 730, 197,
	187, 188, 198, 330, 199, 764, 272, 200, 0, 206,
	201, 202, 189, 203, 205, 765, 204, 738, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 275, 766, 767,
	0, 0, 213, 739, 740, 712, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 731, 222, 0, 280,
	223, 224, 225, 281, 768, 0, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 686, 0, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 682, 683, 717,
	706, 707, 704, 705, 696, 0, 692, 1302, 0, 0,
	0, 695, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 733, 699, 0, 0, 0, 95, 96,
	97, 232, 748, 234, 749, 98, 750, 751, 0, 99,
	238, 239, 100, 702, 732, 752, 753, 242, 0, 101,
	744, 0, 725, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 318, 109, 110, 0, 726, 728,
	0, 727, 729, 111, 112, 286, 113, 754, 114, 755,
	756, 0, 115, 0, 116, 0, 0, 0, 747, 118,
	0, 119, 0, 0, 0, 690, 120, 121, 122, 734,
	735, 713, 0, 0, 123, 124, 757, 0, 125, 0,
	126, 0, 0, 319, 0, 127, 745, 0, 252, 0,
	128, 129, 130, 131, 741, 743, 321, 0, 135, 0,
	132, 0, 320, 133, 758, 134, 759, 760, 761, 0,
	724, 0, 322, 136, 323, 137, 138, 0, 140, 139,
	0, 746, 324, 141, 325, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 261, 147, 326, 149, 150,
	152, 151, 685, 0, 714, 742, 153, 762, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 264, 327,
	159, 328, 736, 160, 161, 162, 163, 0, 737, 164,
	267, 165, 0, 166, 167, 168, 169, 763, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 329, 184, 185, 691, 186, 0,
	190, 191, 192, 193, 0, 270, 194, 195, 196, 730,
	197, 187, 188, 198, 330, 199, 764, 272, 200, 0,
	206, 201, 202, 189, 203, 205, 765, 204, 738, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 275, 766,
	767, 0, 0, 213, 739, 740, 712, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 731, 222, 0,
	280, 223, 224, 225, 281, 768, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 686, 0, 0,
	0, 0, 0, 684, 0, 0, 0, 0, 682, 683,
	680, 717, 706, 707, 704, 705, 696, 692, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 92, 93, 959,
	94, 0, 0, 0, 0, 733, 699, 0, 0, 0,
	95, 96, 97, 232, 748, 234, 749, 98, 750, 751,
	0, 99, 238, 239, 100, 702, 732, 752, 753, 242,
	0, 101, 744, 0, 725, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 318, 109, 110, 0,
	726, 728, 0, 727, 729, 111, 112, 286, 113, 754,
	114, 755, 756, 0, 115, 0, 116, 0, 0, 0,
	747, 118, 0, 119, 0, 0, 0, 690, 120, 121,
	122, 734, 735, 713, 0, 0, 123, 124, 757, 0,
	125, 0, 126, 0, 0, 319, 0, 127, 745, 0,
	252, 0, 128, 129, 130, 131, 741, 743, 321, 0,
	135, 0, 132, 0, 320, 133, 758, 134, 759, 760,
	761, 0, 724, 0, 322, 136, 323, 137, 138, 0,
	140, 139, 0, 746, 324, 141, 325, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 261, 147, 326,
	149, 150, 152, 151, 685, 0, 714, 742, 153, 762,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	264, 327, 159, 328, 736, 160, 161, 162, 163, 0,
	737, 164, 267, 165, 0, 166, 167, 168, 169, 763,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 329, 184, 185, 691,
	186, 0, 190, 191, 192, 193, 0, 270, 194, 195,
	196, 730, 197, 187, 188, 198, 330, 199, 764, 272,
	200, 0, 206, 201, 202, 189, 203, 205, 765, 204,
	738, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	275, 766, 767, 0, 0, 213, 739, 740, 712, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 731,
	222, 0, 280, 223, 224, 225, 281, 768, 0, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 686,
	0, 0, 0, 0, 0, 684, 0, 0, 0, 0,
	682, 683, 717, 706, 707, 704, 705, 696, 0, 692,
	0, 0, 0, 0, 695, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 733, 699, 0, 0,
	0, 95, 96, 97, 232, 748, 234, 749, 98, 750,
	751, 0, 99, 238, 239, 100, 702, 732, 752, 753,
	242, 0, 101, 744, 0, 725, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 318, 109, 2138,
	0, 726, 728, 0, 727, 729, 111, 112, 286, 113,
	754, 114, 755, 756, 0, 115, 0, 116, 0, 0,
	0, 747, 118, 0, 119, 0, 0, 0, 690, 120,
	121, 122, 734, 735, 713, 0, 0, 123, 124, 757,
	0, 125, 0, 126, 0, 0, 319, 0, 127, 745,
	0, 252, 0, 128, 129, 130, 131, 741, 743, 321,
	0, 135, 0, 132, 0, 320, 133, 758, 134, 759,
	760, 761, 0, 724, 0, 322, 136, 323, 137, 138,
	0, 140, 139, 0, 746, 324, 141, 325, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 261, 147,
	326, 149, 150, 152, 151, 685, 0, 714, 742, 153,
	762, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 264, 327, 159, 328, 736, 160, 161, 162, 163,
	0, 737, 164, 267, 165, 0, 166, 167, 168, 169,
	763, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 329, 184, 185,
	691, 186, 0, 190, 191, 192, 193, 0, 270, 194,
	195, 196, 730, 197, 187, 188, 198, 330, 199, 764,
	272, 200, 0, 206, 201, 202, 189, 203, 205, 765,
	204, 738, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 275, 766, 767, 0, 0, 213, 739, 740, 712,
	214, 215, 2137, 217, 0, 0, 218, 219, 220, 221,
	731, 222, 0, 280, 223, 224, 225, 281, 768, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	686, 0, 0, 0, 0, 0, 684, 0, 0, 0,
	0, 682, 683, 717, 706, 707, 704, 705, 696, 0,
	692, 0, 0, 0, 0, 695, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 733, 699, 0,
	0, 0, 95, 96, 97, 2136, 748, 234, 749, 98,
	750, 751, 0, 99, 238, 239, 100, 702, 732, 752,
	753, 242, 0, 101, 744, 0, 725, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 318, 109,
	2138, 0, 726, 728, 0, 727, 729, 111, 112, 286,
	113, 754, 114, 755, 756, 0, 115, 0, 116, 0,
	0, 0, 747, 118, 0, 119, 0, 0, 0, 690,
	120, 121, 122, 734, 735, 713, 0, 0, 123, 124,
	757, 0, 125, 0, 126, 0, 0, 319, 0, 127,
	745, 0, 252, 0, 128, 129, 130, 131, 741, 743,
	321, 0, 135, 0, 132, 0, 320, 133, 758, 134,
	759, 760, 761, 0, 724, 0, 322, 136, 323, 137,
	138, 0, 140, 139, 0, 746, 324, 141, 325, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 326, 149, 150, 152, 151, 685, 0, 714, 742,
	153, 762, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 264, 327, 159, 328, 736, 160, 161, 162,
	163, 0, 737, 164, 267, 165, 0, 166, 167, 168,
	169, 763, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 329, 184,
	185, 691, 186, 0, 190, 191, 192, 193, 0, 270,
	194, 195, 196, 730, 197, 187, 188, 198, 330, 199,
	764, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	765, 204, 738, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 766, 767, 0, 0, 213, 739, 740,
	712, 214, 215, 2137, 217, 0, 0, 218, 219, 220,
	221, 731, 222, 0, 280, 223, 224, 225, 281, 768,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 686, 0, 0, 0, 0, 0, 684, 0, 0,
	0, 0, 682, 683, 717, 706, 707, 704, 705, 696,
	0, 692, 0, 0, 0, 0, 695, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 733, 699,
	0, 0, 0, 95, 96, 97, 232, 748, 234, 749,
	98, 750, 751, 0, 99, 238, 239, 100, 702, 732,
	752, 753, 242, 0, 101, 744, 0, 725, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 318,
	109, 110, 0, 726, 728, 0, 727, 729, 111, 112,
	286, 113, 754, 114, 755, 756, 0, 115, 0, 116,
	0, 0, 0, 747, 118, 0, 119, 0, 0, 0,
	690, 120, 121, 122, 734, 735, 713, 0, 0, 123,
	124, 757, 0, 125, 0, 126, 0, 0, 319, 0,
	127, 745, 0, 252, 0, 128, 129, 130, 131, 741,
	743, 321, 0, 135, 0, 132, 0, 320, 133, 758,
	134, 759, 760, 761, 0, 724, 0, 322, 136, 323,
	137, 138, 0, 140, 139, 0, 746, 324, 141, 325,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	261, 147, 326, 149, 150, 152, 151, 685, 0, 714,
	742, 153, 762, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 264, 327, 159, 328, 736, 160, 161,
	162, 163, 0, 737, 164, 267, 165, 0, 166, 167,
	168, 169, 763, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 329,
	184, 185, 691, 186, 0, 190, 191, 192, 193, 0,
	270, 194, 195, 196, 730, 197, 187, 188, 198, 330,
	199, 764, 272, 200, 0, 206, 201, 202, 189, 203,
	205, 765, 204, 738, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 275, 766, 767, 0, 0, 213, 739,
	740, 712, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 731, 222, 0, 280, 223, 224, 225, 281,
	768, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 686, 0, 0, 0, 0, 0, 684, 0,
	0, 0, 0, 682, 683, 1331, 706, 707, 704, 705,
	696, 0, 692, 0, 0, 0, 0, 695, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 733,
	699, 0, 0, 0, 95, 96, 97, 232, 748, 234,
	749, 98, 750, 751, 0, 99, 238, 239, 100, 702,
	732, 752, 753, 242, 0, 101, 744, 0, 725, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	318, 109, 110, 0, 726, 728, 0, 727, 729, 111,
	112, 286, 113, 754, 1334, 755, 756, 0, 115, 0,
	116, 0, 0, 0, 747, 118, 0, 119, 0, 0,
	0, 690, 120, 121, 122, 734, 735, 713, 0, 0,
	123, 124, 757, 0, 125, 0, 126, 0, 0, 319,
	0, 127, 745, 0, 252, 0, 128, 129, 1335, 131,
	741, 743, 321, 0, 135, 0, 132, 0, 320, 133,
	758, 134, 759, 760, 761, 0, 724, 0, 322, 136,
	323, 137, 138, 0, 140, 139, 0, 746, 324, 141,
	325, 0, 142, 0, 0, 143, 0, 144, 1336, 1333,
	148, 261, 147, 326, 149, 150, 152, 151, 685, 0,
	714, 742, 153, 762, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 264, 327, 159, 328, 736, 160,
	161, 162, 163, 0, 737, 164, 267, 165, 0, 166,
	167, 168, 169, 763, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	329, 184, 185, 691, 186, 0, 190, 191, 192, 1337,
	0, 270, 194, 195, 196, 730, 197, 187, 188, 198,
	330, 199, 764, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 765, 204, 738, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 275, 766, 767, 0, 0, 213,
	739, 740, 712, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 731, 222, 0, 280, 223, 224, 225,
	281, 768, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 1332, 230, 686, 0, 0, 0, 0, 0, 684,
	0, 0, 0, 0, 682, 683, 717, 706, 707, 704,
	705, 696, 0, 692, 0, 0, 0, 0, 695, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	733, 699, 0, 0, 0, 95, 96, 97, 232, 748,
	234, 749, 98, 750, 751, 0, 99, 238, 239, 100,
	702, 732, 752, 753, 242, 0, 101, 744, 0, 725,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 318, 109, 110, 0, 726, 728, 0, 727, 729,
	111, 112, 286, 113, 754, 114, 755, 756, 0, 115,
	0, 116, 0, 0, 0, 747, 118, 0, 119, 0,
	0, 0, 690, 120, 121, 122, 734, 735, 713, 0,
	0, 123, 124, 757, 0, 125, 0, 126, 0, 0,
	319, 0, 127, 745, 0, 252, 0, 128, 129, 130,
	131, 741, 743, 321, 0, 135, 0, 132, 0, 320,
	133, 758, 134, 759, 760, 761, 0, 724, 0, 322,
	136, 323, 137, 138, 0, 140, 139, 0, 746, 324,
	141, 325, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 326, 149, 150, 152, 151, 0,
	0, 714, 742, 153, 762, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 264, 327, 159, 328, 736,
	160, 161, 162, 163, 0, 737, 164, 267, 165, 0,
	166, 167, 168, 169, 763, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 329, 184, 185, 1349, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 730, 197, 187, 188,
	198, 330, 199, 764, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 765, 204, 738, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 275, 766, 767, 0, 0,
	213, 739, 740, 712, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 731, 222, 0, 280, 223, 224,
	225, 281, 768, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 0, 0, 0, 0, 0, 0,
	1347, 0, 0, 0, 0, 1345, 1346, 717, 706, 707,
	704, 705, 696, 0, 1348, 0, 0, 0, 0, 695,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 733, 699, 0, 0, 0, 95, 96, 97, 232,
	748, 234, 749, 98, 750, 751, 0, 99, 238, 239,
	100, 0, 732, 752, 753, 242, 0, 101, 744, 0,
	725, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 318, 109, 110, 0, 726, 728, 0, 727,
	729, 111, 112, 286, 113, 754, 114, 755, 756, 0,
	115, 0, 116, 0, 0, 0, 747, 118, 0, 119,
	0, 0, 0, 247, 120, 121, 122, 734, 735, 713,
	0, 0, 123, 124, 757, 0, 125, 0, 126, 0,
	0, 319, 0, 127, 745, 0, 252, 0, 128, 129,
	130, 131, 741, 743, 321, 0, 135, 0, 132, 0,
	320, 133, 758, 134, 759, 760, 761, 0, 724, 0,
	322, 136, 323, 137, 138, 0, 140, 139, 0, 746,
	324, 141, 325, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 261, 147, 326, 149, 150, 152, 151,
	0, 0, 714, 742, 153, 762, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 264, 327, 159, 328,
	736, 160, 161, 162, 163, 0, 737, 164, 267, 165,
	0, 166, 167, 168, 169, 763, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 329, 184, 185, 1349, 186, 0, 190, 191,
	192, 193, 0, 270, 194, 195, 196, 730, 197, 187,
	188, 198, 330, 199, 764, 272, 200, 0, 206, 201,
	202, 189, 203, 205, 765, 204, 738, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 275, 766, 767, 0,
	0, 213, 739, 740, 712, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 731, 222, 0, 280, 223,
	224, 225, 281, 768, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 0, 0, 717, 706, 707,
	704, 705, 696, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 1348, 94, 0, 0, 0,
	695, 733, 699, 0, 0, 0, 95, 96, 97, 0,
	748, 234, 749, 98, 750, 751, 0, 99, 238, 239,
	100, 702, 732, 752, 753, 242, 0, 101, 744, 0,
	725, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 318, 109, 2138, 0, 726, 728, 0, 727,
	729, 111, 112, 286, 113, 754, 114, 755, 756, 0,
	115, 0, 116, 0, 0, 0, 747, 118, 0, 119,
	0, 0, 0, 690, 120, 121, 122, 734, 735, 713,
	0, 0, 123, 124, 757, 0, 125, 0, 126, 0,
	0, 319, 0, 127, 745, 0, 252, 0, 128, 129,
	130, 131, 741, 743, 0, 0, 135, 0, 132, 0,
	320, 133, 758, 134, 759, 760, 761, 0, 724, 0,
	0, 136, 323, 137, 138, 0, 140, 139, 0, 746,
	324, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 261, 147, 326, 149, 150, 152, 151,
	685, 0, 714, 742, 153, 762, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 264, 327, 159, 328,
	736, 160, 161, 162, 163, 0, 737, 164, 267, 165,
	0, 166, 167, 168, 169, 763, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 329, 184, 185, 691, 186, 0, 190, 191,
	192, 193, 0, 270, 194, 195, 196, 730, 197, 187,
	188, 198, 0, 199, 764, 272, 200, 0, 206, 201,
	202, 189, 203, 205, 765, 204, 738, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 275, 766, 767, 0,
	0, 213, 739, 740, 712, 214, 215, 2137, 217, 0,
	0, 218, 219, 220, 221, 731, 222, 0, 280, 223,
	224, 225, 281, 768, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 717, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 682, 683, 0, 0,
	0, 92, 93, 0, 94, 692, 0, 0, 0, 733,
	695, 0, 0, 0, 95, 96, 97, 232, 233, 234,
	235, 98, 236, 237, 0, 99, 238, 239, 100, 0,
	732, 240, 241, 242, 0, 101, 744, 0, 725, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	318, 109, 110, 0, 726, 728, 0, 727, 729, 111,
	112, 286, 113, 244, 114, 245, 246, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 247, 120, 121, 122, 734, 735, 0, 0, 0,
	123, 124, 250, 0, 125, 0, 126, 0, 0, 319,
	0, 127, 745, 0, 252, 0, 128, 129, 130, 131,
	741, 743, 321, 0, 135, 0, 132, 0, 320, 133,
	255, 134, 256, 257, 258, 0, 259, 0, 322, 136,
	323, 137, 138, 0, 140, 139, 0, 746, 324, 141,
	325, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 261, 147, 326, 149, 150, 152, 151, 0, 0,
	0, 742, 153, 263, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 264, 327, 159, 328, 736, 160,
	161, 162, 163, 0, 737, 164, 267, 165, 0, 166,
	167, 168, 169, 268, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	329, 184, 185, 269, 186, 0, 190, 191, 192, 193,
	0, 270, 194, 195, 196, 730, 197, 187, 188, 198,
	330, 199, 271, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 273, 204, 738, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 275, 276, 277, 0, 0, 213,
	739, 740, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 731, 222, 0, 280, 223, 224, 225,
	281, 282, 0, 0, 226, 501, 0, 0, 0, 227,
	228, 229, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 231,
	0, 0, 0, 1622, 95, 96, 97, 232, 233, 234,
	235, 98, 236, 237, 0, 99, 238, 239, 100, 0,
	0, 240, 241, 242, 0, 101, 243, 0, 317, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	318, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 286, 113, 244, 114, 245, 246, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 247, 120, 121, 122, 248, 249, 0, 0, 0,
	123, 124, 250, 0, 125, 0, 126, 0, 0, 319,
	0, 127, 251, 0, 252, 0, 128, 129, 130, 131,
	253, 254, 321, 0, 135, 0, 132, 0, 320, 133,
	255, 134, 256, 257, 258, 0, 259, 0, 322, 136,
	323, 137, 138, 0, 140, 139, 0, 260, 324, 141,
	325, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 261, 147, 326, 149, 150, 152, 151, 0, 0,
	0, 262, 153, 263, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 264, 327, 159, 328, 265, 160,
	161, 162, 163, 0, 266, 164, 267, 165, 0, 166,
	167, 168, 169, 268, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	329, 184, 185, 269, 186, 0, 190, 191, 192, 193,
	73, 270, 194, 195, 196, 0, 197, 187, 188, 198,
	330, 199, 271, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 273, 204, 274, 0, 207, 75, 208, 209,
	210, 211, 212, 0, 275, 276, 277, 0, 0, 213,
	278, 279, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 280, 223, 224, 225,
	581, 282, 0, 0, 226, 0, 0, 0, 71, 227,
	228, 229, 230, 0, 72, 501, 498, 0, 499, 494,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 70, 94, 0, 0, 0, 0, 231,
	0, 0, 0, 0, 95, 96, 97, 232, 233, 234,
	235, 98, 236, 237, 0, 99, 238, 239, 100, 0,
	0, 240, 241, 242, 0, 101, 243, 0, 317, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	318, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 286, 113, 244, 114, 245, 246, 906, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 247, 120, 121, 122, 248, 249, 491, 0, 0,
	123, 124, 250, 0, 125, 0, 126, 0, 0, 319,
	0, 127, 251, 0, 252, 0, 128, 129, 130, 131,
	253, 254, 321, 0, 135, 0, 132, 0, 320, 133,
	255, 134, 256, 257, 258, 0, 259, 0, 322, 136,
	323, 137, 138, 0, 140, 139, 0, 260, 324, 141,
	325, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 261, 147, 326, 149, 150, 152, 151, 0, 0,
	0, 262, 153, 263, 154, 155, 0, 156, 492, 0,
	157, 0, 0, 158, 264, 327, 159, 328, 265, 160,
	161, 162, 163, 0, 266, 164, 267, 165, 0, 166,
	167, 168, 169, 268, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	329, 184, 185, 269, 186, 0, 190, 191, 192, 193,
	0, 270, 194, 195, 196, 0, 197, 187, 188, 198,
	330, 199, 271, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 273, 204, 274, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 275, 276, 277, 0, 0, 213,
	278, 279, 490, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 280, 223, 224, 225,
	281, 282, 501, 498, 226, 499, 494, 489, 0, 227,
	228, 229, 230, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 500, 495, 231, 0, 0, 0,
	0, 95, 96, 97, 232, 233, 234, 235, 98, 236,
	237, 0, 99, 238, 239, 100, 0, 0, 240, 241,
	242, 0, 101, 243, 0, 317, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 318, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 286, 113,
	244, 114, 245, 246, 903, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 247, 120,
	121, 122, 248, 249, 491, 0, 0, 123, 124, 250,
	0, 125, 0, 126, 0, 0, 319, 0, 127, 251,
	0, 252, 0, 128, 129, 130, 131, 253, 254, 321,
	0, 135, 0, 132, 0, 320, 133, 255, 134, 256,
	257, 258, 0, 259, 0, 322, 136, 323, 137, 138,
	0, 140, 139, 0, 260, 324, 141, 325, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 261, 147,
	326, 149, 150, 152, 151, 0, 0, 0, 262, 153,
	263, 154, 155, 0, 156, 492, 0, 157, 0, 0,
	158, 264, 327, 159, 328, 265, 160, 161, 162, 163,
	0, 266, 164, 267, 165, 0, 166, 167, 168, 169,
	268, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 329, 184, 185,
	269, 186, 0, 190, 191, 192, 193, 0, 270, 194,
	195, 196, 0, 197, 187, 188, 198, 330, 199, 271,
	272, 200, 0, 206, 201, 202, 189, 203, 205, 273,
	204, 274, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 275, 276, 277, 0, 0, 213, 278, 279, 490,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 280, 223, 224, 225, 281, 282, 501,
	498, 226, 499, 494, 489, 0, 227, 228, 229, 230,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 500, 495, 231, 0, 0, 0, 0, 95, 96,
	97, 232, 233, 234, 235, 98, 236, 237, 0, 99,
	238, 239, 100, 0, 0, 240, 241, 242, 0, 101,
	243, 0, 317, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 318, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 286, 113, 244, 114, 245,
	246, 610, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 247, 120, 121, 122, 248,
	249, 491, 0, 0, 123, 124, 250, 0, 125, 0,
	126, 0, 0, 319, 0, 127, 251, 0, 252, 0,
	128, 129, 130, 131, 253, 254, 321, 0, 135, 0,
	132, 0, 320, 133, 255, 134, 256, 257, 258, 0,
	259, 0, 322, 136, 323, 137, 138, 0, 140, 139,
	0, 260, 324, 141, 325, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 261, 147, 326, 149, 150,
	152, 151, 0, 0, 0, 262, 153, 263, 154, 155,
	0, 156, 492, 0, 157, 0, 0, 158, 264, 327,
	159, 328, 265, 160, 161, 162, 163, 0, 266, 164,
	267, 165, 0, 166, 167, 168, 169, 268, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 329, 184, 185, 269, 186, 0,
	190, 191, 192, 193, 0, 270, 194, 195, 196, 0,
	197, 187, 188, 198, 330, 199, 271, 272, 200, 0,
	206, 201, 202, 189, 203, 205, 273, 204, 274, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 275, 276,
	277, 0, 0, 213, 278, 279, 490, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	280, 223, 224, 225, 281, 282, 501, 498, 226, 499,
	494, 489, 0, 227, 228, 229, 230, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 500, 495,
	231, 0, 0, 0, 0, 95, 96, 97, 232, 233,
	234, 235, 98, 236, 237, 0, 99, 238, 239, 100,
	0, 0, 240, 241, 242, 0, 101, 243, 0, 317,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 318, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 286, 113, 244, 114, 245, 246, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 247, 120, 121, 122, 248, 249, 491, 0,
	0, 123, 124, 250, 0, 125, 0, 126, 0, 0,
	319, 0, 127, 251, 0, 252, 0, 128, 129, 130,
	131, 253, 254, 321, 0, 135, 0, 132, 0, 320,
	133, 255, 134, 256, 257, 258, 0, 259, 0, 322,
	136, 323, 137, 138, 0, 140, 139, 0, 260, 324,
	141, 325, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 326, 149, 150, 152, 151, 0,
	0, 0, 262, 153, 263, 154, 155, 0, 156, 492,
	0, 157, 0, 0, 158, 264, 327, 159, 328, 265,
	160, 161, 162, 163, 0, 266, 164, 267, 165, 0,
	166, 167, 168, 169, 268, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 329, 184, 185, 269, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 0, 197, 187, 188,
	198, 330, 199, 271, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 273, 204, 274, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 275, 276, 277, 0, 0,
	213, 278, 279, 490, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 280, 223, 224,
	225, 281, 282, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 500, 495, 231, 0, 0,
	0, 0, 95, 96, 97, 232, 233, 234, 235, 98,
	236, 237, 0, 99, 238, 239, 100, 0, 0, 240,
	241, 242, 0, 101, 243, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 286,
	113, 244, 114, 245, 246, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 247,
	120, 121, 122, 248, 249, 0, 0, 0, 123, 124,
	250, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	251, 0, 252, 0, 128, 129, 130, 131, 253, 254,
	0, 0, 135, 0, 132, 0, 0, 133, 255, 134,
	256, 257, 258, 0, 259, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 260, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 262,
	153, 263, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 264, 0, 159, 0, 265, 160, 161, 162,
	163, 0, 266, 164, 267, 165, 0, 166, 167, 168,
	169, 268, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 269, 186, 0, 190, 191, 192, 193, 73, 270,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	271, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	273, 204, 274, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 275, 276, 277, 0, 0, 213, 278, 279,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 280, 223, 224, 225, 581, 282,
	0, 0, 226, 89, 0, 0, 71, 227, 228, 229,
	230, 0, 72, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 231, 0, 0,
	0, 70, 95, 96, 97, 232, 233, 234, 235, 98,
	236, 237, 0, 99, 238, 239, 100, 0, 0, 240,
	241, 242, 0, 101, 243, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 286,
	113, 244, 114, 245, 246, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 247,
	120, 121, 122, 248, 249, 0, 0, 0, 123, 124,
	250, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	251, 0, 252, 0, 128, 129, 130, 131, 253, 254,
	0, 0, 135, 0, 132, 0, 0, 133, 255, 134,
	256, 257, 258, 0, 259, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 260, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 262,
	153, 263, 154, 155, 0, 156, 0, 535, 157, 0,
	0, 158, 264, 0, 159, 0, 265, 160, 161, 162,
	163, 0, 266, 164, 267, 165, 0, 166, 167, 168,
	169, 268, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 269, 186, 0, 190, 191, 192, 193, 0, 270,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	271, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	273, 204, 274, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 276, 277, 0, 0, 213, 278, 279,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 280, 223, 224, 225, 281, 282,
	0, 0, 226, 89, 0, 0, 0, 227, 228, 229,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 231, 0, 1226,
	0, 1231, 95, 96, 97, 232, 233, 234, 235, 98,
	236, 237, 0, 99, 238, 239, 100, 0, 0, 240,
	241, 242, 0, 101, 243, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 286,
	113, 244, 114, 245, 246, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 247,
	120, 121, 122, 248, 249, 0, 0, 0, 123, 124,
	250, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	251, 0, 252, 0, 128, 129, 130, 131, 253, 254,
	0, 0, 135, 0, 132, 0, 0, 133, 255, 134,
	256, 257, 258, 0, 259, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 260, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 262,
	153, 263, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 264, 0, 159, 0, 265, 160, 161, 162,
	163, 0, 266, 164, 267, 165, 0, 166, 167, 168,
	169, 268, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 269, 186, 0, 190, 191, 192, 193, 0, 270,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	271, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	273, 204, 274, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 276, 277, 0, 0, 213, 278, 279,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 280, 223, 224, 225, 281, 282,
	0, 0, 226, 0, 89, 0, 0, 227, 228, 229,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 231, 0,
	0, 0, 812, 95, 96, 97, 232, 233, 234, 235,
	98, 236, 237, 0, 99, 238, 239, 100, 0, 0,
	240, 241, 242, 0, 101, 243, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	286, 113, 244, 114, 245, 246, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	247, 120, 121, 122, 248, 249, 0, 0, 0, 123,
	124, 250, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 251, 0, 252, 0, 128, 129, 130, 131, 253,
	254, 0, 0, 135, 0, 132, 0, 0, 133, 255,
	134, 256, 257, 258, 0, 259, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 260, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	261, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	262, 153, 263, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 264, 0, 159, 0, 265, 160, 161,
	162, 163, 0, 266, 164, 267, 165, 0, 166, 167,
	168, 169, 268, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 269, 186, 0, 190, 191, 192, 193, 0,
	270, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 271, 272, 200, 0, 206, 201, 202, 189, 203,
	205, 273, 204, 274, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 275, 276, 277, 0, 0, 213, 278,
	279, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 280, 223, 224, 225, 281,
	282, 0, 0, 226, 89, 0, 0, 0, 227, 228,
	229, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 231, 0,
	0, 0, 1135, 95, 96, 97, 232, 233, 234, 235,
	98, 236, 237, 0, 99, 238, 239, 100, 0, 0,
	240, 241, 242, 0, 101, 243, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	286, 113, 244, 114, 245, 246, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	247, 120, 121, 122, 248, 249, 0, 0, 0, 123,
	124, 250, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 251, 0, 252, 0, 128, 129, 130, 131, 253,
	254, 0, 0, 135, 0, 132, 0, 0, 133, 255,
	134, 256, 257, 258, 0, 259, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 260, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	261, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	262, 153, 263, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 264, 0, 159, 0, 265, 160, 161,
	162, 163, 0, 266, 164, 267, 165, 0, 166, 167,
	168, 169, 268, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 269, 186, 0, 190, 191, 192, 193, 0,
	270, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 271, 272, 200, 0, 206, 201, 202, 189, 203,
	205, 273, 204, 274, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 275, 276, 277, 0, 0, 213, 278,
	279, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 280, 223, 224, 225, 281,
	282, 0, 0, 226, 89, 0, 0, 0, 227, 228,
	229, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 231, 0,
	0, 0, 1747, 95, 96, 97, 232, 233, 234, 235,
	98, 236, 237, 0, 99, 238, 239, 100, 0, 0,
	240, 241, 242, 0, 101, 243, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	286, 113, 244, 114, 245, 246, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	247, 120, 121, 122, 248, 249, 0, 0, 0, 123,
	124, 250, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 251, 0, 252, 0, 128, 129, 130, 131, 253,
	254, 0, 0, 135, 0, 132, 0, 0, 133, 255,
	134, 256, 257, 258, 0, 259, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 260, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	261, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	262, 153, 263, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 264, 0, 159, 0, 265, 160, 161,
	162, 163, 0, 266, 164, 267, 165, 0, 166, 167,
	168, 169, 268, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 269, 186, 0, 190, 191, 192, 193, 0,
	270, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 271, 272, 200, 0, 206, 201, 202, 189, 203,
	205, 273, 204, 274, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 275, 276, 277, 0, 0, 213, 278,
	279, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 280, 223, 224, 225, 281,
	282, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 717, 706, 707, 704, 705, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 779, 0, 0, 0, 231, 0, 0, 0,
	0, 95, 96, 97, 232, 748, 234, 749, 98, 750,
	751, 0, 99, 238, 239, 100, 0, 0, 752, 753,
	242, 0, 101, 243, 0, 317, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 318, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 286, 113,
	754, 114, 755, 756, 0, 115, 0, 116, 0, 0,
	0, 747, 118, 0, 119, 0, 0, 0, 247, 120,
	121, 122, 248, 249, 713, 0, 0, 123, 124, 757,
	0, 125, 0, 126, 0, 0, 319, 0, 127, 251,
	0, 252, 0, 128, 129, 130, 131, 253, 254, 321,
	0, 135, 0, 132, 0, 320, 133, 758, 134, 759,
	760, 761, 0, 724, 0, 322, 136, 323, 137, 138,
	0, 140, 139, 0, 260, 324, 141, 325, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 261, 147,
	326, 149, 150, 152, 151, 0, 0, 714, 262, 153,
	762, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 264, 327, 159, 328, 265, 160, 161, 162, 163,
	0, 266, 164, 267, 165, 0, 166, 167, 168, 169,
	763, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 329, 184, 185,
	269, 186, 0, 190, 191, 192, 193, 0, 270, 194,
	195, 196, 0, 197, 187, 188, 198, 330, 199, 764,
	272, 200, 0, 206, 201, 202, 189, 203, 205, 765,
	204, 274, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 275, 766, 767, 0, 0, 213, 278, 279, 712,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 280, 223, 224, 225, 281, 768, 501,
	498, 226, 0, 0, 616, 0, 227, 228, 229, 230,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 231, 0, 0, 0, 0, 95, 96,
	97, 232, 233, 234, 235, 98, 236, 237, 0, 99,
	238, 239, 100, 0, 0, 240, 241, 242, 0, 101,
	243, 0, 317, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 318, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 286, 113, 244, 114, 245,
	246, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 247, 120, 121, 122, 248,
	249, 0, 0, 0, 123, 124, 250, 0, 125, 0,
	126, 0, 0, 319, 0, 127, 251, 0, 252, 0,
	128, 129, 130, 131, 253, 254, 321, 0, 135, 0,
	132, 0, 320, 133, 255, 134, 256, 257, 258, 0,
	259, 0, 322, 136, 323, 137, 138, 0, 140, 139,
	0, 260, 324, 141, 325, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 261, 147, 326, 149, 150,
	152, 151, 0, 0, 0, 262, 153, 263, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 264, 327,
	159, 328, 265, 160, 161, 162, 163, 0, 266, 164,
	267, 165, 0, 166, 167, 168, 169, 268, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 329, 184, 185, 269, 186, 0,
	190, 191, 192, 193, 0, 270, 194, 195, 196, 0,
	197, 187, 188, 198, 330, 199, 271, 272, 200, 0,
	206, 201, 202, 189, 203, 205, 273, 204, 274, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 275, 276,
	277, 0, 0, 213, 278, 279, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	280, 223, 224, 225, 281, 282, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 95, 96, 97, 232, 233,
	234, 235, 98, 236, 237, 0, 99, 238, 239, 100,
	0, 0, 240, 241, 242, 0, 101, 243, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 85, 113, 244, 114, 245, 246, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 247, 120, 121, 122, 248, 249, 0, 0,
	0, 123, 124, 250, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 251, 0, 252, 0, 128, 129, 130,
	131, 253, 254, 0, 0, 135, 0, 132, 0, 0,
	133, 255, 134, 256, 257, 258, 0, 259, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 260, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 262, 153, 263, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 264, 0, 159, 0, 265,
	160, 161, 162, 163, 0, 266, 164, 267, 165, 0,
	166, 167, 168, 169, 268, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 269, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 271, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 273, 204, 274, 0, 207, 84, 208,
	209, 210, 211, 212, 0, 275, 276, 277, 0, 0,
	213, 278, 279, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 280, 223, 224,
	225, 281, 282, 0, 0, 226, 501, 498, 0, 0,
	227, 228, 229, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 88, 0, 0,
	231, 0, 0, 0, 0, 95, 96, 97, 232, 233,
	234, 235, 98, 236, 237, 0, 99, 238, 239, 100,
	0, 0, 240, 241, 242, 0, 101, 243, 0, 317,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 318, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 286, 113, 244, 114, 245, 246, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 247, 120, 121, 122, 248, 249, 0, 0,
	0, 123, 124, 250, 0, 125, 0, 126, 0, 0,
	319, 0, 127, 251, 0, 252, 0, 128, 129, 130,
	131, 253, 254, 321, 0, 135, 0, 132, 0, 320,
	133, 255, 134, 256, 257, 258, 0, 259, 0, 322,
	136, 323, 137, 138, 0, 140, 139, 0, 260, 324,
	141, 325, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 326, 149, 150, 152, 151, 0,
	0, 0, 262, 153, 263, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 264, 327, 159, 328, 265,
	160, 161, 162, 163, 0, 266, 164, 267, 165, 0,
	166, 167, 168, 169, 268, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 329, 184, 185, 269, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 0, 197, 187, 188,
	198, 330, 199, 271, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 273, 204, 274, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 275, 276, 277, 0, 0,
	213, 278, 279, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 280, 223, 224,
	225, 281, 282, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 231, 0, 0,
	0, 0, 95, 96, 97, 232, 233, 234, 235, 98,
	236, 237, 0, 99, 238, 239, 100, 0, 0, 240,
	241, 242, 0, 101, 243, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 286,
	113, 244, 114, 245, 246, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 247,
	120, 121, 122, 248, 249, 0, 0, 0, 123, 124,
	250, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	251, 0, 252, 0, 128, 129, 130, 131, 253, 254,
	0, 0, 135, 0, 132, 0, 0, 133, 255, 134,
	256, 257, 258, 0, 259, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 260, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 262,
	153, 263, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 264, 0, 159, 0, 265, 160, 161, 162,
	163, 0, 266, 164, 267, 165, 0, 166, 167, 168,
	169, 268, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 269, 186, 0, 190, 191, 192, 193, 0, 270,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	271, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	273, 204, 274, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 276, 277, 0, 0, 213, 278, 279,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 280, 223, 224, 225, 281, 282,
	0, 501, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 88, 231, 0, 0, 0, 0,
	95, 96, 97, 232, 233, 234, 235, 98, 236, 237,
	0, 99, 238, 239, 100, 0, 0, 240, 241, 242,
	0, 101, 243, 0, 317, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 318, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 286, 113, 244,
	114, 245, 246, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 247, 120, 121,
	122, 248, 249, 0, 0, 0, 123, 124, 250, 0,
	125, 0, 126, 0, 0, 319, 0, 127, 251, 0,
	252, 0, 128, 129, 130, 131, 253, 254, 321, 0,
	135, 0, 132, 0, 320, 133, 255, 134, 256, 257,
	258, 0, 259, 0, 322, 136, 323, 137, 138, 0,
	140, 139, 0, 260, 324, 141, 325, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 261, 147, 326,
	149, 150, 152, 151, 0, 0, 0, 262, 153, 263,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	264, 327, 159, 328, 265, 160, 161, 162, 163, 0,
	266, 164, 267, 165, 0, 166, 167, 168, 169, 268,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 329, 184, 185, 269,
	186, 0, 190, 191, 192, 193, 0, 270, 194, 195,
	196, 0, 197, 187, 188, 198, 330, 199, 271, 272,
	200, 0, 206, 201, 202, 189, 203, 205, 273, 204,
	274, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	275, 276, 277, 0, 0, 213, 278, 279, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 280, 223, 224, 225, 281, 282, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 95, 96, 97,
	232, 233, 234, 235, 98, 236, 237, 0, 99, 238,
	239, 100, 0, 0, 240, 241, 242, 1092, 101, 243,
	0, 0, 0, 102, 103, 104, 0, 105, 1090, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 286, 113, 244, 114, 245, 246,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 247, 120, 121, 122, 248, 249,
	0, 1198, 0, 123, 124, 250, 0, 125, 0, 126,
	1095, 0, 0, 0, 127, 251, 0, 252, 0, 128,
	129, 130, 131, 253, 254, 0, 0, 135, 1196, 132,
	0, 0, 133, 255, 134, 256, 257, 258, 0, 259,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	260, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 261, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 262, 153, 263, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 264, 0, 159,
	0, 265, 160, 161, 162, 163, 0, 266, 164, 267,
	165, 1094, 166, 167, 168, 169, 268, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 269, 186, 0, 190,
	191, 192, 193, 0, 270, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 271, 272, 200, 0, 206,
	201, 202, 189, 203, 205, 273, 204, 274, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 275, 276, 277,
	0, 0, 213, 278, 279, 0, 214, 215, 216, 217,
	0, 1197, 218, 219, 220, 221, 0, 222, 0, 280,
	223, 224, 225, 281, 282, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 231,
	0, 0, 0, 0, 95, 96, 97, 232, 233, 234,
	235, 98, 236, 237, 0, 99, 238, 239, 100, 0,
	0, 240, 241, 242, 1092, 101, 243, 0, 0, 1087,
	102, 103, 104, 0, 105, 1090, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 286, 113, 244, 114, 245, 246, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 247, 120, 121, 122, 248, 249, 0, 0, 0,
	123, 124, 250, 0, 125, 0, 126, 1095, 0, 0,
	0, 127, 251, 0, 252, 0, 128, 129, 130, 131,
	1086, 254, 0, 0, 135, 0, 132, 0, 0, 133,
	255, 134, 256, 257, 258, 0, 259, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 260, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 261, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 262, 153, 263, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 264, 0, 159, 0, 265, 160,
	161, 162, 163, 0, 266, 164, 267, 165, 1094, 166,
	167, 168, 169, 268, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 269, 186, 0, 190, 191, 192, 193,
	0, 270, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 271, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 273, 204, 274, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 275, 276, 277, 0, 0, 213,
	278, 279, 0, 214, 215, 216, 217, 0, 1093, 218,
	219, 220, 221, 0, 222, 0, 280, 223, 224, 225,
	281, 282, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 231, 0, 1714, 0,
	0, 95, 96, 97, 232, 233, 234, 235, 98, 236,
	237, 0, 99, 238, 239, 100, 0, 0, 240, 241,
	242, 0, 101, 243, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 286, 113,
	244, 114, 245, 246, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 247, 120,
	121, 122, 248, 249, 0, 0, 0, 123, 124, 250,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 251,
	0, 252, 0, 128, 129, 130, 131, 253, 254, 0,
	0, 135, 0, 132, 0, 0, 133, 255, 134, 256,
	257, 258, 0, 259, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 260, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 261, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 262, 153,
	263, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 264, 0, 159, 0, 265, 160, 161, 162, 163,
	0, 266, 164, 267, 165, 0, 166, 167, 168, 169,
	268, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	269, 186, 0, 190, 191, 192, 193, 0, 270, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 271,
	272, 200, 0, 206, 201, 202, 189, 203, 205, 273,
	204, 274, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 275, 276, 277, 0, 0, 213, 278, 279, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 280, 223, 224, 225, 281, 282, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 231, 0, 0, 0, 0, 95, 96,
	97, 232, 233, 234, 235, 98, 236, 237, 0, 99,
	238, 239, 100, 0, 0, 240, 241, 242, 0, 101,
	243, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 286, 113, 244, 114, 245,
	246, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 247, 120, 121, 122, 248,
	249, 0, 0, 0, 123, 124, 250, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 251, 0, 252, 0,
	128, 129, 130, 131, 253, 254, 0, 0, 135, 0,
	132, 0, 0, 133, 255, 134, 256, 257, 258, 0,
	259, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 260, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 261, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 262, 153, 263, 154, 155,
	0, 156, 0, 535, 157, 0, 0, 158, 264, 0,
	159, 0, 265, 160, 161, 162, 163, 0, 266, 164,
	267, 165, 0, 166, 167, 168, 169, 268, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 269, 186, 0,
	190, 191, 192, 193, 0, 270, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 271, 272, 200, 0,
	206, 201, 202, 189, 203, 205, 273, 204, 274, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 275, 276,
	277, 0, 0, 213, 278, 279, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	280, 223, 224, 225, 281, 282, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 0, 0, 0,
	0, 0, 92, 93, 920, 94, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 95, 96, 97, 232, 233,
	234, 235, 98, 236, 237, 0, 99, 238, 239, 100,
	0, 0, 240, 241, 242, 0, 101, 243, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 286, 113, 244, 114, 245, 246, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 247, 120, 121, 122, 248, 249, 0, 0,
	0, 123, 124, 250, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 251, 0, 252, 0, 128, 129, 130,
	131, 253, 254, 0, 0, 135, 0, 132, 0, 0,
	133, 255, 134, 256, 257, 258, 0, 259, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 260, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 262, 153, 263, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 264, 0, 159, 0, 265,
	160, 161, 162, 163, 0, 266, 164, 267, 165, 0,
	166, 167, 168, 169, 268, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 269, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 271, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 273, 204, 274, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 275, 276, 277, 0, 0,
	213, 278, 279, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 280, 223, 224,
	225, 281, 282, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 231, 0, 0,
	0, 0, 95, 96, 97, 232, 233, 234, 235, 98,
	236, 237, 0, 99, 238, 239, 100, 0, 0, 240,
	241, 242, 0, 101, 243, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 286,
	113, 244, 114, 245, 246, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 247,
	120, 121, 122, 248, 249, 0, 0, 0, 123, 124,
	250, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	251, 0, 252, 0, 128, 129, 130, 131, 837, 254,
	0, 0, 135, 0, 132, 0, 0, 133, 255, 134,
	256, 257, 258, 0, 259, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 260, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 262,
	153, 263, 154, 155, 0, 156, 0, 535, 157, 0,
	0, 158, 264, 0, 159, 0, 265, 160, 161, 162,
	163, 0, 266, 164, 267, 165, 0, 166, 167, 168,
	169, 268, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 269, 186, 0, 190, 191, 192, 193, 0, 270,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	271, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	273, 204, 274, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 276, 277, 0, 0, 213, 278, 279,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 280, 223, 224, 225, 281, 282,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 0, 0, 0, 0, 0, 92, 93, 589, 94,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 95,
	96, 97, 232, 233, 234, 235, 98, 236, 237, 0,
	99, 238, 239, 100, 0, 0, 240, 241, 242, 0,
	101, 243, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 286, 113, 244, 114,
	245, 246, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 247, 120, 121, 122,
	248, 249, 0, 0, 0, 123, 124, 250, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 251, 0, 252,
	0, 128, 129, 130, 131, 253, 254, 0, 0, 135,
	0, 132, 0, 0, 133, 255, 134, 256, 257, 258,
	0, 259, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 260, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 261, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 262, 153, 263, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 264,
	0, 159, 0, 265, 160, 161, 162, 163, 0, 266,
	164, 267, 165, 0, 166, 167, 168, 169, 268, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 269, 186,
	0, 190, 191, 192, 193, 0, 270, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 271, 272, 200,
	0, 206, 201, 202, 189, 203, 205, 273, 204, 274,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 275,
	276, 277, 0, 0, 213, 278, 279, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 280, 223, 224, 225, 281, 282, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 231, 0, 0, 0, 0, 95, 96, 97, 232,
	233, 234, 235, 98, 236, 237, 0, 99, 238, 239,
	100, 0, 0, 240, 241, 242, 0, 101, 243, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 286, 113, 244, 114, 245, 246, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 247, 120, 121, 122, 248, 249, 0,
	0, 0, 123, 124, 250, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 251, 0, 252, 0, 128, 129,
	130, 131, 547, 254, 0, 0, 135, 0, 132, 0,
	0, 133, 255, 134, 256, 257, 258, 0, 259, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 260,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 261, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 262, 153, 263, 154, 155, 0, 156,
	0, 535, 157, 0, 0, 158, 264, 0, 159, 0,
	265, 160, 161, 162, 163, 0, 266, 164, 267, 165,
	0, 166, 167, 168, 169, 268, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 269, 186, 0, 190, 191,
	192, 193, 0, 270, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 271, 272, 200, 0, 206, 201,
	202, 189, 203, 205, 273, 204, 274, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 275, 276, 277, 0,
	0, 213, 278, 279, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 280, 223,
	224, 225, 281, 282, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 95, 96, 97, 232, 233, 234, 235,
	98, 236, 237, 0, 99, 238, 239, 100, 0, 0,
	240, 241, 242, 0, 101, 243, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	286, 113, 244, 114, 245, 246, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	247, 120, 121, 122, 248, 249, 0, 0, 0, 123,
	124, 250, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 251, 0, 252, 0, 128, 129, 130, 131, 540,
	254, 0, 0, 135, 0, 132, 0, 0, 133, 255,
	134, 256, 257, 258, 0, 259, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 260, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	261, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	262, 153, 263, 154, 155, 0, 156, 0, 535, 157,
	0, 0, 158, 264, 0, 159, 0, 265, 160, 161,
	162, 163, 0, 266, 164, 267, 165, 0, 166, 167,
	168, 169, 268, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 269, 186, 0, 190, 191, 192, 193, 0,
	270, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 271, 272, 200, 0, 206, 201, 202, 189, 203,
	205, 273, 204, 274, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 275, 276, 277, 0, 0, 213, 278,
	279, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 280, 223, 224, 225, 281,
	282, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 0, 0, 0, 0, 0, 92, 93, 416,
	94, 0, 0, 0, 0, 231, 0, 0, 0, 0,
	95, 96, 97, 232, 233, 234, 235, 98, 236, 237,
	0, 99, 238, 239, 100, 0, 0, 240, 241, 242,
	0, 101, 243, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 286, 113, 244,
	114, 245, 246, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 247, 120, 121,
	122, 248, 249, 0, 0, 0, 123, 124, 250, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 251, 0,
	252, 0, 128, 129, 130, 131, 253, 254, 0, 0,
	135, 0, 132, 0, 0, 133, 255, 134, 256, 257,
	258, 0, 259, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 260, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 261, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 262, 153, 263,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	264, 0, 159, 0, 265, 160, 161, 162, 163, 0,
	266, 164, 267, 415, 0, 166, 167, 168, 169, 268,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 269,
	186, 0, 190, 191, 192, 193, 0, 270, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 271, 272,
	200, 0, 206, 201, 202, 189, 203, 205, 273, 204,
	274, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	275, 276, 277, 0, 0, 213, 278, 279, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 280, 223, 224, 225, 281, 282, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 95, 96, 97,
	232, 233, 234, 235, 98, 236, 237, 0, 99, 238,
	239, 100, 0, 0, 240, 241, 242, 0, 101, 243,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 286, 113, 244, 114, 245, 246,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 247, 120, 121, 122, 248, 249,
	0, 0, 0, 123, 124, 250, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 251, 0, 252, 0, 128,
	129, 130, 131, 253, 254, 0, 0, 135, 0, 132,
	0, 0, 133, 255, 134, 256, 257, 258, 0, 259,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	260, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 261, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 262, 153, 263, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 264, 0, 159,
	0, 265, 160, 161, 162, 163, 0, 266, 164, 267,
	165, 0, 166, 167, 168, 169, 268, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 269, 186, 0, 190,
	191, 192, 193, 0, 270, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 271, 272, 200, 0, 206,
	201, 202, 189, 203, 205, 273, 204, 274, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 275, 276, 277,
	0, 0, 213, 278, 279, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 280,
	223, 224, 225, 281, 282, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 231,
	0, 0, 0, 0, 95, 96, 97, 232, 233, 234,
	235, 98, 236, 237, 0, 99, 238, 239, 100, 0,
	0, 240, 241, 242, 0, 101, 243, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 286, 113, 244, 114, 245, 246, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 247, 120, 121, 122, 248, 249, 0, 0, 0,
	123, 124, 250, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 251, 0, 252, 0, 128, 129, 130, 131,
	1395, 254, 0, 0, 135, 0, 132, 0, 0, 133,
	255, 134, 256, 257, 258, 0, 259, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 260, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 261, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 262, 153, 263, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 264, 0, 159, 0, 265, 160,
	161, 162, 163, 0, 266, 164, 267, 165, 0, 166,
	167, 168, 169, 268, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 269, 186, 0, 190, 191, 192, 193,
	0, 270, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 271, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 273, 204, 274, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 275, 276, 277, 0, 0, 213,
	278, 279, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 280, 223, 224, 225,
	281, 282, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 95, 96, 97, 232, 233, 234, 235, 98, 236,
	237, 0, 99, 238, 239, 100, 0, 0, 240, 241,
	242, 0, 101, 243, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 286, 113,
	244, 114, 245, 246, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 247, 120,
	121, 122, 248, 249, 0, 0, 0, 123, 124, 250,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 251,
	0, 252, 0, 128, 129, 130, 131, 1393, 254, 0,
	0, 135, 0, 132, 0, 0, 133, 255, 134, 256,
	257, 258, 0, 259, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 260, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 261, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 262, 153,
	263, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 264, 0, 159, 0, 265, 160, 161, 162, 163,
	0, 266, 164, 267, 165, 0, 166, 167, 168, 169,
	268, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	269, 186, 0, 190, 191, 192, 193, 0, 270, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 271,
	272, 200, 0, 206, 201, 202, 189, 203, 205, 273,
	204, 274, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 275, 276, 277, 0, 0, 213, 278, 279, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 280, 223, 224, 225, 281, 282, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 231, 0, 0, 0, 0, 95, 96,
	97, 232, 233, 234, 235, 98, 236, 237, 0, 99,
	238, 239, 100, 0, 0, 240, 241, 242, 0, 101,
	243, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 286, 113, 244, 114, 245,
	246, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 247, 120, 121, 122, 248,
	249, 0, 0, 0, 123, 124, 250, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 251, 0, 252, 0,
	128, 129, 130, 131, 1382, 254, 0, 0, 135, 0,
	132, 0, 0, 133, 255, 134, 256, 257, 258, 0,
	259, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 260, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 261, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 262, 153, 263, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 264, 0,
	159, 0, 265, 160, 161, 162, 163, 0, 266, 164,
	267, 165, 0, 166, 167, 168, 169, 268, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 269, 186, 0,
	190, 191, 192, 193, 0, 270, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 271, 272, 200, 0,
	206, 201, 202, 189, 203, 205, 273, 204, 274, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 275, 276,
	277, 0, 0, 213, 278, 279, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	280, 223, 224, 225, 281, 282, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 95, 96, 97, 232, 233,
	234, 235, 98, 236, 237, 0, 99, 238, 239, 100,
	0, 0, 240, 241, 242, 0, 101, 243, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 286, 113, 244, 114, 245, 246, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 247, 120, 121, 122, 248, 249, 0, 0,
	0, 123, 124, 250, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 251, 0, 252, 0, 128, 129, 130,
	131, 950, 254, 0, 0, 135, 0, 132, 0, 0,
	133, 255, 134, 256, 257, 258, 0, 259, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 260, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 262, 153, 263, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 264, 0, 159, 0, 265,
	160, 161, 162, 163, 0, 266, 164, 267, 165, 0,
	166, 167, 168, 169, 268, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 269, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 271, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 273, 204, 274, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 275, 276, 277, 0, 0,
	213, 278, 279, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 280, 223, 224,
	225, 281, 282, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 231, 0, 0,
	0, 0, 95, 96, 97, 232, 233, 234, 235, 98,
	236, 237, 0, 99, 238, 239, 100, 0, 0, 240,
	241, 242, 0, 101, 243, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 286,
	113, 244, 114, 245, 246, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 247,
	120, 121, 122, 248, 249, 0, 0, 0, 123, 124,
	250, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	251, 0, 252, 0, 128, 129, 130, 131, 253, 254,
	0, 0, 135, 0, 132, 0, 0, 133, 255, 134,
	256, 257, 258, 0, 259, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 260, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 262,
	153, 263, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 264, 0, 159, 0, 265, 160, 161, 162,
	163, 0, 266, 164, 267, 165, 0, 166, 167, 168,
	169, 268, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 269, 186, 0, 430, 191, 192, 193, 0, 270,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	271, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	273, 204, 274, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 276, 277, 0, 0, 213, 278, 279,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 280, 223, 224, 225, 281, 282,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 231, 0, 822, 0, 0, 95,
	96, 97, 232, 233, 234, 235, 98, 236, 237, 0,
	99, 238, 239, 100, 0, 0, 240, 241, 242, 0,
	101, 243, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 286, 113, 244, 114,
	245, 246, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 247, 120, 121, 122,
	248, 249, 0, 0, 0, 123, 124, 250, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 251, 0, 252,
	0, 128, 129, 130, 131, 253, 254, 0, 0, 135,
	0, 132, 0, 0, 133, 255, 134, 256, 257, 258,
	0, 259, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 260, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 261, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 262, 153, 263, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 264,
	0, 159, 0, 265, 160, 161, 162, 163, 0, 266,
	164, 267, 165, 0, 166, 167, 168, 169, 268, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 269, 186,
	0, 190, 191, 192, 193, 0, 270, 194, 195, 196,
	0, 0, 187, 188, 198, 0, 199, 271, 272, 200,
	0, 206, 201, 202, 189, 203, 205, 273, 204, 274,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 275,
	276, 277, 0, 0, 213, 278, 279, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 280, 223, 224, 225, 281, 282, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 231, 0, 0, 0, 0, 95, 96, 97, 232,
	233, 234, 235, 98, 236, 237, 0, 99, 238, 239,
	100, 0, 0, 240, 241, 242, 0, 101, 243, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 286, 113, 244, 114, 245, 246, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 247, 120, 121, 122, 248, 249, 0,
	0, 0, 123, 124, 250, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 251, 0, 252, 0, 128, 129,
	130, 131, 656, 254, 0, 0, 135, 0, 132, 0,
	0, 133, 255, 134, 256, 257, 258, 0, 259, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 260,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 261, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 262, 153, 263, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 264, 0, 159, 0,
	265, 160, 161, 162, 163, 0, 266, 164, 267, 165,
	0, 166, 167, 168, 169, 268, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 269, 186, 0, 190, 191,
	192, 193, 0, 270, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 271, 272, 200, 0, 206, 201,
	202, 189, 203, 205, 273, 204, 274, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 275, 276, 277, 0,
	0, 213, 278, 279, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 280, 223,
	224, 225, 281, 282, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 95, 96, 97, 232, 233, 234, 235,
	98, 236, 237, 0, 99, 238, 239, 100, 0, 0,
	240, 241, 242, 0, 101, 243, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	286, 113, 244, 114, 245, 246, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	247, 120, 121, 122, 248, 249, 0, 0, 0, 123,
	124, 250, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 251, 0, 252, 0, 128, 129, 130, 131, 651,
	254, 0, 0, 135, 0, 132, 0, 0, 133, 255,
	134, 256, 257, 258, 0, 259, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 260, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	261, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	262, 153, 263, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 264, 0, 159, 0, 265, 160, 161,
	162, 163, 0, 266, 164, 267, 165, 0, 166, 167,
	168, 169, 268, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 269, 186, 0, 190, 191, 192, 193, 0,
	270, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 271, 272, 200, 0, 206, 201, 202, 189, 203,
	205, 273, 204, 274, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 275, 276, 277, 0, 0, 213, 278,
	279, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 280, 223, 224, 225, 281,
	282, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 231, 0, 0, 0, 0,
	95, 96, 97, 232, 233, 234, 235, 98, 236, 237,
	0, 99, 238, 239, 100, 0, 0, 240, 241, 595,
	0, 101, 243, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 286, 113, 244,
	114, 245, 246, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 247, 120, 121,
	122, 248, 249, 0, 0, 0, 123, 124, 250, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 251, 0,
	252, 0, 128, 129, 130, 131, 253, 254, 0, 0,
	135, 0, 132, 0, 0, 133, 255, 134, 256, 257,
	258, 0, 259, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 260, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 261, 444, 0,
	149, 150, 152, 151, 0, 0, 0, 262, 153, 263,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	264, 0, 159, 0, 265, 160, 161, 162, 163, 0,
	266, 164, 267, 165, 0, 166, 167, 168, 169, 268,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 269,
	186, 0, 190, 191, 192, 193, 0, 270, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 271, 272,
	200, 0, 206, 201, 202, 189, 203, 205, 273, 204,
	274, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	441, 276, 277, 0, 0, 437, 278, 279, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 280, 223, 224, 225, 281, 282, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 95, 96, 97,
	232, 233, 234, 235, 98, 236, 237, 0, 99, 238,
	239, 100, 0, 0, 240, 241, 242, 0, 101, 243,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 286, 113, 244, 114, 245, 246,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 247, 120, 121, 122, 248, 249,
	0, 0, 0, 123, 124, 250, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 251, 0, 252, 0, 128,
	129, 130, 131, 253, 254, 0, 0, 135, 0, 132,
	0, 0, 133, 255, 134, 256, 257, 258, 0, 259,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	260, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 261, 444, 0, 149, 150, 152,
	151, 0, 0, 0, 262, 153, 263, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 264, 0, 159,
	0, 265, 160, 161, 162, 163, 0, 266, 164, 267,
	165, 0, 166, 167, 168, 169, 268, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 269, 186, 0, 190,
	191, 192, 193, 0, 270, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 271, 272, 200, 0, 206,
	201, 202, 189, 203, 205, 273, 204, 274, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 441, 276, 277,
	0, 0, 437, 278, 279, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 280,
	223, 224, 225, 281, 282, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 231,
	0, 0, 0, 0, 95, 96, 97, 232, 233, 234,
	235, 98, 236, 237, 0, 99, 238, 239, 100, 0,
	0, 240, 241, 242, 0, 101, 243, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 286, 113, 244, 114, 245, 246, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 247, 120, 121, 122, 248, 249, 0, 0, 0,
	123, 124, 250, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 251, 0, 252, 0, 128, 129, 130, 131,
	577, 254, 0, 0, 135, 0, 132, 0, 0, 133,
	255, 134, 256, 257, 258, 0, 259, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 260, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 261, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 262, 153, 263, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 264, 0, 159, 0, 265, 160,
	161, 162, 163, 0, 266, 164, 267, 165, 0, 166,
	167, 168, 169, 268, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 269, 186, 0, 190, 191, 192, 193,
	0, 270, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 271, 272, 200, 0, 206, 201, 202, 189,
	203, 205, 273, 204, 274, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 275, 276, 277, 0, 0, 213,
	278, 279, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 280, 223, 224, 225,
	281, 282, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 95, 96, 97, 232, 233, 234, 235, 98, 236,
	237, 0, 99, 238, 239, 100, 0, 0, 240, 241,
	242, 0, 101, 243, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 286, 113,
	244, 114, 245, 246, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 247, 120,
	121, 122, 248, 249, 0, 0, 0, 123, 124, 250,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 251,
	0, 252, 0, 128, 129, 130, 131, 574, 254, 0,
	0, 135, 0, 132, 0, 0, 133, 255, 134, 256,
	257, 258, 0, 259, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 260, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 261, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 262, 153,
	263, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 264, 0, 159, 0, 265, 160, 161, 162, 163,
	0, 266, 164, 267, 165, 0, 166, 167, 168, 169,
	268, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	269, 186, 0, 190, 191, 192, 193, 0, 270, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 271,
	272, 200, 0, 206, 201, 202, 189, 203, 205, 273,
	204, 274, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 275, 276, 277, 0, 0, 213, 278, 279, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 280, 223, 224, 225, 281, 282, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 231, 0, 0, 0, 0, 95, 96,
	97, 232, 233, 234, 235, 98, 236, 237, 0, 99,
	238, 239, 100, 0, 0, 240, 241, 242, 0, 101,
	243, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 286, 113, 244, 114, 245,
	246, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 247, 120, 121, 122, 248,
	249, 0, 0, 0, 123, 124, 250, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 251, 0, 252, 0,
	128, 129, 130, 131, 571, 254, 0, 0, 135, 0,
	132, 0, 0, 133, 255, 134, 256, 257, 258, 0,
	259, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 260, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 261, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 262, 153, 263, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 264, 0,
	159, 0, 265, 160, 161, 162, 163, 0, 266, 164,
	267, 165, 0, 166, 167, 168, 169, 268, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 269, 186, 0,
	190, 191, 192, 193, 0, 270, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 271, 272, 200, 0,
	206, 201, 202, 189, 203, 205, 273, 204, 274, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 275, 276,
	277, 0, 0, 213, 278, 279, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	280, 223, 224, 225, 281, 282, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 95, 96, 97, 232, 233,
	234, 235, 98, 236, 237, 0, 99, 238, 239, 100,
	0, 0, 240, 241, 242, 0, 101, 243, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 286, 113, 244, 114, 245, 246, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 247, 120, 121, 122, 248, 249, 0, 0,
	0, 123, 124, 250, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 251, 0, 252, 0, 128, 129, 130,
	131, 569, 254, 0, 0, 135, 0, 132, 0, 0,
	133, 255, 134, 256, 257, 258, 0, 259, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 260, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 261, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 262, 153, 263, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 264, 0, 159, 0, 265,
	160, 161, 162, 163, 0, 266, 164, 267, 165, 0,
	166, 167, 168, 169, 268, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 269, 186, 0, 190, 191, 192,
	193, 0, 270, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 271, 272, 200, 0, 206, 201, 202,
	189, 203, 205, 273, 204, 274, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 275, 276, 277, 0, 0,
	213, 278, 279, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 280, 223, 224,
	225, 281, 282, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 231, 0, 0,
	0, 0, 95, 96, 97, 232, 233, 234, 235, 98,
	236, 237, 0, 99, 238, 239, 100, 0, 0, 240,
	241, 242, 0, 101, 243, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 286,
	113, 244, 114, 245, 246, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 247,
	120, 121, 122, 248, 249, 0, 0, 0, 123, 124,
	250, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	251, 0, 252, 0, 128, 129, 130, 131, 543, 254,
	0, 0, 135, 0, 132, 0, 0, 133, 255, 134,
	256, 257, 258, 0, 259, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 260, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 261,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 262,
	153, 263, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 264, 0, 159, 0, 265, 160, 161, 162,
	163, 0, 266, 164, 267, 165, 0, 166, 167, 168,
	169, 268, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 269, 186, 0, 190, 191, 192, 193, 0, 270,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	271, 272, 200, 0, 206, 201, 202, 189, 203, 205,
	273, 204, 274, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 275, 276, 277, 0, 0, 213, 278, 279,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 280, 223, 224, 225, 281, 282,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 95,
	96, 97, 232, 233, 234, 235, 98, 236, 237, 0,
	99, 238, 239, 100, 0, 0, 240, 241, 242, 0,
	101, 243, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 286, 113, 244, 114,
	245, 246, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 247, 120, 121, 122,
	248, 249, 0, 0, 0, 123, 124, 250, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 251, 0, 252,
	0, 128, 129, 130, 131, 253, 254, 0, 0, 135,
	0, 132, 0, 0, 133, 255, 134, 256, 257, 258,
	0, 259, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 260, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 261, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 262, 153, 263, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 264,
	0, 159, 0, 265, 160, 161, 162, 163, 0, 266,
	164, 267, 165, 0, 166, 167, 168, 169, 268, 524,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 269, 186,
	0, 190, 191, 192, 193, 0, 270, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 271, 272, 200,
	0, 206, 201, 202, 189, 203, 205, 273, 204, 274,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 275,
	276, 277, 0, 0, 213, 278, 279, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 280, 223, 224, 225, 281, 282, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 231, 0, 0, 0, 0, 95, 96, 97, 232,
	233, 234, 235, 98, 236, 237, 0, 99, 238, 239,
	100, 0, 0, 240, 241, 242, 0, 435, 243, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 286, 113, 244, 114, 245, 246, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 247, 120, 121, 122, 248, 249, 0,
	0, 0, 123, 124, 250, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 251, 0, 252, 0, 128, 129,
	130, 131, 253, 254, 0, 0, 135, 0, 132, 0,
	0, 133, 255, 134, 256, 257, 258, 0, 259, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 260,
	0, 141, 0, 0, 433, 0, 0, 143, 0, 144,
	145, 146, 148, 261, 444, 0, 149, 150, 152, 151,
	0, 0, 0, 262, 153, 263, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 264, 0, 159, 0,
	265, 160, 161, 162, 163, 0, 266, 164, 267, 165,
	0, 166, 167, 168, 169, 268, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 436, 186, 0, 190, 191,
	192, 193, 0, 270, 194, 434, 196, 0, 197, 187,
	188, 198, 0, 199, 271, 272, 200, 0, 206, 201,
	202, 189, 203, 205, 273, 204, 274, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 441, 276, 277, 0,
	0, 437, 278, 279, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 280, 223,
	224, 225, 281, 282, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 95, 96, 97, 232, 233, 234, 235,
	98, 236, 237, 0, 99, 238, 239, 100, 0, 0,
	240, 241, 242, 0, 101, 243, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	286, 113, 244, 114, 245, 246, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	247, 120, 121, 122, 248, 249, 0, 0, 0, 123,
	124, 250, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 251, 0, 252, 0, 128, 129, 130, 131, 253,
	254, 0, 0, 135, 0, 132, 0, 0, 133, 255,
	134, 256, 257, 258, 0, 259, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 260, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	261, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	262, 153, 263, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 264, 0, 159, 0, 265, 160, 161,
	0, 163, 0, 266, 164, 267, 165, 0, 166, 167,
	0, 169, 268, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 269, 0, 0, 190, 191, 192, 193, 0,
	270, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 271, 272, 200, 0, 206, 201, 202, 189, 203,
	205, 273, 204, 274, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 275, 276, 277, 0, 0, 213, 278,
	279, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 280, 223, 224, 225, 281,
	282, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 977, 978, 0, 997, 998, 999, 1007, 1008,
	1009, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 0, 0, 980, 0, 0, 1011, 0,
	0, 0, 0, 0, 977, 978, 0, 997, 998, 999,
	1007, 1008, 1009, 0, 0, 0, 0, 0, 979, 0,
	1000, 0, 0, 0, 994, 0, 0, 980, 0, 0,
	1011, 0, 0, 0, 0, 0, 977, 978, 0, 997,
	998, 999, 1007, 1008, 1009, 0, 0, 0, 0, 0,
	979, 0, 1000, 0, 0, 0, 994, 0, 0, 980,
	0, 0, 1011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 994, 0,
	0, 0, 0, 1004, 1012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 0, 0, 1010,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1002, 0, 0, 0, 1004, 1012, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 1002, 0, 0, 0, 1004, 1012, 995,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1001, 1002, 0, 0, 0, 0,
	0, 995, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1005, 0, 0, 0, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1003, 1005, 0, 991, 992, 993,
	1006, 0, 990, 988, 989, 981, 982, 983, 984, 986,
	987, 0, 0, 0, 0, 0, 0, 0, 1597, 0,
	0, 0, 0, 0, 0, 0, 1003, 0, 0, 991,
	992, 993, 1006, 0, 990, 988, 989, 981, 982, 983,
	984, 986, 987, 0, 0, 0, 0, 0, 0, 0,
	1596, 0, 0, 0, 0, 0, 0, 0, 1003, 0,
	0, 991, 992, 993, 1006, 0, 990, 988, 989, 981,
	982, 983, 984, 986, 987, 0, 0, 0, 0, 0,
	977, 978, 1548, 997, 998, 999, 1007, 1008, 1009, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 980, 977, 978, 1011, 997, 998, 999,
	1007, 1008, 1009, 0, 0, 0, 0, 0, 1556, 1557,
	1000, 1574, 1575, 1576, 0, 0, 979, 980, 0, 0,
	1011, 0, 994, 0, 1726, 0, 0, 0, 0, 0,
	0, 977, 978, 0, 997, 998, 999, 1007, 1008, 1009,
	979, 0, 0, 0, 0, 0, 994, 1000, 0, 0,
	0, 0, 0, 0, 980, 0, 0, 1011, 0, 0,
	1571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 994, 0, 0, 0, 0, 0, 0,
	0, 1004, 1012, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 0,
	1562, 0, 0, 0, 0, 1004, 1012, 0, 0, 1002,
	0, 0, 0, 0, 0, 995, 0, 0, 0, 0,
	0, 1010, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1002, 0, 1577, 0, 0, 0, 995,
	1001, 0, 1004, 1012, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1572, 0, 0, 0, 0, 1010, 0,
	0, 0, 0, 0, 1001, 0, 0, 0, 0, 0,
	1002, 0, 0, 0, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1005,
	0, 1001, 0, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1573, 1005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 996, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 0, 1003, 0, 0, 991, 992, 993, 1006, 0,
	990, 988, 989, 981, 982, 983, 984, 986, 987, 0,
	0, 0, 0, 2076, 0, 0, 1003, 0, 0, 991,
	992, 993, 1006, 0, 990, 988, 989, 981, 982, 983,
	984, 986, 987, 1568, 1569, 1570, 0, 2074, 1567, 1565,
	1566, 1558, 1559, 1560, 1561, 1563, 1564, 0, 0, 0,
	0, 0, 0, 1003, 0, 0, 991, 992, 993, 1006,
	0, 990, 988, 989, 981, 982, 983, 984, 986, 987,
	0, 0, 977, 978, 2019, 997, 998, 999, 1007, 1008,
	1009, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 0, 0, 980, 977, 978, 1011, 997,
	998, 999, 1007, 1008, 1009, 0, 0, 0, 0, 0,
	1556, 1557, 1000, 1574, 1575, 1576, 0, 0, 979, 980,
	0, 0, 1011, 0, 994, 0, 0, 0, 0, 0,
	0, 0, 0, 977, 978, 0, 997, 998, 999, 1007,
	1008, 1009, 979, 0, 0, 0, 0, 0, 994, 1000,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 1011,
	0, 0, 1571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 1004, 1012, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1010,
	0, 0, 1562, 0, 0, 0, 0, 1004, 1012, 0,
	0, 1002, 0, 0, 0, 0, 0, 995, 0, 0,
	0, 0, 0, 1010, 0, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 1577, 0, 0,
	0, 995, 1001, 0, 1004, 1012, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1572, 0, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 1001, 0, 0, 0,
	0, 0, 1002, 0, 0, 0, 0, 0, 995, 0,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1005, 0, 1001, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1573, 1005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 996, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1005, 0, 1003, 0, 0, 991, 992, 993,
	1006, 0, 990, 988, 989, 981, 982, 983, 984, 986,
	987, 0, 0, 0, 0, 2014, 0, 0, 1003, 0,
	0, 991, 992, 993, 1006, 0, 990, 988, 989, 981,
	982, 983, 984, 986, 987, 1568, 1569, 1570, 0, 2010,
	1567, 1565, 1566, 1558, 1559, 1560, 1561, 1563, 1564, 0,
	0, 0, 0, 0, 0, 1003, 0, 0, 991, 992,
	993, 1006, 0, 990, 988, 989, 981, 982, 983, 984,
	986, 987, 0, 0, 977, 978, 1949, 997, 998, 999,
	1007, 1008, 1009, 0, 0, 0, 0, 0, 0, 0,
	1000, 0, 0, 0, 0, 0, 0, 980, 977, 978,
	1011, 997, 998, 999, 1007, 1008, 1009, 0, 0, 0,
	0, 0, 1556, 1557, 1000, 1574, 1575, 1576, 0, 0,
	979, 980, 0, 0, 1011, 0, 994, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 978, 0, 997, 998,
	999, 1007, 1008, 1009, 979, 0, 0, 0, 0, 0,
	994, 1000, 0, 0, 0, 0, 0, 0, 980, 0,
	0, 1011, 0, 0, 1571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 1004, 1012, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1010, 0, 0, 1562, 0, 0, 0, 0, 1004,
	1012, 0, 0, 1002, 0, 0, 0, 0, 0, 995,
	0, 0, 0, 0, 0, 1010, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 0,
	0, 0, 0, 995, 1001, 0, 1004, 1012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1572, 0, 0,
	0, 0, 1010, 0, 0, 0, 0, 0, 1001, 0,
	0, 0, 0, 0, 1002, 0, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1005, 0, 1001, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1573, 1005, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1005, 0, 1003, 0, 0, 991,
	992, 993, 1006, 0, 990, 988, 989, 981, 982, 983,
	984, 986, 987, 0, 0, 0, 0, 1927, 0, 0,
	1003, 0, 0, 991, 992, 993, 1006, 0, 990, 988,
	989, 981, 982, 983, 984, 986, 987, 1568, 1569, 1570,
	0, 1926, 1567, 1565, 1566, 1558, 1559, 1560, 1561, 1563,
	1564, 0, 0, 0, 0, 0, 0, 1003, 0, 0,
	991, 992, 993, 1006, 0, 990, 988, 989, 981, 982,
	983, 984, 986, 987, 0, 0, 977, 978, 1816, 997,
	998, 999, 1007, 1008, 1009, 0, 0, 0, 0, 0,
	0, 0, 1000, 0, 0, 0, 0, 0, 0, 980,
	977, 978, 1011, 997, 998, 999, 1007, 1008, 1009, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 979, 980, 0, 0, 1011, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 978, 0,
	997, 998, 999, 1007, 1008, 1009, 979, 0, 0, 0,
	0, 0, 994, 1000, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 994,
	0, 0, 0, 0, 0, 0, 0, 1004, 1012, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 0,
	0, 1004, 1012, 0, 0, 1002, 0, 0, 0, 0,
	0, 995, 0, 0, 0, 0, 0, 1010, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1002,
	0, 0, 0, 0, 0, 995, 1001, 0, 1004, 1012,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1010, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 1002, 0, 0, 0,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1005, 0, 1001, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1005,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1005, 0, 1003, 0,
	0, 991, 992, 993, 1006, 0, 990, 988, 989, 981,
	982, 983, 984, 986, 987, 0, 0, 0, 0, 1750,
	0, 0, 1003, 0, 0, 991, 992, 993, 1006, 0,
	990, 988, 989, 981, 982, 983, 984, 986, 987, 0,
	0, 0, 0, 1734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1003,
	0, 0, 991, 992, 993, 1006, 0, 990, 988, 989,
	981, 982, 983, 984, 986, 987, 0, 0, 977, 978,
	1687, 997, 998, 999, 1007, 1008, 1009, 0, 0, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 980, 977, 978, 1011, 997, 998, 999, 1007, 1008,
	1009, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 0, 979, 980, 0, 0, 1011, 0,
	994, 0, 0, 0, 0, 0, 0, 0, 0, 977,
	978, 0, 997, 998, 999, 1007, 1008, 1009, 979, 0,
	0, 0, 0, 0, 994, 1000, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 1011, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 994, 0, 0, 0, 0, 0, 0, 0, 1004,
	1012, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1010, 0, 0, 0, 0,
	0, 0, 0, 1004, 1012, 0, 0, 1002, 0, 0,
	0, 0, 0, 995, 0, 0, 0, 0, 0, 1010,
	0, 985, 2159, 0, 0, 0, 0, 0, 0, 0,
	0, 1002, 0, 0, 0, 0, 0, 995, 1001, 0,
	1004, 1012, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1005, 0, 1001,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 2158, 0, 0, 0, 0, 0, 0,
	0, 1005, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 0,
	1003, 0, 0, 991, 992, 993, 1006, 0, 990, 988,
	989, 981, 982, 983, 984, 986, 987, 0, 0, 0,
	0, 1303, 0, 0, 1003, 0, 0, 991, 992, 993,
	1006, 0, 990, 988, 989, 981, 982, 983, 984, 986,
	987, 0, 0, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1003, 0, 0, 991, 992, 993, 1006, 0, 990,
	988, 989, 981, 982, 983, 984, 986, 987, 977, 978,
	0, 997, 998, 999, 1007, 1008, 1009, 0, 0, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 980, 0, 0, 1011, 0, 0, 0, 0, 0,
	977, 978, 0, 997, 998, 999, 1007, 1008, 1009, 0,
	0, 0, 0, 0, 979, 0, 1000, 0, 0, 0,
	994, 1218, 0, 980, 0, 0, 1011, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 1588, 0, 0, 1587, 0, 0, 0, 0,
	1219, 0, 0, 0, 0, 0, 0, 0, 0, 1004,
	1012, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 1010, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 0,
	0, 1004, 1012, 995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1001, 1002,
	0, 0, 0, 0, 0, 995, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1005, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 0, 0, 996, 977, 978, 0, 997, 998,
	999, 1007, 1008, 1009, 0, 0, 0, 0, 0, 1005,
	0, 1000, 0, 0, 0, 1014, 0, 0, 980, 0,
	0, 1011, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1003, 979, 0, 991, 992, 993, 1006, 994, 990, 988,
	989, 981, 982, 983, 984, 986, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1003, 0, 0, 991, 992, 993, 1006, 0,
	990, 988, 989, 981, 982, 983, 984, 986, 987, 0,
	0, 0, 0, 0, 0, 977, 978, 985, 997, 998,
	999, 1007, 1008, 1009, 0, 0, 0, 0, 0, 0,
	0, 1000, 0, 0, 0, 0, 1004, 1012, 980, 977,
	978, 1011, 997, 998, 999, 1007, 1008, 1009, 0, 0,
	0, 0, 1010, 0, 0, 1000, 0, 0, 0, 0,
	0, 979, 980, 0, 1002, 1011, 0, 994, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 994, 0, 0, 0, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1004, 1012, 0, 996,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1010, 0, 1005, 0, 0, 0, 0, 0,
	1004, 1012, 0, 0, 1002, 0, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 1010, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 0, 995, 1001, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1003, 0, 1001,
	991, 992, 993, 1006, 0, 990, 988, 989, 981, 982,
	983, 984, 986, 987, 0, 0, 0, 0, 0, 996,
	0, 977, 978, 0, 997, 998, 999, 1007, 1008, 1009,
	0, 0, 0, 0, 1005, 0, 0, 1000, 0, 0,
	0, 0, 0, 996, 980, 0, 0, 1011, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 994, 0, 0, 0, 0, 0, 0,
	0, 1738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1003, 0, 0,
	991, 992, 993, 1006, 0, 990, 988, 989, 981, 982,
	983, 984, 986, 987, 0, 0, 0, 0, 0, 0,
	0, 1003, 0, 985, 991, 992, 993, 1006, 1594, 990,
	988, 989, 981, 982, 983, 984, 986, 987, 0, 0,
	0, 0, 1004, 1012, 0, 977, 978, 0, 997, 998,
	999, 1007, 1008, 1009, 0, 0, 0, 0, 1010, 0,
	0, 1000, 0, 0, 0, 1589, 0, 0, 980, 0,
	1002, 1011, 0, 0, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 996, 0, 985, 0, 977,
	978, 0, 997, 998, 999, 1007, 1008, 1009, 0, 0,
	1005, 0, 0, 0, 0, 1000, 1004, 1012, 0, 0,
	0, 0, 980, 0, 0, 1011, 0, 0, 0, 0,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1002, 979, 0, 0, 0, 0,
	995, 994, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1003, 0, 1001, 991, 992, 993, 1006,
	0, 990, 988, 989, 981, 982, 983, 984, 986, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 996,
	1004, 1012, 0, 977, 978, 0, 997, 998, 999, 1007,
	1008, 1009, 0, 0, 1005, 0, 1010, 0, 0, 1000,
	0, 0, 0, 1547, 0, 0, 980, 0, 1002, 1011,
	0, 0, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 994, 0, 0, 0, 1001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1554, 0, 0, 0, 0, 0, 1003, 0, 0,
	991, 992, 993, 1006, 0, 990, 988, 989, 981, 982,
	983, 984, 986, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 985, 0, 977, 978, 0,
	997, 998, 999, 1007, 1008, 1009, 0, 0, 1005, 0,
	0, 0, 0, 1000, 1004, 1012, 0, 0, 0, 0,
	980, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1002, 979, 0, 0, 0, 0, 995, 994,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1003, 0, 1001, 991, 992, 993, 1006, 0, 990,
	988, 989, 981, 982, 983, 984, 986, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 996, 1004, 1012,
	0, 977, 978, 0, 997, 998, 999, 1007, 1008, 1009,
	0, 0, 1005, 0, 1010, 0, 0, 1000, 0, 0,
	0, 0, 0, 0, 980, 0, 1002, 1011, 0, 0,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 994, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1003, 0, 0, 991, 992,
	993, 1006, 0, 990, 988, 989, 981, 982, 983, 984,
	986, 987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 0, 985, 0, 977, 978, 0, 997, 998,
	999, 1007, 1008, 1009, 0, 0, 1005, 0, 0, 0,
	0, 0, 1004, 1012, 0, 0, 0, 0, 980, 977,
	978, 1011, 997, 998, 999, 1007, 1008, 1009, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1002, 979, 980, 0, 0, 1011, 995, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 1003,
	0, 994, 991, 992, 993, 1006, 0, 990, 988, 989,
	981, 982, 983, 984, 986, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 996, 1004, 1012, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	1004, 1012, 0, 0, 1002, 0, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1003, 0, 0, 991, 992, 993, 1006,
	0, 990, 988, 989, 981, 982, 983, 984, 986, 987,
	0, 0, 864, 856, 881, 848, 872, 871, 0, 996,
	850, 849, 0, 0, 0, 883, 882, 0, 0, 0,
	0, 0, 0, 0, 1005, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 1005, 869,
	868, 0, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1003, 0, 0,
	991, 992, 993, 1006, 0, 990, 988, 989, 981, 982,
	983, 984, 986, 987, 859, 858, 860, 861, 862, 0,
	880, 1003, 0, 0, 991, 992, 993, 1006, 0, 990,
	988, 989, 981, 982, 983, 984, 986, 987, 0, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 0,
	0, 864, 856, 881, 848, 872, 871, 870, 0, 850,
	849, 857, 0, 0, 883, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 1237, 1235, 1236, 1239, 1238, 877, 0, 869, 868,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 866, 863, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 878,
	879, 0, 0, 859, 858, 860, 861, 862, 0, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	855, 0, 0, 0, 0, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 863, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 878, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 855,
	0, 0, 0, 0, 884,
}
var sqlPact = [...]int{

	230, -1000, 46, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 819, 16772, 16772, 20934, -1000, -1000, -1000, -1000,
	-1000, -1000, 826, 785, 346, 5530, 20934, 20934, 20637, 1001,
	1001, 22419, -1000, -1000, 25983, -1000, 4280, 536, 547, 536,
	536, 557, 22419, 1222, 660, 14072, 722, 145, -1000, 831,
	9, 25686, 20934, 1440, 43, 18855, 347, 230, 20340, 25389,
	20934, 20043, 620, 41, 17369, 20934, -1000, 48, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1306, 388, 48, -1000, 1305, 1176, 1141,
	18855, 25092, 24795, 24498, 24201, -1000, 12871, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	845, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 358, 352, -1000, 19746, -1000, 1011, -1000, 42,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1004, -1000,
	20934, -1000, -1000, 23904, 23607, 720, 351, 958, -1000, -1000,
	604, 454, -1000, -1000, 13775, 52, -1000, -1000, -1000, -1000,
	1484, 16475, 788, 1304, -1000, 1002, 1303, 1302, 1298, 1297,
	1294, -1000, 799, -1000, 1293, 450, 885, 513, -1000, 1291,
	1288, 958, -1000, 958, -1000, -1000, -1000, 615, 22419, -1000,
	-1000, -1000, -1000, -1000, 18855, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1653, -1000, -1000, -1000, -1000,
	1668, -1000, -1000, -1000, -1000, 23310, 20934, 20934, 1219, 23013,
	-1000, 831, -1000, -1000, -1000, 1067, 1434, 1434, 1434, 1526,
	176, 165, 145, 10, 20934, -1000, 348, 10, 9705, 9705,
	-1000, -1000, 347, -1000, 404, 15870, -1000, 8742, -1000, 931,
	1347, 550, 771, 1346, -150, 853, 834, 1343, 16475, 17369,
	41, 40, -1000, -1000, -1000, 5222, 16475, 706, 14969, 48,
	-1000, -1000, -1000, 18855, 20934, 20934, 744, 22716, -1000, 1342,
	130, 1341, -1000, 127, 1340, -1000, 127, 1339, 38, -1000,
	-1000, 347, 19449, 20934, 1588, 30474, -1000, 10990, -1000, -1000,
	16772, 1237, 16772, -1000, -1000, 1580, -1000, 20934, 10990, -1000,
	39, 36, 1092, 1226, 13478, 13181, 1393, 995, -1000, -1000,
	-1000, 51, 5530, 704, -1000, -1000, -1000, 19152, -1000, -1000,
	20934, 1311, 16772, 20934, 20934, 20934, 20934, 20934, -1000, -1000,
	20934, -1000, 1089, -1000, -1000, 20934, 20934, 786, 650, -1000,
	15, 14, -1000, 22419, -1000, 136, -1000, -1000, -1000, -1000,
	344, 1059, 460, 179, 22122, 460, 1054, -1000, 1067, -1000,
	1009, 1146, 10027, 1156, 10990, 145, -1000, -1000, 145, 145,
	10990, -1000, -1000, 20934, 10, 1575, 20934, 115, -1000, 29135,
	-1000, -1000, 10990, 10990, 10990, 10990, 10990, 928, 397, -1000,
	339, 338, 6481, -1000, -1000, 1667, -1000, -1000, -1000, 170,
	-1000, -1000, 10990, 48, -1000, -1000, -1000, -1000, 337, 1682,
	-1000, 443, -1000, -1000, -1000, 458, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1310, 333, 332, -1000, -1000,
	-1000, -1000, 331, 330, 328, 325, 322, 319, 318, 317,
	316, 315, 308, 303, 301, 287, 285, 900, -1000, 471,
	-1000, -1000, 471, 471, -1000, 279, 279, 283, -1000, -1000,
	-1000, -1000, 279, -1000, -1000, -1000, 444, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 284, 115, -1000, -1000, -1000, 20934,
	37, -1000, 29917, -1000, -31, 850, -1000, 18261, 1479, 1416,
	1413, 18855, 1540, 9, 1287, 1538, 9, 1286, 612, 20934,
	20934, 611, 605, 18855, 438, -1000, 20934, -1000, -1000, 16,
	-1000, -1000, 1284, 32, -1000, -1000, 463, 93, 1574, 93,
	15270, -1000, 20934, 20934, -1000, 20934, -1000, -1000, 20934, -1000,
	20934, 20934, -1000, 20934, 157, 17667, 847, 1338, 751, 9,
	31, -1000, 1596, -1000, -1000, -1000, -1000, 172, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 283, 900, 279, 279,
	279, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 444, -1000,
	-1000, 471, 471, 471, -1000, -1000, 30, 29917, 603, -1000,
	1283, 532, -1000, 461, 25, 895, 1138, 912, -1000, -1000,
	-1000, -1000, 0, -1000, -1000, 0, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1681, 5530, -1000, -1000, -1000,
	-1000, -1000, -1000, 20934, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 20934, 20934, 20934, 895, 1138, -1000,
	-1000, 18855, 17964, 1573, 1336, 907, -1000, 1563, 20934, 987,
	1053, -1000, 645, 1335, -1000, -1000, -1000, -1000, 29917, -1000,
	391, -1000, -1000, 29917, 813, 1205, -1000, 1205, -10, -1000,
	28910, -1000, 278, 12, 463, 9705, 14669, 30335, 30474, 5530,
	639, 10990, 10990, 10990, 10990, 10990, 10990, 10990, 10990, 10990,
	10990, 10990, 10990, 10990, 10990, 10990, 10990, 10990, 10990, 10990,
	10990, 10990, 10990, 1164, 10990, 602, 10990, 10990, 10990, 10990,
	1321, 924, 260, 1005, 5530, -1000, -1000, 1648, 1648, 1648,
	30145, 30145, 267, 397, -1000, 10990, -1000, 9384, 165, 28498,
	-17, -1000, -1000, -1000, 7445, 468, 29917, 48, 6159, -1000,
	1666, 733, 1308, 1241, 277, 164, 162, 10990, 10990, 11311,
	11311, 10990, 11632, 10990, 10990, 6802, 10990, 10990, 10990, 10990,
	10990, 10990, -1000, 276, -1000, -1000, -1000, -1000, 1665, -1000,
	-1000, 1663, -1000, 632, 624, 1659, 463, 158, 8742, -1000,
	847, 20934, 20934, 20934, -1000, -1000, 1046, 21825, 1044, 30474,
	20934, -1000, 275, 272, 1117, 1114, 20934, 20934, 21528, 21231,
	20934, 911, 9, -1000, 269, 9, -1000, 265, 20934, 815,
	-1000, 20934, 20934, 808, 1231, 997, -1000, 462, 16475, 703,
	1280, 20934, 791, 10990, 862, -1000, 14369, 474, 20934, 791,
	86, -1000, -1000, -1000, 434, 20934, -1000, -1000, -1000, 130,
	-1000, 127, 127, -1000, -1000, 18855, -1000, -1000, -1000, -1000,
	-1000, -1000, 30474, 396, 389, -1000, 1657, 600, -1000, 598,
	597, 596, -1000, 264, -1000, 10990, 20934, 20934, 1138, -1000,
	-1000, -1000, -1000, 732, -1000, 875, -1000, 14072, -1000, -36,
	-1000, -1000, -1000, 438, -1000, -1000, -1000, 155, 11, -24,
	30474, -1000, -1000, -1000, -1000, -1000, 20934, 356, 20934, 9,
	20934, -1000, 1680, 9, 20934, 1334, 1354, 426, 20934, 813,
	-1000, 10990, 1656, -1000, -1000, -1000, 10990, -1000, -1000, -1000,
	9, -1000, 1240, -1000, -1, 2056, 1028, -151, 161, 441,
	-1000, 3945, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 449, 470, 470, 619, 619, 619, 619, 1597,
	836, 2264, 2507, 3526, 3526, 3526, 2302, 190, 190, 3526,
	3526, 3526, 30145, 30041, 2187, 10990, 10990, 595, 913, 260,
	2187, 10990, 2187, 2187, 2187, 2187, -1000, 1027, -1000, -1000,
	-1000, -1000, 1279, 258, 11632, 11632, -1000, -1000, -1000, 6481,
	11953, -1000, -1000, -1000, -1000, -1000, 256, 10990, -1000, 28522,
	-168, 1, -1000, -1000, 10990, -69, -116, -1000, -1000, 692,
	-1000, 10990, -1000, 7, 10990, 10990, 10990, 151, 143, -1000,
	943, 249, 248, 10990, -1000, -1000, 29813, 26646, 140, 1275,
	-134, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 129, 128,
	29689, -134, 126, 3565, -1000, 11632, 11632, 11632, 6481, 247,
	124, 28878, -134, 29585, 9063, 9063, 9063, 117, 29461, 10990,
	-134, 26614, 26582, 4254, -8, -13, -15, 1655, -22, 114,
	447, 445, 113, 1240, -1000, -1000, -1000, -1000, 590, 588,
	1333, -1000, 1043, -1000, 480, -1000, 809, 10990, 12571, 246,
	245, 892, -1000, 1332, 1007, 1329, 1007, -1000, -31, 780,
	-1000, 10990, -1000, 10990, -1000, 585, -1000, -1000, 583, 462,
	1271, 673, -1000, 959, -1000, -1000, 687, -1000, -1000, 7123,
	29917, -1000, 791, 1430, -26, -1000, -1000, -1000, 463, 15270,
	14669, 8742, -27, -1000, -1000, -1000, 847, -1000, 487, 1649,
	110, 1071, 975, 837, 757, 1645, 29917, -36, -36, -1000,
	-1000, -1000, -1000, -1000, 20934, -1000, 1221, -1000, 17964, 243,
	20934, 239, -1000, 238, -1000, -1000, 231, 20934, 1102, 426,
	17072, -1000, 460, 961, 28177, -1000, 108, 1236, 1520, -1000,
	14669, 1133, 1124, 14669, 1249, 947, 947, 947, -1000, 229,
	235, 386, 441, 4592, 10990, 18558, 953, 74, 106, 2056,
	10990, 2187, 2187, 10990, 11632, 11632, -1000, 2187, -1000, -1000,
	-1000, -1000, -1000, 1254, 228, 10990, 30474, 27008, 4278, -32,
	-1000, 8421, -57, -1000, 10990, -1000, 28140, -1000, -1000, 326,
	1351, -1000, 10990, 29259, 105, 8100, -1000, 29235, -21, -21,
	-1000, 1677, -1000, 15570, 466, 956, 28116, 30335, 30474, -1000,
	10990, -1000, -1000, 1253, 10990, -1000, 30335, 30474, 11632, 11632,
	11632, 11632, 11632, 11632, 11632, 11632, 11632, 11632, 11632, 11632,
	11632, 11632, 11632, 11632, 11632, 11632, 11632, 1120, 11632, 1630,
	1630, 1630, -75, 7779, -1000, 1252, 1253, 10990, 10990, 30474,
	99, 97, 95, -1000, 10990, -134, 10990, 10990, 10990, -1000,
	-1000, -1000, 94, -1000, 1640, -1000, -1000, -1000, -1000, 1236,
	20934, 20934, 20934, 1328, -1000, 1512, -1000, 27795, -47, -1000,
	324, 1462, 10990, -1000, -1000, 226, 12571, 20934, -1000, 1139,
	1155, 520, 20934, -1000, 20934, -1000, 20934, 20934, 20934, -48,
	-49, 20934, 20934, -1000, 16475, 622, 222, -1000, -86, -1000,
	-1000, 242, 9, 791, -1000, -98, -1000, 429, -1000, 385,
	382, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 91,
	-1000, -1000, 1223, -1000, 12571, 221, 20934, 17964, 1559, 12571,
	986, 1109, 426, 17072, -1000, 645, -1000, -1000, -1000, 464,
	10990, 10990, 2056, 14669, 14669, 1300, 1122, 14669, -1000, -1000,
	-1000, -1000, 381, 376, 379, 12871, 441, 18558, -1000, 1637,
	1134, -53, -1000, -1000, 20934, 219, -1000, 441, 1590, 2187,
	3592, 3014, 10990, 30474, 30169, -55, 10990, 10990, -1000, -59,
	-1000, 10990, 367, 29917, -1000, -1000, -1000, 29917, 10990, 1671,
	10990, 84, 82, 80, -1000, -1000, -1000, 26280, 10990, 79,
	-1000, 76, 75, 29917, 1252, 29917, -1000, -1000, 457, 457,
	729, 729, 729, 729, 1630, 1057, 408, 2166, 380, 380,
	380, 738, 529, 529, 380, 380, 380, 1251, 1121, 215,
	27390, 10990, -60, -1000, -1000, -1000, 29917, 29917, 71, -1000,
	-1000, -1000, -134, 3426, 27758, 27734, -1000, 70, 464, -1000,
	-1000, -1000, 20934, -1000, 20934, -1000, 5530, 20934, 1258, 1038,
	-1000, -1000, 1113, 214, 11632, 20934, -1000, 873, 12571, 1427,
	48, 5530, 1427, 27413, 6159, -64, -65, 1035, -1000, 1023,
	10990, -1000, 30474, 1007, 1007, -1000, 573, 572, 569, 552,
	-1000, -1000, -100, 16178, 1675, 1359, 20934, 1411, -1000, -1000,
	212, -1000, -1000, -1000, 916, -70, 12571, -77, 69, 9,
	-79, 20934, -1000, 426, 17072, -1000, 1354, -1000, 20934, 29917,
	-134, -1000, 1300, -1000, 209, 10990, 14669, -1000, -151, -1000,
	-84, -1000, 441, -89, 18558, -1000, 362, -170, -1000, 425,
	-1000, 441, 206, 20934, 18558, 10990, 10990, 30169, -91, -1000,
	2187, 2187, -1000, 27376, -1000, 29917, -1000, 29235, -1000, -1000,
	-1000, 910, -1000, 27352, -1000, -1000, -1000, -1000, 11632, 1247,
	203, 30474, 27031, -1000, -1000, 10990, -1000, -1000, -1000, -1000,
	-1000, 1290, -1000, -1000, 20934, 1030, -1000, -1000, 10990, 27390,
	201, 1221, 200, -1000, -1000, -1000, -1000, -1000, -1000, 1462,
	7, -1000, 856, -1000, -1000, 29917, 1423, -1000, -1000, 20934,
	20934, 199, 198, -1000, 196, 48, -93, -1000, 424, 621,
	-99, 20934, -1000, -1000, 5838, 20934, 873, -103, -1000, 1221,
	-1000, 873, 195, 17072, -1000, 1102, -115, -1000, 1552, -1000,
	20934, 29917, -1000, 441, -1000, 1627, 18558, 157, -1000, -1000,
	1134, -1000, 4911, 18558, 20934, -105, -1000, 2187, 2187, -1000,
	-1000, 68, 956, 1497, -1000, 27772, 11632, 30474, -107, -1000,
	26994, -1000, -1000, 1307, 26970, 1079, 20934, -1000, 20934, 1427,
	64, 20934, 495, 5530, -1000, -1000, 10990, 10990, 10990, 1675,
	-1000, -1000, 1674, 724, -1000, 463, -1000, 192, 1221, 873,
	-1000, 1221, 12571, -1000, 1109, 20934, 187, -114, 18558, -1000,
	-1000, 360, -1000, -1000, 1624, -1000, -120, -1000, -1000, 840,
	10990, 27772, -124, -1000, -1000, 1319, -1000, 963, 929, 61,
	-126, -1000, -1000, 179, -1000, 10990, -1000, -140, -141, -21,
	-1000, -1000, 15270, -1000, 20934, -1000, 1221, -1000, -142, -1000,
	-1000, -1000, -1000, -1000, 441, 191, -1000, 56, 10669, 10669,
	-134, -1000, 20934, -1000, 983, 964, 702, -1000, -1000, -1000,
	-1000, -1000, 1079, 29917, -1000, -1000, 55, -130, -148, -1000,
	873, 18558, -1000, -1000, -1000, -1000, 12263, 1012, 766, 28559,
	-1000, -1000, -1000, 1371, -1000, 492, 1029, 1029, 963, 1671,
	-1000, 993, 1221, -1000, 1600, -1000, -1000, -1000, -1000, -1000,
	-1000, 1607, -1000, -1000, 1132, -1000, -1000, -1000, -1000, -1000,
	-1000, 10348, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1975, 1974, 1488, 1591, 1971, 1970, 1587, 1969, 1968,
	1965, 1959, 1958, 1955, 127, 1554, 1545, 32, 1539, 1951,
	109, 1950, 1946, 1944, 121, 1943, 1940, 1938, 1937, 89,
	1936, 1934, 112, 1506, 1501, 1491, 1933, 1931, 119, 1929,
	1927, 14, 1926, 93, 1925, 45, 173, 2613, 171, 1924,
	1922, 1921, 21, 123, 91, 1917, 118, 1911, 1907, 43,
	39, 26, 22, 1900, 114, 134, 1265, 38, 1898, 1882,
	164, 1881, 27, 28, 102, 161, 159, 144, 139, 1879,
	1878, 1876, 1874, 59, 1872, 3, 1868, 1866, 18, 83,
	11, 1864, 30, 20, 1860, 1859, 146, 1857, 88, 115,
	1463, 126, 142, 218, 1854, 92, 10, 94, 1852, 1851,
	147, 40, 1850, 53, 96, 150, 1843, 60, 163, 75,
	50, 87, 125, 1839, 1837, 1836, 97, 1832, 129, 77,
	1828, 1827, 95, 1826, 149, 152, 1825, 1823, 111, 1821,
	143, 1819, 1818, 157, 168, 1817, 1814, 165, 1812, 1811,
	8, 42, 71, 15, 1486, 1465, 130, 70, 37, 25,
	1810, 1792, 1358, 877, 29, 100, 62, 65, 103, 61,
	69, 155, 44, 1809, 1806, 132, 1804, 1795, 1793, 1791,
	1789, 99, 1788, 1787, 78, 151, 17, 12, 16, 107,
	51, 140, 104, 135, 160, 131, 1786, 108, 137, 64,
	399, 1785, 1784, 1581, 141, 1783, 1782, 1781, 1575, 1181,
	1028, 204, 1780, 1778, 689, 208, 1777, 1776, 58, 1774,
	136, 133, 1760, 156, 357, 33, 1758, 57, 270, 110,
	1755, 124, 67, 0, 1967, 1703, 1754, 145, 98, 1747,
	1746, 1743, 1738, 31, 2, 9, 5, 6, 4, 84,
	56, 1735, 1733, 148, 23, 74, 1732, 162, 1730, 1728,
	1726, 54, 1722, 19, 1718, 13, 1717, 1716, 7, 1,
	1709, 1704, 154, 1701, 117, 1693, 1585, 1692, 158, 1690,
	1688, 1536, 41, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 54, 54, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 51, 51, 56, 56, 56, 58, 58, 55,
	55, 50, 50, 5, 5, 231, 231, 232, 232, 40,
	40, 44, 44, 41, 42, 42, 43, 43, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 102, 102, 101, 101,
	104, 104, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 199, 199, 198,
	19, 173, 173, 20, 20, 20, 20, 21, 127, 127,
	22, 22, 22, 22, 23, 28, 272, 272, 272, 276,
	276, 277, 277, 278, 278, 278, 278, 278, 278, 278,
	274, 274, 27, 27, 27, 27, 39, 31, 31, 31,
	31, 31, 31, 148, 144, 144, 146, 146, 146, 146,
	65, 143, 143, 143, 143, 145, 145, 145, 145, 149,
	149, 82, 82, 224, 223, 223, 229, 229, 229, 80,
	80, 80, 80, 80, 81, 81, 81, 222, 222, 222,
	222, 230, 230, 230, 230, 230, 230, 228, 228, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 18, 273, 273, 275, 275, 33,
	33, 34, 34, 35, 35, 35, 35, 10, 10, 11,
	11, 83, 83, 84, 84, 152, 152, 152, 152, 85,
	85, 57, 57, 57, 151, 241, 241, 242, 242, 242,
	242, 242, 242, 243, 243, 243, 243, 243, 243, 243,
	239, 239, 240, 237, 237, 238, 238, 238, 238, 279,
	279, 150, 150, 88, 88, 246, 246, 246, 246, 244,
	244, 244, 244, 244, 247, 245, 248, 248, 248, 248,
	248, 185, 185, 185, 37, 12, 63, 63, 13, 9,
	9, 131, 131, 92, 92, 190, 190, 190, 73, 73,
	52, 52, 52, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 132, 132, 133, 133, 25, 30,
	36, 36, 36, 36, 36, 281, 281, 69, 69, 69,
	69, 70, 70, 147, 147, 147, 147, 147, 64, 8,
	8, 59, 59, 60, 60, 61, 61, 62, 62, 282,
	282, 24, 24, 24, 76, 76, 140, 140, 140, 142,
	142, 141, 141, 141, 117, 117, 117, 38, 97, 97,
	106, 106, 107, 107, 196, 108, 108, 29, 29, 47,
	47, 45, 45, 45, 45, 45, 45, 46, 46, 48,
	48, 48, 48, 48, 48, 48, 254, 254, 254, 257,
	257, 253, 255, 255, 256, 256, 280, 280, 118, 118,
	118, 87, 86, 86, 90, 90, 89, 91, 91, 189,
	115, 115, 115, 115, 134, 134, 135, 135, 136, 136,
	137, 137, 137, 138, 138, 139, 139, 114, 114, 169,
	169, 49, 49, 96, 96, 98, 98, 159, 159, 159,
	160, 160, 158, 158, 158, 158, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 270, 270, 270, 271, 271,
	188, 188, 192, 192, 192, 192, 192, 192, 186, 186,
	186, 186, 187, 187, 197, 197, 121, 121, 121, 121,
	119, 119, 120, 120, 193, 193, 193, 193, 116, 116,
	194, 194, 194, 153, 153, 200, 200, 200, 218, 218,
	95, 95, 95, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	202, 202, 202, 202, 204, 204, 204, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 217, 217, 217, 217, 217, 205, 205, 212, 212,
	213, 213, 214, 215, 206, 206, 207, 207, 208, 209,
	216, 216, 216, 216, 220, 220, 210, 210, 210, 210,
	210, 211, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 129, 129, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	163, 163, 163, 163, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 249, 249, 249, 249, 249,
	249, 249, 251, 251, 252, 252, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 258, 258, 259, 259, 261, 261, 262,
	262, 263, 264, 264, 264, 265, 266, 266, 260, 260,
	267, 267, 267, 268, 268, 269, 269, 269, 269, 269,
	175, 175, 175, 176, 176, 177, 183, 183, 183, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 71, 71, 71, 71, 71,
	103, 103, 172, 172, 170, 170, 170, 174, 174, 122,
	122, 219, 219, 219, 219, 219, 219, 219, 123, 123,
	123, 130, 124, 124, 125, 125, 125, 125, 125, 125,
	166, 167, 126, 126, 126, 168, 168, 178, 182, 182,
	181, 180, 180, 179, 179, 156, 156, 157, 157, 155,
	154, 111, 111, 110, 110, 109, 109, 283, 283, 184,
	184, 112, 112, 113, 105, 105, 195, 195, 195, 195,
	99, 99, 78, 78, 100, 100, 74, 74, 77, 77,
	75, 75, 75, 75, 93, 93, 94, 94, 72, 72,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 221, 221, 221, 171, 66, 66, 66, 67, 67,
	68, 68, 226, 226, 226, 227, 227, 227, 227, 225,
	225, 225, 225, 225, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 3, 6,
	3, 4, 1, 5, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 1, 2,
	2, 1, 0, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 3, 4, 4, 4, 4, 2,
	4, 4, 4, 4, 4, 4, 2, 3, 3, 2,
	3, 3, 4, 2, 3, 4, 3, 3, 4, 4,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 6,
	6, 5, 5, 4, 12, 4, 12, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 7, 4, 6, 3,
	1, 5, 6, 9, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, -39, 23, 34, 225, 66, -8, -9, -10, -11,
	-12, -13, -256, 94, 103, 125, 206, 101, 87, 119,
	228, 235, -45, -47, 245, -148, 248, 35, 257, 60,
	97, 230, 223, 224, 282, 291, 68, -254, -48, -46,
	332, 307, 313, 239, -49, 266, 299, 335, 266, 134,
	80, 302, -272, -100, 266, 80, -75, -66, 325, 4,
	-233, -235, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 211,
	213, 214, 216, 217, 218, 219, 220, 223, 221, 222,
	224, 225, 226, 228, 230, 231, 233, 246, 247, 258,
	235, 236, 237, 238, 241, 242, 243, 245, 248, 250,
	253, 256, 257, 259, 262, 260, 255, 265, 267, 268,
	269, 270, 271, 278, 282, 283, 284, 285, 288, 289,
	290, 291, 293, 296, 297, 298, 303, 308, 309, 310,
	311, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	50, 51, 52, 55, 82, 84, 85, 100, 104, 105,
	111, 121, 123, 129, 130, 139, 141, 142, 143, 145,
	156, 170, 180, 182, 193, 197, 203, 205, 212, 232,
	240, 251, 252, 261, 263, 273, 274, 275, 279, 280,
	295, 299, 300, -272, -74, -66, 80, 89, 138, 290,
	289, 80, 134, 266, 302, -17, 332, -29, -7, -15,
	-4, -24, -38, -14, -32, -18, -33, -34, -35, -16,
	23, -225, 4, -233, -235, -234, -236, 57, 69, 118,
	137, 131, 147, 149, 157, 159, 172, 194, 196, 229,
	249, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 48, 49, 53, 56, 58, 64, 68, 72, 73,
	74, 75, 76, 77, 86, 88, 90, 91, 92, 95,
	97, 99, 106, 107, 108, 114, 116, 117, 119, 122,
	124, 132, 134, 136, 144, 146, 152, 155, 160, 162,
	163, 177, 178, 179, 185, 187, 188, 190, 191, 202,
	207, 215, 227, 239, 244, 254, 264, 266, 272, 276,
	277, 281, 286, 287, 292, 294, 301, 302, 304, 305,
	306, 307, -66, -66, -66, 206, 22, -276, 22, -277,
	-278, 68, 94, 119, 239, 138, 89, 289, -276, -70,
	235, -66, -144, 161, 242, 54, 232, 278, -145, -143,
	-224, 273, -149, -101, 171, -66, 4, 171, 244, 80,
	22, 34, 54, 59, 81, 120, 134, 135, 64, 65,
	151, 209, 161, 243, 267, 273, 278, 68, 293, 269,
	102, -281, 278, 278, -281, -281, -69, 278, 276, -70,
	4, 80, 244, 171, -280, 266, -229, -222, -185, 9,
	281, 106, 187, -228, 8, 324, -221, -227, 5, 7,
	323, 4, -233, -235, -234, 266, 292, 302, -131, 80,
	287, -46, -48, -47, -89, -90, 286, 144, 99, 191,
	-45, -47, -254, -257, 213, -253, -66, -257, -86, -87,
	22, 91, 336, -193, -74, 188, -113, 332, -3, -193,
	129, -74, -77, 129, -74, -66, -193, 129, 276, 336,
	-100, -93, -66, -155, -154, 334, 117, 117, 332, -110,
	-111, -154, -155, 117, 146, 146, -194, -193, -66, 129,
	-78, 129, -77, -102, 129, -101, -102, 129, -199, -198,
	-227, 299, 266, 134, -173, 332, -127, 332, -66, 22,
	187, 336, 187, -66, -144, 52, -144, 246, 332, -146,
	-64, -65, 148, 208, 276, 317, 117, 311, -229, -82,
	86, -104, 334, 54, -231, -228, 9, 246, 209, 243,
	117, -273, 187, 117, 117, 117, 117, 117, 209, 243,
	117, 311, 148, 208, 258, 266, 302, 117, 117, -147,
	-64, -65, -147, 276, -70, -116, -193, 8, 7, 7,
	-101, 129, -66, -101, 134, -66, 129, -89, -90, -115,
	-134, -135, 160, 108, 185, -118, 22, 91, -118, -118,
	44, 333, 333, 336, -257, -94, 332, -105, -195, -161,
	325, -163, 323, 324, 318, 177, 312, -175, -165, -178,
	100, 232, 332, -74, -164, 337, 9, -251, -47, 29,
	-176, -177, 48, -66, 7, 8, 5, 6, -72, -202,
	-171, -211, 281, 106, 179, -249, -250, 4, -233, -226,
	-203, -213, -207, -210, 145, 57, 73, 76, 74, 77,
	244, 292, 49, 28, 104, 105, 197, 203, 263, 279,
	280, 129, 180, 130, 55, 121, 156, 93, 37, 39,
	41, 42, 50, 51, 82, 84, 85, 111, 139, 141,
	142, 143, 182, 212, 251, 261, 274, 275, 300, -234,
	-214, -215, -208, -209, -216, -105, -113, 325, -74, 332,
	-112, -184, -161, 86, -54, 221, -53, 21, 23, 94,
	297, 100, 255, 270, 236, 255, 270, 236, 221, 100,
	337, 221, 221, 100, -231, -75, 336, -225, 325, -232,
	-231, 259, 333, -99, -74, -111, -194, -76, -74, -76,
	245, -66, 30, 100, -56, 336, 47, 226, 100, -56,
	336, 100, -56, 100, 333, 336, -193, 129, -77, 30,
	-172, -200, -201, -203, -212, -206, -210, -211, 40, 46,
	45, 271, 170, 240, 252, 295, 38, 186, 140, 139,
	141, 142, 143, 251, 37, 212, 111, 93, 85, 84,
	182, 42, 41, -214, -215, -208, -209, 82, 274, 275,
	145, 39, 51, 50, 300, 261, -103, -161, -272, -278,
	-272, 30, -143, -224, -103, 336, 336, 158, -81, 164,
	176, 126, -223, 86, -229, -223, 86, 71, -230, 5,
	4, -171, -185, 86, 161, -211, 334, -225, 247, -101,
	22, -224, -275, 114, -272, -224, -224, -224, -224, -224,
	-66, 158, -224, -224, 266, 134, 266, 336, 336, -70,
	-56, 336, 332, -88, 177, -255, 307, -88, 332, -67,
	129, -66, -255, 177, -115, -135, -134, -136, -161, 22,
	-139, 110, 173, -161, -163, -46, -46, -46, -91, -189,
	-161, -253, 30, -93, -96, 336, 117, 10, 11, 56,
	33, 323, 324, 325, 326, 112, 327, 328, 321, 322,
	320, 315, 316, 317, 62, 165, 234, 13, 14, 15,
	26, 190, 159, 312, 131, 249, 318, 16, 17, 18,
	147, 36, 132, -71, 30, 4, -79, -161, -161, -161,
	-161, -161, 196, -109, -156, 330, -47, 332, -47, -161,
	-103, 7, -47, -170, 330, -179, -161, -110, 332, 5,
	332, 5, -258, 308, 114, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 205, -220, 303, -220, -220, -204, 332, -204,
	-205, 332, -204, 309, 313, 332, -96, -74, 336, 333,
	336, 276, -132, 64, 58, -151, 129, 58, -237, -66,
	64, -238, 53, 287, 207, 116, -132, 64, -132, 64,
	64, -193, 33, -29, 117, 33, -29, 117, 276, -77,
	-66, 276, 276, -193, -197, 314, -66, -197, 336, 117,
	333, 336, -153, 305, -140, -29, 332, 86, 30, -140,
	-106, -107, -196, -108, -74, 332, -66, -66, -77, -78,
	-101, -102, -102, -17, -198, 100, -20, -29, -24, -38,
	-14, 333, 336, -95, 29, -128, 332, 310, 168, 83,
	127, 167, -129, 238, 333, 336, 276, 117, 278, 333,
	-65, -64, -80, 211, 253, 222, 241, 336, -225, -274,
	-66, -74, -77, -74, -65, -64, -193, -83, -93, -84,
	-66, -152, -151, -239, -240, -237, 134, 287, 107, 30,
	100, -63, 201, 30, 187, 177, -59, 268, 100, -137,
	-221, 332, 324, -138, 232, 233, 336, -52, 31, 90,
	332, 333, -153, -195, -98, -191, 330, -193, -74, -47,
	-192, 332, -218, -200, -217, 217, 218, 216, 220, 219,
	-200, -225, 273, -161, -161, -161, -161, -161, -161, -161,
	-161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
	-161, -161, -161, -161, -161, 159, 131, 249, 36, 132,
	-161, 276, -161, -161, -161, -161, 169, 177, 179, 281,
	106, 288, 91, 183, -283, 264, 32, -168, -47, 332,
	-183, 27, 254, 22, -225, -175, 232, 332, -156, -161,
	-157, -103, 333, 333, 336, -103, -174, 331, -170, -182,
	-181, 304, 333, -103, 301, 22, 91, 325, 7, -128,
	-259, 109, 122, 332, 333, 333, -161, -161, -122, -219,
	-103, 4, 310, 168, 83, 127, 167, 238, -122, -123,
	-161, -103, -124, -162, -163, 323, 324, 318, 332, 232,
	-125, -161, -103, -161, 43, 155, 277, -126, -161, 117,
	-103, -161, -161, -161, -103, -103, -103, 332, 7, 7,
	273, 273, 7, -153, 333, -184, -53, -74, -66, -66,
	177, -151, 129, -58, 177, -200, -66, 332, 332, 150,
	150, -66, -66, 129, -66, 129, -66, -66, -54, 221,
	-29, 332, -29, 332, -66, 221, -66, -74, 221, -40,
	128, 183, -43, 307, -231, 259, 117, -74, -117, 227,
	-161, -117, -142, 187, -99, 299, -66, -117, -97, 336,
	117, 317, -99, -56, -56, -56, -193, -200, 330, 330,
	7, 276, 276, 276, 276, 332, -161, -274, -274, -64,
	285, 61, 211, -229, 336, -197, 333, 333, 336, -67,
	134, -67, -29, -101, 5, -29, -74, 100, -60, 96,
	-282, 317, -66, -138, -161, -189, -20, -114, 122, -197,
	336, 69, -121, 149, 172, 118, 157, 229, 137, 7,
	103, -32, -158, 337, 332, -188, 313, -47, -192, -191,
	311, -161, -161, 276, -283, 264, -168, -161, 169, 179,
	281, 106, 288, 91, 183, 117, 332, -162, -162, -103,
	-165, 332, -103, 331, 340, 333, -161, 331, 331, 336,
	-180, -181, 95, -161, -90, 336, -89, -161, -103, -103,
	333, 333, -264, 195, 332, 332, -161, 30, 336, 333,
	117, 333, 333, -130, 202, 333, 10, 11, 323, 324,
	325, 326, 112, 327, 328, 321, 322, 320, 315, 316,
	317, 62, 165, 234, 13, 14, 15, 147, 132, -162,
	-162, -162, -103, 332, 333, -166, -167, 117, 114, 30,
	-126, -126, -126, 333, 117, -103, 336, 336, 336, 333,
	333, 333, 7, 333, 336, 333, 311, 311, 333, -114,
	276, 276, 100, 177, 296, -241, -238, -161, -92, -190,
	-66, -252, 332, -249, -250, -72, 332, 332, -51, 94,
	245, -133, 100, -56, 100, -56, 276, -132, 64, -103,
	-103, 276, 276, -43, 117, 265, 189, 259, -105, 178,
	-117, 63, 333, -153, -107, -98, -184, 333, 331, 7,
	7, 333, 168, 127, 167, -129, 167, -129, -129, 7,
	-66, -85, 133, -152, 332, -67, 332, 332, -88, 332,
	-66, -61, 154, -282, -228, -255, 188, 333, 333, -169,
	124, 44, -191, 149, 149, -191, -121, 149, -119, 194,
	-119, -119, -270, 332, -17, 332, 331, -188, -225, 330,
	338, -103, -187, -186, 30, -66, 192, 333, -161, -161,
	-162, -162, 117, 332, -161, -172, 26, 26, 333, -103,
	333, 336, -157, -161, 333, -170, 97, -161, 272, 333,
	301, -90, -90, -90, 5, -265, -66, 332, 305, -89,
	333, -218, -200, -161, -166, -161, -218, -200, -162, -162,
	-162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, -162, -162, 91, 177, 183,
	-162, 336, -103, 333, -167, -166, -161, -161, -200, 333,
	333, 333, -103, -161, -161, -161, 333, 7, -169, -66,
	-66, -151, 100, -242, 64, -243, 56, 107, 68, 177,
	179, 287, 207, 53, 86, 215, 333, 333, 336, -73,
	-110, 56, -73, -161, 332, -92, -93, 177, 86, 177,
	86, 79, 283, -66, -66, -74, -66, -66, 333, 333,
	-66, -74, -232, 273, 332, -141, 332, 187, -29, -117,
	317, 331, 331, 333, 132, -92, 332, -93, -83, 30,
	-92, 187, -62, 153, -282, -228, -59, -261, 306, -161,
	-103, -191, -191, -120, 294, 187, 149, -191, 331, 333,
	-271, 7, 331, -199, -188, -187, 7, -160, -159, 115,
	175, 333, -66, 332, -188, 26, 26, -161, -172, 333,
	-161, -161, 333, -161, 331, -161, 5, -161, 333, 333,
	333, -266, -66, -161, 333, 333, 333, -167, 117, 91,
	183, 332, -161, 333, 333, 336, 333, 333, 333, -261,
	-151, -66, -225, -66, 107, 129, 179, 150, 332, -162,
	-74, -150, -279, 67, 262, -190, -52, -225, -52, 333,
	-103, 333, 333, 179, 179, -161, -200, -56, -56, 276,
	276, 276, 276, -164, -72, -66, -42, -41, 5, 92,
	-93, 64, -113, -47, 332, 198, 333, -92, 333, 333,
	-29, 333, -74, -282, -228, -60, -262, -263, -66, -120,
	332, -161, -191, -158, 333, 336, -188, 333, -187, 331,
	336, 339, 317, -188, 332, -93, -186, -161, -161, 333,
	333, -90, -260, 200, 333, -162, 117, 332, -172, 333,
	-161, -243, -67, 177, -161, -68, 332, -85, 332, -73,
	-90, 215, -55, 56, -66, -66, 332, 332, 332, 336,
	333, -44, 317, 289, 178, 333, -66, -66, -150, 333,
	-85, -150, 332, -228, -61, 336, 30, -93, -188, 7,
	-187, -17, -159, -225, 330, -187, -93, 333, 333, -90,
	44, -162, -172, 333, 333, 100, 333, -246, 166, -66,
	-93, -52, 333, -74, -50, 294, -225, -103, -103, -103,
	-41, 5, 245, -153, 332, -85, -150, -85, -92, -62,
	-263, -265, 333, -186, 331, 7, 333, -267, 210, 233,
	-103, 333, 107, -244, -247, -245, 187, 118, 199, 250,
	333, 333, -88, -161, 333, 333, -90, -106, -93, -85,
	333, -188, 331, 333, -268, -269, 36, 284, 71, -161,
	-268, -66, -245, 187, -247, 187, 289, 89, -246, 333,
	-153, 333, -150, -187, -269, 204, 113, 232, 204, 113,
	-248, 174, 226, 47, 245, -248, -244, -57, 47, 226,
	-85, 26, 20, 179, 86, -269,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 445, 0, 0, 0, 0, 0,
	0, 0, 417, -2, 0, 162, 0, 366, 0, 366,
	366, 370, 0, 0, 447, 0, 332, 444, -2, 455,
	0, 0, 0, 453, 431, 0, 0, -2, 0, 0,
	0, 0, 0, 136, 0, 985, 914, 920, 921, 945,
	946, 947, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 0, 0, 916, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	0, 244, 959, 960, 961, 962, 963, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 122, 129, 130, 1038, 132, 0, 139, 140,
	141, 143, 144, 145, 146, 147, 148, 149, 0, 359,
	1063, 372, 157, 1015, 1068, 973, 1142, 1086, 165, 175,
	0, 1148, 178, 183, -2, 98, 209, 210, 211, 212,
	213, 0, 0, 0, 219, 246, 0, 0, 0, 0,
	0, 226, 0, 229, 233, 0, 0, 0, 240, 0,
	0, 377, 365, 377, 362, 363, 364, 367, 0, 358,
	152, 153, 154, 155, 0, 446, 156, 186, 187, 188,
	197, 198, 199, 200, 321, 0, 323, 207, 208, 941,
	0, 955, 956, 957, 958, 0, 0, 0, 0, 0,
	331, -2, 427, 428, -2, 0, 450, 450, 450, 0,
	0, 428, 0, 436, 1043, 439, 927, 437, 0, 0,
	452, 451, 0, 432, 534, 0, 481, 0, 2, 0,
	1126, 534, 0, 1126, 919, 0, 0, 1126, 0, 0,
	137, 138, 924, 922, 923, 0, 0, 0, 0, 917,
	893, 891, 892, 0, 0, 0, 0, 540, 88, 1126,
	56, 1126, 912, 56, 1126, 96, 56, 1126, 0, 117,
	119, 1154, 0, 0, 0, 0, 127, 0, 131, 133,
	0, 0, 0, 371, 158, 1115, 160, 0, 0, 164,
	166, 167, 0, 0, 0, 0, 0, 0, 179, 180,
	181, 99, 0, 0, 214, 65, 66, 0, 227, 230,
	0, 248, 0, 0, 0, 0, 0, 0, 228, 231,
	0, 234, 0, 236, 237, 0, 0, 0, 0, 360,
	373, 374, 361, 0, 369, 56, 538, 322, 943, 942,
	304, 1126, 443, 304, 949, 443, 1126, -2, 0, 423,
	462, 463, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 419, 420, 0, 438, 0, 0, 484, 904, 908,
	909, 638, 0, 0, 0, 0, 0, 0, 730, 732,
	1120, 1142, 0, 734, 735, 0, 737, 739, 740, 0,
	743, 744, 884, 916, 930, 931, 932, 933, 0, 0,
	936, 0, 938, 939, 940, 784, 753, -2, -2, 928,
	570, 571, 572, 573, -2, 1156, 757, 759, 761, 762,
	763, 764, 0, 1104, 1121, 1122, 1138, 1139, 1147, 1151,
	1152, 1126, 1135, 1127, 1116, 1124, 1133, 990, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 954,
	600, 601, 606, 607, 609, 484, 482, 535, 536, 0,
	0, 901, 899, 900, 33, 355, 35, 0, 355, 355,
	0, 0, 0, 0, 253, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 525, 915, 0, 889, 890, 525,
	67, 78, 0, 0, 910, 894, 544, 0, 394, 0,
	0, 541, 0, 0, 90, 0, 54, 55, 0, 92,
	0, 0, 94, 0, 445, 0, 0, 1126, 0, 445,
	0, 842, 552, 553, 554, 555, 556, 635, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 577,
	578, 579, 580, 581, 582, 583, 597, 0, 576, 576,
	576, 589, 590, 598, 599, 604, 605, 616, 617, 619,
	621, 615, 615, 615, 612, 613, 0, 840, 0, 142,
	0, 0, 161, 0, 0, 0, 0, 0, 170, 194,
	195, 196, 171, 173, 184, 172, 174, 176, 177, 201,
	202, 203, 204, 205, 206, 0, 0, 100, 217, 215,
	216, 218, 220, 0, 245, 221, 222, 223, 224, 225,
	232, 235, 238, 239, 0, 0, 0, 0, 0, 368,
	324, 0, 262, 0, 0, 327, 442, 0, 0, 0,
	1126, 948, 382, 0, 426, 460, 461, 464, 468, 469,
	472, 475, 476, 466, 638, 433, 434, 435, 456, 457,
	342, 440, 0, 0, 544, 0, 0, 0, 0, 0,
	0, 819, 820, 821, 822, 823, 824, 827, 828, 825,
	826, 829, 830, 831, 0, 0, 0, 832, 833, 834,
	0, 0, 836, 0, 838, 0, 0, 0, 0, 0,
	0, 898, 0, 0, 0, 907, 835, 643, 644, 645,
	667, 668, 0, 731, 895, 888, 733, 0, -2, 840,
	0, 736, 741, 742, 0, 0, 883, -2, 0, 935,
	0, 635, 786, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 863, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 603, 614, 611, 610, 587, 0, 586,
	584, 0, 588, 0, 0, 0, 544, 0, 0, 903,
	0, 0, 0, 0, 354, 37, 1126, 0, 58, 0,
	0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 252, 0, 0, 0,
	918, 0, 0, 0, 70, 0, 925, 77, 0, 0,
	0, 0, 406, 0, 406, 396, 0, 0, 0, 406,
	409, 410, 412, 413, 0, 0, 542, 89, 913, 56,
	97, 56, 56, 103, 118, 0, 120, 123, 124, 125,
	126, 121, 0, 545, 547, 557, 0, 622, 623, 624,
	625, 626, 627, 636, 128, 0, 0, 0, 0, 163,
	168, 169, 378, 0, 191, 0, 193, 0, 101, 247,
	150, 241, 242, 525, 375, 376, 539, 0, 0, 261,
	924, 263, 265, 266, 267, 268, 949, 0, 949, 0,
	0, 325, 0, 0, 0, 0, 384, 390, 0, 0,
	470, 0, 0, 467, 473, 474, 0, 459, 340, 341,
	445, 926, 478, 905, 525, 485, 0, 495, 534, 511,
	500, 0, 639, 548, 549, 591, 592, 593, 594, 595,
	640, 641, 0, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, -2, -2, -2, 659, 660, 661, -2,
	-2, -2, 665, 666, -2, 837, 839, 0, 898, 0,
	-2, 0, -2, -2, -2, -2, 679, 0, 681, 684,
	686, 688, 0, 0, 0, 0, 897, 698, 875, 0,
	0, 816, 817, 818, 906, 683, 0, 0, 896, 887,
	0, 0, -2, 738, 0, 0, 0, 846, 847, 882,
	878, 0, 745, 455, 0, 0, 0, 0, 0, 944,
	794, 0, 0, 0, 758, 760, 0, 0, 0, 0,
	850, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	840, 860, 0, 0, 701, 0, 0, 0, 0, 1142,
	0, 840, 868, 0, 0, 0, 0, 0, 840, 0,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 478, 537, 902, 36, 344, 0, 0,
	0, 39, 1126, 47, 0, 276, 0, 0, 0, 0,
	0, 357, 48, 1126, 56, 1126, 56, 49, 34, 355,
	249, 0, 250, 0, 348, 0, 343, 346, 0, 77,
	0, 0, 64, 0, 68, 79, 0, 911, 87, 0,
	543, 391, 406, 0, 0, 398, 395, 393, 544, 0,
	0, 0, 0, 91, 93, 95, 0, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 134, 135, 159,
	189, 190, 192, 185, 0, 243, 270, 303, 0, 0,
	949, 0, 259, 304, 326, 328, 0, 0, 386, 390,
	0, 389, 443, 0, 0, 458, 0, 480, 0, 483,
	0, 0, 0, 0, 0, 531, 531, 531, 529, 505,
	445, 0, 511, 0, 0, 523, 0, -2, 500, 0,
	0, -2, -2, 0, 0, 0, 699, -2, 680, 682,
	685, 687, 689, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 885, 888, -2, 841, 844, 845, 0,
	0, 879, 0, 0, 0, 0, 454, 455, 455, 455,
	751, 0, 752, 0, 0, 0, 0, 0, 0, 767,
	0, 768, 769, 0, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	705, 706, 0, 0, 771, 866, 867, 0, 0, 0,
	0, 0, 0, 776, 0, 873, 0, 0, 0, 780,
	781, 782, 0, 574, 0, 596, 618, 620, 608, 480,
	0, 0, 0, 0, 57, 274, 293, 0, 0, 333,
	339, 339, 0, 754, 755, 0, 0, 0, 41, 0,
	0, 0, 0, 45, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 80, 404, 405,
	392, 403, 0, 406, 411, 408, 414, 0, 550, 0,
	0, 558, 628, 629, 630, 631, 632, 633, 634, 0,
	151, 257, 0, 264, 0, 0, 0, 262, 0, 0,
	0, 388, 390, 0, 381, 382, 465, 471, 441, 788,
	0, 0, 486, 0, 0, 0, 0, 0, 526, 530,
	527, 528, 0, 0, 0, 0, 511, 523, 492, 0,
	0, 0, 499, 522, 0, 521, 510, -2, 642, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 876, 0,
	811, 0, 0, 887, -2, 848, 877, 881, 0, 746,
	0, 0, 0, 0, 937, 792, 793, 797, 0, 0,
	756, 0, 0, 849, 859, 861, 702, 703, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, -2, -2,
	-2, 720, 721, 722, -2, -2, -2, 0, 0, 0,
	862, 0, 0, 814, 864, 865, 870, 871, 0, 773,
	774, 775, 872, 0, 0, 0, 602, 0, 788, 350,
	352, 38, 0, 275, 0, 278, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 0, 295, 302, 0, 342,
	929, 0, 342, 0, 0, 0, 0, 0, 53, 0,
	0, 356, 0, 56, 56, 345, 0, 0, 0, 0,
	349, 347, 69, 0, 0, 0, 0, 0, 397, 407,
	0, 551, 546, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 379, 390, 0, 383, 384, 429, 0, 479,
	477, 513, 0, 515, 0, 0, 0, 517, 495, 506,
	0, 508, 511, 0, 523, 497, 0, 0, 490, 0,
	489, 511, 519, 0, 0, 0, 0, -2, 0, 692,
	-2, -2, 810, 841, 886, 880, 934, 455, 747, 749,
	750, 799, 796, 0, 783, 765, 766, 858, 0, 0,
	0, 0, 841, 813, 772, 0, 778, 779, 575, 430,
	40, 0, 279, 280, 949, 0, 283, 286, 0, 288,
	951, 270, 0, 299, 300, 334, 335, 338, 336, 339,
	455, 297, 0, 42, 43, 52, 60, 44, 50, 0,
	0, 0, 0, 524, 0, 0, 0, 74, 72, 0,
	0, 0, 415, 416, 0, 0, 302, 0, 292, 270,
	260, 302, 0, 0, 385, 386, 787, 789, 0, 514,
	0, 533, 516, 511, 507, 0, 523, 445, 504, 493,
	0, 494, 0, 523, 0, 0, 501, -2, -2, 693,
	812, 0, 455, 0, 785, -2, 0, 0, 0, 815,
	0, 277, 281, 0, 0, 308, 0, 296, 0, 342,
	0, 0, 62, 0, 351, 353, 0, 0, 0, 0,
	76, 73, 0, 0, 400, 544, 402, 0, 270, 302,
	258, 270, 0, 387, 388, 0, 0, 0, 0, 509,
	502, 0, 491, 487, 0, 498, 0, 520, 748, 802,
	0, -2, 0, 728, 777, 0, 287, 313, 0, 0,
	0, 337, 746, 304, 46, 0, 59, 0, 0, 455,
	75, 71, 0, 401, 0, 290, 270, 329, 0, 380,
	790, 791, 532, 496, 511, 0, 518, 0, 0, 0,
	798, 729, 0, 289, 309, 310, 0, 305, 306, 307,
	950, 301, 308, 61, 254, 256, 0, 544, 0, 291,
	302, 523, 488, 795, 800, 803, -2, 1089, 982, 0,
	801, 282, 311, 0, 312, 0, 0, 0, 313, 0,
	399, 273, 270, 503, 0, 805, 806, 807, 808, 809,
	314, 0, 317, 318, 0, 315, 298, 269, 271, 272,
	330, 0, 316, 319, 320, 804,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 321, 3, 327, 322, 3,
	332, 333, 325, 323, 336, 324, 334, 326, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 340, 335,
	315, 317, 316, 3, 337, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 330, 3, 331, 328, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 338, 320, 339, 318,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 319, 57658, 329, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:781
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:913
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:986
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:990
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1063
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{ /* SKIP DOC */
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1399
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			return unimplemented(sqllex, "set local")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{ /* SKIP DOC */
		}
	case 163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return unimplemented(sqllex, "set from current")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1508
		{
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = Low
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = Normal
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = High
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1724
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1728
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1752
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1756
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1760
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1803
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1807
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1813
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1817
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1821
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1825
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = DropDefault
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1910
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return unimplemented(sqllex, "match full")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return unimplemented(sqllex, "match partial")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return unimplemented(sqllex, "match simple")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2118
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2124
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2128
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			return unimplemented(sqllex, "no action")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2140
		{
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return unimplemented(sqllex, "action set null")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			return unimplemented(sqllex, "action set default")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = true
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = false
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2251
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2255
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = Ascending
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = Descending
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2309
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2310
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = true
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = false
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2324
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2357
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2366
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2367
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.str = ""
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.str = ""
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.str = ""
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.str = ""
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.str = ""
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.str = ""
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2490
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2554
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2558
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 407:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2589
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2818
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2822
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2825
		{
			return unimplemented(sqllex, "cte")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2828
		{
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2829
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2833
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2836
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2837
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = true
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = false
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = false
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = true
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2860
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2861
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2899
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2919
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2971
		{
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &From{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3066
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3111
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3128
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = nil
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = true
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = false
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.str = astFullJoin
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.str = astLeftJoin
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.str = astRightJoin
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.str = astInnerJoin
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3313
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3412
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3413
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3427
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3436
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3508
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = nil
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3653
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3685
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3725
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = year
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = month
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = day
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = hour
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = minute
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = month
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = hour
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = minute
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = minute
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = nil
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = second
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3820
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3855
		{
			return unimplemented(sqllex, "at tz")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4089
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4262
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4315
		{
			return unimplemented(sqllex, "variadic")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4316
		{
			return unimplemented(sqllex, "variadic")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4339
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			return unimplemented(sqllex, "func_application")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4360
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			return unimplemented(sqllex, "current role")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			return unimplemented(sqllex, "current user")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			return unimplemented(sqllex, "session user")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			return unimplemented(sqllex, "user")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4409
		{
			return unimplemented(sqllex, "treat")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4453
		{
			return unimplemented(sqllex, "within group")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4454
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = Window(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4489
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.str = ""
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4551
		{
			return unimplemented(sqllex, "frame range")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4553
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4557
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4566
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4567
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = Any
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = Some
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = All
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = Plus
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = Minus
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = Mult
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = Div
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = FloorDiv
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = Mod
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = Bitand
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = Bitor
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = Pow
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = Bitxor
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = LT
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = GT
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = EQ
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = LE
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = GE
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = NE
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Like
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = NotLike
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = ILike
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = NotILike
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4932
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5050
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5094
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5130
		{
			return unimplemented(sqllex, "func const")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5139
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = DNull
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.str = ""
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
