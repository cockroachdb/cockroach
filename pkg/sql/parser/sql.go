// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRACE = 57620
const TRANSACTION = 57621
const TREAT = 57622
const TRIM = 57623
const TRUE = 57624
const TRUNCATE = 57625
const TYPE = 57626
const UNBOUNDED = 57627
const UNCOMMITTED = 57628
const UNION = 57629
const UNIQUE = 57630
const UNKNOWN = 57631
const UPDATE = 57632
const UPSERT = 57633
const USE = 57634
const USER = 57635
const USERS = 57636
const USING = 57637
const UUID = 57638
const VALID = 57639
const VALIDATE = 57640
const VALUE = 57641
const VALUES = 57642
const VARCHAR = 57643
const VARIADIC = 57644
const VIEW = 57645
const VARYING = 57646
const WHEN = 57647
const WHERE = 57648
const WINDOW = 57649
const WITH = 57650
const WITHIN = 57651
const WITHOUT = 57652
const WRITE = 57653
const YEAR = 57654
const ZONE = 57655
const NOT_LA = 57656
const WITH_LA = 57657
const AS_LA = 57658
const POSTFIXOP = 57659
const UMINUS = 57660

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5602

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	337, 32,
	-2, 449,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 422,
	187, 422,
	227, 422,
	333, 422,
	335, 422,
	337, 422,
	-2, 432,
	-1, 68,
	1, 425,
	187, 425,
	227, 425,
	333, 425,
	335, 425,
	337, 425,
	-2, 431,
	-1, 77,
	1, 32,
	337, 32,
	-2, 449,
	-1, 447,
	1, 179,
	337, 179,
	-2, 1024,
	-1, 516,
	108, 459,
	160, 459,
	185, 459,
	-2, 428,
	-1, 519,
	108, 458,
	160, 458,
	185, 458,
	-2, 426,
	-1, 668,
	108, 458,
	160, 458,
	185, 458,
	-2, 429,
	-1, 728,
	334, 956,
	-2, 949,
	-1, 729,
	334, 957,
	-2, 950,
	-1, 735,
	5, 625,
	334, 625,
	-2, 1138,
	-1, 759,
	5, 586,
	-2, 1112,
	-1, 760,
	5, 619,
	334, 619,
	-2, 1114,
	-1, 761,
	5, 594,
	-2, 1115,
	-1, 762,
	5, 593,
	-2, 1116,
	-1, 763,
	5, 619,
	334, 619,
	-2, 1119,
	-1, 764,
	5, 619,
	334, 619,
	-2, 1120,
	-1, 765,
	5, 620,
	-2, 1123,
	-1, 766,
	5, 580,
	-2, 1124,
	-1, 767,
	5, 580,
	-2, 1125,
	-1, 768,
	5, 601,
	-2, 1129,
	-1, 769,
	5, 581,
	-2, 1134,
	-1, 770,
	5, 582,
	-2, 1135,
	-1, 771,
	5, 583,
	-2, 1136,
	-1, 772,
	5, 584,
	-2, 1137,
	-1, 773,
	5, 580,
	-2, 1142,
	-1, 774,
	5, 587,
	-2, 1147,
	-1, 775,
	5, 585,
	-2, 1150,
	-1, 776,
	5, 617,
	334, 617,
	-2, 1152,
	-1, 777,
	5, 621,
	-2, 1155,
	-1, 778,
	5, 623,
	-2, 1156,
	-1, 779,
	5, 616,
	334, 616,
	-2, 1161,
	-1, 1040,
	99, 432,
	108, 432,
	144, 432,
	160, 432,
	185, 432,
	191, 432,
	287, 432,
	-2, 744,
	-1, 1049,
	334, 933,
	-2, 921,
	-1, 1263,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 660,
	-1, 1264,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 661,
	-1, 1265,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 662,
	-1, 1269,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 666,
	-1, 1270,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 667,
	-1, 1271,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 668,
	-1, 1274,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 673,
	-1, 1280,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 675,
	-1, 1282,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 679,
	-1, 1283,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 680,
	-1, 1284,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 681,
	-1, 1285,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 682,
	-1, 1312,
	196, 815,
	-2, 818,
	-1, 1341,
	117, 855,
	334, 956,
	-2, 949,
	-1, 1342,
	117, 856,
	-2, 1108,
	-1, 1343,
	117, 857,
	-2, 1023,
	-1, 1344,
	117, 858,
	-2, 991,
	-1, 1345,
	117, 859,
	-2, 1007,
	-1, 1346,
	117, 860,
	-2, 1022,
	-1, 1347,
	117, 861,
	-2, 1070,
	-1, 1507,
	99, 432,
	108, 432,
	144, 432,
	160, 432,
	185, 432,
	191, 432,
	287, 432,
	-2, 515,
	-1, 1511,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 674,
	-1, 1512,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 676,
	-1, 1517,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 677,
	-1, 1535,
	196, 814,
	-2, 817,
	-1, 1727,
	1, 516,
	69, 516,
	99, 516,
	108, 516,
	118, 516,
	122, 516,
	124, 516,
	137, 516,
	144, 516,
	149, 516,
	157, 516,
	160, 516,
	172, 516,
	185, 516,
	187, 516,
	191, 516,
	227, 516,
	229, 516,
	287, 516,
	295, 516,
	306, 516,
	307, 516,
	316, 516,
	333, 516,
	335, 516,
	337, 516,
	338, 516,
	-2, 515,
	-1, 1729,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 678,
	-1, 1734,
	147, 0,
	-2, 694,
	-1, 1744,
	196, 816,
	-2, 819,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 721,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 722,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 723,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 727,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 728,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 729,
	-1, 1907,
	147, 0,
	-2, 695,
	-1, 1910,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 698,
	-1, 1911,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 700,
	-1, 2017,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 699,
	-1, 2018,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 701,
	-1, 2025,
	147, 0,
	-2, 730,
	-1, 2081,
	147, 0,
	-2, 731,
	-1, 2146,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 1111,
}

const sqlPrivate = 57344

const sqlLast = 31065

var sqlAct = [...]int{

	729, 2145, 1681, 2123, 1722, 2170, 2124, 2144, 2087, 1134,
	2125, 1142, 955, 1723, 1755, 520, 1951, 1997, 314, 1198,
	1872, 1977, 527, 67, 1898, 727, 1691, 719, 1505, 726,
	1815, 1829, 1227, 298, 90, 90, 90, 1502, 1478, 1883,
	1629, 1628, 541, 961, 1877, 852, 316, 90, 90, 90,
	502, 1197, 90, 1480, 565, 90, 705, 1202, 853, 1235,
	585, 1699, 1242, 90, 1596, 820, 507, 67, 1428, 1310,
	1595, 1546, 90, 90, 1492, 1216, 90, 957, 52, 90,
	90, 90, 90, 1708, 792, 90, 90, 1201, 704, 795,
	1045, 1234, 1422, 1094, 1175, 1143, 1103, 688, 1487, 1320,
	67, 1367, 1294, 1297, 1370, 556, 699, 1240, 307, 22,
	1159, 1126, 305, 30, 1223, 981, 304, 16, 917, 306,
	8, 797, 1338, 824, 286, 1191, 821, 1036, 689, 608,
	1168, 586, 501, 577, 698, 607, 1075, 1079, 578, 835,
	1205, 519, 1136, 446, 575, 1830, 986, 68, 530, 525,
	671, 300, 20, 672, 82, 432, 670, 493, 721, 442,
	1237, 915, 423, 828, 539, 498, 571, 546, 549, 676,
	539, 86, 69, 528, 651, 435, 652, 2010, 1534, 1172,
	2011, 524, 1135, 524, 491, 313, 22, 1503, 837, 285,
	30, 837, 1440, 2161, 16, 837, 817, 8, 2140, 811,
	2135, 1828, 722, 1178, 2134, 989, 990, 1178, 2131, 2121,
	73, 817, 1165, 547, 1439, 517, 2116, 2112, 484, 817,
	817, 2083, 2077, 1173, 1165, 817, 988, 1538, 992, 20,
	66, 2059, 1539, 1178, 1828, 1139, 538, 75, 2055, 544,
	516, 817, 551, 91, 2050, 2019, 532, 2049, 1165, 2007,
	2004, 991, 847, 2005, 2065, 1991, 43, 1006, 1828, 1988,
	1127, 1130, 817, 1174, 1171, 44, 1986, 1962, 1127, 1828,
	817, 76, 1961, 32, 1933, 1828, 1537, 1178, 443, 71,
	1912, 1178, 1490, 1178, 33, 57, 72, 45, 1909, 317,
	1130, 1165, 1490, 90, 90, 90, 90, 90, 90, 1901,
	507, 1849, 1178, 1848, 1178, 70, 1178, 997, 1827, 508,
	59, 1828, 1738, 987, 1791, 1178, 35, 583, 66, 1667,
	1662, 1613, 1133, 1133, 1614, 1741, 1611, 1464, 1178, 1178,
	1545, 1092, 1610, 1609, 1176, 1178, 1178, 48, 1535, 1467,
	1231, 1178, 817, 817, 43, 1182, 1177, 60, 1178, 1178,
	587, 47, 1164, 44, 1132, 1165, 1091, 1133, 846, 1090,
	1007, 847, 1468, 817, 1314, 1226, 1189, 838, 684, 49,
	838, 907, 554, 782, 838, 45, 598, 537, 525, 77,
	1831, 539, 560, 549, 929, 781, 1506, 622, 73, 2159,
	2143, 2130, 1891, 2092, 2078, 1989, 1938, 989, 990, 73,
	1934, 73, 1926, 1925, 504, 1924, 683, 1920, 1170, 1919,
	56, 1918, 1863, 1439, 1806, 75, 1857, 1801, 1800, 90,
	992, 1799, 1749, 1727, 1698, 1671, 75, 1618, 75, 1008,
	1169, 1669, 1615, 564, 90, 581, 1603, 90, 90, 580,
	580, 1594, 1565, 991, 1470, 1562, 1561, 987, 507, 76,
	1559, 1551, 1550, 572, 788, 507, 46, 71, 1466, 1384,
	76, 1504, 76, 1335, 72, 1334, 683, 1046, 682, 70,
	71, 1053, 1306, 62, 63, 34, 960, 72, 50, 841,
	61, 1757, 836, 1138, 90, 51, 953, 562, 2104, 73,
	90, 2062, 2048, 2047, 70, 54, 70, 2046, 56, 997,
	2038, 2036, 2027, 2014, 2000, 1984, 1948, 58, 1931, 1903,
	1866, 90, 90, 90, 1854, 90, 75, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 1834, 1733, 1713, 2142,
	90, 1689, 669, 64, 1687, 1686, 1684, 1637, 1636, 1593,
	1555, 90, 65, 508, 1566, 1567, 1554, 1531, 1526, 1299,
	76, 1455, 1007, 1413, 507, 90, 1411, 1398, 71, 1397,
	1377, 316, 507, 1856, 90, 72, 618, 1333, 1230, 90,
	90, 90, 1080, 90, 1307, 1083, 989, 990, 539, 818,
	787, 624, 1087, 1073, 70, 1072, 1071, 1070, 668, 1069,
	90, 90, 1068, 1067, 1066, 1065, 1064, 1063, 90, 992,
	90, 1062, 1061, 1060, 1059, 90, 1058, 1057, 1050, 1039,
	70, 954, 601, 603, 542, 507, 507, 606, 687, 826,
	625, 1008, 991, 316, 605, 594, 592, 2114, 90, 789,
	2009, 90, 786, 90, 90, 90, 90, 90, 90, 655,
	1914, 930, 1892, 90, 1398, 1888, 1572, 1862, 90, 90,
	657, 1861, 825, 653, 661, 90, 664, 539, 829, 829,
	560, 313, 1716, 1046, 1449, 1448, 90, 1566, 1567, 1037,
	788, 2052, 2012, 1481, 1860, 517, 1441, 959, 546, 549,
	815, 1127, 989, 990, 1085, 90, 1506, 614, 90, 1086,
	1617, 508, 679, 680, 780, 1616, 1566, 1567, 508, 898,
	516, 1510, 643, 685, 563, 992, 66, 985, 616, 617,
	906, 1001, 993, 994, 995, 996, 998, 999, 840, 625,
	1889, 843, 505, 1222, 850, 1055, 816, 625, 991, 572,
	615, 1221, 43, 958, 830, 827, 1423, 1878, 1135, 805,
	318, 44, 989, 990, 964, 913, 1758, 1321, 1076, 647,
	848, 1435, 900, 1624, 902, 2095, 1181, 1668, 803, 1542,
	509, 901, 2156, 45, 904, 992, 2157, 477, 1842, 1566,
	1567, 932, 2054, 804, 478, 925, 924, 918, 798, 1461,
	799, 1853, 525, 640, 997, 1972, 648, 937, 991, 289,
	1971, 90, 1970, 943, 1969, 859, 952, 508, 1572, 90,
	1052, 1096, 1652, 90, 317, 508, 483, 1648, 1042, 482,
	951, 90, 90, 1651, 1621, 90, 1096, 1620, 90, 1513,
	928, 1454, 1095, 968, 517, 967, 966, 517, 517, 1453,
	788, 293, 90, 983, 90, 90, 1452, 90, 290, 1451,
	90, 1281, 90, 90, 997, 90, 90, 1179, 507, 977,
	514, 800, 978, 979, 692, 1104, 1097, 1124, 508, 508,
	1049, 1570, 1571, 1573, 1574, 1155, 317, 614, 914, 67,
	798, 1572, 799, 1172, 67, 1123, 1120, 73, 654, 1089,
	1156, 553, 1381, 905, 2053, 294, 56, 1380, 1252, 808,
	1217, 539, 950, 1108, 1110, 490, 999, 1655, 587, 549,
	1077, 1078, 1953, 539, 75, 1081, 80, 1657, 806, 934,
	615, 1084, 938, 939, 940, 941, 942, 1173, 1107, 949,
	1146, 590, 1296, 807, 1582, 549, 946, 947, 549, 523,
	316, 931, 1129, 1088, 1425, 822, 604, 90, 76, 1100,
	1296, 2102, 1303, 800, 1121, 2167, 71, 1301, 1190, 90,
	90, 90, 831, 72, 90, 90, 1115, 1174, 1171, 1118,
	79, 90, 1676, 1113, 1162, 734, 886, 2156, 1161, 1321,
	1150, 1163, 1715, 1141, 522, 1125, 1176, 2178, 885, 1157,
	1137, 1153, 1137, 1154, 1151, 1152, 580, 1574, 580, 90,
	292, 291, 316, 1583, 509, 2127, 1232, 993, 994, 995,
	996, 998, 999, 1160, 1460, 644, 989, 990, 837, 1106,
	1251, 1568, 1569, 1570, 1571, 1573, 1574, 295, 1081, 1646,
	1084, 524, 1499, 638, 1429, 2173, 1433, 316, 1176, 992,
	1418, 1078, 1077, 1176, 1093, 2041, 510, 1193, 549, 1195,
	1415, 2118, 539, 1183, 297, 1304, 813, 1639, 1243, 1250,
	812, 948, 991, 589, 296, 801, 1462, 639, 515, 995,
	996, 998, 999, 511, 2119, 645, 1429, 798, 1074, 799,
	1409, 923, 922, 512, 504, 499, 2128, 1238, 1224, 1225,
	1212, 2023, 1985, 1194, 1568, 1569, 1570, 1571, 1573, 1574,
	1105, 508, 78, 1034, 90, 90, 90, 1954, 1383, 1553,
	90, 1709, 1170, 90, 826, 1220, 1726, 1495, 997, 90,
	90, 90, 90, 90, 1196, 646, 1233, 521, 1500, 524,
	1656, 90, 1696, 2126, 90, 90, 1498, 2129, 628, 81,
	809, 507, 2155, 2153, 90, 1566, 1567, 1318, 1707, 90,
	800, 90, 509, 1673, 1311, 808, 1496, 801, 90, 509,
	1353, 1315, 2171, 926, 1515, 1323, 2179, 1391, 2166, 90,
	1395, 1007, 629, 1308, 806, 627, 1340, 1340, 1351, 1305,
	1362, 611, 1295, 317, 1302, 1385, 1374, 1375, 1376, 807,
	90, 90, 1387, 1674, 1329, 1348, 1292, 838, 1871, 1214,
	507, 1185, 859, 859, 632, 599, 597, 1491, 1640, 675,
	1929, 1290, 1187, 1408, 2172, 1431, 485, 90, 1421, 90,
	1437, 90, 892, 1417, 1386, 90, 1964, 525, 1497, 90,
	2184, 1188, 1427, 2174, 1447, 1838, 1963, 825, 927, 1946,
	1008, 612, 1278, 1186, 613, 317, 825, 1572, 2033, 1623,
	1394, 1390, 90, 1215, 1672, 965, 1495, 539, 509, 2165,
	1469, 784, 1471, 67, 1176, 318, 509, 1424, 956, 1395,
	674, 945, 1434, 56, 1286, 1498, 1410, 796, 2088, 1412,
	317, 1442, 1287, 1899, 1288, 908, 1692, 1493, 1293, 1873,
	1787, 1947, 486, 1566, 1567, 1496, 1584, 1585, 1586, 783,
	1582, 1443, 1930, 1444, 1445, 973, 625, 1400, 1399, 1906,
	1494, 1509, 912, 1476, 859, 1457, 1458, 1465, 1463, 509,
	509, 1459, 673, 2183, 1886, 1885, 1837, 318, 674, 1446,
	525, 993, 994, 995, 996, 998, 999, 1276, 1279, 1704,
	1238, 1841, 1703, 1900, 1483, 1581, 1823, 675, 1840, 1544,
	910, 1486, 1485, 1162, 801, 1501, 1489, 1161, 611, 1508,
	1163, 570, 911, 569, 1473, 1275, 522, 1497, 974, 1583,
	421, 1472, 665, 886, 886, 1475, 1788, 1682, 859, 1824,
	673, 1864, 1789, 488, 508, 885, 885, 1289, 525, 1944,
	1700, 1514, 1160, 1516, 1291, 1572, 1420, 1488, 424, 1332,
	1598, 2026, 505, 500, 1928, 1597, 1732, 1654, 1560, 1525,
	1056, 1945, 1426, 859, 1529, 1180, 424, 1530, 1131, 429,
	1119, 1116, 1532, 650, 425, 649, 642, 637, 636, 1541,
	1587, 1523, 635, 1884, 1634, 634, 1635, 429, 1633, 1839,
	1548, 1549, 425, 508, 633, 630, 1521, 525, 1582, 426,
	90, 90, 568, 561, 1331, 1277, 487, 936, 1663, 1576,
	1568, 1569, 1570, 1571, 1573, 1574, 641, 426, 428, 2122,
	1819, 2085, 1820, 1592, 1812, 90, 1600, 1601, 1602, 90,
	1644, 90, 1642, 1622, 1605, 886, 428, 731, 90, 1477,
	1218, 507, 1619, 1210, 1158, 845, 1688, 885, 844, 842,
	1822, 90, 839, 1626, 90, 834, 814, 810, 1825, 1518,
	802, 1660, 1746, 1647, 316, 1479, 90, 1583, 1979, 1519,
	2157, 1228, 1653, 1524, 1685, 677, 1649, 567, 1650, 566,
	535, 83, 1718, 67, 920, 1981, 1666, 1658, 1146, 1238,
	976, 1717, 1665, 1693, 1714, 1664, 1408, 311, 25, 886,
	310, 24, 509, 1112, 1643, 1661, 1645, 1675, 1677, 1678,
	1702, 885, 2043, 1705, 90, 3, 1683, 1831, 858, 427,
	1695, 309, 23, 1751, 1752, 1753, 308, 11, 623, 1706,
	1229, 1821, 1735, 2080, 886, 1701, 681, 427, 1117, 1238,
	1710, 1711, 1238, 2066, 678, 1114, 885, 1869, 1491, 536,
	1578, 1579, 1580, 312, 10, 1577, 1575, 1576, 1568, 1569,
	1570, 1571, 1573, 1574, 1742, 558, 555, 559, 1096, 1721,
	430, 1213, 1520, 1209, 1111, 25, 1243, 1762, 24, 1522,
	1761, 90, 90, 90, 318, 1243, 1767, 1759, 430, 1766,
	1745, 420, 476, 543, 1764, 1096, 1739, 1495, 90, 23,
	1140, 1109, 984, 90, 11, 90, 1694, 90, 90, 90,
	903, 1167, 90, 90, 851, 507, 1498, 1836, 1798, 2181,
	1794, 2182, 1634, 1832, 1635, 2115, 1633, 1795, 1493, 1566,
	1567, 10, 989, 990, 1823, 2069, 1496, 1816, 1835, 1896,
	1811, 1808, 431, 659, 658, 1814, 318, 90, 90, 1818,
	1807, 1494, 479, 480, 507, 302, 9, 1679, 1792, 301,
	7, 1670, 714, 1612, 90, 90, 1867, 1824, 90, 1802,
	1634, 659, 1635, 1450, 1633, 1634, 507, 1635, 90, 1633,
	1852, 318, 1895, 1382, 508, 90, 1865, 1379, 1817, 859,
	1378, 1870, 1859, 303, 4, 1845, 87, 87, 287, 1868,
	489, 1851, 1328, 989, 990, 1894, 1874, 317, 1497, 415,
	416, 417, 1043, 660, 434, 1916, 1904, 448, 90, 2101,
	859, 859, 1978, 1881, 1882, 434, 587, 1887, 1754, 859,
	859, 1876, 1474, 9, 531, 531, 1893, 7, 287, 1908,
	1952, 287, 287, 550, 287, 989, 990, 87, 557, 991,
	1053, 1051, 1238, 1238, 525, 422, 1238, 935, 1819, 631,
	1820, 1890, 859, 1712, 2117, 1921, 1880, 1552, 992, 1996,
	2022, 4, 1330, 90, 1858, 90, 1054, 316, 90, 42,
	625, 1631, 708, 1813, 1625, 509, 90, 1204, 1822, 1927,
	1203, 991, 316, 319, 921, 1942, 1825, 730, 492, 1339,
	1244, 785, 732, 856, 888, 733, 857, 1082, 720, 854,
	1957, 1144, 1300, 1939, 1634, 1319, 1635, 90, 1633, 1875,
	1540, 1047, 1956, 700, 712, 1958, 711, 1316, 591, 1955,
	1940, 1897, 90, 445, 55, 507, 1980, 441, 1432, 90,
	1855, 1974, 887, 972, 509, 826, 1219, 90, 989, 990,
	969, 1641, 1634, 513, 1635, 90, 1633, 1563, 508, 2008,
	886, 1966, 593, 1982, 90, 90, 1360, 1352, 1987, 1821,
	1973, 992, 885, 1349, 1950, 1995, 656, 791, 2016, 1354,
	1035, 2006, 1999, 2015, 1145, 621, 2003, 1993, 899, 1438,
	2013, 886, 886, 2021, 991, 1166, 859, 508, 686, 1960,
	886, 886, 980, 885, 885, 90, 2002, 534, 533, 1199,
	619, 909, 885, 885, 2037, 858, 858, 1184, 1028, 508,
	1992, 1025, 481, 2035, 610, 609, 1211, 1393, 2177, 2042,
	90, 90, 2031, 886, 1638, 1238, 2040, 2028, 2094, 74,
	2051, 1976, 90, 1967, 1968, 885, 90, 1419, 2032, 31,
	997, 2039, 2060, 29, 507, 287, 573, 287, 448, 448,
	557, 90, 26, 2058, 21, 19, 18, 90, 2061, 313,
	28, 2070, 17, 316, 90, 90, 27, 15, 2075, 14,
	2067, 1990, 2064, 13, 12, 41, 40, 39, 38, 37,
	67, 2073, 2068, 36, 2076, 2072, 6, 90, 2079, 90,
	1994, 2071, 90, 1007, 316, 859, 5, 2, 1, 0,
	0, 0, 0, 0, 66, 0, 0, 0, 2090, 0,
	317, 2105, 2096, 525, 2107, 2103, 90, 858, 0, 90,
	855, 2100, 2091, 2082, 0, 317, 2106, 0, 0, 0,
	43, 2111, 2113, 2110, 0, 2109, 0, 0, 1634, 44,
	1635, 0, 1633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 2108, 90, 2132, 886, 0, 2139,
	0, 45, 1008, 0, 2137, 2136, 0, 0, 508, 885,
	0, 595, 0, 90, 2138, 0, 0, 2150, 0, 0,
	2093, 858, 2154, 0, 859, 2152, 600, 0, 0, 448,
	448, 2158, 90, 2141, 0, 0, 2163, 2160, 2164, 1354,
	1354, 2097, 2098, 2099, 0, 0, 0, 2162, 0, 2063,
	1566, 1567, 2176, 2175, 0, 2180, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 509, 0, 0, 0, 0,
	0, 0, 0, 2185, 0, 2120, 434, 0, 0, 0,
	0, 1146, 287, 0, 0, 0, 0, 0, 318, 0,
	1002, 1000, 1001, 993, 994, 995, 996, 998, 999, 0,
	1354, 1354, 1354, 448, 663, 448, 886, 666, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 885, 0,
	859, 0, 531, 0, 56, 0, 0, 508, 0, 0,
	0, 888, 888, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 317, 87, 0, 0,
	0, 0, 1572, 0, 0, 0, 287, 0, 0, 0,
	0, 287, 287, 287, 0, 832, 0, 0, 0, 887,
	887, 0, 0, 0, 0, 0, 76, 317, 0, 0,
	0, 0, 287, 287, 71, 0, 0, 0, 989, 990,
	87, 72, 87, 0, 0, 886, 0, 448, 0, 0,
	0, 0, 0, 0, 0, 1582, 0, 885, 0, 0,
	299, 992, 0, 0, 0, 0, 0, 0, 0, 0,
	448, 0, 0, 448, 0, 87, 448, 448, 448, 448,
	448, 0, 0, 0, 991, 944, 0, 0, 0, 509,
	448, 448, 0, 888, 1566, 1567, 0, 434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 1354,
	1354, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1583, 0, 0, 531, 509, 0,
	557, 887, 0, 0, 0, 0, 1566, 1567, 0, 0,
	997, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 0, 885, 0, 0, 0, 888, 0, 0,
	0, 0, 0, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
	1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
	1354, 1354, 0, 1354, 0, 1527, 1528, 0, 1581, 0,
	0, 0, 888, 1007, 0, 887, 1572, 0, 0, 0,
	0, 0, 690, 690, 0, 0, 0, 855, 855, 0,
	0, 793, 1577, 1575, 1576, 1568, 1569, 1570, 1571, 1573,
	1574, 0, 0, 0, 709, 53, 0, 0, 0, 0,
	887, 0, 858, 287, 0, 0, 0, 0, 1572, 0,
	0, 1101, 0, 0, 0, 287, 1589, 1590, 1591, 1582,
	0, 318, 0, 287, 1122, 0, 0, 287, 0, 0,
	1128, 0, 1008, 858, 858, 0, 318, 0, 0, 53,
	0, 0, 858, 858, 287, 0, 1148, 1149, 0, 287,
	0, 0, 287, 0, 448, 448, 0, 448, 557, 0,
	0, 1582, 518, 0, 0, 526, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 858, 0, 0, 0, 509,
	0, 0, 0, 0, 0, 0, 0, 0, 1583, 855,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 975, 0, 0, 0, 0, 0,
	982, 1000, 1001, 993, 994, 995, 996, 998, 999, 0,
	1583, 0, 1029, 1030, 1031, 1032, 1033, 0, 0, 0,
	0, 0, 1041, 0, 0, 0, 0, 0, 0, 1192,
	0, 0, 1048, 855, 0, 0, 0, 0, 0, 0,
	0, 287, 287, 287, 0, 0, 287, 1200, 0, 0,
	0, 0, 0, 557, 0, 1730, 1731, 1575, 1576, 1568,
	1569, 1570, 1571, 1573, 1574, 0, 0, 0, 855, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 318, 1577, 1575,
	1576, 1568, 1569, 1570, 1571, 1573, 1574, 0, 0, 1768,
	1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 318, 1790,
	0, 0, 0, 989, 990, 0, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 1354, 526, 0, 0, 0, 0, 991,
	0, 0, 0, 0, 0, 1006, 287, 1388, 1389, 0,
	0, 0, 1101, 0, 0, 1396, 0, 0, 858, 888,
	888, 1401, 1402, 1404, 1406, 1407, 887, 0, 888, 888,
	0, 0, 0, 1414, 0, 0, 1416, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 287, 0, 1436, 0, 997, 0, 887, 887, 0,
	287, 888, 0, 0, 0, 0, 887, 887, 0, 0,
	0, 287, 0, 0, 1016, 1024, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 1354, 1192, 1192, 0, 0, 0, 0, 0, 887,
	0, 0, 1014, 0, 0, 0, 0, 858, 1007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 963, 0, 448, 0, 0, 690, 287, 0, 0,
	0, 1482, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	1271, 1272, 1273, 1274, 287, 1280, 0, 1282, 1283, 1284,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1309, 1008, 0, 0,
	0, 0, 0, 0, 0, 1949, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 888, 0, 0, 1336, 1337,
	0, 0, 1350, 858, 1361, 1363, 1368, 1371, 1372, 1373,
	0, 0, 0, 0, 855, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 0, 0, 793,
	0, 0, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 855, 0, 0, 0,
	0, 0, 0, 0, 855, 855, 0, 1015, 0, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 0, 2025,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 1630, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 0,
	0, 0, 887, 989, 990, 0, 0, 0, 0, 1019,
	1020, 1021, 287, 287, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 982, 992, 0, 0, 1023,
	0, 518, 0, 0, 518, 518, 0, 1680, 0, 0,
	0, 1101, 0, 963, 0, 0, 0, 2081, 0, 991,
	1690, 0, 0, 888, 0, 1006, 1038, 0, 1040, 0,
	0, 0, 0, 287, 0, 1044, 287, 0, 0, 0,
	0, 0, 0, 0, 1511, 1512, 0, 0, 1725, 0,
	1517, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1566, 1567, 997, 1584, 1585, 1586, 0,
	0, 0, 0, 1536, 0, 0, 0, 0, 0, 0,
	1543, 0, 0, 1547, 1016, 1024, 1756, 0, 0, 0,
	0, 0, 1556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 1014, 0, 0, 1581, 0, 1041, 1007, 53,
	0, 0, 53, 1368, 1368, 1368, 0, 0, 0, 0,
	0, 1566, 1567, 0, 1584, 1585, 1586, 0, 0, 0,
	0, 0, 0, 53, 0, 53, 0, 887, 0, 0,
	855, 0, 0, 1809, 1810, 1101, 1627, 0, 0, 0,
	0, 53, 0, 0, 0, 1572, 53, 0, 0, 1630,
	557, 0, 0, 0, 0, 1843, 0, 1844, 0, 287,
	1846, 1847, 0, 1581, 1850, 287, 0, 1008, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1630, 1582, 557,
	1200, 0, 1630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1572, 0, 0, 287, 287, 0, 855,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1725, 0, 0, 1588, 0, 0, 0, 1902, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 1587, 1728,
	0, 0, 1729, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 1734, 0, 1582, 1583, 0, 0,
	1922, 0, 0, 1743, 0, 0, 0, 0, 0, 0,
	0, 1747, 0, 1239, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1763,
	0, 0, 0, 1765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 0, 0, 0, 1298,
	0, 0, 0, 0, 0, 1101, 0, 1941, 0, 0,
	1943, 0, 0, 0, 0, 1583, 1796, 1797, 287, 0,
	0, 1630, 0, 0, 0, 1803, 1804, 1805, 0, 0,
	1578, 1579, 1580, 0, 0, 1577, 1575, 1576, 1568, 1569,
	1570, 1571, 1573, 1574, 0, 0, 1975, 0, 0, 557,
	0, 1833, 0, 0, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 1998, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 1725, 0, 53,
	0, 0, 53, 0, 0, 0, 557, 1725, 1578, 1579,
	1580, 0, 0, 1577, 1575, 1576, 1568, 1569, 1570, 1571,
	1573, 1574, 0, 526, 0, 0, 0, 0, 0, 1879,
	989, 990, 0, 1009, 1010, 1011, 1019, 1020, 1021, 0,
	0, 0, 0, 0, 0, 0, 1012, 963, 0, 0,
	0, 0, 0, 992, 0, 0, 1023, 0, 0, 0,
	0, 1907, 0, 0, 0, 1910, 1911, 0, 0, 0,
	1913, 0, 2044, 2045, 0, 0, 991, 1915, 0, 1917,
	0, 0, 1006, 0, 2056, 0, 0, 1923, 2057, 0,
	0, 0, 0, 0, 53, 0, 0, 0, 53, 0,
	0, 0, 0, 557, 0, 0, 0, 0, 0, 1725,
	0, 0, 0, 0, 0, 53, 1725, 557, 0, 0,
	1932, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 2089,
	0, 557, 0, 0, 287, 1566, 1567, 0, 1584, 1585,
	1586, 1016, 1024, 0, 0, 0, 0, 0, 0, 0,
	0, 1905, 0, 0, 1298, 1630, 0, 1022, 1998, 1965,
	0, 1725, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 1040, 1007, 989, 990, 0, 1009,
	1010, 1011, 1019, 1020, 1021, 0, 0, 1581, 0, 0,
	0, 0, 1012, 0, 0, 287, 0, 557, 0, 992,
	1013, 0, 1023, 0, 2001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2151, 0, 0, 0, 0,
	0, 0, 991, 0, 2017, 2018, 0, 0, 1006, 0,
	0, 0, 0, 1040, 1725, 0, 0, 1572, 0, 0,
	0, 0, 989, 990, 1008, 1009, 1010, 1011, 1019, 1020,
	1021, 0, 0, 0, 2030, 0, 0, 0, 1012, 1017,
	0, 0, 0, 0, 0, 992, 0, 2034, 1023, 0,
	0, 0, 1587, 0, 0, 0, 0, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 991, 0,
	1582, 0, 0, 0, 1006, 0, 0, 1016, 1024, 0,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 0, 1239, 0, 0, 0, 0,
	0, 0, 0, 0, 1015, 1014, 0, 1003, 1004, 1005,
	1018, 1007, 1002, 1000, 1001, 993, 994, 995, 996, 998,
	999, 0, 0, 0, 997, 0, 0, 0, 1935, 0,
	0, 0, 0, 0, 0, 0, 1013, 0, 0, 1583,
	0, 0, 0, 1016, 1024, 1239, 0, 0, 1239, 0,
	0, 0, 0, 1566, 1567, 53, 1584, 1585, 1586, 1022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1737,
	0, 1014, 0, 0, 0, 0, 0, 1007, 0, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2133, 1017, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 1581, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2149, 2149, 0,
	0, 0, 1578, 1579, 1580, 0, 0, 1577, 1575, 1576,
	1568, 1569, 1570, 1571, 1573, 1574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2149, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 1572, 0, 0, 0, 0,
	1015, 1017, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000,
	1001, 993, 994, 995, 996, 998, 999, 0, 0, 0,
	2149, 0, 0, 0, 1608, 0, 0, 0, 0, 0,
	1587, 0, 0, 0, 0, 0, 0, 989, 990, 0,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 1582, 0,
	0, 0, 0, 1012, 0, 0, 0, 53, 0, 0,
	992, 0, 0, 1023, 0, 0, 1015, 0, 0, 1003,
	1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995,
	996, 998, 999, 991, 0, 0, 0, 0, 0, 1006,
	1607, 0, 0, 0, 0, 0, 0, 0, 1239, 1239,
	0, 0, 1239, 0, 0, 0, 0, 0, 0, 0,
	526, 0, 0, 0, 0, 0, 0, 1583, 0, 0,
	0, 0, 0, 0, 876, 868, 893, 860, 884, 883,
	0, 0, 862, 861, 0, 0, 0, 895, 894, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1016, 1024,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 889,
	0, 881, 880, 0, 1022, 0, 0, 0, 0, 0,
	879, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 878, 0,
	1578, 1579, 1580, 0, 0, 1577, 1575, 1576, 1568, 1569,
	1570, 1571, 1573, 1574, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 871, 870, 872, 873,
	874, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1983, 0, 864, 0, 0,
	0, 1008, 0, 0, 53, 0, 0, 0, 0, 882,
	0, 0, 0, 869, 0, 0, 1017, 0, 0, 0,
	0, 1239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 1247, 1245, 1246, 1249, 1248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 866,
	0, 1015, 0, 0, 1003, 1004, 1005, 1018, 897, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 863, 0,
	0, 890, 891, 0, 0, 1606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1040,
	0, 0, 0, 867, 0, 0, 0, 315, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 92, 93, 334, 94, 335, 336, 337,
	338, 233, 339, 340, 341, 342, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 343, 99, 240, 241,
	100, 344, 345, 242, 243, 244, 346, 101, 245, 347,
	320, 348, 102, 103, 104, 0, 105, 349, 106, 107,
	108, 350, 321, 109, 110, 351, 352, 353, 354, 355,
	356, 111, 112, 288, 113, 246, 114, 247, 248, 357,
	115, 358, 116, 359, 360, 361, 117, 118, 362, 119,
	363, 0, 364, 249, 120, 121, 122, 250, 251, 365,
	366, 367, 123, 124, 252, 0, 125, 368, 126, 369,
	370, 322, 371, 127, 253, 372, 254, 373, 128, 129,
	130, 131, 255, 256, 324, 374, 135, 375, 132, 376,
	323, 133, 257, 134, 258, 259, 260, 377, 261, 378,
	325, 136, 326, 137, 138, 379, 140, 139, 380, 262,
	327, 141, 328, 381, 142, 382, 383, 143, 0, 144,
	145, 146, 148, 263, 147, 329, 149, 150, 152, 151,
	384, 385, 386, 264, 153, 265, 154, 155, 387, 156,
	388, 389, 157, 390, 391, 158, 266, 330, 159, 331,
	267, 160, 161, 162, 163, 392, 268, 164, 269, 165,
	393, 166, 167, 168, 169, 270, 170, 171, 394, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	395, 183, 332, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 396, 272, 194, 195, 196, 397, 197, 187,
	188, 198, 333, 199, 273, 274, 200, 398, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 399, 207, 400,
	208, 209, 210, 211, 212, 401, 277, 278, 279, 402,
	403, 213, 214, 280, 281, 404, 215, 216, 217, 218,
	405, 406, 219, 220, 221, 222, 407, 223, 408, 282,
	224, 225, 226, 283, 284, 409, 410, 227, 411, 412,
	413, 414, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 1719, 0, 0, 0, 0,
	0, 0, 0, 1720, 92, 93, 334, 94, 335, 336,
	337, 338, 233, 339, 340, 341, 342, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 343, 99, 240,
	241, 100, 344, 345, 242, 243, 244, 346, 101, 245,
	347, 320, 348, 102, 103, 104, 0, 105, 349, 106,
	107, 108, 350, 321, 109, 110, 351, 352, 353, 354,
	355, 356, 111, 112, 288, 113, 246, 114, 247, 248,
	357, 115, 358, 116, 359, 360, 361, 117, 118, 362,
	119, 363, 0, 364, 249, 120, 121, 122, 250, 251,
	365, 366, 367, 123, 124, 252, 0, 125, 368, 126,
	369, 370, 322, 371, 127, 253, 372, 254, 373, 128,
	129, 130, 131, 255, 256, 324, 374, 135, 375, 132,
	376, 323, 133, 257, 134, 258, 259, 260, 377, 261,
	378, 325, 136, 326, 137, 138, 379, 140, 139, 380,
	262, 327, 141, 328, 381, 142, 382, 383, 143, 0,
	144, 145, 146, 148, 263, 147, 329, 149, 150, 152,
	151, 384, 385, 386, 264, 153, 265, 154, 155, 387,
	156, 388, 389, 157, 390, 391, 158, 266, 330, 159,
	331, 267, 160, 161, 162, 163, 392, 268, 164, 269,
	165, 393, 166, 167, 168, 169, 270, 170, 171, 394,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 395, 183, 332, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 396, 272, 194, 195, 196, 397, 197,
	187, 188, 198, 333, 199, 273, 274, 200, 398, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 399, 207,
	400, 208, 209, 210, 211, 212, 401, 277, 278, 279,
	402, 403, 213, 214, 280, 281, 404, 215, 216, 217,
	218, 405, 406, 219, 220, 221, 222, 407, 223, 408,
	282, 224, 225, 226, 283, 284, 409, 410, 227, 411,
	412, 413, 414, 228, 229, 230, 231, 232, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2074, 92, 93, 334,
	94, 335, 336, 337, 338, 233, 339, 340, 341, 342,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	343, 99, 240, 241, 100, 344, 345, 242, 243, 244,
	346, 101, 245, 347, 320, 348, 102, 103, 104, 0,
	105, 349, 106, 107, 108, 350, 321, 109, 110, 351,
	352, 353, 354, 355, 356, 111, 112, 288, 113, 246,
	114, 247, 248, 357, 115, 358, 116, 359, 360, 361,
	117, 118, 362, 119, 363, 0, 364, 249, 120, 121,
	122, 250, 251, 365, 366, 367, 123, 124, 252, 0,
	125, 368, 126, 369, 370, 322, 371, 127, 253, 372,
	254, 373, 128, 129, 130, 131, 255, 256, 324, 374,
	135, 375, 132, 376, 323, 133, 257, 134, 258, 259,
	260, 377, 261, 378, 325, 136, 326, 137, 138, 379,
	140, 139, 380, 262, 327, 141, 328, 381, 142, 382,
	383, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 384, 385, 386, 264, 153, 265,
	154, 155, 387, 156, 388, 389, 157, 390, 391, 158,
	266, 330, 159, 331, 267, 160, 161, 162, 163, 392,
	268, 164, 269, 165, 393, 166, 167, 168, 169, 270,
	170, 171, 394, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 395, 183, 332, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 396, 272, 194, 195,
	196, 397, 197, 187, 188, 198, 333, 199, 273, 274,
	200, 398, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 399, 207, 400, 208, 209, 210, 211, 212, 401,
	277, 278, 279, 402, 403, 213, 214, 280, 281, 404,
	215, 216, 217, 218, 405, 406, 219, 220, 221, 222,
	407, 223, 408, 282, 224, 225, 226, 283, 284, 409,
	410, 227, 411, 412, 413, 414, 228, 229, 230, 231,
	232, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 92, 93, 334,
	94, 335, 336, 337, 338, 233, 339, 340, 341, 342,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	343, 99, 240, 241, 100, 344, 345, 242, 243, 244,
	346, 101, 245, 347, 320, 348, 102, 103, 104, 0,
	105, 349, 106, 107, 108, 350, 321, 109, 110, 351,
	352, 353, 354, 355, 356, 111, 112, 288, 113, 246,
	114, 247, 248, 357, 115, 358, 116, 359, 360, 361,
	117, 118, 362, 119, 363, 0, 364, 249, 120, 121,
	122, 250, 251, 365, 366, 367, 123, 124, 252, 0,
	125, 368, 126, 369, 370, 322, 371, 127, 253, 372,
	254, 373, 128, 129, 130, 131, 255, 256, 324, 374,
	135, 375, 132, 376, 323, 133, 257, 134, 258, 259,
	260, 377, 261, 378, 325, 136, 326, 137, 138, 379,
	140, 139, 380, 262, 327, 141, 328, 381, 142, 382,
	383, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 384, 385, 386, 264, 153, 265,
	154, 155, 387, 156, 388, 389, 157, 390, 391, 158,
	266, 330, 159, 331, 267, 160, 161, 162, 163, 392,
	268, 164, 269, 165, 393, 166, 167, 168, 169, 270,
	170, 171, 394, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 395, 183, 332, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 396, 272, 194, 195,
	196, 397, 197, 187, 188, 198, 333, 199, 273, 274,
	200, 398, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 399, 207, 400, 208, 209, 210, 211, 212, 401,
	277, 278, 279, 402, 403, 213, 214, 280, 281, 404,
	215, 216, 217, 218, 405, 406, 219, 220, 221, 222,
	407, 223, 408, 282, 224, 225, 226, 283, 284, 409,
	410, 227, 411, 412, 413, 414, 228, 229, 230, 231,
	232, 728, 717, 718, 715, 716, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 744, 710, 0, 0, 0,
	95, 96, 97, 234, 759, 236, 760, 98, 761, 762,
	0, 99, 240, 241, 100, 713, 743, 763, 764, 244,
	0, 101, 755, 0, 736, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 321, 109, 110, 0,
	737, 739, 0, 738, 740, 111, 112, 288, 113, 765,
	114, 766, 767, 794, 115, 0, 116, 0, 0, 0,
	758, 118, 0, 119, 0, 0, 0, 701, 120, 121,
	122, 745, 746, 724, 0, 0, 123, 124, 768, 0,
	125, 0, 126, 0, 0, 322, 0, 127, 756, 0,
	254, 0, 128, 129, 130, 131, 752, 754, 324, 0,
	135, 0, 132, 0, 323, 133, 769, 134, 770, 771,
	772, 0, 735, 0, 325, 136, 326, 137, 138, 0,
	140, 139, 0, 757, 327, 141, 328, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 696, 0, 725, 753, 153, 773,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 330, 159, 331, 747, 160, 161, 162, 163, 0,
	748, 164, 269, 165, 0, 166, 167, 168, 169, 774,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 332, 184, 185, 702,
	186, 0, 190, 191, 192, 193, 73, 272, 194, 195,
	196, 741, 197, 187, 188, 198, 333, 199, 775, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 776, 204,
	749, 0, 207, 75, 208, 209, 210, 211, 212, 0,
	277, 777, 778, 0, 0, 213, 214, 750, 751, 723,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	742, 223, 0, 282, 224, 225, 226, 588, 779, 0,
	0, 227, 0, 0, 0, 71, 228, 229, 230, 231,
	232, 697, 72, 0, 0, 0, 0, 695, 0, 0,
	0, 0, 693, 694, 728, 717, 718, 715, 716, 707,
	0, 703, 0, 0, 0, 0, 706, 0, 0, 0,
	92, 93, 1325, 94, 0, 0, 0, 0, 744, 710,
	0, 0, 0, 95, 96, 97, 234, 759, 236, 760,
	98, 761, 762, 0, 99, 240, 241, 100, 713, 743,
	763, 764, 244, 0, 101, 755, 0, 736, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 321,
	109, 110, 0, 737, 739, 0, 738, 740, 111, 112,
	288, 113, 765, 114, 766, 767, 0, 115, 0, 116,
	0, 1326, 0, 758, 118, 0, 119, 0, 0, 0,
	701, 120, 121, 122, 745, 746, 724, 0, 0, 123,
	124, 768, 0, 125, 0, 126, 0, 0, 322, 0,
	127, 756, 0, 254, 0, 128, 129, 130, 131, 752,
	754, 324, 0, 135, 0, 132, 0, 323, 133, 769,
	134, 770, 771, 772, 0, 735, 0, 325, 136, 326,
	137, 138, 0, 140, 139, 0, 757, 327, 141, 328,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 329, 149, 150, 152, 151, 696, 0, 725,
	753, 153, 773, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 330, 159, 331, 747, 160, 161,
	162, 163, 0, 748, 164, 269, 165, 0, 166, 167,
	168, 169, 774, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 332,
	184, 185, 702, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 741, 197, 187, 188, 198, 333,
	199, 775, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 776, 204, 749, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 777, 778, 0, 0, 213, 214,
	750, 751, 723, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 742, 223, 0, 282, 224, 225, 226,
	283, 779, 1324, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 697, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 693, 694, 1327, 728, 717,
	718, 715, 716, 707, 703, 1322, 0, 0, 0, 706,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 744, 710, 0, 0, 0, 95, 96, 97,
	234, 759, 236, 760, 98, 761, 762, 0, 99, 240,
	241, 100, 713, 743, 763, 764, 244, 0, 101, 755,
	0, 736, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 321, 109, 110, 0, 737, 739, 0,
	738, 740, 111, 112, 288, 113, 765, 114, 766, 767,
	0, 115, 0, 116, 0, 0, 0, 758, 118, 0,
	119, 0, 0, 0, 701, 120, 121, 122, 745, 746,
	724, 0, 0, 123, 124, 768, 0, 125, 0, 126,
	0, 0, 322, 0, 127, 756, 0, 254, 0, 128,
	129, 130, 131, 752, 754, 324, 0, 135, 0, 132,
	0, 323, 133, 769, 134, 770, 771, 772, 0, 735,
	0, 325, 136, 326, 137, 138, 0, 140, 139, 0,
	757, 327, 141, 328, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 329, 149, 150, 152,
	151, 696, 0, 725, 753, 153, 773, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 330, 159,
	331, 747, 160, 161, 162, 163, 0, 748, 164, 269,
	165, 0, 166, 167, 168, 169, 774, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 332, 184, 185, 702, 186, 0, 190,
	191, 192, 193, 73, 272, 194, 195, 196, 741, 197,
	187, 188, 198, 333, 199, 775, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 776, 204, 749, 0, 207,
	75, 208, 209, 210, 211, 212, 0, 277, 777, 778,
	0, 0, 213, 214, 750, 751, 723, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 742, 223, 0,
	282, 224, 225, 226, 588, 779, 0, 0, 227, 0,
	0, 0, 71, 228, 229, 230, 231, 232, 697, 72,
	0, 0, 0, 0, 695, 0, 0, 0, 0, 693,
	694, 728, 717, 718, 715, 716, 707, 0, 703, 0,
	0, 0, 0, 706, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 744, 710, 0, 0, 0,
	95, 96, 97, 234, 759, 236, 760, 98, 761, 762,
	1364, 99, 240, 241, 100, 713, 743, 763, 764, 244,
	0, 101, 755, 0, 736, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 321, 109, 110, 0,
	737, 739, 0, 738, 740, 111, 112, 288, 113, 765,
	114, 766, 767, 0, 115, 0, 116, 0, 0, 0,
	758, 118, 0, 119, 0, 0, 0, 701, 120, 121,
	122, 745, 746, 724, 0, 0, 123, 124, 768, 0,
	125, 0, 126, 0, 1369, 322, 0, 127, 756, 0,
	254, 0, 128, 129, 130, 131, 752, 754, 324, 0,
	135, 0, 132, 0, 323, 133, 769, 134, 770, 771,
	772, 0, 735, 0, 325, 136, 326, 137, 138, 0,
	140, 139, 1365, 757, 327, 141, 328, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 696, 0, 725, 753, 153, 773,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 330, 159, 331, 747, 160, 161, 162, 163, 0,
	748, 164, 269, 165, 0, 166, 167, 168, 169, 774,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 332, 184, 185, 702,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 741, 197, 187, 188, 198, 333, 199, 775, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 776, 204,
	749, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 777, 778, 0, 1366, 213, 214, 750, 751, 723,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	742, 223, 0, 282, 224, 225, 226, 283, 779, 0,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 697, 0, 0, 0, 0, 0, 695, 0, 0,
	0, 0, 693, 694, 728, 717, 718, 715, 716, 707,
	0, 703, 0, 0, 0, 0, 706, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 744, 710,
	0, 0, 0, 95, 96, 97, 234, 759, 236, 760,
	98, 761, 762, 0, 99, 240, 241, 100, 713, 743,
	763, 764, 244, 0, 101, 755, 0, 736, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 321,
	109, 110, 0, 737, 739, 0, 738, 740, 111, 112,
	288, 113, 765, 114, 766, 767, 0, 115, 0, 116,
	0, 0, 0, 758, 118, 0, 119, 0, 0, 0,
	701, 120, 121, 122, 745, 746, 724, 0, 0, 123,
	124, 768, 0, 125, 0, 126, 0, 0, 322, 0,
	127, 756, 0, 254, 0, 128, 129, 130, 131, 752,
	754, 324, 0, 135, 0, 132, 0, 323, 133, 769,
	134, 770, 771, 772, 0, 735, 0, 325, 136, 326,
	137, 138, 0, 140, 139, 0, 757, 327, 141, 328,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 329, 149, 150, 152, 151, 696, 1659, 725,
	753, 153, 773, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 330, 159, 331, 747, 160, 161,
	162, 163, 0, 748, 164, 269, 165, 0, 166, 167,
	168, 169, 774, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 332,
	184, 185, 702, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 741, 197, 187, 188, 198, 333,
	199, 775, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 776, 204, 749, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 777, 778, 0, 0, 213, 214,
	750, 751, 723, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 742, 223, 0, 282, 224, 225, 226,
	283, 779, 0, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 697, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 693, 694, 691, 728, 717,
	718, 715, 716, 707, 703, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 744, 710, 0, 0, 0, 95, 96, 97,
	234, 759, 236, 760, 98, 761, 762, 0, 99, 240,
	241, 100, 713, 743, 763, 764, 244, 0, 101, 755,
	0, 736, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 321, 109, 110, 0, 737, 739, 0,
	738, 740, 111, 112, 288, 113, 765, 114, 766, 767,
	0, 115, 0, 116, 0, 0, 0, 758, 118, 0,
	119, 0, 0, 0, 701, 120, 121, 122, 745, 746,
	724, 0, 0, 123, 124, 768, 0, 125, 0, 126,
	0, 0, 322, 0, 127, 756, 0, 254, 0, 128,
	129, 130, 131, 752, 754, 324, 0, 135, 0, 132,
	0, 323, 133, 769, 134, 770, 771, 772, 0, 735,
	0, 325, 136, 326, 137, 138, 0, 140, 139, 0,
	757, 327, 141, 328, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 329, 149, 150, 152,
	151, 696, 0, 725, 753, 153, 773, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 330, 159,
	331, 747, 160, 161, 162, 163, 0, 748, 164, 269,
	165, 0, 166, 167, 168, 169, 774, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 332, 184, 185, 702, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 741, 197,
	187, 188, 198, 333, 199, 775, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 776, 204, 749, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 777, 778,
	0, 0, 213, 214, 750, 751, 723, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 742, 223, 0,
	282, 224, 225, 226, 283, 779, 0, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 697, 0,
	0, 0, 0, 0, 695, 0, 0, 0, 0, 693,
	694, 0, 0, 0, 0, 0, 1046, 1317, 703, 0,
	0, 0, 0, 706, 728, 717, 718, 715, 716, 707,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 744, 710,
	0, 0, 0, 95, 96, 97, 234, 759, 236, 760,
	98, 761, 762, 0, 99, 240, 241, 100, 713, 743,
	763, 764, 244, 0, 101, 755, 0, 736, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 321,
	109, 110, 0, 737, 739, 0, 738, 740, 111, 112,
	288, 113, 765, 114, 766, 767, 0, 115, 0, 116,
	0, 0, 0, 758, 118, 0, 119, 0, 0, 0,
	701, 120, 121, 122, 745, 746, 724, 0, 0, 123,
	124, 768, 0, 125, 0, 126, 0, 0, 322, 0,
	127, 756, 0, 254, 0, 128, 129, 130, 131, 752,
	754, 324, 0, 135, 0, 132, 0, 323, 133, 769,
	134, 770, 771, 772, 0, 735, 0, 325, 136, 326,
	137, 138, 0, 140, 139, 0, 757, 327, 141, 328,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 329, 149, 150, 152, 151, 696, 0, 725,
	753, 153, 773, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 330, 159, 331, 747, 160, 161,
	162, 163, 0, 748, 164, 269, 165, 0, 166, 167,
	168, 169, 774, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 332,
	184, 185, 702, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 741, 197, 187, 188, 198, 333,
	199, 775, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 776, 204, 749, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 777, 778, 0, 0, 213, 214,
	750, 751, 723, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 742, 223, 0, 282, 224, 225, 226,
	283, 779, 0, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 697, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 693, 694, 728, 717, 718,
	715, 716, 707, 0, 703, 1793, 0, 0, 0, 706,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 744, 710, 0, 0, 0, 95, 96, 97, 234,
	759, 236, 760, 98, 761, 762, 0, 99, 240, 241,
	100, 713, 743, 763, 764, 244, 0, 101, 755, 0,
	736, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 321, 109, 110, 0, 737, 739, 0, 738,
	740, 111, 112, 288, 113, 765, 114, 766, 767, 0,
	115, 0, 116, 0, 0, 0, 758, 118, 0, 119,
	0, 0, 0, 701, 120, 121, 122, 745, 746, 724,
	0, 0, 123, 124, 768, 0, 125, 0, 126, 0,
	0, 322, 0, 127, 756, 0, 254, 0, 128, 129,
	130, 131, 752, 754, 324, 0, 135, 0, 132, 0,
	323, 133, 769, 134, 770, 771, 772, 0, 735, 0,
	325, 136, 326, 137, 138, 0, 140, 139, 0, 757,
	327, 141, 328, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 329, 149, 150, 152, 151,
	696, 0, 725, 753, 153, 773, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 330, 159, 331,
	747, 160, 161, 162, 163, 0, 748, 164, 269, 165,
	0, 166, 167, 168, 169, 774, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 332, 184, 185, 702, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 741, 197, 187,
	188, 198, 333, 199, 775, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 776, 204, 749, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 777, 778, 0,
	0, 213, 214, 750, 751, 723, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 742, 223, 0, 282,
	224, 225, 226, 283, 779, 1750, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 697, 0, 0,
	0, 0, 0, 695, 0, 0, 0, 0, 693, 694,
	728, 717, 718, 715, 716, 707, 0, 703, 0, 0,
	0, 0, 706, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 744, 710, 0, 0, 0, 95,
	96, 97, 234, 759, 236, 760, 98, 761, 762, 0,
	99, 240, 241, 100, 713, 743, 763, 764, 244, 0,
	101, 755, 0, 736, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 321, 109, 110, 0, 737,
	739, 0, 738, 740, 111, 112, 288, 113, 765, 114,
	766, 767, 0, 115, 0, 116, 0, 0, 0, 758,
	118, 0, 119, 0, 0, 0, 701, 120, 121, 122,
	745, 746, 724, 0, 0, 123, 124, 768, 0, 125,
	0, 126, 0, 0, 322, 0, 127, 756, 0, 254,
	0, 128, 129, 130, 131, 752, 754, 324, 0, 135,
	0, 132, 0, 323, 133, 769, 134, 770, 771, 772,
	0, 735, 0, 325, 136, 326, 137, 138, 0, 140,
	139, 0, 757, 327, 141, 328, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 329, 149,
	150, 152, 151, 696, 0, 725, 753, 153, 773, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	330, 159, 331, 747, 160, 161, 162, 163, 0, 748,
	164, 269, 165, 0, 166, 167, 168, 169, 774, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 332, 184, 185, 702, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	741, 197, 187, 188, 198, 333, 199, 775, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 776, 204, 749,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	777, 778, 0, 0, 213, 214, 750, 751, 723, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 742,
	223, 0, 282, 224, 225, 226, 283, 779, 0, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	697, 0, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 693, 694, 728, 717, 718, 715, 716, 707, 0,
	703, 1740, 0, 0, 0, 706, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 744, 710, 0,
	0, 0, 95, 96, 97, 234, 759, 236, 760, 98,
	761, 762, 0, 99, 240, 241, 100, 713, 743, 763,
	764, 244, 0, 101, 755, 0, 736, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 321, 109,
	110, 0, 737, 739, 0, 738, 740, 111, 112, 288,
	113, 765, 114, 766, 767, 794, 115, 0, 116, 0,
	0, 0, 758, 118, 0, 119, 0, 0, 0, 701,
	120, 121, 122, 745, 746, 724, 0, 0, 123, 124,
	768, 0, 125, 0, 126, 0, 0, 322, 0, 127,
	756, 0, 254, 0, 128, 129, 130, 131, 752, 754,
	324, 0, 135, 0, 132, 0, 323, 133, 769, 134,
	770, 771, 772, 0, 735, 0, 325, 136, 326, 137,
	138, 0, 140, 139, 0, 757, 327, 141, 328, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 329, 149, 150, 152, 151, 696, 0, 725, 753,
	153, 773, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 330, 159, 331, 747, 160, 161, 162,
	163, 0, 748, 164, 269, 165, 0, 166, 167, 168,
	169, 774, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 332, 184,
	185, 702, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 741, 197, 187, 188, 198, 333, 199,
	775, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	776, 204, 749, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 777, 778, 0, 0, 213, 214, 750,
	751, 723, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 742, 223, 0, 282, 224, 225, 226, 283,
	779, 0, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 697, 0, 0, 0, 0, 0, 695,
	0, 0, 0, 0, 693, 694, 728, 717, 718, 715,
	716, 707, 0, 703, 0, 0, 0, 0, 706, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	744, 710, 0, 0, 0, 95, 96, 97, 234, 759,
	236, 760, 98, 761, 762, 0, 99, 240, 241, 100,
	713, 743, 763, 764, 244, 0, 101, 755, 0, 736,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 321, 109, 110, 0, 737, 739, 0, 738, 740,
	111, 112, 288, 113, 765, 114, 766, 767, 0, 115,
	0, 116, 0, 0, 0, 758, 118, 0, 119, 0,
	0, 0, 701, 120, 121, 122, 745, 746, 724, 0,
	0, 123, 124, 768, 0, 125, 0, 126, 0, 1369,
	322, 0, 127, 756, 0, 254, 0, 128, 129, 130,
	131, 752, 754, 324, 0, 135, 0, 132, 0, 323,
	133, 769, 134, 770, 771, 772, 0, 735, 0, 325,
	136, 326, 137, 138, 0, 140, 139, 0, 757, 327,
	141, 328, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 696,
	0, 725, 753, 153, 773, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 330, 159, 331, 747,
	160, 161, 162, 163, 0, 748, 164, 269, 165, 0,
	166, 167, 168, 169, 774, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 332, 184, 185, 702, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 741, 197, 187, 188,
	198, 333, 199, 775, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 776, 204, 749, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 777, 778, 0, 0,
	213, 214, 750, 751, 723, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 742, 223, 0, 282, 224,
	225, 226, 283, 779, 0, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 697, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 693, 694, 728,
	717, 718, 715, 716, 707, 0, 703, 0, 0, 0,
	0, 706, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 744, 710, 0, 0, 0, 95, 96,
	97, 234, 759, 236, 760, 98, 761, 762, 0, 99,
	240, 241, 100, 713, 743, 763, 764, 244, 0, 101,
	755, 0, 736, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 321, 109, 110, 0, 737, 739,
	0, 738, 740, 111, 112, 288, 113, 765, 114, 766,
	767, 0, 115, 0, 116, 0, 0, 0, 758, 118,
	0, 119, 0, 0, 0, 701, 120, 121, 122, 745,
	746, 724, 0, 0, 123, 124, 768, 0, 125, 0,
	126, 0, 0, 322, 0, 127, 756, 0, 254, 0,
	128, 129, 130, 131, 752, 754, 324, 0, 135, 0,
	132, 0, 323, 133, 769, 134, 770, 771, 772, 0,
	735, 0, 325, 136, 326, 137, 138, 0, 140, 139,
	0, 757, 327, 141, 328, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 329, 149, 150,
	152, 151, 696, 0, 725, 753, 153, 773, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 330,
	159, 331, 747, 160, 161, 162, 163, 0, 748, 164,
	269, 165, 0, 166, 167, 168, 169, 774, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 332, 184, 185, 702, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 741,
	197, 187, 188, 198, 333, 199, 775, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 776, 204, 749, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 777,
	778, 0, 0, 213, 214, 750, 751, 723, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 742, 223,
	0, 282, 224, 225, 226, 283, 779, 0, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 697,
	0, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	693, 694, 728, 717, 718, 715, 716, 707, 0, 703,
	1312, 0, 0, 0, 706, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 744, 710, 0, 0,
	0, 95, 96, 97, 234, 759, 236, 760, 98, 761,
	762, 0, 99, 240, 241, 100, 713, 743, 763, 764,
	244, 0, 101, 755, 0, 736, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 321, 109, 110,
	0, 737, 739, 0, 738, 740, 111, 112, 288, 113,
	765, 114, 766, 767, 0, 115, 0, 116, 0, 0,
	0, 758, 118, 0, 119, 0, 0, 0, 701, 120,
	121, 122, 745, 746, 724, 0, 0, 123, 124, 768,
	0, 125, 0, 126, 0, 0, 322, 0, 127, 756,
	0, 254, 0, 128, 129, 130, 131, 752, 754, 324,
	0, 135, 0, 132, 0, 323, 133, 769, 134, 770,
	771, 772, 0, 735, 0, 325, 136, 326, 137, 138,
	0, 140, 139, 0, 757, 327, 141, 328, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	329, 149, 150, 152, 151, 696, 0, 725, 753, 153,
	773, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 330, 159, 331, 747, 160, 161, 162, 163,
	0, 748, 164, 269, 165, 0, 166, 167, 168, 169,
	774, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 332, 184, 185,
	702, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 741, 197, 187, 188, 198, 333, 199, 775,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 776,
	204, 749, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 777, 778, 0, 0, 213, 214, 750, 751,
	723, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 742, 223, 0, 282, 224, 225, 226, 283, 779,
	0, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 697, 0, 0, 0, 0, 0, 695, 0,
	0, 0, 0, 693, 694, 691, 728, 717, 718, 715,
	716, 707, 703, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 92, 93, 971, 94, 0, 0, 0, 0,
	744, 710, 0, 0, 0, 95, 96, 97, 234, 759,
	236, 760, 98, 761, 762, 0, 99, 240, 241, 100,
	713, 743, 763, 764, 244, 0, 101, 755, 0, 736,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 321, 109, 110, 0, 737, 739, 0, 738, 740,
	111, 112, 288, 113, 765, 114, 766, 767, 0, 115,
	0, 116, 0, 0, 0, 758, 118, 0, 119, 0,
	0, 0, 701, 120, 121, 122, 745, 746, 724, 0,
	0, 123, 124, 768, 0, 125, 0, 126, 0, 0,
	322, 0, 127, 756, 0, 254, 0, 128, 129, 130,
	131, 752, 754, 324, 0, 135, 0, 132, 0, 323,
	133, 769, 134, 770, 771, 772, 0, 735, 0, 325,
	136, 326, 137, 138, 0, 140, 139, 0, 757, 327,
	141, 328, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 696,
	0, 725, 753, 153, 773, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 330, 159, 331, 747,
	160, 161, 162, 163, 0, 748, 164, 269, 165, 0,
	166, 167, 168, 169, 774, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 332, 184, 185, 702, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 741, 197, 187, 188,
	198, 333, 199, 775, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 776, 204, 749, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 777, 778, 0, 0,
	213, 214, 750, 751, 723, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 742, 223, 0, 282, 224,
	225, 226, 283, 779, 0, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 697, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 693, 694, 728,
	717, 718, 715, 716, 707, 0, 703, 0, 0, 0,
	0, 706, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 744, 710, 0, 0, 0, 95, 96,
	97, 234, 759, 236, 760, 98, 761, 762, 0, 99,
	240, 241, 100, 713, 743, 763, 764, 244, 0, 101,
	755, 0, 736, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 321, 109, 2148, 0, 737, 739,
	0, 738, 740, 111, 112, 288, 113, 765, 114, 766,
	767, 0, 115, 0, 116, 0, 0, 0, 758, 118,
	0, 119, 0, 0, 0, 701, 120, 121, 122, 745,
	746, 724, 0, 0, 123, 124, 768, 0, 125, 0,
	126, 0, 0, 322, 0, 127, 756, 0, 254, 0,
	128, 129, 130, 131, 752, 754, 324, 0, 135, 0,
	132, 0, 323, 133, 769, 134, 770, 771, 772, 0,
	735, 0, 325, 136, 326, 137, 138, 0, 140, 139,
	0, 757, 327, 141, 328, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 329, 149, 150,
	152, 151, 696, 0, 725, 753, 153, 773, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 330,
	159, 331, 747, 160, 161, 162, 163, 0, 748, 164,
	269, 165, 0, 166, 167, 168, 169, 774, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 332, 184, 185, 702, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 741,
	197, 187, 188, 198, 333, 199, 775, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 776, 204, 749, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 777,
	778, 0, 0, 213, 214, 750, 751, 723, 215, 216,
	2147, 218, 0, 0, 219, 220, 221, 222, 742, 223,
	0, 282, 224, 225, 226, 283, 779, 0, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 697,
	0, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	693, 694, 728, 717, 718, 715, 716, 707, 0, 703,
	0, 0, 0, 0, 706, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 744, 710, 0, 0,
	0, 95, 96, 97, 2146, 759, 236, 760, 98, 761,
	762, 0, 99, 240, 241, 100, 713, 743, 763, 764,
	244, 0, 101, 755, 0, 736, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 321, 109, 2148,
	0, 737, 739, 0, 738, 740, 111, 112, 288, 113,
	765, 114, 766, 767, 0, 115, 0, 116, 0, 0,
	0, 758, 118, 0, 119, 0, 0, 0, 701, 120,
	121, 122, 745, 746, 724, 0, 0, 123, 124, 768,
	0, 125, 0, 126, 0, 0, 322, 0, 127, 756,
	0, 254, 0, 128, 129, 130, 131, 752, 754, 324,
	0, 135, 0, 132, 0, 323, 133, 769, 134, 770,
	771, 772, 0, 735, 0, 325, 136, 326, 137, 138,
	0, 140, 139, 0, 757, 327, 141, 328, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	329, 149, 150, 152, 151, 696, 0, 725, 753, 153,
	773, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 330, 159, 331, 747, 160, 161, 162, 163,
	0, 748, 164, 269, 165, 0, 166, 167, 168, 169,
	774, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 332, 184, 185,
	702, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 741, 197, 187, 188, 198, 333, 199, 775,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 776,
	204, 749, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 777, 778, 0, 0, 213, 214, 750, 751,
	723, 215, 216, 2147, 218, 0, 0, 219, 220, 221,
	222, 742, 223, 0, 282, 224, 225, 226, 283, 779,
	0, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 697, 0, 0, 0, 0, 0, 695, 0,
	0, 0, 0, 693, 694, 728, 717, 718, 715, 716,
	707, 0, 703, 0, 0, 0, 0, 706, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 744,
	710, 0, 0, 0, 95, 96, 97, 234, 759, 236,
	760, 98, 761, 762, 0, 99, 240, 241, 100, 713,
	743, 763, 764, 244, 0, 101, 755, 0, 736, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	321, 109, 110, 0, 737, 739, 0, 738, 740, 111,
	112, 288, 113, 765, 114, 766, 767, 0, 115, 0,
	116, 0, 0, 0, 758, 118, 0, 119, 0, 0,
	0, 701, 120, 121, 122, 745, 746, 724, 0, 0,
	123, 124, 768, 0, 125, 0, 126, 0, 0, 322,
	0, 127, 756, 0, 254, 0, 128, 129, 130, 131,
	752, 754, 324, 0, 135, 0, 132, 0, 323, 133,
	769, 134, 770, 771, 772, 0, 735, 0, 325, 136,
	326, 137, 138, 0, 140, 139, 0, 757, 327, 141,
	328, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 329, 149, 150, 152, 151, 696, 0,
	725, 753, 153, 773, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 330, 159, 331, 747, 160,
	161, 162, 163, 0, 748, 164, 269, 165, 0, 166,
	167, 168, 169, 774, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	332, 184, 185, 702, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 741, 197, 187, 188, 198,
	333, 199, 775, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 776, 204, 749, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 777, 778, 0, 0, 213,
	214, 750, 751, 723, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 742, 223, 0, 282, 224, 225,
	226, 283, 779, 0, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 697, 0, 0, 0, 0,
	0, 695, 0, 0, 0, 0, 693, 694, 1341, 717,
	718, 715, 716, 707, 0, 703, 0, 0, 0, 0,
	706, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 744, 710, 0, 0, 0, 95, 96, 97,
	234, 759, 236, 760, 98, 761, 762, 0, 99, 240,
	241, 100, 713, 743, 763, 764, 244, 0, 101, 755,
	0, 736, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 321, 109, 110, 0, 737, 739, 0,
	738, 740, 111, 112, 288, 113, 765, 1344, 766, 767,
	0, 115, 0, 116, 0, 0, 0, 758, 118, 0,
	119, 0, 0, 0, 701, 120, 121, 122, 745, 746,
	724, 0, 0, 123, 124, 768, 0, 125, 0, 126,
	0, 0, 322, 0, 127, 756, 0, 254, 0, 128,
	129, 1345, 131, 752, 754, 324, 0, 135, 0, 132,
	0, 323, 133, 769, 134, 770, 771, 772, 0, 735,
	0, 325, 136, 326, 137, 138, 0, 140, 139, 0,
	757, 327, 141, 328, 0, 142, 0, 0, 143, 0,
	144, 1346, 1343, 148, 263, 147, 329, 149, 150, 152,
	151, 696, 0, 725, 753, 153, 773, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 330, 159,
	331, 747, 160, 161, 162, 163, 0, 748, 164, 269,
	165, 0, 166, 167, 168, 169, 774, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 332, 184, 185, 702, 186, 0, 190,
	191, 192, 1347, 0, 272, 194, 195, 196, 741, 197,
	187, 188, 198, 333, 199, 775, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 776, 204, 749, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 777, 778,
	0, 0, 213, 214, 750, 751, 723, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 742, 223, 0,
	282, 224, 225, 226, 283, 779, 0, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 1342, 232, 697, 0,
	0, 0, 0, 0, 695, 0, 0, 0, 0, 693,
	694, 728, 717, 718, 715, 716, 707, 0, 703, 0,
	0, 0, 0, 706, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 744, 710, 0, 0, 0,
	95, 96, 97, 234, 759, 236, 760, 98, 761, 762,
	0, 99, 240, 241, 100, 713, 743, 763, 764, 244,
	0, 101, 755, 0, 736, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 321, 109, 110, 0,
	737, 739, 0, 738, 740, 111, 112, 288, 113, 765,
	114, 766, 767, 0, 115, 0, 116, 0, 0, 0,
	758, 118, 0, 119, 0, 0, 0, 701, 120, 121,
	122, 745, 746, 724, 0, 0, 123, 124, 768, 0,
	125, 0, 126, 0, 0, 322, 0, 127, 756, 0,
	254, 0, 128, 129, 130, 131, 752, 754, 324, 0,
	135, 0, 132, 0, 323, 133, 769, 134, 770, 771,
	772, 0, 735, 0, 325, 136, 326, 137, 138, 0,
	140, 139, 0, 757, 327, 141, 328, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 0, 0, 725, 753, 153, 773,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 330, 159, 331, 747, 160, 161, 162, 163, 0,
	748, 164, 269, 165, 0, 166, 167, 168, 169, 774,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 332, 184, 185, 1359,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 741, 197, 187, 188, 198, 333, 199, 775, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 776, 204,
	749, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 777, 778, 0, 0, 213, 214, 750, 751, 723,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	742, 223, 0, 282, 224, 225, 226, 283, 779, 0,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 1357, 0, 0,
	0, 0, 1355, 1356, 728, 717, 718, 715, 716, 707,
	0, 1358, 0, 0, 0, 0, 706, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 744, 710,
	0, 0, 0, 95, 96, 97, 234, 759, 236, 760,
	98, 761, 762, 0, 99, 240, 241, 100, 0, 743,
	763, 764, 244, 0, 101, 755, 0, 736, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 321,
	109, 110, 0, 737, 739, 0, 738, 740, 111, 112,
	288, 113, 765, 114, 766, 767, 0, 115, 0, 116,
	0, 0, 0, 758, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 745, 746, 724, 0, 0, 123,
	124, 768, 0, 125, 0, 126, 0, 0, 322, 0,
	127, 756, 0, 254, 0, 128, 129, 130, 131, 752,
	754, 324, 0, 135, 0, 132, 0, 323, 133, 769,
	134, 770, 771, 772, 0, 735, 0, 325, 136, 326,
	137, 138, 0, 140, 139, 0, 757, 327, 141, 328,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 329, 149, 150, 152, 151, 0, 0, 725,
	753, 153, 773, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 330, 159, 331, 747, 160, 161,
	162, 163, 0, 748, 164, 269, 165, 0, 166, 167,
	168, 169, 774, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 332,
	184, 185, 1359, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 741, 197, 187, 188, 198, 333,
	199, 775, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 776, 204, 749, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 777, 778, 0, 0, 213, 214,
	750, 751, 723, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 742, 223, 0, 282, 224, 225, 226,
	283, 779, 0, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 0, 0, 728, 717, 718, 715,
	716, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 1358, 94, 0, 0, 0, 706,
	744, 710, 0, 0, 0, 95, 96, 97, 0, 759,
	236, 760, 98, 761, 762, 0, 99, 240, 241, 100,
	713, 743, 763, 764, 244, 0, 101, 755, 0, 736,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 321, 109, 2148, 0, 737, 739, 0, 738, 740,
	111, 112, 288, 113, 765, 114, 766, 767, 0, 115,
	0, 116, 0, 0, 0, 758, 118, 0, 119, 0,
	0, 0, 701, 120, 121, 122, 745, 746, 724, 0,
	0, 123, 124, 768, 0, 125, 0, 126, 0, 0,
	322, 0, 127, 756, 0, 254, 0, 128, 129, 130,
	131, 752, 754, 0, 0, 135, 0, 132, 0, 323,
	133, 769, 134, 770, 771, 772, 0, 735, 0, 0,
	136, 326, 137, 138, 0, 140, 139, 0, 757, 327,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 696,
	0, 725, 753, 153, 773, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 330, 159, 331, 747,
	160, 161, 162, 163, 0, 748, 164, 269, 165, 0,
	166, 167, 168, 169, 774, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 332, 184, 185, 702, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 741, 197, 187, 188,
	198, 0, 199, 775, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 776, 204, 749, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 777, 778, 0, 0,
	213, 214, 750, 751, 723, 215, 216, 2147, 218, 0,
	0, 219, 220, 221, 222, 742, 223, 0, 282, 224,
	225, 226, 283, 779, 0, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 728, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 693, 694, 0,
	0, 0, 92, 93, 0, 94, 703, 0, 0, 0,
	744, 706, 0, 0, 0, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 743, 242, 243, 244, 0, 101, 755, 0, 736,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 321, 109, 110, 0, 737, 739, 0, 738, 740,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 745, 746, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	322, 0, 127, 756, 0, 254, 0, 128, 129, 130,
	131, 752, 754, 324, 0, 135, 0, 132, 0, 323,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 325,
	136, 326, 137, 138, 0, 140, 139, 0, 757, 327,
	141, 328, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 0,
	0, 0, 753, 153, 265, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 330, 159, 331, 747,
	160, 161, 162, 163, 0, 748, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 332, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 741, 197, 187, 188,
	198, 333, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 749, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 750, 751, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 742, 223, 0, 282, 224,
	225, 226, 283, 284, 0, 0, 227, 0, 506, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 1632, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 320, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 321, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 322, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 255, 256, 324, 0, 135, 0, 132,
	0, 323, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 325, 136, 326, 137, 138, 0, 140, 139, 0,
	262, 327, 141, 328, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 329, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 330, 159,
	331, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 332, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 73, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 333, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	75, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 588, 284, 0, 0, 227, 0,
	0, 0, 71, 228, 229, 230, 231, 232, 0, 72,
	506, 503, 0, 504, 499, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 70, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 320, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 321, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 919, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 496, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 322, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 324, 0, 135,
	0, 132, 0, 323, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 325, 136, 326, 137, 138, 0, 140,
	139, 0, 262, 327, 141, 328, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 329, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 497, 0, 157, 0, 0, 158, 266,
	330, 159, 331, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 332, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 333, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 495, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 0, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	506, 503, 0, 504, 499, 494, 0, 0, 0, 0,
	0, 505, 500, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 320, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 321, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 916, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 496, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 322, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 324, 0, 135,
	0, 132, 0, 323, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 325, 136, 326, 137, 138, 0, 140,
	139, 0, 262, 327, 141, 328, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 329, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 497, 0, 157, 0, 0, 158, 266,
	330, 159, 331, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 332, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 333, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 495, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 0, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	506, 503, 0, 504, 499, 494, 0, 0, 0, 0,
	0, 505, 500, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 320, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 321, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 620, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 496, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 322, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 324, 0, 135,
	0, 132, 0, 323, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 325, 136, 326, 137, 138, 0, 140,
	139, 0, 262, 327, 141, 328, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 329, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 497, 0, 157, 0, 0, 158, 266,
	330, 159, 331, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 332, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 333, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 495, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 0, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	506, 503, 0, 504, 499, 494, 0, 0, 0, 0,
	0, 505, 500, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 320, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 321, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 496, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 322, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 324, 0, 135,
	0, 132, 0, 323, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 325, 136, 326, 137, 138, 0, 140,
	139, 0, 262, 327, 141, 328, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 329, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 497, 0, 157, 0, 0, 158, 266,
	330, 159, 331, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 332, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 333, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 495, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 0, 89,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 505, 500, 233, 0, 0, 0, 0, 95, 96,
	97, 234, 235, 236, 237, 98, 238, 239, 0, 99,
	240, 241, 100, 0, 0, 242, 243, 244, 0, 101,
	245, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 288, 113, 246, 114, 247,
	248, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 250,
	251, 0, 0, 0, 123, 124, 252, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 253, 0, 254, 0,
	128, 129, 130, 131, 255, 256, 0, 0, 135, 0,
	132, 0, 0, 133, 257, 134, 258, 259, 260, 0,
	261, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 262, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 264, 153, 265, 154, 155,
	0, 156, 0, 540, 157, 0, 0, 158, 266, 0,
	159, 0, 267, 160, 161, 162, 163, 0, 268, 164,
	269, 165, 0, 166, 167, 168, 169, 270, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 271, 186, 0,
	190, 191, 192, 193, 73, 272, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 273, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 275, 204, 276, 0,
	207, 75, 208, 209, 210, 211, 212, 0, 277, 278,
	279, 0, 0, 213, 214, 280, 281, 0, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 0, 223,
	0, 282, 224, 225, 226, 588, 284, 0, 0, 227,
	0, 89, 0, 71, 228, 229, 230, 231, 232, 0,
	72, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 233, 0, 1236, 0, 1241,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 0, 242, 243, 244,
	0, 101, 245, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 250, 251, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 253, 0,
	254, 0, 128, 129, 130, 131, 255, 256, 0, 0,
	135, 0, 132, 0, 0, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 262, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 264, 153, 265,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 0, 159, 0, 267, 160, 161, 162, 163, 0,
	268, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 73, 272, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 0, 207, 75, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 280, 281, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	0, 223, 0, 282, 224, 225, 226, 588, 284, 0,
	0, 227, 0, 89, 0, 71, 228, 229, 230, 231,
	232, 0, 72, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 70, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 255, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 540, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 0, 0, 227, 0, 89, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 1236, 0, 1241, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 0, 0, 135, 0, 132, 0, 0, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 262, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 0, 159, 0, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 0, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 0, 0, 227, 0, 0, 89, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 823, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 255, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 0, 0, 227, 0,
	89, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 1147, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 0, 0, 135,
	0, 132, 0, 0, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 262, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	0, 159, 0, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 0, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 0, 0,
	227, 0, 89, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 233, 0, 0, 0,
	1757, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 0, 99, 240, 241, 100, 0, 0, 242, 243,
	244, 0, 101, 245, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	246, 114, 247, 248, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 0, 0, 0, 123, 124, 252,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 255, 256, 0,
	0, 135, 0, 132, 0, 0, 133, 257, 134, 258,
	259, 260, 0, 261, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 262, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 264, 153,
	265, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 0, 159, 0, 267, 160, 161, 162, 163,
	0, 268, 164, 269, 165, 0, 166, 167, 168, 169,
	270, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 273,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 278, 279, 0, 0, 213, 214, 280, 281,
	0, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 284,
	0, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 728, 717, 718, 715, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 790, 0, 0, 0, 233, 0, 0, 0,
	0, 95, 96, 97, 234, 759, 236, 760, 98, 761,
	762, 0, 99, 240, 241, 100, 0, 0, 763, 764,
	244, 0, 101, 245, 0, 320, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 321, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	765, 114, 766, 767, 0, 115, 0, 116, 0, 0,
	0, 758, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 724, 0, 0, 123, 124, 768,
	0, 125, 0, 126, 0, 0, 322, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 255, 256, 324,
	0, 135, 0, 132, 0, 323, 133, 769, 134, 770,
	771, 772, 0, 735, 0, 325, 136, 326, 137, 138,
	0, 140, 139, 0, 262, 327, 141, 328, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	329, 149, 150, 152, 151, 0, 0, 725, 264, 153,
	773, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 330, 159, 331, 267, 160, 161, 162, 163,
	0, 268, 164, 269, 165, 0, 166, 167, 168, 169,
	774, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 332, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 333, 199, 775,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 776,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 777, 778, 0, 0, 213, 214, 280, 281,
	723, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 779,
	506, 503, 227, 0, 0, 626, 0, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 320, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 321, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 322, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 324, 0, 135,
	0, 132, 0, 323, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 325, 136, 326, 137, 138, 0, 140,
	139, 0, 262, 327, 141, 328, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 329, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	330, 159, 331, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 332, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 333, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 0, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 89, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 85, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 255, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	84, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 506, 503, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	233, 88, 0, 0, 0, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 0, 242, 243, 244, 0, 101, 245, 0, 320,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 321, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 250, 251, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	322, 0, 127, 253, 0, 254, 0, 128, 129, 130,
	131, 255, 256, 324, 0, 135, 0, 132, 0, 323,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 325,
	136, 326, 137, 138, 0, 140, 139, 0, 262, 327,
	141, 328, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 0,
	0, 0, 264, 153, 265, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 330, 159, 331, 267,
	160, 161, 162, 163, 0, 268, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 332, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 0, 197, 187, 188,
	198, 333, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 280, 281, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 0, 223, 0, 282, 224,
	225, 226, 283, 284, 89, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 95, 96, 97, 234, 235, 236, 237,
	98, 238, 239, 0, 99, 240, 241, 100, 0, 0,
	242, 243, 244, 0, 101, 245, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	288, 113, 246, 114, 247, 248, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 250, 251, 0, 0, 0, 123,
	124, 252, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 253, 0, 254, 0, 128, 129, 130, 131, 255,
	256, 0, 0, 135, 0, 132, 0, 0, 133, 257,
	134, 258, 259, 260, 0, 261, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 262, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	264, 153, 265, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 0, 159, 0, 267, 160, 161,
	162, 163, 0, 268, 164, 269, 165, 0, 166, 167,
	168, 169, 270, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 271, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 273, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 275, 204, 276, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 278, 279, 0, 0, 213, 214,
	280, 281, 0, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 0, 223, 0, 282, 224, 225, 226,
	283, 284, 506, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 233, 88, 0, 0,
	0, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 0, 99, 240, 241, 100, 0, 0, 242, 243,
	244, 0, 101, 245, 0, 320, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 321, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	246, 114, 247, 248, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 0, 0, 0, 123, 124, 252,
	0, 125, 0, 126, 0, 0, 322, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 255, 256, 324,
	0, 135, 0, 132, 0, 323, 133, 257, 134, 258,
	259, 260, 0, 261, 0, 325, 136, 326, 137, 138,
	0, 140, 139, 0, 262, 327, 141, 328, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	329, 149, 150, 152, 151, 0, 0, 0, 264, 153,
	265, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 330, 159, 331, 267, 160, 161, 162, 163,
	0, 268, 164, 269, 165, 0, 166, 167, 168, 169,
	270, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 332, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 333, 199, 273,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 278, 279, 0, 0, 213, 214, 280, 281,
	0, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 284,
	89, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 1104,
	101, 245, 0, 0, 0, 102, 103, 104, 0, 105,
	1102, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 1208, 0, 123, 124, 252, 0, 125,
	0, 126, 1107, 0, 0, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 0, 0, 135,
	1206, 132, 0, 0, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 262, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	0, 159, 0, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 1106, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 0, 215,
	216, 217, 218, 0, 1207, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 89, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 1104, 101, 245,
	0, 0, 1099, 102, 103, 104, 0, 105, 1102, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	1107, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 1098, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 1106, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 1105, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 89, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	233, 0, 1724, 0, 0, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 0, 242, 243, 244, 0, 101, 245, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 250, 251, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 253, 0, 254, 0, 128, 129, 130,
	131, 255, 256, 0, 0, 135, 0, 132, 0, 0,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 262, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 264, 153, 265, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 0, 159, 0, 267,
	160, 161, 162, 163, 0, 268, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 280, 281, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 0, 223, 0, 282, 224,
	225, 226, 283, 284, 89, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 95, 96, 97, 234, 235, 236, 237,
	98, 238, 239, 0, 99, 240, 241, 100, 0, 0,
	242, 243, 244, 0, 101, 245, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	288, 113, 246, 114, 247, 248, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 250, 251, 0, 0, 0, 123,
	124, 252, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 253, 0, 254, 0, 128, 129, 130, 131, 255,
	256, 0, 0, 135, 0, 132, 0, 0, 133, 257,
	134, 258, 259, 260, 0, 261, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 262, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	264, 153, 265, 154, 155, 0, 156, 0, 540, 157,
	0, 0, 158, 266, 0, 159, 0, 267, 160, 161,
	162, 163, 0, 268, 164, 269, 165, 0, 166, 167,
	168, 169, 270, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 271, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 273, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 275, 204, 276, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 278, 279, 0, 0, 213, 214,
	280, 281, 0, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 0, 223, 0, 282, 224, 225, 226,
	283, 284, 89, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 92, 93,
	933, 94, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 0, 99, 240, 241, 100, 0, 0, 242, 243,
	244, 0, 101, 245, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	246, 114, 247, 248, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 0, 0, 0, 123, 124, 252,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 255, 256, 0,
	0, 135, 0, 132, 0, 0, 133, 257, 134, 258,
	259, 260, 0, 261, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 262, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 264, 153,
	265, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 0, 159, 0, 267, 160, 161, 162, 163,
	0, 268, 164, 269, 165, 0, 166, 167, 168, 169,
	270, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 273,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 278, 279, 0, 0, 213, 214, 280, 281,
	0, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 284,
	89, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 849, 256, 0, 0, 135,
	0, 132, 0, 0, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 262, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 540, 157, 0, 0, 158, 266,
	0, 159, 0, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 0, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 89, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 92, 93, 596, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 255, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 89, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 0, 242, 243, 244, 0, 101, 245, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 250, 251, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 253, 0, 254, 0, 128, 129, 130,
	131, 552, 256, 0, 0, 135, 0, 132, 0, 0,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 262, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 264, 153, 265, 154, 155, 0, 156, 0,
	540, 157, 0, 0, 158, 266, 0, 159, 0, 267,
	160, 161, 162, 163, 0, 268, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 280, 281, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 0, 223, 0, 282, 224,
	225, 226, 283, 284, 89, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 95, 96, 97, 234, 235, 236, 237,
	98, 238, 239, 0, 99, 240, 241, 100, 0, 0,
	242, 243, 244, 0, 101, 245, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	288, 113, 246, 114, 247, 248, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 250, 251, 0, 0, 0, 123,
	124, 252, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 253, 0, 254, 0, 128, 129, 130, 131, 545,
	256, 0, 0, 135, 0, 132, 0, 0, 133, 257,
	134, 258, 259, 260, 0, 261, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 262, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	264, 153, 265, 154, 155, 0, 156, 0, 540, 157,
	0, 0, 158, 266, 0, 159, 0, 267, 160, 161,
	162, 163, 0, 268, 164, 269, 165, 0, 166, 167,
	168, 169, 270, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 271, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 273, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 275, 204, 276, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 278, 279, 0, 0, 213, 214,
	280, 281, 0, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 0, 223, 0, 282, 224, 225, 226,
	283, 284, 89, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 92, 93,
	419, 94, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 0, 99, 240, 241, 100, 0, 0, 242, 243,
	244, 0, 101, 245, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	246, 114, 247, 248, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 0, 0, 0, 123, 124, 252,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 255, 256, 0,
	0, 135, 0, 132, 0, 0, 133, 257, 134, 258,
	259, 260, 0, 261, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 262, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 264, 153,
	265, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 0, 159, 0, 267, 160, 161, 162, 163,
	0, 268, 164, 269, 418, 0, 166, 167, 168, 169,
	270, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 273,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 278, 279, 0, 0, 213, 214, 280, 281,
	0, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 284,
	89, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 0, 0, 135,
	0, 132, 0, 0, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 262, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	0, 159, 0, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 0, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 89, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 1405, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 89, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 0, 242, 243, 244, 0, 101, 245, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 250, 251, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 253, 0, 254, 0, 128, 129, 130,
	131, 1403, 256, 0, 0, 135, 0, 132, 0, 0,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 262, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 264, 153, 265, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 0, 159, 0, 267,
	160, 161, 162, 163, 0, 268, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 280, 281, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 0, 223, 0, 282, 224,
	225, 226, 283, 284, 89, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 95, 96, 97, 234, 235, 236, 237,
	98, 238, 239, 0, 99, 240, 241, 100, 0, 0,
	242, 243, 244, 0, 101, 245, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	288, 113, 246, 114, 247, 248, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 250, 251, 0, 0, 0, 123,
	124, 252, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 253, 0, 254, 0, 128, 129, 130, 131, 1392,
	256, 0, 0, 135, 0, 132, 0, 0, 133, 257,
	134, 258, 259, 260, 0, 261, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 262, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	264, 153, 265, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 0, 159, 0, 267, 160, 161,
	162, 163, 0, 268, 164, 269, 165, 0, 166, 167,
	168, 169, 270, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 271, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 273, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 275, 204, 276, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 278, 279, 0, 0, 213, 214,
	280, 281, 0, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 0, 223, 0, 282, 224, 225, 226,
	283, 284, 89, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 0, 99, 240, 241, 100, 0, 0, 242, 243,
	244, 0, 101, 245, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	246, 114, 247, 248, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 0, 0, 0, 123, 124, 252,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 962, 256, 0,
	0, 135, 0, 132, 0, 0, 133, 257, 134, 258,
	259, 260, 0, 261, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 262, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 264, 153,
	265, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 0, 159, 0, 267, 160, 161, 162, 163,
	0, 268, 164, 269, 165, 0, 166, 167, 168, 169,
	270, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 273,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 278, 279, 0, 0, 213, 214, 280, 281,
	0, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 284,
	89, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 0, 0, 135,
	0, 132, 0, 0, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 262, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	0, 159, 0, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 271, 186,
	0, 433, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 0, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 89, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 833, 0, 0, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 255, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 0,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 89, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 0, 242, 243, 244, 0, 101, 245, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 250, 251, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 253, 0, 254, 0, 128, 129, 130,
	131, 667, 256, 0, 0, 135, 0, 132, 0, 0,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 262, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 264, 153, 265, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 0, 159, 0, 267,
	160, 161, 162, 163, 0, 268, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 280, 281, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 0, 223, 0, 282, 224,
	225, 226, 283, 284, 89, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 95, 96, 97, 234, 235, 236, 237,
	98, 238, 239, 0, 99, 240, 241, 100, 0, 0,
	242, 243, 244, 0, 101, 245, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	288, 113, 246, 114, 247, 248, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 250, 251, 0, 0, 0, 123,
	124, 252, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 253, 0, 254, 0, 128, 129, 130, 131, 662,
	256, 0, 0, 135, 0, 132, 0, 0, 133, 257,
	134, 258, 259, 260, 0, 261, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 262, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	264, 153, 265, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 0, 159, 0, 267, 160, 161,
	162, 163, 0, 268, 164, 269, 165, 0, 166, 167,
	168, 169, 270, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 271, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 273, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 275, 204, 276, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 278, 279, 0, 0, 213, 214,
	280, 281, 0, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 0, 223, 0, 282, 224, 225, 226,
	283, 284, 89, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 0, 99, 240, 241, 100, 0, 0, 242, 243,
	602, 0, 101, 245, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	246, 114, 247, 248, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 0, 0, 0, 123, 124, 252,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 255, 256, 0,
	0, 135, 0, 132, 0, 0, 133, 257, 134, 258,
	259, 260, 0, 261, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 262, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 447,
	0, 149, 150, 152, 151, 0, 0, 0, 264, 153,
	265, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 0, 159, 0, 267, 160, 161, 162, 163,
	0, 268, 164, 269, 165, 0, 166, 167, 168, 169,
	270, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 273,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 444, 278, 279, 0, 0, 213, 440, 280, 281,
	0, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 284,
	89, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 0, 0, 135,
	0, 132, 0, 0, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 262, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 447, 0, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	0, 159, 0, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 444,
	278, 279, 0, 0, 213, 440, 280, 281, 0, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 89, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 584, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 89, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 0, 242, 243, 244, 0, 101, 245, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 250, 251, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 253, 0, 254, 0, 128, 129, 130,
	131, 582, 256, 0, 0, 135, 0, 132, 0, 0,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 262, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 264, 153, 265, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 0, 159, 0, 267,
	160, 161, 162, 163, 0, 268, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 280, 281, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 0, 223, 0, 282, 224,
	225, 226, 283, 284, 89, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 95, 96, 97, 234, 235, 236, 237,
	98, 238, 239, 0, 99, 240, 241, 100, 0, 0,
	242, 243, 244, 0, 101, 245, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	288, 113, 246, 114, 247, 248, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 250, 251, 0, 0, 0, 123,
	124, 252, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 253, 0, 254, 0, 128, 129, 130, 131, 579,
	256, 0, 0, 135, 0, 132, 0, 0, 133, 257,
	134, 258, 259, 260, 0, 261, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 262, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	264, 153, 265, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 0, 159, 0, 267, 160, 161,
	162, 163, 0, 268, 164, 269, 165, 0, 166, 167,
	168, 169, 270, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 271, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 273, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 275, 204, 276, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 278, 279, 0, 0, 213, 214,
	280, 281, 0, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 0, 223, 0, 282, 224, 225, 226,
	283, 284, 89, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 0, 99, 240, 241, 100, 0, 0, 242, 243,
	244, 0, 101, 245, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	246, 114, 247, 248, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 0, 0, 0, 123, 124, 252,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 576, 256, 0,
	0, 135, 0, 132, 0, 0, 133, 257, 134, 258,
	259, 260, 0, 261, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 262, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 264, 153,
	265, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 0, 159, 0, 267, 160, 161, 162, 163,
	0, 268, 164, 269, 165, 0, 166, 167, 168, 169,
	270, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 273,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 278, 279, 0, 0, 213, 214, 280, 281,
	0, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 284,
	89, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 574, 256, 0, 0, 135,
	0, 132, 0, 0, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 262, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	0, 159, 0, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 0, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 89, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 548, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 89, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 0, 242, 243, 244, 0, 101, 245, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 250, 251, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 253, 0, 254, 0, 128, 129, 130,
	131, 255, 256, 0, 0, 135, 0, 132, 0, 0,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 262, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 264, 153, 265, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 0, 159, 0, 267,
	160, 161, 162, 163, 0, 268, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 529, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 280, 281, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 0, 223, 0, 282, 224,
	225, 226, 283, 284, 89, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 95, 96, 97, 234, 235, 236, 237,
	98, 238, 239, 0, 99, 240, 241, 100, 0, 0,
	242, 243, 244, 0, 438, 245, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	288, 113, 246, 114, 247, 248, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 250, 251, 0, 0, 0, 123,
	124, 252, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 253, 0, 254, 0, 128, 129, 130, 131, 255,
	256, 0, 0, 135, 0, 132, 0, 0, 133, 257,
	134, 258, 259, 260, 0, 261, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 262, 0, 141, 0,
	0, 436, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 447, 0, 149, 150, 152, 151, 0, 0, 0,
	264, 153, 265, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 0, 159, 0, 267, 160, 161,
	162, 163, 0, 268, 164, 269, 165, 0, 166, 167,
	168, 169, 270, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 439, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 437, 196, 0, 197, 187, 188, 198, 0,
	199, 273, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 275, 204, 276, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 444, 278, 279, 0, 0, 213, 440,
	280, 281, 0, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 0, 223, 0, 282, 224, 225, 226,
	283, 284, 89, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 0, 99, 240, 241, 100, 0, 0, 242, 243,
	244, 0, 101, 245, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 288, 113,
	246, 114, 247, 248, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 249, 120,
	121, 122, 250, 251, 0, 0, 0, 123, 124, 252,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 253,
	0, 254, 0, 128, 129, 130, 131, 255, 256, 0,
	0, 135, 0, 132, 0, 0, 133, 257, 134, 258,
	259, 260, 0, 261, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 262, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 264, 153,
	265, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 0, 159, 0, 267, 160, 161, 0, 163,
	0, 268, 164, 269, 165, 0, 166, 167, 0, 169,
	270, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	271, 0, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 273,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 278, 279, 0, 0, 213, 214, 280, 281,
	0, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 0, 223, 0, 282, 224, 225, 226, 283, 284,
	0, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 989, 990, 0, 1009, 1010, 1011, 1019, 1020,
	1021, 0, 0, 0, 0, 0, 0, 0, 1012, 0,
	0, 0, 0, 0, 0, 992, 0, 0, 1023, 0,
	0, 0, 0, 0, 989, 990, 0, 1009, 1010, 1011,
	1019, 1020, 1021, 0, 0, 0, 0, 0, 991, 0,
	1012, 0, 0, 0, 1006, 0, 0, 992, 0, 0,
	1023, 0, 0, 0, 0, 0, 989, 990, 0, 1009,
	1010, 1011, 1019, 1020, 1021, 0, 0, 0, 0, 0,
	991, 0, 1012, 0, 0, 0, 1006, 0, 0, 992,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 0, 1016, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 997, 0, 0, 1022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 1016, 1024, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 1014, 0, 0, 0, 1016, 1024, 1007,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1013, 1014, 0, 0, 0, 0,
	0, 1007, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1017, 1015, 0, 0, 1003,
	1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995,
	996, 998, 999, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 0, 0, 0, 0, 0, 0, 1015, 0,
	0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993,
	994, 995, 996, 998, 999, 0, 0, 0, 0, 2086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000,
	1001, 993, 994, 995, 996, 998, 999, 0, 0, 989,
	990, 2084, 1009, 1010, 1011, 1019, 1020, 1021, 0, 0,
	0, 0, 0, 0, 0, 1012, 0, 0, 0, 0,
	0, 0, 992, 989, 990, 1023, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 0, 1566, 1567, 1012,
	1584, 1585, 1586, 0, 0, 991, 992, 0, 0, 1023,
	0, 1006, 0, 1736, 0, 0, 0, 0, 0, 0,
	989, 990, 0, 1009, 1010, 1011, 1019, 1020, 1021, 991,
	0, 0, 0, 0, 0, 1006, 1012, 0, 0, 0,
	0, 0, 0, 992, 0, 0, 1023, 0, 0, 1581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	1016, 1024, 0, 0, 0, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 1572,
	0, 0, 0, 0, 1016, 1024, 0, 0, 1014, 0,
	0, 0, 0, 0, 1007, 0, 0, 0, 0, 0,
	1022, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 1587, 0, 0, 0, 1007, 1013,
	0, 1016, 1024, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1582, 0, 0, 0, 0, 1022, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1017, 0,
	1013, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1583, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018,
	0, 1002, 1000, 1001, 993, 994, 995, 996, 998, 999,
	0, 0, 0, 0, 2029, 0, 0, 1015, 0, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 1578, 1579, 1580, 0, 2024, 1577,
	1575, 1576, 1568, 1569, 1570, 1571, 1573, 1574, 0, 0,
	0, 0, 0, 0, 1015, 0, 0, 1003, 1004, 1005,
	1018, 0, 1002, 1000, 1001, 993, 994, 995, 996, 998,
	999, 0, 0, 989, 990, 2020, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 0, 0, 0, 992, 989, 990, 1023,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0, 0,
	0, 1566, 1567, 1012, 1584, 1585, 1586, 0, 0, 991,
	992, 0, 0, 1023, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 990, 0, 1009, 1010, 1011,
	1019, 1020, 1021, 991, 0, 0, 0, 0, 0, 1006,
	1012, 0, 0, 0, 0, 0, 0, 992, 0, 0,
	1023, 0, 0, 1581, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 1016, 1024, 0, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 1572, 0, 0, 0, 0, 1016, 1024,
	0, 0, 1014, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 1022, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 1587, 0,
	0, 0, 1007, 1013, 0, 1016, 1024, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1582, 0, 0, 0,
	0, 1022, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 1007,
	0, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 1013, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1583, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 0, 1015, 0, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 0, 0, 0, 0, 1959, 0,
	0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 1578, 1579,
	1580, 0, 1937, 1577, 1575, 1576, 1568, 1569, 1570, 1571,
	1573, 1574, 0, 0, 0, 0, 0, 0, 1015, 0,
	0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993,
	994, 995, 996, 998, 999, 0, 0, 989, 990, 1936,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 0,
	992, 989, 990, 1023, 1009, 1010, 1011, 1019, 1020, 1021,
	0, 0, 0, 0, 0, 0, 0, 1012, 0, 0,
	0, 0, 0, 991, 992, 0, 0, 1023, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 990,
	0, 1009, 1010, 1011, 1019, 1020, 1021, 991, 0, 0,
	0, 0, 0, 1006, 1012, 0, 0, 0, 0, 0,
	0, 992, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 1016, 1024,
	0, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1022, 0, 0, 0, 0, 0,
	0, 0, 1016, 1024, 0, 0, 1014, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 1022, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 1007, 1013, 0, 1016,
	1024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1022, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 0, 1013, 0,
	0, 0, 0, 0, 0, 1008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 0, 0,
	0, 0, 1826, 0, 0, 1015, 0, 0, 1003, 1004,
	1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995, 996,
	998, 999, 0, 0, 0, 0, 1760, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0,
	1002, 1000, 1001, 993, 994, 995, 996, 998, 999, 0,
	0, 989, 990, 1744, 1009, 1010, 1011, 1019, 1020, 1021,
	0, 0, 0, 0, 0, 0, 0, 1012, 0, 0,
	0, 0, 0, 0, 992, 989, 990, 1023, 1009, 1010,
	1011, 1019, 1020, 1021, 0, 0, 0, 0, 0, 0,
	0, 1012, 0, 0, 0, 0, 0, 991, 992, 0,
	0, 1023, 0, 1006, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 990, 0, 1009, 1010, 1011, 1019, 1020,
	1021, 991, 0, 0, 0, 0, 0, 1006, 1012, 0,
	0, 0, 0, 0, 0, 992, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 1016, 1024, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1022, 0,
	0, 0, 0, 0, 0, 0, 1016, 1024, 0, 0,
	1014, 0, 0, 0, 0, 0, 1007, 0, 0, 0,
	0, 0, 1022, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	1007, 1013, 0, 1016, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 1008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 1013, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 1015, 0, 0, 1003, 1004,
	1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995, 996,
	998, 999, 0, 0, 0, 0, 1697, 0, 0, 1015,
	0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 1003,
	1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995,
	996, 998, 999, 989, 990, 1533, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 0, 0, 0, 992, 989, 990, 1023,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 991,
	992, 0, 0, 1023, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 990, 0, 1009, 1010, 1011,
	1019, 1020, 1021, 991, 0, 0, 0, 0, 0, 1006,
	1012, 0, 0, 0, 0, 1228, 0, 992, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 2169, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 1016, 1024, 0, 0, 0, 997,
	0, 1598, 0, 0, 1597, 0, 0, 0, 0, 0,
	1022, 0, 0, 0, 1229, 0, 0, 0, 1016, 1024,
	0, 0, 1014, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 1022, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 1007, 1013, 0, 1016, 1024, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2168, 0, 0,
	0, 1022, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 1007,
	0, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 1013, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 0, 1015, 0, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 0, 0, 0, 0, 0, 0,
	0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1015, 0,
	0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993,
	994, 995, 996, 998, 999, 1027, 0, 0, 0, 0,
	0, 989, 990, 0, 1009, 1010, 1011, 1019, 1020, 1021,
	0, 0, 0, 0, 0, 0, 0, 1012, 0, 0,
	0, 1026, 0, 0, 992, 989, 990, 1023, 1009, 1010,
	1011, 1019, 1020, 1021, 0, 0, 0, 0, 0, 0,
	0, 1012, 0, 0, 0, 0, 0, 991, 992, 0,
	0, 1023, 0, 1006, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 990, 0, 1009, 1010, 1011, 1019, 1020,
	1021, 991, 0, 0, 0, 0, 0, 1006, 1012, 0,
	0, 0, 0, 0, 0, 992, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 1016, 1024, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1022, 0,
	0, 0, 0, 0, 0, 0, 1016, 1024, 0, 0,
	1014, 0, 0, 0, 0, 0, 1007, 0, 0, 0,
	0, 0, 1022, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	1007, 1013, 0, 1016, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 0, 0, 0, 0, 1013, 524, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 1008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 1013, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 1015, 0, 0, 1003, 1004,
	1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995, 996,
	998, 999, 0, 0, 1748, 0, 0, 0, 0, 1015,
	0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 1003,
	1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995,
	996, 998, 999, 989, 990, 0, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 0, 0, 0, 992, 989, 990, 1023,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 1599, 0, 991,
	992, 0, 0, 1023, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 0, 0, 0, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 0, 0, 0, 0,
	1604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1016, 1024, 0, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 0, 0, 0, 0, 0, 1016, 1024,
	0, 0, 1014, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 1022, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 1007, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	989, 990, 0, 1009, 1010, 1011, 1019, 1020, 1021, 0,
	0, 0, 1017, 0, 0, 0, 1012, 0, 0, 0,
	0, 1008, 0, 992, 989, 990, 1023, 1009, 1010, 1011,
	1019, 1020, 1021, 0, 0, 0, 1017, 0, 0, 0,
	1012, 0, 0, 0, 1557, 0, 991, 992, 0, 0,
	1023, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 1006, 1015, 0, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 0, 0, 0, 0, 0, 0,
	0, 1015, 997, 0, 1003, 1004, 1005, 1018, 0, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 0, 0,
	0, 1016, 1024, 0, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
	0, 0, 0, 0, 0, 1016, 1024, 0, 0, 1014,
	0, 0, 0, 0, 0, 1007, 0, 0, 0, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 1007,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 989, 990, 0,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0, 1017,
	0, 0, 0, 1012, 0, 0, 0, 0, 1008, 0,
	992, 989, 990, 1023, 1009, 1010, 1011, 1019, 1020, 1021,
	0, 0, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 992, 0, 0, 1023, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 1006, 1015, 0, 0, 1003, 1004, 1005,
	1018, 0, 1002, 1000, 1001, 993, 994, 995, 996, 998,
	999, 0, 0, 0, 0, 0, 0, 0, 1015, 997,
	0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993,
	994, 995, 996, 998, 999, 0, 0, 0, 1016, 1024,
	0, 989, 990, 997, 1009, 1010, 1011, 1019, 1020, 1021,
	0, 0, 0, 0, 1022, 0, 0, 0, 0, 0,
	0, 0, 1016, 1024, 992, 0, 1014, 1023, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 1022, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	1014, 0, 0, 1006, 0, 0, 1007, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1008, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 0, 0, 0,
	0, 0, 1016, 1024, 0, 1008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 1007, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 0, 0,
	0, 0, 0, 0, 0, 1015, 0, 0, 1003, 1004,
	1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995, 996,
	998, 999, 0, 0, 0, 1008, 0, 0, 876, 868,
	893, 860, 884, 883, 0, 0, 862, 861, 0, 0,
	1017, 895, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 881, 880, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 1015, 0, 0, 1003, 1004,
	1005, 1018, 453, 1002, 1000, 1001, 993, 994, 995, 996,
	998, 999, 0, 0, 454, 0, 0, 0, 0, 0,
	871, 870, 872, 873, 874, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 455, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 461, 462, 0, 0, 472, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	452, 457, 0, 882, 0, 0, 0, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 463, 875, 866, 0, 0, 0, 0, 0, 0,
	0, 465, 897, 0, 0, 0, 0, 0, 0, 0,
	0, 450, 863, 0, 0, 890, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 466, 468, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 469, 0, 474,
	0, 0, 0, 470, 0, 0, 0, 0, 467, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 473,
}
var sqlPact = [...]int{

	250, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 826, 17064, 17064, 21236, -1000, -1000, -1000, -1000,
	-1000, -1000, 700, 751, 1986, 5417, 21236, 21236, 20938, 1338,
	1338, 22726, -1000, -1000, 26600, -1000, 30770, 488, 495, 488,
	488, 530, 22726, 1202, 629, 14046, 770, 160, -1000, 830,
	-29, 26302, 21236, 1498, 39, 19150, 280, 250, 20640, 26004,
	21236, 20342, 605, 34, 17660, 21236, -1000, 46, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1326, 370, 46, -1000, 1325,
	1207, 1205, 19150, 25706, 25408, 25110, 24812, 24514, -1000, 12804,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 787, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 292, 291, -1000, 20044, -1000,
	1009, -1000, 38, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1008, -1000, 21236, -1000, -1000, 24216, 23918, 690, 290,
	1023, -1000, -1000, 591, 396, -1000, -1000, 13736, 51, -1000,
	-1000, -1000, -1000, 1514, 16766, 919, 1318, -1000, 1007, 1317,
	1308, 1305, 1301, 1300, -1000, 814, 505, 1342, -1000, 1299,
	389, 857, 483, -1000, 1298, 1296, 1023, -1000, 1023, -1000,
	-1000, -1000, 602, 22726, -1000, -1000, -1000, -1000, -1000, 19150,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1676, -1000, -1000, -1000, -1000, 1746, -1000, -1000, -1000, -1000,
	23620, 21236, 21236, 1228, 23322, -1000, 830, -1000, -1000, -1000,
	1152, 1493, 1493, 1493, 1532, 133, 131, 160, 30, 21236,
	-1000, 284, 30, 9618, 9618, -1000, -1000, 280, -1000, 343,
	16158, -1000, 8649, -1000, 1046, 1400, 503, 909, 1397, -140,
	829, 825, 1396, 16766, 17660, 34, 25, -1000, -1000, -1000,
	5107, 16766, 676, 15251, 46, -1000, -1000, -1000, 19150, 21236,
	21236, 707, 23024, -1000, 1395, 144, 1392, -1000, 141, 1389,
	-1000, 141, 1388, 25, 1385, 23, -1000, -1000, 280, 19746,
	21236, 1624, 30671, -1000, 10911, -1000, -1000, 17064, 1320, 17064,
	-1000, -1000, 1620, -1000, 21236, 10911, 33, -1000, -1000, -1000,
	-1000, 1117, 1176, 557, 13426, 13116, 1453, 1067, -1000, -1000,
	-1000, 48, 5417, 684, -1000, -1000, -1000, 19448, -1000, -1000,
	21236, 1333, 17064, 21236, 21236, 21236, 21236, 21236, -1000, -1000,
	-1000, -29, 21236, -1000, 1103, -1000, -1000, 21236, 21236, 785,
	626, -1000, 33, -1000, 22726, -1000, 148, -1000, -1000, -1000,
	-1000, 277, 1081, 425, 142, 22428, 425, 1068, -1000, 1152,
	-1000, 1014, 1210, 9942, 1185, 10911, 160, -1000, -1000, 160,
	160, 10911, -1000, -1000, 21236, 30, 1612, 21236, 109, -1000,
	29511, -1000, -1000, 10911, 10911, 10911, 10911, 10911, 897, 337,
	-1000, 276, 275, 6374, -1000, -1000, 1745, -1000, -1000, -1000,
	135, -1000, -1000, 10911, 46, -1000, -1000, -1000, -1000, 274,
	1786, -1000, 466, -1000, -1000, -1000, 416, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1286, 273, 272, -1000,
	-1000, -1000, -1000, 270, 269, 268, 267, 263, 262, 261,
	260, 259, 258, 255, 253, 252, 251, 249, 863, -1000,
	444, -1000, -1000, 444, 444, -1000, 238, 238, 241, -1000,
	-1000, -1000, -1000, 238, -1000, -1000, -1000, 374, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 248, 109, -1000, -1000, -1000,
	21236, 21, -1000, 30347, -1000, -7, 758, -1000, 18554, 1577,
	1550, 1479, 19150, 1552, -29, 1294, 1545, -29, 1293, 600,
	21236, 21236, 599, 581, 19150, 365, -1000, 21236, -1000, -1000,
	-48, -1000, -1000, 1291, 19, -1000, -1000, 432, 149, 1610,
	149, 15554, -1000, 21236, 21236, -1000, 21236, -1000, -1000, 21236,
	-1000, 21236, 21236, -1000, 21236, 21236, 162, 17958, 757, 1384,
	653, -29, 17, -1000, 1622, -1000, -1000, -1000, -1000, 96,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 241, 863,
	238, 238, 238, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	374, -1000, -1000, 444, 444, 444, -1000, -1000, 11, 30347,
	571, -1000, 1288, 477, -1000, 411, 10, 1023, 980, -1000,
	-1000, -1000, -1000, -1000, -1000, 28, -1000, -1000, 28, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1785, 5417,
	-1000, -1000, -1000, -1000, -1000, -1000, 21236, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21236, 21236,
	21236, -1000, -1000, 19150, 18256, 1583, 1383, 879, -1000, 1581,
	21236, 1002, 1066, -1000, 622, 1380, -1000, -1000, -1000, -1000,
	30347, -1000, 397, -1000, -1000, 30347, 846, 1212, -1000, 1212,
	27, -1000, 29184, -1000, 234, 5, 432, 9618, 14949, 4177,
	30671, 5417, 615, 10911, 10911, 10911, 10911, 10911, 10911, 10911,
	10911, 10911, 10911, 10911, 10911, 10911, 10911, 10911, 10911, 10911,
	10911, 10911, 10911, 10911, 10911, 1196, 10911, 565, 10911, 10911,
	10911, 10911, 1095, 908, 215, 920, 5417, -1000, -1000, 1662,
	1662, 1662, 30371, 30371, 240, 337, -1000, 10911, -1000, 9295,
	131, 28765, 26, -1000, -1000, -1000, 7344, 442, 30347, 46,
	6050, -1000, 1735, 790, 1335, 1267, 233, 130, 128, 10911,
	10911, 11234, 11234, 10911, 11557, 10911, 10911, 6697, 10911, 10911,
	10911, 10911, 10911, 10911, -1000, 226, -1000, -1000, -1000, -1000,
	1723, -1000, -1000, 1720, -1000, 614, 609, 1716, 432, 124,
	8649, -1000, 757, 21236, 21236, 21236, -1000, -1000, 1064, 22130,
	1063, 30671, 21236, -1000, 225, 223, 1148, 1147, 21236, 21236,
	21832, 21534, 21236, 849, -29, -1000, 222, -29, -1000, 219,
	21236, 819, -1000, 21236, 21236, 809, 1258, 1025, -1000, 428,
	16766, 675, 1285, 21236, 797, 10911, 839, -1000, 14647, 451,
	21236, 797, 75, -1000, -1000, -1000, 357, 21236, -1000, -1000,
	-1000, 144, -1000, 141, 141, 25, -1000, -1000, 19150, -1000,
	-1000, -1000, -1000, -1000, -1000, 30671, 333, 332, -1000, 1706,
	563, -1000, 560, 553, 545, -1000, 217, -1000, 10911, 21236,
	21236, 1200, -1000, -1000, -1000, 718, -1000, 845, -1000, 14046,
	-1000, -11, -1000, -1000, -1000, 365, -1000, 123, 4, 24,
	30671, -1000, -1000, -1000, -1000, -1000, 21236, 310, 21236, -29,
	21236, -1000, 1767, -29, 21236, 1379, 1409, 354, 21236, 846,
	-1000, 10911, 1704, -1000, -1000, -1000, 10911, -1000, -1000, -1000,
	-29, -1000, 1265, -1000, -56, 1519, 1015, -152, 127, 371,
	-1000, 14345, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 388, 732, 732, 566, 566, 566, 566, 1775,
	387, 996, 2288, 3123, 3123, 3123, 1878, 672, 672, 3123,
	3123, 3123, 30371, 2733, 195, 10911, 10911, 543, 890, 215,
	195, 10911, 195, 195, 195, 195, -1000, 1330, -1000, -1000,
	-1000, -1000, 1282, 214, 11557, 11557, -1000, -1000, -1000, 6374,
	11880, -1000, -1000, -1000, -1000, -1000, 213, 10911, -1000, 28802,
	-164, 3, -1000, -1000, 10911, -57, -106, -1000, -1000, 664,
	-1000, 10911, -1000, -8, 10911, 10911, 10911, 117, 116, -1000,
	904, 212, 206, 10911, -1000, -1000, 30144, 27202, 115, 1281,
	-105, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 111, 110,
	30120, -105, 107, 3291, -1000, 11557, 11557, 11557, 6374, 205,
	106, 29147, -105, 29917, 8972, 8972, 8972, 101, 29893, 10911,
	-105, 4117, 3842, 3776, -2, -3, -9, 1696, -14, 97,
	382, 377, 92, 1265, -1000, -1000, -1000, -1000, 541, 538,
	1373, -1000, 1062, -1000, 456, -1000, 802, 10911, 12502, 204,
	203, 953, -1000, 1372, 961, 1370, 961, -1000, -7, 743,
	-1000, 10911, -1000, 10911, -1000, 537, -1000, -1000, 526, 428,
	1280, 632, -1000, 931, -1000, -1000, 648, -1000, -1000, 7020,
	30347, -1000, 797, 1482, -15, -1000, -1000, -1000, 432, 15554,
	14949, 8649, -16, -1000, -1000, -1000, 757, -1000, 424, 1694,
	90, 1076, 1016, 795, 738, 1690, 30347, -11, -11, -1000,
	-1000, -1000, -1000, -1000, 21236, -1000, 1234, -1000, 18256, 202,
	21236, 201, -1000, 200, -1000, -1000, 197, 21236, 1122, 354,
	17362, -1000, 425, 934, 28741, -1000, 89, 1256, 1531, -1000,
	14949, 1183, 1180, 14949, 989, 907, 907, 907, -1000, 194,
	638, 329, 371, 4473, 10911, 18852, 914, 71, 88, 1519,
	10911, 195, 195, 10911, 11557, 11557, -1000, 195, -1000, -1000,
	-1000, -1000, -1000, 1279, 193, 10911, 30671, 27627, 3973, -23,
	-1000, 8326, -13, -1000, 10911, -1000, 28418, -1000, -1000, 331,
	1405, -1000, 10911, 29572, 87, 8003, -1000, 29535, -10, -10,
	-1000, 1763, -1000, 15856, 440, 928, 28381, 4177, 30671, -1000,
	10911, -1000, -1000, 1278, 10911, -1000, 4177, 30671, 11557, 11557,
	11557, 11557, 11557, 11557, 11557, 11557, 11557, 11557, 11557, 11557,
	11557, 11557, 11557, 11557, 11557, 11557, 11557, 1189, 11557, 1659,
	1659, 1659, -24, 7680, -1000, 1276, 1278, 10911, 10911, 30671,
	86, 83, 82, -1000, 10911, -105, 10911, 10911, 10911, -1000,
	-1000, -1000, 79, -1000, 1683, -1000, -1000, -1000, -1000, 1256,
	21236, 21236, 21236, 1364, -1000, 1621, -1000, 28357, -27, -1000,
	324, 1501, 10911, -1000, -1000, 192, 12502, 21236, -1000, 1139,
	1252, 484, 21236, -1000, 21236, -1000, 21236, 21236, 21236, -32,
	-34, 21236, 21236, -1000, 16766, 508, 180, -1000, -25, -1000,
	-1000, 229, -29, 797, -1000, -46, -1000, 355, -1000, 318,
	314, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 77,
	-1000, -1000, 1239, -1000, 12502, 176, 21236, 18256, 1557, 12502,
	1001, 1126, 354, 17362, -1000, 622, -1000, -1000, -1000, 430,
	10911, 10911, 1519, 14949, 14949, 1128, 1165, 14949, -1000, -1000,
	-1000, -1000, 312, 385, 309, 12804, 371, 18852, -1000, 1672,
	1158, -36, -1000, -1000, 21236, 175, -1000, 371, 1733, 195,
	3735, 1273, 10911, 30671, 30471, -47, 10911, 10911, -1000, -55,
	-1000, 10911, 307, 30347, -1000, -1000, -1000, 30347, 10911, 1750,
	10911, 76, 74, 72, -1000, -1000, -1000, 26898, 10911, 70,
	-1000, 68, 67, 30347, 1276, 30347, -1000, -1000, 534, 534,
	657, 657, 657, 657, 1659, 1125, 759, 2344, 2386, 2386,
	2386, 2150, 686, 686, 2386, 2386, 2386, 1277, 1109, 174,
	28011, 10911, -61, -1000, -1000, -1000, 30347, 30347, 65, -1000,
	-1000, -1000, -105, 3620, 28034, 27997, -1000, 61, 430, -1000,
	-1000, -1000, 21236, -1000, 21236, -1000, 5417, 21236, 1272, 1050,
	-1000, -1000, 1131, 172, 11557, 21236, -1000, 835, 12502, 1480,
	46, 5417, 1480, 27973, 6050, -63, -68, 1047, -1000, 1037,
	10911, -1000, 30671, 961, 961, -1000, 518, 516, 514, 509,
	-1000, -1000, -77, 16468, 1757, 1416, 21236, 1461, -1000, -1000,
	171, -1000, -1000, -1000, 884, -69, 12502, -76, 60, -29,
	-80, 21236, -1000, 354, 17362, -1000, 1409, -1000, 21236, 30347,
	-105, -1000, 1128, -1000, 170, 10911, 14949, -1000, -152, -1000,
	-85, -1000, 371, -86, 18852, -1000, 297, -161, -1000, 353,
	-1000, 371, 169, 21236, 18852, 10911, 10911, 30471, -90, -1000,
	195, 195, -1000, 27650, -1000, 30347, -1000, 29535, -1000, -1000,
	-1000, 881, -1000, 27613, -1000, -1000, -1000, -1000, 11557, 1274,
	168, 30671, 27589, -1000, -1000, 10911, -1000, -1000, -1000, -1000,
	-1000, 1283, -1000, -1000, 21236, 1061, -1000, -1000, 10911, 28011,
	167, 1234, 166, -1000, -1000, -1000, -1000, -1000, -1000, 1501,
	-8, -1000, 820, -1000, -1000, 30347, 1496, -1000, -1000, 21236,
	21236, 163, 159, -1000, 158, 46, -91, -1000, 352, 594,
	-97, 21236, -1000, -1000, 5727, 21236, 835, -104, -1000, 1234,
	-1000, 835, 157, 17362, -1000, 1122, -84, -1000, 1553, -1000,
	21236, 30347, -1000, 371, -1000, 1668, 18852, 162, -1000, -1000,
	1158, -1000, 4794, 18852, 21236, -113, -1000, 195, 195, -1000,
	-1000, 59, 928, 1529, -1000, 3223, 11557, 30671, -114, -1000,
	27266, -1000, -1000, 1361, 27234, 1102, 21236, -1000, 21236, 1480,
	58, 21236, 460, 5417, -1000, -1000, 10911, 10911, 10911, 1757,
	-1000, -1000, 1754, 696, -1000, 432, -1000, 154, 1234, 835,
	-1000, 1234, 12502, -1000, 1126, 21236, 147, -118, 18852, -1000,
	-1000, 294, -1000, -1000, 1658, -1000, -119, -1000, -1000, 831,
	10911, 3223, -126, -1000, -1000, 1352, -1000, 936, 877, 56,
	-127, -1000, -1000, 142, -1000, 10911, -1000, -131, -135, -10,
	-1000, -1000, 15554, -1000, 21236, -1000, 1234, -1000, -137, -1000,
	-1000, -1000, -1000, -1000, 371, 196, -1000, 55, 10588, 10588,
	-105, -1000, 21236, -1000, 946, 945, 677, -1000, -1000, -1000,
	-1000, -1000, 1102, 30347, -1000, -1000, 54, -124, -142, -1000,
	835, 18852, -1000, -1000, -1000, -1000, 12192, 1045, 713, 29123,
	-1000, -1000, -1000, 1421, -1000, 472, 978, 978, 936, 1750,
	-1000, 930, 1234, -1000, 1633, -1000, -1000, -1000, -1000, -1000,
	-1000, 1641, -1000, -1000, 1134, -1000, -1000, -1000, -1000, -1000,
	-1000, 10265, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2048, 2047, 1555, 1733, 2046, 2036, 1699, 2033, 2029,
	2028, 2027, 2026, 2025, 119, 1695, 1593, 33, 1566, 2024,
	110, 2023, 2019, 2017, 116, 2016, 2012, 2010, 2006, 151,
	2005, 2004, 108, 1561, 1540, 1537, 2002, 1993, 112, 1989,
	1987, 21, 1981, 92, 1980, 78, 172, 2484, 147, 1979,
	1978, 1974, 32, 121, 89, 1969, 139, 1968, 1967, 75,
	38, 26, 20, 1966, 129, 1965, 1964, 1702, 43, 1963,
	1962, 155, 1961, 27, 31, 88, 171, 163, 133, 144,
	1958, 1957, 1951, 1950, 51, 1949, 2, 1948, 1947, 12,
	71, 15, 1942, 41, 19, 1938, 1935, 146, 1929, 91,
	123, 1521, 143, 138, 104, 1925, 97, 11, 95, 1924,
	1920, 145, 54, 1917, 42, 98, 156, 1916, 68, 169,
	83, 39, 74, 122, 1913, 1907, 1906, 101, 1902, 130,
	94, 1897, 1893, 93, 1891, 150, 153, 1890, 1886, 114,
	1883, 142, 1880, 1878, 159, 175, 1877, 174, 1874, 1873,
	176, 135, 16, 57, 87, 9, 1519, 1517, 127, 69,
	37, 24, 1871, 1928, 1150, 854, 56, 106, 70, 64,
	103, 61, 90, 158, 45, 1868, 1867, 134, 1866, 1864,
	1863, 1861, 1860, 99, 1855, 1852, 84, 157, 13, 4,
	28, 115, 40, 59, 107, 160, 166, 128, 1851, 111,
	131, 60, 58, 1849, 1848, 1477, 137, 1847, 1846, 1845,
	1289, 1251, 965, 202, 1843, 1842, 385, 373, 1841, 1840,
	62, 1839, 136, 132, 1838, 161, 278, 18, 1837, 50,
	165, 118, 1834, 126, 65, 0, 694, 243, 1833, 140,
	96, 1830, 1827, 1824, 1823, 30, 3, 10, 8, 6,
	5, 29, 25, 1822, 1821, 148, 22, 77, 1819, 173,
	1816, 1812, 1810, 44, 1809, 17, 1807, 14, 1805, 1804,
	7, 1, 1803, 1801, 154, 1799, 125, 1797, 1631, 1795,
	162, 1780, 1740, 1632, 53, 102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 54, 54, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 51, 51, 56, 56, 56, 58, 58, 55,
	55, 50, 50, 5, 5, 233, 233, 234, 234, 40,
	40, 44, 44, 41, 42, 42, 43, 43, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 103, 103,
	102, 102, 105, 105, 16, 16, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 201,
	201, 200, 19, 175, 175, 20, 20, 20, 20, 21,
	128, 128, 22, 22, 22, 22, 23, 28, 274, 274,
	274, 278, 278, 279, 279, 280, 280, 280, 280, 280,
	280, 280, 276, 276, 27, 27, 27, 27, 39, 31,
	31, 31, 31, 31, 31, 148, 145, 145, 144, 144,
	144, 144, 146, 146, 146, 146, 149, 149, 83, 83,
	226, 225, 225, 231, 231, 231, 81, 81, 81, 81,
	81, 82, 82, 82, 224, 224, 224, 224, 232, 232,
	232, 232, 232, 232, 230, 230, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 18, 275, 275, 277, 277, 33, 33,
	34, 34, 35, 35, 35, 35, 10, 10, 11, 11,
	84, 84, 85, 85, 154, 154, 154, 154, 86, 86,
	57, 57, 57, 153, 243, 243, 244, 244, 244, 244,
	244, 244, 245, 245, 245, 245, 245, 245, 245, 241,
	241, 242, 239, 239, 240, 240, 240, 240, 281, 281,
	152, 152, 89, 89, 248, 248, 248, 248, 246, 246,
	246, 246, 246, 249, 247, 250, 250, 250, 250, 250,
	187, 187, 187, 37, 12, 63, 63, 13, 9, 9,
	132, 132, 93, 93, 192, 192, 192, 74, 74, 52,
	52, 52, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 133, 133, 134, 134, 25, 30, 36,
	36, 36, 36, 36, 283, 283, 70, 70, 70, 70,
	71, 71, 147, 147, 150, 150, 151, 151, 151, 65,
	64, 66, 66, 8, 8, 59, 59, 60, 60, 61,
	61, 62, 62, 284, 284, 24, 24, 24, 77, 77,
	141, 141, 141, 143, 143, 142, 142, 142, 118, 118,
	118, 38, 98, 98, 107, 107, 108, 108, 198, 109,
	109, 29, 29, 47, 47, 45, 45, 45, 45, 45,
	45, 46, 46, 48, 48, 48, 48, 48, 48, 48,
	256, 256, 256, 259, 259, 255, 257, 257, 258, 258,
	282, 282, 119, 119, 119, 88, 87, 87, 91, 91,
	90, 92, 92, 191, 116, 116, 116, 116, 135, 135,
	136, 136, 137, 137, 138, 138, 138, 139, 139, 140,
	140, 115, 115, 171, 171, 49, 49, 97, 97, 99,
	99, 161, 161, 161, 162, 162, 160, 160, 160, 160,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 272,
	272, 272, 273, 273, 190, 190, 194, 194, 194, 194,
	194, 194, 188, 188, 188, 188, 189, 189, 199, 199,
	122, 122, 122, 122, 120, 120, 121, 121, 195, 195,
	195, 195, 117, 117, 196, 196, 196, 155, 155, 202,
	202, 202, 220, 220, 96, 96, 96, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 204, 204, 204, 204, 206, 206,
	206, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 219, 219, 219, 219, 219,
	207, 207, 214, 214, 215, 215, 216, 217, 208, 208,
	209, 209, 210, 211, 218, 218, 218, 218, 222, 222,
	212, 212, 212, 212, 212, 213, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	130, 130, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 165, 165, 165, 165, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 251,
	251, 251, 251, 251, 251, 251, 253, 253, 254, 254,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 260, 260, 261,
	261, 263, 263, 264, 264, 265, 266, 266, 266, 267,
	268, 268, 262, 262, 269, 269, 269, 270, 270, 271,
	271, 271, 271, 271, 177, 177, 177, 178, 178, 179,
	185, 185, 185, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 72,
	72, 72, 72, 72, 104, 104, 174, 174, 172, 172,
	172, 176, 176, 123, 123, 221, 221, 221, 221, 221,
	221, 221, 124, 124, 124, 131, 125, 125, 126, 126,
	126, 126, 126, 126, 168, 169, 127, 127, 127, 170,
	170, 180, 184, 184, 183, 182, 182, 181, 181, 158,
	158, 159, 159, 157, 156, 112, 112, 111, 111, 110,
	110, 285, 285, 186, 186, 113, 113, 114, 106, 106,
	197, 197, 197, 197, 100, 100, 79, 79, 101, 101,
	75, 75, 78, 78, 76, 76, 76, 76, 94, 94,
	95, 95, 73, 73, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 223, 223, 223, 173, 67,
	67, 67, 68, 68, 69, 69, 228, 228, 228, 229,
	229, 229, 229, 227, 227, 227, 227, 227, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	3, 6, 3, 4, 1, 5, 2, 1, 3, 3,
	3, 3, 1, 3, 3, 1, 2, 2, 1, 0,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 3, 4, 4, 4, 4, 2, 4, 4, 4,
	4, 4, 4, 2, 3, 3, 3, 4, 2, 3,
	3, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	5, 5, 6, 2, 2, 0, 2, 0, 6, 6,
	5, 5, 4, 12, 4, 12, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	7, 4, 6, 3, 1, 5, 6, 9, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, -39, 23, 34, 225, 66, -8, -9, -10, -11,
	-12, -13, -258, 94, 103, 125, 206, 101, 87, 119,
	228, 235, -45, -47, 245, -148, 248, 35, 257, 60,
	97, 230, 223, 224, 283, 292, 68, -256, -48, -46,
	334, 308, 315, 239, -49, 266, 300, 337, 266, 134,
	80, 303, -274, -101, 266, 80, -76, -67, 327, 4,
	-235, -237, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 211,
	213, 214, 216, 217, 218, 219, 220, 223, 221, 222,
	224, 225, 226, 228, 230, 231, 233, 246, 247, 258,
	235, 236, 237, 238, 241, 242, 243, 245, 248, 250,
	253, 256, 257, 259, 262, 260, 255, 265, 267, 268,
	269, 270, 271, 278, 279, 283, 284, 285, 286, 289,
	290, 291, 292, 294, 297, 298, 299, 304, 309, 310,
	311, 312, 313, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 50, 51, 52, 55, 82, 84, 85, 100,
	104, 105, 111, 121, 123, 129, 130, 139, 141, 142,
	143, 145, 156, 170, 180, 182, 193, 197, 203, 205,
	212, 232, 240, 251, 252, 261, 263, 273, 274, 275,
	280, 281, 296, 300, 301, -274, -75, -67, 80, 89,
	138, 291, 290, 80, 134, 266, 303, 293, -17, 334,
	-29, -7, -15, -4, -24, -38, -14, -32, -18, -33,
	-34, -35, -16, 23, -227, 4, -235, -237, -236, -238,
	57, 69, 118, 137, 131, 147, 149, 157, 159, 172,
	194, 196, 229, 249, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 48, 49, 53, 56, 58, 64,
	68, 72, 73, 74, 75, 76, 77, 86, 88, 90,
	91, 92, 95, 97, 99, 106, 107, 108, 114, 116,
	117, 119, 122, 124, 132, 134, 136, 144, 146, 152,
	155, 160, 162, 163, 177, 178, 179, 185, 187, 188,
	190, 191, 202, 207, 215, 227, 239, 244, 254, 264,
	266, 272, 276, 277, 282, 287, 288, 293, 295, 302,
	303, 305, 306, 307, 308, -67, -67, -67, 206, 22,
	-278, 22, -279, -280, 68, 94, 119, 239, 138, 89,
	290, -278, -71, 235, -67, -145, 161, 242, 54, 232,
	279, -146, -144, -226, 273, -149, -102, 171, -67, 4,
	171, 244, 80, 22, 34, 54, 59, 81, 120, 134,
	135, 64, 65, 151, 209, 161, 242, 278, 243, 267,
	273, 279, 68, 294, 269, 102, -283, 279, 279, -283,
	-283, -70, 279, 276, -71, 4, 80, 244, 171, -282,
	266, -231, -224, -187, 9, 282, 106, 187, -230, 8,
	326, -223, -229, 5, 7, 325, 4, -235, -237, -236,
	266, 293, 303, -132, 80, 288, -46, -48, -47, -90,
	-91, 287, 144, 99, 191, -45, -47, -256, -259, 213,
	-255, -67, -259, -87, -88, 22, 91, 338, -195, -75,
	188, -114, 334, -3, -195, 129, -75, -78, 129, -75,
	-67, -195, 129, 276, 338, -101, -94, -67, -157, -156,
	336, 117, 117, 334, -111, -112, -156, -157, 117, 146,
	146, -196, -195, -67, 129, -79, 129, -78, -103, 129,
	-102, -103, 129, -94, 129, -201, -200, -229, 300, 266,
	134, -175, 334, -128, 334, -67, 22, 187, 338, 187,
	-67, -145, 52, -145, 246, 334, -150, -151, -64, -65,
	-66, 148, 208, 211, 276, 319, 117, 313, -231, -83,
	86, -105, 336, 54, -233, -230, 9, 246, 209, 243,
	117, -275, 187, 117, 117, 117, 117, 117, 209, 243,
	278, 114, 117, 313, 148, 208, 258, 266, 303, 117,
	117, -147, -150, -147, 276, -71, -117, -195, 8, 7,
	7, -102, 129, -67, -102, 134, -67, 129, -90, -91,
	-116, -135, -136, 160, 108, 185, -119, 22, 91, -119,
	-119, 44, 335, 335, 338, -259, -95, 334, -106, -197,
	-163, 327, -165, 325, 326, 320, 177, 314, -177, -167,
	-180, 100, 232, 334, -75, -166, 339, 9, -253, -47,
	29, -178, -179, 48, -67, 7, 8, 5, 6, -73,
	-204, -173, -213, 282, 106, 179, -251, -252, 4, -235,
	-228, -205, -215, -209, -212, 145, 57, 73, 76, 74,
	77, 244, 293, 49, 28, 104, 105, 197, 203, 263,
	280, 281, 129, 180, 130, 55, 121, 156, 93, 37,
	39, 41, 42, 50, 51, 82, 84, 85, 111, 139,
	141, 142, 143, 182, 212, 251, 261, 274, 275, 301,
	-236, -216, -217, -210, -211, -218, -106, -114, 327, -75,
	334, -113, -186, -163, 86, -54, 221, -53, 21, 23,
	94, 298, 100, 255, 270, 236, 255, 270, 236, 221,
	100, 339, 221, 221, 100, -233, -76, 338, -227, 327,
	-234, -233, 259, 335, -100, -75, -112, -196, -77, -75,
	-77, 245, -67, 30, 100, -56, 338, 47, 226, 100,
	-56, 338, 100, -56, 100, 100, 335, 338, -195, 129,
	-78, 30, -174, -202, -203, -205, -214, -208, -212, -213,
	40, 46, 45, 271, 170, 240, 252, 296, 38, 186,
	140, 139, 141, 142, 143, 251, 37, 212, 111, 93,
	85, 84, 182, 42, 41, -216, -217, -210, -211, 82,
	274, 275, 145, 39, 51, 50, 301, 261, -104, -163,
	-274, -280, -274, 30, -144, -226, -104, 338, 158, -82,
	164, 176, 126, 188, 311, -225, 86, -231, -225, 86,
	71, -232, 5, 4, -173, -187, 86, 161, -213, 336,
	-227, 247, -102, 22, -226, -277, 114, -274, -226, -226,
	-226, -226, -226, -29, -67, 158, -226, -226, 266, 134,
	266, -71, -56, 338, 334, -89, 177, -257, 308, -89,
	334, -68, 129, -67, -257, 177, -116, -136, -135, -137,
	-163, 22, -140, 110, 173, -163, -165, -46, -46, -46,
	-92, -191, -163, -255, 30, -94, -97, 338, 117, 10,
	11, 56, 33, 325, 326, 327, 328, 112, 329, 330,
	323, 324, 322, 317, 318, 319, 62, 165, 234, 13,
	14, 15, 26, 190, 159, 314, 131, 249, 320, 16,
	17, 18, 147, 36, 132, -72, 30, 4, -80, -163,
	-163, -163, -163, -163, 196, -110, -158, 332, -47, 334,
	-47, -163, -104, 7, -47, -172, 332, -181, -163, -111,
	334, 5, 334, 5, -260, 309, 114, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 205, -222, 304, -222, -222, -206,
	334, -206, -207, 334, -206, 310, 315, 334, -97, -75,
	338, 335, 338, 276, -133, 64, 58, -153, 129, 58,
	-239, -67, 64, -240, 53, 288, 207, 116, -133, 64,
	-133, 64, 64, -195, 33, -29, 117, 33, -29, 117,
	276, -78, -67, 276, 276, -195, -199, 316, -67, -199,
	338, 117, 335, 338, -155, 306, -141, -29, 334, 86,
	30, -141, -107, -108, -198, -109, -75, 334, -67, -67,
	-78, -79, -102, -103, -103, -94, -17, -200, 100, -20,
	-29, -24, -38, -14, 335, 338, -96, 29, -129, 334,
	312, 168, 83, 127, 167, -130, 238, 335, 338, 276,
	117, 279, 335, -151, -81, 211, 253, 222, 241, 338,
	-227, -276, -67, -75, -78, -75, -195, -84, -94, -85,
	-67, -154, -153, -241, -242, -239, 134, 288, 107, 30,
	100, -63, 201, 30, 187, 177, -59, 268, 100, -138,
	-223, 334, 326, -139, 232, 233, 338, -52, 31, 90,
	334, 335, -155, -197, -99, -193, 332, -195, -75, -47,
	-194, 334, -220, -202, -219, 217, 218, 216, 220, 219,
	-202, -227, 273, -163, -163, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, -163, 159, 131, 249, 36, 132,
	-163, 276, -163, -163, -163, -163, 169, 177, 179, 282,
	106, 289, 91, 183, -285, 264, 32, -170, -47, 334,
	-185, 27, 254, 22, -227, -177, 232, 334, -158, -163,
	-159, -104, 335, 335, 338, -104, -176, 333, -172, -184,
	-183, 305, 335, -104, 302, 22, 91, 327, 7, -129,
	-261, 109, 122, 334, 335, 335, -163, -163, -123, -221,
	-104, 4, 312, 168, 83, 127, 167, 238, -123, -124,
	-163, -104, -125, -164, -165, 325, 326, 320, 334, 232,
	-126, -163, -104, -163, 43, 155, 277, -127, -163, 117,
	-104, -163, -163, -163, -104, -104, -104, 334, 7, 7,
	273, 273, 7, -155, 335, -186, -53, -75, -67, -67,
	177, -153, 129, -58, 177, -202, -67, 334, 334, 150,
	150, -67, -67, 129, -67, 129, -67, -67, -54, 221,
	-29, 334, -29, 334, -67, 221, -67, -75, 221, -40,
	128, 183, -43, 308, -233, 259, 117, -75, -118, 227,
	-163, -118, -143, 187, -100, 300, -67, -118, -98, 338,
	117, 319, -100, -56, -56, -56, -195, -202, 332, 332,
	7, 276, 276, 276, 276, 334, -163, -276, -276, -64,
	286, 61, 211, -231, 338, -199, 335, 335, 338, -68,
	134, -68, -29, -102, 5, -29, -75, 100, -60, 96,
	-284, 319, -67, -139, -163, -191, -20, -115, 122, -199,
	338, 69, -122, 149, 172, 118, 157, 229, 137, 7,
	103, -32, -160, 339, 334, -190, 315, -47, -194, -193,
	313, -163, -163, 276, -285, 264, -170, -163, 169, 179,
	282, 106, 289, 91, 183, 117, 334, -164, -164, -104,
	-167, 334, -104, 333, 342, 335, -163, 333, 333, 338,
	-182, -183, 95, -163, -91, 338, -90, -163, -104, -104,
	335, 335, -266, 195, 334, 334, -163, 30, 338, 335,
	117, 335, 335, -131, 202, 335, 10, 11, 325, 326,
	327, 328, 112, 329, 330, 323, 324, 322, 317, 318,
	319, 62, 165, 234, 13, 14, 15, 147, 132, -164,
	-164, -164, -104, 334, 335, -168, -169, 117, 114, 30,
	-127, -127, -127, 335, 117, -104, 338, 338, 338, 335,
	335, 335, 7, 335, 338, 335, 313, 313, 335, -115,
	276, 276, 100, 177, 297, -243, -240, -163, -93, -192,
	-67, -254, 334, -251, -252, -73, 334, 334, -51, 94,
	245, -134, 100, -56, 100, -56, 276, -133, 64, -104,
	-104, 276, 276, -43, 117, 265, 189, 259, -106, 178,
	-118, 63, 335, -155, -108, -99, -186, 335, 333, 7,
	7, 335, 168, 127, 167, -130, 167, -130, -130, 7,
	-67, -86, 133, -154, 334, -68, 334, 334, -89, 334,
	-67, -61, 154, -284, -230, -257, 188, 335, 335, -171,
	124, 44, -193, 149, 149, -193, -122, 149, -120, 194,
	-120, -120, -272, 334, -17, 334, 333, -190, -227, 332,
	340, -104, -189, -188, 30, -67, 192, 335, -163, -163,
	-164, -164, 117, 334, -163, -174, 26, 26, 335, -104,
	335, 338, -159, -163, 335, -172, 97, -163, 272, 335,
	302, -91, -91, -91, 5, -267, -67, 334, 306, -90,
	335, -220, -202, -163, -168, -163, -220, -202, -164, -164,
	-164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
	-164, -164, -164, -164, -164, -164, -164, 91, 177, 183,
	-164, 338, -104, 335, -169, -168, -163, -163, -202, 335,
	335, 335, -104, -163, -163, -163, 335, 7, -171, -67,
	-67, -153, 100, -244, 64, -245, 56, 107, 68, 177,
	179, 288, 207, 53, 86, 215, 335, 335, 338, -74,
	-111, 56, -74, -163, 334, -93, -94, 177, 86, 177,
	86, 79, 284, -67, -67, -75, -67, -67, 335, 335,
	-67, -75, -234, 273, 334, -142, 334, 187, -29, -118,
	319, 333, 333, 335, 132, -93, 334, -94, -84, 30,
	-93, 187, -62, 153, -284, -230, -59, -263, 307, -163,
	-104, -193, -193, -121, 295, 187, 149, -193, 333, 335,
	-273, 7, 333, -201, -190, -189, 7, -162, -161, 115,
	175, 335, -67, 334, -190, 26, 26, -163, -174, 335,
	-163, -163, 335, -163, 333, -163, 5, -163, 335, 335,
	335, -268, -67, -163, 335, 335, 335, -169, 117, 91,
	183, 334, -163, 335, 335, 338, 335, 335, 335, -263,
	-153, -67, -227, -67, 107, 129, 179, 150, 334, -164,
	-75, -152, -281, 67, 262, -192, -52, -227, -52, 335,
	-104, 335, 335, 179, 179, -163, -202, -56, -56, 276,
	276, 276, 276, -166, -73, -67, -42, -41, 5, 92,
	-94, 64, -114, -47, 334, 198, 335, -93, 335, 335,
	-29, 335, -75, -284, -230, -60, -264, -265, -67, -121,
	334, -163, -193, -160, 335, 338, -190, 335, -189, 333,
	338, 341, 319, -190, 334, -94, -188, -163, -163, 335,
	335, -91, -262, 200, 335, -164, 117, 334, -174, 335,
	-163, -245, -68, 177, -163, -69, 334, -86, 334, -74,
	-91, 215, -55, 56, -67, -67, 334, 334, 334, 338,
	335, -44, 319, 290, 178, 335, -67, -67, -152, 335,
	-86, -152, 334, -230, -61, 338, 30, -94, -190, 7,
	-189, -17, -161, -227, 332, -189, -94, 335, 335, -91,
	44, -164, -174, 335, 335, 100, 335, -248, 166, -67,
	-94, -52, 335, -75, -50, 295, -227, -104, -104, -104,
	-41, 5, 245, -155, 334, -86, -152, -86, -93, -62,
	-265, -267, 335, -188, 333, 7, 335, -269, 210, 233,
	-104, 335, 107, -246, -249, -247, 187, 118, 199, 250,
	335, 335, -89, -163, 335, 335, -91, -107, -94, -86,
	335, -190, 333, 335, -270, -271, 36, 285, 71, -163,
	-270, -67, -247, 187, -249, 187, 290, 89, -248, 335,
	-155, 335, -152, -189, -271, 204, 113, 232, 204, 113,
	-250, 174, 226, 47, 245, -250, -246, -57, 47, 226,
	-86, 26, 20, 179, 86, -271,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 449, 0, 0, 0, 0, 0,
	0, 0, 421, -2, 0, 164, 0, 365, 0, 365,
	365, 369, 0, 0, 451, 0, 331, 448, -2, 459,
	0, 0, 0, 457, 435, 0, 0, -2, 0, 0,
	0, 0, 0, 138, 0, 989, 918, 924, 925, 949,
	950, 951, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 0, 0, 920, 989, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 0, 243, 963, 964, 965, 966, 967,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 124, 131, 132, 1042, 134,
	0, 141, 142, 143, 145, 146, 147, 148, 149, 150,
	151, 0, 358, 1067, 371, 159, 1019, 1072, 977, 1148,
	1091, 167, 172, 0, 1154, 175, 180, -2, 100, 206,
	207, 208, 209, 210, 0, 0, 0, 216, 245, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 228, 232,
	0, 0, 0, 239, 0, 0, 373, 364, 373, 361,
	362, 363, 366, 0, 357, 154, 155, 156, 157, 0,
	450, 158, 183, 184, 185, 194, 195, 196, 197, 320,
	0, 322, 204, 205, 945, 0, 959, 960, 961, 962,
	0, 0, 0, 0, 0, 330, -2, 431, 432, -2,
	0, 454, 454, 454, 0, 0, 432, 0, 440, 1047,
	443, 931, 441, 0, 0, 456, 455, 0, 436, 538,
	0, 485, 0, 2, 0, 1132, 538, 0, 1132, 923,
	0, 0, 1132, 0, 0, 139, 140, 928, 926, 927,
	0, 0, 0, 0, 921, 897, 895, 896, 0, 0,
	0, 0, 544, 88, 1132, 56, 1132, 916, 56, 1132,
	98, 56, 1132, 96, 1132, 0, 119, 121, 1160, 0,
	0, 0, 0, 129, 0, 133, 135, 0, 0, 0,
	370, 160, 1121, 162, 0, 0, 166, 374, 376, 377,
	378, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	178, 101, 0, 0, 211, 65, 66, 0, 224, 229,
	0, 247, 0, 0, 0, 0, 0, 0, 225, 230,
	226, 0, 0, 233, 0, 235, 236, 0, 0, 0,
	0, 359, 372, 360, 0, 368, 56, 542, 321, 947,
	946, 303, 1132, 447, 303, 953, 447, 1132, -2, 0,
	427, 466, 467, 0, 0, 0, 0, 452, 453, 0,
	0, 0, 423, 424, 0, 442, 0, 0, 488, 908,
	912, 913, 642, 0, 0, 0, 0, 0, 0, 734,
	736, 1126, 1148, 0, 738, 739, 0, 741, 743, 744,
	0, 747, 748, 888, 920, 934, 935, 936, 937, 0,
	0, 940, 0, 942, 943, 944, 788, 757, -2, -2,
	932, 574, 575, 576, 577, -2, 1162, 761, 763, 765,
	766, 767, 768, 0, 1110, 1127, 1128, 1144, 1145, 1153,
	1157, 1158, 1132, 1141, 1133, 1122, 1130, 1139, 994, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	958, 604, 605, 610, 611, 613, 488, 486, 539, 540,
	0, 0, 905, 903, 904, 33, 354, 35, 0, 354,
	354, 0, 0, 0, 0, 252, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 529, 919, 0, 893, 894,
	529, 67, 78, 0, 0, 914, 898, 548, 0, 398,
	0, 0, 545, 0, 0, 90, 0, 54, 55, 0,
	92, 0, 0, 94, 0, 0, 449, 0, 0, 1132,
	0, 449, 0, 846, 556, 557, 558, 559, 560, 639,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 581, 582, 583, 584, 585, 586, 587, 601, 0,
	580, 580, 580, 593, 594, 602, 603, 608, 609, 620,
	621, 623, 625, 619, 619, 619, 616, 617, 0, 844,
	0, 144, 0, 0, 163, 0, 0, 0, 0, 379,
	191, 192, 193, 381, 382, 168, 170, 181, 169, 171,
	173, 174, 198, 199, 200, 201, 202, 203, 0, 0,
	102, 214, 212, 213, 215, 217, 0, 244, 218, 219,
	220, 221, 222, 227, 231, 234, 237, 238, 0, 0,
	0, 367, 323, 0, 261, 0, 0, 326, 446, 0,
	0, 0, 1132, 952, 386, 0, 430, 464, 465, 468,
	472, 473, 476, 479, 480, 470, 642, 437, 438, 439,
	460, 461, 341, 444, 0, 0, 548, 0, 0, 0,
	0, 0, 0, 823, 824, 825, 826, 827, 828, 831,
	832, 829, 830, 833, 834, 835, 0, 0, 0, 836,
	837, 838, 0, 0, 840, 0, 842, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 0, 911, 839, 647,
	648, 649, 671, 672, 0, 735, 899, 892, 737, 0,
	-2, 844, 0, 740, 745, 746, 0, 0, 887, -2,
	0, 939, 0, 639, 790, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 589, 607, 618, 615, 614, 591,
	0, 590, 588, 0, 592, 0, 0, 0, 548, 0,
	0, 907, 0, 0, 0, 0, 353, 37, 1132, 0,
	58, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 0, 251, 0,
	0, 0, 922, 0, 0, 0, 70, 0, 929, 77,
	0, 0, 0, 0, 410, 0, 410, 400, 0, 0,
	0, 410, 413, 414, 416, 417, 0, 0, 546, 89,
	917, 56, 99, 56, 56, 97, 105, 120, 0, 122,
	125, 126, 127, 128, 123, 0, 549, 551, 561, 0,
	626, 627, 628, 629, 630, 631, 640, 130, 0, 0,
	0, 0, 165, 375, 380, 0, 188, 0, 190, 0,
	103, 246, 152, 240, 241, 529, 543, 0, 0, 260,
	928, 262, 264, 265, 266, 267, 953, 0, 953, 0,
	0, 324, 0, 0, 0, 0, 388, 394, 0, 0,
	474, 0, 0, 471, 477, 478, 0, 463, 339, 340,
	449, 930, 482, 909, 529, 489, 0, 499, 538, 515,
	504, 0, 643, 552, 553, 595, 596, 597, 598, 599,
	644, 645, 0, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, -2, -2, -2, 663, 664, 665, -2,
	-2, -2, 669, 670, -2, 841, 843, 0, 902, 0,
	-2, 0, -2, -2, -2, -2, 683, 0, 685, 688,
	690, 692, 0, 0, 0, 0, 901, 702, 879, 0,
	0, 820, 821, 822, 910, 687, 0, 0, 900, 891,
	0, 0, -2, 742, 0, 0, 0, 850, 851, 886,
	882, 0, 749, 459, 0, 0, 0, 0, 0, 948,
	798, 0, 0, 0, 762, 764, 0, 0, 0, 0,
	854, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	844, 864, 0, 0, 705, 0, 0, 0, 0, 1148,
	0, 844, 872, 0, 0, 0, 0, 0, 844, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 482, 541, 906, 36, 343, 0, 0,
	0, 39, 1132, 47, 0, 275, 0, 0, 0, 0,
	0, 356, 48, 1132, 56, 1132, 56, 49, 34, 354,
	248, 0, 249, 0, 347, 0, 342, 345, 0, 77,
	0, 0, 64, 0, 68, 79, 0, 915, 87, 0,
	547, 395, 410, 0, 0, 402, 399, 397, 548, 0,
	0, 0, 0, 91, 93, 95, 0, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 136, 137, 161,
	186, 187, 189, 182, 0, 242, 269, 302, 0, 0,
	953, 0, 258, 303, 325, 327, 0, 0, 390, 394,
	0, 393, 447, 0, 0, 462, 0, 484, 0, 487,
	0, 0, 0, 0, 0, 535, 535, 535, 533, 509,
	449, 0, 515, 0, 0, 527, 0, -2, 504, 0,
	0, -2, -2, 0, 0, 0, 703, -2, 684, 686,
	689, 691, 693, 0, 0, 0, 0, 0, 0, 0,
	704, 0, 0, 889, 892, -2, 845, 848, 849, 0,
	0, 883, 0, 0, 0, 0, 458, 459, 459, 459,
	755, 0, 756, 0, 0, 0, 0, 0, 0, 771,
	0, 772, 773, 0, 0, 774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 708,
	709, 710, 0, 0, 775, 870, 871, 0, 0, 0,
	0, 0, 0, 780, 0, 877, 0, 0, 0, 784,
	785, 786, 0, 578, 0, 600, 622, 624, 612, 484,
	0, 0, 0, 0, 57, 273, 292, 0, 0, 332,
	338, 338, 0, 758, 759, 0, 0, 0, 41, 0,
	0, 0, 0, 45, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 80, 408, 409,
	396, 407, 0, 410, 415, 412, 418, 0, 554, 0,
	0, 562, 632, 633, 634, 635, 636, 637, 638, 0,
	153, 256, 0, 263, 0, 0, 0, 261, 0, 0,
	0, 392, 394, 0, 385, 386, 469, 475, 445, 792,
	0, 0, 490, 0, 0, 0, 0, 0, 530, 534,
	531, 532, 0, 0, 0, 0, 515, 527, 496, 0,
	0, 0, 503, 526, 0, 525, 514, -2, 646, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 880, 0,
	815, 0, 0, 891, -2, 852, 881, 885, 0, 750,
	0, 0, 0, 0, 941, 796, 797, 801, 0, 0,
	760, 0, 0, 853, 863, 865, 706, 707, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, -2, -2,
	-2, 724, 725, 726, -2, -2, -2, 0, 0, 0,
	866, 0, 0, 818, 868, 869, 874, 875, 0, 777,
	778, 779, 876, 0, 0, 0, 606, 0, 792, 349,
	351, 38, 0, 274, 0, 277, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 294, 301, 0, 341,
	933, 0, 341, 0, 0, 0, 0, 0, 53, 0,
	0, 355, 0, 56, 56, 344, 0, 0, 0, 0,
	348, 346, 69, 0, 0, 0, 0, 0, 401, 411,
	0, 555, 550, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 394, 0, 387, 388, 433, 0, 483,
	481, 517, 0, 519, 0, 0, 0, 521, 499, 510,
	0, 512, 515, 0, 527, 501, 0, 0, 494, 0,
	493, 515, 523, 0, 0, 0, 0, -2, 0, 696,
	-2, -2, 814, 845, 890, 884, 938, 459, 751, 753,
	754, 803, 800, 0, 787, 769, 770, 862, 0, 0,
	0, 0, 845, 817, 776, 0, 782, 783, 579, 434,
	40, 0, 278, 279, 953, 0, 282, 285, 0, 287,
	955, 269, 0, 298, 299, 333, 334, 337, 335, 338,
	459, 296, 0, 42, 43, 52, 60, 44, 50, 0,
	0, 0, 0, 528, 0, 0, 0, 74, 72, 0,
	0, 0, 419, 420, 0, 0, 301, 0, 291, 269,
	259, 301, 0, 0, 389, 390, 791, 793, 0, 518,
	0, 537, 520, 515, 511, 0, 527, 449, 508, 497,
	0, 498, 0, 527, 0, 0, 505, -2, -2, 697,
	816, 0, 459, 0, 789, -2, 0, 0, 0, 819,
	0, 276, 280, 0, 0, 307, 0, 295, 0, 341,
	0, 0, 62, 0, 350, 352, 0, 0, 0, 0,
	76, 73, 0, 0, 404, 548, 406, 0, 269, 301,
	257, 269, 0, 391, 392, 0, 0, 0, 0, 513,
	506, 0, 495, 491, 0, 502, 0, 524, 752, 806,
	0, -2, 0, 732, 781, 0, 286, 312, 0, 0,
	0, 336, 750, 303, 46, 0, 59, 0, 0, 459,
	75, 71, 0, 405, 0, 289, 269, 328, 0, 384,
	794, 795, 536, 500, 515, 0, 522, 0, 0, 0,
	802, 733, 0, 288, 308, 309, 0, 304, 305, 306,
	954, 300, 307, 61, 253, 255, 0, 548, 0, 290,
	301, 527, 492, 799, 804, 807, -2, 1094, 986, 0,
	805, 281, 310, 0, 311, 0, 0, 0, 312, 0,
	403, 272, 269, 507, 0, 809, 810, 811, 812, 813,
	313, 0, 316, 317, 0, 314, 297, 268, 270, 271,
	329, 0, 315, 318, 319, 808,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 323, 3, 329, 324, 3,
	334, 335, 327, 325, 338, 326, 336, 328, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 342, 337,
	317, 319, 318, 3, 339, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 332, 3, 333, 330, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 340, 322, 341, 320,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 321,
	57660, 331, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:792
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:804
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:901
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:924
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:934
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:996
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:997
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1000
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1001
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1074
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1405
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			return unimplemented(sqllex, "set local")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{ /* SKIP DOC */
		}
	case 165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			return unimplemented(sqllex, "set from current")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1502
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = Low
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = Normal
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = High
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowTrace{Select: nil}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowTrace{Select: sqlDollar[4].union.slct()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1726
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1730
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1754
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1758
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1762
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1805
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1809
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1815
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1819
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1823
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1827
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = DropDefault
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return unimplemented(sqllex, "match full")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return unimplemented(sqllex, "match partial")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return unimplemented(sqllex, "match simple")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2120
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2129
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2130
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			return unimplemented(sqllex, "no action")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			return unimplemented(sqllex, "action set null")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			return unimplemented(sqllex, "action set default")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = true
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = false
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2253
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2257
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = Ascending
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = Descending
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2311
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2312
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = true
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = false
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2368
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2369
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.str = ""
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.str = ""
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = ReadOnly
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = ReadWrite
		}
	case 383:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.str = ""
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.str = ""
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.str = ""
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.str = ""
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2524
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2588
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2592
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 411:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2623
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2850
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2855
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2856
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2859
		{
			return unimplemented(sqllex, "cte")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2863
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2867
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2871
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = true
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = false
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = false
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = true
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2895
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2953
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3010
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &From{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3100
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3162
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = nil
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = true
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = false
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.str = astFullJoin
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.str = astLeftJoin
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.str = astRightJoin
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.str = astInnerJoin
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3347
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3433
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3446
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3461
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3470
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = nil
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = year
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = month
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = day
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = hour
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = minute
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = month
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = hour
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = minute
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = minute
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = nil
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = second
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3854
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3889
		{
			return unimplemented(sqllex, "at tz")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4123
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4296
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4349
		{
			return unimplemented(sqllex, "variadic")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4350
		{
			return unimplemented(sqllex, "variadic")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4373
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			return unimplemented(sqllex, "func_application")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4394
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			return unimplemented(sqllex, "current role")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4412
		{
			return unimplemented(sqllex, "current user")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4413
		{
			return unimplemented(sqllex, "session user")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			return unimplemented(sqllex, "user")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4443
		{
			return unimplemented(sqllex, "treat")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4487
		{
			return unimplemented(sqllex, "within group")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4488
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = Window(nil)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4523
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			return unimplemented(sqllex, "frame range")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4586
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4587
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4591
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4598
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4599
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = Any
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = Some
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = All
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = Plus
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = Minus
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = Mult
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = Div
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = FloorDiv
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = Mod
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = Bitand
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = Bitor
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = Pow
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = Bitxor
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = LT
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = GT
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = EQ
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = LE
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = GE
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = NE
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = Like
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = NotLike
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = ILike
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = NotILike
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4966
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5084
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5128
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5164
		{
			return unimplemented(sqllex, "func const")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5173
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = DNull
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.str = ""
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
