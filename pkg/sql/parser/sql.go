// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const COPY = 57412
const COVERING = 57413
const CREATE = 57414
const CROSS = 57415
const CSV = 57416
const CUBE = 57417
const CURRENT = 57418
const CURRENT_CATALOG = 57419
const CURRENT_DATE = 57420
const CURRENT_SCHEMA = 57421
const CURRENT_ROLE = 57422
const CURRENT_TIME = 57423
const CURRENT_TIMESTAMP = 57424
const CURRENT_USER = 57425
const CYCLE = 57426
const DATA = 57427
const DATABASE = 57428
const DATABASES = 57429
const DATE = 57430
const DAY = 57431
const DEC = 57432
const DECIMAL = 57433
const DEFAULT = 57434
const DEALLOCATE = 57435
const DEFERRABLE = 57436
const DELETE = 57437
const DESC = 57438
const DISCARD = 57439
const DISTINCT = 57440
const DO = 57441
const DOUBLE = 57442
const DROP = 57443
const ELSE = 57444
const ENCODING = 57445
const END = 57446
const ESCAPE = 57447
const EXCEPT = 57448
const EXISTS = 57449
const EXECUTE = 57450
const EXPERIMENTAL_FINGERPRINTS = 57451
const EXPERIMENTAL = 57452
const EXPLAIN = 57453
const EXTRACT = 57454
const EXTRACT_DURATION = 57455
const FALSE = 57456
const FAMILY = 57457
const FETCH = 57458
const FILTER = 57459
const FIRST = 57460
const FLOAT = 57461
const FLOAT4 = 57462
const FLOAT8 = 57463
const FLOORDIV = 57464
const FOLLOWING = 57465
const FOR = 57466
const FORCE_INDEX = 57467
const FOREIGN = 57468
const FROM = 57469
const FULL = 57470
const GRANT = 57471
const GRANTS = 57472
const GREATEST = 57473
const GROUP = 57474
const GROUPING = 57475
const HAVING = 57476
const HELP = 57477
const HIGH = 57478
const HOUR = 57479
const IMPORT = 57480
const INCREMENTAL = 57481
const IF = 57482
const IFNULL = 57483
const ILIKE = 57484
const IN = 57485
const INET = 57486
const INTERLEAVE = 57487
const INDEX = 57488
const INDEXES = 57489
const INITIALLY = 57490
const INNER = 57491
const INSERT = 57492
const INT = 57493
const INT2VECTOR = 57494
const INT2 = 57495
const INT4 = 57496
const INT8 = 57497
const INT64 = 57498
const INTEGER = 57499
const INTERSECT = 57500
const INTERVAL = 57501
const INTO = 57502
const IS = 57503
const ISOLATION = 57504
const JOB = 57505
const JOBS = 57506
const JOIN = 57507
const KEY = 57508
const KEYS = 57509
const KV = 57510
const LATERAL = 57511
const LC_CTYPE = 57512
const LC_COLLATE = 57513
const LEADING = 57514
const LEAST = 57515
const LEFT = 57516
const LEVEL = 57517
const LIKE = 57518
const LIMIT = 57519
const LOCAL = 57520
const LOCALTIME = 57521
const LOCALTIMESTAMP = 57522
const LOW = 57523
const LSHIFT = 57524
const MATCH = 57525
const MINUTE = 57526
const MONTH = 57527
const NAN = 57528
const NAME = 57529
const NAMES = 57530
const NATURAL = 57531
const NEXT = 57532
const NO = 57533
const NO_INDEX_JOIN = 57534
const NORMAL = 57535
const NOT = 57536
const NOTHING = 57537
const NULL = 57538
const NULLIF = 57539
const NULLS = 57540
const NUMERIC = 57541
const OF = 57542
const OFF = 57543
const OFFSET = 57544
const OID = 57545
const ON = 57546
const ONLY = 57547
const OPTIONS = 57548
const OR = 57549
const ORDER = 57550
const ORDINALITY = 57551
const OUT = 57552
const OUTER = 57553
const OVER = 57554
const OVERLAPS = 57555
const OVERLAY = 57556
const PARENT = 57557
const PARTIAL = 57558
const PARTITION = 57559
const PASSWORD = 57560
const PAUSE = 57561
const PLACING = 57562
const PLANS = 57563
const POSITION = 57564
const PRECEDING = 57565
const PRECISION = 57566
const PREPARE = 57567
const PRIMARY = 57568
const PRIORITY = 57569
const QUERIES = 57570
const QUERY = 57571
const RANGE = 57572
const READ = 57573
const REAL = 57574
const RECURSIVE = 57575
const REF = 57576
const REFERENCES = 57577
const REGCLASS = 57578
const REGPROC = 57579
const REGPROCEDURE = 57580
const REGNAMESPACE = 57581
const REGTYPE = 57582
const RENAME = 57583
const REPEATABLE = 57584
const RELEASE = 57585
const RESET = 57586
const RESTORE = 57587
const RESTRICT = 57588
const RESUME = 57589
const RETURNING = 57590
const REVOKE = 57591
const RIGHT = 57592
const ROLLBACK = 57593
const ROLLUP = 57594
const ROW = 57595
const ROWS = 57596
const RSHIFT = 57597
const SAVEPOINT = 57598
const SCATTER = 57599
const SEARCH = 57600
const SECOND = 57601
const SELECT = 57602
const SEQUENCES = 57603
const SERIAL = 57604
const SERIALIZABLE = 57605
const SESSION = 57606
const SESSIONS = 57607
const SESSION_USER = 57608
const SET = 57609
const SETTING = 57610
const SETTINGS = 57611
const SHOW = 57612
const SIMILAR = 57613
const SIMPLE = 57614
const SMALLINT = 57615
const SMALLSERIAL = 57616
const SNAPSHOT = 57617
const SOME = 57618
const SPLIT = 57619
const SQL = 57620
const START = 57621
const STATUS = 57622
const STDIN = 57623
const STRICT = 57624
const STRING = 57625
const STORE = 57626
const STORING = 57627
const SUBSTRING = 57628
const SYMMETRIC = 57629
const SYSTEM = 57630
const TABLE = 57631
const TABLES = 57632
const TEMP = 57633
const TEMPLATE = 57634
const TEMPORARY = 57635
const TESTING_RANGES = 57636
const TESTING_RELOCATE = 57637
const TEXT = 57638
const THEN = 57639
const TIME = 57640
const TIMESTAMP = 57641
const TIMESTAMPTZ = 57642
const TO = 57643
const TRAILING = 57644
const TRACE = 57645
const TRANSACTION = 57646
const TREAT = 57647
const TRIM = 57648
const TRUE = 57649
const TRUNCATE = 57650
const TYPE = 57651
const UNBOUNDED = 57652
const UNCOMMITTED = 57653
const UNION = 57654
const UNIQUE = 57655
const UNKNOWN = 57656
const UPDATE = 57657
const UPSERT = 57658
const USE = 57659
const USER = 57660
const USERS = 57661
const USING = 57662
const UUID = 57663
const VALID = 57664
const VALIDATE = 57665
const VALUE = 57666
const VALUES = 57667
const VARCHAR = 57668
const VARIADIC = 57669
const VIEW = 57670
const VARYING = 57671
const WHEN = 57672
const WHERE = 57673
const WINDOW = 57674
const WITH = 57675
const WITHIN = 57676
const WITHOUT = 57677
const WRITE = 57678
const YEAR = 57679
const ZONE = 57680
const NOT_LA = 57681
const WITH_LA = 57682
const AS_LA = 57683
const POSTFIXOP = 57684
const UMINUS = 57685
const HELPTOKEN = 57686

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6614

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	363, 53,
	-2, 688,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	146, 540,
	-2, 0,
	-1, 62,
	95, 688,
	150, 688,
	315, 688,
	316, 688,
	-2, 0,
	-1, 72,
	106, 663,
	116, 663,
	158, 663,
	177, 663,
	202, 663,
	208, 663,
	312, 663,
	-2, 652,
	-1, 105,
	4, 690,
	20, 690,
	21, 690,
	23, 690,
	28, 690,
	33, 690,
	34, 690,
	35, 690,
	36, 690,
	37, 690,
	38, 690,
	39, 690,
	40, 690,
	41, 690,
	42, 690,
	44, 690,
	45, 690,
	46, 690,
	47, 690,
	48, 690,
	51, 690,
	52, 690,
	53, 690,
	55, 690,
	56, 690,
	60, 690,
	61, 690,
	62, 690,
	64, 690,
	65, 690,
	66, 690,
	67, 690,
	69, 690,
	70, 690,
	71, 690,
	74, 690,
	75, 690,
	76, 690,
	84, 690,
	85, 690,
	86, 690,
	87, 690,
	88, 690,
	89, 690,
	90, 690,
	91, 690,
	93, 690,
	95, 690,
	97, 690,
	100, 690,
	101, 690,
	103, 690,
	107, 690,
	108, 690,
	109, 690,
	110, 690,
	111, 690,
	112, 690,
	113, 690,
	117, 690,
	118, 690,
	119, 690,
	120, 690,
	121, 690,
	123, 690,
	125, 690,
	130, 690,
	131, 690,
	133, 690,
	136, 690,
	137, 690,
	138, 690,
	139, 690,
	140, 690,
	141, 690,
	144, 690,
	145, 690,
	147, 690,
	150, 690,
	151, 690,
	152, 690,
	153, 690,
	154, 690,
	155, 690,
	156, 690,
	157, 690,
	159, 690,
	162, 690,
	163, 690,
	164, 690,
	166, 690,
	167, 690,
	168, 690,
	170, 690,
	171, 690,
	173, 690,
	175, 690,
	178, 690,
	181, 690,
	183, 690,
	184, 690,
	185, 690,
	186, 690,
	187, 690,
	188, 690,
	190, 690,
	191, 690,
	192, 690,
	193, 690,
	197, 690,
	198, 690,
	199, 690,
	200, 690,
	201, 690,
	203, 690,
	205, 690,
	206, 690,
	209, 690,
	210, 690,
	212, 690,
	214, 690,
	215, 690,
	216, 690,
	217, 690,
	218, 690,
	219, 690,
	221, 690,
	222, 690,
	223, 690,
	224, 690,
	225, 690,
	227, 690,
	228, 690,
	229, 690,
	230, 690,
	231, 690,
	232, 690,
	233, 690,
	234, 690,
	236, 690,
	237, 690,
	238, 690,
	239, 690,
	240, 690,
	241, 690,
	242, 690,
	243, 690,
	244, 690,
	245, 690,
	246, 690,
	247, 690,
	249, 690,
	251, 690,
	252, 690,
	253, 690,
	254, 690,
	256, 690,
	257, 690,
	258, 690,
	259, 690,
	261, 690,
	262, 690,
	263, 690,
	264, 690,
	265, 690,
	267, 690,
	268, 690,
	269, 690,
	270, 690,
	272, 690,
	273, 690,
	274, 690,
	275, 690,
	277, 690,
	278, 690,
	279, 690,
	280, 690,
	281, 690,
	282, 690,
	283, 690,
	284, 690,
	285, 690,
	286, 690,
	288, 690,
	290, 690,
	291, 690,
	292, 690,
	293, 690,
	294, 690,
	295, 690,
	296, 690,
	298, 690,
	299, 690,
	300, 690,
	303, 690,
	304, 690,
	305, 690,
	306, 690,
	308, 690,
	309, 690,
	310, 690,
	311, 690,
	314, 690,
	315, 690,
	316, 690,
	317, 690,
	319, 690,
	321, 690,
	322, 690,
	323, 690,
	324, 690,
	325, 690,
	326, 690,
	329, 690,
	334, 690,
	335, 690,
	336, 690,
	337, 690,
	338, 690,
	-2, 0,
	-1, 121,
	106, 662,
	116, 662,
	158, 662,
	177, 662,
	202, 662,
	208, 662,
	312, 662,
	-2, 655,
	-1, 127,
	1, 589,
	162, 589,
	227, 589,
	231, 589,
	362, 589,
	363, 589,
	-2, 0,
	-1, 129,
	1, 589,
	362, 589,
	363, 589,
	-2, 0,
	-1, 130,
	1, 589,
	362, 589,
	363, 589,
	-2, 0,
	-1, 131,
	1, 593,
	362, 593,
	363, 593,
	-2, 0,
	-1, 138,
	4, 696,
	5, 696,
	6, 696,
	7, 696,
	8, 696,
	9, 696,
	20, 696,
	21, 696,
	23, 696,
	28, 696,
	29, 696,
	33, 696,
	34, 696,
	35, 696,
	36, 696,
	37, 696,
	38, 696,
	39, 696,
	40, 696,
	41, 696,
	42, 696,
	44, 696,
	45, 696,
	46, 696,
	47, 696,
	48, 696,
	49, 696,
	50, 696,
	51, 696,
	52, 696,
	53, 696,
	55, 696,
	56, 696,
	58, 696,
	60, 696,
	61, 696,
	62, 696,
	64, 696,
	65, 696,
	66, 696,
	67, 696,
	69, 696,
	70, 696,
	71, 696,
	73, 696,
	74, 696,
	75, 696,
	76, 696,
	78, 696,
	79, 696,
	80, 696,
	82, 696,
	83, 696,
	84, 696,
	85, 696,
	86, 696,
	87, 696,
	88, 696,
	89, 696,
	90, 696,
	91, 696,
	93, 696,
	95, 696,
	97, 696,
	100, 696,
	101, 696,
	103, 696,
	107, 696,
	108, 696,
	109, 696,
	110, 696,
	111, 696,
	112, 696,
	113, 696,
	114, 696,
	115, 696,
	117, 696,
	118, 696,
	119, 696,
	120, 696,
	121, 696,
	123, 696,
	125, 696,
	128, 696,
	130, 696,
	131, 696,
	133, 696,
	136, 696,
	137, 696,
	138, 696,
	139, 696,
	140, 696,
	141, 696,
	142, 696,
	144, 696,
	145, 696,
	147, 696,
	149, 696,
	150, 696,
	151, 696,
	152, 696,
	153, 696,
	154, 696,
	155, 696,
	156, 696,
	157, 696,
	159, 696,
	161, 696,
	162, 696,
	163, 696,
	164, 696,
	165, 696,
	166, 696,
	167, 696,
	168, 696,
	170, 696,
	171, 696,
	173, 696,
	174, 696,
	175, 696,
	176, 696,
	178, 696,
	181, 696,
	183, 696,
	184, 696,
	185, 696,
	186, 696,
	187, 696,
	188, 696,
	189, 696,
	190, 696,
	191, 696,
	192, 696,
	193, 696,
	194, 696,
	196, 696,
	197, 696,
	198, 696,
	199, 696,
	200, 696,
	201, 696,
	203, 696,
	206, 696,
	209, 696,
	210, 696,
	211, 696,
	212, 696,
	213, 696,
	214, 696,
	215, 696,
	216, 696,
	217, 696,
	218, 696,
	219, 696,
	221, 696,
	222, 696,
	223, 696,
	224, 696,
	225, 696,
	227, 696,
	228, 696,
	229, 696,
	230, 696,
	231, 696,
	232, 696,
	233, 696,
	234, 696,
	236, 696,
	237, 696,
	238, 696,
	239, 696,
	240, 696,
	241, 696,
	242, 696,
	243, 696,
	244, 696,
	245, 696,
	246, 696,
	247, 696,
	249, 696,
	250, 696,
	251, 696,
	252, 696,
	253, 696,
	254, 696,
	256, 696,
	257, 696,
	258, 696,
	259, 696,
	261, 696,
	262, 696,
	263, 696,
	264, 696,
	265, 696,
	266, 696,
	267, 696,
	268, 696,
	269, 696,
	270, 696,
	271, 696,
	272, 696,
	273, 696,
	274, 696,
	275, 696,
	277, 696,
	278, 696,
	279, 696,
	280, 696,
	281, 696,
	282, 696,
	283, 696,
	284, 696,
	285, 696,
	286, 696,
	288, 696,
	290, 696,
	291, 696,
	292, 696,
	293, 696,
	294, 696,
	295, 696,
	296, 696,
	298, 696,
	299, 696,
	300, 696,
	303, 696,
	304, 696,
	305, 696,
	306, 696,
	307, 696,
	308, 696,
	309, 696,
	310, 696,
	311, 696,
	314, 696,
	315, 696,
	316, 696,
	317, 696,
	318, 696,
	319, 696,
	321, 696,
	322, 696,
	323, 696,
	324, 696,
	325, 696,
	326, 696,
	329, 696,
	334, 696,
	335, 696,
	336, 696,
	337, 696,
	338, 696,
	339, 696,
	345, 696,
	350, 696,
	351, 696,
	352, 696,
	359, 696,
	365, 696,
	-2, 0,
	-1, 141,
	1, 53,
	363, 53,
	-2, 688,
	-1, 506,
	127, 1293,
	301, 1293,
	344, 1293,
	361, 1293,
	-2, 0,
	-1, 507,
	127, 1242,
	301, 1242,
	344, 1242,
	361, 1242,
	-2, 0,
	-1, 509,
	127, 1351,
	301, 1351,
	344, 1351,
	361, 1351,
	-2, 0,
	-1, 511,
	127, 1373,
	301, 1373,
	344, 1373,
	361, 1373,
	-2, 0,
	-1, 518,
	127, 1298,
	301, 1298,
	344, 1298,
	361, 1298,
	-2, 325,
	-1, 544,
	1, 403,
	358, 403,
	360, 403,
	362, 403,
	363, 403,
	-2, 0,
	-1, 545,
	1, 456,
	124, 456,
	358, 456,
	360, 456,
	362, 456,
	363, 456,
	-2, 0,
	-1, 551,
	1, 417,
	358, 417,
	360, 417,
	362, 417,
	363, 417,
	-2, 0,
	-1, 553,
	1, 421,
	358, 421,
	360, 421,
	362, 421,
	363, 421,
	-2, 0,
	-1, 556,
	1, 429,
	358, 429,
	360, 429,
	362, 429,
	363, 429,
	-2, 0,
	-1, 557,
	1, 434,
	358, 434,
	360, 434,
	362, 434,
	363, 434,
	-2, 0,
	-1, 560,
	1, 444,
	358, 444,
	360, 444,
	362, 444,
	363, 444,
	-2, 0,
	-1, 574,
	116, 698,
	177, 698,
	202, 698,
	-2, 658,
	-1, 577,
	116, 697,
	177, 697,
	202, 697,
	-2, 656,
	-1, 634,
	359, 1220,
	-2, 1213,
	-1, 635,
	359, 1221,
	-2, 1214,
	-1, 641,
	5, 875,
	359, 875,
	-2, 1425,
	-1, 666,
	5, 834,
	-2, 1394,
	-1, 667,
	5, 869,
	359, 869,
	-2, 1396,
	-1, 668,
	5, 844,
	-2, 1397,
	-1, 669,
	5, 843,
	-2, 1398,
	-1, 670,
	5, 869,
	359, 869,
	-2, 1401,
	-1, 671,
	5, 869,
	359, 869,
	-2, 1402,
	-1, 672,
	5, 870,
	-2, 1405,
	-1, 673,
	5, 826,
	-2, 1406,
	-1, 674,
	5, 826,
	-2, 1407,
	-1, 675,
	5, 851,
	-2, 1411,
	-1, 676,
	5, 836,
	-2, 1412,
	-1, 677,
	5, 837,
	-2, 1413,
	-1, 678,
	5, 827,
	-2, 1419,
	-1, 679,
	5, 828,
	-2, 1420,
	-1, 680,
	5, 829,
	-2, 1421,
	-1, 681,
	5, 830,
	-2, 1422,
	-1, 682,
	5, 831,
	-2, 1423,
	-1, 683,
	5, 832,
	-2, 1424,
	-1, 684,
	5, 826,
	-2, 1429,
	-1, 685,
	5, 835,
	-2, 1434,
	-1, 686,
	5, 833,
	-2, 1437,
	-1, 687,
	5, 867,
	359, 867,
	-2, 1439,
	-1, 688,
	5, 871,
	-2, 1442,
	-1, 689,
	5, 873,
	-2, 1443,
	-1, 690,
	5, 866,
	359, 866,
	-2, 1448,
	-1, 789,
	218, 686,
	-2, 533,
	-1, 793,
	204, 1217,
	-2, 0,
	-1, 828,
	1, 216,
	358, 216,
	360, 216,
	362, 216,
	363, 216,
	-2, 661,
	-1, 835,
	4, 1447,
	10, 1447,
	11, 1447,
	13, 1447,
	14, 1447,
	15, 1447,
	16, 1447,
	17, 1447,
	18, 1447,
	20, 1447,
	21, 1447,
	23, 1447,
	26, 1447,
	28, 1447,
	30, 1447,
	33, 1447,
	34, 1447,
	35, 1447,
	36, 1447,
	37, 1447,
	38, 1447,
	39, 1447,
	40, 1447,
	41, 1447,
	42, 1447,
	44, 1447,
	45, 1447,
	46, 1447,
	47, 1447,
	48, 1447,
	51, 1447,
	52, 1447,
	53, 1447,
	55, 1447,
	56, 1447,
	57, 1447,
	60, 1447,
	61, 1447,
	62, 1447,
	63, 1447,
	64, 1447,
	65, 1447,
	66, 1447,
	67, 1447,
	69, 1447,
	70, 1447,
	71, 1447,
	73, 1447,
	74, 1447,
	75, 1447,
	76, 1447,
	84, 1447,
	85, 1447,
	86, 1447,
	87, 1447,
	88, 1447,
	89, 1447,
	90, 1447,
	91, 1447,
	93, 1447,
	95, 1447,
	97, 1447,
	100, 1447,
	101, 1447,
	103, 1447,
	107, 1447,
	108, 1447,
	109, 1447,
	110, 1447,
	111, 1447,
	112, 1447,
	113, 1447,
	117, 1447,
	118, 1447,
	119, 1447,
	120, 1447,
	121, 1447,
	122, 1447,
	123, 1447,
	125, 1447,
	128, 1447,
	130, 1447,
	131, 1447,
	133, 1447,
	136, 1447,
	137, 1447,
	138, 1447,
	139, 1447,
	140, 1447,
	141, 1447,
	142, 1447,
	143, 1447,
	144, 1447,
	145, 1447,
	147, 1447,
	149, 1447,
	150, 1447,
	151, 1447,
	152, 1447,
	153, 1447,
	154, 1447,
	155, 1447,
	156, 1447,
	157, 1447,
	159, 1447,
	161, 1447,
	162, 1447,
	163, 1447,
	164, 1447,
	165, 1447,
	166, 1447,
	167, 1447,
	168, 1447,
	170, 1447,
	171, 1447,
	173, 1447,
	174, 1447,
	175, 1447,
	176, 1447,
	178, 1447,
	181, 1447,
	182, 1447,
	183, 1447,
	184, 1447,
	185, 1447,
	186, 1447,
	187, 1447,
	188, 1447,
	189, 1447,
	190, 1447,
	191, 1447,
	192, 1447,
	193, 1447,
	197, 1447,
	198, 1447,
	199, 1447,
	200, 1447,
	201, 1447,
	203, 1447,
	206, 1447,
	207, 1447,
	209, 1447,
	210, 1447,
	212, 1447,
	214, 1447,
	215, 1447,
	216, 1447,
	217, 1447,
	218, 1447,
	219, 1447,
	221, 1447,
	222, 1447,
	223, 1447,
	224, 1447,
	225, 1447,
	227, 1447,
	228, 1447,
	229, 1447,
	230, 1447,
	231, 1447,
	232, 1447,
	233, 1447,
	234, 1447,
	236, 1447,
	237, 1447,
	238, 1447,
	239, 1447,
	240, 1447,
	241, 1447,
	242, 1447,
	243, 1447,
	244, 1447,
	245, 1447,
	246, 1447,
	247, 1447,
	249, 1447,
	250, 1447,
	251, 1447,
	252, 1447,
	253, 1447,
	254, 1447,
	255, 1447,
	256, 1447,
	257, 1447,
	258, 1447,
	259, 1447,
	261, 1447,
	262, 1447,
	263, 1447,
	264, 1447,
	265, 1447,
	267, 1447,
	268, 1447,
	269, 1447,
	270, 1447,
	271, 1447,
	272, 1447,
	273, 1447,
	274, 1447,
	275, 1447,
	277, 1447,
	278, 1447,
	279, 1447,
	280, 1447,
	281, 1447,
	282, 1447,
	283, 1447,
	284, 1447,
	285, 1447,
	286, 1447,
	288, 1447,
	290, 1447,
	291, 1447,
	292, 1447,
	293, 1447,
	294, 1447,
	295, 1447,
	296, 1447,
	298, 1447,
	299, 1447,
	300, 1447,
	303, 1447,
	304, 1447,
	305, 1447,
	306, 1447,
	308, 1447,
	309, 1447,
	310, 1447,
	311, 1447,
	314, 1447,
	315, 1447,
	316, 1447,
	317, 1447,
	319, 1447,
	321, 1447,
	322, 1447,
	323, 1447,
	324, 1447,
	325, 1447,
	326, 1447,
	329, 1447,
	334, 1447,
	335, 1447,
	336, 1447,
	337, 1447,
	338, 1447,
	339, 1447,
	340, 1447,
	342, 1447,
	343, 1447,
	344, 1447,
	345, 1447,
	347, 1447,
	348, 1447,
	349, 1447,
	350, 1447,
	351, 1447,
	352, 1447,
	353, 1447,
	354, 1447,
	355, 1447,
	357, 1447,
	360, 1447,
	361, 1447,
	364, 1447,
	365, 1447,
	-2, 0,
	-1, 849,
	127, 1351,
	301, 1351,
	344, 1351,
	361, 1351,
	-2, 0,
	-1, 866,
	127, 1373,
	301, 1373,
	344, 1373,
	361, 1373,
	-2, 0,
	-1, 867,
	162, 601,
	227, 601,
	231, 601,
	-2, 313,
	-1, 936,
	116, 697,
	177, 697,
	202, 697,
	-2, 659,
	-1, 1005,
	106, 663,
	116, 663,
	158, 663,
	177, 663,
	202, 663,
	208, 663,
	312, 663,
	-2, 994,
	-1, 1015,
	359, 1197,
	-2, 1185,
	-1, 1033,
	360, 1137,
	-2, 0,
	-1, 1059,
	162, 601,
	227, 601,
	231, 601,
	-2, 596,
	-1, 1091,
	106, 663,
	116, 663,
	158, 663,
	177, 663,
	202, 663,
	208, 663,
	312, 663,
	-2, 759,
	-1, 1318,
	162, 601,
	227, 601,
	231, 601,
	-2, 315,
	-1, 1416,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 910,
	-1, 1417,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 911,
	-1, 1418,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 912,
	-1, 1422,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 916,
	-1, 1423,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 917,
	-1, 1424,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 918,
	-1, 1427,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 923,
	-1, 1433,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 925,
	-1, 1435,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 929,
	-1, 1436,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 930,
	-1, 1437,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 931,
	-1, 1438,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 932,
	-1, 1464,
	213, 1079,
	-2, 1082,
	-1, 1508,
	127, 1119,
	359, 1220,
	-2, 1213,
	-1, 1509,
	127, 1120,
	-2, 1390,
	-1, 1510,
	127, 1121,
	-2, 1297,
	-1, 1511,
	127, 1122,
	-2, 1260,
	-1, 1512,
	127, 1123,
	-2, 1277,
	-1, 1513,
	127, 1124,
	-2, 1296,
	-1, 1514,
	127, 1125,
	-2, 1348,
	-1, 1593,
	1, 760,
	73, 760,
	106, 760,
	116, 760,
	128, 760,
	132, 760,
	134, 760,
	149, 760,
	158, 760,
	165, 760,
	174, 760,
	177, 760,
	189, 760,
	202, 760,
	204, 760,
	208, 760,
	248, 760,
	250, 760,
	312, 760,
	320, 760,
	331, 760,
	332, 760,
	341, 760,
	358, 760,
	360, 760,
	362, 760,
	363, 760,
	364, 760,
	-2, 759,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 924,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 926,
	-1, 1743,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 927,
	-1, 1761,
	213, 1078,
	-2, 1081,
	-1, 1992,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 928,
	-1, 1997,
	161, 0,
	-2, 944,
	-1, 2007,
	213, 1080,
	-2, 1083,
	-1, 2049,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 971,
	-1, 2050,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 972,
	-1, 2051,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 973,
	-1, 2055,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 977,
	-1, 2056,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 978,
	-1, 2057,
	13, 0,
	14, 0,
	15, 0,
	342, 0,
	343, 0,
	344, 0,
	-2, 979,
	-1, 2191,
	161, 0,
	-2, 945,
	-1, 2194,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 948,
	-1, 2195,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 950,
	-1, 2316,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 949,
	-1, 2317,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	142, 0,
	143, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 951,
	-1, 2324,
	161, 0,
	-2, 980,
	-1, 2400,
	161, 0,
	-2, 981,
	-1, 2477,
	36, 0,
	142, 0,
	176, 0,
	271, 0,
	339, 0,
	345, 0,
	-2, 1393,
}

const sqlPrivate = 57344

const sqlLast = 42452

var sqlAct = [...]int{

	635, 2147, 2476, 2522, 2485, 2451, 1660, 2486, 1540, 2350,
	2487, 1668, 2405, 2475, 1640, 1974, 2297, 1218, 2026, 633,
	1312, 1124, 887, 2263, 2157, 2249, 1260, 71, 1731, 1225,
	2179, 739, 594, 2181, 1588, 1942, 783, 1644, 1940, 2330,
	578, 180, 1313, 464, 25, 180, 1657, 2113, 1639, 1089,
	2112, 1856, 1827, 180, 2229, 1948, 2173, 1669, 1085, 1261,
	611, 1877, 180, 632, 1643, 1068, 1221, 180, 180, 1597,
	1606, 180, 625, 1864, 180, 2083, 449, 1772, 1633, 586,
	120, 1488, 180, 1589, 1395, 1826, 1011, 610, 1390, 1462,
	870, 1715, 939, 1727, 1214, 1097, 1472, 517, 1099, 1537,
	605, 1450, 1069, 1447, 818, 869, 1339, 1343, 745, 446,
	1047, 1482, 1043, 815, 889, 1641, 748, 808, 1662, 1647,
	1575, 829, 1562, 727, 1076, 1504, 1000, 938, 497, 604,
	1342, 940, 403, 180, 180, 121, 475, 122, 1059, 1094,
	1232, 180, 120, 627, 171, 805, 176, 510, 514, 725,
	2264, 583, 1058, 538, 944, 1760, 2097, 1240, 1238, 2098,
	1661, 1240, 1240, 582, 40, 582, 1086, 180, 180, 180,
	180, 180, 1990, 1634, 2518, 180, 180, 43, 1123, 2500,
	2497, 1958, 2496, 2262, 1683, 25, 1683, 2493, 2473, 1564,
	771, 1123, 1698, 1957, 2472, 2446, 2086, 2441, 1698, 1691,
	577, 2311, 2437, 2429, 2402, 2380, 1123, 2262, 1691, 2262,
	2377, 2375, 489, 2361, 1123, 2262, 2360, 1123, 2338, 2335,
	2262, 120, 1123, 1123, 955, 956, 2318, 2285, 746, 1634,
	1691, 1683, 628, 592, 2283, 2261, 1118, 2242, 1683, 2262,
	126, 1123, 2218, 1683, 2196, 2193, 1683, 958, 1683, 1691,
	2447, 731, 1698, 732, 755, 759, 575, 765, 574, 955,
	956, 1698, 975, 976, 977, 985, 986, 987, 64, 2172,
	2311, 957, 2086, 1638, 763, 753, 757, 2167, 587, 1563,
	742, 1638, 958, 729, 1985, 989, 2093, 1797, 1798, 2001,
	2094, 1968, 1929, 1683, 1880, 1930, 1123, 1595, 1683, 1853,
	955, 956, 2062, 1123, 1844, 1842, 957, 1841, 1845, 1683,
	1840, 1683, 972, 1761, 1683, 2004, 1764, 1683, 1763, 1683,
	1123, 1771, 1765, 958, 1683, 1702, 1690, 1682, 1637, 1683,
	1691, 1683, 1638, 1930, 1797, 1798, 963, 1815, 1816, 1817,
	1569, 1730, 1713, 1321, 1568, 1797, 1798, 957, 1253, 65,
	2190, 1063, 1254, 1466, 769, 1241, 851, 141, 2265, 1241,
	1241, 848, 955, 956, 847, 975, 976, 977, 985, 986,
	987, 963, 846, 845, 124, 67, 844, 68, 978, 843,
	842, 841, 840, 839, 838, 958, 1485, 1812, 989, 1340,
	138, 982, 990, 837, 733, 730, 973, 470, 1812, 1803,
	101, 570, 569, 568, 1797, 1798, 536, 535, 534, 957,
	988, 180, 963, 180, 180, 972, 180, 533, 1957, 140,
	532, 180, 138, 138, 775, 980, 1563, 180, 531, 530,
	529, 973, 693, 528, 1486, 527, 526, 525, 524, 523,
	180, 180, 180, 180, 180, 522, 1803, 521, 520, 832,
	505, 140, 140, 504, 503, 139, 502, 1803, 822, 1813,
	501, 437, 436, 132, 435, 434, 433, 418, 585, 974,
	133, 180, 973, 1246, 963, 1872, 583, 1239, 1374, 417,
	409, 1487, 1484, 408, 180, 1818, 407, 139, 139, 123,
	406, 399, 2492, 398, 982, 990, 132, 164, 163, 162,
	180, 955, 956, 133, 974, 161, 1813, 160, 787, 159,
	180, 791, 158, 988, 759, 157, 1803, 1813, 156, 155,
	983, 123, 123, 154, 958, 1932, 153, 152, 980, 765,
	151, 150, 1814, 149, 973, 807, 148, 811, 811, 147,
	1665, 832, 146, 145, 144, 974, 143, 142, 957, 1346,
	1090, 181, 1501, 882, 1499, 782, 1489, 1497, 812, 979,
	1495, 2474, 2461, 830, 959, 960, 961, 962, 964, 965,
	951, 2456, 180, 2397, 2304, 2378, 1813, 2228, 2223, 1814,
	2219, 852, 2211, 885, 2210, 2209, 2205, 2204, 981, 2203,
	1814, 969, 970, 971, 984, 2202, 968, 966, 967, 959,
	960, 961, 962, 964, 965, 2178, 2077, 974, 1797, 1798,
	2072, 2071, 2070, 963, 2012, 937, 1928, 1884, 1007, 1797,
	1798, 691, 1849, 983, 1846, 1834, 880, 1799, 1800, 1801,
	1802, 1804, 1805, 1825, 1483, 1796, 1793, 583, 966, 967,
	959, 960, 961, 962, 964, 965, 1792, 1790, 1777, 1814,
	867, 1776, 936, 1593, 951, 1458, 1696, 864, 1088, 759,
	1257, 740, 775, 950, 780, 1087, 1809, 1810, 1811, 1019,
	1224, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	935, 2028, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804,
	1805, 981, 2464, 883, 969, 970, 971, 984, 2432, 968,
	966, 967, 959, 960, 961, 962, 964, 965, 138, 2426,
	1012, 1943, 1003, 2425, 2416, 2414, 2220, 2392, 2391, 2390,
	1803, 2347, 575, 2326, 574, 180, 138, 180, 2312, 2303,
	2291, 1803, 1341, 1726, 2282, 947, 948, 140, 1897, 2268,
	2216, 1725, 952, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	180, 180, 2155, 1972, 2153, 140, 2152, 2150, 2121, 2120,
	2101, 1459, 2089, 1996, 1067, 1917, 1911, 1897, 1896, 832,
	180, 1015, 1882, 139, 1074, 1852, 1127, 583, 1824, 1786,
	1785, 132, 180, 1045, 1046, 1049, 1782, 1757, 133, 955,
	956, 139, 1752, 1452, 180, 1052, 1048, 1051, 1580, 132,
	180, 1072, 180, 1549, 180, 1493, 133, 1664, 180, 1223,
	1217, 1121, 958, 741, 1066, 1055, 955, 956, 1041, 1216,
	1040, 1039, 1038, 1037, 120, 123, 1036, 2408, 1870, 1035,
	1034, 1033, 1032, 1031, 1030, 1251, 957, 746, 1095, 958,
	1029, 959, 960, 961, 962, 964, 965, 1028, 1027, 1026,
	180, 180, 1025, 1062, 1084, 1024, 1023, 832, 1016, 180,
	1004, 1229, 180, 957, 1003, 863, 1092, 855, 1060, 1215,
	826, 692, 1316, 2310, 2198, 2177, 1064, 2096, 2092, 1693,
	1581, 1797, 1798, 1127, 1012, 1970, 1001, 759, 1088, 1233,
	1701, 1233, 180, 2314, 1107, 879, 781, 180, 2313, 1090,
	2307, 963, 180, 180, 1347, 180, 2099, 180, 807, 180,
	1500, 180, 1498, 1959, 1053, 1496, 1122, 1634, 1494, 1054,
	933, 1057, 180, 1921, 1920, 1914, 1021, 1327, 180, 180,
	1522, 1910, 1848, 1700, 1847, 1736, 1331, 1330, 1557, 1340,
	1337, 876, 1661, 1975, 1234, 1231, 1222, 1258, 1799, 1800,
	1801, 1802, 1804, 1805, 180, 2331, 2029, 1768, 1127, 1473,
	1044, 1801, 1802, 1804, 1805, 927, 1953, 1100, 2108, 1101,
	438, 1243, 2459, 1687, 1245, 2515, 411, 2516, 1248, 1404,
	2436, 1982, 2276, 720, 1703, 1599, 2372, 2371, 1256, 1348,
	919, 2369, 2368, 718, 2132, 1255, 120, 864, 722, 716,
	833, 713, 2140, 1314, 928, 1318, 2137, 2105, 2104, 1344,
	1315, 1781, 1780, 1463, 1779, 1396, 1403, 1007, 741, 1599,
	1332, 1467, 1778, 1018, 1334, 1475, 1362, 1739, 1598, 1686,
	1628, 583, 1624, 1377, 2257, 1621, 583, 1434, 1507, 1507,
	1520, 1108, 1532, 1061, 768, 1352, 1355, 1102, 1544, 1545,
	1547, 1356, 1216, 1357, 442, 1358, 2288, 1359, 1328, 1360,
	415, 1105, 180, 640, 180, 1375, 476, 180, 581, 877,
	834, 1376, 2258, 1553, 1797, 1798, 1366, 1368, 180, 1106,
	575, 1561, 1386, 575, 575, 1387, 1388, 1127, 1267, 481,
	180, 1306, 833, 1373, 180, 477, 1586, 180, 1485, 1470,
	2435, 180, 1394, 1552, 1971, 180, 1405, 1607, 1583, 1336,
	1335, 180, 878, 1116, 441, 1658, 165, 1372, 180, 1127,
	580, 583, 2080, 478, 180, 2145, 1460, 1449, 1457, 1115,
	1371, 961, 962, 964, 965, 1582, 1088, 1449, 1600, 2146,
	1630, 572, 563, 2352, 480, 1925, 1486, 1212, 484, 1113,
	1618, 711, 2470, 1351, 2489, 1235, 1515, 423, 1626, 2022,
	591, 965, 834, 1489, 1100, 746, 1101, 1114, 926, 2507,
	582, 1611, 1613, 954, 2253, 892, 2254, 913, 862, 1610,
	1111, 746, 1797, 1798, 1594, 1473, 1803, 1559, 1267, 1267,
	1558, 1456, 759, 1487, 1484, 1567, 1454, 2515, 759, 695,
	168, 1577, 1578, 1573, 2123, 765, 2256, 1694, 2530, 1100,
	1092, 1101, 424, 1616, 914, 2259, 1445, 1572, 180, 1622,
	1603, 1950, 1629, 2019, 564, 180, 1805, 2130, 39, 1983,
	1981, 1919, 1443, 1913, 1489, 1240, 180, 1056, 180, 40,
	180, 1109, 2490, 180, 1102, 180, 1813, 180, 180, 2419,
	180, 180, 43, 1042, 479, 832, 932, 440, 1431, 180,
	169, 1596, 400, 410, 1951, 1681, 2079, 2506, 1489, 1103,
	2020, 1728, 1729, 1370, 579, 2443, 1663, 49, 1663, 1609,
	2374, 1653, 1341, 1338, 2322, 714, 443, 416, 1300, 1102,
	998, 918, 412, 2255, 1803, 714, 439, 724, 2491, 2444,
	723, 715, 413, 714, 1439, 1784, 60, 1576, 1950, 482,
	1592, 1112, 1440, 61, 1441, 126, 62, 582, 1446, 1814,
	833, 2525, 1319, 1672, 2185, 2081, 565, 1128, 923, 900,
	432, 868, 2488, 120, 765, 765, 1689, 1675, 2514, 120,
	811, 2512, 811, 64, 170, 1489, 1483, 1127, 2411, 2296,
	427, 1678, 1655, 1667, 1813, 180, 858, 2353, 598, 850,
	1676, 1679, 1677, 1684, 1429, 1432, 1608, 2505, 1714, 830,
	2124, 180, 180, 180, 1688, 180, 1685, 426, 425, 1695,
	943, 1924, 1741, 2058, 1908, 2363, 873, 2362, 1300, 1300,
	834, 1697, 1448, 924, 180, 2214, 2536, 1129, 1428, 2345,
	2272, 893, 2107, 166, 566, 1049, 2531, 1052, 833, 1893,
	1889, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	1350, 1046, 1045, 401, 65, 1442, 1704, 1814, 573, 1098,
	955, 956, 1444, 1241, 1128, 483, 567, 1656, 894, 953,
	1230, 891, 167, 120, 861, 1455, 925, 1219, 1878, 124,
	67, 874, 68, 958, 2018, 875, 1365, 2452, 1719, 765,
	1721, 1755, 759, 1706, 2523, 138, 1103, 942, 1758, 1717,
	785, 1079, 470, 1718, 1708, 101, 1720, 957, 834, 2059,
	583, 1735, 873, 1722, 1326, 2060, 1774, 1775, 1724, 402,
	1382, 873, 1082, 1430, 140, 1709, 2275, 2215, 942, 784,
	2535, 1322, 2271, 2274, 1129, 2158, 173, 1707, 1574, 1128,
	2298, 1103, 2346, 1899, 1867, 1879, 1770, 1080, 1898, 2524,
	1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805, 941, 1324,
	139, 901, 1734, 1571, 1742, 1740, 1823, 873, 132, 1570,
	2526, 1325, 963, 2257, 492, 133, 2250, 874, 1836, 428,
	580, 875, 486, 943, 1756, 583, 874, 2248, 804, 941,
	875, 2252, 1383, 802, 123, 180, 1127, 793, 1767, 1854,
	2148, 180, 180, 2289, 1860, 180, 469, 33, 3, 1129,
	180, 2258, 1923, 180, 2343, 2230, 2084, 1859, 1492, 429,
	2325, 180, 922, 1081, 911, 468, 32, 180, 180, 180,
	909, 1861, 973, 180, 2251, 2273, 180, 467, 29, 2344,
	2213, 2144, 180, 180, 180, 180, 180, 1874, 1828, 430,
	1995, 431, 180, 1926, 1791, 180, 1751, 1699, 1636, 180,
	1627, 1873, 1620, 931, 1831, 1832, 1833, 907, 1128, 180,
	1890, 930, 905, 1883, 466, 77, 465, 76, 773, 180,
	856, 180, 746, 180, 462, 21, 180, 903, 746, 746,
	180, 1909, 746, 1869, 1894, 180, 1855, 180, 897, 1916,
	1128, 615, 72, 1829, 180, 974, 800, 774, 1931, 1850,
	1933, 770, 1363, 2253, 1886, 2254, 1354, 180, 832, 463,
	22, 1022, 583, 712, 1885, 1934, 1491, 2484, 1937, 832,
	180, 1120, 1894, 917, 1858, 491, 1119, 2449, 1129, 1912,
	1862, 1863, 1907, 485, 1868, 2256, 803, 921, 33, 910,
	751, 801, 2246, 1955, 2259, 908, 1927, 1299, 2128, 2126,
	1967, 2106, 1749, 1939, 72, 180, 620, 32, 694, 1659,
	1129, 1976, 2009, 1938, 461, 27, 460, 19, 1747, 29,
	1935, 1969, 1215, 1946, 458, 18, 1652, 459, 17, 1952,
	1250, 1215, 906, 884, 1249, 563, 2002, 904, 1960, 967,
	959, 960, 961, 962, 964, 965, 1247, 177, 1966, 1998,
	1244, 404, 902, 591, 1242, 180, 77, 1117, 76, 419,
	1110, 1977, 576, 896, 1980, 584, 21, 1104, 444, 1941,
	1732, 799, 2255, 487, 177, 2385, 833, 495, 1978, 1979,
	500, 945, 747, 72, 2014, 2015, 2016, 1986, 519, 1988,
	1744, 1984, 1989, 717, 719, 916, 1075, 1299, 1299, 2516,
	1745, 22, 2309, 2063, 1750, 1961, 1962, 1267, 1963, 1964,
	2308, 1345, 453, 14, 2073, 2174, 471, 564, 1396, 2033,
	2005, 1599, 2008, 2387, 637, 454, 15, 1396, 2038, 1615,
	1614, 2021, 2023, 2024, 2030, 1733, 452, 13, 180, 728,
	728, 457, 11, 2032, 180, 1267, 834, 404, 2166, 2065,
	2035, 1079, 2037, 180, 180, 1632, 27, 946, 19, 1631,
	2069, 451, 9, 456, 7, 1623, 18, 2102, 1128, 17,
	455, 6, 1082, 404, 404, 761, 404, 767, 2095, 450,
	5, 177, 772, 2066, 1599, 1619, 493, 2118, 1077, 1266,
	2136, 1555, 1556, 1612, 1267, 1851, 2139, 1080, 2421, 2082,
	2100, 180, 120, 180, 2265, 2085, 2087, 2088, 2143, 895,
	180, 1746, 1078, 832, 736, 2399, 2231, 949, 1748, 565,
	1625, 955, 956, 2154, 1617, 746, 2448, 1866, 180, 180,
	2294, 2117, 2151, 2168, 737, 2160, 2110, 2103, 1129, 1666,
	2119, 2133, 2521, 1654, 958, 2138, 180, 2159, 2131, 955,
	956, 2141, 2142, 2134, 14, 1267, 180, 2134, 1651, 1560,
	1317, 1127, 2171, 2134, 2134, 2149, 1259, 15, 957, 2534,
	2337, 2162, 2236, 1081, 2176, 2163, 2078, 2091, 13, 2025,
	2170, 2161, 2188, 11, 1711, 2169, 2164, 1973, 2187, 1266,
	1266, 1267, 1267, 2192, 1875, 2175, 957, 566, 1843, 180,
	1267, 1267, 1712, 9, 1554, 7, 1551, 1300, 1797, 1798,
	738, 1550, 6, 955, 956, 1672, 746, 1711, 1710, 1481,
	1009, 5, 2200, 2017, 1936, 1302, 1019, 1017, 929, 567,
	920, 915, 2127, 1267, 2129, 912, 898, 860, 1320, 571,
	2351, 474, 1353, 1865, 899, 1300, 1871, 1579, 2442, 2206,
	180, 180, 180, 1783, 2404, 2321, 1490, 180, 2212, 1020,
	180, 53, 2115, 614, 2247, 2109, 1646, 1645, 1858, 1130,
	1127, 180, 180, 1329, 2234, 180, 180, 180, 636, 1506,
	1397, 710, 638, 1264, 639, 1265, 2241, 1128, 1050, 626,
	584, 2238, 180, 1262, 1300, 827, 1670, 180, 1333, 180,
	1453, 180, 180, 180, 1471, 2240, 2270, 1766, 180, 2266,
	2118, 180, 2233, 1013, 2245, 832, 606, 519, 618, 789,
	519, 2235, 794, 180, 180, 1302, 1302, 797, 617, 2237,
	832, 1468, 854, 404, 1876, 2287, 1949, 2292, 2302, 2227,
	2118, 2269, 1381, 1723, 746, 2118, 519, 519, 404, 819,
	772, 1378, 2300, 1945, 2117, 1300, 2125, 1129, 414, 1794,
	825, 1529, 1521, 2119, 2299, 1517, 934, 1073, 999, 1671,
	881, 2290, 2293, 1956, 1692, 1065, 2295, 519, 2301, 955,
	956, 2305, 1389, 735, 2117, 734, 1323, 2315, 2279, 2117,
	519, 1300, 1300, 2119, 2306, 2284, 2232, 1705, 2119, 1267,
	1300, 1300, 958, 992, 991, 721, 859, 2413, 872, 833,
	2333, 871, 2320, 2327, 1220, 1892, 519, 180, 2529, 180,
	833, 1127, 180, 2420, 2122, 2458, 957, 137, 576, 134,
	180, 136, 972, 1300, 135, 1922, 1127, 80, 31, 30,
	100, 99, 2341, 2334, 98, 97, 96, 2359, 95, 1002,
	94, 1005, 2118, 93, 2339, 2336, 92, 2356, 1010, 91,
	90, 2370, 2355, 89, 88, 2357, 87, 180, 86, 85,
	832, 1216, 1385, 84, 180, 589, 83, 563, 404, 834,
	2354, 2118, 180, 180, 832, 832, 82, 515, 2386, 512,
	834, 963, 2383, 79, 78, 591, 2117, 28, 24, 104,
	23, 75, 180, 74, 2382, 2119, 2365, 180, 2379, 2388,
	2384, 26, 2376, 2394, 180, 2393, 16, 2349, 10, 2373,
	20, 58, 2415, 2401, 59, 2117, 2395, 2396, 590, 57,
	56, 2134, 2398, 55, 2119, 12, 2409, 51, 50, 180,
	180, 2407, 48, 2410, 47, 180, 46, 45, 1753, 1754,
	2430, 973, 2417, 832, 2381, 2428, 8, 103, 180, 564,
	2431, 1523, 832, 832, 42, 41, 102, 116, 113, 115,
	2418, 112, 114, 118, 117, 2433, 110, 108, 2445, 2434,
	109, 2424, 2439, 2440, 111, 180, 72, 180, 583, 107,
	180, 1091, 1127, 1074, 106, 119, 38, 37, 36, 1300,
	2465, 2454, 35, 2467, 2462, 2463, 2366, 2367, 34, 2466,
	2, 1, 0, 2460, 2471, 0, 2455, 0, 180, 1267,
	0, 2469, 2118, 0, 974, 1820, 1821, 1822, 2481, 0,
	2482, 500, 2427, 728, 0, 180, 0, 2483, 2499, 0,
	0, 180, 0, 0, 0, 2494, 1299, 1252, 0, 2498,
	2504, 0, 2501, 2468, 0, 180, 404, 404, 2502, 2503,
	1075, 565, 0, 0, 833, 2513, 2117, 2511, 0, 0,
	2517, 0, 0, 0, 0, 2119, 177, 2457, 2520, 1267,
	2519, 0, 0, 0, 1299, 494, 0, 0, 404, 0,
	2527, 2532, 2528, 0, 2533, 0, 0, 0, 0, 0,
	1228, 0, 0, 0, 0, 473, 404, 0, 404, 0,
	404, 0, 1128, 0, 1236, 1079, 968, 966, 967, 959,
	960, 961, 962, 964, 965, 0, 0, 472, 1672, 1267,
	0, 0, 0, 1299, 834, 0, 1082, 588, 0, 566,
	0, 0, 0, 0, 0, 0, 0, 473, 0, 0,
	0, 0, 1077, 0, 0, 476, 519, 177, 72, 0,
	0, 1080, 0, 0, 1301, 177, 0, 0, 519, 0,
	0, 567, 0, 596, 0, 0, 1078, 0, 481, 0,
	0, 0, 1129, 0, 477, 0, 576, 0, 0, 576,
	576, 0, 0, 0, 1299, 0, 0, 476, 519, 0,
	0, 0, 0, 519, 0, 0, 0, 0, 177, 519,
	0, 519, 478, 519, 0, 519, 0, 519, 0, 1300,
	481, 1128, 0, 0, 0, 0, 477, 0, 1364, 0,
	1299, 1299, 1451, 480, 519, 519, 0, 1081, 1266, 1299,
	1299, 1993, 1994, 0, 0, 584, 0, 0, 0, 0,
	1005, 0, 0, 0, 478, 0, 0, 0, 0, 0,
	519, 0, 0, 0, 1301, 1301, 833, 0, 0, 0,
	0, 0, 1299, 0, 0, 480, 1266, 0, 0, 1300,
	1263, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 747,
	2061, 0, 0, 0, 0, 1266, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 1091, 834, 0, 0, 0,
	0, 0, 0, 479, 0, 0, 955, 956, 72, 0,
	0, 834, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 500, 958,
	728, 0, 1128, 772, 1302, 0, 1523, 1523, 0, 0,
	1263, 1263, 0, 0, 404, 479, 1266, 1128, 0, 0,
	0, 0, 0, 957, 0, 0, 1591, 0, 482, 0,
	404, 0, 0, 404, 0, 0, 0, 1604, 0, 0,
	0, 404, 1302, 0, 0, 0, 0, 404, 0, 0,
	0, 833, 1266, 1266, 404, 0, 0, 0, 0, 0,
	1635, 1266, 1266, 0, 0, 833, 833, 0, 1299, 0,
	482, 0, 1129, 0, 0, 0, 0, 0, 0, 776,
	778, 0, 0, 1523, 1523, 1523, 0, 1129, 963, 0,
	0, 1302, 0, 0, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 72, 0, 0, 833, 834, 834, 0, 0, 0,
	0, 0, 0, 833, 833, 0, 0, 0, 973, 0,
	0, 0, 1302, 0, 1642, 0, 0, 0, 0, 0,
	0, 772, 0, 853, 0, 0, 0, 0, 0, 857,
	0, 0, 404, 1128, 1674, 0, 519, 0, 0, 519,
	0, 519, 0, 404, 404, 0, 1680, 772, 1302, 1302,
	0, 0, 0, 0, 0, 1604, 596, 1302, 1302, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 39, 0,
	0, 0, 0, 834, 834, 0, 0, 0, 0, 40,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	1302, 0, 43, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 993, 994, 995,
	996, 997, 0, 0, 0, 0, 60, 1006, 1299, 0,
	0, 1716, 0, 61, 0, 126, 62, 1014, 0, 1523,
	1523, 0, 0, 0, 1451, 0, 0, 404, 404, 404,
	0, 404, 0, 968, 966, 967, 959, 960, 961, 962,
	964, 965, 0, 64, 1005, 0, 0, 0, 0, 0,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2324, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1523, 1523,
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 0, 1523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2348,
	0, 0, 0, 0, 0, 0, 1302, 0, 1299, 1005,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 1070, 1070, 0, 0, 0, 0, 0, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	67, 0, 68, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 747, 747, 0, 138, 747, 0, 0, 1361,
	0, 0, 470, 0, 0, 101, 2400, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 404, 0, 0, 0, 0, 0, 404, 404, 0,
	139, 404, 0, 0, 0, 0, 1591, 0, 132, 1591,
	0, 0, 0, 72, 0, 133, 72, 1881, 0, 0,
	0, 0, 0, 404, 1887, 1888, 584, 0, 0, 1604,
	1266, 0, 1895, 1301, 123, 0, 0, 0, 1900, 1901,
	1903, 1905, 1906, 0, 0, 596, 596, 0, 404, 0,
	0, 1915, 0, 0, 0, 1918, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 0, 0, 0, 0,
	0, 1301, 0, 0, 0, 1228, 0, 1228, 0, 519,
	1266, 0, 404, 0, 0, 0, 1944, 0, 0, 0,
	0, 404, 0, 1954, 0, 0, 0, 0, 0, 0,
	404, 0, 0, 0, 0, 0, 1302, 0, 0, 1379,
	0, 1384, 0, 1716, 0, 0, 0, 1391, 0, 0,
	1301, 0, 0, 0, 0, 0, 1716, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1263,
	1433, 0, 1435, 1436, 1437, 1438, 0, 1083, 0, 1797,
	1798, 404, 1815, 1816, 1817, 0, 1302, 0, 0, 1461,
	0, 0, 0, 39, 0, 0, 1006, 0, 0, 0,
	0, 1301, 0, 0, 40, 0, 0, 1263, 0, 0,
	0, 0, 0, 0, 0, 1502, 1503, 43, 0, 1519,
	0, 1531, 1533, 1538, 1541, 1542, 1543, 0, 0, 0,
	0, 2027, 1812, 0, 72, 0, 1302, 1301, 1301, 0,
	0, 0, 49, 0, 0, 0, 1301, 1301, 0, 747,
	0, 0, 0, 0, 0, 0, 1263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 61, 1301,
	126, 62, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 1803, 0, 0, 0, 955, 956, 0, 975, 976,
	977, 985, 986, 987, 0, 0, 0, 0, 64, 0,
	0, 978, 0, 0, 404, 0, 0, 1263, 958, 0,
	1591, 989, 0, 0, 0, 0, 0, 1523, 0, 772,
	1591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 957, 0, 2114, 0, 0, 0, 972, 0,
	0, 1813, 0, 1263, 1263, 0, 0, 2135, 0, 0,
	0, 2135, 1263, 1263, 0, 0, 0, 2135, 2135, 0,
	0, 0, 0, 0, 0, 0, 0, 1604, 0, 1228,
	0, 0, 0, 0, 0, 0, 2156, 0, 0, 65,
	0, 0, 0, 0, 1523, 1263, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 404, 0, 963, 0, 0,
	0, 0, 0, 0, 124, 67, 0, 68, 0, 0,
	0, 0, 2182, 0, 1814, 0, 0, 982, 990, 0,
	138, 0, 2184, 0, 0, 0, 0, 470, 0, 0,
	101, 0, 0, 0, 0, 1301, 988, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 980, 0, 0, 0, 0, 0, 973, 747, 0,
	0, 0, 0, 0, 0, 2207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	133, 1809, 1810, 1811, 0, 0, 1808, 1806, 1807, 1799,
	1800, 1801, 1802, 1804, 1805, 0, 2224, 2226, 404, 123,
	0, 0, 0, 404, 0, 0, 772, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 1591, 772, 72,
	0, 2243, 2244, 1604, 0, 0, 983, 0, 0, 0,
	0, 1263, 0, 0, 0, 0, 0, 2114, 772, 0,
	39, 0, 0, 2277, 0, 2278, 0, 404, 2280, 2281,
	0, 40, 0, 0, 404, 0, 0, 2286, 0, 0,
	0, 0, 0, 0, 43, 0, 0, 2114, 0, 772,
	1642, 0, 2114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1737, 1738, 0, 49,
	0, 0, 1743, 0, 981, 0, 0, 969, 970, 971,
	984, 0, 968, 966, 967, 959, 960, 961, 962, 964,
	965, 0, 0, 0, 0, 0, 0, 0, 60, 1839,
	0, 0, 0, 0, 1762, 61, 0, 126, 62, 0,
	0, 1769, 0, 0, 1773, 1301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 1787, 0, 0, 0, 64, 0, 0, 0, 2389,
	0, 0, 0, 1604, 0, 2340, 0, 0, 2342, 0,
	0, 0, 0, 0, 0, 0, 404, 0, 0, 2114,
	0, 0, 0, 0, 0, 1006, 0, 0, 0, 0,
	0, 0, 1538, 1538, 1538, 1301, 955, 956, 0, 975,
	976, 977, 985, 986, 987, 2135, 0, 0, 2114, 0,
	0, 0, 978, 404, 0, 0, 0, 0, 0, 958,
	772, 1070, 989, 0, 0, 0, 596, 0, 2182, 2182,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 0, 1005, 957, 0, 1301, 0, 0, 2406, 972,
	0, 1263, 0, 1591, 0, 0, 0, 0, 0, 0,
	1228, 124, 67, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 470, 2422, 2423, 101, 0, 0,
	0, 404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2438, 0, 140, 0, 963, 0,
	0, 1263, 0, 0, 0, 0, 0, 0, 0, 1947,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 990,
	0, 2453, 0, 772, 0, 0, 404, 0, 0, 0,
	0, 1965, 139, 0, 0, 0, 0, 988, 0, 2114,
	132, 0, 0, 0, 0, 0, 0, 133, 596, 596,
	0, 1263, 980, 0, 2406, 0, 0, 0, 973, 0,
	0, 596, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 772, 0, 1987, 0, 0, 0, 404, 1391, 0,
	0, 0, 0, 979, 1991, 0, 0, 1992, 0, 0,
	0, 2510, 0, 0, 0, 0, 0, 0, 0, 1997,
	0, 0, 0, 0, 0, 0, 0, 0, 2006, 0,
	0, 0, 0, 0, 0, 0, 2010, 0, 0, 1965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 2034,
	0, 0, 0, 2036, 0, 955, 956, 983, 975, 976,
	977, 985, 986, 987, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 989, 0, 0, 0, 0, 2067, 2068, 0, 1797,
	1798, 0, 1815, 1816, 1817, 2074, 2075, 2076, 0, 0,
	0, 0, 957, 0, 0, 2189, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2090, 981, 0, 0, 969, 970,
	971, 984, 0, 968, 966, 967, 959, 960, 961, 962,
	964, 965, 1812, 0, 0, 0, 0, 0, 0, 0,
	1838, 0, 0, 0, 2111, 0, 0, 0, 955, 956,
	0, 975, 976, 977, 985, 986, 987, 963, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 989, 0, 0, 982, 990, 0,
	0, 0, 0, 447, 0, 0, 0, 0, 0, 0,
	0, 1803, 0, 0, 0, 957, 988, 0, 1070, 0,
	0, 972, 0, 0, 39, 0, 0, 596, 0, 0,
	0, 980, 0, 0, 0, 40, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	1818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 2191, 0, 0, 0, 2194, 2195, 0,
	0, 1813, 2197, 49, 0, 0, 0, 0, 0, 2199,
	963, 2201, 0, 0, 1797, 1798, 0, 1815, 1816, 1817,
	0, 0, 0, 0, 0, 0, 0, 2208, 0, 0,
	982, 990, 60, 0, 0, 0, 0, 0, 0, 61,
	974, 126, 62, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 0,
	2217, 0, 0, 0, 980, 0, 0, 1812, 0, 64,
	973, 0, 0, 0, 1814, 0, 0, 0, 955, 956,
	0, 975, 976, 977, 985, 986, 987, 0, 0, 0,
	0, 0, 0, 0, 978, 979, 0, 0, 0, 0,
	0, 958, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 957, 1803, 969, 970, 971,
	984, 972, 968, 966, 967, 959, 960, 961, 962, 964,
	965, 0, 0, 974, 0, 0, 0, 1819, 0, 1837,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 983,
	0, 1809, 1810, 1811, 0, 1818, 1808, 1806, 1807, 1799,
	1800, 1801, 1802, 1804, 1805, 124, 67, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 1813, 2316, 2317, 0,
	963, 138, 0, 0, 0, 0, 0, 0, 470, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 990, 0, 0, 0, 0, 0, 0, 2329, 0,
	140, 0, 0, 0, 0, 0, 0, 981, 2332, 988,
	969, 970, 971, 984, 0, 968, 966, 967, 959, 960,
	961, 962, 964, 965, 980, 0, 0, 0, 0, 0,
	973, 0, 1789, 0, 0, 0, 139, 0, 0, 1814,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 133, 2364, 0, 0, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 983,
	0, 0, 0, 0, 0, 2412, 1809, 1810, 1811, 0,
	0, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	969, 970, 971, 984, 0, 968, 966, 967, 959, 960,
	961, 962, 964, 965, 0, 0, 0, 0, 2450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2480, 2480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2495, 0, 0,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2480, 182, 183, 1131, 184,
	1132, 1133, 1134, 1135, 341, 1136, 1137, 1138, 1139, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 1140,
	189, 348, 349, 190, 191, 1141, 1142, 350, 351, 352,
	1143, 192, 353, 1144, 836, 1145, 193, 194, 195, 2480,
	197, 198, 199, 196, 1146, 200, 201, 202, 1147, 696,
	203, 204, 205, 1148, 1149, 1151, 1150, 1152, 1153, 1154,
	206, 207, 405, 208, 354, 209, 355, 356, 1155, 210,
	1156, 211, 1157, 212, 1158, 1159, 213, 214, 1160, 215,
	1161, 0, 1162, 357, 216, 218, 217, 219, 358, 359,
	1163, 697, 1164, 220, 221, 360, 361, 362, 0, 222,
	1165, 223, 1166, 1167, 698, 1168, 224, 363, 1169, 364,
	1170, 0, 225, 226, 227, 228, 365, 366, 700, 1171,
	367, 232, 1172, 229, 1173, 699, 230, 368, 231, 369,
	370, 371, 372, 373, 1174, 374, 1175, 701, 233, 234,
	235, 702, 236, 237, 238, 1176, 240, 239, 1177, 375,
	703, 241, 704, 1178, 242, 1179, 1180, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	1181, 1182, 1183, 377, 253, 378, 254, 255, 1184, 256,
	1185, 1186, 257, 1187, 1188, 258, 379, 706, 259, 707,
	380, 260, 261, 262, 263, 264, 1189, 265, 381, 266,
	382, 267, 1190, 268, 269, 270, 271, 272, 383, 273,
	274, 1191, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 1192, 287, 708, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 1193, 299, 385, 298,
	300, 301, 1194, 302, 291, 292, 303, 709, 304, 386,
	387, 305, 1195, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 1196, 313, 1197, 314, 315, 316, 317,
	318, 319, 320, 1198, 390, 391, 392, 1199, 1200, 321,
	322, 393, 394, 1201, 323, 324, 325, 326, 1202, 1203,
	327, 328, 329, 330, 1204, 331, 1205, 395, 332, 333,
	334, 396, 397, 1206, 1207, 335, 1208, 1209, 1210, 1211,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 0, 1584, 0, 0, 0, 0, 0, 0,
	0, 0, 1585, 182, 183, 1131, 184, 1132, 1133, 1134,
	1135, 341, 1136, 1137, 1138, 1139, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 1140, 189, 348, 349,
	190, 191, 1141, 1142, 350, 351, 352, 1143, 192, 353,
	1144, 836, 1145, 193, 194, 195, 0, 197, 198, 199,
	196, 1146, 200, 201, 202, 1147, 696, 203, 204, 205,
	1148, 1149, 1151, 1150, 1152, 1153, 1154, 206, 207, 405,
	208, 354, 209, 355, 356, 1155, 210, 1156, 211, 1157,
	212, 1158, 1159, 213, 214, 1160, 215, 1161, 0, 1162,
	357, 216, 218, 217, 219, 358, 359, 1163, 697, 1164,
	220, 221, 360, 361, 362, 0, 222, 1165, 223, 1166,
	1167, 698, 1168, 224, 363, 1169, 364, 1170, 0, 225,
	226, 227, 228, 365, 366, 700, 1171, 367, 232, 1172,
	229, 1173, 699, 230, 368, 231, 369, 370, 371, 372,
	373, 1174, 374, 1175, 701, 233, 234, 235, 702, 236,
	237, 238, 1176, 240, 239, 1177, 375, 703, 241, 704,
	1178, 242, 1179, 1180, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 1181, 1182, 1183,
	377, 253, 378, 254, 255, 1184, 256, 1185, 1186, 257,
	1187, 1188, 258, 379, 706, 259, 707, 380, 260, 261,
	262, 263, 264, 1189, 265, 381, 266, 382, 267, 1190,
	268, 269, 270, 271, 272, 383, 273, 274, 1191, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 1192, 287, 708, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 1193, 299, 385, 298, 300, 301, 1194,
	302, 291, 292, 303, 709, 304, 386, 387, 305, 1195,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	1196, 313, 1197, 314, 315, 316, 317, 318, 319, 320,
	1198, 390, 391, 392, 1199, 1200, 321, 322, 393, 394,
	1201, 323, 324, 325, 326, 1202, 1203, 327, 328, 329,
	330, 1204, 331, 1205, 395, 332, 333, 334, 396, 397,
	1206, 1207, 335, 1208, 1209, 1210, 1211, 336, 337, 338,
	339, 340, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2239, 182, 183, 1131, 184, 1132, 1133, 1134, 1135, 341,
	1136, 1137, 1138, 1139, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 1140, 189, 348, 349, 190, 191,
	1141, 1142, 350, 351, 352, 1143, 192, 353, 1144, 836,
	1145, 193, 194, 195, 0, 197, 198, 199, 196, 1146,
	200, 201, 202, 1147, 696, 203, 204, 205, 1148, 1149,
	1151, 1150, 1152, 1153, 1154, 206, 207, 405, 208, 354,
	209, 355, 356, 1155, 210, 1156, 211, 1157, 212, 1158,
	1159, 213, 214, 1160, 215, 1161, 0, 1162, 357, 216,
	218, 217, 219, 358, 359, 1163, 697, 1164, 220, 221,
	360, 361, 362, 0, 222, 1165, 223, 1166, 1167, 698,
	1168, 224, 363, 1169, 364, 1170, 0, 225, 226, 227,
	228, 365, 366, 700, 1171, 367, 232, 1172, 229, 1173,
	699, 230, 368, 231, 369, 370, 371, 372, 373, 1174,
	374, 1175, 701, 233, 234, 235, 702, 236, 237, 238,
	1176, 240, 239, 1177, 375, 703, 241, 704, 1178, 242,
	1179, 1180, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 1181, 1182, 1183, 377, 253,
	378, 254, 255, 1184, 256, 1185, 1186, 257, 1187, 1188,
	258, 379, 706, 259, 707, 380, 260, 261, 262, 263,
	264, 1189, 265, 381, 266, 382, 267, 1190, 268, 269,
	270, 271, 272, 383, 273, 274, 1191, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 1192,
	287, 708, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 1193, 299, 385, 298, 300, 301, 1194, 302, 291,
	292, 303, 709, 304, 386, 387, 305, 1195, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 1196, 313,
	1197, 314, 315, 316, 317, 318, 319, 320, 1198, 390,
	391, 392, 1199, 1200, 321, 322, 393, 394, 1201, 323,
	324, 325, 326, 1202, 1203, 327, 328, 329, 330, 1204,
	331, 1205, 395, 332, 333, 334, 396, 397, 1206, 1207,
	335, 1208, 1209, 1210, 1211, 336, 337, 338, 339, 340,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1125, 0, 0, 182, 183, 1131, 184,
	1132, 1133, 1134, 1135, 341, 1136, 1137, 1138, 1139, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 1140,
	189, 348, 349, 190, 191, 1141, 1142, 350, 351, 352,
	1143, 192, 353, 1144, 836, 1145, 193, 194, 195, 0,
	197, 198, 199, 196, 1146, 200, 201, 202, 1147, 696,
	203, 204, 205, 1148, 1149, 1151, 1150, 1152, 1153, 1154,
	206, 207, 405, 208, 354, 209, 355, 356, 1155, 210,
	1156, 211, 1157, 212, 1158, 1159, 213, 214, 1160, 215,
	1161, 0, 1162, 357, 216, 218, 217, 219, 358, 359,
	1163, 697, 1164, 220, 221, 360, 361, 362, 0, 222,
	1165, 223, 1166, 1167, 698, 1168, 224, 363, 1169, 364,
	1170, 0, 225, 226, 227, 228, 365, 366, 700, 1171,
	367, 232, 1172, 229, 1173, 699, 230, 368, 231, 369,
	370, 371, 372, 373, 1174, 374, 1175, 701, 233, 234,
	235, 702, 236, 237, 238, 1176, 240, 239, 1177, 375,
	703, 241, 704, 1178, 242, 1179, 1180, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	1181, 1182, 1183, 377, 253, 378, 254, 255, 1184, 256,
	1185, 1186, 257, 1187, 1188, 258, 379, 706, 259, 707,
	380, 260, 261, 262, 263, 264, 1189, 265, 381, 266,
	382, 267, 1190, 268, 269, 270, 271, 272, 383, 273,
	274, 1191, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 1192, 287, 708, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 1193, 299, 385, 298,
	300, 301, 1194, 302, 291, 292, 303, 709, 304, 386,
	387, 305, 1195, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 1196, 313, 1197, 314, 315, 316, 317,
	318, 319, 320, 1198, 390, 391, 392, 1199, 1200, 321,
	322, 393, 394, 1201, 323, 324, 325, 326, 1202, 1203,
	327, 328, 329, 330, 1204, 331, 1205, 395, 332, 333,
	334, 396, 397, 1206, 1207, 335, 1208, 1209, 1210, 1211,
	336, 337, 338, 339, 340, 1480, 0, 634, 623, 624,
	621, 622, 613, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 1477, 184, 0, 0, 0,
	0, 651, 616, 0, 0, 0, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 696, 203, 204, 205,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 1478, 0, 665, 214, 0, 215, 0, 0, 0,
	607, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 227, 228, 659, 661, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 664, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 602, 0, 631,
	660, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 654, 260, 261,
	262, 263, 264, 0, 265, 655, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 608, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 648,
	302, 291, 292, 303, 709, 304, 686, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 687, 309, 310, 656,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 688, 689, 0, 0, 321, 322, 657, 658,
	629, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 649, 331, 0, 395, 332, 333, 334, 396, 690,
	1476, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 603, 0, 0, 0, 0, 0, 601, 0,
	0, 0, 0, 599, 600, 1479, 634, 623, 624, 621,
	622, 613, 609, 1474, 0, 0, 0, 0, 612, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	651, 616, 0, 0, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 209, 673, 674, 597, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 138, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 140, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 835, 690, 0,
	0, 335, 0, 0, 0, 132, 336, 337, 338, 339,
	340, 603, 133, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 0, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 585, 612, 634, 623,
	624, 621, 622, 613, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 651, 616, 0, 0, 0, 185, 186, 187,
	342, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 227, 228, 659, 661, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 602, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 608, 290, 0,
	294, 295, 296, 297, 138, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 140, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 657,
	658, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 835,
	690, 0, 0, 335, 0, 0, 0, 132, 336, 337,
	338, 339, 340, 603, 133, 0, 0, 0, 0, 601,
	0, 0, 0, 0, 599, 600, 634, 623, 624, 621,
	622, 613, 0, 1008, 0, 0, 0, 0, 0, 612,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	651, 616, 0, 0, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 209, 673, 674, 0, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 138, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 140, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 835, 690, 0,
	0, 335, 0, 0, 0, 132, 336, 337, 338, 339,
	340, 603, 133, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 634, 623, 624, 621, 622, 613,
	0, 1008, 0, 0, 0, 0, 0, 612, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 651, 616,
	0, 0, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 1534, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 1539, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 1535, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 1536, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 0, 0, 0, 0, 0, 0, 609,
	0, 0, 0, 0, 593, 612, 634, 623, 624, 621,
	622, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	651, 616, 0, 0, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 209, 673, 674, 597, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 595, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 603, 0, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 634, 623, 624, 621, 622, 613,
	0, 609, 0, 0, 0, 0, 0, 612, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 651, 616,
	0, 0, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 2165, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 1071, 634, 623, 624, 621, 622, 613, 609,
	0, 0, 0, 0, 0, 612, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 651, 616, 0,
	0, 0, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 619, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 220, 221, 675, 676,
	677, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 227, 228, 659,
	661, 700, 0, 367, 232, 1393, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 602, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 1392, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 708,
	288, 289, 608, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 648, 302, 291, 292, 303,
	709, 304, 686, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 687, 309, 310, 656, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 688, 689,
	0, 0, 321, 322, 657, 658, 629, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 649, 331, 0,
	395, 332, 333, 334, 396, 690, 0, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 603, 0,
	0, 0, 0, 0, 601, 0, 0, 0, 0, 599,
	600, 634, 623, 624, 621, 622, 613, 0, 609, 0,
	0, 0, 0, 0, 612, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 651, 616, 0, 0, 0,
	185, 186, 187, 342, 666, 344, 667, 188, 668, 669,
	0, 189, 348, 349, 190, 191, 619, 650, 670, 671,
	352, 0, 192, 662, 0, 642, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	696, 203, 204, 205, 0, 643, 644, 646, 0, 645,
	647, 206, 207, 405, 208, 672, 209, 673, 674, 597,
	210, 0, 211, 0, 212, 0, 0, 665, 214, 0,
	215, 0, 0, 0, 607, 216, 218, 217, 219, 652,
	653, 630, 697, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 227, 228, 659, 661, 700,
	0, 367, 232, 0, 229, 0, 699, 230, 678, 231,
	679, 680, 681, 682, 683, 0, 641, 0, 701, 233,
	234, 235, 702, 236, 237, 238, 0, 240, 239, 0,
	664, 703, 241, 704, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 705, 249, 250, 252,
	251, 602, 0, 631, 660, 253, 684, 254, 255, 0,
	256, 595, 0, 257, 0, 0, 258, 379, 706, 259,
	707, 654, 260, 261, 262, 263, 264, 0, 265, 655,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 685,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	608, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 648, 302, 291, 292, 303, 709, 304,
	686, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	687, 309, 310, 656, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 688, 689, 0, 0,
	321, 322, 657, 658, 629, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 649, 331, 0, 395, 332,
	333, 334, 396, 690, 0, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 603, 0, 0, 0,
	0, 0, 601, 0, 0, 0, 0, 599, 600, 634,
	623, 624, 621, 622, 613, 0, 609, 0, 0, 0,
	0, 0, 612, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 651, 616, 0, 0, 0, 185, 186,
	187, 342, 666, 344, 667, 188, 668, 669, 0, 189,
	348, 349, 190, 191, 619, 650, 670, 671, 352, 0,
	192, 662, 0, 642, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 696, 203,
	204, 205, 0, 643, 644, 646, 0, 645, 647, 206,
	207, 405, 208, 672, 209, 673, 674, 0, 210, 0,
	211, 0, 212, 0, 0, 665, 214, 0, 215, 0,
	0, 0, 607, 216, 218, 217, 219, 652, 653, 630,
	697, 0, 220, 221, 675, 676, 677, 0, 222, 0,
	223, 0, 0, 698, 0, 224, 663, 0, 364, 0,
	0, 225, 226, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 608, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 648, 302, 291, 292, 303, 709, 304, 686, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 687, 309,
	310, 656, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 688, 689, 0, 0, 321, 322,
	657, 658, 629, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 649, 331, 0, 395, 332, 333, 334,
	396, 690, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 603, 0, 0, 0, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 0, 0,
	0, 0, 1012, 1469, 609, 0, 0, 0, 0, 0,
	612, 634, 623, 624, 621, 622, 613, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 651, 616, 0, 0, 0,
	185, 186, 187, 342, 666, 344, 667, 188, 668, 669,
	0, 189, 348, 349, 190, 191, 619, 650, 670, 671,
	352, 0, 192, 662, 0, 642, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	696, 203, 204, 205, 0, 643, 644, 646, 0, 645,
	647, 206, 207, 405, 208, 672, 209, 673, 674, 597,
	210, 0, 211, 0, 212, 0, 0, 665, 214, 0,
	215, 0, 0, 0, 607, 216, 218, 217, 219, 652,
	653, 630, 697, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 227, 228, 659, 661, 700,
	0, 367, 232, 0, 229, 0, 699, 230, 678, 231,
	679, 680, 681, 682, 683, 0, 641, 0, 701, 233,
	234, 235, 702, 236, 237, 238, 0, 240, 239, 0,
	664, 703, 241, 704, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 705, 249, 250, 252,
	251, 602, 0, 631, 660, 253, 684, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 706, 259,
	707, 654, 260, 261, 262, 263, 264, 0, 265, 655,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 685,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	608, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 648, 302, 291, 292, 303, 709, 304,
	686, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	687, 309, 310, 656, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 688, 689, 0, 0,
	321, 322, 657, 658, 629, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 649, 331, 0, 395, 332,
	333, 334, 396, 690, 0, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 603, 0, 0, 0,
	0, 0, 601, 0, 0, 0, 0, 599, 600, 634,
	623, 624, 621, 622, 613, 0, 609, 0, 0, 0,
	0, 0, 612, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 651, 616, 0, 0, 0, 185, 186,
	187, 342, 666, 344, 667, 188, 668, 669, 0, 189,
	348, 349, 190, 191, 619, 650, 670, 671, 352, 0,
	192, 662, 0, 642, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 696, 203,
	204, 205, 0, 643, 644, 646, 0, 645, 647, 206,
	207, 405, 208, 672, 209, 673, 674, 0, 210, 0,
	211, 0, 212, 0, 0, 665, 214, 0, 215, 0,
	0, 0, 607, 216, 218, 217, 219, 652, 653, 630,
	697, 0, 220, 221, 675, 676, 677, 0, 222, 0,
	223, 0, 0, 698, 0, 224, 663, 0, 364, 0,
	0, 225, 226, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 608, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 648, 302, 291, 292, 303, 709, 304, 686, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 687, 309,
	310, 656, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 688, 689, 0, 0, 321, 322,
	657, 658, 629, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 649, 331, 0, 395, 332, 333, 334,
	396, 690, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 603, 0, 0, 0, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 634, 623, 624,
	621, 622, 613, 0, 609, 2064, 0, 0, 0, 0,
	612, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 651, 616, 0, 0, 0, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 696, 203, 204, 205,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	607, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 227, 228, 659, 661, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 664, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 602, 0, 631,
	660, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 654, 260, 261,
	262, 263, 264, 0, 265, 655, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 608, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 648,
	302, 291, 292, 303, 709, 304, 686, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 687, 309, 310, 656,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 688, 689, 0, 0, 321, 322, 657, 658,
	629, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 649, 331, 0, 395, 332, 333, 334, 396, 690,
	2013, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 603, 0, 0, 0, 0, 0, 601, 0,
	0, 0, 0, 599, 600, 634, 623, 624, 621, 622,
	613, 0, 609, 0, 0, 0, 0, 0, 612, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 651,
	616, 0, 0, 0, 185, 186, 187, 342, 666, 344,
	667, 188, 668, 669, 0, 189, 348, 349, 190, 191,
	619, 650, 670, 671, 352, 0, 192, 662, 0, 642,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 201, 202, 0, 696, 203, 204, 205, 0, 643,
	644, 646, 0, 645, 647, 206, 207, 405, 208, 672,
	209, 673, 674, 0, 210, 0, 211, 0, 212, 0,
	0, 665, 214, 0, 215, 0, 0, 0, 607, 216,
	218, 217, 219, 652, 653, 630, 697, 0, 220, 221,
	675, 676, 677, 0, 222, 0, 223, 0, 0, 698,
	0, 224, 663, 0, 364, 0, 0, 225, 226, 227,
	228, 659, 661, 700, 0, 367, 232, 0, 229, 0,
	699, 230, 678, 231, 679, 680, 681, 682, 683, 0,
	641, 0, 701, 233, 234, 235, 702, 236, 237, 238,
	0, 240, 239, 0, 664, 703, 241, 704, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 602, 0, 631, 660, 253,
	684, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 706, 259, 707, 654, 260, 261, 262, 263,
	264, 0, 265, 655, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 685, 273, 274, 0, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 0, 0, 0, 0, 0, 601, 0, 0, 0,
	0, 599, 600, 634, 623, 624, 621, 622, 613, 0,
	609, 2003, 0, 0, 0, 0, 612, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 651, 616, 0,
	0, 0, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 619, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 220, 221, 675, 676,
	677, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 602, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 708,
	288, 289, 608, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 648, 302, 291, 292, 303,
	709, 304, 686, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 687, 309, 310, 656, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 688, 689,
	0, 0, 321, 322, 657, 658, 629, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 649, 331, 0,
	395, 332, 333, 334, 396, 690, 0, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 603, 0,
	0, 0, 0, 0, 601, 0, 0, 0, 0, 599,
	600, 1071, 634, 623, 624, 621, 622, 613, 609, 0,
	0, 0, 0, 0, 612, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 651, 616, 0, 0,
	0, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 1539, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 227, 228, 659, 661,
	700, 0, 367, 232, 0, 229, 0, 699, 230, 678,
	231, 679, 680, 681, 682, 683, 0, 641, 0, 701,
	233, 234, 235, 702, 236, 237, 238, 0, 240, 239,
	0, 664, 703, 241, 704, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 602, 0, 631, 660, 253, 684, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 706,
	259, 707, 654, 260, 261, 262, 263, 264, 0, 265,
	655, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	685, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 608, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 648, 302, 291, 292, 303, 709,
	304, 686, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 687, 309, 310, 656, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 688, 689, 0,
	0, 321, 322, 657, 658, 629, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 649, 331, 0, 395,
	332, 333, 334, 396, 690, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 603, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 0,
	0, 0, 1587, 612, 634, 623, 624, 621, 622, 613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 651, 616,
	0, 0, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 0, 0, 0, 0, 0, 0, 609,
	0, 0, 0, 0, 1548, 612, 634, 623, 624, 621,
	622, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	651, 616, 0, 0, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 209, 673, 674, 0, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 603, 0, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 0, 0, 1546, 612, 634, 623,
	624, 621, 622, 613, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 651, 616, 0, 0, 0, 185, 186, 187,
	342, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 227, 228, 659, 661, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 602, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 608, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 657,
	658, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 396,
	690, 0, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 603, 0, 0, 0, 0, 0, 601,
	0, 0, 0, 0, 599, 600, 0, 0, 0, 0,
	0, 0, 0, 609, 0, 0, 0, 0, 1530, 612,
	634, 623, 624, 621, 622, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 651, 616, 0, 0, 0, 185,
	186, 187, 342, 666, 344, 667, 188, 668, 669, 0,
	189, 348, 349, 190, 191, 619, 650, 670, 671, 352,
	0, 192, 662, 0, 642, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 201, 202, 0, 696,
	203, 204, 205, 0, 643, 644, 646, 0, 645, 647,
	206, 207, 405, 208, 672, 209, 673, 674, 0, 210,
	0, 211, 0, 212, 0, 0, 665, 214, 0, 215,
	0, 0, 0, 607, 216, 218, 217, 219, 652, 653,
	630, 697, 0, 220, 221, 675, 676, 677, 0, 222,
	0, 223, 0, 0, 698, 0, 224, 663, 0, 364,
	0, 0, 225, 226, 227, 228, 659, 661, 700, 0,
	367, 232, 0, 229, 0, 699, 230, 678, 231, 679,
	680, 681, 682, 683, 0, 641, 0, 701, 233, 234,
	235, 702, 236, 237, 238, 0, 240, 239, 0, 664,
	703, 241, 704, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	602, 0, 631, 660, 253, 684, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 706, 259, 707,
	654, 260, 261, 262, 263, 264, 0, 265, 655, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 685, 273,
	274, 0, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 0, 0, 0, 0,
	0, 601, 0, 0, 0, 0, 599, 600, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 0, 0,
	1518, 612, 634, 623, 624, 621, 622, 613, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 651, 616, 0, 0,
	0, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 227, 228, 659, 661,
	700, 0, 367, 232, 0, 229, 0, 699, 230, 678,
	231, 679, 680, 681, 682, 683, 0, 641, 0, 701,
	233, 234, 235, 702, 236, 237, 238, 0, 240, 239,
	0, 664, 703, 241, 704, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 602, 0, 631, 660, 253, 684, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 706,
	259, 707, 654, 260, 261, 262, 263, 264, 0, 265,
	655, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	685, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 608, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 648, 302, 291, 292, 303, 709,
	304, 686, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 687, 309, 310, 656, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 688, 689, 0,
	0, 321, 322, 657, 658, 629, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 649, 331, 0, 395,
	332, 333, 334, 396, 690, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 603, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 0,
	0, 0, 1516, 612, 1508, 623, 624, 621, 622, 613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 651, 616,
	0, 0, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 1511,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 1512, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 1513, 1510, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 1514,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 1509, 340, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 0, 0, 0, 0, 0, 0, 609,
	0, 0, 0, 0, 1505, 612, 1508, 623, 624, 621,
	622, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	651, 616, 0, 0, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 1511, 673, 674, 0, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 1512,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 1513, 1510, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 1514, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 1509,
	340, 603, 0, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 634, 623, 624, 621, 622, 613,
	0, 609, 0, 0, 0, 0, 0, 612, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 651, 616,
	0, 0, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 634, 623, 624, 621, 622, 613, 0, 609,
	1464, 0, 0, 0, 0, 612, 0, 0, 182, 183,
	1380, 184, 0, 0, 0, 0, 651, 616, 0, 0,
	0, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 227, 228, 659, 661,
	700, 0, 367, 232, 0, 229, 0, 699, 230, 678,
	231, 679, 680, 681, 682, 683, 0, 641, 0, 701,
	233, 234, 235, 702, 236, 237, 238, 0, 240, 239,
	0, 664, 703, 241, 704, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 602, 0, 631, 660, 253, 684, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 706,
	259, 707, 654, 260, 261, 262, 263, 264, 0, 265,
	655, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	685, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 608, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 648, 302, 291, 292, 303, 709,
	304, 686, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 687, 309, 310, 656, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 688, 689, 0,
	0, 321, 322, 657, 658, 629, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 649, 331, 0, 395,
	332, 333, 334, 396, 690, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 603, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 0,
	0, 0, 779, 612, 634, 623, 624, 621, 622, 613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 651, 616,
	0, 0, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 0, 0, 0, 0, 0, 0, 609,
	0, 0, 0, 0, 777, 612, 634, 623, 624, 621,
	622, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	651, 616, 0, 0, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 209, 673, 674, 0, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 603, 0, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 634, 623, 624, 621, 622, 613,
	0, 609, 0, 0, 0, 0, 0, 612, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 651, 616,
	0, 0, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 696, 203, 204, 2479, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	2478, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 634, 623, 624, 621, 622, 613, 0, 609,
	0, 0, 0, 0, 0, 612, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 651, 616, 0, 0,
	0, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 227, 228, 659, 661,
	700, 0, 367, 232, 0, 229, 0, 699, 230, 678,
	231, 679, 680, 681, 682, 683, 0, 641, 0, 701,
	233, 234, 235, 702, 236, 237, 238, 0, 240, 239,
	0, 664, 703, 241, 704, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 602, 0, 631, 660, 253, 684, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 706,
	259, 707, 654, 260, 261, 262, 263, 264, 0, 265,
	655, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	685, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 608, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 648, 302, 291, 292, 303, 709,
	304, 686, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 687, 309, 310, 656, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 688, 689, 0,
	0, 321, 322, 657, 658, 629, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 649, 331, 0, 395,
	332, 333, 334, 396, 690, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 603, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	634, 623, 624, 621, 622, 613, 0, 609, 0, 0,
	0, 0, 0, 612, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 651, 616, 0, 0, 0, 185,
	186, 187, 2477, 666, 344, 667, 188, 668, 669, 0,
	189, 348, 349, 190, 191, 619, 650, 670, 671, 352,
	0, 192, 662, 0, 642, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 201, 202, 0, 696,
	203, 204, 2479, 0, 643, 644, 646, 0, 645, 647,
	206, 207, 405, 208, 672, 209, 673, 674, 0, 210,
	0, 211, 0, 212, 0, 0, 665, 214, 0, 215,
	0, 0, 0, 607, 216, 218, 217, 219, 652, 653,
	630, 697, 0, 220, 221, 675, 676, 677, 0, 222,
	0, 223, 0, 0, 698, 0, 224, 663, 0, 364,
	0, 0, 225, 226, 227, 228, 659, 661, 700, 0,
	367, 232, 0, 229, 0, 699, 230, 678, 231, 679,
	680, 681, 682, 683, 0, 641, 0, 701, 233, 234,
	235, 702, 236, 237, 238, 0, 240, 239, 0, 664,
	703, 241, 704, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	602, 0, 631, 660, 253, 684, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 706, 259, 707,
	654, 260, 261, 262, 263, 264, 0, 265, 655, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 685, 273,
	274, 0, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 2478, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 0, 0, 0, 0,
	0, 601, 0, 0, 0, 0, 599, 600, 634, 623,
	624, 621, 622, 613, 0, 609, 0, 0, 0, 0,
	0, 612, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 651, 616, 0, 0, 0, 185, 186, 187,
	342, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 227, 228, 659, 661, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 0, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 1528, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 657,
	658, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 396,
	690, 0, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 634, 623, 624, 621, 622, 613, 1526,
	0, 0, 0, 0, 1524, 1525, 0, 0, 0, 182,
	183, 0, 184, 1527, 0, 0, 0, 651, 616, 612,
	0, 0, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 0, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 220, 221, 675, 676,
	677, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 0, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 708,
	288, 289, 1528, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 648, 302, 291, 292, 303,
	709, 304, 686, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 687, 309, 310, 656, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 688, 689,
	0, 0, 321, 322, 657, 658, 629, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 649, 331, 0,
	395, 332, 333, 334, 396, 690, 0, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 634, 623,
	624, 621, 622, 613, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 1527, 0,
	0, 0, 651, 616, 612, 0, 0, 185, 186, 187,
	0, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 201, 202, 0, 696, 203, 204,
	2479, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 227, 228, 659, 661, 0, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 0, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 602, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 608, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 0, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 657,
	658, 629, 323, 324, 2478, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 396,
	690, 0, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 599, 600, 0, 0, 0, 182,
	183, 0, 184, 609, 0, 0, 0, 651, 0, 612,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 650,
	350, 351, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 652, 653, 0, 697, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 0, 0, 0, 660, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 708,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 648, 302, 291, 292, 303,
	709, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 656, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 657, 658, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 649, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 0, 335, 828,
	0, 831, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 2116, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 836, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	696, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 697, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 227, 228, 365, 366, 700,
	0, 367, 232, 0, 229, 0, 699, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 701, 233,
	234, 235, 702, 236, 237, 238, 0, 240, 239, 0,
	375, 703, 241, 704, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 705, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 706, 259,
	707, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 138, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 709, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 140, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 835, 397, 0, 0, 335, 585, 0, 179,
	132, 336, 337, 338, 339, 340, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 123, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	750, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 138, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 140, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	835, 397, 0, 0, 335, 0, 179, 0, 132, 336,
	337, 338, 339, 340, 0, 133, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 744, 0, 1093, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 750, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 138, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 140, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 835, 397, 0,
	0, 335, 585, 0, 179, 132, 336, 337, 338, 339,
	340, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 744,
	0, 1093, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	138, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 140,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 835, 397, 0, 0, 335,
	1857, 0, 179, 132, 336, 337, 338, 339, 340, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 123,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 750, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 0, 335, 743, 0,
	179, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 744, 0, 749, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 750, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 0, 335, 0, 179, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 744, 0, 749, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 750, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 0, 335, 0, 179, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	744, 0, 749, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 0, 335,
	0, 0, 179, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	1213, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 634, 623, 624,
	621, 622, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 1673, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 0, 0, 670, 671, 352, 0, 192, 353,
	0, 836, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 696, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 630, 697, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 365, 366, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 375, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 0, 0, 631,
	377, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 709, 304, 686, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 687, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 688, 689, 0, 0, 321, 322, 393, 394,
	629, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 690,
	179, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 0, 335, 0, 179, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 2028, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 886, 0, 831, 890, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 1096, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 836, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 696, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 697, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 227, 228,
	365, 366, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 375, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 709, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 831, 890, 335,
	0, 0, 888, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 836, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 696, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 697, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 365, 366, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 375, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 709, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 490, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 175, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 174, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 172, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 178, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 175, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 174, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 831, 890, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 178, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 836, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 696, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 697, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 227, 228, 365, 366,
	700, 0, 367, 232, 0, 229, 0, 699, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 701,
	233, 234, 235, 702, 236, 237, 238, 0, 240, 239,
	0, 375, 703, 241, 704, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 706,
	259, 707, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 709,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 179, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 175, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	174, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 831, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 178, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 836, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 201, 202, 0, 696, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 697,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 227, 228, 365, 366, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 375, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 709, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 179, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 179, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 178,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 1607, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 1605, 200,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 1650, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 1610, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 227, 228,
	365, 366, 0, 0, 367, 232, 1648, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 1609, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 1649, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 179, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 1607, 192, 353,
	0, 0, 1602, 193, 194, 195, 0, 197, 198, 199,
	196, 1605, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 1610,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 1601, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 1609,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 1608, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 806, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 750, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 756, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 227, 228, 758, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	750, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 752, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 227,
	228, 754, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 750, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 422,
	335, 179, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 421,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 420, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 179, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	1590, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 179, 2183, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	179, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 2225, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 179, 2183, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 2180, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 179, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 750, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	1369, 335, 179, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 1367, 335, 179, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 179, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 182, 183, 1349,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 516, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 865, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 518, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 513, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 1227, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 227, 228, 1226,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 516, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 865, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 518, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 513, 391, 392, 0, 0, 321, 866,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 516, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 507, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 518,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 849, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 513,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 824,
	335, 179, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 227, 228, 823, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 821, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 820, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 817, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 227, 228, 816,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 814, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 227, 228, 813, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 810, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 227,
	228, 809, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 179, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 798, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 796, 335, 179, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 227, 228,
	795, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 792, 335,
	179, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 790, 335, 179, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	786, 335, 179, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 227, 228, 788, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 179, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 766, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 762,
	335, 179, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 227, 228, 764, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 760, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 516, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 507, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 506, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 518, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 508, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 509, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 513, 391, 392,
	0, 0, 321, 511, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 498, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 499, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 496, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 488,
	335, 179, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 445, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	179, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 179, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 227, 228, 1904,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 179, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	227, 228, 1902, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 179,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 227, 228, 1891, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 179, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 499, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 179, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 1237, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 0, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 179, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 726, 274, 0,
	275, 276, 277, 278, 279, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 179, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 0, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 0, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 0, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 39, 395, 332,
	333, 334, 396, 397, 0, 0, 335, 0, 40, 127,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	0, 54, 0, 0, 0, 60, 0, 0, 130, 0,
	0, 0, 61, 0, 126, 62, 1797, 1798, 0, 1815,
	1816, 1817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2000, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 955, 956, 0, 975, 976, 977,
	985, 986, 987, 0, 0, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 958, 0, 1812,
	989, 0, 0, 955, 956, 0, 975, 976, 977, 985,
	986, 987, 0, 0, 0, 0, 0, 0, 0, 978,
	0, 957, 0, 0, 0, 0, 958, 972, 0, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 65, 0, 0, 972, 0, 1803, 66,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 124, 67,
	0, 68, 0, 69, 0, 131, 963, 0, 0, 0,
	70, 0, 0, 0, 138, 0, 0, 1818, 0, 0,
	0, 81, 0, 0, 101, 0, 982, 990, 0, 0,
	0, 0, 0, 128, 0, 963, 0, 0, 1813, 0,
	0, 0, 0, 140, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 990, 0, 0, 0,
	980, 0, 105, 0, 0, 0, 973, 0, 0, 0,
	0, 125, 0, 0, 988, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 980,
	0, 979, 0, 0, 133, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1814, 0, 123, 0, 0, 4, 0, 955, 956,
	979, 975, 976, 977, 985, 986, 987, 0, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 0, 0, 974,
	0, 958, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 974, 955,
	956, 972, 975, 976, 977, 985, 986, 987, 0, 0,
	0, 0, 0, 0, 983, 978, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 989, 0, 0, 1809, 1810,
	1811, 0, 0, 1808, 1806, 1807, 1799, 1800, 1801, 1802,
	1804, 1805, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 972, 981, 0, 0, 969, 970, 971, 984,
	963, 968, 966, 967, 959, 960, 961, 962, 964, 965,
	0, 0, 0, 0, 2403, 0, 0, 0, 0, 0,
	982, 990, 981, 0, 0, 969, 970, 971, 984, 0,
	968, 966, 967, 959, 960, 961, 962, 964, 965, 988,
	0, 0, 0, 2358, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 980, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 990, 955, 956, 0, 975, 976, 977, 985,
	986, 987, 0, 0, 0, 979, 0, 0, 0, 978,
	988, 0, 0, 0, 0, 0, 958, 0, 0, 989,
	0, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 955, 956, 972, 975, 976, 977,
	985, 986, 987, 974, 0, 0, 979, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 958, 0, 983,
	989, 0, 0, 0, 1797, 1798, 0, 1815, 1816, 1817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1999, 957, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 974, 963, 0, 955, 956, 0,
	975, 976, 977, 985, 986, 987, 0, 0, 0, 0,
	983, 0, 0, 978, 0, 982, 990, 1812, 0, 0,
	958, 0, 0, 989, 0, 0, 0, 981, 0, 0,
	969, 970, 971, 984, 988, 968, 966, 967, 959, 960,
	961, 962, 964, 965, 957, 0, 963, 0, 2328, 980,
	972, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 1803, 0, 981, 0,
	979, 969, 970, 971, 984, 988, 968, 966, 967, 959,
	960, 961, 962, 964, 965, 0, 0, 0, 0, 2323,
	980, 0, 0, 0, 0, 0, 973, 0, 0, 963,
	0, 0, 0, 0, 0, 1818, 0, 0, 0, 955,
	956, 0, 975, 976, 977, 985, 986, 987, 974, 982,
	990, 979, 0, 0, 0, 978, 1813, 0, 0, 0,
	0, 0, 958, 0, 983, 989, 0, 0, 988, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 980, 0, 0, 957, 0, 0, 973,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 955, 956, 0, 975, 976, 977, 985, 986,
	987, 0, 0, 0, 979, 983, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 989, 1814,
	0, 0, 981, 0, 0, 969, 970, 971, 984, 0,
	968, 966, 967, 959, 960, 961, 962, 964, 965, 957,
	0, 963, 0, 2319, 0, 972, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 990, 0, 0, 0, 0, 0, 983, 0,
	0, 0, 0, 981, 0, 0, 969, 970, 971, 984,
	988, 968, 966, 967, 959, 960, 961, 962, 964, 965,
	0, 0, 0, 0, 2260, 980, 0, 0, 0, 0,
	0, 973, 0, 0, 963, 0, 1809, 1810, 1811, 0,
	0, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	0, 0, 0, 0, 982, 990, 979, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 969,
	970, 971, 984, 988, 968, 966, 967, 959, 960, 961,
	962, 964, 965, 0, 0, 0, 0, 2222, 980, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 955, 956, 974, 975, 976, 977, 985, 986,
	987, 0, 0, 0, 0, 0, 0, 0, 978, 979,
	983, 0, 0, 0, 0, 958, 0, 0, 989, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 956, 0,
	975, 976, 977, 985, 986, 987, 0, 0, 0, 957,
	0, 0, 0, 978, 0, 972, 0, 0, 0, 0,
	958, 0, 0, 989, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 957, 0, 0, 0, 981, 0,
	972, 969, 970, 971, 984, 0, 968, 966, 967, 959,
	960, 961, 962, 964, 965, 0, 0, 0, 0, 2221,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 990, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 981, 0, 988, 969, 970, 971, 984, 0, 968,
	966, 967, 959, 960, 961, 962, 964, 965, 980, 982,
	990, 0, 2186, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 955, 956, 0,
	975, 976, 977, 985, 986, 987, 0, 0, 0, 0,
	0, 0, 0, 978, 979, 0, 0, 0, 0, 0,
	958, 0, 0, 989, 0, 0, 0, 974, 0, 0,
	0, 0, 955, 956, 0, 975, 976, 977, 985, 986,
	987, 0, 0, 983, 957, 0, 0, 0, 978, 0,
	972, 0, 0, 0, 0, 958, 0, 0, 989, 0,
	955, 956, 974, 975, 976, 977, 985, 986, 987, 0,
	0, 0, 0, 0, 0, 0, 978, 0, 983, 957,
	0, 0, 0, 958, 0, 972, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 963,
	0, 981, 0, 972, 969, 970, 971, 984, 0, 968,
	966, 967, 959, 960, 961, 962, 964, 965, 0, 982,
	990, 0, 2031, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 981, 0, 988, 969,
	970, 971, 984, 0, 968, 966, 967, 959, 960, 961,
	962, 964, 965, 980, 982, 990, 0, 2007, 0, 973,
	0, 0, 963, 2509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 988, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 990, 979, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 988, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 979,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 983, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2508, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 955, 956, 0, 975,
	976, 977, 985, 986, 987, 974, 0, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 958,
	0, 983, 989, 0, 0, 0, 981, 0, 0, 969,
	970, 971, 984, 0, 968, 966, 967, 959, 960, 961,
	962, 964, 965, 957, 0, 0, 0, 1465, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 0, 0, 969, 970, 971, 984, 0, 968,
	966, 967, 959, 960, 961, 962, 964, 965, 0, 0,
	1759, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 969, 970, 971, 984, 0, 968, 966, 967,
	959, 960, 961, 962, 964, 965, 0, 0, 963, 0,
	1829, 955, 956, 1828, 975, 976, 977, 985, 986, 987,
	0, 0, 0, 0, 0, 0, 0, 978, 982, 990,
	0, 0, 1732, 0, 958, 0, 0, 989, 0, 0,
	0, 0, 0, 1566, 0, 0, 0, 988, 0, 955,
	956, 0, 975, 976, 977, 985, 986, 987, 957, 0,
	0, 0, 980, 0, 972, 978, 0, 0, 973, 1565,
	0, 0, 958, 0, 0, 989, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 957, 1733, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 956, 0, 975, 976, 977, 985, 986,
	987, 0, 0, 963, 0, 0, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 989, 0,
	0, 974, 0, 982, 990, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 957,
	0, 963, 988, 955, 956, 972, 975, 976, 977, 985,
	986, 987, 0, 0, 0, 0, 0, 980, 0, 978,
	0, 982, 990, 973, 0, 0, 958, 0, 0, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 0, 0, 0, 0, 0, 0, 0, 979, 0,
	957, 0, 0, 0, 0, 980, 972, 0, 0, 0,
	0, 973, 0, 0, 963, 981, 0, 0, 969, 970,
	971, 984, 0, 968, 966, 967, 959, 960, 961, 962,
	964, 965, 0, 0, 982, 990, 979, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 988, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 963, 0, 0, 980, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 982, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	983, 0, 0, 0, 988, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	981, 0, 0, 969, 970, 971, 984, 0, 968, 966,
	967, 959, 960, 961, 962, 964, 965, 974, 0, 0,
	979, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 0, 0, 981, 0,
	0, 969, 970, 971, 984, 0, 968, 966, 967, 959,
	960, 961, 962, 964, 965, 0, 0, 0, 0, 2011,
	0, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 955, 956, 0, 975, 976, 977, 985, 986, 987,
	0, 0, 0, 0, 983, 0, 0, 978, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 989, 0, 0,
	0, 981, 0, 0, 969, 970, 971, 984, 0, 968,
	966, 967, 959, 960, 961, 962, 964, 965, 957, 0,
	0, 0, 955, 956, 972, 975, 976, 977, 985, 986,
	987, 0, 0, 0, 0, 0, 0, 0, 978, 0,
	0, 0, 1830, 0, 0, 958, 0, 0, 989, 0,
	0, 0, 981, 0, 0, 969, 970, 971, 984, 0,
	968, 966, 967, 959, 960, 961, 962, 964, 965, 957,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 1835, 955,
	956, 0, 975, 976, 977, 985, 986, 987, 0, 0,
	0, 0, 0, 982, 990, 978, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 989, 0, 0, 0, 0,
	0, 0, 988, 0, 955, 956, 0, 975, 976, 977,
	985, 986, 987, 0, 963, 0, 957, 980, 0, 0,
	978, 0, 972, 973, 1788, 0, 0, 958, 0, 0,
	989, 0, 0, 0, 982, 990, 955, 956, 0, 975,
	976, 977, 985, 986, 987, 0, 0, 0, 979, 0,
	0, 957, 978, 988, 0, 0, 0, 972, 0, 958,
	0, 0, 989, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 963, 0, 957, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 979,
	0, 982, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 963, 0, 0, 0,
	988, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 982, 990, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 974, 963, 0,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 979, 0, 982, 990,
	980, 0, 0, 0, 0, 0, 973, 0, 0, 1795,
	981, 0, 0, 969, 970, 971, 984, 988, 968, 966,
	967, 959, 960, 961, 962, 964, 965, 0, 0, 0,
	0, 979, 980, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 981, 0, 979, 969, 970, 971, 984, 0, 968,
	966, 967, 959, 960, 961, 962, 964, 965, 0, 974,
	0, 0, 955, 956, 0, 975, 976, 977, 985, 986,
	987, 0, 0, 0, 0, 983, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 989, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 981, 957,
	0, 969, 970, 971, 984, 972, 968, 966, 967, 959,
	960, 961, 962, 964, 965, 0, 0, 0, 0, 1797,
	1798, 0, 1815, 1816, 1817, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 0, 0, 969, 970, 971, 984,
	0, 968, 966, 967, 959, 960, 961, 962, 964, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 981, 0, 0, 969, 970,
	971, 984, 1812, 968, 966, 967, 959, 960, 961, 962,
	964, 965, 0, 0, 982, 990, 955, 956, 0, 975,
	976, 977, 985, 986, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 988, 0, 0, 0, 0, 0, 958,
	0, 0, 989, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 1803, 0, 957, 955, 956, 0, 0, 0, 972,
	985, 986, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 1813, 0, 0, 0, 0, 0, 974, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 0, 0, 982, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 1814, 0, 982, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 0, 0, 969, 970, 971, 984, 0, 968,
	966, 967, 959, 960, 961, 962, 964, 965, 0, 0,
	980, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 1280,
	0, 1809, 1810, 1811, 0, 0, 1808, 1806, 1807, 1799,
	1800, 1801, 1802, 1804, 1805, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 1288, 1277, 1307, 1268, 1298, 1297, 0, 0,
	1270, 1269, 0, 0, 0, 983, 1309, 1308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 0, 0, 969, 970,
	971, 984, 0, 968, 966, 967, 959, 960, 961, 962,
	964, 965, 0, 1303, 0, 1295, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 1292, 1290, 1291, 0, 0, 984,
	0, 968, 966, 967, 959, 960, 961, 962, 964, 965,
	0, 0, 1280, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 1281, 1279, 1282, 1283,
	1284, 1285, 1286, 0, 1306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 1277, 1307, 1268, 1298,
	1297, 0, 0, 1270, 1269, 0, 0, 0, 0, 1309,
	1308, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1296, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1303, 0, 1295, 1294,
	0, 0, 0, 0, 0, 0, 0, 1289, 1293, 0,
	0, 1400, 1398, 1399, 1402, 1401, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 0, 563, 1292, 1290, 1291,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	0, 0, 0, 0, 542, 0, 0, 0, 1287, 1274,
	0, 0, 1276, 0, 0, 0, 540, 0, 1311, 1281,
	1279, 1282, 1283, 1284, 1285, 1286, 0, 1306, 0, 0,
	0, 1271, 0, 0, 1304, 1305, 0, 541, 0, 0,
	0, 0, 543, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 0, 0, 559, 1272, 1275, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 1296, 564, 544,
	0, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	1289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546, 547,
	1273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 1274, 0, 0, 0, 553, 0, 0, 548,
	555, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 0, 0, 0, 1271, 0, 0, 1304, 1305, 0,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 556, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 0, 0, 561, 0, 0, 0,
	567, 0, 0, 0, 0, 554, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 560,
}
var sqlPact = [...]int{

	39034, -1000, -6, -1000, -1000, -1000, 185, -1000, -1000, -1000,
	184, 182, 181, -1000, 180, 177, 174, 171, 169, 168,
	165, 164, 161, 157, 156, -1000, 153, -1000, -1000, -1000,
	-1000, 150, 147, 145, 143, 137, 136, 135, -1000, 1114,
	23155, 131, 129, 1260, 36476, 128, 124, 121, 118, 974,
	117, 105, 26397, 1062, 1328, 104, 103, 102, 100, 99,
	968, 36153, 4411, 2555, 1146, 1550, 35827, 22829, 1542, 2513,
	35501, -1000, -1000, 35175, 98, 94, 92, 91, 88, -1000,
	-1000, 34849, 86, 85, 83, 77, 76, 75, 74, 73,
	71, 68, 67, 66, 58, 55, -1000, 46, 45, 44,
	-1000, 42132, 41, 40, 39, 1139, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	162, -1000, 962, 466, 2303, 8062, 881, 999, 997, 991,
	981, 996, 38414, 36476, 33, -111, 32, -1000, 1942, 659,
	19876, 39034, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 26071, 25745, 34523, 34197,
	33871, 743, -1000, -10, 24447, 36476, -1000, 63, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15512, 15150, 537, 63, -1000, -1000, -1000, -1000, -1000,
	33548, -1000, 33222, 32896, 1421, 32570, -1000, -1000, -1000, -1000,
	32244, -1000, -1000, 1674, 1561, 1556, 25419, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31921,
	31595, 31269, 30943, 30617, 511, -1000, -1000, -1000, 18237, -1000,
	-1000, -1000, -1000, 31, -1000, 22, -1000, 21, 20, 19,
	18, -1000, 17, 14, -1000, 11, 10, -1000, 2, -1,
	30291, 1155, -1000, -1000, -8, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36476, -1000, 16208, -1000, 508, -1000, 1523,
	-1000, 16208, -1000, 1152, -1000, -1000, -1000, -1000, -1000, 36476,
	-1000, -1000, -1000, -1000, -1000, -1000, 2065, 1176, 506, 29965,
	-1000, 1329, -1000, 603, 768, -1000, -1000, -1000, 9107, 192,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1761,
	22180, 1173, 1884, 1666, 2064, 1327, 1655, 1640, 1635, 1598,
	1592, 2063, 949, 2059, 1701, 988, 2058, 1590, 1166, 676,
	2056, 1514, 1506, -1000, -1000, -1000, -1000, 918, -1000, -1000,
	-1000, 28012, -1000, -1000, 962, -1000, -1000, -1000, 1351, 1789,
	1789, 1789, 1903, 303, 294, -1000, 162, -1000, 1138, -1000,
	1171, -1000, -1000, -1000, -1000, -1000, 41266, -1000, -1000, 16208,
	16208, 16208, 16208, 16208, 1077, 529, -1000, 505, 501, 7352,
	-1000, -1000, 2043, -1000, -1000, -1000, 353, -1000, -1000, 16208,
	63, -1000, -1000, -1000, -1000, 499, 2052, -1000, 664, -1000,
	-1000, -1000, 592, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1567, 497, 496, 493, -1000, 490, -1000, -1000,
	489, 488, 481, 475, 474, 473, 472, 471, 470, 467,
	464, 463, 462, 461, 459, 1029, -1000, 631, -1000, -1000,
	631, 631, -1000, 437, 437, 438, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 437, -1000, -1000, -1000, 579, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	456, 899, 1224, -1000, -1000, 1224, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 742, 37768, -13, 36476, -1000, 455, -13,
	-1000, -1000, 454, -1000, 11209, 11209, -1000, -1000, -1000, -1000,
	-1000, 9817, 2417, -1000, 3460, -199, 306, 559, -1000, 18892,
	21843, -1000, -1000, 1188, 1690, 784, -1000, 1000, 1683, 536,
	-1000, 1070, -1000, 872, 1680, -129, 1596, 1591, 22503, 24447,
	-10, -44, -1000, -1000, -1000, 5621, 41266, -1000, 41266, -1000,
	866, 20530, 63, -1000, -1000, -1000, -1000, 451, 1253, 613,
	-1000, 311, -1000, 29639, 613, 1246, -1000, -1000, -1000, 28012,
	-1000, 36476, -1000, 36476, -1000, 888, -1000, 38091, 113, 1677,
	-1000, -1000, 113, 1673, -1000, 109, 1669, -1000, -1000, 1187,
	1657, -1000, -44, 1653, -1000, -1000, 16208, -12, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 659, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29313,
	23801, 994, 588, 41266, 1966, 42018, 22503, 41266, 23801, -1000,
	-1000, 36476, -1000, 16208, -1000, 1960, 1320, -21, -1000, -1000,
	-1000, -1000, -1000, 1326, 1348, 722, 932, 9107, 9107, 1765,
	-1000, 188, 5956, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 28987, -1000, -1000, -1000, 1151, 36476, -1000, -1000, 1562,
	-1000, 23801, 36476, -1000, 36476, -1000, 36476, -1000, 36476, -1000,
	36476, -1000, -1000, -1000, -1000, -1000, 2985, -1000, 1558, -1000,
	-1000, 36476, -1000, 1281, -1000, -1000, -1000, 28664, 28338, -1000,
	984, 828, -1000, -1000, 114, -1000, -1000, 1351, -1000, 1178,
	1382, 14788, 1372, 16208, 162, -1000, -1000, 162, 162, 8759,
	-1000, -1000, -1000, 36476, -1000, 41885, 42018, 5956, 808, 16208,
	16208, 16208, 16208, 16208, 16208, 16208, 16208, 16208, 16208, 16208,
	16208, 16208, 16208, 16208, 16208, 16208, 16208, 16208, 16208, 16208,
	16208, 1222, 16208, 736, 16208, 16208, 16208, 16208, 1118, 1105,
	434, 1169, -1000, 2033, 2033, 2033, 249, 249, 402, 529,
	-1000, 16208, -1000, 163, 14440, 294, 40267, -11, 7004, -1000,
	-1000, -1000, 9455, 629, 41266, 63, 6293, -1000, 2042, 1009,
	1579, 1456, 446, 558, 555, 552, 550, 16208, 16208, 14092,
	13730, 13368, 16904, 13006, 16208, 7700, 16208, 16208, 16208, 16208,
	12644, 12282, -1000, 444, -1000, -1000, -1000, -1000, 2034, -1000,
	-1000, 2029, -1000, 805, 775, 2027, 1857, 600, -1000, -21,
	-1000, 37768, -1000, 36476, -13, 1959, 36476, -1000, 62, -1000,
	40719, -1000, 62, -20, -1000, 1374, 1368, 20203, 1343, 1096,
	1096, 1096, -1000, 439, 522, 559, 4936, 11920, -1000, 26720,
	1101, 210, 293, 18565, 2417, -1000, 36476, -67, 960, -1000,
	25093, 1855, 1792, 1791, 28012, 1921, 163, 1849, 1505, 734,
	28012, 1829, 731, 1917, 163, 1503, 729, 36476, 5956, 1823,
	1819, 576, -1000, 36476, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1501, -32, -1000, -1000, 24770, 1958, 1649,
	-1000, 1063, -1000, 1943, 36476, 1148, 1243, -1000, -1000, 823,
	1632, 611, 448, 1939, 448, 20858, -1000, 36476, -1000, 36476,
	-1000, -1000, 36476, -1000, 36476, -1000, 36476, 36476, -1000, 36476,
	36476, -33, 41266, 3837, 24124, 728, -1000, 653, 24770, 130,
	-34, -1000, 850, -1000, -1000, -1000, -1000, 297, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 438, 1029, 437, 437, 437, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 579, -1000, -1000, 631, 631, 631,
	-1000, -1000, -112, -1000, 1500, 589, -35, 680, -21, -1000,
	1224, -1000, 1232, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2051, -1000, 2040, -1000,
	-1000, 2025, -22, -1000, -22, -1000, 5956, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36476, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1205, -1000, -1000, -1000, -1000, -1000, -1000,
	36476, 36476, 36476, -1000, 28012, -1000, -1000, -1000, -1000, 41266,
	-1000, 382, -1000, -1000, 41266, 1018, 1392, -1000, 1392, -23,
	-1000, 40681, 1366, 36476, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 597, 779, 779, 806, 806,
	806, 806, 1941, 1420, 214, 290, 41664, 41664, 41664, 2766,
	491, 491, 41664, 41664, 41664, 249, 41482, 2199, 16208, 16208,
	726, 1095, 434, 2199, 16208, 2199, 2199, 2199, 2199, -1000,
	1634, -1000, -1000, -1000, -1000, 1499, 433, 16904, 16904, -1000,
	-1000, -1000, 7352, 17239, -1000, -1000, -1000, -1000, 428, 16208,
	-1000, 40302, -213, -47, -1000, -1000, 16208, -40, -42, -1000,
	-1000, 855, -1000, 16208, -1000, -43, 16208, 16208, 16208, 291,
	-1000, 288, -1000, 721, -1000, 713, 711, 710, -1000, 427,
	1093, 421, 420, 16208, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41234, 4368, 287, -1000, 1497, -121, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 286, -1000, 276, -1000, 41199,
	-121, 275, 4484, -1000, 16904, 16904, 16904, 7352, 419, 273,
	-1000, 40566, -121, 41132, 11558, 11558, 11558, 265, 41081, 16208,
	-121, 4265, 4006, 3575, -50, -53, -1000, -55, -1000, 2021,
	-56, 264, 596, 594, 262, 1555, -1000, 1860, -1000, -1000,
	416, -61, 611, 11209, 19548, 5956, -1000, 611, 9817, -1000,
	20203, 20203, 1753, 1349, 20203, -1000, -1000, -1000, -1000, 26720,
	468, 559, 26720, -1000, 2017, 1323, -66, -1000, -1000, -1000,
	36476, 413, -1000, 559, 257, 946, 36476, 36476, 36476, -1000,
	-1000, 1216, 37445, 1215, 42018, 36476, -1000, 409, 408, 1352,
	1347, 36476, 36476, 37122, 36799, 36476, 1143, 163, -1000, 593,
	407, 36476, 992, 587, 36476, 163, -1000, 406, 36476, 990,
	-1000, 586, 585, 1443, 1181, -1000, 864, 1496, 36476, 256,
	-68, -31, 42018, -1000, -1000, -1000, -1000, -1000, 36476, 379,
	36476, 163, 36476, 2049, 163, 36476, 1626, 1696, 367, 36476,
	1382, 16208, 1060, -1000, 19220, 641, 36476, 973, 54, -1000,
	-1000, -1000, 569, 36476, -1000, -1000, 113, 113, -1000, 109,
	1187, -44, -1000, 16208, -1000, -1000, 36476, 22503, -69, -1000,
	-1000, 42018, -1000, 528, 746, -1000, 2010, 610, 22503, 36476,
	9107, 9107, -1000, 1375, -1000, -1000, 919, -1000, 998, -1000,
	-1000, -1000, -1000, 9107, -1000, -80, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1018, -1000, 16208, 2007, -1000, -1000, -1000,
	8759, -1000, -1000, -1000, 36476, -193, 16208, 2199, 2199, 16208,
	16904, 16904, -1000, 2199, -1000, -1000, -1000, -1000, -1000, 1493,
	404, 16208, 42018, 39654, 39136, -71, -1000, 10861, -49, -1000,
	16208, -1000, 40087, -1000, -1000, 527, 1638, -1000, 16208, 40782,
	254, 10513, -1000, 40833, -45, -45, -1000, 2048, 1269, 1086,
	975, 904, 2002, -1000, 21516, 625, 1109, 40052, 41885, 42018,
	-1000, 16208, -1000, -1000, 1491, 16208, -1000, 41885, 42018, 16904,
	16904, 16904, 16904, 16904, 16904, 16904, 16904, 16904, 16904, 16904,
	16904, 16904, 16904, 16904, 16904, 16904, 16904, 16904, 1285, 16904,
	2028, 2028, 2028, -62, 10165, -1000, 1549, 1491, 16208, 16208,
	42018, 252, 251, 250, -1000, 16208, -121, 16208, 16208, 16208,
	-1000, -1000, -1000, 246, -1000, 1999, -1000, -1000, -1000, -1000,
	1036, -1000, 130, -1000, 1454, -1000, -168, -1000, 2417, -1000,
	1454, -1000, -1000, 1753, -1000, 403, 16208, 20203, -1000, 520,
	-1000, -74, -1000, 26720, -1000, 519, -208, -1000, 562, -1000,
	559, 401, 36476, 26720, -1000, -1000, -1000, 707, 706, 1624,
	-1000, 1208, -1000, 646, -1000, 1053, 16208, 17909, 400, 399,
	1103, -1000, 1622, 1187, 1621, 1187, -1000, -67, 926, -1000,
	21193, 16208, -1000, 705, 21193, -1000, -1000, 16208, -1000, 701,
	21193, 21193, 610, 1484, 837, -1000, 858, -1000, 1425, -1000,
	24770, 398, 36476, 397, -1000, 395, -1000, -1000, 393, 36476,
	1334, 367, 23478, -1000, 613, 973, -1000, 41266, -1000, 973,
	8410, 1811, -83, -1000, -1000, -1000, 611, 20858, 20203, 9817,
	-91, -1000, -1000, -1000, -1000, 41266, -80, 1771, 1771, -1000,
	1997, -1000, 517, 245, -1000, 27689, -1000, -80, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36476, 1119, 39872, -1000, 1769,
	5956, 1969, 2199, 4299, 324, 16208, 42018, 41616, -115, 16208,
	16208, -1000, -116, -1000, 16208, 516, 41266, -1000, -1000, -1000,
	41266, 16208, 2047, 16208, 235, 229, 227, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 226, -1000, -1000, 38737, 16208,
	225, -1000, 224, 222, 41266, 1549, 41266, -1000, -1000, 609,
	609, 871, 871, 871, 871, 2028, 394, 277, 1172, 335,
	335, 335, 1064, 598, 598, 335, 335, 335, 1483, 1297,
	381, 41549, 16208, -118, -1000, -1000, -1000, 41266, 41266, 220,
	-1000, -1000, -1000, -121, 352, 39809, 39687, -1000, 218, 27366,
	36476, 36476, 217, 1451, 1902, -1000, 20203, 1451, -1000, 36476,
	41266, -1000, -199, -1000, 1995, -1000, -1000, 1323, -1000, 5283,
	26720, 36476, -123, -1000, 36476, 36476, 36476, 1615, -1000, 1489,
	-1000, 39624, -125, -1000, 301, 1877, 16208, -1000, -1000, 380,
	17909, 36476, -1000, 1308, 1411, 673, 36476, -1000, 36476, -1000,
	36476, 36476, 36476, -1000, 375, 63, -126, 36476, -1000, -133,
	36476, -1000, -1000, -1000, 22503, 758, -1000, -1000, 1430, -1000,
	17909, 371, 36476, 24770, 1930, 17909, 1145, 1340, 367, 23478,
	-1000, 823, -1000, -1000, -85, -1000, 370, 163, 973, -1000,
	-92, -1000, 556, 1755, -1000, 1747, 515, -1000, -1000, -94,
	369, -1000, 554, 549, -1000, -1000, -1000, -1000, 1769, 16208,
	16208, 41616, -134, -1000, 2199, 2199, -1000, 39573, -1000, 41266,
	-1000, 40833, -1000, -1000, -1000, -1000, 1067, -1000, 39439, -1000,
	-1000, -1000, -1000, 16904, 1463, 364, 42018, 39388, -1000, -1000,
	16208, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 623,
	16208, 16208, 2417, 623, -141, 559, -1000, -1000, -1000, 1993,
	-1000, -142, -1000, -1000, -1000, -1000, 36476, -1000, 36476, -1000,
	5956, 36476, 1469, 1203, -1000, -1000, 1346, 362, 16904, 36476,
	-1000, 1072, 17909, 1769, 63, 5956, 1769, 39193, 6293, -144,
	-147, 1191, -1000, 1189, 16208, -1000, 42018, 1187, 1187, -1000,
	691, 690, 16208, 686, -1000, 685, -1000, -103, 21193, 1065,
	-149, 17909, -150, 215, 163, -155, 36476, -1000, 367, 23478,
	-1000, 1696, 1706, 36476, 1785, -1000, -1000, 360, 359, 358,
	-1000, 27043, 27043, 22503, 22503, -1000, 2199, 2199, -1000, -1000,
	213, 1109, 1901, -1000, 3459, 16904, 42018, -156, -1000, 39164,
	-1000, 36476, 41266, -121, -1000, -1000, 26720, 469, -1000, -1000,
	980, -1000, -1000, 36476, 1154, -1000, -1000, 16208, 41549, 356,
	1425, 355, -1000, -1000, -1000, -1000, -1000, -1000, 1877, -43,
	-1000, 1014, -1000, -1000, 41266, 1871, -1000, -1000, 36476, 36476,
	-45, 354, 350, -1000, 36476, 1072, -157, -1000, 1425, -1000,
	1072, 339, 23478, -1000, 1334, 785, -158, 36476, -1000, -1000,
	6642, 22503, 22503, -1000, -163, -1000, -1000, -1000, 1045, 16208,
	3459, -165, -1000, -1000, -114, -1000, 1926, -1000, -1000, -1000,
	-1000, 1600, 4548, 1274, 36476, -1000, 36476, 1769, 211, 36476,
	652, 5956, -1000, -1000, 202, 16208, 16208, 333, 1425, 1072,
	-1000, 1425, 17909, -1000, 1340, 885, -1000, 611, -1000, -166,
	-172, -1000, 201, 16556, 16556, -121, -1000, 36476, 322, 1582,
	-1000, 1128, 1026, 132, -173, -1000, -1000, 311, -1000, 16208,
	-1000, 2047, -178, -180, 36476, -1000, 1425, -1000, -181, -1000,
	20858, -1000, 610, 610, -1000, -1000, -1000, 17574, 1144, 916,
	40330, -1000, -1000, -1000, 36476, -1000, 1137, 1134, 882, -1000,
	-1000, -1000, -1000, -1000, 1274, 41266, -1000, -1000, -186, -1000,
	1072, -171, -1000, -1000, 1946, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1734, -1000, 660, 1273, 1273, 1128, 1160, 1425,
	-1000, 15860, -1000, 1979, -1000, -1000, 1304, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2441, 2440, 1578, 1909, 2438, 2432, 2428, 2427, 2426,
	2425, 2424, 2419, 2414, 2410, 2407, 2406, 2404, 2403, 2402,
	2401, 2399, 2398, 2397, 1900, 2396, 1893, 2395, 2394, 2387,
	2386, 1891, 2377, 2376, 2374, 2372, 2368, 2367, 1871, 2365,
	1866, 2363, 2360, 2359, 2354, 2351, 1855, 2350, 76, 109,
	1842, 2348, 2346, 1757, 1754, 1746, 2341, 1744, 2333, 2331,
	1689, 1654, 2330, 43, 2329, 2328, 2327, 1646, 1644, 2324,
	2323, 2319, 147, 2317, 1607, 2316, 2306, 2303, 2299, 2298,
	2296, 2294, 2293, 2290, 2289, 2286, 2283, 2280, 2278, 2276,
	2275, 2274, 2271, 2270, 153, 2269, 2268, 1595, 1576, 2267,
	2265, 33, 30, 15, 56, 27, 137, 1671, 135, 2264,
	2261, 2259, 2257, 2255, 2254, 28, 98, 95, 2253, 158,
	2248, 2245, 46, 38, 24, 16, 2244, 90, 2241, 2238,
	1736, 29, 2237, 2235, 128, 2234, 72, 23, 87, 146,
	140, 104, 113, 2233, 2227, 2216, 48, 115, 1, 2215,
	2213, 17, 77, 40, 2212, 50, 14, 2205, 2204, 122,
	2203, 51, 94, 1506, 97, 117, 8, 2200, 65, 11,
	57, 2199, 2198, 150, 36, 2197, 31, 75, 127, 2196,
	55, 154, 120, 73, 124, 125, 2195, 2192, 2191, 99,
	2190, 111, 81, 2189, 2188, 69, 2186, 92, 131, 2183,
	2181, 2173, 93, 2172, 118, 2168, 2166, 152, 138, 105,
	9, 37, 64, 6, 1499, 1470, 126, 89, 58, 61,
	2164, 2477, 930, 1358, 60, 100, 85, 52, 101, 54,
	86, 143, 26, 2162, 2161, 129, 2158, 2148, 2146, 2143,
	2137, 96, 2134, 2130, 32, 2128, 83, 34, 49, 88,
	47, 139, 116, 108, 145, 102, 2126, 78, 121, 2125,
	59, 2123, 2119, 1854, 110, 2118, 2115, 2114, 1738, 1199,
	1063, 232, 2113, 2112, 871, 432, 2111, 2110, 84, 2109,
	112, 106, 107, 130, 148, 21, 2108, 114, 22, 2103,
	42, 20, 0, 621, 551, 2099, 119, 70, 2097, 2096,
	2095, 2094, 25, 4, 10, 5, 7, 3, 63, 19,
	2093, 2092, 123, 79, 66, 2091, 149, 2089, 2086, 2085,
	39, 2084, 12, 2083, 18, 2079, 2078, 13, 2, 2077,
	2076, 144, 2074, 91, 2072, 1846, 2071, 136, 2070, 2069,
	1693, 2068, 35, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 9, 6, 6, 6,
	6, 6, 11, 11, 12, 20, 15, 22, 10, 10,
	18, 16, 14, 14, 19, 19, 117, 117, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 114, 114, 119, 119, 119, 121, 121,
	118, 118, 113, 113, 24, 24, 61, 61, 104, 54,
	54, 54, 290, 290, 291, 291, 100, 100, 101, 101,
	101, 101, 102, 102, 103, 103, 103, 30, 30, 30,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 38, 38, 39, 39, 39, 39, 39,
	39, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 45, 45, 45, 43, 43, 43, 42, 42,
	42, 41, 41, 41, 44, 44, 44, 165, 165, 164,
	164, 167, 167, 46, 46, 46, 46, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 49, 49, 49, 49, 49, 49, 49,
	259, 259, 258, 47, 47, 233, 233, 50, 50, 190,
	190, 51, 51, 51, 51, 51, 52, 52, 62, 62,
	331, 331, 331, 335, 335, 336, 336, 337, 337, 337,
	337, 337, 337, 337, 333, 333, 57, 57, 57, 57,
	58, 58, 58, 59, 59, 99, 99, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 68, 68, 68, 70,
	67, 67, 67, 69, 69, 69, 69, 71, 71, 72,
	72, 72, 72, 72, 73, 73, 284, 282, 282, 283,
	283, 144, 144, 144, 144, 144, 145, 145, 145, 289,
	289, 289, 289, 289, 289, 288, 288, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 86, 86, 86, 94, 94, 94,
	94, 94, 94, 94, 75, 75, 80, 80, 80, 80,
	80, 76, 76, 81, 81, 82, 82, 83, 83, 83,
	83, 83, 83, 77, 77, 77, 77, 85, 85, 85,
	85, 84, 84, 90, 90, 90, 90, 90, 90, 87,
	87, 87, 87, 88, 88, 88, 91, 91, 91, 91,
	78, 78, 79, 79, 92, 92, 93, 93, 93, 93,
	93, 93, 89, 89, 89, 332, 332, 334, 334, 55,
	55, 34, 34, 35, 35, 146, 146, 147, 147, 212,
	212, 212, 212, 148, 148, 120, 120, 120, 211, 300,
	300, 301, 301, 301, 301, 301, 301, 302, 302, 302,
	302, 302, 302, 302, 298, 298, 299, 296, 296, 297,
	297, 297, 297, 338, 338, 210, 210, 151, 151, 305,
	305, 305, 305, 303, 303, 303, 303, 303, 306, 304,
	307, 307, 307, 307, 307, 245, 245, 245, 96, 96,
	36, 36, 126, 126, 37, 37, 33, 33, 33, 194,
	194, 155, 155, 250, 250, 250, 137, 137, 115, 115,
	115, 17, 13, 13, 13, 13, 13, 13, 23, 23,
	21, 21, 195, 195, 196, 196, 56, 56, 60, 60,
	65, 65, 95, 95, 95, 95, 95, 95, 25, 25,
	25, 25, 29, 29, 29, 29, 64, 64, 340, 340,
	133, 133, 133, 133, 134, 134, 207, 207, 208, 208,
	341, 341, 209, 209, 209, 128, 127, 129, 129, 32,
	32, 32, 122, 122, 123, 123, 124, 124, 125, 125,
	342, 342, 53, 53, 53, 98, 98, 140, 140, 204,
	204, 204, 206, 206, 205, 205, 205, 180, 180, 180,
	97, 97, 160, 160, 169, 169, 170, 170, 256, 171,
	171, 63, 63, 107, 107, 105, 105, 105, 105, 105,
	105, 106, 106, 106, 108, 108, 108, 108, 108, 108,
	108, 111, 111, 111, 112, 112, 112, 110, 110, 313,
	313, 313, 316, 316, 312, 314, 314, 315, 315, 339,
	339, 181, 181, 181, 150, 149, 149, 153, 153, 152,
	154, 154, 249, 249, 249, 178, 178, 178, 178, 199,
	199, 197, 197, 198, 198, 200, 200, 201, 201, 201,
	202, 202, 203, 203, 177, 177, 229, 229, 109, 109,
	109, 159, 159, 159, 161, 161, 219, 219, 219, 220,
	220, 218, 218, 218, 218, 251, 251, 251, 251, 251,
	251, 251, 251, 329, 329, 329, 330, 330, 248, 248,
	252, 252, 252, 252, 252, 252, 246, 246, 246, 246,
	247, 247, 257, 257, 184, 184, 184, 184, 182, 182,
	183, 183, 253, 253, 253, 253, 179, 179, 254, 254,
	254, 213, 213, 260, 260, 260, 278, 278, 158, 158,
	158, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	262, 262, 262, 262, 264, 264, 264, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 277, 277, 277, 277, 277,
	265, 265, 272, 272, 273, 273, 274, 275, 266, 266,
	267, 267, 268, 269, 276, 276, 276, 276, 280, 280,
	270, 270, 270, 270, 270, 271, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	192, 192, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 223, 223, 223, 223, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 308,
	308, 308, 308, 308, 308, 308, 308, 310, 310, 311,
	311, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 317, 317, 318, 318, 320, 320, 321, 321, 322,
	323, 323, 323, 324, 325, 325, 319, 319, 326, 326,
	326, 327, 327, 328, 328, 328, 328, 328, 235, 235,
	235, 236, 236, 237, 243, 243, 243, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 135, 135, 135, 135, 135, 166, 166,
	232, 232, 230, 230, 230, 234, 234, 185, 185, 279,
	279, 279, 279, 279, 279, 279, 186, 186, 186, 193,
	187, 187, 188, 188, 188, 188, 188, 188, 226, 227,
	189, 189, 189, 228, 228, 238, 242, 242, 241, 240,
	240, 239, 239, 216, 216, 217, 217, 215, 214, 174,
	174, 173, 173, 172, 172, 343, 343, 244, 244, 175,
	175, 176, 168, 168, 255, 255, 255, 255, 162, 162,
	142, 142, 163, 163, 138, 138, 141, 141, 139, 139,
	139, 139, 156, 156, 157, 157, 136, 136, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 281,
	281, 281, 231, 130, 130, 130, 131, 131, 132, 132,
	286, 286, 286, 287, 287, 287, 287, 285, 285, 285,
	285, 285, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 4, 6, 6, 6, 5, 5, 7, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 4, 3, 5, 3, 4, 5, 2,
	3, 3, 3, 4, 2, 3, 4, 3, 3, 3,
	4, 4, 4, 4, 2, 3, 7, 7, 7, 7,
	4, 5, 5, 5, 5, 2, 0, 2, 0, 3,
	2, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 2,
	4, 3, 3, 0, 6, 3, 11, 14, 4, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 3, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 2,
	3, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 3, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 3, 3, 1, 3, 3, 1, 3,
	3, 1, 1, 3, 3, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 362, -4, -24, -26, -30, -31,
	-51, -38, -39, -40, -50, -46, -52, -53, -54, -55,
	-47, -61, -60, -62, -65, -63, -56, -57, -66, -74,
	-95, -96, -97, -98, -5, -6, -7, -8, -9, 23,
	34, -27, -28, 47, 70, -32, -33, -34, -35, 72,
	-36, -37, 93, -315, 97, -41, -42, -43, -45, -44,
	101, 108, 111, 129, 138, 219, 225, 245, 247, 249,
	256, -105, -107, 243, -58, -59, -67, -68, -69, -70,
	-99, 267, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, 270, -25, -29, -64, 308, -11, -12, -15, -14,
	-16, -13, -20, -22, -19, -21, -23, -17, -18, -10,
	-313, -108, -106, 359, 244, 317, 110, 35, 279, 61,
	104, 251, 333, 340, -111, -109, -110, -112, 260, 325,
	289, 363, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 2, 289, 328, 86, 146,
	230, -331, 2, -163, 289, 86, -139, -130, 352, 4,
	-292, -294, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 48, 55, 60, 61, 62, 67, 64, 65, 66,
	69, 70, 71, 74, 75, 76, 84, 85, 87, 89,
	93, 95, 97, 100, 101, 103, 108, 110, 109, 111,
	117, 118, 123, 125, 130, 136, 137, 138, 139, 147,
	150, 152, 145, 162, 163, 164, 166, 167, 168, 171,
	170, 175, 178, 181, 183, 184, 185, 188, 186, 190,
	191, 193, 192, 198, 200, 201, 203, 206, 209, 212,
	215, 216, 217, 218, 219, 221, 223, 225, 227, 228,
	229, 230, 231, 233, 234, 236, 237, 238, 239, 240,
	243, 241, 242, 244, 245, 246, 247, 249, 251, 252,
	254, 268, 269, 280, 256, 257, 258, 259, 263, 261,
	264, 265, 267, 270, 272, 275, 278, 279, 281, 284,
	285, 282, 277, 288, 290, 291, 292, 293, 294, 295,
	296, 303, 304, 308, 309, 310, 311, 314, 315, 316,
	317, 319, 322, 323, 324, 329, 334, 335, 336, 337,
	338, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 88, 90, 91, 107, 112, 113,
	119, 120, 121, 131, 133, 140, 141, 144, 151, 153,
	154, 155, 156, 157, 159, 173, 187, 197, 199, 210,
	214, 222, 224, 232, 253, 262, 273, 274, 283, 286,
	298, 299, 300, 305, 306, 321, 325, 326, 362, 362,
	2, 163, 229, -138, -130, 86, 362, 362, 362, 362,
	289, 2, 318, 328, -194, 86, 313, 362, 362, -130,
	225, 22, 2, 95, 150, 316, 315, 22, 221, 261,
	291, 293, 2, 362, 362, 362, 362, 362, 2, 328,
	289, 146, 86, 318, -130, 2, -49, 2, 359, -48,
	-4, -31, -40, -50, -46, -24, -26, -38, -54, -53,
	-55, -57, -61, -60, -63, -67, -68, -74, -97, -98,
	267, -335, 2, 22, -336, -337, 72, 101, 129, 260,
	150, 95, 315, 289, 2, 163, 2, -130, 2, -331,
	2, 163, 2, -335, 2, -130, 2, -134, 2, 256,
	-130, 362, 362, 362, 362, 362, 178, 55, 253, 264,
	-72, 304, -71, 298, -284, -73, 2, -164, 188, -130,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 2, -94, 264,
	34, 55, 22, 60, 87, 130, 146, 147, 167, 68,
	69, 228, 178, 164, 303, 168, 265, 290, 304, 72,
	319, 294, 109, 4, 86, 188, 266, 298, 362, 362,
	362, -339, 2, 289, -106, -108, -107, -152, -153, 312,
	158, 106, 208, -105, -107, 2, -313, -94, 264, 2,
	55, 22, -282, 2, -244, 204, -221, 92, -223, 350,
	351, 345, 194, 339, -235, -225, -238, 107, 253, 359,
	-138, -224, 365, 9, -310, -107, 29, -236, -237, 49,
	-130, 7, 8, 5, 6, -136, -262, -231, -271, 307,
	114, 196, -308, -309, 4, -292, -286, -263, -273, -267,
	-270, 159, 58, 78, 79, 82, 80, 83, 266, 318,
	50, 28, 112, 113, 214, 222, 286, 305, 306, 140,
	197, 141, 56, 131, 173, 100, 37, 39, 41, 42,
	51, 52, 88, 90, 91, 119, 120, 121, 151, 153,
	154, 155, 156, 157, 199, 232, 273, 283, 299, 300,
	326, -293, -274, -275, -268, -269, 73, 115, 128, 149,
	142, 161, 165, 174, 176, 189, 211, 213, 250, 271,
	-276, 270, -340, 2, 304, 304, 2, -340, 2, -340,
	2, -133, 2, 304, 301, -316, 233, -312, -130, -316,
	362, 362, 364, 362, -149, -150, 2, 22, 98, -176,
	2, 359, -251, 2, 357, -253, -138, -107, -252, 359,
	205, -3, 2, -253, 140, -138, 2, -253, 140, -138,
	2, -130, 2, -141, 140, -138, 92, -130, 301, 364,
	-163, -156, -130, -215, -214, 361, -221, 2, -221, 2,
	127, 359, -173, -174, -214, -215, 2, -164, 140, -130,
	2, -164, 2, 146, -130, 140, 2, -130, 22, 127,
	2, 160, 2, 160, 2, -254, 2, -253, -165, 140,
	2, -164, -165, 140, 2, -142, 140, 2, -141, -130,
	140, 2, -156, 140, 2, -190, 359, -259, 2, -258,
	-287, 4, -292, -294, -293, 325, 58, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 264,
	204, 364, -164, -221, -233, 359, 127, -221, 204, -130,
	2, 268, 2, 359, -72, 53, 304, -208, 2, -209,
	-127, -128, -129, 162, 227, 231, 338, 301, 344, 127,
	-282, -167, 361, -94, 2, -290, 2, -288, 9, -287,
	5, 268, 2, 228, 265, 55, 127, 2, 2, -332,
	2, 204, 127, 2, 127, 2, 127, 2, 127, 2,
	127, 2, 2, 228, 265, 2, 124, 2, 303, 2,
	2, 127, 2, 162, 227, 280, 2, 289, 328, 2,
	127, 127, 338, 2, -179, -253, -152, -153, -178, -197,
	-198, 177, 116, 202, -181, 22, 98, -181, -181, 44,
	360, 360, -94, 268, 2, 10, 11, 57, 33, 350,
	351, 352, 353, 122, 354, 355, 348, 349, 347, 342,
	343, 344, 63, 182, 255, 13, 14, 15, 26, 207,
	176, 339, 142, 271, 345, 16, 17, 18, 161, 36,
	143, -135, -143, -221, -221, -221, -221, -221, 213, -172,
	-216, 357, -107, 359, 359, -107, -221, -166, 359, 7,
	-107, -230, 357, -239, -221, -173, 359, 5, 359, 5,
	-317, 334, 124, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 224, -280, 329, -280, -280, -264, 359, -264,
	-265, 359, -264, 335, 340, 359, 338, 22, -207, -208,
	-207, 301, -134, 364, -316, -157, 359, -176, -168, -255,
	-221, 352, -168, -175, -244, 73, -184, 165, 189, 128,
	174, 250, 149, 7, -49, -218, 365, 359, 352, -248,
	340, -107, -252, 359, -251, -138, 359, -117, 241, -116,
	21, 23, 101, 323, 107, 277, 295, 110, 257, 241,
	107, 110, 241, 277, 295, 257, 241, 107, 365, 110,
	110, -290, -139, 364, -285, 352, 4, -292, -294, -293,
	-295, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 68, 72, 77, 78,
	80, 79, 81, 82, 83, 92, 94, 96, 98, 99,
	102, 104, 106, 114, 116, 124, 126, 127, 129, 132,
	134, 143, 146, 148, 158, 160, 169, 172, 177, 179,
	180, 194, 195, 196, 202, 204, 205, 207, 208, 220,
	226, 235, 248, 260, 266, 276, 287, 289, 297, 301,
	302, 307, 312, 313, 318, 320, 327, 328, 330, 331,
	332, 333, 281, 360, -162, -138, -174, 359, -151, 194,
	-126, -314, 333, -151, 359, -131, 140, 2, -130, -314,
	194, -254, -140, -138, -140, 267, -130, 30, -119, 364,
	48, 246, 107, -119, 107, -119, 364, 107, -119, 107,
	107, -166, -221, 360, 364, -331, -337, 72, 359, 30,
	-232, -260, -261, -263, -272, -266, -270, -271, 40, 46,
	45, 296, 187, 262, 274, 321, 144, 38, 203, 152,
	4, 151, 153, 154, 155, 156, 157, 273, 37, 232,
	120, 121, 119, 100, 91, 90, 199, 42, 41, -274,
	-275, -268, -269, 88, 299, 300, 159, 39, 52, 51,
	326, 283, -291, -290, -331, -284, -166, 30, -208, 2,
	-341, 364, 175, -145, 181, 193, 136, 205, 336, -289,
	5, 4, -231, -245, 92, 178, -271, 8, 351, -281,
	7, 350, -283, -282, -283, 76, 361, -285, -164, 22,
	269, 2, -284, -334, 124, -331, -284, -284, -284, -284,
	-284, 264, -49, 124, -130, 175, -284, 2, -284, 2,
	289, 146, 289, -119, 364, -178, -198, -197, -200, -221,
	22, -203, 118, 190, -221, -223, -106, -106, -106, -154,
	-249, -221, 226, 146, -284, -278, -260, -277, 237, 238,
	236, 240, 239, -260, -285, 298, -221, -221, -221, -221,
	-221, -221, -221, -221, -221, -221, -221, -221, -221, -221,
	-221, -221, -221, -221, -221, -221, -221, -221, 176, 142,
	271, 36, 143, -221, 301, -221, -221, -221, -221, 186,
	194, 196, 307, 114, 314, 98, 200, -343, 287, 32,
	-228, -107, 359, -243, 27, 276, 22, -235, 253, 359,
	-216, -221, -217, -166, 360, 360, 364, -166, -234, 358,
	-230, -242, -241, 330, 360, -166, 327, 22, 98, 352,
	2, 7, -191, 337, 185, 89, 137, 184, -192, 259,
	-318, 117, 132, 359, 360, 2, 360, 2, 360, 2,
	360, 2, -221, -221, -185, 2, -279, -166, 4, 337,
	185, 89, 137, 184, 259, -185, 2, -186, 2, -221,
	-166, -187, -222, -223, 350, 351, 345, 359, 253, -188,
	2, -221, -166, -221, 43, 172, 302, -189, -221, 127,
	-166, -221, -221, -221, -166, -166, 2, -166, 2, 359,
	7, 7, 298, 298, 7, 64, 65, 338, -134, -312,
	30, -156, -159, 364, 127, 30, 4, -159, 364, 360,
	165, 165, -251, -184, 165, -182, 211, -182, -182, -329,
	359, 358, -248, -285, 357, 366, -166, 2, -247, -246,
	30, -130, 209, 360, -138, 364, 301, -195, 68, 59,
	-211, 140, 59, -296, -130, 68, -297, 54, 313, 226,
	126, -195, 68, -195, 68, 68, -253, 33, -63, 66,
	127, 301, -253, 66, 301, 33, -63, 127, 301, -141,
	-285, 66, 66, -257, 341, -130, 127, 360, 364, -146,
	-156, -147, -130, -212, -211, -298, -299, -296, 146, 313,
	115, 30, 107, 218, 30, 204, 194, -122, 292, 107,
	-213, 331, -204, -63, 359, 92, 30, -204, -169, -170,
	-256, -171, -138, 359, -130, -164, -165, -165, -141, -142,
	-130, -156, 360, 364, -49, -258, 301, 320, -147, -48,
	360, 364, -158, 29, 357, -191, 359, -257, 364, 127,
	344, 301, 360, 304, -209, -144, 231, 275, 242, 263,
	8, 7, 7, 364, -285, -333, -130, 264, -49, -138,
	-141, -138, -253, -201, -281, 359, 351, -202, 253, 254,
	364, -115, 31, 96, 166, -138, 338, -221, -221, 301,
	-343, 287, -228, -221, 186, 196, 307, 114, 314, 98,
	200, 127, 359, -222, -222, -166, -225, 359, -166, 358,
	368, 360, -221, 358, 358, 364, -240, -241, 102, -221,
	-153, 364, -152, -221, -166, -166, 360, 360, 301, 301,
	301, 301, 359, -323, 212, 359, 359, -221, 30, 364,
	360, 127, 360, 360, -193, 220, 360, 10, 11, 350,
	351, 352, 353, 122, 354, 355, 348, 349, 347, 342,
	343, 344, 63, 182, 255, 13, 14, 15, 161, 143,
	-222, -222, -222, -166, 359, 360, -226, -227, 127, 124,
	30, -189, -189, -189, 360, 127, -166, 364, 364, 364,
	360, 360, 360, 7, 360, 364, 360, 338, 338, 360,
	124, 65, 359, 360, -213, -255, -161, 2, -251, -285,
	-213, -244, -251, -251, -183, 320, 204, 165, -251, -246,
	360, -330, 7, -248, -247, 7, -220, -219, 125, 192,
	360, -130, 359, -248, 360, -116, -138, -130, -130, 194,
	-211, 140, -121, 194, -260, -130, 359, 359, 166, 166,
	-130, -130, 140, -130, 140, -130, -130, -117, 241, -63,
	338, 359, -138, 241, 338, -130, -63, 359, -130, 241,
	338, 338, -100, 139, 200, 281, 127, -138, 360, 360,
	364, -131, 146, -131, -63, -164, 5, -63, -138, 107,
	-123, 103, -342, 344, -130, -199, -197, -221, -180, -206,
	248, 204, -162, 325, -130, -180, -160, 364, 127, 344,
	-162, -119, -119, -119, -119, -221, -333, -290, 360, -260,
	357, 358, 7, 7, -103, 333, -290, -333, -282, -282,
	-127, 311, 62, 231, -282, 364, -202, -221, -249, -138,
	365, -221, -221, -222, -222, 127, 359, -221, -232, 26,
	26, 360, -166, 360, 364, -217, -221, 360, -230, 104,
	-221, 297, 360, 327, -153, -153, -153, 5, 185, 137,
	184, -192, 184, -192, -192, 7, -324, -130, 359, 331,
	-152, 360, -278, -260, -221, -226, -221, -278, -260, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, 98, 194,
	200, -222, 364, -166, 360, -227, -226, -221, -221, -260,
	360, 360, 360, -166, -221, -221, -221, 360, 7, 230,
	86, 289, -48, -177, 132, -257, 364, -177, -183, 359,
	-221, -251, 358, 360, 364, -247, 358, 364, 367, 344,
	-248, 359, -156, -246, 301, 301, 107, 194, 322, -300,
	-297, -221, -155, -250, -130, -311, 359, -308, -309, -136,
	359, 359, -114, 101, 267, -196, 107, -119, 107, -119,
	301, -195, 68, -224, -136, -130, -166, 301, -224, -166,
	301, -224, -224, -103, 127, 288, 281, -148, 145, -212,
	359, -131, 359, 359, -151, 359, -130, -124, 171, -342,
	-288, -314, -180, -180, -168, 195, 67, 360, -213, -170,
	-161, -244, 360, -104, 74, -104, 7, 358, 360, -102,
	206, -101, -130, 5, -130, 205, 360, -115, -285, 26,
	26, -221, -232, 360, -221, -221, 360, -221, 358, -221,
	5, -221, 360, 360, 360, 360, -325, -130, -221, 360,
	360, 360, -227, 127, 98, 200, 359, -221, 360, 360,
	364, 360, 360, 360, -130, 92, -130, -138, 360, -229,
	134, 44, -251, -229, -156, -218, 7, -219, -285, 357,
	-247, -156, 360, -130, -130, -211, 107, -301, 68, -302,
	57, 115, 72, 194, 196, 313, 226, 54, 92, 235,
	360, 360, 364, -137, -173, 57, -137, -221, 359, -155,
	-156, 194, 92, 194, 92, 85, 309, -130, -130, -138,
	-130, -130, 359, 360, -138, 360, -130, -291, 298, 143,
	-155, 359, -156, -146, 30, -155, 204, -125, 170, -342,
	-288, -122, -205, 359, 204, -63, -180, 344, 85, 85,
	358, 364, 359, 344, 344, -115, -221, -221, 360, 360,
	-153, -319, 217, 360, -222, 127, 359, -232, 360, -221,
	-320, 332, -221, -166, -320, 360, -248, 7, 360, -211,
	-130, -285, -130, 115, 140, 196, 166, 359, -222, -138,
	-210, -338, 71, 285, -250, -115, -285, -115, 360, -166,
	360, 360, 196, 196, -221, -260, -119, -119, 301, 301,
	-166, 301, 301, -224, 215, 360, -155, 360, 360, -63,
	360, -138, -342, -288, -123, 99, -156, 68, -176, -107,
	359, 359, 359, -101, -102, -290, -290, 360, -153, 44,
	-222, -232, 360, 360, -321, -322, -130, -247, 358, -302,
	-131, 194, -221, -132, 359, -148, 359, -137, -153, 235,
	-118, 57, -130, -130, -153, 359, 359, -138, -210, 360,
	-148, -210, 359, -288, -124, 315, 195, 360, -130, -291,
	-291, 360, -326, 230, 254, -166, 360, 364, 30, 107,
	360, -305, 183, -130, -156, -115, 360, -138, -113, 320,
	-285, 360, -166, -166, 359, -148, -210, -148, -155, -125,
	267, -213, 360, 360, 360, -327, -328, 36, 310, 76,
	-221, -327, -322, -324, 115, -303, -306, -304, 204, 128,
	216, 272, 360, 360, -151, -221, 360, 360, -156, -148,
	360, -169, -103, -103, -328, 223, 123, 253, 223, 123,
	-130, -304, 204, -306, 204, 315, 95, -305, 360, -210,
	-213, 26, -307, 191, 246, 48, 267, -307, -303, -120,
	48, 246, -148, -328, 20, 196, 92,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 62, 0,
	0, 150, 152, 0, 0, 159, 161, 163, 165, -2,
	168, 170, 0, 0, 0, 181, 183, 185, 187, 189,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 651, -2, 0, 286, 288, 297, 299, 301, 303,
	304, 0, 347, 349, 351, 353, 355, 357, 359, 361,
	363, 365, 367, 369, 371, 373, 375, 376, 378, 380,
	382, 0, 572, 574, 576, -2, 64, 65, 66, 67,
	68, 69, 77, 78, 79, 80, 71, 73, 74, 76,
	687, -2, 698, 0, 0, 0, 0, -2, 0, -2,
	-2, -2, 0, 0, 664, 666, 668, 670, -2, 0,
	0, -2, 7, 12, 14, 16, 19, 21, 23, 25,
	27, 29, 31, 33, 35, 37, 39, 42, 48, 50,
	52, 55, 57, 59, 61, 63, 0, 0, 0, 0,
	0, 0, 125, 270, 0, 1258, 1182, 1188, 1189, 1213,
	1214, 1215, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
	1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 151, 153,
	154, 0, 0, 0, 1184, 1258, 160, 162, 164, 166,
	0, 172, 0, 0, 0, 0, 539, 169, 171, 261,
	1318, 263, 265, 0, 0, 0, 0, 175, 176, 177,
	178, 179, 180, 182, 184, 186, 188, 190, 191, 0,
	0, 0, 0, 0, 260, 258, 213, 214, 0, 243,
	244, 245, 246, 247, 249, 217, 219, 220, 222, 224,
	226, 228, 229, 231, 233, 234, 236, 238, 239, 241,
	0, 0, 267, 273, 274, 275, 277, 278, 279, 280,
	281, 282, 283, 0, 131, 0, 460, 256, 254, 0,
	127, 0, 569, 0, 269, 570, 571, 566, 567, 1345,
	595, 287, 289, 298, 300, 302, -2, -2, 1435, -2,
	311, -2, 319, 1441, 0, 322, 323, 326, -2, 209,
	348, 350, 352, 354, 356, 358, 360, 362, 364, 366,
	368, 370, 372, 374, 377, 379, 381, 383, 384, 0,
	0, 0, 388, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 387, 389, 390, 391, 0, 573, 575,
	577, 0, 529, 689, -2, 662, 663, -2, 0, 693,
	693, 693, 0, 0, 663, 661, 0, 290, 0, 292,
	0, 388, 295, 296, 327, 328, 1167, 1168, 892, 0,
	0, 0, 0, 0, 0, 984, 986, 1408, 1435, 0,
	988, 989, 0, 991, 993, 994, 0, 997, 998, 1152,
	1184, 1198, 1199, 1200, 1201, 0, 0, 1204, 0, 1206,
	1207, 1208, 1052, 1008, -2, -2, 1196, 820, 821, 822,
	823, -2, 1449, 1012, 1015, 1018, 1021, 1022, 1025, 1026,
	0, 1392, 1409, 1410, 1431, 1432, 1440, 1444, 1445, 1416,
	1428, 1417, 1404, 1414, 1426, 1264, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1222, 854, 855, 860, 861, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	863, 0, 597, 579, 588, 597, 581, 582, 583, 584,
	585, 586, 587, 590, 0, 679, 1324, 682, 1195, 680,
	665, 667, 0, 669, 0, 0, 673, 695, 694, 728,
	729, 0, 677, 678, 688, 744, 782, 759, 750, 0,
	0, 2, 70, 0, 1416, 782, 72, 0, 1416, 782,
	75, 0, 81, 0, 1416, 1187, 0, 0, 0, 0,
	271, 272, 1192, 1190, 1191, 0, 155, 156, 157, 158,
	0, 0, 1185, 1161, 1159, 1160, 167, 508, 1416, -2,
	531, 508, 535, -2, 686, 1416, 611, 262, 264, 0,
	174, 0, 624, 0, 626, 0, 641, 788, 117, 1416,
	194, 207, 117, 1416, 197, 117, 1416, 200, 1180, 117,
	1416, 203, 204, 1416, 206, 257, 0, 0, -2, 250,
	252, 1223, 1224, 1225, 1226, -2, 1449, 248, 218, 221,
	223, 225, 227, 230, 232, 235, 237, 240, 242, -2,
	0, 0, 0, 459, 0, 0, 0, 568, 0, 594,
	305, 0, 308, 0, 310, 1403, -2, -2, 314, 598,
	602, 603, 604, 0, 0, 0, 0, 0, 0, 0,
	324, 210, 0, 385, 386, 394, 395, 132, 133, 345,
	346, 0, 398, 419, 431, 0, 0, 402, 404, 458,
	406, 0, 0, 408, 0, 410, 0, 412, 0, 414,
	0, 416, 418, 420, 432, 422, 688, 424, 0, 426,
	430, 0, 435, 0, 437, 438, 439, 0, 0, 445,
	0, 0, 392, 393, 117, 786, -2, 0, 657, 707,
	708, 0, 0, 0, 0, 691, 692, 0, 0, 0,
	653, 654, 291, 0, 294, 0, 0, 0, 0, 1087,
	1088, 1089, 1090, 1091, 1092, 1095, 1096, 1093, 1094, 1097,
	1098, 1099, 0, 0, 0, 1100, 1101, 1102, 0, 0,
	1104, 0, 1106, 0, 0, 0, 0, 0, 0, 1166,
	0, 0, 1103, 897, 898, 899, 921, 922, 0, 985,
	1163, 1156, 987, 0, 0, -2, 1108, 0, 0, 990,
	995, 996, 0, 0, 1151, -2, 0, 1203, 0, 889,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1131, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 839, 857, 868, 865, 864, 841, 0, 840,
	838, 0, 842, 0, 0, 0, 0, 0, 578, -2,
	580, 0, 592, 0, 681, 0, 0, 730, 733, 1172,
	1176, 1177, 733, 0, 1169, 0, 0, 0, 0, 779,
	779, 779, 777, 753, 0, 759, 0, 0, 783, 771,
	0, -2, 750, 0, 0, 784, 0, 82, 563, 96,
	0, 563, 563, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 773, 1183, 0, 1157, 1158, 1227, 1228, 1229, 1230,
	1231, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 147, 0, 0, 1178, 1162, 466, 0, 0,
	530, 0, 685, 0, 0, 0, 1416, 538, 1216, 613,
	0, 792, 0, 627, 0, 0, 789, 0, 192, 0,
	115, 116, 0, 195, 0, 198, 0, 0, 201, 0,
	0, 0, 1108, 688, 0, 0, 276, 0, 0, 688,
	0, 1110, 800, 801, 802, 803, 804, 889, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 851, 0, 826, 826, 826, 843, 844, 852,
	853, 858, 859, 870, 871, 873, 875, 869, 869, 869,
	866, 867, 773, 134, 0, 0, 0, 0, -2, 316,
	0, 600, 0, 605, 336, 337, 338, 607, 608, 320,
	339, 340, 341, 342, 343, 344, 0, 525, 0, 527,
	1209, 0, 317, 329, 318, 321, 0, 211, 396, 397,
	399, 400, 401, 405, 0, 455, 407, 409, 411, 413,
	415, 423, 427, 688, 433, 436, 440, 441, 442, 443,
	0, 0, 0, 528, 0, 660, 705, 706, 711, 715,
	716, 719, 722, 723, 713, 892, 674, 675, 676, 699,
	700, 550, 0, 0, 293, 893, 796, 797, 845, 846,
	847, 848, 849, 894, 895, 0, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, -2, -2, -2, 913,
	914, 915, -2, -2, -2, 919, 920, -2, 1105, 1107,
	0, 1166, 0, -2, 0, -2, -2, -2, -2, 933,
	0, 935, 938, 940, 942, 0, 0, 0, 0, 1165,
	952, 1143, 0, 0, 1084, 1085, 1086, 937, 0, 0,
	1164, 1155, 0, 0, -2, 992, 0, 0, 0, 1114,
	1115, 1150, 1146, 0, 999, 698, 0, 0, 0, 0,
	1006, 0, 1212, 876, 877, 878, 879, 880, 881, 890,
	1062, 0, 0, 0, 1013, 1014, 1016, 1017, 1019, 1020,
	1023, 1024, 0, 0, 0, 1030, 0, 1118, -2, -2,
	-2, -2, -2, -2, -2, 0, 1032, 0, 1034, 1108,
	1128, 0, 0, 955, 0, 0, 0, 0, 1435, 0,
	1037, 1108, 1136, 0, 0, 0, 0, 0, 1108, 0,
	1142, 0, 0, 0, 0, 0, 1048, 0, 1050, 0,
	0, 0, 0, 0, 0, 0, 450, 0, 591, 683,
	0, 0, 792, 0, 0, 0, 1175, 792, 0, 1171,
	0, 0, 0, 0, 0, 774, 778, 775, 776, 0,
	0, 759, 771, 741, 0, 0, 0, 748, 749, 770,
	0, 769, 758, -2, 0, 0, 0, 0, 0, 562,
	98, 1416, 0, 119, 0, 0, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	1186, 0, 0, 137, 0, 1193, 0, 0, 0, 0,
	0, 465, 1192, 467, 469, 470, 471, 472, 1217, 0,
	1217, 0, 0, 0, 0, 0, 0, 615, 621, 0,
	710, 0, 639, 629, 0, 0, 0, 639, 643, 644,
	646, 647, 0, 0, 790, 208, 117, 117, 1181, 117,
	117, 205, 259, 0, 215, 251, 0, 0, 0, 253,
	255, 0, 793, 795, 0, 805, 0, 146, 0, 0,
	0, 0, 309, 0, 599, 606, 0, 333, 0, 335,
	526, 1211, 1210, 0, 212, 457, 284, 425, 428, 452,
	453, 454, 787, 0, 717, 0, 0, 714, 720, 721,
	0, 702, 548, 549, 0, 0, 0, -2, -2, 0,
	0, 0, 953, -2, 934, 936, 939, 941, 943, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 1153,
	1156, -2, 1109, 1112, 1113, 0, 0, 1147, 0, 0,
	0, 0, 697, 698, 698, 698, 1005, 0, 0, 0,
	0, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	1029, 0, 1031, 1033, 0, 0, 1035, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 959, 960, 0, 0, 1036, 1134, 1135, 0, 0,
	0, 0, 0, 0, 1042, 0, 1141, 0, 0, 0,
	1046, 1047, 1049, 0, 824, 0, 850, 872, 874, 862,
	0, 451, 688, 1194, 725, 1173, 773, 732, 734, 1174,
	725, 1170, 761, 0, 763, 0, 0, 0, 765, 0,
	754, 0, 756, 771, 746, 0, 0, 739, 0, 738,
	759, 767, 0, 0, 785, 97, 552, 0, 0, 0,
	100, 1416, 108, 0, 480, 0, 0, 0, 0, 0,
	565, 109, 1416, 117, 1416, 117, 110, 83, 563, 84,
	0, 0, 558, 0, 0, 551, 85, 0, 560, 0,
	0, 0, 146, 0, 0, 148, 0, 1179, 474, 507,
	0, 0, 1217, 0, 463, 508, 532, 534, 0, 0,
	617, 621, 0, 620, 686, 639, 709, 791, 622, 639,
	0, 0, 0, 631, 628, 625, 792, 0, 0, 0,
	0, 193, 196, 199, 202, 1109, 266, 0, 0, 1111,
	0, 798, 0, 0, 126, 0, 135, 268, 306, 307,
	312, 331, 332, 334, 330, 0, 0, 0, 701, 550,
	0, 896, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 1144, 0, 1079, 0, 0, 1155, -2, 1116, 1145,
	1149, 0, 1000, 0, 0, 0, 0, 1205, 882, 883,
	884, 885, 886, 887, 888, 0, 1060, 1061, 1065, 0,
	0, 1011, 0, 0, 1117, 1127, 1129, 956, 957, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, -2,
	-2, -2, 974, 975, 976, -2, -2, -2, 0, 0,
	0, 1130, 0, 0, 1082, 1132, 1133, 1138, 1139, 0,
	1039, 1040, 1041, 1140, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 727, 0, 731, 0, 727, 762, 0,
	781, 764, 744, 755, 0, 752, 742, 0, 743, 0,
	771, 0, 0, 751, 0, 0, 0, 0, 118, 478,
	497, 0, 0, 541, 547, 547, 0, 1009, 1010, 0,
	0, 0, 102, 0, 0, 0, 0, 106, 0, 112,
	0, 0, 0, 91, 0, 0, 0, 0, 90, 0,
	0, 88, 89, 124, 0, 0, 149, 461, 0, 468,
	0, 0, 0, 466, 0, 0, 0, 619, 621, 0,
	612, 613, 173, 623, 637, 638, 636, 0, 639, 645,
	642, 648, 0, 0, 128, 0, 0, 799, 806, 144,
	1308, 142, 139, 141, 285, 712, 718, 703, 550, 0,
	0, -2, 0, 946, -2, -2, 1078, 1109, 1154, 1148,
	1202, 698, 1001, 1003, 1004, 891, 1067, 1064, 0, 1051,
	1027, 1028, 1126, 0, 0, 0, 0, 1109, 1081, 1038,
	0, 1044, 1045, 825, 446, 447, 448, 449, 684, 1056,
	0, 0, 735, 1056, 0, 759, 757, 740, 736, 0,
	747, 0, 768, 554, 556, 99, 0, 479, 0, 482,
	0, 0, 0, 0, 488, 489, 0, 0, 0, 0,
	499, 506, 0, 550, 1197, 0, 550, 0, 0, 0,
	0, 0, 114, 0, 0, 564, 0, 117, 117, 553,
	0, 0, 0, 0, 559, 0, 561, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 621, 0,
	614, 615, 0, 0, 0, 630, 640, 0, 0, 0,
	794, 0, 0, 0, 0, 704, -2, -2, 947, 1080,
	0, 698, 0, 1053, -2, 0, 0, 0, 1083, 0,
	671, 0, 726, 724, 672, 780, 771, 0, 766, 101,
	0, 483, 484, 1217, 0, 487, 490, 0, 492, 1219,
	474, 0, 503, 504, 542, 543, 546, 544, 547, 698,
	501, 0, 103, 104, 113, 121, 105, 111, 0, 0,
	698, 0, 0, 772, 0, 506, 0, 496, 474, 464,
	506, 0, 0, 616, 617, 0, 0, 0, 649, 650,
	0, 0, 0, 143, 0, 138, 140, 1002, 1070, 0,
	-2, 0, 982, 1043, 1055, 1057, 0, 745, 737, 481,
	485, 0, 0, 512, 0, 500, 0, 550, 0, 0,
	123, 0, 555, 557, 0, 0, 0, 0, 474, 506,
	462, 474, 0, 618, 619, 0, 633, 792, 635, 0,
	0, 145, 0, 0, 0, 1066, 983, 0, 0, 0,
	491, 517, 0, 0, 0, 545, 1000, 508, 107, 0,
	120, 0, 0, 0, 0, 494, 474, 536, 0, 610,
	0, 634, 146, 146, 1063, 1068, 1071, -2, 1376, 1255,
	0, 1069, 1058, 1059, 0, 493, 513, 514, 0, 509,
	510, 511, 1218, 505, 512, 122, 93, 95, 0, 495,
	506, 792, 129, 130, 0, 1073, 1074, 1075, 1076, 1077,
	486, 515, 0, 516, 0, 0, 0, 517, 477, 474,
	632, 0, 518, 0, 521, 522, 0, 519, 502, 473,
	475, 476, 537, 1072, 520, 523, 524,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 348, 3, 354, 349, 3,
	359, 360, 352, 350, 364, 351, 361, 353, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 368, 363,
	342, 344, 343, 3, 365, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 357, 3, 358, 355, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 366, 347, 367, 345,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 346,
	57685, 356, 57686, 362, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:867
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:879
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "ALTER")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:994
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1043
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1055
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1062
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1071
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1080
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1149
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1172
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1244
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1245
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1249
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1302
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1340
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1409
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1527
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1912
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1936
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1938
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1940
		{
			return unimplemented(sqllex, "set local")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2006
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2011
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			return unimplemented(sqllex, "set from current")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2033
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = Low
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = Normal
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = High
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			return helpWith(sqllex, "SHOW")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.str = "client_encoding"
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2331
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2407
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2418
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2433
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2437
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2441
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2445
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2453
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2459
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2463
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2467
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2473
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = DropDefault
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			return unimplemented(sqllex, "match full")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			return unimplemented(sqllex, "match partial")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			return unimplemented(sqllex, "match simple")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2822
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2828
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2829
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2832
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			return unimplemented(sqllex, "no action")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2844
		{
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			return unimplemented(sqllex, "action set null")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2847
		{
			return unimplemented(sqllex, "action set default")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2948
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = true
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = false
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2979
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2983
		{
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = Ascending
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = Descending
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3023
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3025
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = true
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = false
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3059
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3116
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3121
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3158
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.str = ""
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.str = ""
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3217
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3219
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = ReadOnly
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = ReadWrite
		}
	case 609:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.str = ""
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.str = ""
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.str = ""
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3327
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3351
		{
			return helpWith(sqllex, "INSERT")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3410
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3422
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 640:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3449
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3450
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			return helpWith(sqllex, "SELECT")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3615
		{
			return helpWith(sqllex, "VALUES")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			return helpWith(sqllex, "TABLE")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3662
		{
			return helpWith(sqllex, "SELECT")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3706
		{
			return helpWith(sqllex, "TABLE")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3726
		{
			return unimplemented(sqllex, "cte")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3730
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3738
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = true
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = false
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = false
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = true
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3762
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3809
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3889
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			return helpWith(sqllex, "VALUES")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &From{}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3987
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4005
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4032
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4069
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = nil
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = true
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = false
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.str = astFullJoin
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.str = astLeftJoin
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.str = astRightJoin
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.str = astInnerJoin
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4339
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4353
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4396
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4477
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4486
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = nil
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4551
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4647
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4679
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4719
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = year
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = month
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = day
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = hour
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = minute
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = month
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = hour
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = minute
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = minute
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = nil
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = second
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4814
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4849
		{
			return unimplemented(sqllex, "at tz")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5083
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5256
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5309
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5310
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5334
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5350
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5351
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5355
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5364
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5373
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5383
		{
			return unimplemented(sqllex, "current role")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5392
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5418
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5423
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5432
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5433
		{
			return unimplemented(sqllex, "treat")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5470
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5479
		{
			return unimplemented(sqllex, "within group")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5480
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5515
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.str = ""
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5577
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5578
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5579
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5583
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5589
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5590
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5591
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5592
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5593
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = Any
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = Some
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = All
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = Plus
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = Minus
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = Mult
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = Div
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = Mod
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = Bitand
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = Bitor
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = Pow
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = Bitxor
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = LT
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = GT
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = EQ
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = LE
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = GE
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = NE
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = Like
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = NotLike
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = ILike
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = NotILike
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5958
		{
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6076
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6120
		{
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6156
		{
			return unimplemented(sqllex, "func const")
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6165
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = DNull
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6192
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.str = ""
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
