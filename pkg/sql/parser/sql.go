// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPLAIN = 57444
const EXTRACT = 57445
const EXTRACT_DURATION = 57446
const FALSE = 57447
const FAMILY = 57448
const FETCH = 57449
const FILTER = 57450
const FIRST = 57451
const FLOAT = 57452
const FLOORDIV = 57453
const FOLLOWING = 57454
const FOR = 57455
const FORCE_INDEX = 57456
const FOREIGN = 57457
const FROM = 57458
const FULL = 57459
const GRANT = 57460
const GRANTS = 57461
const GREATEST = 57462
const GROUP = 57463
const GROUPING = 57464
const HAVING = 57465
const HELP = 57466
const HIGH = 57467
const HOUR = 57468
const INCREMENTAL = 57469
const IF = 57470
const IFNULL = 57471
const ILIKE = 57472
const IN = 57473
const INTERLEAVE = 57474
const INDEX = 57475
const INDEXES = 57476
const INITIALLY = 57477
const INNER = 57478
const INSERT = 57479
const INT = 57480
const INT2VECTOR = 57481
const INT8 = 57482
const INT64 = 57483
const INTEGER = 57484
const INTERSECT = 57485
const INTERVAL = 57486
const INTO = 57487
const IS = 57488
const ISOLATION = 57489
const JOIN = 57490
const KEY = 57491
const KEYS = 57492
const LATERAL = 57493
const LC_CTYPE = 57494
const LC_COLLATE = 57495
const LEADING = 57496
const LEAST = 57497
const LEFT = 57498
const LEVEL = 57499
const LIKE = 57500
const LIMIT = 57501
const LOCAL = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const LOW = 57505
const LSHIFT = 57506
const MATCH = 57507
const MINUTE = 57508
const MONTH = 57509
const NAN = 57510
const NAME = 57511
const NAMES = 57512
const NATURAL = 57513
const NEXT = 57514
const NO = 57515
const NO_INDEX_JOIN = 57516
const NORMAL = 57517
const NOT = 57518
const NOTHING = 57519
const NULL = 57520
const NULLIF = 57521
const NULLS = 57522
const NUMERIC = 57523
const OF = 57524
const OFF = 57525
const OFFSET = 57526
const OID = 57527
const ON = 57528
const ONLY = 57529
const OPTIONS = 57530
const OR = 57531
const ORDER = 57532
const ORDINALITY = 57533
const OUT = 57534
const OUTER = 57535
const OVER = 57536
const OVERLAPS = 57537
const OVERLAY = 57538
const PARENT = 57539
const PARTIAL = 57540
const PARTITION = 57541
const PASSWORD = 57542
const PLACING = 57543
const POSITION = 57544
const PRECEDING = 57545
const PRECISION = 57546
const PREPARE = 57547
const PRIMARY = 57548
const PRIORITY = 57549
const RANGE = 57550
const READ = 57551
const REAL = 57552
const RECURSIVE = 57553
const REF = 57554
const REFERENCES = 57555
const REGCLASS = 57556
const REGPROC = 57557
const REGPROCEDURE = 57558
const REGNAMESPACE = 57559
const REGTYPE = 57560
const RENAME = 57561
const REPEATABLE = 57562
const RELEASE = 57563
const RESET = 57564
const RESTORE = 57565
const RESTRICT = 57566
const RETURNING = 57567
const REVOKE = 57568
const RIGHT = 57569
const ROLLBACK = 57570
const ROLLUP = 57571
const ROW = 57572
const ROWS = 57573
const RSHIFT = 57574
const SAVEPOINT = 57575
const SCATTER = 57576
const SEARCH = 57577
const SECOND = 57578
const SELECT = 57579
const SERIAL = 57580
const SERIALIZABLE = 57581
const SESSION = 57582
const SESSION_USER = 57583
const SET = 57584
const SETTING = 57585
const SETTINGS = 57586
const SHOW = 57587
const SIMILAR = 57588
const SIMPLE = 57589
const SMALLINT = 57590
const SMALLSERIAL = 57591
const SNAPSHOT = 57592
const SOME = 57593
const SPLIT = 57594
const SQL = 57595
const START = 57596
const STATUS = 57597
const STDIN = 57598
const STRICT = 57599
const STRING = 57600
const STORING = 57601
const SUBSTRING = 57602
const SYMMETRIC = 57603
const SYSTEM = 57604
const TABLE = 57605
const TABLES = 57606
const TEMPLATE = 57607
const TESTING_RANGES = 57608
const TESTING_RELOCATE = 57609
const TEXT = 57610
const THEN = 57611
const TIME = 57612
const TIMESTAMP = 57613
const TIMESTAMPTZ = 57614
const TO = 57615
const TRAILING = 57616
const TRANSACTION = 57617
const TREAT = 57618
const TRIM = 57619
const TRUE = 57620
const TRUNCATE = 57621
const TYPE = 57622
const UNBOUNDED = 57623
const UNCOMMITTED = 57624
const UNION = 57625
const UNIQUE = 57626
const UNKNOWN = 57627
const UPDATE = 57628
const UPSERT = 57629
const USER = 57630
const USERS = 57631
const USING = 57632
const VALID = 57633
const VALIDATE = 57634
const VALUE = 57635
const VALUES = 57636
const VARCHAR = 57637
const VARIADIC = 57638
const VIEW = 57639
const VARYING = 57640
const WHEN = 57641
const WHERE = 57642
const WINDOW = 57643
const WITH = 57644
const WITHIN = 57645
const WITHOUT = 57646
const YEAR = 57647
const ZONE = 57648
const NOT_LA = 57649
const WITH_LA = 57650
const AS_LA = 57651
const POSTFIXOP = 57652
const UMINUS = 57653

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5473

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	330, 31,
	-2, 429,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 412,
	143, 412,
	159, 412,
	184, 412,
	190, 412,
	283, 412,
	-2, 402,
	-1, 66,
	99, 411,
	143, 411,
	159, 411,
	184, 411,
	190, 411,
	283, 411,
	-2, 405,
	-1, 75,
	1, 31,
	330, 31,
	-2, 429,
	-1, 435,
	1, 200,
	330, 200,
	-2, 995,
	-1, 474,
	159, 439,
	184, 439,
	-2, 408,
	-1, 477,
	159, 438,
	184, 438,
	-2, 406,
	-1, 613,
	159, 438,
	184, 438,
	-2, 409,
	-1, 672,
	327, 928,
	-2, 921,
	-1, 673,
	327, 929,
	-2, 922,
	-1, 679,
	5, 597,
	327, 597,
	-2, 1104,
	-1, 703,
	5, 558,
	-2, 1078,
	-1, 704,
	5, 591,
	327, 591,
	-2, 1080,
	-1, 705,
	5, 566,
	-2, 1081,
	-1, 706,
	5, 565,
	-2, 1082,
	-1, 707,
	5, 591,
	327, 591,
	-2, 1085,
	-1, 708,
	5, 591,
	327, 591,
	-2, 1086,
	-1, 709,
	5, 592,
	-2, 1089,
	-1, 710,
	5, 552,
	-2, 1090,
	-1, 711,
	5, 552,
	-2, 1091,
	-1, 712,
	5, 573,
	-2, 1095,
	-1, 713,
	5, 553,
	-2, 1100,
	-1, 714,
	5, 554,
	-2, 1101,
	-1, 715,
	5, 555,
	-2, 1102,
	-1, 716,
	5, 556,
	-2, 1103,
	-1, 717,
	5, 552,
	-2, 1108,
	-1, 718,
	5, 559,
	-2, 1113,
	-1, 719,
	5, 557,
	-2, 1116,
	-1, 720,
	5, 589,
	327, 589,
	-2, 1118,
	-1, 721,
	5, 593,
	-2, 1121,
	-1, 722,
	5, 595,
	-2, 1122,
	-1, 723,
	5, 588,
	327, 588,
	-2, 1126,
	-1, 994,
	99, 412,
	143, 412,
	159, 412,
	184, 412,
	190, 412,
	283, 412,
	-2, 716,
	-1, 1003,
	327, 905,
	-2, 893,
	-1, 1217,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 632,
	-1, 1218,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 633,
	-1, 1219,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 634,
	-1, 1223,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 638,
	-1, 1224,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 639,
	-1, 1225,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 640,
	-1, 1228,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 645,
	-1, 1234,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 647,
	-1, 1237,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 652,
	-1, 1238,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 653,
	-1, 1239,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 654,
	-1, 1266,
	195, 787,
	-2, 790,
	-1, 1295,
	116, 827,
	327, 928,
	-2, 921,
	-1, 1296,
	116, 828,
	-2, 1074,
	-1, 1297,
	116, 829,
	-2, 994,
	-1, 1298,
	116, 830,
	-2, 963,
	-1, 1299,
	116, 831,
	-2, 978,
	-1, 1300,
	116, 832,
	-2, 993,
	-1, 1301,
	116, 833,
	-2, 1040,
	-1, 1457,
	99, 412,
	143, 412,
	159, 412,
	184, 412,
	190, 412,
	283, 412,
	-2, 488,
	-1, 1461,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 646,
	-1, 1462,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 648,
	-1, 1467,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 649,
	-1, 1485,
	195, 786,
	-2, 789,
	-1, 1674,
	1, 489,
	69, 489,
	99, 489,
	117, 489,
	121, 489,
	123, 489,
	136, 489,
	143, 489,
	148, 489,
	156, 489,
	159, 489,
	171, 489,
	184, 489,
	186, 489,
	190, 489,
	225, 489,
	227, 489,
	283, 489,
	290, 489,
	300, 489,
	301, 489,
	309, 489,
	326, 489,
	328, 489,
	330, 489,
	331, 489,
	-2, 488,
	-1, 1676,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 650,
	-1, 1681,
	146, 0,
	-2, 666,
	-1, 1691,
	195, 788,
	-2, 791,
	-1, 1725,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 693,
	-1, 1726,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 694,
	-1, 1727,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 695,
	-1, 1731,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 699,
	-1, 1732,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 700,
	-1, 1733,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 701,
	-1, 1853,
	146, 0,
	-2, 667,
	-1, 1856,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 670,
	-1, 1857,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 672,
	-1, 1962,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 671,
	-1, 1963,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 673,
	-1, 1970,
	146, 0,
	-2, 702,
	-1, 2026,
	146, 0,
	-2, 703,
	-1, 2091,
	36, 0,
	130, 0,
	158, 0,
	246, 0,
	307, 0,
	-2, 1077,
}

const sqlPrivate = 57344

const sqlLast = 29266

var sqlAct = [...]int{

	88, 2068, 2090, 1631, 1669, 2115, 2032, 2069, 2089, 1897,
	2070, 1096, 912, 1670, 1943, 304, 1702, 1455, 1923, 1156,
	1641, 1830, 1578, 1819, 1844, 1452, 1189, 1181, 1776, 799,
	663, 288, 671, 1762, 485, 65, 1088, 649, 51, 1431,
	499, 1579, 523, 1160, 760, 306, 1824, 1433, 762, 1546,
	918, 1174, 541, 290, 20, 1155, 1647, 1382, 1264, 670,
	999, 1196, 1443, 768, 436, 1496, 914, 1159, 478, 1656,
	1057, 1545, 739, 1376, 1321, 1438, 1048, 643, 65, 736,
	1274, 1251, 1188, 1248, 1080, 1097, 1194, 935, 741, 1112,
	1128, 862, 783, 295, 30, 1148, 1292, 769, 294, 16,
	632, 296, 8, 514, 1121, 990, 633, 483, 542, 772,
	65, 642, 1090, 800, 940, 1163, 533, 1777, 488, 536,
	616, 615, 617, 599, 433, 1191, 535, 66, 600, 20,
	422, 864, 67, 477, 80, 432, 860, 413, 776, 529,
	665, 84, 1029, 486, 598, 31, 620, 425, 1955, 1484,
	482, 1956, 2106, 785, 785, 765, 32, 56, 1033, 482,
	1516, 1517, 785, 1534, 1535, 1536, 1089, 2085, 276, 30,
	1775, 943, 944, 1453, 16, 2080, 1852, 8, 1131, 1324,
	1488, 1093, 58, 1125, 1394, 1489, 2079, 465, 34, 1131,
	64, 1487, 464, 475, 946, 942, 1131, 1393, 474, 496,
	2076, 755, 502, 765, 505, 509, 1516, 1517, 2066, 47,
	666, 1118, 1531, 1131, 490, 2061, 42, 945, 765, 59,
	2010, 1081, 2057, 46, 43, 765, 1126, 2028, 2022, 2004,
	1118, 765, 1775, 2000, 1995, 1964, 765, 1994, 1118, 1953,
	48, 1950, 794, 1441, 1951, 1937, 44, 71, 1775, 1934,
	1932, 1908, 765, 1775, 765, 1907, 1879, 1858, 1775, 1131,
	1131, 1522, 1855, 1081, 1084, 1118, 1127, 1124, 1847, 1441,
	941, 1131, 951, 73, 1738, 1688, 1796, 1516, 1517, 1131,
	1534, 1535, 1536, 1795, 1418, 1084, 1131, 943, 944, 1774,
	545, 1131, 1775, 1851, 1685, 1617, 1537, 1131, 1087, 1612,
	1495, 1046, 1087, 1563, 74, 1561, 1564, 1522, 1131, 1421,
	946, 1268, 69, 1560, 1532, 1180, 1131, 1559, 70, 1485,
	1131, 1420, 1131, 1185, 765, 961, 765, 45, 483, 1531,
	786, 786, 71, 945, 1143, 628, 1129, 68, 543, 786,
	907, 1778, 906, 61, 62, 33, 1135, 854, 49, 1131,
	60, 538, 538, 1130, 1117, 50, 1131, 1118, 73, 71,
	1532, 853, 1086, 1045, 53, 1087, 1044, 55, 793, 765,
	512, 794, 558, 495, 75, 518, 57, 1838, 1522, 648,
	1456, 886, 1533, 579, 2104, 73, 2088, 2075, 951, 74,
	2037, 2023, 1935, 962, 1884, 1880, 522, 69, 1872, 1393,
	627, 63, 1871, 70, 1870, 1123, 71, 539, 1866, 530,
	941, 1865, 1864, 1537, 277, 1810, 74, 1804, 1753, 1748,
	1516, 1517, 1092, 520, 69, 1747, 1746, 1122, 1533, 1696,
	70, 1532, 73, 1674, 1260, 1619, 1646, 789, 784, 1621,
	1568, 1565, 1553, 1423, 1544, 1515, 910, 1512, 1511, 68,
	1516, 1517, 1509, 497, 1501, 1500, 504, 507, 1419, 497,
	1528, 1529, 1530, 74, 1527, 1525, 1526, 1518, 1519, 1520,
	1521, 1523, 1524, 1338, 1289, 956, 954, 955, 947, 948,
	949, 950, 952, 953, 1288, 972, 943, 944, 627, 732,
	626, 917, 673, 673, 1007, 1704, 68, 1454, 1000, 1533,
	68, 673, 2049, 943, 944, 2007, 1993, 1992, 1991, 946,
	1983, 1981, 545, 1518, 1519, 1520, 1521, 1523, 1524, 306,
	545, 1522, 943, 944, 1972, 1959, 946, 1946, 1930, 1894,
	1877, 1261, 945, 606, 766, 609, 731, 1849, 1813, 1801,
	613, 1781, 1680, 614, 1661, 946, 1639, 1637, 1636, 945,
	1634, 1522, 1587, 1586, 567, 673, 1543, 1505, 1803, 568,
	943, 944, 1504, 1481, 1476, 774, 673, 1253, 945, 1409,
	1367, 1365, 545, 545, 561, 563, 1352, 1528, 1529, 1530,
	306, 1527, 1525, 1526, 1518, 1519, 1520, 1521, 1523, 1524,
	1351, 1331, 605, 730, 603, 887, 949, 950, 952, 953,
	1287, 972, 1184, 601, 951, 1034, 945, 1037, 1041, 759,
	1027, 1026, 2087, 475, 518, 1025, 869, 869, 474, 673,
	673, 1024, 916, 1023, 1022, 1021, 673, 623, 624, 788,
	1020, 629, 791, 1019, 521, 1018, 1017, 1352, 673, 673,
	673, 673, 673, 1016, 1015, 1014, 889, 1013, 673, 1012,
	1011, 939, 530, 1004, 764, 993, 68, 961, 673, 726,
	911, 500, 631, 497, 565, 507, 775, 778, 554, 552,
	2059, 1954, 1860, 1839, 1835, 795, 1809, 797, 921, 1808,
	1000, 943, 944, 1403, 880, 879, 483, 873, 870, 851,
	1402, 991, 846, 732, 848, 1997, 847, 909, 1836, 573,
	850, 1516, 1517, 571, 749, 1957, 882, 891, 725, 875,
	895, 896, 897, 898, 899, 881, 1434, 1807, 1395, 894,
	902, 903, 747, 1081, 1456, 962, 1567, 1518, 1519, 1520,
	1521, 1523, 1524, 908, 844, 1566, 923, 748, 925, 924,
	1039, 1460, 572, 591, 1040, 852, 915, 937, 475, 574,
	1009, 475, 475, 931, 1618, 1377, 932, 933, 1825, 1520,
	1521, 1523, 1524, 806, 1125, 1089, 883, 1705, 1492, 595,
	1275, 1030, 1389, 1574, 2040, 1058, 1003, 1999, 2101, 1415,
	1789, 1918, 463, 2102, 462, 885, 1051, 1917, 1134, 732,
	457, 458, 1916, 280, 742, 545, 743, 1915, 953, 1602,
	972, 1601, 1069, 596, 1571, 1072, 1570, 1126, 954, 955,
	947, 948, 949, 950, 952, 953, 1006, 972, 678, 1463,
	1062, 1064, 636, 1050, 838, 1109, 284, 996, 65, 1598,
	1091, 1408, 1091, 65, 1407, 1406, 972, 1061, 1050, 1405,
	884, 281, 1235, 543, 1049, 1042, 497, 1127, 1124, 481,
	1031, 1032, 1113, 1083, 1106, 538, 571, 538, 1054, 472,
	1132, 78, 742, 1078, 743, 1077, 742, 744, 743, 1074,
	1035, 602, 1067, 1800, 972, 511, 1038, 1335, 733, 285,
	1334, 1075, 1206, 753, 1079, 1175, 1998, 306, 467, 1605,
	1250, 1095, 1115, 480, 1250, 572, 1899, 1114, 752, 1607,
	1116, 773, 1147, 1110, 1105, 1379, 497, 777, 777, 905,
	1107, 1104, 1108, 770, 77, 2118, 750, 1129, 1257, 550,
	888, 581, 564, 1255, 2047, 779, 2072, 2123, 1060, 504,
	507, 751, 1589, 1129, 1626, 744, 1178, 1179, 2112, 744,
	482, 785, 673, 592, 1307, 1383, 1770, 2063, 673, 673,
	673, 673, 673, 673, 673, 673, 673, 673, 673, 673,
	673, 673, 673, 673, 673, 673, 673, 673, 673, 673,
	2064, 673, 1275, 673, 673, 673, 673, 1186, 1137, 1771,
	2101, 306, 1136, 1032, 1031, 1035, 1123, 1038, 943, 944,
	283, 282, 673, 1372, 673, 972, 1258, 874, 871, 1416,
	1414, 673, 1369, 593, 1129, 673, 1059, 2073, 757, 286,
	1205, 946, 756, 1524, 673, 673, 673, 673, 673, 673,
	673, 673, 673, 673, 673, 673, 673, 673, 673, 943,
	944, 1153, 1151, 479, 945, 1152, 1154, 752, 1596, 904,
	1986, 2116, 468, 287, 76, 673, 774, 1623, 1187, 549,
	570, 594, 946, 1047, 2111, 750, 2074, 1197, 1204, 1473,
	1363, 1272, 1387, 473, 740, 745, 1139, 469, 1028, 1766,
	751, 1767, 728, 1471, 1170, 945, 470, 1141, 79, 1337,
	1590, 960, 1968, 569, 1931, 545, 988, 1624, 1900, 951,
	673, 1232, 2117, 411, 1503, 1262, 1142, 1345, 1657, 1769,
	1259, 1383, 1673, 482, 2124, 1606, 1772, 1140, 2071, 2100,
	2119, 2098, 1283, 1302, 1043, 1818, 1172, 584, 786, 1465,
	559, 557, 1364, 1249, 1339, 1366, 497, 619, 1375, 1734,
	951, 483, 673, 745, 507, 1340, 1468, 745, 497, 414,
	1362, 618, 961, 570, 545, 2110, 1469, 1256, 1385, 1875,
	1474, 2129, 727, 1391, 806, 806, 675, 1129, 1910, 1100,
	419, 1909, 1892, 1788, 507, 415, 619, 507, 1978, 1349,
	1787, 1573, 1348, 1265, 1785, 1344, 1173, 1768, 922, 913,
	1269, 673, 1378, 961, 1277, 1230, 1233, 1845, 869, 416,
	1622, 2033, 618, 901, 855, 1294, 1294, 1305, 1397, 1316,
	1398, 1399, 1388, 1642, 1820, 1328, 1329, 1330, 418, 1893,
	962, 1396, 832, 1229, 1735, 1422, 1354, 1424, 1353, 65,
	1736, 1425, 1459, 1833, 1652, 1428, 1651, 569, 1411, 1412,
	673, 673, 1401, 1426, 483, 1417, 673, 1400, 1113, 528,
	1876, 527, 480, 2128, 610, 1632, 1470, 1846, 1811, 673,
	673, 962, 1374, 1472, 673, 673, 1648, 1439, 1413, 1286,
	1786, 831, 673, 1971, 1784, 1890, 806, 859, 1436, 673,
	1874, 1547, 1349, 1440, 1437, 1548, 673, 1442, 1115, 673,
	673, 673, 1458, 1114, 1150, 507, 1116, 1891, 673, 1679,
	497, 1604, 483, 1510, 955, 947, 948, 949, 950, 952,
	953, 1231, 972, 1475, 1380, 857, 1133, 1085, 417, 1073,
	673, 673, 673, 673, 1070, 1466, 1464, 858, 597, 673,
	673, 673, 1192, 590, 673, 1446, 589, 658, 588, 806,
	587, 586, 1480, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 585, 972, 1449, 582, 1494, 526, 519, 1010,
	893, 483, 673, 673, 1491, 1285, 1444, 420, 2067, 2030,
	85, 85, 278, 1759, 1447, 1594, 673, 1450, 673, 806,
	1592, 805, 1572, 405, 406, 407, 1430, 1176, 424, 1445,
	1168, 437, 1111, 1585, 673, 1584, 792, 790, 787, 424,
	437, 782, 758, 1550, 1551, 1552, 673, 489, 489, 754,
	746, 278, 1693, 1432, 278, 278, 508, 278, 1925, 2102,
	85, 515, 1583, 1569, 576, 525, 877, 81, 621, 493,
	1050, 1576, 1050, 524, 1988, 1927, 1065, 1341, 1063, 1613,
	1066, 1182, 1611, 1479, 545, 1448, 1778, 1516, 1517, 1638,
	1597, 1482, 930, 580, 1610, 2025, 1649, 1603, 625, 1071,
	1068, 1593, 2011, 1595, 306, 673, 1816, 410, 1371, 1498,
	1499, 673, 1451, 1171, 673, 673, 673, 1381, 1650, 1665,
	1664, 1653, 773, 1362, 1635, 1616, 673, 1615, 1644, 1614,
	1643, 773, 673, 1662, 1608, 673, 65, 622, 494, 1633,
	1183, 497, 1542, 673, 3, 577, 673, 1625, 1627, 1628,
	513, 516, 1645, 1555, 301, 25, 1682, 421, 1654, 517,
	1167, 673, 300, 24, 456, 673, 1094, 1658, 1659, 673,
	673, 673, 673, 673, 673, 673, 673, 673, 673, 673,
	673, 673, 673, 673, 673, 673, 673, 673, 1522, 673,
	938, 849, 798, 1689, 673, 1599, 1120, 1600, 673, 673,
	1692, 414, 1429, 299, 23, 673, 2126, 673, 673, 673,
	297, 22, 2127, 1446, 1516, 1517, 1698, 1699, 1700, 1708,
	501, 1706, 419, 459, 460, 1192, 2060, 415, 1713, 2014,
	25, 1842, 1449, 673, 1754, 1711, 1862, 673, 24, 943,
	944, 1532, 1145, 1144, 1655, 1741, 1629, 1620, 298, 11,
	1562, 416, 1447, 832, 832, 545, 1404, 1783, 1336, 1782,
	1779, 278, 531, 278, 437, 437, 1758, 1585, 1742, 1584,
	418, 1197, 1709, 1333, 1332, 834, 1755, 302, 10, 23,
	1197, 1714, 292, 9, 1668, 673, 22, 291, 7, 1282,
	673, 293, 4, 1146, 545, 997, 1583, 2046, 1924, 673,
	673, 1701, 831, 831, 1427, 1007, 1814, 1812, 1005, 1533,
	466, 1686, 1817, 1745, 545, 1585, 1805, 1584, 1799, 1841,
	1585, 1806, 1584, 1448, 11, 1898, 412, 892, 1828, 1829,
	673, 583, 1834, 1837, 673, 673, 1660, 806, 1822, 673,
	1821, 2062, 1850, 1815, 1583, 1867, 673, 1823, 673, 1583,
	1502, 1942, 483, 10, 1967, 833, 673, 1284, 9, 802,
	1854, 1008, 543, 7, 41, 832, 1840, 4, 806, 806,
	417, 1581, 652, 1739, 1760, 1575, 1162, 806, 806, 1161,
	309, 878, 674, 863, 1749, 872, 555, 1293, 1198, 673,
	729, 1527, 1525, 1526, 1518, 1519, 1520, 1521, 1523, 1524,
	676, 560, 803, 677, 437, 437, 804, 1036, 664, 801,
	806, 1873, 805, 805, 831, 1098, 1254, 1273, 1490, 420,
	1001, 644, 673, 1100, 1192, 656, 673, 655, 832, 1270,
	551, 1843, 673, 54, 566, 431, 1386, 1802, 673, 1177,
	926, 424, 1591, 471, 278, 1513, 437, 608, 437, 553,
	611, 673, 1885, 1886, 1902, 1314, 1585, 1904, 1584, 1306,
	1303, 604, 735, 989, 673, 489, 1099, 1901, 832, 578,
	774, 1192, 545, 1926, 1192, 1392, 278, 831, 1888, 1827,
	1119, 1920, 630, 673, 934, 1583, 1933, 492, 1919, 491,
	85, 1308, 1157, 1903, 1585, 575, 1584, 856, 1928, 278,
	1138, 1945, 673, 673, 278, 278, 278, 1952, 780, 982,
	1948, 1949, 979, 1941, 1961, 1958, 1940, 831, 1939, 1960,
	1936, 461, 1980, 1583, 805, 673, 1169, 278, 278, 1347,
	2122, 1987, 673, 1913, 1914, 85, 1588, 85, 2039, 72,
	1996, 806, 437, 1922, 1373, 673, 29, 26, 21, 19,
	18, 1982, 28, 1912, 17, 27, 15, 1973, 14, 437,
	437, 13, 85, 437, 437, 437, 437, 437, 900, 12,
	40, 1976, 39, 437, 437, 38, 37, 36, 35, 6,
	424, 673, 1966, 5, 1984, 2, 1, 805, 920, 2005,
	545, 1977, 2003, 0, 303, 0, 0, 2006, 0, 0,
	0, 0, 0, 0, 0, 0, 489, 2015, 306, 515,
	0, 1906, 2009, 2020, 0, 0, 2012, 2013, 0, 483,
	0, 0, 673, 2018, 0, 1985, 1792, 805, 0, 2021,
	2017, 0, 1798, 0, 2008, 2016, 0, 0, 65, 64,
	0, 0, 673, 673, 673, 0, 0, 0, 943, 944,
	806, 0, 2027, 2035, 0, 0, 0, 2050, 673, 0,
	2052, 0, 2036, 2045, 2051, 42, 834, 834, 0, 0,
	0, 946, 0, 43, 0, 2055, 673, 2058, 2056, 0,
	2053, 1192, 1192, 2054, 0, 1192, 2024, 2048, 1585, 0,
	1584, 673, 0, 0, 945, 44, 0, 0, 0, 0,
	0, 2077, 845, 2041, 0, 2084, 0, 0, 0, 2082,
	0, 0, 278, 0, 673, 673, 0, 1583, 0, 2083,
	1055, 1308, 1308, 2095, 278, 0, 0, 2086, 2099, 0,
	2097, 0, 278, 1076, 2103, 0, 278, 0, 806, 0,
	0, 2108, 673, 1082, 2109, 2107, 833, 833, 0, 951,
	802, 802, 0, 0, 0, 2121, 0, 278, 2120, 1102,
	1103, 2125, 278, 2081, 0, 278, 0, 437, 437, 2105,
	437, 0, 0, 0, 0, 0, 0, 673, 834, 2130,
	0, 0, 1308, 1308, 1308, 0, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 1517, 0, 0, 0,
	0, 0, 1896, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 55, 832, 832, 0,
	0, 2042, 2043, 2044, 0, 0, 832, 832, 0, 0,
	0, 0, 0, 806, 73, 831, 0, 0, 0, 0,
	0, 834, 1246, 1477, 1478, 0, 653, 52, 1938, 0,
	0, 0, 0, 0, 0, 2065, 1244, 0, 833, 832,
	0, 0, 802, 1192, 0, 74, 831, 831, 303, 0,
	0, 1149, 303, 69, 0, 831, 831, 0, 0, 70,
	0, 834, 278, 278, 0, 0, 0, 0, 278, 1158,
	52, 0, 0, 0, 0, 515, 1522, 0, 68, 0,
	0, 0, 0, 0, 1539, 1540, 1541, 0, 831, 0,
	0, 0, 476, 64, 0, 484, 0, 64, 89, 1240,
	278, 833, 52, 437, 0, 802, 0, 1241, 0, 1242,
	0, 0, 0, 1247, 0, 724, 0, 1308, 1308, 42,
	0, 0, 0, 42, 0, 805, 0, 43, 0, 1532,
	0, 43, 0, 0, 0, 947, 948, 949, 950, 952,
	953, 833, 972, 307, 0, 802, 0, 0, 0, 44,
	0, 0, 0, 44, 0, 0, 805, 805, 0, 0,
	308, 0, 0, 0, 0, 805, 805, 943, 944, 0,
	832, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
	946, 1308, 0, 0, 0, 0, 2038, 1533, 805, 0,
	0, 0, 0, 0, 0, 278, 1342, 1343, 0, 1243,
	0, 1055, 0, 945, 1350, 0, 1245, 0, 0, 831,
	1355, 1356, 1358, 1360, 1361, 0, 0, 0, 0, 0,
	0, 0, 1368, 0, 0, 1370, 278, 0, 0, 1677,
	1678, 0, 0, 0, 0, 278, 0, 0, 0, 0,
	278, 0, 1390, 0, 0, 0, 0, 1100, 0, 278,
	1516, 1517, 71, 1534, 1535, 1536, 71, 0, 951, 278,
	55, 0, 0, 0, 55, 0, 1684, 0, 0, 832,
	1525, 1526, 1518, 1519, 1520, 1521, 1523, 1524, 73, 0,
	1149, 1149, 73, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1531, 1737, 0, 0, 484, 0, 0, 74,
	0, 961, 920, 74, 920, 0, 437, 69, 831, 805,
	278, 69, 0, 70, 1435, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1663, 278, 0, 0, 289, 0, 0, 0,
	0, 1522, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 634, 634, 0, 0, 0, 834,
	0, 0, 0, 737, 0, 0, 0, 0, 546, 962,
	0, 0, 0, 0, 0, 0, 1537, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 0, 0, 0, 0,
	834, 834, 0, 0, 1532, 0, 831, 0, 0, 834,
	834, 0, 0, 0, 1308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1770, 0, 0, 1763, 805, 0,
	0, 0, 0, 0, 0, 1761, 0, 0, 0, 1765,
	0, 0, 834, 0, 0, 0, 0, 1516, 1517, 833,
	0, 0, 832, 802, 0, 0, 0, 1771, 0, 0,
	0, 0, 0, 0, 947, 948, 949, 950, 952, 953,
	0, 972, 1533, 0, 0, 0, 0, 1764, 0, 0,
	833, 833, 0, 0, 802, 802, 0, 0, 0, 833,
	833, 927, 929, 802, 802, 0, 1442, 0, 936, 1531,
	1580, 831, 476, 0, 0, 0, 0, 0, 0, 0,
	983, 984, 985, 986, 987, 0, 805, 1308, 0, 0,
	995, 0, 833, 0, 0, 0, 802, 0, 0, 0,
	1002, 0, 0, 0, 0, 0, 1895, 0, 0, 0,
	0, 278, 278, 0, 1446, 0, 0, 1766, 1522, 1767,
	1528, 1529, 1530, 0, 1527, 1525, 1526, 1518, 1519, 1520,
	1521, 1523, 1524, 1449, 0, 0, 1630, 0, 0, 1055,
	0, 920, 0, 834, 0, 1444, 0, 1769, 1640, 0,
	0, 0, 0, 1447, 1772, 0, 0, 0, 0, 278,
	0, 0, 278, 0, 0, 0, 0, 0, 1445, 0,
	546, 1532, 0, 1672, 0, 0, 0, 307, 546, 0,
	0, 805, 0, 1832, 1308, 0, 0, 547, 0, 0,
	0, 0, 0, 0, 308, 547, 0, 1516, 1517, 0,
	1534, 1535, 1536, 0, 0, 0, 0, 476, 0, 1970,
	476, 476, 0, 1683, 0, 0, 0, 0, 0, 0,
	0, 1703, 0, 833, 1448, 1768, 0, 802, 0, 0,
	546, 546, 992, 0, 994, 0, 0, 0, 307, 1533,
	0, 998, 0, 0, 0, 0, 0, 547, 547, 1531,
	0, 0, 834, 0, 0, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1831, 1756, 1757,
	1055, 0, 0, 0, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 1580, 515, 2026, 0, 0, 0,
	1790, 0, 1791, 0, 278, 1793, 1794, 0, 0, 1797,
	278, 1527, 1525, 1526, 1518, 1519, 1520, 1521, 1523, 1524,
	0, 0, 833, 1537, 0, 52, 802, 0, 52, 0,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 1580, 0, 515, 1158, 0, 1580, 0, 0,
	0, 0, 0, 52, 0, 52, 0, 0, 0, 278,
	278, 0, 0, 278, 0, 0, 0, 0, 0, 0,
	52, 0, 1672, 0, 634, 52, 0, 0, 0, 1848,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 0, 1234, 0, 1236, 1237, 1238, 1239, 1533,
	833, 0, 1868, 0, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1263, 834, 0, 0, 0, 0,
	0, 1516, 1517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 546, 0, 0, 1290, 1291, 0, 0,
	1304, 0, 1315, 1317, 1322, 1325, 1326, 1327, 0, 0,
	547, 0, 0, 0, 0, 0, 0, 1055, 0, 1887,
	0, 437, 1889, 0, 0, 0, 0, 737, 0, 0,
	278, 0, 0, 1580, 0, 0, 437, 1528, 1529, 1530,
	0, 1527, 1525, 1526, 1518, 1519, 1520, 1521, 1523, 1524,
	0, 0, 0, 0, 0, 833, 0, 0, 1921, 802,
	0, 515, 0, 0, 0, 0, 0, 0, 0, 1193,
	0, 1580, 1384, 0, 0, 0, 278, 438, 0, 0,
	0, 0, 1522, 1944, 0, 307, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 439, 0, 0, 0, 0,
	0, 0, 308, 0, 0, 1252, 0, 515, 1672, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 1516,
	1517, 0, 1534, 1535, 1536, 0, 0, 440, 0, 0,
	0, 0, 442, 0, 0, 1532, 0, 447, 448, 0,
	0, 453, 0, 0, 0, 0, 0, 0, 920, 0,
	0, 0, 0, 441, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 1989, 1990, 0, 943, 944, 0, 307,
	0, 0, 973, 974, 975, 2001, 0, 0, 0, 2002,
	0, 0, 444, 0, 0, 52, 308, 0, 52, 946,
	0, 0, 977, 1533, 515, 0, 445, 446, 0, 0,
	1672, 0, 1461, 1462, 0, 0, 1672, 515, 1467, 484,
	1522, 0, 945, 449, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2034,
	1538, 515, 0, 0, 278, 0, 437, 0, 0, 0,
	0, 1486, 0, 0, 0, 1537, 0, 0, 1493, 0,
	0, 1497, 0, 0, 0, 1580, 0, 0, 1944, 0,
	1506, 1672, 0, 1532, 0, 0, 0, 951, 0, 0,
	0, 1516, 1517, 546, 1534, 1535, 1536, 1526, 1518, 1519,
	1520, 1521, 1523, 1524, 52, 995, 970, 978, 52, 0,
	547, 1322, 1322, 1322, 0, 278, 0, 515, 0, 0,
	0, 52, 943, 944, 0, 963, 964, 965, 973, 974,
	975, 0, 1457, 0, 968, 2096, 0, 0, 966, 0,
	961, 0, 0, 1531, 1577, 946, 0, 450, 977, 455,
	0, 1533, 546, 451, 1672, 0, 0, 0, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 945, 547,
	1252, 0, 454, 0, 960, 0, 634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	994, 0, 1522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 951, 0, 0, 0, 1537, 0, 1528,
	1529, 1530, 0, 1527, 1525, 1526, 1518, 1519, 1520, 1521,
	1523, 1524, 970, 978, 0, 1532, 0, 0, 0, 994,
	0, 0, 0, 1675, 0, 0, 1676, 0, 976, 0,
	1516, 1517, 0, 1534, 1535, 1536, 0, 0, 1681, 0,
	968, 0, 0, 0, 0, 0, 961, 1690, 0, 0,
	0, 0, 0, 969, 0, 1694, 0, 0, 1410, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	972, 967, 0, 1710, 0, 0, 0, 1712, 0, 0,
	0, 0, 1531, 1533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1193, 0, 0, 0, 0, 0, 0, 0, 0,
	1743, 1744, 0, 0, 962, 0, 0, 0, 0, 1750,
	1751, 1752, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1780, 0, 0, 1193, 0,
	0, 1193, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 1528, 1529, 1530, 0, 1527, 1525, 1526, 1518, 1519,
	1520, 1521, 1523, 1524, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1532, 0, 0, 0, 0, 969,
	0, 0, 957, 958, 959, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 972, 0, 0, 0,
	0, 1826, 546, 1881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1853, 0, 0, 0, 1856, 1857, 0, 308,
	0, 1859, 1533, 0, 0, 0, 0, 0, 1861, 0,
	1863, 0, 0, 0, 0, 0, 0, 0, 1869, 0,
	943, 944, 0, 963, 964, 965, 973, 974, 975, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 977, 0, 0, 0,
	0, 1878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 52,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 0,
	1528, 1529, 1530, 0, 1527, 1525, 1526, 1518, 1519, 1520,
	1521, 1523, 1524, 0, 0, 0, 0, 0, 0, 0,
	1911, 0, 0, 0, 0, 0, 0, 0, 1193, 1193,
	0, 0, 1193, 0, 0, 0, 0, 0, 0, 0,
	484, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 0,
	970, 978, 0, 0, 0, 1947, 0, 0, 0, 0,
	547, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 1962, 1963, 0, 0, 968, 0,
	0, 0, 546, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 546, 0, 1975, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 1979, 0, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 1929, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	957, 958, 959, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 972, 0, 0, 0, 0, 0,
	0, 1558, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 0, 0, 2078, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 2094, 2094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2094, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 307, 0, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 90, 91, 324, 92, 325, 326,
	327, 328, 225, 329, 330, 331, 332, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 333, 97, 232,
	233, 98, 334, 335, 234, 235, 236, 336, 99, 237,
	337, 310, 338, 100, 101, 102, 0, 103, 339, 104,
	105, 106, 340, 311, 107, 108, 341, 342, 343, 344,
	345, 346, 109, 110, 279, 111, 238, 112, 239, 240,
	347, 113, 348, 114, 349, 350, 351, 115, 116, 352,
	117, 353, 0, 354, 241, 118, 119, 242, 243, 355,
	356, 357, 120, 121, 244, 0, 122, 358, 123, 359,
	360, 312, 361, 124, 245, 362, 246, 363, 125, 126,
	127, 128, 247, 248, 314, 364, 132, 365, 129, 366,
	313, 130, 249, 131, 250, 251, 252, 367, 253, 368,
	315, 133, 316, 134, 135, 369, 137, 136, 370, 254,
	317, 138, 318, 371, 139, 372, 373, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	374, 375, 376, 256, 150, 257, 151, 152, 377, 153,
	378, 379, 154, 380, 381, 155, 258, 320, 156, 321,
	259, 157, 158, 159, 160, 382, 260, 161, 261, 162,
	383, 163, 164, 165, 262, 166, 167, 384, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 385,
	179, 322, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 386, 264, 190, 191, 387, 192, 183, 184, 193,
	323, 194, 265, 266, 195, 388, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 389, 202, 390, 203, 204,
	205, 206, 207, 391, 269, 270, 271, 392, 393, 208,
	272, 273, 394, 209, 210, 211, 212, 395, 396, 213,
	214, 215, 397, 216, 398, 217, 218, 219, 274, 275,
	399, 400, 220, 401, 402, 403, 404, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 1666,
	0, 0, 0, 0, 0, 0, 0, 1667, 90, 91,
	324, 92, 325, 326, 327, 328, 225, 329, 330, 331,
	332, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 333, 97, 232, 233, 98, 334, 335, 234, 235,
	236, 336, 99, 237, 337, 310, 338, 100, 101, 102,
	0, 103, 339, 104, 105, 106, 340, 311, 107, 108,
	341, 342, 343, 344, 345, 346, 109, 110, 279, 111,
	238, 112, 239, 240, 347, 113, 348, 114, 349, 350,
	351, 115, 116, 352, 117, 353, 0, 354, 241, 118,
	119, 242, 243, 355, 356, 357, 120, 121, 244, 0,
	122, 358, 123, 359, 360, 312, 361, 124, 245, 362,
	246, 363, 125, 126, 127, 128, 247, 248, 314, 364,
	132, 365, 129, 366, 313, 130, 249, 131, 250, 251,
	252, 367, 253, 368, 315, 133, 316, 134, 135, 369,
	137, 136, 370, 254, 317, 138, 318, 371, 139, 372,
	373, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 374, 375, 376, 256, 150, 257,
	151, 152, 377, 153, 378, 379, 154, 380, 381, 155,
	258, 320, 156, 321, 259, 157, 158, 159, 160, 382,
	260, 161, 261, 162, 383, 163, 164, 165, 262, 166,
	167, 384, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 385, 179, 322, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 386, 264, 190, 191, 387,
	192, 183, 184, 193, 323, 194, 265, 266, 195, 388,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 389,
	202, 390, 203, 204, 205, 206, 207, 391, 269, 270,
	271, 392, 393, 208, 272, 273, 394, 209, 210, 211,
	212, 395, 396, 213, 214, 215, 397, 216, 398, 217,
	218, 219, 274, 275, 399, 400, 220, 401, 402, 403,
	404, 221, 222, 223, 224, 0, 0, 0, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2019, 90, 91, 324, 92, 325, 326,
	327, 328, 225, 329, 330, 331, 332, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 333, 97, 232,
	233, 98, 334, 335, 234, 235, 236, 336, 99, 237,
	337, 310, 338, 100, 101, 102, 0, 103, 339, 104,
	105, 106, 340, 311, 107, 108, 341, 342, 343, 344,
	345, 346, 109, 110, 279, 111, 238, 112, 239, 240,
	347, 113, 348, 114, 349, 350, 351, 115, 116, 352,
	117, 353, 0, 354, 241, 118, 119, 242, 243, 355,
	356, 357, 120, 121, 244, 0, 122, 358, 123, 359,
	360, 312, 361, 124, 245, 362, 246, 363, 125, 126,
	127, 128, 247, 248, 314, 364, 132, 365, 129, 366,
	313, 130, 249, 131, 250, 251, 252, 367, 253, 368,
	315, 133, 316, 134, 135, 369, 137, 136, 370, 254,
	317, 138, 318, 371, 139, 372, 373, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	374, 375, 376, 256, 150, 257, 151, 152, 377, 153,
	378, 379, 154, 380, 381, 155, 258, 320, 156, 321,
	259, 157, 158, 159, 160, 382, 260, 161, 261, 162,
	383, 163, 164, 165, 262, 166, 167, 384, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 385,
	179, 322, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 386, 264, 190, 191, 387, 192, 183, 184, 193,
	323, 194, 265, 266, 195, 388, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 389, 202, 390, 203, 204,
	205, 206, 207, 391, 269, 270, 271, 392, 393, 208,
	272, 273, 394, 209, 210, 211, 212, 395, 396, 213,
	214, 215, 397, 216, 398, 217, 218, 219, 274, 275,
	399, 400, 220, 401, 402, 403, 404, 221, 222, 223,
	224, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 767, 0, 0, 0, 90, 91, 324,
	92, 325, 326, 327, 328, 225, 329, 330, 331, 332,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	333, 97, 232, 233, 98, 334, 335, 234, 235, 236,
	336, 99, 237, 337, 310, 338, 100, 101, 102, 0,
	103, 339, 104, 105, 106, 340, 311, 107, 108, 341,
	342, 343, 344, 345, 346, 109, 110, 279, 111, 238,
	112, 239, 240, 347, 113, 348, 114, 349, 350, 351,
	115, 116, 352, 117, 353, 0, 354, 241, 118, 119,
	242, 243, 355, 356, 357, 120, 121, 244, 0, 122,
	358, 123, 359, 360, 312, 361, 124, 245, 362, 246,
	363, 125, 126, 127, 128, 247, 248, 314, 364, 132,
	365, 129, 366, 313, 130, 249, 131, 250, 251, 252,
	367, 253, 368, 315, 133, 316, 134, 135, 369, 137,
	136, 370, 254, 317, 138, 318, 371, 139, 372, 373,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 374, 375, 376, 256, 150, 257, 151,
	152, 377, 153, 378, 379, 154, 380, 381, 155, 258,
	320, 156, 321, 259, 157, 158, 159, 160, 382, 260,
	161, 261, 162, 383, 163, 164, 165, 262, 166, 167,
	384, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 385, 179, 322, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 386, 264, 190, 191, 387, 192,
	183, 184, 193, 323, 194, 265, 266, 195, 388, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 389, 202,
	390, 203, 204, 205, 206, 207, 391, 269, 270, 271,
	392, 393, 208, 272, 273, 394, 209, 210, 211, 212,
	395, 396, 213, 214, 215, 397, 216, 398, 217, 218,
	219, 274, 275, 399, 400, 220, 401, 402, 403, 404,
	221, 222, 223, 224, 672, 661, 662, 659, 660, 651,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 688, 654,
	0, 0, 0, 93, 94, 95, 226, 703, 228, 704,
	96, 705, 706, 0, 97, 232, 233, 98, 657, 687,
	707, 708, 236, 0, 99, 699, 0, 680, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 681, 683, 0, 682, 684, 109, 110,
	279, 111, 709, 112, 710, 711, 738, 113, 0, 114,
	0, 0, 0, 702, 116, 0, 117, 0, 0, 0,
	645, 118, 119, 689, 690, 668, 0, 0, 120, 121,
	712, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	700, 0, 246, 0, 125, 126, 127, 128, 696, 698,
	314, 0, 132, 0, 129, 0, 313, 130, 713, 131,
	714, 715, 716, 0, 679, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 701, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 640, 0, 669, 697,
	150, 717, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 691, 157, 158, 159,
	160, 0, 692, 161, 261, 162, 0, 163, 164, 165,
	718, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	646, 182, 0, 186, 187, 188, 189, 71, 264, 190,
	191, 685, 192, 183, 184, 193, 323, 194, 719, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 720, 199,
	693, 0, 202, 73, 203, 204, 205, 206, 207, 0,
	269, 721, 722, 0, 0, 208, 694, 695, 667, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 686, 216,
	0, 217, 218, 219, 548, 723, 0, 0, 220, 0,
	0, 0, 69, 221, 222, 223, 224, 641, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 637, 638, 0,
	0, 0, 0, 0, 639, 0, 0, 647, 0, 0,
	0, 0, 650, 672, 661, 662, 659, 660, 651, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 1279, 92, 0, 0, 0, 0, 688, 654, 0,
	0, 0, 93, 94, 95, 226, 703, 228, 704, 96,
	705, 706, 0, 97, 232, 233, 98, 657, 687, 707,
	708, 236, 0, 99, 699, 0, 680, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	108, 0, 681, 683, 0, 682, 684, 109, 110, 279,
	111, 709, 112, 710, 711, 0, 113, 0, 114, 0,
	1280, 0, 702, 116, 0, 117, 0, 0, 0, 645,
	118, 119, 689, 690, 668, 0, 0, 120, 121, 712,
	0, 122, 0, 123, 0, 0, 312, 0, 124, 700,
	0, 246, 0, 125, 126, 127, 128, 696, 698, 314,
	0, 132, 0, 129, 0, 313, 130, 713, 131, 714,
	715, 716, 0, 679, 0, 315, 133, 316, 134, 135,
	0, 137, 136, 0, 701, 317, 138, 318, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 640, 0, 669, 697, 150,
	717, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 691, 157, 158, 159, 160,
	0, 692, 161, 261, 162, 0, 163, 164, 165, 718,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 646,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	685, 192, 183, 184, 193, 323, 194, 719, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 720, 199, 693,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	721, 722, 0, 0, 208, 694, 695, 667, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 686, 216, 0,
	217, 218, 219, 274, 723, 1278, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 641, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 637, 638, 1281, 0,
	0, 0, 0, 639, 0, 0, 647, 1276, 0, 0,
	0, 650, 672, 661, 662, 659, 660, 651, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 688, 654, 0, 0,
	0, 93, 94, 95, 226, 703, 228, 704, 96, 705,
	706, 0, 97, 232, 233, 98, 657, 687, 707, 708,
	236, 0, 99, 699, 0, 680, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 681, 683, 0, 682, 684, 109, 110, 279, 111,
	709, 112, 710, 711, 0, 113, 0, 114, 0, 0,
	0, 702, 116, 0, 117, 0, 0, 0, 645, 118,
	119, 689, 690, 668, 0, 0, 120, 121, 712, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 700, 0,
	246, 0, 125, 126, 127, 128, 696, 698, 314, 0,
	132, 0, 129, 0, 313, 130, 713, 131, 714, 715,
	716, 0, 679, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 701, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 640, 0, 669, 697, 150, 717,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 691, 157, 158, 159, 160, 0,
	692, 161, 261, 162, 0, 163, 164, 165, 718, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 646, 182,
	0, 186, 187, 188, 189, 71, 264, 190, 191, 685,
	192, 183, 184, 193, 323, 194, 719, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 720, 199, 693, 0,
	202, 73, 203, 204, 205, 206, 207, 0, 269, 721,
	722, 0, 0, 208, 694, 695, 667, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 686, 216, 0, 217,
	218, 219, 548, 723, 0, 0, 220, 0, 0, 0,
	69, 221, 222, 223, 224, 641, 70, 672, 661, 662,
	659, 660, 651, 0, 0, 637, 638, 0, 0, 0,
	0, 0, 639, 90, 91, 647, 92, 0, 0, 0,
	650, 688, 654, 0, 0, 0, 93, 94, 95, 226,
	703, 228, 704, 96, 705, 706, 1318, 97, 232, 233,
	98, 657, 687, 707, 708, 236, 0, 99, 699, 0,
	680, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 681, 683, 0, 682,
	684, 109, 110, 279, 111, 709, 112, 710, 711, 0,
	113, 0, 114, 0, 0, 0, 702, 116, 0, 117,
	0, 0, 0, 645, 118, 119, 689, 690, 668, 0,
	0, 120, 121, 712, 0, 122, 0, 123, 0, 1323,
	312, 0, 124, 700, 0, 246, 0, 125, 126, 127,
	128, 696, 698, 314, 0, 132, 0, 129, 0, 313,
	130, 713, 131, 714, 715, 716, 0, 679, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 1319, 701, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 640,
	0, 669, 697, 150, 717, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 691,
	157, 158, 159, 160, 0, 692, 161, 261, 162, 0,
	163, 164, 165, 718, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 646, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 685, 192, 183, 184, 193, 323,
	194, 719, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 720, 199, 693, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 721, 722, 0, 1320, 208, 694,
	695, 667, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 686, 216, 0, 217, 218, 219, 274, 723, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	641, 0, 672, 661, 662, 659, 660, 651, 0, 0,
	637, 638, 0, 0, 0, 0, 0, 639, 90, 91,
	647, 92, 0, 0, 0, 650, 688, 654, 0, 0,
	0, 93, 94, 95, 226, 703, 228, 704, 96, 705,
	706, 0, 97, 232, 233, 98, 657, 687, 707, 708,
	236, 0, 99, 699, 0, 680, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 681, 683, 0, 682, 684, 109, 110, 279, 111,
	709, 112, 710, 711, 0, 113, 0, 114, 0, 0,
	0, 702, 116, 0, 117, 0, 0, 0, 645, 118,
	119, 689, 690, 668, 0, 0, 120, 121, 712, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 700, 0,
	246, 0, 125, 126, 127, 128, 696, 698, 314, 0,
	132, 0, 129, 0, 313, 130, 713, 131, 714, 715,
	716, 0, 679, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 701, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 640, 1609, 669, 697, 150, 717,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 691, 157, 158, 159, 160, 0,
	692, 161, 261, 162, 0, 163, 164, 165, 718, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 646, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 685,
	192, 183, 184, 193, 323, 194, 719, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 720, 199, 693, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 721,
	722, 0, 0, 208, 694, 695, 667, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 686, 216, 0, 217,
	218, 219, 274, 723, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 641, 0, 672, 661, 662,
	659, 660, 651, 0, 0, 637, 638, 635, 0, 0,
	0, 0, 639, 90, 91, 647, 92, 0, 0, 0,
	650, 688, 654, 0, 0, 0, 93, 94, 95, 226,
	703, 228, 704, 96, 705, 706, 0, 97, 232, 233,
	98, 657, 687, 707, 708, 236, 0, 99, 699, 0,
	680, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 681, 683, 0, 682,
	684, 109, 110, 279, 111, 709, 112, 710, 711, 0,
	113, 0, 114, 0, 0, 0, 702, 116, 0, 117,
	0, 0, 0, 645, 118, 119, 689, 690, 668, 0,
	0, 120, 121, 712, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 700, 0, 246, 0, 125, 126, 127,
	128, 696, 698, 314, 0, 132, 0, 129, 0, 313,
	130, 713, 131, 714, 715, 716, 0, 679, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 701, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 640,
	0, 669, 697, 150, 717, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 691,
	157, 158, 159, 160, 0, 692, 161, 261, 162, 0,
	163, 164, 165, 718, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 646, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 685, 192, 183, 184, 193, 323,
	194, 719, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 720, 199, 693, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 721, 722, 0, 0, 208, 694,
	695, 667, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 686, 216, 0, 217, 218, 219, 274, 723, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	637, 638, 0, 0, 0, 0, 0, 639, 1000, 1271,
	647, 0, 0, 0, 0, 650, 672, 661, 662, 659,
	660, 651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	688, 654, 0, 0, 0, 93, 94, 95, 226, 703,
	228, 704, 96, 705, 706, 0, 97, 232, 233, 98,
	657, 687, 707, 708, 236, 0, 99, 699, 0, 680,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 681, 683, 0, 682, 684,
	109, 110, 279, 111, 709, 112, 710, 711, 0, 113,
	0, 114, 0, 0, 0, 702, 116, 0, 117, 0,
	0, 0, 645, 118, 119, 689, 690, 668, 0, 0,
	120, 121, 712, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 700, 0, 246, 0, 125, 126, 127, 128,
	696, 698, 314, 0, 132, 0, 129, 0, 313, 130,
	713, 131, 714, 715, 716, 0, 679, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 701, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 640, 0,
	669, 697, 150, 717, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 691, 157,
	158, 159, 160, 0, 692, 161, 261, 162, 0, 163,
	164, 165, 718, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 646, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 685, 192, 183, 184, 193, 323, 194,
	719, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	720, 199, 693, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 721, 722, 0, 0, 208, 694, 695,
	667, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	686, 216, 0, 217, 218, 219, 274, 723, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 637,
	638, 0, 0, 0, 0, 0, 639, 0, 0, 647,
	1740, 0, 0, 0, 650, 672, 661, 662, 659, 660,
	651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 688,
	654, 0, 0, 0, 93, 94, 95, 226, 703, 228,
	704, 96, 705, 706, 0, 97, 232, 233, 98, 657,
	687, 707, 708, 236, 0, 99, 699, 0, 680, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 681, 683, 0, 682, 684, 109,
	110, 279, 111, 709, 112, 710, 711, 0, 113, 0,
	114, 0, 0, 0, 702, 116, 0, 117, 0, 0,
	0, 645, 118, 119, 689, 690, 668, 0, 0, 120,
	121, 712, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 700, 0, 246, 0, 125, 126, 127, 128, 696,
	698, 314, 0, 132, 0, 129, 0, 313, 130, 713,
	131, 714, 715, 716, 0, 679, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 701, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 640, 0, 669,
	697, 150, 717, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 691, 157, 158,
	159, 160, 0, 692, 161, 261, 162, 0, 163, 164,
	165, 718, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 646, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 685, 192, 183, 184, 193, 323, 194, 719,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 720,
	199, 693, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 721, 722, 0, 0, 208, 694, 695, 667,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 686,
	216, 0, 217, 218, 219, 274, 723, 1697, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 641, 0,
	672, 661, 662, 659, 660, 651, 0, 0, 637, 638,
	0, 0, 0, 0, 0, 639, 90, 91, 647, 92,
	0, 0, 0, 650, 688, 654, 0, 0, 0, 93,
	94, 95, 226, 703, 228, 704, 96, 705, 706, 0,
	97, 232, 233, 98, 657, 687, 707, 708, 236, 0,
	99, 699, 0, 680, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 681,
	683, 0, 682, 684, 109, 110, 279, 111, 709, 112,
	710, 711, 0, 113, 0, 114, 0, 0, 0, 702,
	116, 0, 117, 0, 0, 0, 645, 118, 119, 689,
	690, 668, 0, 0, 120, 121, 712, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 700, 0, 246, 0,
	125, 126, 127, 128, 696, 698, 314, 0, 132, 0,
	129, 0, 313, 130, 713, 131, 714, 715, 716, 0,
	679, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 701, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 640, 0, 669, 697, 150, 717, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 691, 157, 158, 159, 160, 0, 692, 161,
	261, 162, 0, 163, 164, 165, 718, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 646, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 685, 192, 183,
	184, 193, 323, 194, 719, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 720, 199, 693, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 721, 722, 0,
	0, 208, 694, 695, 667, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 686, 216, 0, 217, 218, 219,
	274, 723, 0, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 637, 638, 0, 0, 0, 0, 0,
	639, 0, 0, 647, 1687, 0, 0, 0, 650, 672,
	661, 662, 659, 660, 651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 688, 654, 0, 0, 0, 93, 94,
	95, 226, 703, 228, 704, 96, 705, 706, 0, 97,
	232, 233, 98, 657, 687, 707, 708, 236, 0, 99,
	699, 0, 680, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 681, 683,
	0, 682, 684, 109, 110, 279, 111, 709, 112, 710,
	711, 738, 113, 0, 114, 0, 0, 0, 702, 116,
	0, 117, 0, 0, 0, 645, 118, 119, 689, 690,
	668, 0, 0, 120, 121, 712, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 700, 0, 246, 0, 125,
	126, 127, 128, 696, 698, 314, 0, 132, 0, 129,
	0, 313, 130, 713, 131, 714, 715, 716, 0, 679,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	701, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 640, 0, 669, 697, 150, 717, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 691, 157, 158, 159, 160, 0, 692, 161, 261,
	162, 0, 163, 164, 165, 718, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 646, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 685, 192, 183, 184,
	193, 323, 194, 719, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 720, 199, 693, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 721, 722, 0, 0,
	208, 694, 695, 667, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 686, 216, 0, 217, 218, 219, 274,
	723, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 641, 0, 672, 661, 662, 659, 660, 651,
	0, 0, 637, 638, 0, 0, 0, 0, 0, 639,
	90, 91, 647, 92, 0, 0, 0, 650, 688, 654,
	0, 0, 0, 93, 94, 95, 226, 703, 228, 704,
	96, 705, 706, 0, 97, 232, 233, 98, 657, 687,
	707, 708, 236, 0, 99, 699, 0, 680, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 681, 683, 0, 682, 684, 109, 110,
	279, 111, 709, 112, 710, 711, 0, 113, 0, 114,
	0, 0, 0, 702, 116, 0, 117, 0, 0, 0,
	645, 118, 119, 689, 690, 668, 0, 0, 120, 121,
	712, 0, 122, 0, 123, 0, 1323, 312, 0, 124,
	700, 0, 246, 0, 125, 126, 127, 128, 696, 698,
	314, 0, 132, 0, 129, 0, 313, 130, 713, 131,
	714, 715, 716, 0, 679, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 701, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 640, 0, 669, 697,
	150, 717, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 691, 157, 158, 159,
	160, 0, 692, 161, 261, 162, 0, 163, 164, 165,
	718, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	646, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 685, 192, 183, 184, 193, 323, 194, 719, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 720, 199,
	693, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 721, 722, 0, 0, 208, 694, 695, 667, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 686, 216,
	0, 217, 218, 219, 274, 723, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 641, 0, 672,
	661, 662, 659, 660, 651, 0, 0, 637, 638, 0,
	0, 0, 0, 0, 639, 90, 91, 647, 92, 0,
	0, 0, 650, 688, 654, 0, 0, 0, 93, 94,
	95, 226, 703, 228, 704, 96, 705, 706, 0, 97,
	232, 233, 98, 657, 687, 707, 708, 236, 0, 99,
	699, 0, 680, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 681, 683,
	0, 682, 684, 109, 110, 279, 111, 709, 112, 710,
	711, 0, 113, 0, 114, 0, 0, 0, 702, 116,
	0, 117, 0, 0, 0, 645, 118, 119, 689, 690,
	668, 0, 0, 120, 121, 712, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 700, 0, 246, 0, 125,
	126, 127, 128, 696, 698, 314, 0, 132, 0, 129,
	0, 313, 130, 713, 131, 714, 715, 716, 0, 679,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	701, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 640, 0, 669, 697, 150, 717, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 691, 157, 158, 159, 160, 0, 692, 161, 261,
	162, 0, 163, 164, 165, 718, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 646, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 685, 192, 183, 184,
	193, 323, 194, 719, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 720, 199, 693, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 721, 722, 0, 0,
	208, 694, 695, 667, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 686, 216, 0, 217, 218, 219, 274,
	723, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 641, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 637, 638, 0, 0, 0, 0, 0, 639,
	0, 0, 647, 1266, 0, 0, 0, 650, 672, 661,
	662, 659, 660, 651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 688, 654, 0, 0, 0, 93, 94, 95,
	226, 703, 228, 704, 96, 705, 706, 0, 97, 232,
	233, 98, 657, 687, 707, 708, 236, 0, 99, 699,
	0, 680, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 681, 683, 0,
	682, 684, 109, 110, 279, 111, 709, 112, 710, 711,
	0, 113, 0, 114, 0, 0, 0, 702, 116, 0,
	117, 0, 0, 0, 645, 118, 119, 689, 690, 668,
	0, 0, 120, 121, 712, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 700, 0, 246, 0, 125, 126,
	127, 128, 696, 698, 314, 0, 132, 0, 129, 0,
	313, 130, 713, 131, 714, 715, 716, 0, 679, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 701,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	640, 0, 669, 697, 150, 717, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	691, 157, 158, 159, 160, 0, 692, 161, 261, 162,
	0, 163, 164, 165, 718, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 646, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 685, 192, 183, 184, 193,
	323, 194, 719, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 720, 199, 693, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 721, 722, 0, 0, 208,
	694, 695, 667, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 686, 216, 0, 217, 218, 219, 274, 723,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 641, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 637, 638, 635, 0, 0, 0, 0, 639, 0,
	0, 647, 0, 0, 0, 0, 650, 672, 661, 662,
	659, 660, 651, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 928, 92, 0, 0, 0,
	0, 688, 654, 0, 0, 0, 93, 94, 95, 226,
	703, 228, 704, 96, 705, 706, 0, 97, 232, 233,
	98, 657, 687, 707, 708, 236, 0, 99, 699, 0,
	680, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 681, 683, 0, 682,
	684, 109, 110, 279, 111, 709, 112, 710, 711, 0,
	113, 0, 114, 0, 0, 0, 702, 116, 0, 117,
	0, 0, 0, 645, 118, 119, 689, 690, 668, 0,
	0, 120, 121, 712, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 700, 0, 246, 0, 125, 126, 127,
	128, 696, 698, 314, 0, 132, 0, 129, 0, 313,
	130, 713, 131, 714, 715, 716, 0, 679, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 701, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 640,
	0, 669, 697, 150, 717, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 691,
	157, 158, 159, 160, 0, 692, 161, 261, 162, 0,
	163, 164, 165, 718, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 646, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 685, 192, 183, 184, 193, 323,
	194, 719, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 720, 199, 693, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 721, 722, 0, 0, 208, 694,
	695, 667, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 686, 216, 0, 217, 218, 219, 274, 723, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	641, 0, 672, 661, 662, 659, 660, 651, 0, 0,
	637, 638, 0, 0, 0, 0, 0, 639, 90, 91,
	647, 92, 0, 0, 0, 650, 688, 654, 0, 0,
	0, 93, 94, 95, 226, 703, 228, 704, 96, 705,
	706, 0, 97, 232, 233, 98, 657, 687, 707, 708,
	236, 0, 99, 699, 0, 680, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 2093,
	0, 681, 683, 0, 682, 684, 109, 110, 279, 111,
	709, 112, 710, 711, 0, 113, 0, 114, 0, 0,
	0, 702, 116, 0, 117, 0, 0, 0, 645, 118,
	119, 689, 690, 668, 0, 0, 120, 121, 712, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 700, 0,
	246, 0, 125, 126, 127, 128, 696, 698, 314, 0,
	132, 0, 129, 0, 313, 130, 713, 131, 714, 715,
	716, 0, 679, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 701, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 640, 0, 669, 697, 150, 717,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 691, 157, 158, 159, 160, 0,
	692, 161, 261, 162, 0, 163, 164, 165, 718, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 646, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 685,
	192, 183, 184, 193, 323, 194, 719, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 720, 199, 693, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 721,
	722, 0, 0, 208, 694, 695, 667, 209, 210, 2092,
	212, 0, 0, 213, 214, 215, 686, 216, 0, 217,
	218, 219, 274, 723, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 641, 0, 672, 661, 662,
	659, 660, 651, 0, 0, 637, 638, 0, 0, 0,
	0, 0, 639, 90, 91, 647, 92, 0, 0, 0,
	650, 688, 654, 0, 0, 0, 93, 94, 95, 2091,
	703, 228, 704, 96, 705, 706, 0, 97, 232, 233,
	98, 657, 687, 707, 708, 236, 0, 99, 699, 0,
	680, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 2093, 0, 681, 683, 0, 682,
	684, 109, 110, 279, 111, 709, 112, 710, 711, 0,
	113, 0, 114, 0, 0, 0, 702, 116, 0, 117,
	0, 0, 0, 645, 118, 119, 689, 690, 668, 0,
	0, 120, 121, 712, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 700, 0, 246, 0, 125, 126, 127,
	128, 696, 698, 314, 0, 132, 0, 129, 0, 313,
	130, 713, 131, 714, 715, 716, 0, 679, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 701, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 640,
	0, 669, 697, 150, 717, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 691,
	157, 158, 159, 160, 0, 692, 161, 261, 162, 0,
	163, 164, 165, 718, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 646, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 685, 192, 183, 184, 193, 323,
	194, 719, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 720, 199, 693, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 721, 722, 0, 0, 208, 694,
	695, 667, 209, 210, 2092, 212, 0, 0, 213, 214,
	215, 686, 216, 0, 217, 218, 219, 274, 723, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	641, 0, 672, 661, 662, 659, 660, 651, 0, 0,
	637, 638, 0, 0, 0, 0, 0, 639, 90, 91,
	647, 92, 0, 0, 0, 650, 688, 654, 0, 0,
	0, 93, 94, 95, 226, 703, 228, 704, 96, 705,
	706, 0, 97, 232, 233, 98, 657, 687, 707, 708,
	236, 0, 99, 699, 0, 680, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 681, 683, 0, 682, 684, 109, 110, 279, 111,
	709, 112, 710, 711, 0, 113, 0, 114, 0, 0,
	0, 702, 116, 0, 117, 0, 0, 0, 645, 118,
	119, 689, 690, 668, 0, 0, 120, 121, 712, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 700, 0,
	246, 0, 125, 126, 127, 128, 696, 698, 314, 0,
	132, 0, 129, 0, 313, 130, 713, 131, 714, 715,
	716, 0, 679, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 701, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 640, 0, 669, 697, 150, 717,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 691, 157, 158, 159, 160, 0,
	692, 161, 261, 162, 0, 163, 164, 165, 718, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 646, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 685,
	192, 183, 184, 193, 323, 194, 719, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 720, 199, 693, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 721,
	722, 0, 0, 208, 694, 695, 667, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 686, 216, 0, 217,
	218, 219, 274, 723, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 641, 0, 1295, 661, 662,
	659, 660, 651, 0, 0, 637, 638, 0, 0, 0,
	0, 0, 639, 90, 91, 647, 92, 0, 0, 0,
	650, 688, 654, 0, 0, 0, 93, 94, 95, 226,
	703, 228, 704, 96, 705, 706, 0, 97, 232, 233,
	98, 657, 687, 707, 708, 236, 0, 99, 699, 0,
	680, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 681, 683, 0, 682,
	684, 109, 110, 279, 111, 709, 1298, 710, 711, 0,
	113, 0, 114, 0, 0, 0, 702, 116, 0, 117,
	0, 0, 0, 645, 118, 119, 689, 690, 668, 0,
	0, 120, 121, 712, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 700, 0, 246, 0, 125, 126, 1299,
	128, 696, 698, 314, 0, 132, 0, 129, 0, 313,
	130, 713, 131, 714, 715, 716, 0, 679, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 701, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 1300,
	1297, 145, 255, 144, 319, 146, 147, 149, 148, 640,
	0, 669, 697, 150, 717, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 691,
	157, 158, 159, 160, 0, 692, 161, 261, 162, 0,
	163, 164, 165, 718, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 646, 182, 0, 186, 187, 188, 1301,
	0, 264, 190, 191, 685, 192, 183, 184, 193, 323,
	194, 719, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 720, 199, 693, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 721, 722, 0, 0, 208, 694,
	695, 667, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 686, 216, 0, 217, 218, 219, 274, 723, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 1296, 224,
	641, 0, 672, 661, 662, 659, 660, 651, 0, 0,
	637, 638, 0, 0, 0, 0, 0, 639, 90, 91,
	647, 92, 0, 0, 0, 650, 688, 654, 0, 0,
	0, 93, 94, 95, 226, 703, 228, 704, 96, 705,
	706, 0, 97, 232, 233, 98, 657, 687, 707, 708,
	236, 0, 99, 699, 0, 680, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 681, 683, 0, 682, 684, 109, 110, 279, 111,
	709, 112, 710, 711, 0, 113, 0, 114, 0, 0,
	0, 702, 116, 0, 117, 0, 0, 0, 645, 118,
	119, 689, 690, 668, 0, 0, 120, 121, 712, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 700, 0,
	246, 0, 125, 126, 127, 128, 696, 698, 314, 0,
	132, 0, 129, 0, 313, 130, 713, 131, 714, 715,
	716, 0, 679, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 701, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 0, 0, 669, 697, 150, 717,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 691, 157, 158, 159, 160, 0,
	692, 161, 261, 162, 0, 163, 164, 165, 718, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 1313, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 685,
	192, 183, 184, 193, 323, 194, 719, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 720, 199, 693, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 721,
	722, 0, 0, 208, 694, 695, 667, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 686, 216, 0, 217,
	218, 219, 274, 723, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 0, 0, 672, 661, 662,
	659, 660, 651, 0, 0, 1309, 1310, 0, 0, 0,
	0, 0, 1311, 90, 91, 1312, 92, 0, 0, 0,
	650, 688, 654, 0, 0, 0, 93, 94, 95, 0,
	703, 228, 704, 96, 705, 706, 0, 97, 232, 233,
	98, 657, 687, 707, 708, 236, 0, 99, 699, 0,
	680, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 2093, 0, 681, 683, 0, 682,
	684, 109, 110, 279, 111, 709, 112, 710, 711, 0,
	113, 0, 114, 0, 0, 0, 702, 116, 0, 117,
	0, 0, 0, 645, 118, 119, 689, 690, 668, 0,
	0, 120, 121, 712, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 700, 0, 246, 0, 125, 126, 127,
	128, 696, 698, 0, 0, 132, 0, 129, 0, 313,
	130, 713, 131, 714, 715, 716, 0, 679, 0, 0,
	133, 316, 134, 135, 0, 137, 136, 0, 701, 317,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 640,
	0, 669, 697, 150, 717, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 691,
	157, 158, 159, 160, 0, 692, 161, 261, 162, 0,
	163, 164, 165, 718, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 646, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 685, 192, 183, 184, 193, 0,
	194, 719, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 720, 199, 693, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 721, 722, 0, 0, 208, 694,
	695, 667, 209, 210, 2092, 212, 0, 0, 213, 214,
	215, 686, 216, 0, 217, 218, 219, 274, 723, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	0, 0, 672, 661, 662, 659, 660, 651, 0, 0,
	637, 638, 0, 0, 0, 0, 0, 639, 90, 91,
	647, 92, 0, 0, 0, 650, 688, 654, 0, 0,
	0, 93, 94, 95, 226, 703, 228, 704, 96, 705,
	706, 0, 97, 232, 233, 98, 0, 687, 707, 708,
	236, 0, 99, 699, 0, 680, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 681, 683, 0, 682, 684, 109, 110, 279, 111,
	709, 112, 710, 711, 0, 113, 0, 114, 0, 0,
	0, 702, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 689, 690, 668, 0, 0, 120, 121, 712, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 700, 0,
	246, 0, 125, 126, 127, 128, 696, 698, 314, 0,
	132, 0, 129, 0, 313, 130, 713, 131, 714, 715,
	716, 0, 679, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 701, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 0, 0, 669, 697, 150, 717,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 691, 157, 158, 159, 160, 0,
	692, 161, 261, 162, 0, 163, 164, 165, 718, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 1313, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 685,
	192, 183, 184, 193, 323, 194, 719, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 720, 199, 693, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 721,
	722, 0, 0, 208, 694, 695, 667, 209, 210, 211,
	212, 672, 0, 213, 214, 215, 686, 216, 0, 217,
	218, 219, 274, 723, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 688, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 1312, 687, 234, 235, 236,
	650, 99, 699, 0, 680, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	681, 683, 0, 682, 684, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	689, 690, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 700, 0, 246,
	0, 125, 126, 127, 128, 696, 698, 314, 0, 132,
	0, 129, 0, 313, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 701, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 0, 0, 0, 697, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 691, 157, 158, 159, 160, 0, 692,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 685, 192,
	183, 184, 193, 323, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 693, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 694, 695, 0, 209, 210, 211, 212,
	544, 0, 213, 214, 215, 686, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 1582, 0, 234, 235, 236, 0,
	99, 237, 0, 310, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 314, 0, 132, 0,
	129, 0, 313, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 254, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 71, 264, 190, 191, 0, 192, 183,
	184, 193, 323, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 73,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	548, 275, 0, 0, 220, 0, 0, 0, 69, 221,
	222, 223, 224, 0, 70, 544, 763, 0, 873, 870,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 68, 92, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 310, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 876, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 867, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 314, 0, 132, 0, 129, 0, 313, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 254, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 868, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 323, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 866,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 544, 763, 220,
	873, 870, 865, 0, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 874, 871,
	0, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	310, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 861,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 867, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 314, 0, 132, 0, 129, 0, 313,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 254, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 868,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 323,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 866, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 544,
	763, 220, 873, 870, 865, 0, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	874, 871, 0, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 310, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	867, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 314, 0, 132, 0, 129,
	0, 313, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	254, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 868, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 323, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 866, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 87, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 874, 871, 0, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 498, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 71, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	73, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 548, 275, 0, 0, 220, 87, 0, 0, 69,
	221, 222, 223, 224, 0, 70, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	225, 0, 1190, 0, 1195, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 71,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 73, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 548, 275, 0, 0,
	220, 87, 0, 0, 69, 221, 222, 223, 224, 0,
	70, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 225, 0, 0, 0, 68,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 498, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 87, 0, 0, 0,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	225, 0, 1190, 0, 1195, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	771, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 1101, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 1704, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 672, 661, 662, 659,
	660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 734, 0, 0, 0,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 703,
	228, 704, 96, 705, 706, 0, 97, 232, 233, 98,
	0, 0, 707, 708, 236, 0, 99, 237, 0, 310,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 709, 112, 710, 711, 0, 113,
	0, 114, 0, 0, 0, 702, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 668, 0, 0,
	120, 121, 712, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 314, 0, 132, 0, 129, 0, 313, 130,
	713, 131, 714, 715, 716, 0, 679, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 254, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 0, 0,
	669, 256, 150, 717, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 718, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 323, 194,
	719, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	720, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 721, 722, 0, 0, 208, 272, 273,
	667, 209, 210, 211, 212, 544, 763, 213, 214, 215,
	761, 216, 0, 217, 218, 219, 274, 723, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 310, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 314, 0, 132, 0, 129, 0, 313, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 254, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 323, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 544, 763, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 310, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	314, 0, 132, 0, 129, 0, 313, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 254, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 323, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 83,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 82, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 544, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 86, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 310, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 314, 0, 132, 0, 129, 0, 313, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 254, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 323, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 87, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 86,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 1058, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 1056, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 1166, 0,
	120, 121, 244, 0, 122, 0, 123, 1061, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 1164, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 1060, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 1165, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 1058, 99, 237, 0, 0, 1053,
	100, 101, 102, 0, 103, 1056, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 1061, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 1052,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 1060, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 1059, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	1671, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 498, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	890, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 796, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 498, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 556, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 510, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 498, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 503, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 498, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 409, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 408, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 1359,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 1357, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 1346, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 919, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	423, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 781, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 0, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 612, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 607, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 562, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 435, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 434, 270, 271, 0, 0, 430, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 435, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 434, 270, 271, 0, 0, 430, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 540,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 537, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 534, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 532, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 506, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 487, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 428,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 426, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 435, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 429, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 427, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 434, 270, 271, 0, 0,
	430, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 0, 160, 0, 260, 161, 261, 162,
	0, 163, 0, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 0, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 943, 944, 0, 963, 964, 965, 973, 974, 975,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 977, 0, 0,
	0, 0, 0, 943, 944, 0, 963, 964, 965, 973,
	974, 975, 0, 0, 0, 0, 0, 945, 0, 966,
	0, 0, 0, 960, 0, 0, 946, 0, 0, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 0, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	943, 944, 0, 963, 964, 965, 973, 974, 975, 0,
	0, 970, 978, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 946, 951, 0, 977, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 970, 978, 961, 945, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 968, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	970, 978, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 968, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 957, 958, 959, 0, 956, 954, 955, 947, 948,
	949, 950, 952, 953, 0, 972, 0, 0, 0, 0,
	0, 0, 1557, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 962, 957, 958, 959, 0, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 971, 972, 0, 0,
	0, 0, 943, 944, 1556, 963, 964, 965, 973, 974,
	975, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 960, 0, 0, 969, 0, 0,
	957, 958, 959, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 972, 0, 0, 0, 0, 943,
	944, 1508, 963, 964, 965, 973, 974, 975, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 946, 951, 0, 977, 0, 0, 0, 0,
	0, 943, 944, 0, 963, 964, 965, 973, 974, 975,
	0, 0, 970, 978, 0, 945, 0, 966, 0, 0,
	0, 960, 0, 0, 946, 0, 0, 977, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 961, 945, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	951, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 968, 0, 0,
	0, 970, 978, 961, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 968,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 962, 957, 958, 959, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 971, 972, 0, 0, 0,
	2031, 0, 0, 943, 944, 0, 963, 964, 965, 973,
	974, 975, 0, 962, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 946, 971, 0, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 0, 0, 0, 960, 969, 0, 0, 957,
	958, 959, 0, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 0, 972, 0, 0, 0, 2029, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 957, 958, 959, 0, 956, 954, 955, 947, 948,
	949, 950, 952, 953, 951, 972, 0, 0, 0, 1974,
	943, 944, 0, 963, 964, 965, 973, 974, 975, 0,
	0, 0, 0, 970, 978, 0, 966, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 977, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 945, 961, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 0,
	943, 944, 0, 963, 964, 965, 973, 974, 975, 0,
	0, 0, 967, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 960, 0, 0, 962, 0, 0, 0, 0,
	970, 978, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 976, 943, 944, 0,
	963, 964, 965, 973, 974, 975, 0, 0, 968, 0,
	0, 0, 0, 966, 961, 0, 0, 0, 0, 0,
	946, 951, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	970, 978, 0, 945, 0, 0, 0, 0, 0, 960,
	969, 0, 0, 957, 958, 959, 976, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 972, 968, 0,
	0, 1969, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 951, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 0, 968, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 971, 969, 0, 0,
	957, 958, 959, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 972, 0, 967, 0, 1965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 962,
	957, 958, 959, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 971, 972, 0, 943, 944, 1905, 963,
	964, 965, 973, 974, 975, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 969, 0, 0, 957, 958, 959,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	0, 972, 0, 943, 944, 1883, 963, 964, 965, 973,
	974, 975, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 946, 951, 0, 977,
	0, 0, 0, 0, 0, 943, 944, 0, 963, 964,
	965, 973, 974, 975, 0, 0, 970, 978, 0, 945,
	0, 966, 0, 0, 0, 960, 0, 0, 946, 0,
	0, 977, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	961, 945, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 951, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 968, 0, 0, 0, 970, 978, 961, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 968, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 962, 957, 958, 959, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 971,
	972, 0, 0, 0, 1882, 0, 0, 943, 944, 0,
	963, 964, 965, 973, 974, 975, 0, 962, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	946, 971, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 960,
	969, 0, 0, 957, 958, 959, 0, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 972, 0, 0,
	0, 1773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 957, 958, 959, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 951, 972,
	0, 0, 0, 1707, 943, 944, 0, 963, 964, 965,
	973, 974, 975, 0, 0, 0, 0, 970, 978, 0,
	966, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	977, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	945, 961, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 943, 944, 0, 963, 964, 965,
	973, 974, 975, 0, 0, 0, 967, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 960, 0, 0, 962,
	0, 0, 0, 0, 970, 978, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 970, 978, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 957, 958, 959,
	976, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	0, 972, 968, 0, 0, 1691, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 943, 944, 0, 963, 964, 965, 973, 974, 975,
	971, 0, 0, 967, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 960, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 969, 0, 0, 957, 958, 959, 0, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 0, 972, 0,
	0, 0, 1267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 2114, 0, 0, 0, 943, 944, 0,
	963, 964, 965, 973, 974, 975, 0, 0, 0, 0,
	0, 970, 978, 966, 0, 0, 0, 0, 0, 0,
	946, 969, 0, 977, 957, 958, 959, 976, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 0, 972, 968,
	1483, 0, 0, 945, 0, 961, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2113, 0, 0, 0, 943, 944,
	0, 963, 964, 965, 973, 974, 975, 0, 951, 0,
	1548, 0, 0, 1547, 966, 0, 0, 0, 0, 1182,
	0, 946, 0, 962, 977, 0, 0, 970, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 976, 945, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1183, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 951,
	0, 957, 958, 959, 0, 956, 954, 955, 947, 948,
	949, 950, 952, 953, 0, 972, 0, 0, 970, 978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 968, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 957, 958, 959,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	962, 972, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 943, 944, 971, 963, 964, 965, 973, 974,
	975, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 980, 0, 0, 946, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 957, 958,
	959, 0, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 0, 972, 943, 944, 0, 963, 964, 965, 973,
	974, 975, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 951, 0, 0, 946, 0, 0, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 978, 0, 0, 0, 0, 0, 945,
	0, 0, 0, 0, 0, 960, 0, 0, 976, 943,
	944, 0, 963, 964, 965, 973, 974, 975, 0, 0,
	968, 0, 0, 0, 0, 966, 961, 0, 0, 0,
	0, 0, 946, 0, 0, 977, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 951, 945, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 961, 971, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	978, 0, 967, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 969,
	0, 0, 957, 958, 959, 962, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 972, 0, 967, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	969, 0, 0, 957, 958, 959, 0, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 972, 1695, 0,
	0, 0, 0, 0, 0, 0, 943, 944, 0, 963,
	964, 965, 973, 974, 975, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 977, 0, 0, 0, 969, 0, 0, 957,
	958, 959, 0, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 945, 972, 0, 0, 943, 944, 960, 963,
	964, 965, 973, 974, 975, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 1549, 0, 0, 946,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 0, 951, 960, 0,
	0, 0, 1554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 951, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 978, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 943, 944, 0, 963, 964, 965, 973,
	974, 975, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 946, 0, 962, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 0, 969, 0, 960, 957, 958, 959, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 951, 0, 957, 958, 959, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	972, 0, 0, 970, 978, 0, 0, 943, 944, 0,
	963, 964, 965, 973, 974, 975, 0, 0, 0, 976,
	0, 0, 0, 966, 0, 0, 0, 1507, 0, 0,
	946, 968, 0, 977, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 960,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 943, 944, 951, 963,
	964, 965, 973, 974, 975, 0, 0, 0, 0, 971,
	0, 0, 966, 0, 0, 0, 0, 970, 978, 946,
	943, 944, 977, 963, 964, 965, 973, 974, 975, 0,
	0, 0, 0, 976, 0, 0, 966, 0, 0, 0,
	0, 0, 945, 946, 0, 968, 977, 0, 960, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	969, 0, 960, 957, 958, 959, 967, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 978, 0, 962,
	0, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 971, 0, 0, 0, 0, 0, 0,
	970, 978, 0, 0, 968, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 961, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 957, 958, 959,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	0, 972, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 943, 944, 0, 963, 964, 965, 973, 974,
	975, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 0, 946, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 0, 957, 958, 959, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	972, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	957, 958, 959, 951, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 970, 978, 0, 943, 944, 0, 963, 964,
	965, 973, 974, 975, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 0,
	968, 977, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 822, 814, 839, 807, 830,
	829, 0, 0, 809, 808, 0, 0, 0, 841, 840,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 951, 0, 0, 0,
	835, 0, 827, 826, 0, 0, 0, 0, 971, 0,
	0, 825, 0, 0, 0, 970, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 817, 816, 818, 819,
	820, 0, 838, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 957, 958, 959, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 972, 811, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 828,
	0, 0, 0, 815, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 971, 1201, 1199, 1200, 1203, 1202, 822, 814, 839,
	807, 830, 829, 0, 0, 809, 808, 0, 0, 0,
	841, 840, 0, 0, 0, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 821, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 835, 0, 827, 826, 810, 0, 0, 836,
	837, 0, 969, 825, 0, 957, 958, 959, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 0, 972,
	824, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 816,
	818, 819, 820, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 821, 813,
	0, 0, 0, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 836, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842,
}
var sqlPact = [...]int{

	122, -1000, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 781, 16319, 16319, 19972, -1000, -1000, -1000, -1000, -1000,
	-1000, 704, 746, 2199, 5147, 19972, 19972, 19693, 1071, 1071,
	21367, -1000, -1000, 24715, -1000, 3143, 515, 516, 515, 515,
	509, 21367, 19972, 625, 779, 169, -1000, 750, 10, 24436,
	19972, 1397, 42, 18019, 334, 122, 19414, 24157, 19972, 19135,
	602, 39, 16890, 19972, -1000, 46, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1232, 307, 46, -1000,
	1231, 1096, 1094, 18019, 23878, 23599, 23320, 23041, -1000, 12276,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 786, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 342, 341, -1000, 18856, -1000,
	935, -1000, 41, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 934, -1000, 19972, -1000, -1000, 22762, 22483, 679, 337,
	936, -1000, -1000, 583, 443, 1409, -1000, 54, -1000, 1389,
	678, -1000, 1229, -1000, 931, 1226, 1215, 1214, 1212, 1210,
	1207, 437, 796, 506, -1000, 1202, 936, -1000, 936, -1000,
	-1000, -1000, 598, 21367, -1000, -1000, 18019, -1000, 22204, 19972,
	19972, 1111, 21925, -1000, 750, -1000, -1000, -1000, 982, 1396,
	1396, 1396, 1404, 162, 160, 169, 4, 19972, -1000, 335,
	4, 9254, 9254, -1000, -1000, 334, -1000, 374, 15179, -1000,
	8315, -1000, 845, 1300, 470, 664, 1299, -131, 793, 789,
	1292, 15761, 16890, 39, 38, -1000, -1000, -1000, 4844, 15761,
	657, 14342, 46, -1000, -1000, -1000, 18019, 19972, 19972, 683,
	21646, -1000, 1291, 107, 1288, -1000, 106, 1287, -1000, 106,
	1286, 40, -1000, -1000, -1000, -1000, -1000, -1000, 334, 18577,
	19972, 1512, 28970, -1000, 10498, -1000, -1000, 16319, 1483, 16319,
	-1000, -1000, 1511, -1000, 19972, 10498, -1000, 30, 16, 1037,
	1142, 12873, 12581, 1345, 680, -1000, -1000, -1000, 52, 5147,
	676, 18298, 19972, 1237, 16319, 19972, 19972, 19972, 19972, 19972,
	19972, -1000, 1036, -1000, -1000, 19972, 19972, 776, -1000, 11,
	9, -1000, 21367, -1000, 115, -1000, 333, 1003, 444, 164,
	21088, 444, 1002, -1000, 982, -1000, 943, 1033, 9583, 10498,
	169, -1000, -1000, 169, 169, 10498, -1000, -1000, 19972, 4,
	1510, 19972, 79, -1000, 27532, -1000, -1000, 10498, 10498, 10498,
	10498, 10498, 891, 366, -1000, 329, 328, 6108, -1000, -1000,
	1638, -1000, -1000, -1000, 173, -1000, -1000, 10498, 46, -1000,
	-1000, -1000, -1000, 326, 1653, -1000, 489, -1000, -1000, -1000,
	447, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1236, 323, 322, -1000, -1000, -1000, -1000, 320, 318, 317,
	316, 309, 308, 306, 303, 298, 297, 296, 294, 288,
	284, 283, 864, -1000, 473, -1000, -1000, 473, 473, -1000,
	278, 278, 280, -1000, -1000, -1000, -1000, 278, -1000, -1000,
	-1000, 436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 281,
	79, -1000, -1000, -1000, 19972, 35, -1000, 28406, -1000, -30,
	780, -1000, 17461, 1364, 1362, 1366, 18019, 1417, 10, 1198,
	1416, 10, 1193, 596, 19972, 19972, 592, 590, 18019, 414,
	-1000, -1000, -1000, -1000, -1000, 19972, -1000, -1000, -46, -1000,
	-1000, 1191, 34, -1000, -1000, 465, 95, 1486, 95, 14621,
	-1000, 19972, 19972, -1000, 19972, -1000, -1000, 19972, -1000, 19972,
	19972, -1000, 19972, 1921, 16611, 773, 1282, 803, 10, 26,
	-1000, 1517, -1000, -1000, -1000, -1000, 100, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 280, 864, 278, 278, 278, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 436, -1000, -1000, 473,
	473, 473, -1000, -1000, 25, 28406, 587, -1000, 1190, 513,
	-1000, 430, 18, 843, 1080, 857, -1000, -1000, -1000, -1000,
	3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1585, -1000, -1000, 1636, 3, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1650, 5147, -1000, -1000, -1000,
	-1000, -1000, -1000, 19972, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19972, 19972, 843, 1080, -1000, -1000,
	18019, 17182, 1480, 1280, 874, -1000, 1433, 19972, 930, 1000,
	-1000, 620, 1277, -1000, -1000, -1000, -1000, 28406, -1000, 28406,
	706, 1099, -1000, 1099, -16, -1000, 27298, -1000, 275, -5,
	465, 9254, 14047, 28788, 28970, 19972, 612, 10498, 10498, 10498,
	10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498,
	10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498, 1055,
	10498, 569, 10498, 10498, 10498, 10498, 2101, 862, 240, 896,
	5147, -1000, -1000, 671, 671, 671, 28632, 28632, 204, 366,
	-1000, 10498, -1000, 8925, 160, 26874, -20, -1000, -1000, -1000,
	7023, 471, 28406, 46, 5779, -1000, 1632, 681, 1247, 1138,
	273, 156, 146, 10498, 10498, 10803, 10803, 10498, 11108, 10498,
	10498, 6413, 10498, 10498, 10498, 10498, 10498, 10498, -1000, 264,
	-1000, -1000, -1000, -1000, 1617, -1000, -1000, 1616, -1000, 610,
	607, 1601, 465, 145, 8315, -1000, 773, 19972, 19972, 19972,
	-1000, -1000, 999, 20809, 996, 28970, 19972, -1000, 263, 249,
	1069, 1067, 19972, 19972, 20530, 20251, 19972, 841, 10, -1000,
	244, 10, -1000, 243, 19972, 783, -1000, 19972, 19972, 774,
	1125, 946, -1000, 453, 15761, 649, 1188, 19972, 720, 10498,
	876, -1000, 13752, 478, 19972, 720, 68, -1000, -1000, -1000,
	406, 19972, -1000, -1000, -1000, 107, -1000, 106, 106, -1000,
	-1000, 18019, -1000, -1000, -1000, -1000, -1000, -1000, 28970, 365,
	358, -1000, 1599, 566, -1000, 562, 561, 558, -1000, 242,
	-1000, 10498, 19972, 19972, 1080, -1000, -1000, -1000, -1000, 718,
	-1000, 790, -1000, 13165, -1000, -1000, -1000, -1000, -47, -1000,
	-1000, -1000, -1000, -1000, -1000, 130, -7, -22, 28970, -1000,
	-1000, -1000, -1000, -1000, 19972, 310, 19972, 10, 19972, -1000,
	1649, 10, 19972, 1276, 1307, 404, 19972, -1000, -1000, -1000,
	10498, -1000, -1000, -1000, 10, -1000, 1136, -1000, -88, 1208,
	1360, -159, 170, 416, -1000, 13457, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 435, 277, 277, 476,
	476, 476, 476, 512, 978, 2327, 493, 3236, 3236, 3236,
	161, 1988, 1988, 3236, 3236, 3236, 28632, 28430, 1019, 10498,
	10498, 546, 858, 240, 1019, 10498, 1579, 1019, 1019, 1019,
	-1000, 968, -1000, -1000, -1000, -1000, 1187, 237, 11108, 11108,
	-1000, -1000, -1000, 6108, 11718, -1000, -1000, -1000, -1000, -1000,
	236, 10498, -1000, 26934, -186, -9, -1000, -1000, 10498, -135,
	-146, -1000, -1000, 673, -1000, 10498, -1000, -31, 10498, 10498,
	10498, 127, 126, -1000, 900, 235, 230, 10498, -1000, -1000,
	28307, 25400, 124, 1177, -118, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 120, 119, 28183, -118, 117, 3179, -1000, 11108,
	11108, 11108, 6108, 229, 116, 27207, -118, 27986, 8620, 8620,
	8620, 114, 27936, 10498, -118, 25323, 25291, 3750, -11, -15,
	-23, 1593, -25, 113, 429, 420, 112, 1136, -1000, -1000,
	-1000, -1000, 533, 531, 1272, -1000, 995, -1000, 482, -1000,
	722, 10498, 11997, 226, 225, 838, -1000, 1270, 894, 1265,
	894, -1000, -30, 765, -1000, 10498, -1000, 10498, -1000, 528,
	-1000, -1000, 526, 453, 1175, 627, -1000, 917, -1000, -1000,
	643, -1000, -1000, 6718, 28406, -1000, 720, 1369, -29, -1000,
	-1000, -1000, 465, 14621, 14047, 8315, -33, -1000, -1000, -1000,
	773, -1000, 428, 1590, 111, 1023, 921, 768, 697, 1589,
	28406, -47, -47, -1000, -1000, -1000, -1000, -1000, 19972, 1113,
	-1000, 17182, 223, 19972, 221, -1000, 220, -1000, -1000, 219,
	19972, 1050, 404, 16040, -1000, 444, -1000, 108, 1133, 1402,
	-1000, 14047, 1078, 1076, 14047, 1446, 905, 905, 905, -1000,
	217, 2195, 416, 4224, 10498, 17740, 911, 72, 105, 1208,
	10498, 1019, 1019, 10498, 11108, 11108, -1000, 1019, -1000, -1000,
	-1000, -1000, -1000, 1173, 215, 10498, 28970, 2797, 2420, -34,
	-1000, 7986, -56, -1000, 10498, -1000, 26767, -1000, -1000, 355,
	1305, -1000, 10498, 27669, 101, 7681, -1000, 27613, -40, -40,
	-1000, 1646, -1000, 14900, 467, 913, 26555, 28788, 28970, -1000,
	10498, -1000, -1000, 1155, 10498, -1000, 28788, 28970, 11108, 11108,
	11108, 11108, 11108, 11108, 11108, 11108, 11108, 11108, 11108, 11108,
	11108, 11108, 11108, 11108, 11108, 11108, 11108, 1038, 11108, 1554,
	1554, 1554, -57, 7352, -1000, 1162, 1155, 10498, 10498, 28970,
	98, 97, 91, -1000, 10498, -118, 10498, 10498, 10498, -1000,
	-1000, -1000, 90, -1000, 1577, -1000, -1000, -1000, -1000, 1133,
	19972, 19972, 19972, 1263, -1000, 2551, -1000, 26523, -39, -1000,
	285, 1380, 10498, -1000, -1000, 214, 11997, 19972, -1000, 1088,
	1084, 500, 19972, -1000, 19972, -1000, 19972, 19972, 19972, -45,
	-52, 19972, 19972, -1000, 15761, 603, 212, -1000, -61, -1000,
	-1000, 231, 10, 720, -1000, -62, -1000, 405, -1000, 353,
	350, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 87,
	-1000, -1000, 1117, -1000, 11997, 211, 19972, 17182, 1426, 11997,
	929, 1052, 404, 16040, -1000, 620, -1000, 457, 10498, 10498,
	1208, 14047, 14047, 2607, 1075, 14047, -1000, -1000, -1000, -1000,
	348, 370, 347, 12276, 17740, -1000, 1574, 1073, -60, -1000,
	-1000, 19972, 210, -1000, 416, 550, 1019, 267, 150, 10498,
	28970, 28755, -66, 10498, 10498, -1000, -71, -1000, 10498, 346,
	28406, -1000, -1000, -1000, 28406, 10498, 1581, 10498, 84, 83,
	80, -1000, -1000, -1000, 24994, 10498, 76, -1000, 74, 70,
	28406, 1162, 28406, -1000, -1000, 440, 440, 691, 691, 691,
	691, 1554, 3041, 196, 2135, 2617, 2617, 2617, 1427, 410,
	410, 2617, 2617, 2617, 1154, 1058, 203, 3341, 10498, -72,
	-1000, -1000, -1000, 28406, 28406, 67, -1000, -1000, -1000, -118,
	3372, 26446, 26207, -1000, 66, 457, -1000, -1000, -1000, 19972,
	-1000, 19972, -1000, 19972, 19972, 1159, 984, -1000, -1000, 1060,
	202, 11108, 19972, -1000, 829, 11997, 1400, 46, 19972, 1400,
	26130, 5779, -73, -77, 983, -1000, 980, 10498, -1000, 28970,
	894, 894, -1000, 524, 519, 514, 508, -1000, -1000, -67,
	15482, 1643, 1316, 19972, 1361, -1000, -1000, 201, -1000, -1000,
	-1000, 887, -78, 11997, -79, 64, 10, -83, 19972, -1000,
	404, 16040, -1000, 1307, -1000, 19972, 28406, -118, -1000, 2607,
	-1000, 200, 10498, 14047, -1000, -159, -1000, -87, -1000, 416,
	-89, -1000, 345, -183, -1000, 393, -1000, 416, 198, 19972,
	17740, 10498, 10498, 28755, -93, -1000, 1019, 1019, -1000, 26070,
	-1000, 28406, -1000, 27613, -1000, -1000, -1000, 883, -1000, 25963,
	-1000, -1000, -1000, -1000, 11108, 1147, 197, 28970, 25751, -1000,
	-1000, 10498, -1000, -1000, -1000, -1000, -1000, 893, -1000, -1000,
	19972, 992, -1000, -1000, 10498, 3341, 184, 1113, 183, -1000,
	-1000, -1000, -1000, -1000, -1000, 1380, -31, -1000, 827, -1000,
	-1000, 28406, 1368, -1000, -1000, 19972, 19972, 181, 180, -1000,
	179, 46, -94, -1000, 383, 600, -95, 19972, -1000, -1000,
	5450, 19972, 829, -99, -1000, 1113, -1000, 829, 178, 16040,
	-1000, 1050, -111, -1000, 1422, -1000, 19972, 28406, -1000, 416,
	-1000, 1572, 17740, 1921, -1000, 1073, -1000, 4538, 17740, 19972,
	-100, -1000, 1019, 1019, -1000, -1000, 63, 913, 1401, -1000,
	3510, 11108, 28970, -101, -1000, 25719, -1000, -1000, 1259, 25642,
	1026, 19972, -1000, 19972, 1400, 62, 19972, 484, 19972, -1000,
	-1000, 10498, 10498, 10498, 1643, -1000, -1000, 1642, 682, -1000,
	465, -1000, 175, 1113, 829, -1000, 1113, 11997, -1000, 1052,
	19972, 168, -106, 17740, -1000, -1000, 344, -1000, -1000, 1569,
	-1000, -113, -1000, -1000, 739, 10498, 3510, -120, -1000, -1000,
	1252, -1000, 922, 809, 59, -128, -1000, -1000, 164, -1000,
	10498, -1000, -142, -153, -40, -1000, -1000, 14621, -1000, 19972,
	-1000, 1113, -1000, -161, -1000, -1000, -1000, -1000, -1000, 416,
	286, -1000, 58, 10193, 10193, -118, -1000, 19972, -1000, 925,
	923, 694, -1000, -1000, -1000, -1000, -1000, 1026, 28406, -1000,
	-1000, 56, -134, -176, -1000, 829, 17740, -1000, -1000, -1000,
	-1000, 11413, 942, 708, 27101, -1000, -1000, -1000, 1320, -1000,
	492, 868, 868, 922, 1581, -1000, 880, 1113, -1000, 1530,
	-1000, -1000, -1000, -1000, -1000, -1000, 1542, -1000, -1000, 1065,
	-1000, -1000, -1000, -1000, -1000, -1000, 9888, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1936, 1935, 1494, 1641, 1933, 1929, 1637, 1928, 1927,
	1926, 1925, 1922, 1920, 101, 1632, 1627, 31, 1598, 1919,
	89, 1911, 1908, 1906, 98, 1905, 1904, 1902, 1900, 53,
	1899, 1898, 1560, 1553, 1512, 1504, 1897, 1896, 93, 1894,
	18, 1893, 73, 1890, 38, 132, 2196, 127, 1889, 1888,
	1886, 27, 88, 72, 1881, 92, 1880, 1879, 51, 39,
	20, 23, 1876, 123, 128, 1327, 50, 1872, 1871, 130,
	1862, 30, 28, 379, 141, 138, 126, 116, 1859, 1850,
	1847, 1845, 55, 1842, 3, 1839, 1837, 12, 65, 68,
	1834, 22, 19, 1832, 1830, 114, 1825, 82, 109, 1417,
	64, 119, 179, 1819, 100, 11, 85, 1816, 1813, 117,
	42, 1812, 40, 75, 121, 1811, 57, 146, 69, 21,
	62, 96, 1810, 1809, 1805, 74, 1799, 104, 90, 1795,
	1793, 76, 1792, 120, 122, 1790, 1789, 112, 1787, 1786,
	135, 147, 1785, 1784, 144, 1783, 9, 43, 67, 36,
	1423, 1415, 105, 58, 25, 24, 1781, 2052, 944, 822,
	37, 77, 71, 49, 81, 56, 60, 140, 29, 1780,
	1779, 111, 1777, 1775, 1771, 1770, 1768, 80, 1767, 1766,
	79, 131, 13, 4, 17, 87, 41, 26, 86, 125,
	139, 106, 1765, 84, 108, 52, 113, 1759, 1758, 1156,
	158, 1757, 1756, 1753, 1152, 1072, 818, 210, 1752, 1750,
	708, 659, 1740, 1738, 61, 1737, 142, 1735, 1733, 136,
	124, 15, 1732, 48, 44, 91, 1731, 97, 63, 0,
	2285, 2268, 1730, 115, 70, 1729, 1726, 1725, 1724, 33,
	1, 10, 6, 7, 5, 59, 32, 1722, 1721, 118,
	34, 66, 1714, 143, 1711, 1707, 1704, 46, 1701, 14,
	1700, 16, 1695, 1691, 8, 2, 1686, 1683, 134, 1681,
	95, 1677, 1457, 1676, 137, 1675, 1660, 1514, 47, 83,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 18, 269,
	269, 271, 271, 33, 33, 34, 34, 35, 35, 35,
	35, 10, 10, 11, 11, 82, 82, 83, 83, 148,
	148, 148, 148, 84, 84, 56, 56, 56, 147, 237,
	237, 238, 238, 238, 238, 238, 238, 239, 239, 239,
	239, 239, 239, 239, 235, 235, 236, 233, 233, 234,
	234, 234, 234, 275, 275, 146, 146, 87, 87, 242,
	242, 242, 242, 240, 240, 240, 240, 240, 243, 241,
	244, 244, 244, 244, 244, 181, 181, 181, 37, 12,
	62, 62, 13, 9, 9, 130, 130, 91, 91, 186,
	186, 186, 72, 72, 51, 51, 51, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 131, 131,
	132, 132, 25, 30, 36, 36, 36, 36, 36, 277,
	277, 68, 68, 68, 68, 69, 69, 144, 144, 144,
	144, 144, 63, 8, 8, 58, 58, 59, 59, 60,
	60, 61, 61, 278, 278, 24, 24, 24, 75, 75,
	137, 137, 137, 139, 139, 138, 138, 138, 116, 116,
	116, 38, 96, 96, 105, 105, 106, 106, 192, 107,
	107, 29, 29, 46, 46, 44, 44, 44, 44, 44,
	44, 45, 45, 47, 47, 47, 47, 47, 47, 47,
	250, 250, 250, 253, 253, 249, 251, 251, 252, 252,
	276, 276, 117, 117, 117, 86, 85, 85, 89, 89,
	88, 90, 90, 185, 114, 114, 114, 114, 133, 134,
	134, 135, 135, 136, 136, 113, 113, 165, 165, 48,
	48, 95, 95, 97, 97, 155, 155, 155, 156, 156,
	154, 154, 154, 154, 187, 187, 187, 187, 187, 187,
	187, 187, 266, 266, 266, 267, 267, 184, 184, 188,
	188, 188, 188, 188, 188, 182, 182, 182, 182, 183,
	183, 193, 193, 120, 120, 120, 120, 118, 118, 119,
	119, 189, 189, 189, 189, 115, 115, 190, 190, 190,
	149, 149, 196, 196, 196, 214, 214, 94, 94, 94,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 198, 198, 198, 198,
	200, 200, 200, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 213, 213, 213,
	213, 213, 201, 201, 208, 208, 209, 209, 210, 211,
	202, 202, 203, 203, 204, 205, 212, 212, 212, 212,
	216, 216, 206, 206, 206, 206, 206, 207, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 128, 128, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 159, 159, 159, 159,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 245, 245, 245, 245, 245, 245, 245, 247, 247,
	248, 248, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 254,
	254, 255, 255, 257, 257, 258, 258, 259, 260, 260,
	260, 261, 262, 262, 256, 256, 263, 263, 263, 264,
	264, 265, 265, 265, 265, 265, 171, 171, 171, 172,
	172, 173, 179, 179, 179, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 70, 70, 70, 70, 70, 102, 102, 168, 168,
	166, 166, 166, 170, 170, 121, 121, 215, 215, 215,
	215, 215, 215, 215, 122, 122, 122, 129, 123, 123,
	124, 124, 124, 124, 124, 124, 162, 163, 125, 125,
	125, 164, 164, 174, 178, 178, 177, 176, 176, 175,
	175, 152, 152, 153, 153, 151, 150, 110, 110, 109,
	109, 108, 108, 279, 279, 180, 180, 111, 111, 112,
	104, 104, 191, 191, 191, 191, 98, 98, 77, 77,
	99, 99, 73, 73, 76, 76, 74, 74, 74, 74,
	92, 92, 93, 93, 71, 71, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 217, 217, 217,
	167, 65, 65, 65, 66, 66, 67, 67, 222, 222,
	222, 223, 223, 223, 223, 221, 221, 221, 221, 221,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 3, 4, 4, 2, 5, 5, 2, 2,
	0, 2, 0, 6, 6, 5, 5, 4, 12, 4,
	12, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 3, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 7, 4, 6, 3, 1, 5,
	6, 9, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 223, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 102, 124, 205, 101, 87, 118, 226,
	233, -44, -46, 242, -145, 245, 35, 254, 60, 97,
	228, 221, 222, 279, 68, -250, -47, -45, 327, 302,
	308, 237, -48, 263, 294, 330, 263, 133, 80, 297,
	-268, -99, 263, 80, -74, -65, 319, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	108, 109, 112, 114, 119, 124, 125, 126, 127, 134,
	137, 139, 132, 147, 149, 150, 153, 152, 157, 160,
	163, 165, 166, 167, 170, 168, 172, 173, 175, 174,
	180, 182, 183, 185, 188, 191, 194, 197, 198, 199,
	200, 203, 205, 207, 208, 209, 211, 212, 214, 215,
	216, 217, 218, 221, 219, 220, 222, 223, 224, 226,
	228, 229, 231, 243, 244, 255, 233, 234, 235, 236,
	239, 240, 242, 245, 247, 250, 253, 254, 256, 259,
	257, 252, 262, 264, 265, 266, 267, 268, 275, 279,
	280, 281, 282, 285, 286, 287, 289, 291, 292, 293,
	298, 303, 304, 305, 306, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 50, 51, 52, 55, 82, 84,
	85, 100, 103, 104, 110, 120, 122, 128, 129, 138,
	140, 141, 142, 144, 155, 169, 179, 181, 192, 196,
	202, 204, 210, 230, 238, 248, 249, 258, 260, 270,
	271, 272, 276, 277, 294, 295, -268, -73, -65, 80,
	89, 137, 287, 286, 80, 133, 263, 297, -17, 327,
	-29, -7, -15, -4, -24, -38, -14, -32, -18, -33,
	-34, -35, -16, 23, -221, 4, -229, -231, -230, -232,
	57, 69, 117, 136, 130, 146, 148, 156, 158, 171,
	193, 195, 227, 246, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 48, 49, 53, 56, 58, 64,
	68, 72, 73, 74, 75, 76, 77, 86, 88, 90,
	91, 92, 95, 97, 99, 105, 106, 107, 113, 115,
	116, 118, 121, 123, 131, 133, 135, 143, 145, 151,
	154, 159, 161, 162, 176, 177, 178, 184, 186, 187,
	189, 190, 201, 206, 213, 225, 237, 241, 251, 261,
	263, 269, 273, 274, 278, 283, 284, 288, 290, 296,
	297, 299, 300, 301, 302, -65, -65, -65, 205, 22,
	-272, 22, -273, -274, 68, 94, 118, 237, 137, 89,
	286, -272, -69, 233, -65, -141, 160, 240, 54, 230,
	275, -142, -140, -220, 270, 170, -100, -65, 4, 22,
	54, 80, 59, 81, 119, 133, 134, 64, 65, 150,
	264, 270, 275, 68, 289, 266, -277, 275, 275, -277,
	-277, -68, 275, 273, -69, -220, -276, 263, 263, 288,
	297, -130, 80, 284, -45, -47, -46, -88, -89, 283,
	143, 99, 190, -44, -46, -250, -253, 211, -249, -65,
	-253, -85, -86, 22, 91, 331, -189, -73, 187, -112,
	327, -3, -189, 128, -73, -76, 128, -73, -65, -189,
	128, 273, 331, -99, -92, -65, -151, -150, 329, 116,
	116, 327, -109, -110, -150, -151, 116, 145, 145, -190,
	-189, -65, 128, -77, 128, -76, -101, 128, -100, -101,
	128, -195, -194, -223, 4, -229, -231, -230, 294, 263,
	133, -169, 327, -126, 327, -65, 22, 186, 331, 186,
	-65, -141, 52, -141, 243, 327, -143, -63, -64, 147,
	207, 273, 312, 116, 306, -81, 5, 86, -103, 329,
	54, 243, 116, -269, 186, 116, 116, 116, 116, 116,
	116, 306, 147, 207, 255, 263, 297, 116, -144, -63,
	-64, -144, 273, -69, -115, -189, -100, 128, -65, -100,
	133, -65, 128, -88, -89, -114, -133, -134, 159, 184,
	-117, 22, 91, -117, -117, 44, 328, 328, 331, -253,
	-93, 327, -104, -191, -157, 319, -159, 317, 318, 324,
	176, 307, -171, -161, -174, 100, 230, 327, -73, -160,
	332, 9, -247, -46, 29, -172, -173, 48, -65, 7,
	8, 5, 6, -71, -198, -167, -207, 278, 105, 178,
	-245, -246, 4, -229, -222, -199, -209, -203, -206, 144,
	57, 73, 76, 74, 77, 241, 288, 49, 28, 103,
	104, 196, 202, 260, 276, 277, 128, 179, 129, 55,
	120, 155, 93, 37, 39, 41, 42, 50, 51, 82,
	84, 85, 110, 138, 140, 141, 142, 181, 210, 248,
	258, 271, 272, 295, -230, -210, -211, -204, -205, -212,
	-104, -112, 319, -73, 327, -111, -180, -157, 86, -53,
	219, -52, 21, 23, 94, 292, 100, 252, 267, 234,
	252, 267, 234, 219, 100, 332, 219, 219, 100, -227,
	-224, 9, -223, 5, -74, 331, -221, 319, -228, -227,
	256, 328, -98, -73, -110, -190, -75, -73, -75, 242,
	-65, 30, 100, -55, 331, 47, 224, 100, -55, 331,
	100, -55, 100, 328, 331, -189, 128, -76, 30, -168,
	-196, -197, -199, -208, -202, -206, -207, 40, 46, 45,
	268, 169, 238, 249, 38, 185, 139, 138, 140, 141,
	142, 248, 37, 210, 110, 93, 85, 84, 181, 42,
	41, -210, -211, -204, -205, 82, 271, 272, 144, 39,
	51, 50, 295, 258, -102, -157, -268, -274, -268, 30,
	-140, -220, -102, 331, 331, 157, -80, 163, 175, 125,
	-219, 86, -225, -218, -181, 9, 278, 105, 186, -224,
	8, 318, -217, 7, 317, -219, 86, 71, -226, 5,
	4, -167, -181, 86, 160, -207, 329, -221, 244, -100,
	22, -220, -271, 113, -268, -220, -220, -220, -220, -220,
	-65, 157, -220, -220, 263, 133, 331, 331, -69, -55,
	331, 327, -87, 176, -251, 302, -87, 327, -66, 128,
	-65, -251, 176, -114, -134, -133, -135, -157, 22, -157,
	-159, -45, -45, -45, -90, -185, -157, -249, 30, -92,
	-95, 331, 116, 10, 11, 56, 33, 317, 318, 319,
	320, 111, 321, 322, 315, 316, 314, 310, 311, 312,
	62, 164, 232, 13, 14, 15, 26, 189, 158, 307,
	130, 246, 324, 16, 17, 18, 146, 36, 131, -70,
	30, 4, -78, -157, -157, -157, -157, -157, 195, -108,
	-152, 325, -46, 327, -46, -157, -102, 7, -46, -166,
	325, -175, -157, -109, 327, 5, 327, 5, -254, 303,
	113, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 204, -216,
	298, -216, -216, -200, 327, -200, -201, 327, -200, 304,
	308, 327, -95, -73, 331, 328, 331, 273, -131, 64,
	58, -147, 128, 58, -233, -65, 64, -234, 53, 284,
	206, 115, -131, 64, -131, 64, 64, -189, 33, -29,
	116, 33, -29, 116, 273, -76, -65, 273, 273, -189,
	-193, 309, -65, -193, 331, 116, 328, 331, -149, 300,
	-137, -29, 327, 86, 30, -137, -105, -106, -192, -107,
	-73, 327, -65, -65, -76, -77, -100, -101, -101, -17,
	-194, 100, -20, -29, -24, -38, -14, 328, 331, -94,
	29, -127, 327, 305, 167, 83, 126, 166, -128, 236,
	328, 331, 273, 116, 275, 328, -64, -63, -79, 209,
	250, 220, 239, 331, 8, 7, 7, -221, -270, -65,
	-73, -76, -64, -63, -189, -82, -92, -83, -65, -148,
	-147, -235, -236, -233, 133, 284, 106, 30, 100, -62,
	200, 30, 186, 176, -58, 265, 100, -136, 230, 231,
	331, -51, 31, 90, 327, 328, -149, -191, -97, -187,
	325, -189, -73, -46, -188, 327, -214, -196, -213, 215,
	216, 214, 218, 217, -196, -100, 270, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, 158,
	130, 246, 36, 131, -157, 273, -157, -157, -157, -157,
	168, 176, 178, 278, 105, 285, 91, 182, -279, 261,
	32, -164, -46, 327, -179, 27, 251, 22, -221, -171,
	230, 327, -152, -157, -153, -102, 328, 328, 331, -102,
	-170, 326, -166, -178, -177, 299, 328, -102, 296, 22,
	91, 319, 7, -127, -255, 108, 121, 327, 328, 328,
	-157, -157, -121, -215, -102, 4, 305, 167, 83, 126,
	166, 236, -121, -122, -157, -102, -123, -158, -159, 317,
	318, 324, 327, 230, -124, -157, -102, -157, 43, 154,
	274, -125, -157, 116, -102, -157, -157, -157, -102, -102,
	-102, 327, 7, 7, 270, 270, 7, -149, 328, -180,
	-52, -73, -65, -65, 176, -147, 128, -57, 176, -196,
	-65, 327, 327, 149, 149, -65, -65, 128, -65, 128,
	-65, -65, -53, 219, -29, 327, -29, 327, -65, 219,
	-65, -73, 219, -39, 127, 182, -42, 302, -227, 256,
	116, -73, -116, 225, -157, -116, -139, 186, -98, 294,
	-65, -116, -96, 331, 116, 312, -98, -55, -55, -55,
	-189, -196, 325, 325, 7, 273, 273, 273, 273, 327,
	-157, -270, -270, -63, 282, 61, 209, -225, 331, 328,
	328, 331, -66, 133, -66, -29, -100, 5, -29, -73,
	100, -59, 96, -278, 312, -65, -185, -20, -113, 121,
	-193, 331, 69, -120, 148, 171, 117, 156, 227, 136,
	7, 102, -154, 332, 327, -184, 308, -46, -188, -187,
	306, -157, -157, 273, -279, 261, -164, -157, 168, 178,
	278, 105, 285, 91, 182, 116, 327, -158, -158, -102,
	-161, 327, -102, 326, 335, 328, -157, 326, 326, 331,
	-176, -177, 95, -157, -89, 331, -88, -157, -102, -102,
	328, 328, -260, 194, 327, 327, -157, 30, 331, 328,
	116, 328, 328, -129, 201, 328, 10, 11, 317, 318,
	319, 320, 111, 321, 322, 315, 316, 314, 310, 311,
	312, 62, 164, 232, 13, 14, 15, 146, 131, -158,
	-158, -158, -102, 327, 328, -162, -163, 116, 113, 30,
	-125, -125, -125, 328, 116, -102, 331, 331, 331, 328,
	328, 328, 7, 328, 331, 328, 306, 306, 328, -113,
	273, 273, 100, 176, 291, -237, -234, -157, -91, -186,
	-65, -248, 327, -245, -246, -71, 327, 327, -50, 94,
	242, -132, 100, -55, 100, -55, 273, -131, 64, -102,
	-102, 273, 273, -42, 116, 262, 188, 256, -104, 177,
	-116, 63, 328, -149, -106, -97, -180, 328, 326, 7,
	7, 328, 167, 126, 166, -128, 166, -128, -128, 7,
	-65, -84, 132, -148, 327, -66, 327, 327, -87, 327,
	-65, -60, 153, -278, -224, -251, 328, -165, 123, 44,
	-187, 148, 148, -187, -120, 148, -118, 193, -118, -118,
	-266, 327, -17, 327, -184, -221, 325, 333, -102, -183,
	-182, 30, -65, 191, 328, -157, -157, -158, -158, 116,
	327, -157, -168, 26, 26, 328, -102, 328, 331, -153,
	-157, 328, -166, 97, -157, 269, 328, 296, -89, -89,
	-89, 5, -261, -65, 327, 300, -88, 328, -214, -196,
	-157, -162, -157, -214, -196, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, 91, 176, 182, -158, 331, -102,
	328, -163, -162, -157, -157, -196, 328, 328, 328, -102,
	-157, -157, -157, 328, 7, -165, -65, -65, -147, 100,
	-238, 64, -239, 56, 106, 68, 176, 178, 284, 206,
	53, 86, 213, 328, 328, 331, -72, -109, 56, -72,
	-157, 327, -91, -92, 176, 86, 176, 86, 79, 280,
	-65, -65, -73, -65, -65, 328, 328, -65, -73, -228,
	270, 327, -138, 327, 186, -29, -116, 312, 326, 326,
	328, 131, -91, 327, -92, -82, 30, -91, 186, -61,
	152, -278, -224, -58, -257, 301, -157, -102, -187, -187,
	-119, 290, 186, 148, -187, 326, 328, -267, 7, 326,
	-195, -183, 7, -156, -155, 114, 174, 328, -65, 327,
	-184, 26, 26, -157, -168, 328, -157, -157, 328, -157,
	326, -157, 5, -157, 328, 328, 328, -262, -65, -157,
	328, 328, 328, -163, 116, 91, 182, 327, -157, 328,
	328, 331, 328, 328, 328, -257, -147, -65, -100, -65,
	106, 128, 178, 149, 327, -158, -73, -146, -275, 67,
	259, -186, -51, -100, -51, 328, -102, 328, 328, 178,
	178, -157, -196, -55, -55, 273, 273, 273, 273, -160,
	-71, -65, -41, -40, 5, 92, -92, 64, -112, -46,
	327, 197, 328, -91, 328, 328, -29, 328, -73, -278,
	-224, -59, -258, -259, -65, -119, 327, -157, -187, -154,
	328, 331, -184, 328, 326, 331, 334, 312, -184, 327,
	-92, -182, -157, -157, 328, 328, -89, -256, 199, 328,
	-158, 116, 327, -168, 328, -157, -239, -66, 176, -157,
	-67, 327, -84, 327, -72, -89, 213, -54, 56, -65,
	-65, 327, 327, 327, 331, 328, -43, 312, 286, 177,
	328, -65, -65, -146, 328, -84, -146, 327, -224, -60,
	331, 30, -92, -184, 7, -183, -17, -155, -221, 325,
	-183, -92, 328, 328, -89, 44, -158, -168, 328, 328,
	100, 328, -242, 165, -65, -92, -51, 328, -73, -49,
	290, -100, -102, -102, -102, -40, 5, 242, -149, 327,
	-84, -146, -84, -91, -61, -259, -261, 328, -182, 326,
	7, 328, -263, 208, 231, -102, 328, 106, -240, -243,
	-241, 186, 117, 198, 247, 328, 328, -87, -157, 328,
	328, -89, -105, -92, -84, 328, -184, 326, 328, -264,
	-265, 36, 281, 71, -157, -264, -65, -241, 186, -243,
	186, 286, 89, -242, 328, -149, 328, -146, -183, -265,
	203, 112, 230, 203, 112, -244, 173, 224, 47, 242,
	-244, -240, -56, 47, 224, -84, 26, 20, 178, 86,
	-265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 429, 0, 0, 0, 0, 0, 0,
	0, 401, -2, 0, 157, 0, 350, 0, 350, 350,
	354, 0, 0, 431, 316, 428, -2, 439, 0, 0,
	0, 437, 415, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 961, 890, 896, 897, 921, 922, 923,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 0, 0, 892, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 228, 935, 936, 937, 938, 939,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 121, 128, 129, 1013, 131,
	0, 138, 139, 140, 142, 143, 144, 145, 146, 147,
	148, 0, 343, 1037, 356, 152, 990, 1042, 949, 1114,
	1059, 160, 170, 0, 1120, -2, 174, 97, 203, 204,
	0, 208, 0, 210, 230, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 225, 0, 361, 349, 361, 346,
	347, 348, 351, 0, 342, 151, 0, 430, 0, 0,
	0, 0, 0, 315, -2, 411, 412, -2, 0, 434,
	434, 434, 0, 0, 412, 0, 420, 1017, 423, 903,
	421, 0, 0, 436, 435, 0, 416, 511, 0, 459,
	0, 2, 0, 1098, 511, 0, 1098, 895, 0, 0,
	1098, 0, 0, 136, 137, 900, 898, 899, 0, 0,
	0, 0, 893, 869, 867, 868, 0, 0, 0, 0,
	517, 87, 1098, 55, 1098, 888, 55, 1098, 95, 55,
	1098, 0, 116, 118, 931, 932, 933, 934, 1125, 0,
	0, 0, 0, 126, 0, 130, 132, 0, 0, 0,
	355, 153, 1087, 155, 0, 0, 159, 161, 162, 0,
	0, 0, 0, 0, 0, 173, 198, 199, 98, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 221, 222, 0, 0, 0, 344, 357,
	358, 345, 0, 353, 55, 515, 288, 1098, 427, 288,
	925, 427, 1098, -2, 0, 407, 446, 447, 0, 0,
	0, 432, 433, 0, 0, 0, 403, 404, 0, 422,
	0, 0, 462, 880, 884, 885, 614, 0, 0, 0,
	0, 0, 0, 706, 708, 1092, 1114, 0, 710, 711,
	0, 713, 715, 716, 0, 719, 720, 860, 892, 906,
	907, 908, 909, 0, 0, 912, 0, 914, 915, 916,
	760, 729, -2, -2, 904, 546, 547, 548, 549, -2,
	1127, 733, 735, 737, 738, 739, 740, 0, 1076, 1093,
	1094, 1110, 1111, 1119, 1123, 1124, 1098, 1107, 1099, 1088,
	1096, 1105, 966, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 930, 576, 577, 582, 583, 585,
	462, 460, 512, 513, 0, 0, 877, 875, 876, 32,
	339, 34, 0, 339, 339, 0, 0, 0, 0, 237,
	0, 0, 239, 0, 0, 0, 0, 0, 0, 502,
	64, 65, 201, 202, 891, 0, 865, 866, 502, 66,
	77, 0, 0, 886, 870, 521, 0, 378, 0, 0,
	518, 0, 0, 89, 0, 53, 54, 0, 91, 0,
	0, 93, 0, 429, 0, 0, 1098, 0, 429, 0,
	818, 529, 530, 531, 532, 533, 611, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 553, 554, 555,
	556, 557, 558, 559, 573, 0, 552, 552, 552, 565,
	566, 574, 575, 580, 581, 592, 593, 595, 597, 591,
	591, 591, 588, 589, 0, 816, 0, 141, 0, 0,
	156, 0, 0, 0, 0, 0, 165, 185, 186, 187,
	166, 168, 175, 177, 178, 179, 188, 189, 190, 191,
	305, 0, 307, 917, 0, 167, 169, 171, 172, 192,
	193, 194, 195, 196, 197, 0, 0, 99, 207, 205,
	206, 209, 211, 0, 229, 212, 213, 214, 215, 216,
	217, 220, 223, 224, 0, 0, 0, 0, 352, 308,
	0, 246, 0, 0, 311, 426, 0, 0, 0, 1098,
	924, 366, 0, 410, 444, 445, 448, 451, 452, 449,
	614, 417, 418, 419, 440, 441, 326, 424, 0, 0,
	521, 0, 0, 0, 0, 0, 0, 795, 796, 797,
	798, 799, 800, 803, 804, 801, 802, 805, 806, 807,
	0, 0, 0, 808, 809, 810, 0, 0, 812, 0,
	814, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	0, 883, 811, 619, 620, 621, 643, 644, 0, 707,
	871, 864, 709, 0, -2, 816, 0, 712, 717, 718,
	0, 0, 859, -2, 0, 911, 0, 611, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 839, 845,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 579,
	590, 587, 586, 563, 0, 562, 560, 0, 564, 0,
	0, 0, 521, 0, 0, 879, 0, 0, 0, 0,
	338, 36, 1098, 0, 57, 0, 0, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 235,
	0, 0, 236, 0, 0, 0, 894, 0, 0, 0,
	69, 0, 901, 76, 0, 0, 0, 0, 390, 0,
	390, 380, 0, 0, 0, 390, 393, 394, 396, 397,
	0, 0, 519, 88, 889, 55, 96, 55, 55, 102,
	117, 0, 119, 122, 123, 124, 125, 120, 0, 522,
	524, 534, 0, 598, 599, 600, 601, 602, 603, 612,
	127, 0, 0, 0, 0, 158, 163, 164, 362, 0,
	182, 0, 184, 0, 306, 919, 918, 100, 231, 149,
	226, 227, 359, 360, 516, 0, 0, 245, 900, 247,
	249, 250, 251, 252, 925, 0, 925, 0, 0, 309,
	0, 0, 0, 0, 368, 374, 0, 450, 453, 454,
	0, 443, 324, 325, 429, 902, 456, 881, 502, 463,
	0, 473, 511, 488, 478, 0, 615, 525, 526, 567,
	568, 569, 570, 571, 616, 617, 0, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, -2, -2, -2,
	635, 636, 637, -2, -2, -2, 641, 642, -2, 813,
	815, 0, 874, 0, -2, 0, 651, -2, -2, -2,
	655, 0, 657, 660, 662, 664, 0, 0, 0, 0,
	873, 674, 851, 0, 0, 792, 793, 794, 882, 659,
	0, 0, 872, 863, 0, 0, -2, 714, 0, 0,
	0, 822, 823, 858, 854, 0, 721, 439, 0, 0,
	0, 0, 0, 920, 770, 0, 0, 0, 734, 736,
	0, 0, 0, 0, 826, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 816, 836, 0, 0, 677, 0,
	0, 0, 0, 1114, 0, 816, 844, 0, 0, 0,
	0, 0, 816, 0, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 456, 514, 878,
	35, 328, 0, 0, 0, 38, 1098, 46, 0, 260,
	0, 0, 0, 0, 0, 341, 47, 1098, 55, 1098,
	55, 48, 33, 339, 233, 0, 234, 0, 332, 0,
	327, 330, 0, 76, 0, 0, 63, 0, 67, 78,
	0, 887, 86, 0, 520, 375, 390, 0, 0, 382,
	379, 377, 521, 0, 0, 0, 0, 90, 92, 94,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 133, 134, 154, 180, 181, 183, 176, 0, 254,
	287, 0, 0, 925, 0, 243, 288, 310, 312, 0,
	0, 370, 374, 0, 373, 427, 442, 0, 458, 0,
	461, 0, 0, 0, 0, 0, 508, 508, 508, 506,
	482, 429, 488, 0, 0, 500, 0, -2, 478, 0,
	0, -2, -2, 0, 0, 0, 675, -2, 656, 658,
	661, 663, 665, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 861, 864, -2, 817, 820, 821, 0,
	0, 855, 0, 0, 0, 0, 438, 439, 439, 439,
	727, 0, 728, 0, 0, 0, 0, 0, 0, 743,
	0, 744, 745, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 680,
	681, 682, 0, 0, 747, 842, 843, 0, 0, 0,
	0, 0, 0, 752, 0, 849, 0, 0, 0, 756,
	757, 758, 0, 550, 0, 572, 594, 596, 584, 458,
	0, 0, 0, 0, 56, 258, 277, 0, 0, 317,
	323, 323, 0, 730, 731, 0, 0, 0, 40, 0,
	0, 0, 0, 44, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 79, 388, 389,
	376, 387, 0, 390, 395, 392, 398, 0, 527, 0,
	0, 535, 604, 605, 606, 607, 608, 609, 610, 0,
	150, 241, 0, 248, 0, 0, 0, 246, 0, 0,
	0, 372, 374, 0, 365, 366, 425, 764, 0, 0,
	464, 0, 0, 0, 0, 0, 503, 507, 504, 505,
	0, 0, 0, 0, 500, 470, 0, 0, 0, 477,
	499, 0, 498, 487, -2, 618, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 852, 0, 787, 0, 0,
	863, -2, 824, 853, 857, 0, 722, 0, 0, 0,
	0, 913, 768, 769, 773, 0, 0, 732, 0, 0,
	825, 835, 837, 678, 679, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, -2, -2, -2, 696, 697,
	698, -2, -2, -2, 0, 0, 0, 838, 0, 0,
	790, 840, 841, 846, 847, 0, 749, 750, 751, 848,
	0, 0, 0, 578, 0, 764, 334, 336, 37, 0,
	259, 0, 262, 0, 0, 0, 0, 268, 269, 0,
	0, 0, 0, 279, 286, 0, 326, 905, 0, 326,
	0, 0, 0, 0, 0, 52, 0, 0, 340, 0,
	55, 55, 329, 0, 0, 0, 0, 333, 331, 68,
	0, 0, 0, 0, 0, 381, 391, 0, 528, 523,
	613, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	374, 0, 367, 368, 413, 0, 457, 455, 490, 0,
	492, 0, 0, 0, 494, 473, 483, 0, 485, 488,
	0, 475, 0, 0, 468, 0, 467, 488, 496, 0,
	0, 0, 0, -2, 0, 668, -2, -2, 786, 817,
	862, 856, 910, 439, 723, 725, 726, 775, 772, 0,
	759, 741, 742, 834, 0, 0, 0, 0, 817, 789,
	748, 0, 754, 755, 551, 414, 39, 0, 263, 264,
	925, 0, 267, 270, 0, 272, 927, 254, 0, 283,
	284, 318, 319, 322, 320, 323, 439, 281, 0, 41,
	42, 51, 59, 43, 49, 0, 0, 0, 0, 501,
	0, 0, 0, 73, 71, 0, 0, 0, 399, 400,
	0, 0, 286, 0, 276, 254, 244, 286, 0, 0,
	369, 370, 763, 765, 0, 491, 0, 510, 493, 488,
	484, 0, 500, 429, 471, 0, 472, 0, 500, 0,
	0, 479, -2, -2, 669, 788, 0, 439, 0, 761,
	-2, 0, 0, 0, 791, 0, 261, 265, 0, 0,
	292, 0, 280, 0, 326, 0, 0, 61, 0, 335,
	337, 0, 0, 0, 0, 75, 72, 0, 0, 384,
	521, 386, 0, 254, 286, 242, 254, 0, 371, 372,
	0, 0, 0, 0, 486, 480, 0, 469, 465, 0,
	476, 0, 497, 724, 778, 0, -2, 0, 704, 753,
	0, 271, 297, 0, 0, 0, 321, 722, 288, 45,
	0, 58, 0, 0, 439, 74, 70, 0, 385, 0,
	274, 254, 313, 0, 364, 766, 767, 509, 474, 488,
	0, 495, 0, 0, 0, 774, 705, 0, 273, 293,
	294, 0, 289, 290, 291, 926, 285, 292, 60, 238,
	240, 0, 521, 0, 275, 286, 500, 466, 771, 776,
	779, -2, 1062, 958, 0, 777, 266, 295, 0, 296,
	0, 0, 0, 297, 0, 383, 257, 254, 481, 0,
	781, 782, 783, 784, 785, 298, 0, 301, 302, 0,
	299, 282, 253, 255, 256, 314, 0, 300, 303, 304,
	780,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 315, 3, 321, 316, 3,
	327, 328, 319, 317, 331, 318, 329, 320, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 335, 330,
	310, 312, 311, 3, 332, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 325, 3, 326, 322, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 333, 314, 334, 324,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 313, 57653, 323, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:786
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:792
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:798
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:894
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:917
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:990
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:994
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:998
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1002
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1067
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1470
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1587
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1687
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1734
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1738
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1744
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1748
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1752
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1756
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = DropDefault
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			return unimplemented(sqllex)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2049
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			return unimplemented(sqllex)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			return unimplemented(sqllex)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
			return unimplemented(sqllex)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2060
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			return unimplemented(sqllex)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2066
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = true
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = false
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return unimplemented(sqllex)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2181
		{
			return unimplemented(sqllex)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return unimplemented(sqllex)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2185
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = Ascending
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = Descending
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2239
		{
			return unimplemented(sqllex)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2240
		{
			return unimplemented(sqllex)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = true
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = false
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2254
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2296
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2297
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.str = ""
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.str = ""
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.str = ""
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.str = ""
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2420
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2484
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			return unimplemented(sqllex)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2518
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2519
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2747
		{
			return unimplemented(sqllex)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			return unimplemented(sqllex)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			return unimplemented(sqllex)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			return unimplemented(sqllex)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2755
		{
			return unimplemented(sqllex)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2759
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			return unimplemented(sqllex)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2767
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = true
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = false
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = false
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = true
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2791
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2949
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &From{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2985
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3030
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3047
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = nil
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = true
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = false
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.str = astFullJoin
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.str = astLeftJoin
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.str = astRightJoin
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.str = astInnerJoin
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3225
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3325
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3340
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3349
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3417
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = nil
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3562
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3594
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3634
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = year
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = month
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = day
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = hour
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = minute
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = month
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = hour
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = minute
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = minute
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = nil
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = second
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3729
		{
			return unimplemented(sqllex)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3764
		{
			return unimplemented(sqllex)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			return unimplemented(sqllex)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3998
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4224
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4225
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4248
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			return unimplemented(sqllex)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4269
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4287
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4318
		{
			return unimplemented(sqllex)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4362
		{
			return unimplemented(sqllex)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4363
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = Window(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4398
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.str = ""
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4460
		{
			return unimplemented(sqllex)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			return unimplemented(sqllex)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4462
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			return unimplemented(sqllex)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4466
		{
			return unimplemented(sqllex)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			return unimplemented(sqllex)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			return unimplemented(sqllex)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4475
		{
			return unimplemented(sqllex)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			return unimplemented(sqllex)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = Any
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = Some
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = All
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = Plus
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = Minus
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = Mult
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = Div
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = FloorDiv
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = Mod
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = Bitand
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = Bitor
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = Pow
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = Bitxor
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = LT
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = GT
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = EQ
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = LE
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = GE
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = NE
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = Like
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = NotLike
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = ILike
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = NotILike
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4841
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4959
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5003
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5039
		{
			return unimplemented(sqllex)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = DNull
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.str = ""
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
