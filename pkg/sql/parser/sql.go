// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESET = 57563
const RESTORE = 57564
const RESTRICT = 57565
const RETURNING = 57566
const REVOKE = 57567
const RIGHT = 57568
const ROLLBACK = 57569
const ROLLUP = 57570
const ROW = 57571
const ROWS = 57572
const RSHIFT = 57573
const STATUS = 57574
const SAVEPOINT = 57575
const SEARCH = 57576
const SECOND = 57577
const SELECT = 57578
const SERIAL = 57579
const SERIALIZABLE = 57580
const SESSION = 57581
const SESSION_USER = 57582
const SET = 57583
const SHOW = 57584
const SIMILAR = 57585
const SIMPLE = 57586
const SMALLINT = 57587
const SMALLSERIAL = 57588
const SNAPSHOT = 57589
const SOME = 57590
const SPLIT = 57591
const SQL = 57592
const START = 57593
const STDIN = 57594
const STRICT = 57595
const STRING = 57596
const STORING = 57597
const SUBSTRING = 57598
const SYMMETRIC = 57599
const SYSTEM = 57600
const TABLE = 57601
const TABLES = 57602
const TEMPLATE = 57603
const TEXT = 57604
const THEN = 57605
const TIME = 57606
const TIMESTAMP = 57607
const TIMESTAMPTZ = 57608
const TO = 57609
const TRAILING = 57610
const TRANSACTION = 57611
const TREAT = 57612
const TRIM = 57613
const TRUE = 57614
const TRUNCATE = 57615
const TYPE = 57616
const UNBOUNDED = 57617
const UNCOMMITTED = 57618
const UNION = 57619
const UNIQUE = 57620
const UNKNOWN = 57621
const UPDATE = 57622
const UPSERT = 57623
const USER = 57624
const USERS = 57625
const USING = 57626
const VALID = 57627
const VALIDATE = 57628
const VALUE = 57629
const VALUES = 57630
const VARCHAR = 57631
const VARIADIC = 57632
const VIEW = 57633
const VARYING = 57634
const WHEN = 57635
const WHERE = 57636
const WINDOW = 57637
const WITH = 57638
const WITHIN = 57639
const WITHOUT = 57640
const YEAR = 57641
const ZONE = 57642
const NOT_LA = 57643
const WITH_LA = 57644
const AS_LA = 57645
const POSTFIXOP = 57646
const UMINUS = 57647

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5399

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 29,
	324, 29,
	-2, 413,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	98, 396,
	142, 396,
	158, 396,
	183, 396,
	189, 396,
	277, 396,
	-2, 386,
	-1, 64,
	98, 395,
	142, 395,
	158, 395,
	183, 395,
	189, 395,
	277, 395,
	-2, 389,
	-1, 73,
	1, 29,
	324, 29,
	-2, 413,
	-1, 424,
	1, 193,
	324, 193,
	-2, 978,
	-1, 461,
	158, 423,
	183, 423,
	-2, 392,
	-1, 464,
	158, 422,
	183, 422,
	-2, 390,
	-1, 596,
	158, 422,
	183, 422,
	-2, 393,
	-1, 655,
	321, 912,
	-2, 905,
	-1, 656,
	321, 913,
	-2, 906,
	-1, 662,
	5, 581,
	321, 581,
	-2, 1082,
	-1, 686,
	5, 542,
	-2, 1056,
	-1, 687,
	5, 575,
	321, 575,
	-2, 1058,
	-1, 688,
	5, 550,
	-2, 1059,
	-1, 689,
	5, 549,
	-2, 1060,
	-1, 690,
	5, 575,
	321, 575,
	-2, 1063,
	-1, 691,
	5, 575,
	321, 575,
	-2, 1064,
	-1, 692,
	5, 576,
	-2, 1067,
	-1, 693,
	5, 536,
	-2, 1068,
	-1, 694,
	5, 536,
	-2, 1069,
	-1, 695,
	5, 557,
	-2, 1073,
	-1, 696,
	5, 537,
	-2, 1078,
	-1, 697,
	5, 538,
	-2, 1079,
	-1, 698,
	5, 539,
	-2, 1080,
	-1, 699,
	5, 540,
	-2, 1081,
	-1, 700,
	5, 536,
	-2, 1086,
	-1, 701,
	5, 543,
	-2, 1091,
	-1, 702,
	5, 541,
	-2, 1094,
	-1, 703,
	5, 573,
	321, 573,
	-2, 1096,
	-1, 704,
	5, 577,
	-2, 1099,
	-1, 705,
	5, 579,
	-2, 1100,
	-1, 706,
	5, 572,
	321, 572,
	-2, 1104,
	-1, 964,
	98, 396,
	142, 396,
	158, 396,
	183, 396,
	189, 396,
	277, 396,
	-2, 700,
	-1, 973,
	321, 889,
	-2, 877,
	-1, 1181,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 616,
	-1, 1182,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 617,
	-1, 1183,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 618,
	-1, 1187,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 622,
	-1, 1188,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 623,
	-1, 1189,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 624,
	-1, 1192,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 629,
	-1, 1198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 631,
	-1, 1201,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 636,
	-1, 1202,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 637,
	-1, 1203,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 638,
	-1, 1230,
	194, 771,
	-2, 774,
	-1, 1259,
	115, 811,
	321, 912,
	-2, 905,
	-1, 1260,
	115, 812,
	-2, 1052,
	-1, 1261,
	115, 813,
	-2, 977,
	-1, 1262,
	115, 814,
	-2, 946,
	-1, 1263,
	115, 815,
	-2, 961,
	-1, 1264,
	115, 816,
	-2, 976,
	-1, 1265,
	115, 817,
	-2, 1020,
	-1, 1419,
	98, 396,
	142, 396,
	158, 396,
	183, 396,
	189, 396,
	277, 396,
	-2, 472,
	-1, 1423,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 630,
	-1, 1424,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 632,
	-1, 1429,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 633,
	-1, 1447,
	194, 770,
	-2, 773,
	-1, 1637,
	1, 473,
	68, 473,
	98, 473,
	116, 473,
	120, 473,
	122, 473,
	135, 473,
	142, 473,
	147, 473,
	155, 473,
	158, 473,
	170, 473,
	183, 473,
	185, 473,
	189, 473,
	224, 473,
	226, 473,
	277, 473,
	284, 473,
	294, 473,
	295, 473,
	303, 473,
	320, 473,
	322, 473,
	324, 473,
	325, 473,
	-2, 472,
	-1, 1639,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 634,
	-1, 1644,
	145, 0,
	-2, 650,
	-1, 1654,
	194, 772,
	-2, 775,
	-1, 1688,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 677,
	-1, 1689,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 678,
	-1, 1690,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 679,
	-1, 1694,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 683,
	-1, 1695,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 684,
	-1, 1696,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 685,
	-1, 1817,
	145, 0,
	-2, 651,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 654,
	-1, 1821,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 656,
	-1, 1924,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 655,
	-1, 1925,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 657,
	-1, 1932,
	145, 0,
	-2, 686,
	-1, 1986,
	145, 0,
	-2, 687,
	-1, 2047,
	36, 0,
	129, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 1055,
}

const sqlNprod = 1200
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 27762

var sqlAct = [...]int{

	656, 2046, 2026, 1054, 2071, 1594, 2027, 2045, 1632, 1992,
	2028, 1861, 882, 1417, 1062, 465, 1633, 1905, 776, 654,
	709, 1665, 425, 1885, 1808, 1783, 1604, 294, 1739, 1414,
	1794, 86, 86, 86, 888, 1145, 280, 1395, 472, 63,
	1725, 760, 49, 296, 86, 86, 86, 632, 1393, 86,
	739, 1153, 86, 1124, 653, 646, 486, 1540, 745, 1120,
	86, 86, 1788, 1508, 282, 20, 528, 1138, 86, 86,
	1541, 1119, 86, 1610, 1160, 86, 86, 86, 86, 1344,
	63, 86, 86, 1228, 1458, 1288, 1619, 969, 884, 1123,
	1507, 1094, 1152, 1405, 1338, 1063, 844, 1018, 1027, 649,
	510, 1400, 615, 1238, 722, 719, 1285, 626, 1215, 470,
	1158, 905, 63, 1046, 837, 1212, 582, 749, 287, 28,
	286, 16, 288, 8, 1078, 1256, 1114, 724, 1087, 960,
	1155, 625, 529, 583, 520, 616, 999, 1003, 20, 523,
	522, 501, 910, 1127, 1056, 1740, 475, 64, 599, 598,
	464, 78, 600, 412, 839, 835, 648, 403, 516, 753,
	473, 82, 603, 581, 1446, 29, 1917, 65, 762, 1918,
	415, 469, 762, 1055, 762, 2062, 30, 54, 742, 2041,
	469, 2034, 1738, 268, 742, 2024, 1059, 1415, 1084, 913,
	914, 734, 28, 1097, 16, 2019, 8, 2015, 742, 1356,
	742, 56, 483, 1988, 1355, 489, 1084, 32, 496, 62,
	912, 462, 916, 451, 1982, 1964, 492, 742, 1738, 1047,
	1091, 913, 914, 1960, 422, 1970, 742, 1955, 45, 477,
	1954, 461, 1450, 1926, 915, 40, 1084, 1451, 57, 911,
	930, 1403, 44, 41, 916, 1915, 1912, 1899, 771, 1913,
	1738, 1896, 1894, 1872, 742, 1738, 742, 1449, 1871, 46,
	69, 1738, 1097, 1092, 1843, 42, 915, 1097, 1822, 1819,
	1811, 1097, 1084, 1097, 1050, 1403, 86, 86, 86, 86,
	86, 1759, 532, 71, 1097, 452, 1701, 1758, 1737, 921,
	1097, 1738, 1651, 1648, 913, 914, 1097, 1580, 1380, 1016,
	1053, 525, 525, 1093, 1090, 1574, 1525, 1097, 1053, 1526,
	1523, 1522, 72, 1097, 1097, 1521, 1457, 916, 1097, 1447,
	67, 921, 1097, 1383, 470, 1382, 68, 1149, 742, 1047,
	742, 1101, 530, 1096, 1097, 1083, 1097, 69, 1084, 915,
	1232, 1144, 931, 293, 763, 66, 43, 1109, 763, 1052,
	763, 1050, 1053, 1015, 770, 611, 1014, 771, 877, 876,
	71, 829, 59, 60, 31, 828, 742, 47, 499, 58,
	545, 482, 73, 1095, 931, 48, 505, 1741, 69, 69,
	1802, 861, 565, 51, 53, 1478, 1479, 62, 1418, 72,
	2060, 2044, 2033, 55, 921, 1997, 1983, 67, 1897, 86,
	1848, 71, 71, 68, 913, 914, 517, 1844, 610, 1355,
	932, 1836, 1835, 40, 86, 61, 509, 86, 86, 526,
	911, 41, 1058, 1582, 1834, 1830, 1829, 916, 1828, 1774,
	72, 72, 1716, 1711, 1710, 1709, 1659, 1089, 67, 1637,
	1768, 1609, 932, 42, 68, 1584, 766, 1385, 1530, 915,
	761, 86, 880, 1527, 86, 1515, 86, 86, 86, 1088,
	86, 1506, 1477, 66, 66, 715, 1474, 1473, 1471, 1463,
	1462, 1381, 1416, 507, 1302, 86, 1253, 597, 589, 1252,
	592, 610, 609, 887, 977, 1484, 86, 926, 923, 924,
	925, 917, 918, 919, 920, 922, 1667, 942, 1224, 532,
	86, 970, 2007, 66, 921, 1967, 296, 532, 1953, 86,
	1945, 1943, 1934, 1921, 86, 86, 86, 1908, 86, 926,
	923, 924, 925, 917, 918, 919, 920, 922, 1892, 942,
	1858, 1841, 2043, 743, 1813, 1777, 553, 86, 86, 714,
	913, 914, 1764, 1744, 1643, 86, 596, 86, 1624, 1478,
	1479, 1602, 1600, 554, 1599, 1597, 69, 931, 532, 532,
	809, 1549, 53, 916, 1548, 765, 296, 86, 768, 86,
	86, 86, 86, 86, 86, 86, 1767, 1505, 1467, 71,
	86, 86, 713, 1466, 588, 915, 86, 548, 550, 1443,
	1225, 1438, 1217, 862, 86, 738, 917, 918, 919, 920,
	922, 1371, 942, 746, 586, 886, 1329, 1328, 72, 584,
	751, 1316, 86, 913, 914, 86, 67, 1315, 1295, 1251,
	462, 1148, 68, 913, 914, 932, 1004, 821, 1007, 879,
	606, 607, 1011, 997, 996, 612, 1316, 827, 995, 783,
	461, 66, 994, 2017, 517, 505, 916, 993, 708, 1484,
	992, 991, 990, 989, 988, 987, 986, 985, 915, 777,
	860, 741, 984, 983, 1478, 1479, 982, 772, 915, 981,
	974, 963, 752, 470, 909, 755, 66, 881, 774, 508,
	487, 614, 551, 891, 1478, 1479, 541, 1480, 1481, 1482,
	1483, 1485, 539, 715, 1916, 1800, 823, 1824, 825, 1478,
	1479, 1803, 1799, 824, 1773, 925, 917, 918, 919, 920,
	922, 1772, 942, 730, 850, 857, 966, 856, 86, 970,
	866, 913, 914, 921, 1365, 1364, 86, 961, 1957, 1919,
	86, 1396, 1771, 1357, 86, 86, 1581, 1047, 86, 878,
	1009, 559, 1418, 86, 1010, 1529, 1528, 893, 1422, 895,
	1493, 462, 894, 575, 462, 462, 560, 86, 907, 86,
	86, 885, 86, 979, 1484, 86, 1339, 86, 86, 1789,
	86, 901, 532, 1454, 902, 903, 931, 1055, 715, 1021,
	1668, 1239, 1000, 579, 1484, 1351, 1536, 973, 2000, 1072,
	525, 863, 525, 1959, 867, 868, 869, 870, 871, 1484,
	976, 725, 2057, 726, 874, 875, 1377, 1075, 404, 63,
	1752, 276, 1100, 444, 63, 580, 2058, 1494, 1057, 450,
	1057, 449, 530, 445, 1032, 1034, 76, 1001, 1002, 409,
	1880, 1879, 1005, 1564, 405, 1563, 1533, 1494, 1008, 272,
	1079, 1532, 1425, 1020, 932, 1020, 1370, 1369, 942, 1560,
	1368, 1019, 1494, 1482, 1483, 1485, 1012, 1367, 406, 1049,
	1037, 619, 296, 1199, 277, 1098, 86, 1044, 1045, 1024,
	1763, 1043, 1040, 727, 1041, 293, 585, 408, 1028, 75,
	1139, 86, 86, 498, 1299, 1495, 1298, 273, 86, 1113,
	1091, 1170, 454, 557, 1081, 1567, 1080, 1958, 1082, 1071,
	1061, 1569, 1070, 1214, 1076, 1495, 732, 1073, 1863, 1074,
	1341, 747, 1221, 86, 1150, 459, 86, 1219, 731, 62,
	1495, 942, 923, 924, 925, 917, 918, 919, 920, 922,
	537, 942, 558, 1092, 809, 809, 1214, 731, 1169, 1031,
	2005, 1005, 756, 1008, 1551, 40, 1103, 1095, 1142, 1143,
	2068, 296, 1334, 41, 1002, 1001, 725, 1349, 726, 1345,
	1572, 1271, 1102, 1486, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1331, 1239, 1093, 1090, 42, 2079, 407, 1222, 1353,
	1589, 736, 1489, 1486, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 278, 2074, 725, 1117, 726, 1345, 1489, 1486, 1487,
	1488, 1480, 1481, 1482, 1483, 1485, 74, 762, 2057, 735,
	1116, 1118, 1586, 783, 783, 1948, 1301, 2030, 86, 86,
	86, 410, 1376, 279, 86, 2021, 293, 86, 727, 942,
	1030, 275, 274, 86, 86, 86, 86, 86, 77, 913,
	914, 86, 1378, 1095, 86, 86, 809, 1151, 2022, 1229,
	1095, 532, 1587, 1558, 86, 1017, 1233, 536, 1236, 86,
	1241, 86, 916, 576, 556, 727, 728, 2067, 86, 998,
	62, 1258, 1258, 1269, 751, 1280, 1134, 1309, 86, 1435,
	468, 1292, 1293, 1294, 915, 958, 555, 1930, 69, 1226,
	1223, 1105, 1552, 1433, 53, 455, 40, 1864, 2031, 86,
	86, 470, 1107, 1029, 41, 809, 1247, 1089, 1893, 1465,
	532, 71, 1266, 1359, 460, 1360, 1361, 2072, 456, 1620,
	1303, 1108, 1095, 577, 467, 783, 42, 457, 1427, 86,
	1106, 86, 1636, 86, 913, 914, 1347, 86, 1220, 921,
	72, 86, 1326, 809, 1304, 2032, 556, 1340, 67, 578,
	469, 1568, 2080, 1327, 68, 1388, 1430, 916, 2066, 2029,
	86, 1213, 2056, 1384, 661, 1386, 1431, 601, 2073, 2054,
	1436, 469, 1782, 1626, 602, 711, 1350, 1136, 568, 915,
	546, 544, 1337, 763, 783, 1358, 2075, 63, 808, 1697,
	723, 1839, 602, 1874, 2085, 1873, 1387, 1856, 1210, 1940,
	1390, 1196, 470, 1535, 834, 1312, 1308, 1748, 1362, 1733,
	1137, 1421, 1208, 1079, 892, 855, 854, 1375, 848, 845,
	1751, 728, 783, 883, 1379, 1373, 1374, 1750, 1809, 1585,
	1993, 601, 641, 873, 921, 830, 1605, 1784, 1857, 69,
	1318, 1734, 832, 1317, 1797, 53, 467, 1615, 555, 710,
	1614, 515, 658, 593, 833, 514, 1398, 1456, 728, 466,
	470, 1432, 71, 83, 83, 270, 1402, 1081, 1434, 1080,
	1420, 1082, 1595, 1399, 1698, 1204, 395, 396, 397, 1775,
	1699, 414, 1840, 1205, 426, 1206, 2084, 931, 1810, 1211,
	1336, 72, 414, 426, 1194, 1197, 858, 1747, 1854, 67,
	476, 476, 1611, 1441, 270, 68, 1428, 270, 270, 495,
	270, 1444, 1426, 83, 502, 1401, 1250, 1749, 1933, 470,
	1855, 1408, 1193, 1838, 281, 1509, 1442, 1642, 1566, 1460,
	1461, 1729, 1472, 1730, 1437, 1342, 1546, 1099, 1051, 574,
	1411, 1453, 573, 919, 920, 922, 572, 942, 571, 570,
	569, 566, 1618, 513, 815, 932, 86, 86, 1576, 506,
	1409, 1732, 1504, 1510, 1555, 980, 1557, 865, 1735, 1249,
	859, 1545, 1547, 1517, 2025, 1412, 1990, 1722, 1556, 1554,
	1207, 86, 1534, 1392, 86, 1140, 86, 1209, 1132, 1512,
	1513, 1514, 1077, 86, 769, 1733, 532, 1726, 767, 764,
	759, 1601, 737, 1531, 86, 1724, 733, 86, 1195, 1728,
	729, 1656, 1394, 1538, 1561, 1562, 296, 1887, 86, 604,
	1598, 1146, 2058, 401, 562, 1559, 1404, 1734, 1627, 852,
	1565, 1410, 1606, 79, 1731, 480, 917, 918, 919, 920,
	922, 512, 942, 1628, 1889, 1036, 1573, 1727, 1570, 1578,
	1625, 1577, 63, 291, 23, 1613, 1575, 1645, 1616, 809,
	1588, 1590, 1591, 1579, 900, 511, 86, 1326, 404, 1413,
	1950, 289, 22, 1596, 1408, 1661, 1662, 1663, 1741, 1147,
	1985, 1612, 290, 11, 292, 10, 1608, 605, 608, 409,
	809, 809, 1607, 1411, 405, 1039, 1621, 1622, 1038, 809,
	809, 1617, 1631, 481, 563, 1406, 284, 9, 270, 518,
	270, 426, 426, 1409, 500, 283, 7, 1729, 406, 1730,
	285, 4, 3, 849, 846, 503, 1971, 23, 1407, 1649,
	1652, 1780, 809, 86, 86, 86, 1020, 408, 783, 1655,
	1020, 1135, 1035, 1796, 1671, 22, 1033, 1732, 1131, 504,
	86, 1060, 1669, 1676, 1735, 86, 11, 86, 10, 86,
	86, 86, 808, 808, 86, 86, 1674, 532, 1546, 783,
	783, 1704, 1742, 1161, 1168, 443, 400, 908, 783, 783,
	9, 826, 775, 1086, 1410, 822, 2082, 2083, 1721, 7,
	2018, 1702, 1478, 1479, 4, 1974, 488, 913, 914, 1705,
	86, 86, 1712, 1545, 1547, 1718, 1745, 532, 1806, 1746,
	1717, 783, 1111, 1110, 1592, 86, 86, 1546, 1583, 86,
	1731, 1524, 1546, 1366, 411, 1762, 1300, 532, 86, 1297,
	1296, 542, 446, 447, 1246, 86, 1805, 407, 1112, 1769,
	967, 1826, 1795, 1785, 2004, 1886, 547, 1664, 1389, 426,
	426, 1814, 1545, 1547, 977, 1776, 1770, 1545, 1547, 1778,
	1781, 975, 1818, 746, 809, 453, 1792, 1793, 86, 470,
	1798, 1862, 1779, 402, 808, 1765, 1787, 530, 864, 567,
	1801, 410, 1623, 414, 2020, 1313, 270, 1831, 426, 591,
	426, 1464, 594, 1804, 1904, 1929, 1248, 978, 1791, 39,
	1543, 635, 1723, 1786, 782, 1537, 1126, 476, 1125, 299,
	853, 657, 838, 847, 1257, 811, 1162, 712, 270, 659,
	780, 660, 781, 86, 1006, 86, 647, 86, 86, 778,
	1064, 1218, 83, 808, 1237, 1452, 86, 971, 1837, 627,
	639, 270, 86, 783, 1363, 638, 270, 270, 270, 1852,
	757, 1234, 538, 1807, 52, 552, 420, 421, 1546, 1348,
	1766, 1141, 896, 1553, 1867, 458, 1475, 540, 86, 270,
	270, 808, 1278, 809, 1270, 1866, 1850, 83, 1868, 83,
	1267, 1849, 1313, 86, 587, 718, 532, 959, 1065, 810,
	86, 564, 779, 1545, 1547, 1877, 1878, 1546, 86, 426,
	1354, 83, 426, 426, 426, 426, 426, 872, 1085, 1865,
	613, 1881, 426, 426, 86, 86, 904, 1914, 414, 1882,
	87, 479, 1901, 478, 1907, 1920, 890, 1888, 1890, 1911,
	1870, 1923, 1545, 1547, 1121, 1895, 1903, 561, 831, 1104,
	952, 751, 949, 1928, 476, 1898, 448, 502, 1942, 1910,
	1272, 1133, 783, 1311, 2078, 86, 1949, 1550, 1999, 70,
	1935, 1956, 809, 297, 1884, 1335, 27, 1944, 24, 21,
	19, 18, 26, 1922, 17, 25, 15, 14, 13, 12,
	86, 86, 1902, 38, 37, 36, 1947, 35, 34, 1939,
	86, 33, 1938, 6, 86, 5, 2, 1, 1946, 0,
	0, 0, 532, 1965, 0, 0, 1963, 0, 0, 86,
	0, 1966, 0, 0, 0, 86, 0, 0, 0, 0,
	296, 86, 86, 1975, 0, 1973, 0, 0, 0, 1980,
	1969, 0, 0, 0, 0, 470, 0, 0, 0, 0,
	0, 783, 1977, 0, 86, 1984, 86, 1978, 0, 86,
	270, 86, 1976, 1987, 63, 809, 0, 0, 1025, 0,
	0, 0, 270, 0, 2006, 0, 270, 1042, 1972, 2008,
	270, 86, 2010, 2001, 86, 1048, 2009, 0, 2003, 0,
	0, 1981, 1996, 0, 0, 0, 0, 1546, 2013, 270,
	2016, 1068, 1069, 2014, 270, 2012, 0, 270, 1968, 426,
	426, 0, 426, 0, 0, 1995, 86, 0, 86, 0,
	0, 2035, 1478, 1479, 0, 2040, 0, 0, 2037, 0,
	2038, 0, 1545, 1547, 0, 2011, 86, 0, 0, 0,
	2051, 2042, 0, 0, 783, 2055, 0, 0, 2053, 2002,
	0, 0, 2061, 86, 0, 2059, 0, 0, 0, 2065,
	0, 2064, 0, 2063, 0, 1404, 0, 0, 0, 0,
	0, 0, 2077, 2076, 617, 617, 0, 2039, 0, 2081,
	0, 2023, 0, 720, 1272, 1272, 0, 0, 782, 782,
	0, 0, 0, 0, 2086, 0, 0, 808, 0, 811,
	811, 1478, 1479, 0, 0, 0, 0, 0, 1115, 0,
	0, 0, 533, 1408, 1478, 1479, 0, 1496, 1497, 1498,
	0, 0, 1484, 270, 1122, 0, 0, 0, 808, 808,
	502, 0, 1411, 0, 0, 0, 0, 808, 808, 1161,
	1672, 636, 50, 0, 1406, 1272, 1272, 1272, 1161, 1677,
	0, 0, 1409, 0, 0, 270, 0, 0, 426, 0,
	0, 0, 0, 0, 0, 1493, 631, 1407, 0, 0,
	808, 0, 0, 810, 810, 1494, 779, 779, 0, 0,
	0, 1708, 0, 50, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 899, 269,
	782, 1484, 0, 0, 906, 463, 0, 0, 471, 0,
	0, 811, 0, 0, 1484, 50, 953, 954, 955, 956,
	957, 0, 0, 1410, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 1500, 0, 972, 0, 484, 0,
	0, 491, 494, 1495, 484, 1501, 1502, 1503, 0, 1499,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 782,
	270, 1306, 1307, 0, 0, 0, 1025, 1494, 0, 1314,
	811, 0, 0, 0, 0, 1319, 1320, 1322, 1324, 1325,
	0, 0, 0, 1330, 0, 810, 1332, 270, 779, 0,
	0, 0, 0, 0, 0, 0, 270, 782, 1272, 1272,
	0, 270, 808, 1352, 0, 0, 0, 0, 811, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 1495, 1488, 1480, 1481, 1482, 1483, 1485, 533,
	0, 0, 0, 0, 0, 1495, 297, 533, 0, 0,
	0, 1115, 1115, 0, 810, 0, 0, 779, 0, 0,
	0, 0, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
	1272, 890, 1272, 890, 0, 426, 0, 0, 0, 270,
	0, 0, 810, 1397, 0, 779, 0, 0, 533, 533,
	0, 0, 0, 0, 0, 0, 297, 0, 1640, 1641,
	0, 0, 270, 1480, 1481, 1482, 1483, 1485, 1490, 1491,
	1492, 808, 1489, 1486, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 0, 1876, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 0,
	0, 0, 484, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 0, 1700, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 0, 0, 617, 0, 0,
	0, 0, 0, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 0, 1198, 0, 1200, 1201,
	1202, 1203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1227, 0, 1542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1254,
	1255, 0, 0, 1268, 0, 1279, 1281, 1286, 1289, 1290,
	1291, 0, 0, 808, 0, 0, 0, 0, 270, 270,
	0, 0, 533, 0, 0, 0, 1272, 0, 0, 0,
	720, 0, 0, 782, 463, 0, 0, 0, 0, 0,
	484, 0, 0, 1593, 811, 0, 1025, 0, 890, 0,
	0, 0, 0, 0, 0, 1603, 0, 0, 0, 0,
	0, 0, 0, 0, 782, 782, 270, 0, 0, 270,
	0, 1346, 716, 782, 782, 811, 811, 0, 0, 0,
	1635, 0, 0, 0, 811, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	484, 754, 754, 0, 0, 0, 782, 0, 0, 0,
	0, 0, 297, 1372, 0, 0, 0, 811, 810, 0,
	0, 779, 0, 491, 494, 0, 1859, 0, 1666, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	810, 0, 779, 779, 0, 0, 0, 0, 810, 810,
	906, 779, 779, 0, 0, 463, 0, 0, 463, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 810, 964, 0, 779, 1719, 1720, 1025, 0, 968,
	0, 297, 0, 0, 0, 0, 0, 0, 0, 1423,
	1424, 1542, 502, 0, 0, 1429, 0, 1753, 0, 1754,
	0, 270, 1756, 1757, 0, 1272, 1760, 270, 0, 0,
	1932, 0, 0, 0, 0, 0, 0, 0, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 811,
	0, 0, 0, 0, 0, 1455, 0, 0, 1459, 0,
	1542, 0, 502, 1122, 0, 1542, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 270, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	1635, 0, 965, 0, 0, 0, 0, 1812, 1286, 1286,
	1286, 533, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 484, 50, 0, 0,
	494, 0, 0, 810, 484, 1986, 779, 0, 0, 0,
	1832, 1539, 50, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 782, 494, 0,
	0, 494, 0, 0, 0, 534, 0, 0, 811, 0,
	533, 617, 298, 534, 0, 0, 0, 0, 0, 617,
	0, 0, 0, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1025, 0, 1851, 0, 426,
	1853, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 1542, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 534, 534, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 1883, 0, 0, 0,
	502, 0, 810, 0, 0, 779, 782, 0, 1638, 0,
	1542, 1639, 0, 0, 0, 270, 0, 811, 0, 0,
	0, 0, 1906, 1644, 0, 0, 0, 0, 0, 0,
	270, 0, 1653, 0, 0, 0, 0, 484, 0, 0,
	1657, 0, 0, 1372, 1157, 0, 502, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1673, 0,
	0, 0, 1675, 0, 0, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1216, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 810, 0, 0, 779, 1706, 1707, 0, 0, 782,
	0, 0, 0, 0, 1713, 1714, 1715, 0, 0, 0,
	811, 0, 1951, 1952, 0, 0, 0, 0, 0, 0,
	0, 0, 1961, 0, 0, 0, 1962, 0, 0, 0,
	1743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 0, 1635, 0, 0,
	0, 0, 0, 1635, 502, 0, 0, 0, 617, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 0, 1994, 0, 502, 0,
	0, 270, 0, 426, 810, 0, 0, 779, 0, 0,
	471, 0, 0, 0, 0, 0, 0, 1790, 534, 0,
	1542, 1333, 0, 1906, 0, 0, 1635, 0, 0, 0,
	1343, 0, 0, 0, 0, 750, 533, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 1817, 0,
	0, 0, 1820, 1821, 484, 0, 297, 1823, 270, 0,
	502, 0, 0, 0, 1825, 0, 1827, 0, 0, 0,
	0, 0, 0, 0, 1833, 0, 0, 0, 2052, 0,
	0, 0, 0, 50, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 1635, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 1842, 298, 0,
	0, 1419, 0, 1391, 0, 1478, 1479, 0, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1816, 0, 0, 0, 0, 1156, 0, 0, 913,
	914, 0, 933, 934, 935, 943, 944, 945, 0, 1216,
	0, 0, 0, 0, 0, 936, 1875, 0, 0, 0,
	0, 0, 916, 0, 0, 947, 1493, 0, 0, 964,
	0, 0, 0, 0, 0, 913, 914, 0, 933, 934,
	935, 943, 944, 945, 915, 0, 0, 0, 0, 0,
	930, 936, 0, 0, 0, 0, 0, 298, 916, 0,
	0, 947, 1909, 0, 0, 0, 0, 533, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	915, 1924, 1925, 0, 0, 0, 930, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 533, 0, 0,
	1499, 1937, 0, 0, 0, 0, 0, 0, 940, 948,
	0, 0, 0, 0, 1941, 0, 0, 533, 1494, 0,
	0, 0, 0, 0, 946, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 0, 0, 0,
	0, 0, 931, 0, 940, 948, 0, 534, 720, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1157, 0,
	946, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 1066, 1156, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 1157, 534, 0, 1157, 0,
	932, 0, 0, 0, 0, 50, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 0, 0,
	1156, 0, 0, 1156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2036, 0, 941, 1490,
	1491, 1492, 0, 1489, 1486, 1487, 1488, 1480, 1481, 1482,
	1483, 1485, 0, 0, 0, 0, 533, 2050, 2050, 0,
	939, 0, 0, 927, 928, 929, 0, 926, 923, 924,
	925, 917, 918, 919, 920, 922, 0, 942, 0, 0,
	0, 0, 0, 2050, 1845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 927,
	928, 929, 0, 926, 923, 924, 925, 917, 918, 919,
	920, 922, 0, 942, 0, 0, 0, 0, 2050, 0,
	1520, 0, 0, 913, 914, 0, 933, 934, 935, 943,
	944, 945, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 947,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 1755, 0, 0, 915, 0,
	0, 1761, 533, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 0, 1157, 1157, 0, 0,
	1157, 0, 0, 0, 0, 0, 0, 0, 471, 0,
	0, 1478, 1479, 0, 1496, 1497, 1498, 0, 0, 0,
	0, 1156, 1156, 921, 0, 1156, 0, 1815, 913, 914,
	0, 933, 934, 935, 943, 944, 945, 0, 0, 0,
	0, 0, 940, 948, 936, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 947, 0, 0, 0, 946, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	938, 0, 534, 915, 0, 0, 931, 0, 0, 930,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 1478, 1479, 0, 1496, 1497, 1498, 0,
	0, 0, 1860, 0, 932, 0, 1499, 940, 948, 1647,
	0, 0, 0, 1891, 0, 0, 941, 0, 0, 0,
	0, 0, 50, 946, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 0, 0, 0, 1157,
	0, 931, 0, 0, 1493, 0, 0, 0, 0, 1900,
	0, 0, 0, 1478, 1479, 0, 1496, 1497, 1498, 0,
	0, 0, 0, 0, 1156, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 927, 928, 929,
	0, 926, 923, 924, 925, 917, 918, 919, 920, 922,
	0, 942, 1495, 1484, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 534, 1493, 0, 0, 913, 914, 932,
	933, 934, 935, 943, 944, 945, 0, 0, 0, 0,
	0, 941, 0, 936, 0, 0, 0, 0, 1499, 0,
	916, 0, 0, 947, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 534, 0, 0, 1494, 0, 0, 0,
	0, 0, 915, 1484, 0, 0, 0, 50, 930, 0,
	0, 0, 0, 534, 0, 1490, 1491, 1492, 0, 1489,
	1486, 1487, 1488, 1480, 1481, 1482, 1483, 1485, 0, 939,
	0, 0, 927, 928, 929, 0, 926, 923, 924, 925,
	917, 918, 919, 920, 922, 0, 942, 0, 0, 0,
	0, 0, 0, 1518, 0, 0, 1494, 921, 0, 0,
	0, 0, 0, 0, 1495, 1998, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 1490, 1491, 1492,
	0, 1489, 1486, 1487, 1488, 1480, 1481, 1482, 1483, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 534, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 0, 1490, 1491, 1492,
	0, 1489, 1486, 1487, 1488, 1480, 1481, 1482, 1483, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 927, 928, 929, 0, 926, 923, 924, 925, 917,
	918, 919, 920, 922, 0, 942, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 534, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 88, 89, 314,
	90, 315, 316, 317, 318, 217, 319, 320, 321, 322,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	323, 95, 224, 225, 96, 324, 325, 226, 227, 228,
	326, 229, 327, 300, 328, 97, 98, 99, 0, 100,
	329, 101, 102, 103, 330, 301, 104, 105, 331, 332,
	333, 334, 335, 336, 106, 107, 271, 108, 230, 109,
	231, 232, 337, 110, 338, 111, 339, 340, 341, 112,
	113, 342, 114, 343, 0, 344, 233, 115, 116, 234,
	235, 345, 346, 347, 117, 118, 236, 0, 119, 348,
	120, 349, 350, 302, 351, 121, 237, 352, 238, 353,
	122, 123, 124, 125, 239, 240, 304, 354, 129, 355,
	126, 356, 303, 127, 241, 128, 242, 243, 244, 357,
	245, 358, 305, 130, 306, 131, 132, 359, 134, 133,
	360, 246, 307, 135, 308, 361, 136, 362, 363, 137,
	0, 138, 139, 140, 142, 247, 141, 309, 143, 144,
	146, 145, 364, 365, 366, 248, 147, 249, 148, 149,
	367, 150, 368, 369, 151, 370, 371, 152, 250, 310,
	153, 311, 251, 154, 155, 156, 157, 372, 252, 158,
	253, 159, 373, 160, 161, 162, 254, 163, 164, 374,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 375, 176, 312, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 376, 256, 184, 185, 377, 186, 187,
	313, 188, 257, 258, 189, 378, 195, 190, 191, 192,
	194, 259, 193, 260, 379, 196, 380, 197, 198, 199,
	381, 261, 262, 263, 382, 383, 200, 264, 265, 384,
	201, 202, 203, 204, 385, 386, 205, 206, 207, 387,
	208, 388, 209, 210, 211, 266, 267, 389, 390, 212,
	391, 392, 393, 394, 213, 214, 215, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 1629, 0, 0, 0,
	0, 0, 0, 0, 1630, 88, 89, 314, 90, 315,
	316, 317, 318, 217, 319, 320, 321, 322, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 323, 95,
	224, 225, 96, 324, 325, 226, 227, 228, 326, 229,
	327, 300, 328, 97, 98, 99, 0, 100, 329, 101,
	102, 103, 330, 301, 104, 105, 331, 332, 333, 334,
	335, 336, 106, 107, 271, 108, 230, 109, 231, 232,
	337, 110, 338, 111, 339, 340, 341, 112, 113, 342,
	114, 343, 0, 344, 233, 115, 116, 234, 235, 345,
	346, 347, 117, 118, 236, 0, 119, 348, 120, 349,
	350, 302, 351, 121, 237, 352, 238, 353, 122, 123,
	124, 125, 239, 240, 304, 354, 129, 355, 126, 356,
	303, 127, 241, 128, 242, 243, 244, 357, 245, 358,
	305, 130, 306, 131, 132, 359, 134, 133, 360, 246,
	307, 135, 308, 361, 136, 362, 363, 137, 0, 138,
	139, 140, 142, 247, 141, 309, 143, 144, 146, 145,
	364, 365, 366, 248, 147, 249, 148, 149, 367, 150,
	368, 369, 151, 370, 371, 152, 250, 310, 153, 311,
	251, 154, 155, 156, 157, 372, 252, 158, 253, 159,
	373, 160, 161, 162, 254, 163, 164, 374, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 375,
	176, 312, 177, 178, 255, 179, 0, 180, 181, 182,
	183, 376, 256, 184, 185, 377, 186, 187, 313, 188,
	257, 258, 189, 378, 195, 190, 191, 192, 194, 259,
	193, 260, 379, 196, 380, 197, 198, 199, 381, 261,
	262, 263, 382, 383, 200, 264, 265, 384, 201, 202,
	203, 204, 385, 386, 205, 206, 207, 387, 208, 388,
	209, 210, 211, 266, 267, 389, 390, 212, 391, 392,
	393, 394, 213, 214, 215, 216, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1979, 88, 89, 314, 90, 315,
	316, 317, 318, 217, 319, 320, 321, 322, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 323, 95,
	224, 225, 96, 324, 325, 226, 227, 228, 326, 229,
	327, 300, 328, 97, 98, 99, 0, 100, 329, 101,
	102, 103, 330, 301, 104, 105, 331, 332, 333, 334,
	335, 336, 106, 107, 271, 108, 230, 109, 231, 232,
	337, 110, 338, 111, 339, 340, 341, 112, 113, 342,
	114, 343, 0, 344, 233, 115, 116, 234, 235, 345,
	346, 347, 117, 118, 236, 0, 119, 348, 120, 349,
	350, 302, 351, 121, 237, 352, 238, 353, 122, 123,
	124, 125, 239, 240, 304, 354, 129, 355, 126, 356,
	303, 127, 241, 128, 242, 243, 244, 357, 245, 358,
	305, 130, 306, 131, 132, 359, 134, 133, 360, 246,
	307, 135, 308, 361, 136, 362, 363, 137, 0, 138,
	139, 140, 142, 247, 141, 309, 143, 144, 146, 145,
	364, 365, 366, 248, 147, 249, 148, 149, 367, 150,
	368, 369, 151, 370, 371, 152, 250, 310, 153, 311,
	251, 154, 155, 156, 157, 372, 252, 158, 253, 159,
	373, 160, 161, 162, 254, 163, 164, 374, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 375,
	176, 312, 177, 178, 255, 179, 0, 180, 181, 182,
	183, 376, 256, 184, 185, 377, 186, 187, 313, 188,
	257, 258, 189, 378, 195, 190, 191, 192, 194, 259,
	193, 260, 379, 196, 380, 197, 198, 199, 381, 261,
	262, 263, 382, 383, 200, 264, 265, 384, 201, 202,
	203, 204, 385, 386, 205, 206, 207, 387, 208, 388,
	209, 210, 211, 266, 267, 389, 390, 212, 391, 392,
	393, 394, 213, 214, 215, 216, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 88, 89, 314, 90, 315, 316, 317, 318,
	217, 319, 320, 321, 322, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 323, 95, 224, 225, 96,
	324, 325, 226, 227, 228, 326, 229, 327, 300, 328,
	97, 98, 99, 0, 100, 329, 101, 102, 103, 330,
	301, 104, 105, 331, 332, 333, 334, 335, 336, 106,
	107, 271, 108, 230, 109, 231, 232, 337, 110, 338,
	111, 339, 340, 341, 112, 113, 342, 114, 343, 0,
	344, 233, 115, 116, 234, 235, 345, 346, 347, 117,
	118, 236, 0, 119, 348, 120, 349, 350, 302, 351,
	121, 237, 352, 238, 353, 122, 123, 124, 125, 239,
	240, 304, 354, 129, 355, 126, 356, 303, 127, 241,
	128, 242, 243, 244, 357, 245, 358, 305, 130, 306,
	131, 132, 359, 134, 133, 360, 246, 307, 135, 308,
	361, 136, 362, 363, 137, 0, 138, 139, 140, 142,
	247, 141, 309, 143, 144, 146, 145, 364, 365, 366,
	248, 147, 249, 148, 149, 367, 150, 368, 369, 151,
	370, 371, 152, 250, 310, 153, 311, 251, 154, 155,
	156, 157, 372, 252, 158, 253, 159, 373, 160, 161,
	162, 254, 163, 164, 374, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 375, 176, 312, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 376, 256,
	184, 185, 377, 186, 187, 313, 188, 257, 258, 189,
	378, 195, 190, 191, 192, 194, 259, 193, 260, 379,
	196, 380, 197, 198, 199, 381, 261, 262, 263, 382,
	383, 200, 264, 265, 384, 201, 202, 203, 204, 385,
	386, 205, 206, 207, 387, 208, 388, 209, 210, 211,
	266, 267, 389, 390, 212, 391, 392, 393, 394, 213,
	214, 215, 216, 655, 644, 645, 642, 643, 634, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 671, 637, 0,
	0, 0, 91, 92, 93, 218, 686, 220, 687, 94,
	688, 689, 0, 95, 224, 225, 96, 640, 670, 690,
	691, 228, 0, 682, 0, 663, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 301, 104, 105,
	0, 664, 666, 0, 665, 667, 106, 107, 271, 108,
	692, 109, 693, 694, 721, 110, 0, 111, 0, 0,
	0, 685, 113, 0, 114, 0, 0, 0, 628, 115,
	116, 672, 673, 651, 0, 0, 117, 118, 695, 0,
	119, 0, 120, 0, 0, 302, 0, 121, 683, 0,
	238, 0, 122, 123, 124, 125, 679, 681, 304, 0,
	129, 0, 126, 0, 303, 127, 696, 128, 697, 698,
	699, 0, 662, 0, 305, 130, 306, 131, 132, 0,
	134, 133, 0, 684, 307, 135, 308, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 309,
	143, 144, 146, 145, 623, 0, 652, 680, 147, 700,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 310, 153, 311, 674, 154, 155, 156, 157, 0,
	675, 158, 253, 159, 0, 160, 161, 162, 701, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 312, 177, 178, 629, 179,
	0, 180, 181, 182, 183, 69, 256, 184, 185, 668,
	186, 187, 313, 188, 702, 258, 189, 0, 195, 190,
	191, 192, 194, 703, 193, 676, 0, 196, 71, 197,
	198, 199, 0, 261, 704, 705, 0, 0, 200, 677,
	678, 650, 201, 202, 203, 204, 0, 0, 205, 206,
	207, 669, 208, 0, 209, 210, 211, 535, 706, 0,
	0, 212, 0, 0, 0, 67, 213, 214, 215, 216,
	624, 68, 0, 0, 0, 655, 644, 645, 642, 643,
	634, 620, 621, 0, 0, 0, 0, 622, 0, 0,
	630, 88, 89, 1243, 90, 633, 0, 0, 0, 671,
	637, 0, 0, 0, 91, 92, 93, 218, 686, 220,
	687, 94, 688, 689, 0, 95, 224, 225, 96, 640,
	670, 690, 691, 228, 0, 682, 0, 663, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 105, 0, 664, 666, 0, 665, 667, 106, 107,
	271, 108, 692, 109, 693, 694, 0, 110, 0, 111,
	0, 1244, 0, 685, 113, 0, 114, 0, 0, 0,
	628, 115, 116, 672, 673, 651, 0, 0, 117, 118,
	695, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	683, 0, 238, 0, 122, 123, 124, 125, 679, 681,
	304, 0, 129, 0, 126, 0, 303, 127, 696, 128,
	697, 698, 699, 0, 662, 0, 305, 130, 306, 131,
	132, 0, 134, 133, 0, 684, 307, 135, 308, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 623, 0, 652, 680,
	147, 700, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 674, 154, 155, 156,
	157, 0, 675, 158, 253, 159, 0, 160, 161, 162,
	701, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	629, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 668, 186, 187, 313, 188, 702, 258, 189, 0,
	195, 190, 191, 192, 194, 703, 193, 676, 0, 196,
	0, 197, 198, 199, 0, 261, 704, 705, 0, 0,
	200, 677, 678, 650, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 669, 208, 0, 209, 210, 211, 266,
	706, 1242, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 621, 1245, 0, 0, 0, 622,
	0, 0, 630, 1240, 0, 0, 0, 633, 655, 644,
	645, 642, 643, 634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 671, 637, 0, 0, 0, 91, 92, 93,
	218, 686, 220, 687, 94, 688, 689, 0, 95, 224,
	225, 96, 640, 670, 690, 691, 228, 0, 682, 0,
	663, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 301, 104, 105, 0, 664, 666, 0, 665,
	667, 106, 107, 271, 108, 692, 109, 693, 694, 0,
	110, 0, 111, 0, 0, 0, 685, 113, 0, 114,
	0, 0, 0, 628, 115, 116, 672, 673, 651, 0,
	0, 117, 118, 695, 0, 119, 0, 120, 0, 0,
	302, 0, 121, 683, 0, 238, 0, 122, 123, 124,
	125, 679, 681, 304, 0, 129, 0, 126, 0, 303,
	127, 696, 128, 697, 698, 699, 0, 662, 0, 305,
	130, 306, 131, 132, 0, 134, 133, 0, 684, 307,
	135, 308, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 309, 143, 144, 146, 145, 623,
	0, 652, 680, 147, 700, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 310, 153, 311, 674,
	154, 155, 156, 157, 0, 675, 158, 253, 159, 0,
	160, 161, 162, 701, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	312, 177, 178, 629, 179, 0, 180, 181, 182, 183,
	69, 256, 184, 185, 668, 186, 187, 313, 188, 702,
	258, 189, 0, 195, 190, 191, 192, 194, 703, 193,
	676, 0, 196, 71, 197, 198, 199, 0, 261, 704,
	705, 0, 0, 200, 677, 678, 650, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 669, 208, 0, 209,
	210, 211, 535, 706, 0, 0, 212, 0, 0, 0,
	67, 213, 214, 215, 216, 624, 68, 655, 644, 645,
	642, 643, 634, 0, 0, 0, 620, 621, 0, 0,
	0, 0, 622, 88, 89, 630, 90, 0, 0, 0,
	633, 671, 637, 0, 0, 0, 91, 92, 93, 218,
	686, 220, 687, 94, 688, 689, 1282, 95, 224, 225,
	96, 640, 670, 690, 691, 228, 0, 682, 0, 663,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 301, 104, 105, 0, 664, 666, 0, 665, 667,
	106, 107, 271, 108, 692, 109, 693, 694, 0, 110,
	0, 111, 0, 0, 0, 685, 113, 0, 114, 0,
	0, 0, 628, 115, 116, 672, 673, 651, 0, 0,
	117, 118, 695, 0, 119, 0, 120, 0, 1287, 302,
	0, 121, 683, 0, 238, 0, 122, 123, 124, 125,
	679, 681, 304, 0, 129, 0, 126, 0, 303, 127,
	696, 128, 697, 698, 699, 0, 662, 0, 305, 130,
	306, 131, 132, 0, 134, 133, 1283, 684, 307, 135,
	308, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 309, 143, 144, 146, 145, 623, 0,
	652, 680, 147, 700, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 310, 153, 311, 674, 154,
	155, 156, 157, 0, 675, 158, 253, 159, 0, 160,
	161, 162, 701, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 312,
	177, 178, 629, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 668, 186, 187, 313, 188, 702, 258,
	189, 0, 195, 190, 191, 192, 194, 703, 193, 676,
	0, 196, 0, 197, 198, 199, 0, 261, 704, 705,
	0, 1284, 200, 677, 678, 650, 201, 202, 203, 204,
	0, 0, 205, 206, 207, 669, 208, 0, 209, 210,
	211, 266, 706, 0, 0, 212, 0, 0, 0, 0,
	213, 214, 215, 216, 624, 0, 655, 644, 645, 642,
	643, 634, 0, 0, 0, 620, 621, 0, 0, 0,
	0, 622, 88, 89, 630, 90, 0, 0, 0, 633,
	671, 637, 0, 0, 0, 91, 92, 93, 218, 686,
	220, 687, 94, 688, 689, 0, 95, 224, 225, 96,
	640, 670, 690, 691, 228, 0, 682, 0, 663, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	301, 104, 105, 0, 664, 666, 0, 665, 667, 106,
	107, 271, 108, 692, 109, 693, 694, 0, 110, 0,
	111, 0, 0, 0, 685, 113, 0, 114, 0, 0,
	0, 628, 115, 116, 672, 673, 651, 0, 0, 117,
	118, 695, 0, 119, 0, 120, 0, 0, 302, 0,
	121, 683, 0, 238, 0, 122, 123, 124, 125, 679,
	681, 304, 0, 129, 0, 126, 0, 303, 127, 696,
	128, 697, 698, 699, 0, 662, 0, 305, 130, 306,
	131, 132, 0, 134, 133, 0, 684, 307, 135, 308,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 309, 143, 144, 146, 145, 623, 1571, 652,
	680, 147, 700, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 310, 153, 311, 674, 154, 155,
	156, 157, 0, 675, 158, 253, 159, 0, 160, 161,
	162, 701, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 312, 177,
	178, 629, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 668, 186, 187, 313, 188, 702, 258, 189,
	0, 195, 190, 191, 192, 194, 703, 193, 676, 0,
	196, 0, 197, 198, 199, 0, 261, 704, 705, 0,
	0, 200, 677, 678, 650, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 669, 208, 0, 209, 210, 211,
	266, 706, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 624, 0, 655, 644, 645, 642, 643,
	634, 0, 0, 0, 620, 621, 618, 0, 0, 0,
	622, 88, 89, 630, 90, 0, 0, 0, 633, 671,
	637, 0, 0, 0, 91, 92, 93, 218, 686, 220,
	687, 94, 688, 689, 0, 95, 224, 225, 96, 640,
	670, 690, 691, 228, 0, 682, 0, 663, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 105, 0, 664, 666, 0, 665, 667, 106, 107,
	271, 108, 692, 109, 693, 694, 0, 110, 0, 111,
	0, 0, 0, 685, 113, 0, 114, 0, 0, 0,
	628, 115, 116, 672, 673, 651, 0, 0, 117, 118,
	695, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	683, 0, 238, 0, 122, 123, 124, 125, 679, 681,
	304, 0, 129, 0, 126, 0, 303, 127, 696, 128,
	697, 698, 699, 0, 662, 0, 305, 130, 306, 131,
	132, 0, 134, 133, 0, 684, 307, 135, 308, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 623, 0, 652, 680,
	147, 700, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 674, 154, 155, 156,
	157, 0, 675, 158, 253, 159, 0, 160, 161, 162,
	701, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	629, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 668, 186, 187, 313, 188, 702, 258, 189, 0,
	195, 190, 191, 192, 194, 703, 193, 676, 0, 196,
	0, 197, 198, 199, 0, 261, 704, 705, 0, 0,
	200, 677, 678, 650, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 669, 208, 0, 209, 210, 211, 266,
	706, 0, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 624, 0, 0, 0, 0, 655, 644, 645,
	642, 643, 634, 620, 621, 0, 0, 0, 0, 622,
	970, 1235, 630, 88, 89, 0, 90, 633, 0, 0,
	0, 671, 637, 0, 0, 0, 91, 92, 93, 218,
	686, 220, 687, 94, 688, 689, 0, 95, 224, 225,
	96, 640, 670, 690, 691, 228, 0, 682, 0, 663,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 301, 104, 105, 0, 664, 666, 0, 665, 667,
	106, 107, 271, 108, 692, 109, 693, 694, 0, 110,
	0, 111, 0, 0, 0, 685, 113, 0, 114, 0,
	0, 0, 628, 115, 116, 672, 673, 651, 0, 0,
	117, 118, 695, 0, 119, 0, 120, 0, 0, 302,
	0, 121, 683, 0, 238, 0, 122, 123, 124, 125,
	679, 681, 304, 0, 129, 0, 126, 0, 303, 127,
	696, 128, 697, 698, 699, 0, 662, 0, 305, 130,
	306, 131, 132, 0, 134, 133, 0, 684, 307, 135,
	308, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 309, 143, 144, 146, 145, 623, 0,
	652, 680, 147, 700, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 310, 153, 311, 674, 154,
	155, 156, 157, 0, 675, 158, 253, 159, 0, 160,
	161, 162, 701, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 312,
	177, 178, 629, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 668, 186, 187, 313, 188, 702, 258,
	189, 0, 195, 190, 191, 192, 194, 703, 193, 676,
	0, 196, 0, 197, 198, 199, 0, 261, 704, 705,
	0, 0, 200, 677, 678, 650, 201, 202, 203, 204,
	0, 0, 205, 206, 207, 669, 208, 0, 209, 210,
	211, 266, 706, 0, 0, 212, 0, 0, 0, 0,
	213, 214, 215, 216, 624, 0, 655, 644, 645, 642,
	643, 634, 0, 0, 0, 620, 621, 618, 0, 0,
	0, 622, 88, 89, 630, 90, 0, 0, 0, 633,
	671, 637, 0, 0, 0, 91, 92, 93, 218, 686,
	220, 687, 94, 688, 689, 0, 95, 224, 225, 96,
	640, 670, 690, 691, 228, 0, 682, 0, 663, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	301, 104, 105, 0, 664, 666, 0, 665, 667, 106,
	107, 271, 108, 692, 109, 693, 694, 0, 110, 0,
	111, 0, 0, 0, 685, 113, 0, 114, 0, 0,
	0, 628, 115, 116, 672, 673, 651, 0, 0, 117,
	118, 695, 0, 119, 0, 120, 0, 0, 302, 0,
	121, 683, 0, 238, 0, 122, 123, 124, 125, 679,
	681, 304, 0, 129, 0, 126, 0, 303, 127, 696,
	128, 697, 698, 699, 0, 662, 0, 305, 130, 306,
	131, 132, 0, 134, 133, 0, 684, 307, 135, 308,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 309, 143, 144, 146, 145, 623, 0, 652,
	680, 147, 700, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 310, 153, 311, 674, 154, 155,
	156, 157, 0, 675, 158, 253, 159, 0, 160, 161,
	162, 701, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 312, 177,
	178, 629, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 668, 186, 187, 313, 188, 702, 258, 189,
	0, 195, 190, 191, 192, 194, 703, 193, 676, 0,
	196, 0, 197, 198, 199, 0, 261, 704, 705, 0,
	0, 200, 677, 678, 650, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 669, 208, 0, 209, 210, 211,
	266, 706, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 621, 0, 0, 0, 0,
	622, 0, 0, 630, 1703, 0, 0, 0, 633, 655,
	644, 645, 642, 643, 634, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 671, 637, 0, 0, 0, 91, 92,
	93, 218, 686, 220, 687, 94, 688, 689, 0, 95,
	224, 225, 96, 640, 670, 690, 691, 228, 0, 682,
	0, 663, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 301, 104, 105, 0, 664, 666, 0,
	665, 667, 106, 107, 271, 108, 692, 109, 693, 694,
	0, 110, 0, 111, 0, 0, 0, 685, 113, 0,
	114, 0, 0, 0, 628, 115, 116, 672, 673, 651,
	0, 0, 117, 118, 695, 0, 119, 0, 120, 0,
	0, 302, 0, 121, 683, 0, 238, 0, 122, 123,
	124, 125, 679, 681, 304, 0, 129, 0, 126, 0,
	303, 127, 696, 128, 697, 698, 699, 0, 662, 0,
	305, 130, 306, 131, 132, 0, 134, 133, 0, 684,
	307, 135, 308, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 309, 143, 144, 146, 145,
	623, 0, 652, 680, 147, 700, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 310, 153, 311,
	674, 154, 155, 156, 157, 0, 675, 158, 253, 159,
	0, 160, 161, 162, 701, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 312, 177, 178, 629, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 668, 186, 187, 313, 188,
	702, 258, 189, 0, 195, 190, 191, 192, 194, 703,
	193, 676, 0, 196, 0, 197, 198, 199, 0, 261,
	704, 705, 0, 0, 200, 677, 678, 650, 201, 202,
	203, 204, 0, 0, 205, 206, 207, 669, 208, 0,
	209, 210, 211, 266, 706, 1660, 0, 212, 0, 0,
	0, 0, 213, 214, 215, 216, 624, 0, 655, 644,
	645, 642, 643, 634, 0, 0, 0, 620, 621, 0,
	0, 0, 0, 622, 88, 89, 630, 90, 0, 0,
	0, 633, 671, 637, 0, 0, 0, 91, 92, 93,
	218, 686, 220, 687, 94, 688, 689, 0, 95, 224,
	225, 96, 640, 670, 690, 691, 228, 0, 682, 0,
	663, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 301, 104, 105, 0, 664, 666, 0, 665,
	667, 106, 107, 271, 108, 692, 109, 693, 694, 0,
	110, 0, 111, 0, 0, 0, 685, 113, 0, 114,
	0, 0, 0, 628, 115, 116, 672, 673, 651, 0,
	0, 117, 118, 695, 0, 119, 0, 120, 0, 0,
	302, 0, 121, 683, 0, 238, 0, 122, 123, 124,
	125, 679, 681, 304, 0, 129, 0, 126, 0, 303,
	127, 696, 128, 697, 698, 699, 0, 662, 0, 305,
	130, 306, 131, 132, 0, 134, 133, 0, 684, 307,
	135, 308, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 309, 143, 144, 146, 145, 623,
	0, 652, 680, 147, 700, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 310, 153, 311, 674,
	154, 155, 156, 157, 0, 675, 158, 253, 159, 0,
	160, 161, 162, 701, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	312, 177, 178, 629, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 668, 186, 187, 313, 188, 702,
	258, 189, 0, 195, 190, 191, 192, 194, 703, 193,
	676, 0, 196, 0, 197, 198, 199, 0, 261, 704,
	705, 0, 0, 200, 677, 678, 650, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 669, 208, 0, 209,
	210, 211, 266, 706, 0, 0, 212, 0, 0, 0,
	0, 213, 214, 215, 216, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 621, 0, 0,
	0, 0, 622, 0, 0, 630, 1650, 0, 0, 0,
	633, 655, 644, 645, 642, 643, 634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 671, 637, 0, 0, 0,
	91, 92, 93, 218, 686, 220, 687, 94, 688, 689,
	0, 95, 224, 225, 96, 640, 670, 690, 691, 228,
	0, 682, 0, 663, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 301, 104, 105, 0, 664,
	666, 0, 665, 667, 106, 107, 271, 108, 692, 109,
	693, 694, 721, 110, 0, 111, 0, 0, 0, 685,
	113, 0, 114, 0, 0, 0, 628, 115, 116, 672,
	673, 651, 0, 0, 117, 118, 695, 0, 119, 0,
	120, 0, 0, 302, 0, 121, 683, 0, 238, 0,
	122, 123, 124, 125, 679, 681, 304, 0, 129, 0,
	126, 0, 303, 127, 696, 128, 697, 698, 699, 0,
	662, 0, 305, 130, 306, 131, 132, 0, 134, 133,
	0, 684, 307, 135, 308, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 309, 143, 144,
	146, 145, 623, 0, 652, 680, 147, 700, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 310,
	153, 311, 674, 154, 155, 156, 157, 0, 675, 158,
	253, 159, 0, 160, 161, 162, 701, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 312, 177, 178, 629, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 668, 186, 187,
	313, 188, 702, 258, 189, 0, 195, 190, 191, 192,
	194, 703, 193, 676, 0, 196, 0, 197, 198, 199,
	0, 261, 704, 705, 0, 0, 200, 677, 678, 650,
	201, 202, 203, 204, 0, 0, 205, 206, 207, 669,
	208, 0, 209, 210, 211, 266, 706, 0, 0, 212,
	0, 0, 0, 0, 213, 214, 215, 216, 624, 0,
	655, 644, 645, 642, 643, 634, 0, 0, 0, 620,
	621, 0, 0, 0, 0, 622, 88, 89, 630, 90,
	0, 0, 0, 633, 671, 637, 0, 0, 0, 91,
	92, 93, 218, 686, 220, 687, 94, 688, 689, 0,
	95, 224, 225, 96, 640, 670, 690, 691, 228, 0,
	682, 0, 663, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 301, 104, 105, 0, 664, 666,
	0, 665, 667, 106, 107, 271, 108, 692, 109, 693,
	694, 0, 110, 0, 111, 0, 0, 0, 685, 113,
	0, 114, 0, 0, 0, 628, 115, 116, 672, 673,
	651, 0, 0, 117, 118, 695, 0, 119, 0, 120,
	0, 1287, 302, 0, 121, 683, 0, 238, 0, 122,
	123, 124, 125, 679, 681, 304, 0, 129, 0, 126,
	0, 303, 127, 696, 128, 697, 698, 699, 0, 662,
	0, 305, 130, 306, 131, 132, 0, 134, 133, 0,
	684, 307, 135, 308, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 309, 143, 144, 146,
	145, 623, 0, 652, 680, 147, 700, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 310, 153,
	311, 674, 154, 155, 156, 157, 0, 675, 158, 253,
	159, 0, 160, 161, 162, 701, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 312, 177, 178, 629, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 668, 186, 187, 313,
	188, 702, 258, 189, 0, 195, 190, 191, 192, 194,
	703, 193, 676, 0, 196, 0, 197, 198, 199, 0,
	261, 704, 705, 0, 0, 200, 677, 678, 650, 201,
	202, 203, 204, 0, 0, 205, 206, 207, 669, 208,
	0, 209, 210, 211, 266, 706, 0, 0, 212, 0,
	0, 0, 0, 213, 214, 215, 216, 624, 0, 655,
	644, 645, 642, 643, 634, 0, 0, 0, 620, 621,
	0, 0, 0, 0, 622, 88, 89, 630, 90, 0,
	0, 0, 633, 671, 637, 0, 0, 0, 91, 92,
	93, 218, 686, 220, 687, 94, 688, 689, 0, 95,
	224, 225, 96, 640, 670, 690, 691, 228, 0, 682,
	0, 663, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 301, 104, 105, 0, 664, 666, 0,
	665, 667, 106, 107, 271, 108, 692, 109, 693, 694,
	0, 110, 0, 111, 0, 0, 0, 685, 113, 0,
	114, 0, 0, 0, 628, 115, 116, 672, 673, 651,
	0, 0, 117, 118, 695, 0, 119, 0, 120, 0,
	0, 302, 0, 121, 683, 0, 238, 0, 122, 123,
	124, 125, 679, 681, 304, 0, 129, 0, 126, 0,
	303, 127, 696, 128, 697, 698, 699, 0, 662, 0,
	305, 130, 306, 131, 132, 0, 134, 133, 0, 684,
	307, 135, 308, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 309, 143, 144, 146, 145,
	623, 0, 652, 680, 147, 700, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 310, 153, 311,
	674, 154, 155, 156, 157, 0, 675, 158, 253, 159,
	0, 160, 161, 162, 701, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 312, 177, 178, 629, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 668, 186, 187, 313, 188,
	702, 258, 189, 0, 195, 190, 191, 192, 194, 703,
	193, 676, 0, 196, 0, 197, 198, 199, 0, 261,
	704, 705, 0, 0, 200, 677, 678, 650, 201, 202,
	203, 204, 0, 0, 205, 206, 207, 669, 208, 0,
	209, 210, 211, 266, 706, 0, 0, 212, 0, 0,
	0, 0, 213, 214, 215, 216, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 621, 0,
	0, 0, 0, 622, 0, 0, 630, 1230, 0, 0,
	0, 633, 655, 644, 645, 642, 643, 634, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	898, 90, 0, 0, 0, 0, 671, 637, 0, 0,
	0, 91, 92, 93, 218, 686, 220, 687, 94, 688,
	689, 0, 95, 224, 225, 96, 640, 670, 690, 691,
	228, 0, 682, 0, 663, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 301, 104, 105, 0,
	664, 666, 0, 665, 667, 106, 107, 271, 108, 692,
	109, 693, 694, 0, 110, 0, 111, 0, 0, 0,
	685, 113, 0, 114, 0, 0, 0, 628, 115, 116,
	672, 673, 651, 0, 0, 117, 118, 695, 0, 119,
	0, 120, 0, 0, 302, 0, 121, 683, 0, 238,
	0, 122, 123, 124, 125, 679, 681, 304, 0, 129,
	0, 126, 0, 303, 127, 696, 128, 697, 698, 699,
	0, 662, 0, 305, 130, 306, 131, 132, 0, 134,
	133, 0, 684, 307, 135, 308, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 247, 141, 309, 143,
	144, 146, 145, 623, 0, 652, 680, 147, 700, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 250,
	310, 153, 311, 674, 154, 155, 156, 157, 0, 675,
	158, 253, 159, 0, 160, 161, 162, 701, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 312, 177, 178, 629, 179, 0,
	180, 181, 182, 183, 0, 256, 184, 185, 668, 186,
	187, 313, 188, 702, 258, 189, 0, 195, 190, 191,
	192, 194, 703, 193, 676, 0, 196, 0, 197, 198,
	199, 0, 261, 704, 705, 0, 0, 200, 677, 678,
	650, 201, 202, 203, 204, 0, 0, 205, 206, 207,
	669, 208, 0, 209, 210, 211, 266, 706, 0, 0,
	212, 0, 0, 0, 0, 213, 214, 215, 216, 624,
	0, 655, 644, 645, 642, 643, 634, 0, 0, 0,
	620, 621, 0, 0, 0, 0, 622, 88, 89, 630,
	90, 0, 0, 0, 633, 671, 637, 0, 0, 0,
	91, 92, 93, 218, 686, 220, 687, 94, 688, 689,
	0, 95, 224, 225, 96, 640, 670, 690, 691, 228,
	0, 682, 0, 663, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 301, 104, 2049, 0, 664,
	666, 0, 665, 667, 106, 107, 271, 108, 692, 109,
	693, 694, 0, 110, 0, 111, 0, 0, 0, 685,
	113, 0, 114, 0, 0, 0, 628, 115, 116, 672,
	673, 651, 0, 0, 117, 118, 695, 0, 119, 0,
	120, 0, 0, 302, 0, 121, 683, 0, 238, 0,
	122, 123, 124, 125, 679, 681, 304, 0, 129, 0,
	126, 0, 303, 127, 696, 128, 697, 698, 699, 0,
	662, 0, 305, 130, 306, 131, 132, 0, 134, 133,
	0, 684, 307, 135, 308, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 309, 143, 144,
	146, 145, 623, 0, 652, 680, 147, 700, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 310,
	153, 311, 674, 154, 155, 156, 157, 0, 675, 158,
	253, 159, 0, 160, 161, 162, 701, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 312, 177, 178, 629, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 668, 186, 187,
	313, 188, 702, 258, 189, 0, 195, 190, 191, 192,
	194, 703, 193, 676, 0, 196, 0, 197, 198, 199,
	0, 261, 704, 705, 0, 0, 200, 677, 678, 650,
	201, 202, 2048, 204, 0, 0, 205, 206, 207, 669,
	208, 0, 209, 210, 211, 266, 706, 0, 0, 212,
	0, 0, 0, 0, 213, 214, 215, 216, 624, 0,
	655, 644, 645, 642, 643, 634, 0, 0, 0, 620,
	621, 0, 0, 0, 0, 622, 88, 89, 630, 90,
	0, 0, 0, 633, 671, 637, 0, 0, 0, 91,
	92, 93, 2047, 686, 220, 687, 94, 688, 689, 0,
	95, 224, 225, 96, 640, 670, 690, 691, 228, 0,
	682, 0, 663, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 301, 104, 2049, 0, 664, 666,
	0, 665, 667, 106, 107, 271, 108, 692, 109, 693,
	694, 0, 110, 0, 111, 0, 0, 0, 685, 113,
	0, 114, 0, 0, 0, 628, 115, 116, 672, 673,
	651, 0, 0, 117, 118, 695, 0, 119, 0, 120,
	0, 0, 302, 0, 121, 683, 0, 238, 0, 122,
	123, 124, 125, 679, 681, 304, 0, 129, 0, 126,
	0, 303, 127, 696, 128, 697, 698, 699, 0, 662,
	0, 305, 130, 306, 131, 132, 0, 134, 133, 0,
	684, 307, 135, 308, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 309, 143, 144, 146,
	145, 623, 0, 652, 680, 147, 700, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 310, 153,
	311, 674, 154, 155, 156, 157, 0, 675, 158, 253,
	159, 0, 160, 161, 162, 701, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 312, 177, 178, 629, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 668, 186, 187, 313,
	188, 702, 258, 189, 0, 195, 190, 191, 192, 194,
	703, 193, 676, 0, 196, 0, 197, 198, 199, 0,
	261, 704, 705, 0, 0, 200, 677, 678, 650, 201,
	202, 2048, 204, 0, 0, 205, 206, 207, 669, 208,
	0, 209, 210, 211, 266, 706, 0, 0, 212, 0,
	0, 0, 0, 213, 214, 215, 216, 624, 0, 655,
	644, 645, 642, 643, 634, 0, 0, 0, 620, 621,
	0, 0, 0, 0, 622, 88, 89, 630, 90, 0,
	0, 0, 633, 671, 637, 0, 0, 0, 91, 92,
	93, 218, 686, 220, 687, 94, 688, 689, 0, 95,
	224, 225, 96, 640, 670, 690, 691, 228, 0, 682,
	0, 663, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 301, 104, 105, 0, 664, 666, 0,
	665, 667, 106, 107, 271, 108, 692, 109, 693, 694,
	0, 110, 0, 111, 0, 0, 0, 685, 113, 0,
	114, 0, 0, 0, 628, 115, 116, 672, 673, 651,
	0, 0, 117, 118, 695, 0, 119, 0, 120, 0,
	0, 302, 0, 121, 683, 0, 238, 0, 122, 123,
	124, 125, 679, 681, 304, 0, 129, 0, 126, 0,
	303, 127, 696, 128, 697, 698, 699, 0, 662, 0,
	305, 130, 306, 131, 132, 0, 134, 133, 0, 684,
	307, 135, 308, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 309, 143, 144, 146, 145,
	623, 0, 652, 680, 147, 700, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 310, 153, 311,
	674, 154, 155, 156, 157, 0, 675, 158, 253, 159,
	0, 160, 161, 162, 701, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 312, 177, 178, 629, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 668, 186, 187, 313, 188,
	702, 258, 189, 0, 195, 190, 191, 192, 194, 703,
	193, 676, 0, 196, 0, 197, 198, 199, 0, 261,
	704, 705, 0, 0, 200, 677, 678, 650, 201, 202,
	203, 204, 0, 0, 205, 206, 207, 669, 208, 0,
	209, 210, 211, 266, 706, 0, 0, 212, 0, 0,
	0, 0, 213, 214, 215, 216, 624, 0, 1259, 644,
	645, 642, 643, 634, 0, 0, 0, 620, 621, 0,
	0, 0, 0, 622, 88, 89, 630, 90, 0, 0,
	0, 633, 671, 637, 0, 0, 0, 91, 92, 93,
	218, 686, 220, 687, 94, 688, 689, 0, 95, 224,
	225, 96, 640, 670, 690, 691, 228, 0, 682, 0,
	663, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 301, 104, 105, 0, 664, 666, 0, 665,
	667, 106, 107, 271, 108, 692, 1262, 693, 694, 0,
	110, 0, 111, 0, 0, 0, 685, 113, 0, 114,
	0, 0, 0, 628, 115, 116, 672, 673, 651, 0,
	0, 117, 118, 695, 0, 119, 0, 120, 0, 0,
	302, 0, 121, 683, 0, 238, 0, 122, 123, 1263,
	125, 679, 681, 304, 0, 129, 0, 126, 0, 303,
	127, 696, 128, 697, 698, 699, 0, 662, 0, 305,
	130, 306, 131, 132, 0, 134, 133, 0, 684, 307,
	135, 308, 0, 136, 0, 0, 137, 0, 138, 1264,
	1261, 142, 247, 141, 309, 143, 144, 146, 145, 623,
	0, 652, 680, 147, 700, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 310, 153, 311, 674,
	154, 155, 156, 157, 0, 675, 158, 253, 159, 0,
	160, 161, 162, 701, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	312, 177, 178, 629, 179, 0, 180, 181, 182, 1265,
	0, 256, 184, 185, 668, 186, 187, 313, 188, 702,
	258, 189, 0, 195, 190, 191, 192, 194, 703, 193,
	676, 0, 196, 0, 197, 198, 199, 0, 261, 704,
	705, 0, 0, 200, 677, 678, 650, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 669, 208, 0, 209,
	210, 211, 266, 706, 0, 0, 212, 0, 0, 0,
	0, 213, 214, 1260, 216, 624, 0, 655, 644, 645,
	642, 643, 634, 0, 0, 0, 620, 621, 0, 0,
	0, 0, 622, 88, 89, 630, 90, 0, 0, 0,
	633, 671, 637, 0, 0, 0, 91, 92, 93, 218,
	686, 220, 687, 94, 688, 689, 0, 95, 224, 225,
	96, 640, 670, 690, 691, 228, 0, 682, 0, 663,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 301, 104, 105, 0, 664, 666, 0, 665, 667,
	106, 107, 271, 108, 692, 109, 693, 694, 0, 110,
	0, 111, 0, 0, 0, 685, 113, 0, 114, 0,
	0, 0, 628, 115, 116, 672, 673, 651, 0, 0,
	117, 118, 695, 0, 119, 0, 120, 0, 0, 302,
	0, 121, 683, 0, 238, 0, 122, 123, 124, 125,
	679, 681, 304, 0, 129, 0, 126, 0, 303, 127,
	696, 128, 697, 698, 699, 0, 662, 0, 305, 130,
	306, 131, 132, 0, 134, 133, 0, 684, 307, 135,
	308, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 309, 143, 144, 146, 145, 0, 0,
	652, 680, 147, 700, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 310, 153, 311, 674, 154,
	155, 156, 157, 0, 675, 158, 253, 159, 0, 160,
	161, 162, 701, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 312,
	177, 178, 1277, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 668, 186, 187, 313, 188, 702, 258,
	189, 0, 195, 190, 191, 192, 194, 703, 193, 676,
	0, 196, 0, 197, 198, 199, 0, 261, 704, 705,
	0, 0, 200, 677, 678, 650, 201, 202, 203, 204,
	0, 0, 205, 206, 207, 669, 208, 0, 209, 210,
	211, 266, 706, 0, 0, 212, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 655, 644, 645, 642,
	643, 634, 0, 0, 0, 1273, 1274, 0, 0, 0,
	0, 1275, 88, 89, 1276, 90, 0, 0, 0, 633,
	671, 637, 0, 0, 0, 91, 92, 93, 0, 686,
	220, 687, 94, 688, 689, 0, 95, 224, 225, 96,
	640, 670, 690, 691, 228, 0, 682, 0, 663, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	301, 104, 2049, 0, 664, 666, 0, 665, 667, 106,
	107, 271, 108, 692, 109, 693, 694, 0, 110, 0,
	111, 0, 0, 0, 685, 113, 0, 114, 0, 0,
	0, 628, 115, 116, 672, 673, 651, 0, 0, 117,
	118, 695, 0, 119, 0, 120, 0, 0, 302, 0,
	121, 683, 0, 238, 0, 122, 123, 124, 125, 679,
	681, 0, 0, 129, 0, 126, 0, 303, 127, 696,
	128, 697, 698, 699, 0, 662, 0, 0, 130, 306,
	131, 132, 0, 134, 133, 0, 684, 307, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 309, 143, 144, 146, 145, 623, 0, 652,
	680, 147, 700, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 310, 153, 311, 674, 154, 155,
	156, 157, 0, 675, 158, 253, 159, 0, 160, 161,
	162, 701, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 312, 177,
	178, 629, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 668, 186, 187, 0, 188, 702, 258, 189,
	0, 195, 190, 191, 192, 194, 703, 193, 676, 0,
	196, 0, 197, 198, 199, 0, 261, 704, 705, 0,
	0, 200, 677, 678, 650, 201, 202, 2048, 204, 0,
	0, 205, 206, 207, 669, 208, 0, 209, 210, 211,
	266, 706, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 655, 644, 645, 642, 643,
	634, 0, 0, 0, 620, 621, 0, 0, 0, 0,
	622, 88, 89, 630, 90, 0, 0, 0, 633, 671,
	637, 0, 0, 0, 91, 92, 93, 218, 686, 220,
	687, 94, 688, 689, 0, 95, 224, 225, 96, 0,
	670, 690, 691, 228, 0, 682, 0, 663, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 105, 0, 664, 666, 0, 665, 667, 106, 107,
	271, 108, 692, 109, 693, 694, 0, 110, 0, 111,
	0, 0, 0, 685, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 672, 673, 651, 0, 0, 117, 118,
	695, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	683, 0, 238, 0, 122, 123, 124, 125, 679, 681,
	304, 0, 129, 0, 126, 0, 303, 127, 696, 128,
	697, 698, 699, 0, 662, 0, 305, 130, 306, 131,
	132, 0, 134, 133, 0, 684, 307, 135, 308, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 0, 0, 652, 680,
	147, 700, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 674, 154, 155, 156,
	157, 0, 675, 158, 253, 159, 0, 160, 161, 162,
	701, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	1277, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 668, 186, 187, 313, 188, 702, 258, 189, 0,
	195, 190, 191, 192, 194, 703, 193, 676, 0, 196,
	0, 197, 198, 199, 0, 261, 704, 705, 0, 0,
	200, 677, 678, 650, 201, 202, 203, 204, 655, 0,
	205, 206, 207, 669, 208, 0, 209, 210, 211, 266,
	706, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 671, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 1276, 670, 226, 227, 228, 633, 682, 0,
	663, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 301, 104, 105, 0, 664, 666, 0, 665,
	667, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 672, 673, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	302, 0, 121, 683, 0, 238, 0, 122, 123, 124,
	125, 679, 681, 304, 0, 129, 0, 126, 0, 303,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 305,
	130, 306, 131, 132, 0, 134, 133, 0, 684, 307,
	135, 308, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 309, 143, 144, 146, 145, 0,
	0, 0, 680, 147, 249, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 310, 153, 311, 674,
	154, 155, 156, 157, 0, 675, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	312, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 668, 186, 187, 313, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	676, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 677, 678, 0, 201, 202, 203,
	204, 531, 0, 205, 206, 207, 669, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 88, 89, 0,
	90, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 1544, 0, 226, 227, 228,
	0, 229, 0, 300, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 301, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 0, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 0, 0, 302, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 239, 240, 304, 0, 129, 0,
	126, 0, 303, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 305, 130, 306, 131, 132, 0, 134, 133,
	0, 246, 307, 135, 308, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 309, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 310,
	153, 311, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 254, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 312, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 69, 256, 184, 185, 0, 186, 187,
	313, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 71, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 0, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 535, 267, 0, 0, 212,
	0, 0, 0, 67, 213, 214, 215, 216, 0, 68,
	531, 740, 0, 848, 845, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 66, 90,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 0,
	95, 224, 225, 96, 0, 0, 226, 227, 228, 0,
	229, 0, 300, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 301, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 230, 109, 231,
	232, 851, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	842, 0, 0, 117, 118, 236, 0, 119, 0, 120,
	0, 0, 302, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 239, 240, 304, 0, 129, 0, 126,
	0, 303, 127, 241, 128, 242, 243, 244, 0, 245,
	0, 305, 130, 306, 131, 132, 0, 134, 133, 0,
	246, 307, 135, 308, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 309, 143, 144, 146,
	145, 0, 0, 0, 248, 147, 249, 148, 149, 0,
	150, 843, 0, 151, 0, 0, 152, 250, 310, 153,
	311, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	159, 0, 160, 161, 162, 254, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 312, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 0, 186, 187, 313,
	188, 257, 258, 189, 0, 195, 190, 191, 192, 194,
	259, 193, 260, 0, 196, 0, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 841, 201,
	202, 203, 204, 0, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 531, 740, 212, 848,
	845, 840, 0, 213, 214, 215, 216, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 849, 846,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 300, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	301, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 836, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 842, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 302, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 239,
	240, 304, 0, 129, 0, 126, 0, 303, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 305, 130, 306,
	131, 132, 0, 134, 133, 0, 246, 307, 135, 308,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 309, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 843, 0, 151,
	0, 0, 152, 250, 310, 153, 311, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 312, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 313, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 841, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 531, 740, 212, 848, 845, 840, 0, 213,
	214, 215, 216, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 849, 846, 217, 0, 0, 0,
	0, 91, 92, 93, 218, 219, 220, 221, 94, 222,
	223, 0, 95, 224, 225, 96, 0, 0, 226, 227,
	228, 0, 229, 0, 300, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 301, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 271, 108, 230,
	109, 231, 232, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 233, 115, 116,
	234, 235, 842, 0, 0, 117, 118, 236, 0, 119,
	0, 120, 0, 0, 302, 0, 121, 237, 0, 238,
	0, 122, 123, 124, 125, 239, 240, 304, 0, 129,
	0, 126, 0, 303, 127, 241, 128, 242, 243, 244,
	0, 245, 0, 305, 130, 306, 131, 132, 0, 134,
	133, 0, 246, 307, 135, 308, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 247, 141, 309, 143,
	144, 146, 145, 0, 0, 0, 248, 147, 249, 148,
	149, 0, 150, 843, 0, 151, 0, 0, 152, 250,
	310, 153, 311, 251, 154, 155, 156, 157, 0, 252,
	158, 253, 159, 0, 160, 161, 162, 254, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 312, 177, 178, 255, 179, 0,
	180, 181, 182, 183, 0, 256, 184, 185, 0, 186,
	187, 313, 188, 257, 258, 189, 0, 195, 190, 191,
	192, 194, 259, 193, 260, 0, 196, 0, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	841, 201, 202, 203, 204, 0, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 85, 0,
	212, 0, 0, 0, 0, 213, 214, 215, 216, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	849, 846, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 0, 226, 227, 228, 0, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 239, 240, 0, 0, 129, 0, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	485, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	69, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 71, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 535, 267, 0, 0, 212, 85, 0, 0,
	67, 213, 214, 215, 216, 0, 68, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 217, 0, 1154, 0, 1159, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	239, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 156, 157, 0, 252, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 69,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 71, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	0, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 535, 267, 0, 0, 212, 85, 0, 0, 67,
	213, 214, 215, 216, 0, 68, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	217, 0, 0, 0, 66, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 239,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 485, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 85, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 217,
	0, 1154, 0, 1159, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 0, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 239, 240,
	0, 0, 129, 0, 126, 0, 0, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 0, 130, 0, 131,
	132, 0, 134, 133, 0, 246, 0, 135, 0, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 0, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 0, 153, 0, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 0, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 0, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 0, 201, 202, 203, 204, 85, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 748, 226, 227, 228, 0, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 239, 240, 0, 0, 129, 0, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 85, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 88, 89, 0,
	90, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 1067, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 0, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 0, 0, 0, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 239, 240, 0, 0, 129, 0,
	126, 0, 0, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 0, 130, 0, 131, 132, 0, 134, 133,
	0, 246, 0, 135, 0, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 0, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 0,
	153, 0, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 254, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 0, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 186, 187,
	0, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 85, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 0, 0, 212,
	88, 89, 0, 90, 213, 214, 215, 216, 217, 0,
	0, 0, 0, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 1667, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 271,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 239, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 255,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 0,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 0, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 0, 0, 0, 0, 213, 214, 215,
	216, 655, 644, 645, 642, 643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 717, 0, 0, 0, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 686, 220, 687, 94, 688, 689,
	0, 95, 224, 225, 96, 0, 0, 690, 691, 228,
	0, 229, 0, 300, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 301, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 692, 109,
	693, 694, 0, 110, 0, 111, 0, 0, 0, 685,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 651, 0, 0, 117, 118, 695, 0, 119, 0,
	120, 0, 0, 302, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 239, 240, 304, 0, 129, 0,
	126, 0, 303, 127, 696, 128, 697, 698, 699, 0,
	662, 0, 305, 130, 306, 131, 132, 0, 134, 133,
	0, 246, 307, 135, 308, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 309, 143, 144,
	146, 145, 0, 0, 652, 248, 147, 700, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 310,
	153, 311, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 701, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 312, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 186, 187,
	313, 188, 702, 258, 189, 0, 195, 190, 191, 192,
	194, 703, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 704, 705, 0, 0, 200, 264, 265, 650,
	201, 202, 203, 204, 85, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 706, 0, 0, 212,
	88, 89, 0, 90, 213, 214, 215, 216, 217, 0,
	0, 0, 0, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 0, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 81,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 239, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 255,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 80,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 0, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 531, 740, 0, 0, 213, 214, 215,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 84, 0, 0, 217, 0, 0,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 0, 0, 226,
	227, 228, 0, 229, 0, 300, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 301, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 302, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 304, 0,
	129, 0, 126, 0, 303, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 305, 130, 306, 131, 132, 0,
	134, 133, 0, 246, 307, 135, 308, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 309,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 310, 153, 311, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 312, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	186, 187, 313, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 261, 262, 263, 0, 0, 200, 264,
	265, 0, 201, 202, 203, 204, 85, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 88, 89, 0, 90, 213, 214, 215, 216,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 239,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 531, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 84, 217, 0, 0,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 0, 0, 226,
	227, 228, 0, 229, 0, 300, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 301, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 302, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 304, 0,
	129, 0, 126, 0, 303, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 305, 130, 306, 131, 132, 0,
	134, 133, 0, 246, 307, 135, 308, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 309,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 310, 153, 311, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 312, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	186, 187, 313, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 261, 262, 263, 0, 0, 200, 264,
	265, 0, 201, 202, 203, 204, 85, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 88, 89, 0, 90, 213, 214, 215, 216,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 1028, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 1026, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 1130, 0, 117,
	118, 236, 0, 119, 0, 120, 1031, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 239,
	240, 0, 0, 129, 1128, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 1030, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 85,
	1129, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 88, 89, 0, 90, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 0, 95,
	224, 225, 96, 0, 0, 226, 227, 228, 1028, 229,
	0, 0, 1023, 97, 98, 99, 0, 100, 1026, 101,
	102, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 271, 108, 230, 109, 231, 232,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 233, 115, 116, 234, 235, 0,
	0, 0, 117, 118, 236, 0, 119, 0, 120, 1031,
	0, 0, 0, 121, 237, 0, 238, 0, 122, 123,
	124, 125, 1022, 240, 0, 0, 129, 0, 126, 0,
	0, 127, 241, 128, 242, 243, 244, 0, 245, 0,
	0, 130, 0, 131, 132, 0, 134, 133, 0, 246,
	0, 135, 0, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 0, 143, 144, 146, 145,
	0, 0, 0, 248, 147, 249, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 0, 153, 0,
	251, 154, 155, 156, 157, 0, 252, 158, 253, 159,
	1030, 160, 161, 162, 254, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 0, 177, 178, 255, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 0, 186, 187, 0, 188,
	257, 258, 189, 0, 195, 190, 191, 192, 194, 259,
	193, 260, 0, 196, 0, 197, 198, 199, 0, 261,
	262, 263, 0, 0, 200, 264, 265, 0, 201, 202,
	203, 204, 85, 1029, 205, 206, 207, 0, 208, 0,
	209, 210, 211, 266, 267, 0, 0, 212, 88, 89,
	0, 90, 213, 214, 215, 216, 217, 0, 1634, 0,
	0, 91, 92, 93, 218, 219, 220, 221, 94, 222,
	223, 0, 95, 224, 225, 96, 0, 0, 226, 227,
	228, 0, 229, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 271, 108, 230,
	109, 231, 232, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 233, 115, 116,
	234, 235, 0, 0, 0, 117, 118, 236, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 237, 0, 238,
	0, 122, 123, 124, 125, 239, 240, 0, 0, 129,
	0, 126, 0, 0, 127, 241, 128, 242, 243, 244,
	0, 245, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 246, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 247, 141, 0, 143,
	144, 146, 145, 0, 0, 0, 248, 147, 249, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 250,
	0, 153, 0, 251, 154, 155, 156, 157, 0, 252,
	158, 253, 159, 0, 160, 161, 162, 254, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 255, 179, 0,
	180, 181, 182, 183, 0, 256, 184, 185, 0, 186,
	187, 0, 188, 257, 258, 189, 0, 195, 190, 191,
	192, 194, 259, 193, 260, 0, 196, 0, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 85, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 88, 89, 0, 90, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 0, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 239, 240,
	0, 0, 129, 0, 126, 0, 0, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 0, 130, 0, 131,
	132, 0, 134, 133, 0, 246, 0, 135, 0, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 0, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 485, 151, 0,
	0, 152, 250, 0, 153, 0, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 0, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 0, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 0, 201, 202, 203, 204, 85, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 0, 226, 227, 228, 0, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 773, 240, 0, 0, 129, 0, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	485, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 85, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 88, 89, 543,
	90, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 0, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 0, 0, 0, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 239, 240, 0, 0, 129, 0,
	126, 0, 0, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 0, 130, 0, 131, 132, 0, 134, 133,
	0, 246, 0, 135, 0, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 0, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 0,
	153, 0, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 254, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 0, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 186, 187,
	0, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 85, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 0, 0, 212,
	88, 89, 0, 90, 213, 214, 215, 216, 217, 0,
	0, 0, 0, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 0, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 271,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 497, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 485, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 255,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 0,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 85, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 88, 89, 0, 90, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	490, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 485,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 156, 157, 0, 252, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 0, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	85, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 88, 89, 399, 90,
	213, 214, 215, 216, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 0,
	95, 224, 225, 96, 0, 0, 226, 227, 228, 0,
	229, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 230, 109, 231,
	232, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	0, 0, 0, 117, 118, 236, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 239, 240, 0, 0, 129, 0, 126,
	0, 0, 127, 241, 128, 242, 243, 244, 0, 245,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	246, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 248, 147, 249, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 0, 153,
	0, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	398, 0, 160, 161, 162, 254, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 0, 186, 187, 0,
	188, 257, 258, 189, 0, 195, 190, 191, 192, 194,
	259, 193, 260, 0, 196, 0, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 85, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 88,
	89, 0, 90, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 0, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 0, 0,
	129, 0, 126, 0, 0, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 0, 130, 0, 131, 132, 0,
	134, 133, 0, 246, 0, 135, 0, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 0,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 0, 153, 0, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 0, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	186, 187, 0, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 261, 262, 263, 0, 0, 200, 264,
	265, 0, 201, 202, 203, 204, 85, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 88, 89, 0, 90, 213, 214, 215, 216,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 1323,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 85,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 88, 89, 0, 90, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 0, 95,
	224, 225, 96, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 271, 108, 230, 109, 231, 232,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 233, 115, 116, 234, 235, 0,
	0, 0, 117, 118, 236, 0, 119, 0, 120, 0,
	0, 0, 0, 121, 237, 0, 238, 0, 122, 123,
	124, 125, 1321, 240, 0, 0, 129, 0, 126, 0,
	0, 127, 241, 128, 242, 243, 244, 0, 245, 0,
	0, 130, 0, 131, 132, 0, 134, 133, 0, 246,
	0, 135, 0, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 0, 143, 144, 146, 145,
	0, 0, 0, 248, 147, 249, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 0, 153, 0,
	251, 154, 155, 156, 157, 0, 252, 158, 253, 159,
	0, 160, 161, 162, 254, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 0, 177, 178, 255, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 0, 186, 187, 0, 188,
	257, 258, 189, 0, 195, 190, 191, 192, 194, 259,
	193, 260, 0, 196, 0, 197, 198, 199, 0, 261,
	262, 263, 0, 0, 200, 264, 265, 0, 201, 202,
	203, 204, 85, 0, 205, 206, 207, 0, 208, 0,
	209, 210, 211, 266, 267, 0, 0, 212, 88, 89,
	0, 90, 213, 214, 215, 216, 217, 0, 0, 0,
	0, 91, 92, 93, 218, 219, 220, 221, 94, 222,
	223, 0, 95, 224, 225, 96, 0, 0, 226, 227,
	228, 0, 229, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 271, 108, 230,
	109, 231, 232, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 233, 115, 116,
	234, 235, 0, 0, 0, 117, 118, 236, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 237, 0, 238,
	0, 122, 123, 124, 125, 1310, 240, 0, 0, 129,
	0, 126, 0, 0, 127, 241, 128, 242, 243, 244,
	0, 245, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 246, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 247, 141, 0, 143,
	144, 146, 145, 0, 0, 0, 248, 147, 249, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 250,
	0, 153, 0, 251, 154, 155, 156, 157, 0, 252,
	158, 253, 159, 0, 160, 161, 162, 254, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 255, 179, 0,
	180, 181, 182, 183, 0, 256, 184, 185, 0, 186,
	187, 0, 188, 257, 258, 189, 0, 195, 190, 191,
	192, 194, 259, 193, 260, 0, 196, 0, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 85, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 88, 89, 0, 90, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 0, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 889, 240,
	0, 0, 129, 0, 126, 0, 0, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 0, 130, 0, 131,
	132, 0, 134, 133, 0, 246, 0, 135, 0, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 0, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 0, 153, 0, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 0, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 0, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 0, 201, 202, 203, 204, 85, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 0, 226, 227, 228, 0, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 239, 240, 0, 0, 129, 0, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 413, 182, 183,
	0, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 85, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 88, 89, 0,
	90, 213, 214, 215, 216, 217, 0, 758, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 0, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 0, 0, 0, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 239, 240, 0, 0, 129, 0,
	126, 0, 0, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 0, 130, 0, 131, 132, 0, 134, 133,
	0, 246, 0, 135, 0, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 0, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 0,
	153, 0, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 254, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 0, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 0, 187,
	0, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 85, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 0, 0, 212,
	88, 89, 0, 90, 213, 214, 215, 216, 217, 0,
	0, 0, 0, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 0, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 271,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 595, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 255,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 0,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 85, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 88, 89, 0, 90, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	590, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 156, 157, 0, 252, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 0, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	85, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 88, 89, 0, 90,
	213, 214, 215, 216, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 0,
	95, 224, 225, 96, 0, 0, 226, 227, 549, 0,
	229, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 230, 109, 231,
	232, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	0, 0, 0, 117, 118, 236, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 239, 240, 0, 0, 129, 0, 126,
	0, 0, 127, 241, 128, 242, 243, 244, 0, 245,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	246, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 424, 0, 143, 144, 146,
	145, 0, 0, 0, 248, 147, 249, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 0, 153,
	0, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	159, 0, 160, 161, 162, 254, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 0, 186, 187, 0,
	188, 257, 258, 189, 0, 195, 190, 191, 192, 194,
	259, 193, 260, 0, 196, 0, 197, 198, 199, 0,
	423, 262, 263, 0, 0, 419, 264, 265, 0, 201,
	202, 203, 204, 85, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 88,
	89, 0, 90, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 0, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 0, 0,
	129, 0, 126, 0, 0, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 0, 130, 0, 131, 132, 0,
	134, 133, 0, 246, 0, 135, 0, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 424, 0,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 0, 153, 0, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 0, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	186, 187, 0, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 423, 262, 263, 0, 0, 419, 264,
	265, 0, 201, 202, 203, 204, 85, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 88, 89, 0, 90, 213, 214, 215, 216,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 527,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 85,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 88, 89, 0, 90, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 0, 95,
	224, 225, 96, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 271, 108, 230, 109, 231, 232,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 233, 115, 116, 234, 235, 0,
	0, 0, 117, 118, 236, 0, 119, 0, 120, 0,
	0, 0, 0, 121, 237, 0, 238, 0, 122, 123,
	124, 125, 524, 240, 0, 0, 129, 0, 126, 0,
	0, 127, 241, 128, 242, 243, 244, 0, 245, 0,
	0, 130, 0, 131, 132, 0, 134, 133, 0, 246,
	0, 135, 0, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 0, 143, 144, 146, 145,
	0, 0, 0, 248, 147, 249, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 0, 153, 0,
	251, 154, 155, 156, 157, 0, 252, 158, 253, 159,
	0, 160, 161, 162, 254, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 0, 177, 178, 255, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 0, 186, 187, 0, 188,
	257, 258, 189, 0, 195, 190, 191, 192, 194, 259,
	193, 260, 0, 196, 0, 197, 198, 199, 0, 261,
	262, 263, 0, 0, 200, 264, 265, 0, 201, 202,
	203, 204, 85, 0, 205, 206, 207, 0, 208, 0,
	209, 210, 211, 266, 267, 0, 0, 212, 88, 89,
	0, 90, 213, 214, 215, 216, 217, 0, 0, 0,
	0, 91, 92, 93, 218, 219, 220, 221, 94, 222,
	223, 0, 95, 224, 225, 96, 0, 0, 226, 227,
	228, 0, 229, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 271, 108, 230,
	109, 231, 232, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 233, 115, 116,
	234, 235, 0, 0, 0, 117, 118, 236, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 237, 0, 238,
	0, 122, 123, 124, 125, 521, 240, 0, 0, 129,
	0, 126, 0, 0, 127, 241, 128, 242, 243, 244,
	0, 245, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 246, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 247, 141, 0, 143,
	144, 146, 145, 0, 0, 0, 248, 147, 249, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 250,
	0, 153, 0, 251, 154, 155, 156, 157, 0, 252,
	158, 253, 159, 0, 160, 161, 162, 254, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 255, 179, 0,
	180, 181, 182, 183, 0, 256, 184, 185, 0, 186,
	187, 0, 188, 257, 258, 189, 0, 195, 190, 191,
	192, 194, 259, 193, 260, 0, 196, 0, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 85, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 88, 89, 0, 90, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 0, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 519, 240,
	0, 0, 129, 0, 126, 0, 0, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 0, 130, 0, 131,
	132, 0, 134, 133, 0, 246, 0, 135, 0, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 0, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 0, 153, 0, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 0, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 0, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 0, 201, 202, 203, 204, 85, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 0, 226, 227, 228, 0, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 493, 240, 0, 0, 129, 0, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 85, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 88, 89, 0,
	90, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 0, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 0, 0, 0, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 239, 240, 0, 0, 129, 0,
	126, 0, 0, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 0, 130, 0, 131, 132, 0, 134, 133,
	0, 246, 0, 135, 0, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 0, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 0,
	153, 0, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 254, 474, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 0, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 186, 187,
	0, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 85, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 0, 0, 212,
	88, 89, 0, 90, 213, 214, 215, 216, 217, 0,
	0, 0, 0, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 0, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 271,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 239, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 416,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 424,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 418,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 417,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 0,
	197, 198, 199, 0, 423, 262, 263, 0, 0, 419,
	264, 265, 0, 201, 202, 203, 204, 85, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 88, 89, 0, 90, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	239, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 0, 157, 0, 252, 158, 253, 159, 0, 160,
	0, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 0, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 427, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	428, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 0, 0, 0, 0,
	213, 214, 215, 216, 913, 914, 0, 933, 934, 935,
	943, 944, 945, 0, 0, 0, 430, 0, 0, 0,
	936, 435, 436, 0, 0, 441, 0, 916, 913, 914,
	947, 933, 934, 935, 943, 944, 945, 429, 431, 0,
	0, 0, 0, 0, 936, 0, 0, 0, 0, 915,
	0, 916, 0, 0, 947, 930, 0, 0, 913, 914,
	0, 933, 934, 935, 943, 944, 945, 0, 0, 0,
	0, 0, 0, 915, 936, 0, 432, 0, 0, 930,
	0, 916, 0, 0, 947, 0, 0, 0, 0, 0,
	433, 434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 915, 921, 0, 0, 437, 0, 930,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 948, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 0, 0, 940, 948, 0,
	0, 938, 0, 0, 0, 0, 0, 931, 921, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 0, 940, 948, 0,
	0, 931, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 937, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 438, 0,
	0, 0, 439, 0, 0, 932, 0, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 941, 0, 0,
	0, 442, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 939, 0, 0, 927, 928,
	929, 0, 926, 923, 924, 925, 917, 918, 919, 920,
	922, 0, 942, 0, 0, 0, 1991, 0, 0, 939,
	0, 0, 927, 928, 929, 0, 926, 923, 924, 925,
	917, 918, 919, 920, 922, 0, 942, 0, 0, 0,
	1989, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 927, 928, 929, 0, 926, 923, 924, 925,
	917, 918, 919, 920, 922, 0, 942, 0, 913, 914,
	1936, 933, 934, 935, 943, 944, 945, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	0, 916, 913, 914, 947, 933, 934, 935, 943, 944,
	945, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 915, 0, 916, 0, 0, 947, 930,
	0, 0, 913, 914, 0, 933, 934, 935, 943, 944,
	945, 0, 0, 0, 0, 0, 0, 915, 936, 0,
	0, 0, 0, 930, 0, 916, 0, 0, 947, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 915, 921, 0,
	0, 0, 0, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 948, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 940, 948, 0, 0, 938, 0, 0, 0, 0,
	0, 931, 921, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 938,
	0, 940, 948, 0, 0, 931, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 938,
	937, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 939,
	0, 0, 927, 928, 929, 0, 926, 923, 924, 925,
	917, 918, 919, 920, 922, 0, 942, 0, 0, 0,
	1931, 0, 0, 939, 0, 0, 927, 928, 929, 0,
	926, 923, 924, 925, 917, 918, 919, 920, 922, 0,
	942, 0, 0, 0, 1927, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 927, 928, 929, 0,
	926, 923, 924, 925, 917, 918, 919, 920, 922, 0,
	942, 0, 913, 914, 1869, 933, 934, 935, 943, 944,
	945, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 0, 916, 913, 914, 947, 933,
	934, 935, 943, 944, 945, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 915, 0, 916,
	0, 0, 947, 930, 0, 0, 913, 914, 0, 933,
	934, 935, 943, 944, 945, 0, 0, 0, 0, 0,
	0, 915, 936, 0, 0, 0, 0, 930, 0, 916,
	0, 0, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 915, 921, 0, 0, 0, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 948, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 940, 948, 0, 0, 938,
	0, 0, 0, 0, 0, 931, 921, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 938, 0, 940, 948, 0, 0, 931,
	937, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 938, 937, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 937, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 939, 0, 0, 927, 928, 929, 0,
	926, 923, 924, 925, 917, 918, 919, 920, 922, 0,
	942, 0, 0, 0, 1847, 0, 0, 939, 0, 0,
	927, 928, 929, 0, 926, 923, 924, 925, 917, 918,
	919, 920, 922, 0, 942, 0, 0, 0, 1846, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	927, 928, 929, 0, 926, 923, 924, 925, 917, 918,
	919, 920, 922, 0, 942, 0, 913, 914, 1736, 933,
	934, 935, 943, 944, 945, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 916,
	913, 914, 947, 933, 934, 935, 943, 944, 945, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
	0, 915, 0, 916, 0, 0, 947, 930, 0, 0,
	913, 914, 0, 933, 934, 935, 943, 944, 945, 0,
	0, 0, 0, 0, 0, 915, 936, 0, 0, 0,
	0, 930, 0, 916, 0, 0, 947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 915, 921, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 948, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 940,
	948, 0, 0, 938, 0, 0, 0, 0, 0, 931,
	921, 0, 0, 0, 0, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 938, 0, 940,
	948, 0, 0, 931, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 938, 937, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 939, 0, 0,
	927, 928, 929, 0, 926, 923, 924, 925, 917, 918,
	919, 920, 922, 0, 942, 0, 0, 0, 1670, 0,
	0, 939, 0, 0, 927, 928, 929, 0, 926, 923,
	924, 925, 917, 918, 919, 920, 922, 0, 942, 0,
	0, 0, 1654, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 927, 928, 929, 0, 926, 923,
	924, 925, 917, 918, 919, 920, 922, 0, 942, 0,
	913, 914, 1231, 933, 934, 935, 943, 944, 945, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 916, 913, 914, 947, 933, 934, 935,
	943, 944, 945, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 0, 0, 915, 0, 916, 0, 0,
	947, 930, 0, 0, 0, 0, 913, 914, 0, 933,
	934, 935, 943, 944, 945, 0, 0, 0, 0, 915,
	0, 0, 936, 0, 0, 930, 0, 0, 0, 916,
	0, 0, 947, 0, 0, 0, 0, 0, 913, 914,
	0, 933, 934, 935, 943, 944, 945, 0, 0, 0,
	921, 915, 0, 0, 936, 0, 0, 930, 0, 1146,
	0, 916, 0, 0, 947, 0, 0, 0, 0, 940,
	948, 0, 0, 0, 921, 2070, 0, 0, 0, 0,
	0, 0, 0, 915, 0, 946, 0, 0, 0, 930,
	0, 0, 0, 940, 948, 0, 0, 938, 0, 0,
	0, 0, 0, 931, 0, 0, 921, 0, 1510, 946,
	0, 1509, 0, 0, 0, 0, 0, 1147, 0, 0,
	0, 938, 0, 0, 0, 940, 948, 931, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 938, 0, 0, 0, 940, 948, 931,
	0, 0, 0, 0, 0, 0, 2069, 0, 0, 0,
	0, 932, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 937, 938, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 939, 0, 0, 927, 928, 929, 0, 926, 923,
	924, 925, 917, 918, 919, 920, 922, 0, 942, 932,
	1445, 0, 0, 0, 0, 939, 0, 0, 927, 928,
	929, 941, 926, 923, 924, 925, 917, 918, 919, 920,
	922, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	927, 928, 929, 0, 926, 923, 924, 925, 917, 918,
	919, 920, 922, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 927, 928, 929, 0, 926, 923, 924, 925,
	917, 918, 919, 920, 922, 951, 942, 0, 0, 0,
	0, 913, 914, 0, 933, 934, 935, 943, 944, 945,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	0, 950, 0, 0, 916, 913, 914, 947, 933, 934,
	935, 943, 944, 945, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 915, 0, 916, 0,
	0, 947, 930, 0, 0, 913, 914, 0, 933, 934,
	935, 943, 944, 945, 0, 0, 0, 0, 0, 0,
	915, 936, 0, 0, 0, 0, 930, 0, 916, 0,
	0, 947, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	915, 921, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 948, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 0,
	0, 0, 0, 0, 940, 948, 0, 0, 938, 0,
	0, 0, 0, 0, 931, 921, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 940, 948, 0, 0, 931, 937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 937, 469, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 913, 914, 0,
	933, 934, 935, 943, 944, 945, 932, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 941, 0,
	916, 0, 939, 947, 0, 927, 928, 929, 0, 926,
	923, 924, 925, 917, 918, 919, 920, 922, 1658, 942,
	0, 0, 915, 0, 0, 0, 939, 0, 930, 927,
	928, 929, 0, 926, 923, 924, 925, 917, 918, 919,
	920, 922, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 927,
	928, 929, 0, 926, 923, 924, 925, 917, 918, 919,
	920, 922, 0, 942, 0, 0, 0, 921, 0, 0,
	0, 0, 1516, 913, 914, 0, 933, 934, 935, 943,
	944, 945, 0, 0, 0, 0, 940, 948, 0, 936,
	0, 0, 0, 1511, 0, 0, 916, 0, 0, 947,
	0, 0, 946, 913, 914, 0, 933, 934, 935, 943,
	944, 945, 0, 0, 938, 0, 0, 0, 915, 936,
	931, 0, 0, 0, 930, 0, 916, 0, 0, 947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 915, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 0, 0, 0, 913,
	914, 0, 933, 934, 935, 943, 944, 945, 932, 0,
	0, 0, 940, 948, 0, 936, 0, 0, 0, 1469,
	941, 0, 916, 921, 0, 947, 0, 0, 946, 913,
	914, 0, 933, 934, 935, 943, 944, 945, 0, 0,
	938, 0, 940, 948, 915, 936, 931, 0, 0, 0,
	930, 0, 916, 0, 0, 947, 0, 0, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 937, 0, 0, 915, 0, 931, 0, 939, 0,
	930, 927, 928, 929, 0, 926, 923, 924, 925, 917,
	918, 919, 920, 922, 0, 942, 0, 0, 0, 921,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 932, 0, 0, 0, 940, 948,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 921,
	0, 0, 0, 0, 946, 913, 914, 0, 933, 934,
	935, 943, 944, 945, 932, 0, 938, 0, 940, 948,
	0, 936, 931, 0, 0, 0, 941, 0, 916, 0,
	0, 947, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 937, 0, 0,
	915, 0, 931, 0, 939, 0, 930, 927, 928, 929,
	0, 926, 923, 924, 925, 917, 918, 919, 920, 922,
	0, 942, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 927, 928, 929,
	932, 926, 923, 924, 925, 917, 918, 919, 920, 922,
	0, 942, 941, 0, 0, 921, 0, 0, 913, 914,
	0, 933, 934, 935, 943, 944, 945, 0, 0, 0,
	932, 0, 0, 0, 940, 948, 0, 0, 0, 0,
	0, 916, 941, 0, 947, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 915, 0, 0, 0, 0, 931, 930,
	939, 0, 0, 927, 928, 929, 0, 926, 923, 924,
	925, 917, 918, 919, 920, 922, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 0, 0, 927, 928, 929, 0, 926, 923, 924,
	925, 917, 918, 919, 920, 922, 0, 942, 921, 0,
	0, 0, 0, 0, 913, 914, 0, 933, 934, 935,
	943, 944, 945, 0, 0, 0, 932, 940, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 916, 941, 0,
	947, 0, 0, 946, 913, 914, 0, 0, 0, 0,
	943, 944, 945, 0, 0, 938, 0, 0, 0, 915,
	0, 931, 0, 0, 0, 930, 0, 916, 0, 0,
	947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 915,
	0, 0, 0, 0, 0, 930, 939, 0, 0, 927,
	928, 929, 0, 926, 923, 924, 925, 917, 918, 919,
	920, 922, 0, 942, 921, 1478, 1479, 0, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 1646, 0, 940, 948, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 921, 1478, 1479, 0, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 940, 948, 0, 1493, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 1493, 931, 0, 939,
	0, 0, 927, 928, 929, 0, 926, 923, 924, 925,
	917, 918, 919, 920, 922, 1484, 942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 941, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 939, 0, 0, 927, 928,
	929, 0, 926, 923, 924, 925, 917, 918, 919, 920,
	922, 0, 942, 0, 799, 791, 816, 784, 807, 806,
	0, 0, 786, 785, 0, 939, 1495, 818, 817, 0,
	0, 0, 926, 923, 924, 925, 917, 918, 919, 920,
	922, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 812, 0,
	804, 803, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	1491, 1492, 0, 1489, 1486, 1487, 1488, 1480, 1481, 1482,
	1483, 1485, 0, 0, 794, 793, 795, 796, 797, 0,
	815, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	1491, 1492, 0, 1489, 1486, 1487, 1488, 1480, 1481, 1482,
	1483, 1485, 0, 0, 0, 788, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 792, 0, 0, 0, 0, 0, 0, 0, 799,
	791, 816, 784, 807, 806, 0, 0, 786, 785, 0,
	0, 0, 818, 817, 0, 0, 800, 0, 0, 0,
	1165, 1163, 1164, 1167, 1166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 789, 804, 803, 0, 0, 0,
	0, 0, 798, 790, 802, 0, 0, 0, 0, 0,
	0, 820, 0, 0, 0, 0, 0, 0, 0, 787,
	0, 801, 813, 814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 794,
	793, 795, 796, 797, 0, 815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	788, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 800, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 0, 0, 0, 0, 0, 798, 790, 0,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 0,
	0, 0, 0, 0, 787, 0, 0, 813, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819,
}
var sqlPact = [...]int{

	142, -1000, 48, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 747,
	15570, 15570, 19149, -1000, -1000, -1000, -1000, -1000, -1000, 751,
	732, 1003, 5232, 19149, 19149, 18876, 1401, 1401, 20514, -1000,
	-1000, 23790, -1000, 24318, 544, 554, 544, 544, 552, 20514,
	19149, 633, 836, 143, -1000, 982, 24, 23517, 19149, 1413,
	46, 17511, 359, 142, 18603, 23244, 19149, 18330, 616, 43,
	16132, 19149, -1000, 53, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1244, 358,
	53, -1000, 1238, 1111, 1107, 17511, 22971, 22698, 22425, 22152,
	-1000, 12157, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 798, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 371, 365, -1000, 18057, -1000,
	996, -1000, 45, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 995, -1000, 19149, -1000, -1000, 21879, 21606, 361, 940,
	-1000, -1000, 626, 456, 1419, -1000, 59, -1000, -1000, -1000,
	1236, -1000, 993, 1235, 1234, 1233, 1231, 1227, 1224, 453,
	917, 524, -1000, 940, -1000, 940, -1000, -1000, -1000, 609,
	20514, -1000, -1000, 17511, -1000, 21333, 19149, 19149, 1121, 21060,
	-1000, 982, -1000, -1000, -1000, 1009, 1397, 1397, 1397, 1444,
	160, 159, 143, 30, 19149, -1000, 360, 30, 7353, 7353,
	-1000, -1000, 359, -1000, 379, 15000, -1000, 8597, -1000, 972,
	1311, 464, 688, 1307, -135, 791, 763, 1303, 15859, 16132,
	43, 41, -1000, -1000, -1000, 4935, 15859, 659, 14181, 53,
	-1000, -1000, -1000, 17511, 19149, 19149, 701, 20787, -1000, 1301,
	125, 1300, -1000, 121, 1299, -1000, 121, 1295, 32, -1000,
	-1000, -1000, -1000, -1000, -1000, 359, 17784, 19149, 1552, 27472,
	-1000, 10415, -1000, -1000, 15570, 741, 15570, -1000, -1000, 1551,
	-1000, 10415, -1000, 40, 36, 1079, 1080, 12742, 12456, 1359,
	1211, -1000, -1000, -1000, 58, 5232, 19149, 1255, 15570, 19149,
	19149, 19149, 19149, 19149, 19149, -1000, 1077, -1000, -1000, 19149,
	19149, -1000, 34, 33, -1000, 20514, -1000, 127, -1000, 356,
	1048, 465, 162, 20241, 465, 1039, -1000, 1009, -1000, 991,
	1073, 9518, 10415, 143, -1000, -1000, 143, 143, 10415, -1000,
	-1000, 19149, 30, 1547, 19149, 95, -1000, 26211, -1000, -1000,
	10415, 10415, 10415, 10415, 10415, 891, 408, -1000, 355, 350,
	6154, -1000, -1000, 1633, -1000, -1000, -1000, 182, -1000, -1000,
	10415, 53, -1000, -1000, -1000, -1000, 349, 1656, -1000, 479,
	-1000, -1000, -1000, 466, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1253, 348, 345, -1000, -1000, -1000, -1000,
	342, 341, 336, 335, 334, 333, 332, 331, 330, 329,
	326, 321, 317, 313, 312, 866, -1000, 490, -1000, -1000,
	490, 490, -1000, 305, 305, 307, -1000, -1000, -1000, -1000,
	305, -1000, -1000, -1000, 442, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 311, 95, -1000, -1000, -1000, 19149, 31, -1000,
	26719, -1000, -26, 788, -1000, 16965, 1483, 1479, 1382, 17511,
	1465, 1462, 605, 19149, 19149, 604, 600, 17511, 434, -1000,
	-1000, -1000, 19149, -1000, -1000, 26, -1000, -1000, 1223, 27,
	-1000, -1000, 483, 101, 1521, 101, 14454, -1000, 19149, 19149,
	-1000, 19149, -1000, -1000, 19149, -1000, 19149, 19149, -1000, 19149,
	320, 16419, 780, 1293, 669, 24, 13, -1000, 1554, -1000,
	-1000, -1000, -1000, 138, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 307, 866, 305, 305, 305, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 442, -1000, -1000, 490, 490, 490, -1000,
	-1000, 11, 26719, 598, -1000, 1222, 543, 9, 858, 1102,
	883, -1000, -1000, -1000, -1000, 22, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1605, -1000, -1000, 1631,
	22, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1649, 5232, -1000, -1000, -1000, 19149, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 858, 1102, -1000, -1000,
	17511, 16692, 1518, 1289, 877, -1000, 1511, 19149, 992, 1035,
	-1000, 619, 1286, -1000, -1000, -1000, -1000, 26719, -1000, 26719,
	719, 1104, -1000, 1104, 16, -1000, 25898, -1000, 300, 5,
	483, 7353, 13892, 27317, 27472, 19149, 627, 10415, 10415, 10415,
	10415, 10415, 10415, 10415, 10415, 10415, 10415, 10415, 10415, 10415,
	10415, 10415, 10415, 10415, 10415, 10415, 10415, 10415, 10415, 1165,
	10415, 596, 10415, 10415, 10415, 10415, 1108, 904, 271, 890,
	5232, -1000, -1000, 711, 711, 711, 26928, 26928, 269, 408,
	-1000, 10415, -1000, 9195, 159, 25500, 15, -1000, -1000, -1000,
	7051, 488, 26719, 53, 5831, -1000, 1627, 808, 1262, 1196,
	298, 157, 154, 10415, 10415, 10714, 10714, 10415, 11013, 10415,
	10415, 6453, 10415, 10415, 10415, 10415, 10415, 10415, -1000, 297,
	-1000, -1000, -1000, -1000, 1623, -1000, -1000, 1622, -1000, 622,
	620, 1619, 483, 152, 8597, -1000, 780, 19149, 19149, 19149,
	-1000, -1000, 1031, 19968, 1030, 27472, 19149, -1000, 296, 290,
	1095, 1092, 19149, 19149, 19695, 19422, 19149, 935, 286, 285,
	19149, 753, -1000, 19149, 19149, 734, 1164, 1001, -1000, 470,
	15859, 658, 1220, 19149, 735, 10415, 772, -1000, 13603, 497,
	19149, 755, 84, -1000, -1000, -1000, 427, 19149, -1000, -1000,
	-1000, 125, -1000, 121, 121, -1000, -1000, 17511, -1000, -1000,
	-1000, -1000, -1000, -1000, 27472, 406, 405, -1000, 1616, 590,
	-1000, 583, 580, 579, -1000, 280, -1000, 10415, 19149, 19149,
	1102, -1000, -1000, -1000, -1000, 746, -1000, 834, -1000, 13028,
	-1000, -1000, -1000, -1000, -27, -1000, -1000, -1000, -1000, 149,
	3, -2, 27472, -1000, -1000, -1000, -1000, -1000, 19149, 315,
	19149, 24, 19149, -1000, 1643, 24, 19149, 1284, 1317, 425,
	19149, -1000, -1000, -1000, 10415, -1000, -1000, -1000, 24, -1000,
	1195, -1000, -84, 1987, 1368, -139, 151, 440, -1000, 13314,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	448, 1029, 1029, 530, 530, 530, 530, 394, 394, 1124,
	613, 27064, 27064, 27064, 211, 284, 284, 27064, 27064, 27064,
	26928, 26825, 179, 10415, 10415, 575, 871, 271, 179, 10415,
	1587, 179, 179, 179, -1000, 989, -1000, -1000, -1000, -1000,
	1219, 270, 11013, 11013, -1000, -1000, -1000, 6154, 11611, -1000,
	-1000, -1000, -1000, -1000, 268, 10415, -1000, 25810, -165, -3,
	-1000, -1000, 10415, -63, -88, -1000, -1000, 679, -1000, 10415,
	-1000, -9, 10415, 10415, 10415, 148, 147, -1000, 916, 262,
	257, 10415, -1000, -1000, 26689, 3987, 146, 1217, -132, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 145, 144, 26613, -132,
	140, 2094, -1000, 11013, 11013, 11013, 6154, 256, 139, 25866,
	-132, 26583, 8896, 8896, 8896, 133, 26477, 10415, -132, 3768,
	3663, 3345, -7, -11, -12, 1614, -16, 131, 446, 445,
	126, 1195, -1000, -1000, -1000, -1000, 574, 569, 1283, -1000,
	1028, -1000, 501, -1000, 825, 10415, 11884, 243, 240, 851,
	-1000, 1280, 960, 1279, 960, -1000, -26, 786, 10415, 10415,
	-1000, 568, -1000, -1000, 566, 470, 1213, 637, -1000, 964,
	-1000, -1000, 649, -1000, -1000, 6752, 26719, -1000, 736, 1384,
	-17, -1000, -1000, 7353, 483, 14454, 13892, 8597, -25, -1000,
	-1000, -1000, 780, -1000, 416, 1611, 123, 1063, 887, 815,
	712, 1607, 26719, -27, -27, -1000, -1000, -1000, -1000, -1000,
	19149, 1141, -1000, 16692, 234, 19149, 233, -1000, 231, -1000,
	-1000, 230, 19149, 1084, 425, 15859, -1000, 465, -1000, 119,
	1180, 1437, -1000, 13892, 1103, 1100, 13892, 1205, 927, 927,
	927, -1000, 227, 852, 440, 4327, 10415, 17238, 942, 86,
	117, 1987, 10415, 179, 179, 10415, 11013, 11013, -1000, 179,
	-1000, -1000, -1000, -1000, -1000, 1212, 223, 10415, 27472, 27135,
	3873, -29, -1000, 8274, -33, -1000, 10415, -1000, 25470, -1000,
	-1000, 400, 1315, -1000, 10415, 26265, 114, 7975, -1000, 26235,
	-18, -18, -1000, 1642, -1000, 14727, 486, 961, 25446, 27317,
	27472, -1000, 10415, -1000, -1000, 1210, 10415, -1000, 27317, 27472,
	11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013,
	11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013, 1099,
	11013, 1582, 1582, 1582, -39, 7652, -1000, 1251, 1210, 10415,
	10415, 27472, 113, 112, 111, -1000, 10415, -132, 10415, 10415,
	10415, -1000, -1000, -1000, 110, -1000, 1603, -1000, -1000, -1000,
	-1000, 1180, 19149, 19149, 19149, 1278, -1000, 1342, -1000, 25136,
	-34, -1000, 322, 1423, 10415, -1000, -1000, 222, 11884, 19149,
	-1000, 1122, 1142, 536, 19149, -1000, 19149, -1000, 19149, 19149,
	19149, -35, -41, 19149, 19149, -1000, 15859, 606, 221, -1000,
	-86, -1000, 7353, 255, 24, -86, 735, -1000, -50, -1000,
	426, -1000, 391, 384, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 107, -1000, -1000, 1149, -1000, 11884, 214, 19149,
	16692, 1501, 11884, 987, 1086, 425, 15859, -1000, 619, -1000,
	474, 10415, 10415, 1987, 13892, 13892, 1358, 1097, 13892, -1000,
	-1000, -1000, -1000, 382, 373, 381, 12157, 17238, -1000, 1601,
	1115, -52, -1000, -1000, 19149, 213, -1000, 440, 603, 179,
	3751, 3285, 10415, 27472, 27034, -53, 10415, 10415, -1000, -54,
	-1000, 10415, 377, 26719, -1000, -1000, -1000, 26719, 10415, 1636,
	10415, 106, 104, 103, -1000, -1000, -1000, 24063, 10415, 102,
	-1000, 90, 89, 26719, 1251, 26719, -1000, -1000, 539, 539,
	1582, 1582, 1582, 1582, 2002, 2002, 2081, 654, 689, 689,
	689, 674, 375, 375, 689, 689, 689, 1208, 1101, 210,
	27165, 10415, -58, -1000, -1000, -1000, 26719, 26719, 85, -1000,
	-1000, -1000, -132, 3309, 25106, 25082, -1000, 78, 474, -1000,
	-1000, -1000, 19149, -1000, 19149, -1000, 19149, 19149, 1193, 1020,
	-1000, -1000, 1090, 209, 11013, 19149, -1000, 842, 11884, 1390,
	53, 19149, 1390, 24772, 5831, -64, -69, 1018, -1000, 1016,
	10415, -1000, 27472, 960, 960, -1000, 564, 563, -1000, -1000,
	-1000, -1000, -51, 15297, 1640, -86, 1326, 19149, 1381, -1000,
	-1000, 207, -1000, -1000, -1000, 912, -70, 11884, -71, 76,
	24, -75, 19149, -1000, 425, 15859, -1000, 1317, -1000, 19149,
	26719, -132, -1000, 1358, -1000, 196, 10415, 13892, -1000, -139,
	-1000, -76, -1000, 440, -77, -1000, 374, -159, -1000, 423,
	-1000, 440, 192, 19149, 17238, 10415, 10415, 27034, -89, -1000,
	179, 179, -1000, 24742, -1000, 26719, -1000, 26235, -1000, -1000,
	-1000, 889, -1000, 24718, -1000, -1000, -1000, -1000, 11013, 1203,
	191, 27472, 24408, -1000, -1000, 10415, -1000, -1000, -1000, -1000,
	-1000, 1156, -1000, -1000, 19149, 1024, -1000, -1000, 10415, 27165,
	190, 1141, 189, -1000, -1000, -1000, -1000, -1000, -1000, 1423,
	-9, -1000, 803, -1000, -1000, 26719, 1415, -1000, -1000, 19149,
	19149, -1000, 187, 53, -95, -1000, 422, 617, -99, 19149,
	-1000, -1000, 5529, 19149, 842, -107, -1000, 1141, -1000, 842,
	184, 15859, -1000, 1084, -100, -1000, 1496, -1000, 19149, 26719,
	-1000, 440, -1000, 1588, 17238, 320, -1000, 1115, -1000, 4635,
	17238, 19149, -108, -1000, 179, 179, -1000, -1000, 74, 961,
	1436, -1000, 3933, 11013, 27472, -119, -1000, 24378, -1000, -1000,
	1277, 24354, 1066, 19149, -1000, 19149, 1390, 73, 19149, 504,
	19149, -1000, -1000, 10415, 1640, -1000, -1000, 1639, 699, -1000,
	483, -1000, 181, 1141, 842, -1000, 1141, 11884, -1000, 1086,
	19149, 175, -125, 17238, -1000, -1000, 323, -1000, -1000, 1583,
	-1000, -127, -1000, -1000, 818, 10415, 3933, -137, -1000, -1000,
	1269, -1000, 974, 901, 70, -141, -1000, -1000, 162, -1000,
	10415, -1000, -18, -1000, -1000, 14454, -1000, 19149, -1000, 1141,
	-1000, -143, -1000, -1000, -1000, -1000, -1000, 440, 212, -1000,
	69, 10116, 10116, -132, -1000, 19149, -1000, 984, 977, 728,
	-1000, -1000, -1000, -1000, -1000, 1066, 26719, 68, -121, -147,
	-1000, 842, 17238, -1000, -1000, -1000, -1000, 11312, 956, 721,
	25834, -1000, -1000, -1000, 1334, -1000, 522, 945, 945, 974,
	1636, -1000, 929, 1141, -1000, 1560, -1000, -1000, -1000, -1000,
	-1000, -1000, 1567, -1000, -1000, 1109, -1000, -1000, -1000, -1000,
	-1000, -1000, 9817, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1897, 1896, 1522, 1520, 1895, 1893, 1515, 1891, 1888,
	1887, 1885, 1884, 1883, 122, 1506, 1484, 36, 1482, 1879,
	124, 1878, 1877, 1876, 120, 1875, 1874, 1872, 1871, 64,
	1870, 1869, 1471, 1453, 1868, 1866, 118, 1865, 23, 1864,
	94, 1861, 42, 167, 2131, 147, 1859, 1858, 1857, 35,
	127, 104, 1856, 41, 1854, 1853, 67, 48, 26, 25,
	1851, 116, 133, 1232, 34, 1848, 1846, 153, 1842, 55,
	28, 2156, 161, 159, 140, 134, 1840, 1839, 1838, 1837,
	71, 1834, 5, 1823, 1821, 12, 84, 15, 1816, 57,
	59, 1810, 1808, 142, 1800, 92, 117, 1433, 22, 139,
	85, 1791, 102, 14, 95, 1788, 1787, 145, 100, 1785,
	56, 101, 149, 1784, 79, 162, 86, 30, 93, 125,
	1780, 1774, 1772, 106, 1767, 128, 91, 1766, 1765, 97,
	1763, 148, 152, 1762, 1761, 144, 1760, 1759, 1757, 170,
	1756, 1755, 163, 1754, 11, 53, 89, 3, 1465, 1441,
	129, 83, 29, 24, 1753, 1585, 961, 861, 47, 107,
	90, 63, 108, 73, 87, 156, 18, 1752, 1751, 131,
	1745, 1740, 1739, 1737, 1735, 103, 1734, 1731, 105, 154,
	16, 8, 13, 111, 70, 51, 110, 130, 158, 135,
	1730, 113, 132, 66, 659, 1729, 1726, 1252, 137, 1724,
	1722, 1721, 1249, 1175, 1164, 99, 1720, 1719, 648, 20,
	1717, 1716, 74, 1714, 136, 1713, 1712, 155, 224, 27,
	1711, 50, 96, 114, 1710, 58, 0, 2426, 1820, 1709,
	143, 98, 1708, 1706, 1705, 1702, 40, 2, 10, 9,
	6, 4, 54, 19, 1701, 1700, 146, 38, 88, 1699,
	160, 1697, 1696, 1695, 62, 1694, 17, 1691, 21, 1687,
	1684, 7, 1, 1682, 1680, 151, 1679, 126, 1678, 1576,
	1673, 157, 1671, 1665, 1575, 37, 115,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 51, 51, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 48,
	48, 53, 53, 53, 55, 55, 52, 52, 47, 47,
	5, 5, 225, 225, 37, 37, 41, 41, 38, 39,
	39, 40, 40, 6, 6, 6, 7, 7, 7, 7,
	7, 7, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 99, 99, 98, 98, 101, 101, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	193, 193, 192, 19, 167, 167, 20, 20, 20, 20,
	21, 124, 124, 22, 22, 22, 22, 23, 28, 265,
	265, 265, 269, 269, 270, 270, 271, 271, 271, 271,
	271, 271, 271, 267, 267, 27, 31, 31, 31, 31,
	31, 143, 139, 139, 141, 141, 141, 141, 62, 138,
	138, 138, 138, 140, 140, 140, 140, 218, 217, 217,
	223, 223, 223, 77, 77, 77, 77, 77, 78, 78,
	78, 216, 216, 216, 216, 224, 224, 224, 224, 224,
	224, 79, 79, 79, 222, 222, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 18, 266, 266, 268,
	268, 33, 33, 10, 10, 11, 11, 80, 80, 81,
	81, 146, 146, 146, 146, 82, 82, 54, 54, 54,
	145, 234, 234, 235, 235, 235, 235, 235, 235, 236,
	236, 236, 236, 236, 236, 236, 232, 232, 233, 230,
	230, 231, 231, 231, 231, 272, 272, 144, 144, 85,
	85, 239, 239, 239, 239, 237, 237, 237, 237, 237,
	240, 238, 241, 241, 241, 241, 241, 179, 179, 179,
	35, 12, 60, 60, 13, 9, 9, 128, 128, 89,
	89, 184, 184, 184, 70, 70, 49, 49, 49, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	129, 129, 130, 130, 25, 30, 34, 34, 34, 34,
	34, 274, 274, 66, 66, 66, 66, 67, 67, 142,
	142, 142, 142, 142, 61, 8, 8, 56, 56, 57,
	57, 58, 58, 59, 59, 275, 275, 24, 24, 24,
	24, 24, 73, 73, 135, 135, 135, 137, 137, 136,
	136, 136, 114, 114, 114, 36, 94, 94, 103, 103,
	104, 104, 190, 105, 105, 29, 29, 44, 44, 42,
	42, 42, 42, 42, 42, 43, 43, 45, 45, 45,
	45, 45, 45, 45, 247, 247, 247, 250, 250, 246,
	248, 248, 249, 249, 273, 273, 115, 115, 115, 84,
	83, 83, 87, 87, 86, 88, 88, 183, 112, 112,
	112, 112, 131, 132, 132, 133, 133, 134, 134, 111,
	111, 163, 163, 46, 46, 93, 93, 95, 95, 153,
	153, 153, 154, 154, 152, 152, 152, 152, 185, 185,
	185, 185, 185, 185, 185, 185, 263, 263, 263, 264,
	264, 182, 182, 186, 186, 186, 186, 186, 186, 180,
	180, 180, 180, 181, 181, 191, 191, 118, 118, 118,
	118, 116, 116, 117, 117, 187, 187, 187, 187, 113,
	113, 188, 188, 188, 147, 147, 194, 194, 194, 212,
	212, 92, 92, 92, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	196, 196, 196, 196, 198, 198, 198, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 211, 211, 211, 211, 211, 199, 199, 206, 206,
	207, 207, 208, 209, 200, 200, 201, 201, 202, 203,
	210, 210, 210, 210, 214, 214, 204, 204, 204, 204,
	204, 205, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 126, 126, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	157, 157, 157, 157, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 242, 242, 242, 242, 242,
	242, 242, 244, 244, 245, 245, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 251, 251, 252, 252, 254, 254, 255,
	255, 256, 257, 257, 257, 258, 259, 259, 253, 253,
	260, 260, 260, 261, 261, 262, 262, 262, 262, 262,
	169, 169, 169, 170, 170, 171, 177, 177, 177, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 68, 68, 68, 68, 68,
	100, 100, 166, 166, 164, 164, 164, 168, 168, 119,
	119, 213, 213, 213, 213, 213, 213, 213, 120, 120,
	120, 127, 121, 121, 122, 122, 122, 122, 122, 122,
	160, 161, 123, 123, 123, 162, 162, 172, 176, 176,
	175, 174, 174, 173, 173, 150, 150, 151, 151, 149,
	148, 108, 108, 107, 107, 106, 106, 276, 276, 178,
	178, 109, 109, 110, 102, 102, 189, 189, 189, 189,
	96, 96, 75, 75, 97, 97, 71, 71, 74, 74,
	72, 72, 72, 72, 90, 90, 91, 91, 69, 69,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 215, 215, 215, 165, 63, 63, 63, 64, 64,
	65, 65, 220, 220, 220, 221, 221, 221, 221, 219,
	219, 219, 219, 219, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 3, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 6, 1, 3, 3, 0, 2, 0, 2, 1,
	3, 5, 0, 4, 6, 7, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 3, 4, 4, 2, 2, 2, 0, 2,
	0, 8, 8, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 5, 2, 0, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 6, 8,
	5, 7, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 7, 4,
	6, 3, 1, 5, 6, 9, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -25, -27, -35, -36, 23,
	34, 222, 65, -8, -9, -10, -11, -12, -13, -249,
	93, 101, 123, 204, 100, 86, 117, 225, 233, -42,
	-44, 241, -143, 242, 35, 251, 59, 96, 227, 220,
	221, 273, 67, -247, -45, -43, 321, 296, 302, 236,
	-46, 259, 288, 324, 259, 132, 79, 291, -265, -97,
	259, 79, -72, -63, 314, 4, -226, -228, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 58, 59, 60,
	62, 64, 65, 66, 69, 70, 77, 78, 80, 82,
	86, 88, 92, 93, 95, 100, 101, 107, 108, 111,
	113, 118, 123, 124, 125, 126, 133, 136, 138, 131,
	146, 148, 149, 152, 151, 156, 159, 162, 164, 165,
	166, 169, 167, 171, 172, 174, 173, 179, 181, 182,
	184, 187, 190, 193, 196, 197, 198, 199, 202, 204,
	206, 207, 208, 210, 211, 213, 214, 215, 216, 217,
	220, 218, 219, 221, 222, 223, 225, 227, 228, 230,
	232, 233, 234, 235, 238, 239, 241, 242, 244, 247,
	250, 251, 252, 255, 253, 249, 258, 260, 261, 262,
	269, 273, 274, 275, 276, 279, 280, 281, 283, 285,
	286, 287, 292, 297, 298, 299, 300, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 50, 51, 52, 54,
	81, 83, 84, 99, 102, 103, 109, 119, 121, 127,
	128, 137, 139, 140, 141, 143, 154, 168, 178, 180,
	191, 195, 201, 203, 209, 229, 237, 245, 246, 254,
	256, 264, 265, 266, 270, 271, 288, 289, -265, -71,
	-63, 79, 88, 136, 281, 280, 79, 132, 259, 291,
	-17, 321, -29, -7, -15, -4, -24, -36, -14, -32,
	-18, -33, -16, 23, -219, 4, -226, -228, -227, -229,
	56, 68, 116, 135, 129, 145, 147, 155, 157, 170,
	192, 194, 226, 243, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 48, 49, 53, 55, 57, 63,
	67, 71, 72, 73, 74, 75, 76, 85, 87, 89,
	90, 91, 94, 96, 98, 104, 105, 106, 112, 114,
	115, 117, 120, 122, 130, 132, 134, 142, 144, 150,
	153, 158, 160, 161, 175, 176, 177, 183, 185, 186,
	188, 189, 200, 205, 212, 224, 236, 240, 248, 257,
	259, 263, 267, 268, 272, 277, 278, 282, 284, 290,
	291, 293, 294, 295, 296, -63, -63, -63, 204, 22,
	-269, 22, -270, -271, 67, 93, 117, 236, 136, 88,
	280, -269, -67, 233, -63, -139, 159, 239, 229, 269,
	-140, -138, -218, 264, 169, -98, -63, 4, 22, 79,
	58, 80, 118, 132, 133, 63, 64, 149, 260, 264,
	269, 67, 283, -274, 269, 269, -274, -274, -66, 269,
	267, -67, -218, -273, 259, 259, 282, 291, -128, 79,
	278, -43, -45, -44, -86, -87, 277, 142, 98, 189,
	-42, -44, -247, -250, 210, -246, -63, -250, -83, -84,
	22, 90, 325, -187, -71, 186, -110, 321, -3, -187,
	127, -71, -74, 127, -71, -63, -187, 127, 267, 325,
	-97, -90, -63, -149, -148, 323, 115, 115, 321, -107,
	-108, -148, -149, 115, 144, 144, -188, -187, -63, 127,
	-75, 127, -74, -99, 127, -98, -99, 127, -193, -192,
	-221, 4, -226, -228, -227, 288, 259, 132, -167, 321,
	-124, 321, -63, 22, 185, 325, 185, -63, -139, 52,
	-139, 321, -141, -61, -62, 146, 206, 267, 306, 115,
	300, -79, 5, 85, -101, 323, 115, -266, 185, 115,
	115, 115, 115, 115, 115, 300, 146, 206, 232, 259,
	291, -142, -61, -62, -142, 267, -67, -113, -187, -98,
	127, -63, -98, 132, -63, 127, -86, -87, -112, -131,
	-132, 158, 183, -115, 22, 90, -115, -115, 44, 322,
	322, 325, -250, -91, 321, -102, -189, -155, 314, -157,
	312, 313, 318, 175, 301, -169, -159, -172, 99, 229,
	321, -71, -158, 326, 9, -244, -44, 29, -170, -171,
	48, -63, 7, 8, 5, 6, -69, -196, -165, -205,
	272, 104, 177, -242, -243, 4, -226, -220, -197, -207,
	-201, -204, 143, 56, 72, 75, 73, 76, 240, 282,
	49, 28, 102, 103, 195, 201, 256, 270, 271, 127,
	178, 128, 54, 119, 154, 92, 37, 39, 41, 42,
	50, 51, 81, 83, 84, 109, 137, 139, 140, 141,
	180, 209, 245, 254, 265, 266, 289, -227, -208, -209,
	-202, -203, -210, -102, -110, 314, -71, 321, -109, -178,
	-155, 85, -51, 218, -50, 21, 23, 93, 286, 99,
	249, 249, 218, 99, 326, 218, 218, 99, -222, -221,
	5, -72, 325, -219, 314, -225, -222, 252, 322, -96,
	-71, -108, -188, -73, -71, -73, 241, -63, 30, 99,
	-53, 325, 47, 223, 99, -53, 325, 99, -53, 99,
	322, 325, -187, 127, -74, 30, -166, -194, -195, -197,
	-206, -200, -204, -205, 40, 46, 45, 262, 168, 237,
	246, 38, 184, 138, 137, 139, 140, 141, 245, 37,
	209, 109, 92, 84, 83, 180, 42, 41, -208, -209,
	-202, -203, 81, 265, 266, 143, 39, 51, 50, 289,
	254, -100, -155, -265, -271, -265, 30, -100, 325, 325,
	156, -78, 162, 174, 124, -217, 85, -223, -216, -179,
	9, 272, 104, 185, -222, 8, 313, -215, 7, 312,
	-217, 85, 70, -224, 5, 4, -165, -179, 85, 159,
	-205, 323, -219, -218, -268, 112, -265, -218, -218, -218,
	-218, -218, -63, 156, -218, -218, 325, 325, -67, -53,
	325, 321, -85, 175, -248, 296, -85, 321, -64, 127,
	-63, -248, 175, -112, -132, -131, -133, -155, 22, -155,
	-157, -43, -43, -43, -88, -183, -155, -246, 30, -90,
	-93, 325, 115, 10, 11, 55, 33, 312, 313, 314,
	315, 110, 316, 309, 310, 311, 308, 304, 305, 306,
	61, 163, 231, 13, 14, 15, 26, 188, 157, 301,
	129, 243, 318, 16, 17, 18, 145, 36, 130, -68,
	30, 4, -76, -155, -155, -155, -155, -155, 194, -106,
	-150, 319, -44, 321, -44, -155, -100, 7, -44, -164,
	319, -173, -155, -107, 321, 5, 321, 5, -251, 297,
	112, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 203, -214,
	292, -214, -214, -198, 321, -198, -199, 321, -198, 298,
	302, 321, -93, -71, 325, 322, 325, 267, -129, 63,
	57, -145, 127, 57, -230, -63, 63, -231, 53, 278,
	205, 114, -129, 63, -129, 63, 63, -187, 33, 33,
	267, -74, -63, 267, 267, -187, -191, 303, -63, -191,
	325, 115, 322, 325, -147, 294, -135, -29, 321, 85,
	30, -135, -103, -104, -190, -105, -71, 321, -63, -63,
	-74, -75, -98, -99, -99, -17, -192, 99, -20, -29,
	-24, -36, -14, 322, 325, -92, 29, -125, 321, 299,
	166, 82, 125, 165, -126, 235, 322, 325, 267, 115,
	269, 322, -62, -61, -77, 208, 247, 219, 238, 325,
	8, 7, 7, -219, -267, -63, -62, -61, -187, -80,
	-90, -81, -63, -146, -145, -232, -233, -230, 132, 278,
	105, 30, 99, -60, 199, 30, 185, 175, -56, 261,
	99, -134, 229, 230, 325, -49, 31, 89, 321, 322,
	-147, -189, -95, -185, 319, -187, -71, -44, -186, 321,
	-212, -194, -211, 214, 215, 213, 217, 216, -194, -98,
	264, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, 157, 129, 243, 36, 130, -155, 267,
	-155, -155, -155, -155, 167, 175, 177, 272, 104, 279,
	90, 181, -276, 257, 32, -162, -44, 321, -177, 27,
	248, 22, -219, -169, 229, 321, -150, -155, -151, -100,
	322, 322, 325, -100, -168, 320, -164, -176, -175, 293,
	322, -100, 290, 22, 90, 314, 7, -125, -252, 107,
	120, 321, 322, 322, -155, -155, -119, -213, -100, 4,
	299, 166, 82, 125, 165, 235, -119, -120, -155, -100,
	-121, -156, -157, 312, 313, 318, 321, 229, -122, -155,
	-100, -155, 43, 153, 268, -123, -155, 115, -100, -155,
	-155, -155, -100, -100, -100, 321, 7, 7, 264, 264,
	7, -147, 322, -178, -50, -71, -63, -63, 175, -145,
	127, -55, 175, -194, -63, 321, 321, 148, 148, -63,
	-63, 127, -63, 127, -63, -63, -51, 218, 321, 321,
	-63, 218, -63, -71, 218, -37, 126, 181, -40, 296,
	-222, 252, 115, -71, -114, 224, -155, -114, -137, 185,
	-96, 288, -63, 224, -94, 325, 115, 306, -96, -53,
	-53, -53, -187, -194, 319, 319, 7, 267, 267, 267,
	267, 321, -155, -267, -267, -61, 276, 60, 208, -223,
	325, 322, 322, 325, -64, 132, -64, -29, -98, 5,
	-29, -71, 99, -57, 95, -275, 306, -63, -183, -20,
	-111, 120, -191, 325, 68, -118, 147, 170, 116, 155,
	226, 135, 7, 101, -152, 326, 321, -182, 302, -44,
	-186, -185, 300, -155, -155, 267, -276, 257, -162, -155,
	167, 177, 272, 104, 279, 90, 181, 115, 321, -156,
	-156, -100, -159, 321, -100, 320, 329, 322, -155, 320,
	320, 325, -174, -175, 94, -155, -87, 325, -86, -155,
	-100, -100, 322, 322, -257, 193, 321, 321, -155, 30,
	325, 322, 115, 322, 322, -127, 200, 322, 10, 11,
	312, 313, 314, 315, 110, 316, 309, 310, 311, 308,
	304, 305, 306, 61, 163, 231, 13, 14, 15, 145,
	130, -156, -156, -156, -100, 321, 322, -160, -161, 115,
	112, 30, -123, -123, -123, 322, 115, -100, 325, 325,
	325, 322, 322, 322, 7, 322, 325, 322, 300, 300,
	322, -111, 267, 267, 99, 175, 285, -234, -231, -155,
	-89, -184, -63, -245, 321, -242, -243, -69, 321, 321,
	-48, 93, 241, -130, 99, -53, 99, -53, 267, -129,
	63, -100, -100, 267, 267, -40, 115, 258, 187, 252,
	-102, 176, 224, 62, 322, -102, -147, -104, -95, -178,
	322, 320, 7, 7, 322, 166, 125, 165, -126, 165,
	-126, -126, 7, -63, -82, 131, -146, 321, -64, 321,
	321, -85, 321, -63, -58, 152, -275, -222, -248, 322,
	-163, 122, 44, -185, 147, 147, -185, -118, 147, -116,
	192, -116, -116, -263, 321, -17, 321, -182, -219, 319,
	327, -100, -181, -180, 30, -63, 190, 322, -155, -155,
	-156, -156, 115, 321, -155, -166, 26, 26, 322, -100,
	322, 325, -151, -155, 322, -164, 96, -155, 263, 322,
	290, -87, -87, -87, 5, -258, -63, 321, 294, -86,
	322, -212, -194, -155, -160, -155, -212, -194, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, 90, 175, 181,
	-156, 325, -100, 322, -161, -160, -155, -155, -194, 322,
	322, 322, -100, -155, -155, -155, 322, 7, -163, -63,
	-63, -145, 99, -235, 63, -236, 55, 105, 67, 175,
	177, 278, 205, 53, 85, 212, 322, 322, 325, -70,
	-107, 55, -70, -155, 321, -89, -90, 175, 85, 175,
	85, 78, 274, -63, -63, -71, -63, -63, 322, 322,
	-63, -71, -225, 264, 321, -102, -136, 321, 185, -29,
	-114, 306, 320, 320, 322, 130, -89, 321, -90, -80,
	30, -89, 185, -59, 151, -275, -222, -56, -254, 295,
	-155, -100, -185, -185, -117, 284, 185, 147, -185, 320,
	322, -264, 7, 320, -193, -181, 7, -154, -153, 113,
	173, 322, -63, 321, -182, 26, 26, -155, -166, 322,
	-155, -155, 322, -155, 320, -155, 5, -155, 322, 322,
	322, -259, -63, -155, 322, 322, 322, -161, 115, 90,
	181, 321, -155, 322, 322, 325, 322, 322, 322, -254,
	-145, -63, -98, -63, 105, 127, 177, 148, 321, -156,
	-71, -144, -272, 66, 255, -184, -49, -98, -49, 322,
	-100, 322, 322, 177, 177, -155, -194, -53, -53, 267,
	267, -158, -69, -63, -39, -38, 5, 91, -90, 63,
	-110, -44, 321, 196, 322, -89, 322, 322, -29, 322,
	-71, -275, -222, -57, -255, -256, -63, -117, 321, -155,
	-185, -152, 322, 325, -182, 322, 320, 325, 328, 306,
	-182, 321, -90, -180, -155, -155, 322, 322, -87, -253,
	198, 322, -156, 115, 321, -166, 322, -155, -236, -64,
	175, -155, -65, 321, -82, 321, -70, -87, 212, -52,
	55, -63, -63, 321, 325, 322, -41, 306, 280, 176,
	322, -63, -63, -144, 322, -82, -144, 321, -222, -58,
	325, 30, -90, -182, 7, -181, -17, -153, -219, 319,
	-181, -90, 322, 322, -87, 44, -156, -166, 322, 322,
	99, 322, -239, 164, -63, -90, -49, 322, -71, -47,
	284, -98, -100, -38, 5, 241, -147, 321, -82, -144,
	-82, -89, -59, -256, -258, 322, -180, 320, 7, 322,
	-260, 207, 230, -100, 322, 105, -237, -240, -238, 185,
	116, 197, 244, 322, 322, -85, -155, -87, -103, -90,
	-82, 322, -182, 320, 322, -261, -262, 36, 275, 70,
	-155, -261, -63, -238, 185, -240, 185, 280, 88, -239,
	322, -147, 322, -144, -181, -262, 202, 111, 229, 202,
	111, -241, 172, 223, 47, 241, -241, -237, -54, 47,
	223, -82, 26, 20, 177, 85, -262,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 0,
	0, 0, 0, 76, 77, 78, 79, 80, 81, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 385,
	-2, 0, 150, 0, 332, 0, 332, 332, 336, 0,
	0, 415, 298, 412, -2, 423, 0, 0, 0, 421,
	399, 0, 0, -2, 0, 0, 0, 0, 0, 129,
	0, 944, 874, 880, 881, 905, 906, 907, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 0, 0,
	876, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 0, 216, 919, 920, 921, 922, 923,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 115, 122, 123, 996, 125,
	0, 132, 133, 134, 136, 137, 138, 139, 140, 141,
	142, 0, 325, 1018, 338, 146, 973, 1022, 1092, 1037,
	153, 163, 0, 1098, -2, 167, 93, 196, 197, 198,
	0, 200, 218, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 215, 343, 331, 343, 328, 329, 330, 333,
	0, 324, 145, 0, 414, 0, 0, 0, 0, 0,
	297, -2, 395, 396, -2, 0, 418, 418, 418, 0,
	0, 396, 0, 404, 1000, 407, 887, 405, 0, 0,
	420, 419, 0, 400, 495, 0, 443, 0, 2, 0,
	1076, 495, 0, 1076, 879, 0, 0, 1076, 0, 0,
	130, 131, 884, 882, 883, 0, 0, 0, 0, 877,
	853, 851, 852, 0, 0, 0, 0, 501, 83, 1076,
	53, 1076, 872, 53, 1076, 91, 53, 1076, 0, 110,
	112, 915, 916, 917, 918, 1103, 0, 0, 0, 0,
	120, 0, 124, 126, 0, 0, 0, 337, 147, 1065,
	149, 0, 152, 154, 155, 0, 0, 0, 0, 0,
	0, 166, 191, 192, 94, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 211, 212, 0,
	0, 326, 339, 340, 327, 0, 335, 53, 499, 270,
	1076, 411, 270, 909, 411, 1076, -2, 0, 391, 430,
	431, 0, 0, 0, 416, 417, 0, 0, 0, 387,
	388, 0, 406, 0, 0, 446, 864, 868, 869, 598,
	0, 0, 0, 0, 0, 0, 690, 692, 1070, 1092,
	0, 694, 695, 0, 697, 699, 700, 0, 703, 704,
	844, 876, 890, 891, 892, 893, 0, 0, 896, 0,
	898, 899, 900, 744, 713, -2, -2, 888, 530, 531,
	532, 533, -2, 1105, 717, 719, 721, 722, 723, 724,
	0, 1054, 1071, 1072, 1088, 1089, 1097, 1101, 1102, 1076,
	1085, 1077, 1066, 1074, 1083, 949, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 914, 560, 561,
	566, 567, 569, 446, 444, 496, 497, 0, 0, 861,
	859, 860, 30, 321, 32, 0, 321, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 486, 194,
	195, 875, 0, 849, 850, 486, 62, 73, 0, 0,
	870, 854, 505, 0, 362, 0, 0, 502, 0, 0,
	85, 0, 51, 52, 0, 87, 0, 0, 89, 0,
	413, 0, 0, 1076, 0, 413, 0, 802, 513, 514,
	515, 516, 517, 595, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 537, 538, 539, 540, 541, 542,
	543, 557, 0, 536, 536, 536, 549, 550, 558, 559,
	564, 565, 576, 577, 579, 581, 575, 575, 575, 572,
	573, 0, 800, 0, 135, 0, 0, 0, 0, 0,
	0, 158, 178, 179, 180, 159, 161, 168, 170, 171,
	172, 181, 182, 183, 184, 287, 0, 289, 901, 0,
	160, 162, 164, 165, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 199, 201, 0, 217, 202, 203, 204,
	205, 206, 207, 210, 213, 214, 0, 0, 334, 290,
	0, 228, 0, 0, 293, 410, 0, 0, 0, 1076,
	908, 348, 0, 394, 428, 429, 432, 435, 436, 433,
	598, 401, 402, 403, 424, 425, 308, 408, 0, 0,
	505, 0, 0, 0, 0, 0, 0, 779, 780, 781,
	782, 783, 784, 787, 788, 785, 786, 789, 790, 791,
	0, 0, 0, 792, 793, 794, 0, 0, 796, 0,
	798, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 867, 795, 603, 604, 605, 627, 628, 0, 691,
	855, 848, 693, 0, -2, 800, 0, 696, 701, 702,
	0, 0, 843, -2, 0, 895, 0, 595, 746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 823, 829,
	0, 0, 0, 0, 0, 0, 0, 0, 545, 563,
	574, 571, 570, 547, 0, 546, 544, 0, 548, 0,
	0, 0, 505, 0, 0, 863, 0, 0, 0, 0,
	320, 34, 1076, 0, 55, 0, 0, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 65, 0, 885, 72,
	0, 0, 0, 0, 374, 0, 374, 364, 0, 0,
	0, 360, 377, 378, 380, 381, 0, 0, 503, 84,
	873, 53, 92, 53, 53, 98, 111, 0, 113, 116,
	117, 118, 119, 114, 0, 506, 508, 518, 0, 582,
	583, 584, 585, 586, 587, 596, 121, 0, 0, 0,
	0, 151, 156, 157, 344, 0, 175, 0, 177, 0,
	288, 903, 902, 96, 219, 143, 341, 342, 500, 0,
	0, 227, 884, 229, 231, 232, 233, 234, 909, 0,
	909, 0, 0, 291, 0, 0, 0, 0, 350, 356,
	0, 434, 437, 438, 0, 427, 306, 307, 413, 886,
	440, 865, 486, 447, 0, 457, 495, 472, 462, 0,
	599, 509, 510, 551, 552, 553, 554, 555, 600, 601,
	0, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, -2, -2, -2, 619, 620, 621, -2, -2, -2,
	625, 626, -2, 797, 799, 0, 858, 0, -2, 0,
	635, -2, -2, -2, 639, 0, 641, 644, 646, 648,
	0, 0, 0, 0, 857, 658, 835, 0, 0, 776,
	777, 778, 866, 643, 0, 0, 856, 847, 0, 0,
	-2, 698, 0, 0, 0, 806, 807, 842, 838, 0,
	705, 423, 0, 0, 0, 0, 0, 904, 754, 0,
	0, 0, 718, 720, 0, 0, 0, 0, 810, -2,
	-2, -2, -2, -2, -2, -2, 0, 0, 800, 820,
	0, 0, 661, 0, 0, 0, 0, 1092, 0, 800,
	828, 0, 0, 0, 0, 0, 800, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 498, 862, 33, 310, 0, 0, 0, 36,
	1076, 44, 0, 242, 0, 0, 0, 0, 0, 323,
	45, 1076, 53, 1076, 53, 46, 31, 321, 0, 0,
	314, 0, 309, 312, 0, 72, 0, 0, 61, 0,
	63, 74, 0, 871, 82, 0, 504, 357, 358, 0,
	0, 366, 363, 0, 505, 0, 0, 0, 0, 86,
	88, 90, 0, 803, 0, 0, 0, 0, 0, 0,
	0, 0, 801, 127, 128, 148, 173, 174, 176, 169,
	0, 236, 269, 0, 0, 909, 0, 225, 270, 292,
	294, 0, 0, 352, 356, 0, 355, 411, 426, 0,
	442, 0, 445, 0, 0, 0, 0, 0, 492, 492,
	492, 490, 466, 413, 472, 0, 0, 484, 0, -2,
	462, 0, 0, -2, -2, 0, 0, 0, 659, -2,
	640, 642, 645, 647, 649, 0, 0, 0, 0, 0,
	0, 0, 660, 0, 0, 845, 848, -2, 801, 804,
	805, 0, 0, 839, 0, 0, 0, 0, 422, 423,
	423, 423, 711, 0, 712, 0, 0, 0, 0, 0,
	0, 727, 0, 728, 729, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 665, 666, 0, 0, 731, 826, 827, 0,
	0, 0, 0, 0, 0, 736, 0, 833, 0, 0,
	0, 740, 741, 742, 0, 534, 0, 556, 578, 580,
	568, 442, 0, 0, 0, 0, 54, 240, 259, 0,
	0, 299, 305, 305, 0, 714, 715, 0, 0, 0,
	38, 0, 0, 0, 0, 42, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 75,
	372, 373, 0, 371, 0, 361, 374, 379, 376, 382,
	0, 511, 0, 0, 519, 588, 589, 590, 591, 592,
	593, 594, 0, 144, 223, 0, 230, 0, 0, 0,
	228, 0, 0, 0, 354, 356, 0, 347, 348, 409,
	748, 0, 0, 448, 0, 0, 0, 0, 0, 487,
	491, 488, 489, 0, 0, 0, 0, 484, 454, 0,
	0, 0, 461, 483, 0, 482, 471, -2, 602, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 836, 0,
	771, 0, 0, 847, -2, 808, 837, 841, 0, 706,
	0, 0, 0, 0, 897, 752, 753, 757, 0, 0,
	716, 0, 0, 809, 819, 821, 662, 663, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, -2, -2,
	-2, 680, 681, 682, -2, -2, -2, 0, 0, 0,
	822, 0, 0, 774, 824, 825, 830, 831, 0, 733,
	734, 735, 832, 0, 0, 0, 562, 0, 748, 316,
	318, 35, 0, 241, 0, 244, 0, 0, 0, 0,
	250, 251, 0, 0, 0, 0, 261, 268, 0, 308,
	889, 0, 308, 0, 0, 0, 0, 0, 50, 0,
	0, 322, 0, 53, 53, 311, 0, 0, 221, 222,
	315, 313, 64, 0, 0, 359, 0, 0, 0, 365,
	375, 0, 512, 507, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 356, 0, 349, 350, 397, 0,
	441, 439, 474, 0, 476, 0, 0, 0, 478, 457,
	467, 0, 469, 472, 0, 459, 0, 0, 452, 0,
	451, 472, 480, 0, 0, 0, 0, -2, 0, 652,
	-2, -2, 770, 801, 846, 840, 894, 423, 707, 709,
	710, 759, 756, 0, 743, 725, 726, 818, 0, 0,
	0, 0, 801, 773, 732, 0, 738, 739, 535, 398,
	37, 0, 245, 246, 909, 0, 249, 252, 0, 254,
	911, 236, 0, 265, 266, 300, 301, 304, 302, 305,
	423, 263, 0, 39, 40, 49, 57, 41, 47, 0,
	0, 485, 0, 0, 0, 69, 67, 0, 0, 0,
	383, 384, 0, 0, 268, 0, 258, 236, 226, 268,
	0, 0, 351, 352, 747, 749, 0, 475, 0, 494,
	477, 472, 468, 0, 484, 413, 455, 0, 456, 0,
	484, 0, 0, 463, -2, -2, 653, 772, 0, 423,
	0, 745, -2, 0, 0, 0, 775, 0, 243, 247,
	0, 0, 274, 0, 262, 0, 308, 0, 0, 59,
	0, 317, 319, 0, 0, 71, 68, 0, 0, 368,
	505, 370, 0, 236, 268, 224, 236, 0, 353, 354,
	0, 0, 0, 0, 470, 464, 0, 453, 449, 0,
	460, 0, 481, 708, 762, 0, -2, 0, 688, 737,
	0, 253, 279, 0, 0, 0, 303, 706, 270, 43,
	0, 56, 423, 70, 66, 0, 369, 0, 256, 236,
	295, 0, 346, 750, 751, 493, 458, 472, 0, 479,
	0, 0, 0, 758, 689, 0, 255, 275, 276, 0,
	271, 272, 273, 910, 267, 274, 58, 0, 505, 0,
	257, 268, 484, 450, 755, 760, 763, -2, 1040, 941,
	0, 761, 248, 277, 0, 278, 0, 0, 0, 279,
	0, 367, 239, 236, 465, 0, 765, 766, 767, 768,
	769, 280, 0, 283, 284, 0, 281, 264, 235, 237,
	238, 296, 0, 282, 285, 286, 764,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 310, 3, 316, 311, 3,
	321, 322, 314, 312, 325, 313, 323, 315, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 329, 324,
	304, 306, 305, 3, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 319, 3, 320, 309, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 327, 308, 328, 318,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 307, 57647, 317, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:782
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:788
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			return unimplemented(sqllex)
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:911
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = nil
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = DropCascade
		}
	case 52:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = DropRestrict
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = DropDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:984
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return unimplemented(sqllex)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:992
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].str, IncrementalFrom: sqlDollar[6].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = []string(nil)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 67:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.str = ""
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 71:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1051
		{
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{ /* SKIP DOC */
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), Reset: true}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			return unimplemented(sqllex)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{ /* SKIP DOC */
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			return unimplemented(sqllex)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return unimplemented(sqllex)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = Low
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = Normal
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = High
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			return unimplemented(sqllex)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			return unimplemented(sqllex)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1564
		{
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = DropDefault
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return unimplemented(sqllex)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1978
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1999
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2001
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2002
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = true
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = false
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2109
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2110
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = Ascending
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = Descending
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2168
		{
			return unimplemented(sqllex)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2169
		{
			return unimplemented(sqllex)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = true
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = false
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2183
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2226
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.str = ""
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.str = ""
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2348
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2349
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2369
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 361:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2377
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			return unimplemented(sqllex)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2431
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 375:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2454
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2681
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			return unimplemented(sqllex)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2690
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2694
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			return unimplemented(sqllex)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2698
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2702
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = true
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = false
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = false
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = true
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2726
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2884
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &From{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2920
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2938
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2965
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2982
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = nil
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = true
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = false
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.str = astFullJoin
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.str = astLeftJoin
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.str = astRightJoin
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.str = astInnerJoin
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3161
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3260
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3284
		{
			return unimplemented(sqllex)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3352
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = nil
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3496
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3528
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3568
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = year
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = month
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = day
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = hour
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = minute
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = month
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = hour
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = minute
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = minute
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = nil
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = second
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplemented(sqllex)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3698
		{
			return unimplemented(sqllex)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			return unimplemented(sqllex)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3932
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4105
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4158
		{
			return unimplemented(sqllex)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4159
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4182
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			return unimplemented(sqllex)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4203
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4222
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4252
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4296
		{
			return unimplemented(sqllex)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4297
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = Window(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4332
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.str = ""
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4394
		{
			return unimplemented(sqllex)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4395
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4400
		{
			return unimplemented(sqllex)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4406
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4407
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4408
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			return unimplemented(sqllex)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4410
		{
			return unimplemented(sqllex)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = Any
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = Some
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = All
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = Plus
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = Minus
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = Mult
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = Div
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = FloorDiv
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = Mod
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = Bitand
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = Bitor
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = Bitxor
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = Bitxor
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = LT
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = GT
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = EQ
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = LE
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = GE
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = NE
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = Like
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = NotLike
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = ILike
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = NotILike
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4775
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4935
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4971
		{
			return unimplemented(sqllex)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = DNull
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.str = ""
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
