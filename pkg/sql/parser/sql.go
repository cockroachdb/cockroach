// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const HELPTOKEN = 57362
const ACTION = 57363
const ADD = 57364
const ALL = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISTINCT = 57434
const DO = 57435
const DOUBLE = 57436
const DROP = 57437
const ELSE = 57438
const ENCODING = 57439
const END = 57440
const ESCAPE = 57441
const EXCEPT = 57442
const EXISTS = 57443
const EXECUTE = 57444
const EXPERIMENTAL_FINGERPRINTS = 57445
const EXPLAIN = 57446
const EXTRACT = 57447
const EXTRACT_DURATION = 57448
const FALSE = 57449
const FAMILY = 57450
const FETCH = 57451
const FILTER = 57452
const FIRST = 57453
const FLOAT = 57454
const FLOORDIV = 57455
const FOLLOWING = 57456
const FOR = 57457
const FORCE_INDEX = 57458
const FOREIGN = 57459
const FROM = 57460
const FULL = 57461
const GRANT = 57462
const GRANTS = 57463
const GREATEST = 57464
const GROUP = 57465
const GROUPING = 57466
const HAVING = 57467
const HELP = 57468
const HIGH = 57469
const HOUR = 57470
const INCREMENTAL = 57471
const IF = 57472
const IFNULL = 57473
const ILIKE = 57474
const IN = 57475
const INTERLEAVE = 57476
const INDEX = 57477
const INDEXES = 57478
const INITIALLY = 57479
const INNER = 57480
const INSERT = 57481
const INT = 57482
const INT2VECTOR = 57483
const INT8 = 57484
const INT64 = 57485
const INTEGER = 57486
const INTERSECT = 57487
const INTERVAL = 57488
const INTO = 57489
const IS = 57490
const ISOLATION = 57491
const JOIN = 57492
const KEY = 57493
const KEYS = 57494
const LATERAL = 57495
const LC_CTYPE = 57496
const LC_COLLATE = 57497
const LEADING = 57498
const LEAST = 57499
const LEFT = 57500
const LEVEL = 57501
const LIKE = 57502
const LIMIT = 57503
const LOCAL = 57504
const LOCALTIME = 57505
const LOCALTIMESTAMP = 57506
const LOW = 57507
const LSHIFT = 57508
const MATCH = 57509
const MINUTE = 57510
const MONTH = 57511
const NAN = 57512
const NAME = 57513
const NAMES = 57514
const NATURAL = 57515
const NEXT = 57516
const NO = 57517
const NO_INDEX_JOIN = 57518
const NORMAL = 57519
const NOT = 57520
const NOTHING = 57521
const NULL = 57522
const NULLIF = 57523
const NULLS = 57524
const NUMERIC = 57525
const OF = 57526
const OFF = 57527
const OFFSET = 57528
const OID = 57529
const ON = 57530
const ONLY = 57531
const OPTIONS = 57532
const OR = 57533
const ORDER = 57534
const ORDINALITY = 57535
const OUT = 57536
const OUTER = 57537
const OVER = 57538
const OVERLAPS = 57539
const OVERLAY = 57540
const PARENT = 57541
const PARTIAL = 57542
const PARTITION = 57543
const PASSWORD = 57544
const PLACING = 57545
const POSITION = 57546
const PRECEDING = 57547
const PRECISION = 57548
const PREPARE = 57549
const PRIMARY = 57550
const PRIORITY = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSION_USER = 57585
const SET = 57586
const SETTING = 57587
const SETTINGS = 57588
const SHOW = 57589
const SIMILAR = 57590
const SIMPLE = 57591
const SMALLINT = 57592
const SMALLSERIAL = 57593
const SNAPSHOT = 57594
const SOME = 57595
const SPLIT = 57596
const SQL = 57597
const START = 57598
const STATUS = 57599
const STDIN = 57600
const STRICT = 57601
const STRING = 57602
const STORING = 57603
const SUBSTRING = 57604
const SYMMETRIC = 57605
const SYSTEM = 57606
const TABLE = 57607
const TABLES = 57608
const TEMPLATE = 57609
const TESTING_RANGES = 57610
const TESTING_RELOCATE = 57611
const TEXT = 57612
const THEN = 57613
const TIME = 57614
const TIMESTAMP = 57615
const TIMESTAMPTZ = 57616
const TO = 57617
const TRAILING = 57618
const TRANSACTION = 57619
const TREAT = 57620
const TRIM = 57621
const TRUE = 57622
const TRUNCATE = 57623
const TYPE = 57624
const UNBOUNDED = 57625
const UNCOMMITTED = 57626
const UNION = 57627
const UNIQUE = 57628
const UNKNOWN = 57629
const UPDATE = 57630
const UPSERT = 57631
const USE = 57632
const USER = 57633
const USERS = 57634
const USING = 57635
const UUID = 57636
const VALID = 57637
const VALIDATE = 57638
const VALUE = 57639
const VALUES = 57640
const VARCHAR = 57641
const VARIADIC = 57642
const VIEW = 57643
const VARYING = 57644
const WHEN = 57645
const WHERE = 57646
const WINDOW = 57647
const WITH = 57648
const WITHIN = 57649
const WITHOUT = 57650
const YEAR = 57651
const ZONE = 57652
const NOT_LA = 57653
const WITH_LA = 57654
const AS_LA = 57655
const POSTFIXOP = 57656
const UMINUS = 57657

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"HELPTOKEN",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5837

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 46,
	334, 46,
	-2, 600,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	135, 462,
	-2, 0,
	-1, 51,
	90, 600,
	139, 600,
	288, 600,
	289, 600,
	-2, 0,
	-1, 60,
	100, 576,
	109, 576,
	145, 576,
	161, 576,
	186, 576,
	192, 576,
	285, 576,
	-2, 565,
	-1, 86,
	4, 602,
	21, 602,
	22, 602,
	24, 602,
	29, 602,
	34, 602,
	35, 602,
	36, 602,
	37, 602,
	38, 602,
	39, 602,
	40, 602,
	41, 602,
	42, 602,
	43, 602,
	45, 602,
	46, 602,
	47, 602,
	48, 602,
	51, 602,
	52, 602,
	53, 602,
	55, 602,
	56, 602,
	60, 602,
	61, 602,
	62, 602,
	64, 602,
	66, 602,
	67, 602,
	68, 602,
	71, 602,
	72, 602,
	79, 602,
	80, 602,
	81, 602,
	82, 602,
	83, 602,
	84, 602,
	85, 602,
	86, 602,
	88, 602,
	90, 602,
	94, 602,
	95, 602,
	97, 602,
	101, 602,
	102, 602,
	103, 602,
	104, 602,
	105, 602,
	106, 602,
	110, 602,
	111, 602,
	112, 602,
	114, 602,
	116, 602,
	121, 602,
	122, 602,
	124, 602,
	126, 602,
	127, 602,
	128, 602,
	129, 602,
	130, 602,
	131, 602,
	134, 602,
	136, 602,
	139, 602,
	140, 602,
	141, 602,
	142, 602,
	143, 602,
	144, 602,
	146, 602,
	149, 602,
	151, 602,
	152, 602,
	154, 602,
	155, 602,
	157, 602,
	159, 602,
	162, 602,
	165, 602,
	167, 602,
	168, 602,
	169, 602,
	170, 602,
	171, 602,
	172, 602,
	174, 602,
	175, 602,
	176, 602,
	177, 602,
	181, 602,
	182, 602,
	183, 602,
	184, 602,
	185, 602,
	187, 602,
	189, 602,
	190, 602,
	193, 602,
	194, 602,
	196, 602,
	198, 602,
	199, 602,
	200, 602,
	201, 602,
	202, 602,
	204, 602,
	205, 602,
	206, 602,
	207, 602,
	209, 602,
	210, 602,
	211, 602,
	212, 602,
	213, 602,
	214, 602,
	216, 602,
	217, 602,
	218, 602,
	219, 602,
	220, 602,
	221, 602,
	222, 602,
	223, 602,
	224, 602,
	225, 602,
	226, 602,
	228, 602,
	230, 602,
	231, 602,
	232, 602,
	233, 602,
	235, 602,
	236, 602,
	237, 602,
	238, 602,
	240, 602,
	241, 602,
	242, 602,
	244, 602,
	245, 602,
	246, 602,
	247, 602,
	249, 602,
	250, 602,
	251, 602,
	252, 602,
	254, 602,
	255, 602,
	256, 602,
	257, 602,
	258, 602,
	259, 602,
	260, 602,
	261, 602,
	262, 602,
	264, 602,
	266, 602,
	267, 602,
	268, 602,
	269, 602,
	270, 602,
	272, 602,
	273, 602,
	274, 602,
	277, 602,
	278, 602,
	279, 602,
	281, 602,
	282, 602,
	283, 602,
	284, 602,
	287, 602,
	288, 602,
	289, 602,
	290, 602,
	292, 602,
	294, 602,
	295, 602,
	296, 602,
	297, 602,
	298, 602,
	299, 602,
	302, 602,
	307, 602,
	308, 602,
	309, 602,
	310, 602,
	-2, 0,
	-1, 100,
	100, 575,
	109, 575,
	145, 575,
	161, 575,
	186, 575,
	192, 575,
	285, 575,
	-2, 568,
	-1, 103,
	1, 509,
	20, 509,
	149, 509,
	209, 509,
	334, 509,
	-2, 0,
	-1, 105,
	1, 509,
	20, 509,
	334, 509,
	-2, 0,
	-1, 106,
	1, 509,
	20, 509,
	334, 509,
	-2, 0,
	-1, 107,
	1, 513,
	20, 513,
	334, 513,
	-2, 0,
	-1, 111,
	4, 608,
	5, 608,
	6, 608,
	7, 608,
	8, 608,
	9, 608,
	21, 608,
	22, 608,
	24, 608,
	29, 608,
	30, 608,
	34, 608,
	35, 608,
	36, 608,
	37, 608,
	38, 608,
	39, 608,
	40, 608,
	41, 608,
	42, 608,
	43, 608,
	45, 608,
	46, 608,
	47, 608,
	48, 608,
	49, 608,
	50, 608,
	51, 608,
	52, 608,
	53, 608,
	55, 608,
	56, 608,
	58, 608,
	60, 608,
	61, 608,
	62, 608,
	64, 608,
	66, 608,
	67, 608,
	68, 608,
	70, 608,
	71, 608,
	72, 608,
	74, 608,
	75, 608,
	77, 608,
	78, 608,
	79, 608,
	80, 608,
	81, 608,
	82, 608,
	83, 608,
	84, 608,
	85, 608,
	86, 608,
	88, 608,
	90, 608,
	94, 608,
	95, 608,
	97, 608,
	101, 608,
	102, 608,
	103, 608,
	104, 608,
	105, 608,
	106, 608,
	107, 608,
	110, 608,
	111, 608,
	112, 608,
	114, 608,
	116, 608,
	119, 608,
	121, 608,
	122, 608,
	124, 608,
	126, 608,
	127, 608,
	128, 608,
	129, 608,
	130, 608,
	131, 608,
	132, 608,
	134, 608,
	136, 608,
	138, 608,
	139, 608,
	140, 608,
	141, 608,
	142, 608,
	143, 608,
	144, 608,
	146, 608,
	148, 608,
	149, 608,
	150, 608,
	151, 608,
	152, 608,
	154, 608,
	155, 608,
	157, 608,
	158, 608,
	159, 608,
	160, 608,
	162, 608,
	165, 608,
	167, 608,
	168, 608,
	169, 608,
	170, 608,
	171, 608,
	172, 608,
	173, 608,
	174, 608,
	175, 608,
	176, 608,
	177, 608,
	178, 608,
	180, 608,
	181, 608,
	182, 608,
	183, 608,
	184, 608,
	185, 608,
	187, 608,
	190, 608,
	193, 608,
	194, 608,
	195, 608,
	196, 608,
	197, 608,
	198, 608,
	199, 608,
	200, 608,
	201, 608,
	202, 608,
	204, 608,
	205, 608,
	206, 608,
	207, 608,
	209, 608,
	210, 608,
	211, 608,
	212, 608,
	213, 608,
	214, 608,
	216, 608,
	217, 608,
	218, 608,
	219, 608,
	220, 608,
	221, 608,
	222, 608,
	223, 608,
	224, 608,
	225, 608,
	226, 608,
	228, 608,
	229, 608,
	230, 608,
	231, 608,
	232, 608,
	233, 608,
	235, 608,
	236, 608,
	237, 608,
	238, 608,
	240, 608,
	241, 608,
	242, 608,
	243, 608,
	244, 608,
	245, 608,
	246, 608,
	247, 608,
	248, 608,
	249, 608,
	250, 608,
	251, 608,
	252, 608,
	254, 608,
	255, 608,
	256, 608,
	257, 608,
	258, 608,
	259, 608,
	260, 608,
	261, 608,
	262, 608,
	264, 608,
	266, 608,
	267, 608,
	268, 608,
	269, 608,
	270, 608,
	272, 608,
	273, 608,
	274, 608,
	277, 608,
	278, 608,
	279, 608,
	280, 608,
	281, 608,
	282, 608,
	283, 608,
	284, 608,
	287, 608,
	288, 608,
	289, 608,
	290, 608,
	291, 608,
	292, 608,
	294, 608,
	295, 608,
	296, 608,
	297, 608,
	298, 608,
	299, 608,
	302, 608,
	307, 608,
	308, 608,
	309, 608,
	310, 608,
	311, 608,
	317, 608,
	322, 608,
	323, 608,
	324, 608,
	331, 608,
	336, 608,
	-2, 0,
	-1, 116,
	1, 46,
	334, 46,
	-2, 600,
	-1, 515,
	118, 1183,
	275, 1183,
	316, 1183,
	333, 1183,
	-2, 0,
	-1, 516,
	118, 1141,
	275, 1141,
	316, 1141,
	333, 1141,
	-2, 0,
	-1, 518,
	118, 1235,
	275, 1235,
	316, 1235,
	333, 1235,
	-2, 0,
	-1, 520,
	118, 1252,
	275, 1252,
	316, 1252,
	333, 1252,
	-2, 0,
	-1, 527,
	1, 275,
	20, 275,
	334, 275,
	-2, 1188,
	-1, 535,
	1, 380,
	20, 380,
	115, 380,
	330, 380,
	334, 380,
	-2, 0,
	-1, 537,
	1, 351,
	20, 351,
	330, 351,
	334, 351,
	-2, 0,
	-1, 543,
	1, 364,
	20, 364,
	330, 364,
	334, 364,
	-2, 0,
	-1, 546,
	1, 374,
	20, 374,
	330, 374,
	334, 374,
	-2, 0,
	-1, 600,
	109, 610,
	161, 610,
	186, 610,
	-2, 571,
	-1, 603,
	109, 609,
	161, 609,
	186, 609,
	-2, 569,
	-1, 679,
	202, 598,
	-2, 455,
	-1, 683,
	188, 1117,
	-2, 0,
	-1, 710,
	1, 173,
	20, 173,
	330, 173,
	334, 173,
	-2, 574,
	-1, 714,
	4, 1320,
	10, 1320,
	11, 1320,
	13, 1320,
	14, 1320,
	15, 1320,
	16, 1320,
	17, 1320,
	18, 1320,
	21, 1320,
	22, 1320,
	24, 1320,
	27, 1320,
	29, 1320,
	31, 1320,
	34, 1320,
	35, 1320,
	36, 1320,
	37, 1320,
	38, 1320,
	39, 1320,
	40, 1320,
	41, 1320,
	42, 1320,
	43, 1320,
	45, 1320,
	46, 1320,
	47, 1320,
	48, 1320,
	51, 1320,
	52, 1320,
	53, 1320,
	55, 1320,
	56, 1320,
	57, 1320,
	60, 1320,
	61, 1320,
	62, 1320,
	63, 1320,
	64, 1320,
	66, 1320,
	67, 1320,
	68, 1320,
	70, 1320,
	71, 1320,
	72, 1320,
	79, 1320,
	80, 1320,
	81, 1320,
	82, 1320,
	83, 1320,
	84, 1320,
	85, 1320,
	86, 1320,
	88, 1320,
	90, 1320,
	94, 1320,
	95, 1320,
	97, 1320,
	101, 1320,
	102, 1320,
	103, 1320,
	104, 1320,
	105, 1320,
	106, 1320,
	110, 1320,
	111, 1320,
	112, 1320,
	113, 1320,
	114, 1320,
	116, 1320,
	119, 1320,
	121, 1320,
	122, 1320,
	124, 1320,
	126, 1320,
	127, 1320,
	128, 1320,
	129, 1320,
	130, 1320,
	131, 1320,
	132, 1320,
	133, 1320,
	134, 1320,
	136, 1320,
	138, 1320,
	139, 1320,
	140, 1320,
	141, 1320,
	142, 1320,
	143, 1320,
	144, 1320,
	146, 1320,
	148, 1320,
	149, 1320,
	150, 1320,
	151, 1320,
	152, 1320,
	154, 1320,
	155, 1320,
	157, 1320,
	158, 1320,
	159, 1320,
	160, 1320,
	162, 1320,
	165, 1320,
	166, 1320,
	167, 1320,
	168, 1320,
	169, 1320,
	170, 1320,
	171, 1320,
	172, 1320,
	173, 1320,
	174, 1320,
	175, 1320,
	176, 1320,
	177, 1320,
	181, 1320,
	182, 1320,
	183, 1320,
	184, 1320,
	185, 1320,
	187, 1320,
	190, 1320,
	191, 1320,
	193, 1320,
	194, 1320,
	196, 1320,
	198, 1320,
	199, 1320,
	200, 1320,
	201, 1320,
	202, 1320,
	204, 1320,
	205, 1320,
	206, 1320,
	207, 1320,
	209, 1320,
	210, 1320,
	211, 1320,
	212, 1320,
	213, 1320,
	214, 1320,
	216, 1320,
	217, 1320,
	218, 1320,
	219, 1320,
	220, 1320,
	221, 1320,
	222, 1320,
	223, 1320,
	224, 1320,
	225, 1320,
	226, 1320,
	228, 1320,
	229, 1320,
	230, 1320,
	231, 1320,
	232, 1320,
	233, 1320,
	234, 1320,
	235, 1320,
	236, 1320,
	237, 1320,
	238, 1320,
	240, 1320,
	241, 1320,
	242, 1320,
	244, 1320,
	245, 1320,
	246, 1320,
	247, 1320,
	248, 1320,
	249, 1320,
	250, 1320,
	251, 1320,
	252, 1320,
	254, 1320,
	255, 1320,
	256, 1320,
	257, 1320,
	258, 1320,
	259, 1320,
	260, 1320,
	261, 1320,
	262, 1320,
	264, 1320,
	266, 1320,
	267, 1320,
	268, 1320,
	269, 1320,
	270, 1320,
	272, 1320,
	273, 1320,
	274, 1320,
	277, 1320,
	278, 1320,
	279, 1320,
	281, 1320,
	282, 1320,
	283, 1320,
	284, 1320,
	287, 1320,
	288, 1320,
	289, 1320,
	290, 1320,
	292, 1320,
	294, 1320,
	295, 1320,
	296, 1320,
	297, 1320,
	298, 1320,
	299, 1320,
	302, 1320,
	307, 1320,
	308, 1320,
	309, 1320,
	310, 1320,
	311, 1320,
	312, 1320,
	314, 1320,
	315, 1320,
	316, 1320,
	317, 1320,
	319, 1320,
	320, 1320,
	321, 1320,
	322, 1320,
	323, 1320,
	324, 1320,
	325, 1320,
	326, 1320,
	327, 1320,
	329, 1320,
	332, 1320,
	333, 1320,
	335, 1320,
	336, 1320,
	-2, 0,
	-1, 734,
	118, 1252,
	275, 1252,
	316, 1252,
	333, 1252,
	-2, 0,
	-1, 794,
	109, 609,
	161, 609,
	186, 609,
	-2, 572,
	-1, 860,
	331, 1120,
	-2, 1113,
	-1, 861,
	331, 1121,
	-2, 1114,
	-1, 867,
	5, 780,
	331, 780,
	-2, 1298,
	-1, 891,
	5, 741,
	-2, 1272,
	-1, 892,
	5, 774,
	331, 774,
	-2, 1274,
	-1, 893,
	5, 749,
	-2, 1275,
	-1, 894,
	5, 748,
	-2, 1276,
	-1, 895,
	5, 774,
	331, 774,
	-2, 1279,
	-1, 896,
	5, 774,
	331, 774,
	-2, 1280,
	-1, 897,
	5, 775,
	-2, 1283,
	-1, 898,
	5, 735,
	-2, 1284,
	-1, 899,
	5, 735,
	-2, 1285,
	-1, 900,
	5, 756,
	-2, 1289,
	-1, 901,
	5, 736,
	-2, 1294,
	-1, 902,
	5, 737,
	-2, 1295,
	-1, 903,
	5, 738,
	-2, 1296,
	-1, 904,
	5, 739,
	-2, 1297,
	-1, 905,
	5, 735,
	-2, 1302,
	-1, 906,
	5, 742,
	-2, 1307,
	-1, 907,
	5, 740,
	-2, 1310,
	-1, 908,
	5, 772,
	331, 772,
	-2, 1312,
	-1, 909,
	5, 776,
	-2, 1315,
	-1, 910,
	5, 778,
	-2, 1316,
	-1, 911,
	5, 771,
	331, 771,
	-2, 1321,
	-1, 1176,
	100, 576,
	109, 576,
	145, 576,
	161, 576,
	186, 576,
	192, 576,
	285, 576,
	-2, 899,
	-1, 1186,
	331, 1097,
	-2, 1085,
	-1, 1202,
	332, 1037,
	-2, 0,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 815,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 816,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 817,
	-1, 1408,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 821,
	-1, 1409,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 822,
	-1, 1410,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 823,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 828,
	-1, 1419,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 830,
	-1, 1421,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 834,
	-1, 1422,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 835,
	-1, 1423,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 836,
	-1, 1424,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 837,
	-1, 1451,
	197, 979,
	-2, 982,
	-1, 1484,
	118, 1019,
	331, 1120,
	-2, 1113,
	-1, 1485,
	118, 1020,
	-2, 1268,
	-1, 1486,
	118, 1021,
	-2, 1187,
	-1, 1487,
	118, 1022,
	-2, 1155,
	-1, 1488,
	118, 1023,
	-2, 1171,
	-1, 1489,
	118, 1024,
	-2, 1186,
	-1, 1490,
	118, 1025,
	-2, 1233,
	-1, 1651,
	90, 600,
	139, 600,
	288, 600,
	289, 600,
	-2, 0,
	-1, 1658,
	100, 576,
	109, 576,
	145, 576,
	161, 576,
	186, 576,
	192, 576,
	285, 576,
	-2, 670,
	-1, 1663,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 829,
	-1, 1664,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 831,
	-1, 1669,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 832,
	-1, 1687,
	197, 978,
	-2, 981,
	-1, 1881,
	1, 671,
	20, 671,
	70, 671,
	100, 671,
	109, 671,
	119, 671,
	123, 671,
	125, 671,
	138, 671,
	145, 671,
	150, 671,
	158, 671,
	161, 671,
	173, 671,
	186, 671,
	188, 671,
	192, 671,
	227, 671,
	229, 671,
	285, 671,
	293, 671,
	304, 671,
	305, 671,
	313, 671,
	330, 671,
	332, 671,
	334, 671,
	335, 671,
	-2, 670,
	-1, 1883,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 833,
	-1, 1888,
	148, 0,
	-2, 849,
	-1, 1898,
	197, 980,
	-2, 983,
	-1, 1932,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 876,
	-1, 1933,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 877,
	-1, 1934,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 878,
	-1, 1938,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 882,
	-1, 1939,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 883,
	-1, 1940,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 884,
	-1, 2061,
	148, 0,
	-2, 850,
	-1, 2064,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 853,
	-1, 2065,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 855,
	-1, 2171,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 854,
	-1, 2172,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 856,
	-1, 2179,
	148, 0,
	-2, 885,
	-1, 2235,
	148, 0,
	-2, 886,
	-1, 2300,
	37, 0,
	132, 0,
	160, 0,
	248, 0,
	311, 0,
	317, 0,
	-2, 1271,
}

const sqlPrivate = 57344

const sqlLast = 37359

var sqlAct = [...]int{

	861, 2299, 2277, 1876, 2105, 2324, 2241, 2278, 2298, 1292,
	2279, 1909, 1810, 1300, 1656, 1877, 960, 2151, 1272, 2017,
	994, 2131, 375, 1780, 1969, 1363, 1820, 612, 99, 2052,
	1653, 851, 2037, 859, 1983, 641, 151, 151, 151, 837,
	2031, 604, 387, 1781, 968, 1588, 1748, 59, 592, 1374,
	1271, 673, 1276, 389, 151, 151, 151, 952, 711, 151,
	1590, 1289, 1747, 376, 21, 1449, 151, 1851, 1593, 1381,
	1182, 1379, 1698, 858, 921, 1860, 1372, 820, 1570, 99,
	1643, 1301, 963, 1275, 1240, 151, 1638, 1459, 597, 1315,
	1332, 1231, 831, 1436, 1263, 1433, 1513, 384, 23, 381,
	18, 1113, 737, 1068, 1359, 382, 28, 956, 1349, 151,
	151, 929, 1480, 380, 17, 927, 151, 953, 588, 1171,
	383, 9, 1325, 526, 830, 591, 1216, 738, 821, 706,
	1376, 703, 712, 1212, 1294, 151, 151, 151, 151, 1121,
	1279, 696, 628, 152, 99, 1984, 151, 151, 571, 797,
	609, 798, 143, 1066, 583, 796, 853, 522, 500, 100,
	736, 524, 974, 694, 147, 664, 912, 980, 101, 626,
	531, 810, 2164, 519, 603, 2165, 1293, 802, 1686, 982,
	21, 982, 2314, 982, 854, 949, 608, 2293, 1654, 343,
	1982, 581, 1297, 608, 2289, 2288, 390, 1335, 1335, 2285,
	2275, 2270, 949, 1322, 949, 2266, 611, 1604, 949, 2237,
	2231, 1264, 1322, 949, 23, 2217, 18, 2209, 949, 391,
	1982, 2204, 28, 2173, 2203, 2161, 1322, 1605, 992, 2158,
	17, 598, 2159, 1641, 1123, 1690, 995, 9, 1718, 1719,
	1691, 1736, 1737, 1738, 2139, 2136, 644, 1982, 949, 1124,
	1125, 946, 637, 1335, 599, 2060, 575, 2134, 2116, 601,
	1982, 949, 1329, 2219, 1267, 649, 653, 658, 600, 2115,
	1689, 2087, 1982, 1127, 1335, 1335, 1264, 1124, 1125, 630,
	1144, 1145, 1146, 1154, 1155, 1156, 2066, 2063, 1641, 1335,
	1322, 1733, 2055, 1122, 1147, 1335, 1126, 2004, 1267, 1945,
	1335, 1127, 1141, 1895, 1158, 1632, 1330, 1124, 1125, 1229,
	1144, 1145, 1146, 1154, 1155, 1156, 2002, 1578, 1981, 1335,
	1516, 1982, 1718, 1719, 1126, 1892, 1453, 1362, 1335, 1335,
	1141, 1127, 1834, 1347, 1158, 1270, 1697, 1829, 816, 1765,
	1270, 1724, 1766, 1116, 111, 1763, 1331, 1328, 1335, 151,
	151, 151, 1132, 151, 1126, 1762, 1115, 983, 1335, 983,
	1141, 983, 1761, 1052, 151, 1335, 151, 151, 151, 151,
	115, 1687, 1051, 949, 1335, 597, 1739, 662, 1577, 1369,
	1132, 949, 949, 111, 1338, 1334, 1321, 1335, 1335, 1322,
	1124, 1125, 1269, 1227, 1734, 1270, 1226, 726, 991, 1151,
	1159, 992, 1985, 114, 116, 1142, 111, 668, 1657, 115,
	1132, 108, 1868, 2045, 1127, 1157, 1333, 109, 1072, 1718,
	1719, 1477, 609, 713, 594, 1724, 1475, 1149, 809, 1151,
	1159, 749, 115, 1142, 30, 2313, 1296, 1126, 2297, 2284,
	2246, 1445, 114, 111, 1604, 1157, 2232, 2137, 1580, 2092,
	108, 1122, 2088, 2080, 2079, 2078, 109, 1149, 1148, 2074,
	2073, 2072, 1735, 1142, 2030, 114, 988, 2024, 981, 115,
	1097, 1960, 677, 1143, 681, 102, 1190, 1955, 1734, 38,
	1954, 1953, 1903, 1881, 1850, 1838, 1770, 1327, 1767, 699,
	699, 672, 1755, 1132, 695, 151, 1746, 1717, 102, 1836,
	1714, 1143, 114, 1713, 1711, 46, 1703, 1702, 700, 1326,
	108, 1576, 1533, 924, 51, 1152, 109, 809, 598, 151,
	1655, 1183, 1724, 1174, 640, 808, 966, 1911, 597, 2256,
	2212, 1143, 2202, 597, 2201, 102, 52, 2200, 2192, 670,
	1446, 599, 1730, 1731, 1732, 1152, 1735, 1729, 1727, 1728,
	1720, 1721, 1722, 1723, 1725, 1726, 2190, 2181, 1137, 1135,
	1136, 1128, 1129, 1130, 1131, 1133, 1134, 638, 2168, 2154,
	1264, 2149, 2102, 151, 2085, 2057, 2011, 2008, 1150, 151,
	1988, 1138, 1139, 1140, 1153, 1887, 1137, 1135, 1136, 1128,
	1129, 1130, 1131, 1133, 1134, 1865, 1818, 1816, 2206, 1815,
	1813, 1789, 2089, 1788, 1745, 1707, 1706, 1683, 1150, 1678,
	2023, 1138, 1139, 1140, 1153, 1438, 1137, 1135, 1136, 1128,
	1129, 1130, 1131, 1133, 1134, 1623, 151, 1564, 151, 1559,
	1546, 745, 1727, 1728, 1720, 1721, 1722, 1723, 1725, 1726,
	1545, 1525, 795, 924, 1546, 1473, 1368, 151, 1217, 111,
	753, 754, 1220, 1124, 1125, 1224, 1210, 66, 1209, 914,
	1208, 1207, 597, 151, 1206, 1205, 1204, 1203, 1202, 389,
	597, 598, 151, 794, 919, 115, 598, 1127, 668, 1201,
	1200, 1199, 1198, 1197, 151, 1196, 1195, 1194, 1187, 151,
	1175, 151, 732, 151, 599, 1174, 151, 959, 965, 599,
	1126, 751, 1128, 1129, 1130, 1131, 1133, 1134, 114, 790,
	642, 950, 918, 819, 731, 722, 108, 811, 720, 2296,
	811, 2268, 109, 2163, 958, 2068, 151, 2046, 151, 2042,
	2029, 151, 373, 1722, 1723, 1725, 1726, 2028, 2043, 595,
	1358, 1867, 812, 597, 597, 812, 1869, 788, 1357, 1183,
	389, 1476, 671, 2166, 30, 1617, 1474, 1616, 151, 1718,
	1719, 1172, 151, 913, 151, 742, 1591, 151, 971, 151,
	2027, 151, 601, 151, 815, 151, 937, 151, 1606, 947,
	754, 600, 151, 151, 805, 806, 1124, 1125, 754, 813,
	1657, 1222, 1073, 1192, 935, 1223, 744, 817, 1769, 38,
	2032, 1768, 1189, 1662, 786, 598, 743, 741, 964, 936,
	1127, 1571, 390, 598, 1293, 151, 1912, 151, 1694, 695,
	151, 364, 1835, 133, 1460, 46, 1213, 948, 599, 781,
	1124, 1125, 1600, 1126, 51, 391, 599, 1776, 1120, 1060,
	1059, 2249, 594, 589, 2310, 930, 2216, 931, 2311, 1996,
	360, 1339, 973, 642, 1127, 976, 52, 1329, 1241, 1629,
	622, 1718, 1719, 2126, 924, 782, 607, 2125, 985, 1718,
	1719, 987, 2124, 620, 2123, 618, 1804, 1126, 1042, 616,
	1044, 1074, 866, 609, 1802, 1043, 598, 598, 1045, 1132,
	613, 1773, 1046, 390, 1772, 1050, 1062, 1069, 1061, 361,
	368, 1330, 136, 1665, 1622, 1001, 930, 1621, 931, 599,
	599, 606, 1620, 1233, 1080, 1619, 391, 1420, 932, 1800,
	1336, 1244, 1063, 1260, 347, 1081, 1065, 151, 1082, 1256,
	1083, 151, 1084, 1132, 1085, 151, 1086, 1254, 814, 661,
	151, 1331, 1328, 1090, 1092, 2007, 151, 151, 1100, 1099,
	151, 1098, 1529, 742, 367, 2215, 137, 1096, 608, 1118,
	151, 1528, 601, 1117, 1724, 601, 601, 151, 1391, 111,
	1134, 1109, 1724, 1290, 1110, 1111, 1094, 66, 151, 932,
	151, 1034, 151, 1234, 1095, 151, 1142, 151, 1807, 151,
	151, 151, 1186, 597, 743, 115, 579, 1064, 1233, 930,
	1252, 931, 824, 352, 1232, 777, 1258, 2262, 1809, 2107,
	1573, 1333, 1243, 954, 1313, 1435, 509, 1734, 1076, 99,
	944, 99, 1435, 1245, 1247, 1460, 1218, 977, 114, 1214,
	1215, 2281, 1221, 1333, 1442, 943, 108, 498, 1295, 1440,
	1295, 713, 109, 1040, 1557, 1791, 2310, 1266, 363, 362,
	2321, 605, 1047, 941, 1143, 2272, 2332, 1316, 1225, 1594,
	1843, 374, 2195, 1650, 1977, 1250, 1360, 1361, 942, 1566,
	1255, 1237, 932, 389, 1598, 1261, 1726, 1561, 2273, 1630,
	151, 1628, 1327, 501, 366, 1735, 134, 756, 940, 729,
	1242, 982, 740, 1318, 151, 151, 151, 1978, 151, 1319,
	1130, 1131, 1133, 1134, 506, 1307, 1093, 1317, 699, 502,
	699, 1299, 2282, 1594, 1320, 1348, 938, 1211, 1310, 933,
	365, 1311, 135, 1431, 151, 1314, 1308, 389, 1309, 1798,
	1333, 1370, 739, 625, 503, 624, 598, 1285, 1429, 1137,
	1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134, 615, 1218,
	615, 1221, 778, 505, 617, 1341, 1178, 595, 590, 599,
	1651, 2283, 389, 2177, 1498, 615, 1840, 2320, 2133, 1390,
	1215, 1214, 1728, 1720, 1721, 1722, 1723, 1725, 1726, 1340,
	933, 1720, 1721, 1722, 1723, 1725, 1726, 348, 1973, 1169,
	1974, 1705, 740, 1861, 1792, 2327, 1808, 1880, 928, 608,
	2280, 1425, 2108, 2309, 1443, 2307, 1841, 1848, 353, 1426,
	2016, 1427, 779, 349, 1230, 1432, 390, 1049, 1976, 1367,
	1287, 759, 609, 350, 1352, 1979, 801, 609, 1354, 735,
	1356, 151, 151, 151, 2333, 1531, 727, 151, 958, 391,
	151, 1569, 725, 1366, 1417, 1667, 151, 151, 151, 151,
	151, 1371, 1434, 504, 1457, 151, 2118, 151, 2319, 580,
	780, 151, 1077, 2117, 1441, 1839, 497, 2187, 597, 983,
	390, 151, 800, 933, 916, 30, 1333, 574, 2100, 549,
	1775, 151, 2083, 151, 1992, 151, 1542, 498, 151, 1539,
	1447, 1538, 151, 391, 1444, 1288, 1975, 151, 577, 151,
	1995, 1532, 507, 66, 1646, 390, 151, 1994, 972, 1001,
	1001, 1428, 1491, 1469, 1675, 1558, 2338, 549, 1430, 961,
	38, 1563, 2325, 1649, 799, 1579, 1941, 1581, 391, 1673,
	757, 501, 730, 501, 846, 1859, 577, 151, 151, 1415,
	1418, 1534, 1105, 1647, 609, 1057, 46, 1582, 597, 801,
	1585, 2242, 506, 1088, 506, 51, 551, 502, 750, 502,
	549, 1382, 1389, 1596, 739, 2053, 1556, 1414, 1602, 800,
	148, 148, 345, 2326, 2084, 1991, 739, 52, 1821, 577,
	1028, 151, 503, 1055, 503, 1572, 754, 1053, 489, 491,
	493, 2328, 1670, 511, 551, 1056, 99, 2018, 1993, 1343,
	528, 505, 1671, 505, 1599, 1106, 1676, 761, 1583, 2337,
	1345, 598, 1942, 1607, 1648, 675, 2101, 1548, 1943, 573,
	1547, 799, 2040, 1001, 740, 2054, 1856, 1855, 609, 1346,
	1661, 739, 1316, 606, 599, 674, 740, 551, 683, 1811,
	1344, 691, 1627, 629, 629, 1625, 1626, 553, 1633, 689,
	345, 1631, 1659, 2009, 1568, 1416, 2098, 1852, 1637, 1001,
	1634, 1639, 1472, 2180, 1636, 144, 1750, 1640, 1318, 345,
	345, 656, 345, 1652, 1319, 1543, 1608, 1609, 2099, 1610,
	148, 665, 1317, 2082, 1027, 553, 609, 1749, 775, 1320,
	111, 598, 1886, 1806, 773, 1712, 1450, 1677, 66, 771,
	1178, 504, 1672, 504, 1454, 1696, 1574, 1001, 1463, 1674,
	769, 1543, 1668, 1666, 599, 767, 115, 576, 550, 1483,
	1483, 1496, 765, 1508, 1337, 762, 1268, 687, 553, 1520,
	1521, 1523, 1682, 1259, 1642, 1253, 785, 784, 669, 385,
	12, 386, 11, 378, 10, 1193, 1693, 552, 3, 114,
	507, 609, 507, 1079, 836, 1471, 550, 108, 2276, 1615,
	377, 8, 2239, 109, 666, 803, 1966, 1796, 1794, 1774,
	1587, 379, 4, 1291, 1284, 990, 989, 986, 1787, 151,
	1786, 151, 102, 1646, 667, 552, 692, 1589, 151, 614,
	984, 597, 344, 1364, 690, 945, 939, 934, 1900, 550,
	1817, 2311, 1649, 1000, 776, 151, 151, 1752, 1753, 1754,
	774, 663, 2144, 1830, 1644, 772, 1124, 1125, 1771, 1071,
	1785, 2146, 1647, 1249, 1233, 1814, 770, 632, 552, 1778,
	1248, 768, 1828, 151, 804, 2197, 1985, 1645, 766, 758,
	1127, 763, 151, 688, 2234, 151, 1805, 1233, 635, 1799,
	1822, 1257, 1365, 1246, 1853, 389, 12, 151, 11, 807,
	10, 151, 1812, 1126, 1251, 647, 1827, 496, 1870, 2220,
	645, 2014, 1825, 1298, 1866, 1824, 1286, 8, 1283, 99,
	1119, 1833, 1832, 528, 679, 528, 1831, 685, 4, 651,
	645, 1854, 660, 1648, 1857, 619, 621, 1871, 345, 1889,
	528, 528, 345, 707, 1124, 1125, 151, 1048, 609, 1823,
	1661, 1842, 1844, 1845, 1124, 1125, 993, 636, 1324, 1132,
	1795, 2336, 1797, 1862, 1863, 508, 1858, 915, 1127, 2335,
	1614, 1613, 1659, 1612, 598, 1611, 718, 717, 716, 715,
	639, 1905, 1906, 1907, 631, 569, 568, 567, 566, 565,
	564, 1126, 1896, 563, 562, 561, 560, 599, 559, 1681,
	558, 1126, 1899, 557, 556, 555, 554, 1684, 514, 513,
	512, 372, 1142, 151, 151, 151, 371, 370, 1918, 1915,
	1913, 369, 359, 358, 1028, 1028, 1700, 1701, 1920, 357,
	151, 356, 355, 354, 1948, 151, 141, 151, 390, 151,
	151, 151, 140, 151, 1108, 151, 139, 597, 1990, 138,
	132, 1949, 1989, 131, 130, 129, 151, 151, 1986, 128,
	1787, 391, 1786, 597, 1744, 127, 126, 1965, 125, 723,
	124, 123, 122, 121, 2012, 120, 1757, 2010, 119, 1962,
	1143, 118, 2015, 117, 2269, 1787, 2223, 1786, 1718, 1719,
	1787, 2070, 1786, 528, 1124, 1125, 151, 151, 792, 791,
	151, 2050, 1785, 1001, 2006, 1961, 1846, 2013, 597, 1837,
	1764, 151, 792, 1618, 2049, 1041, 1530, 1527, 1526, 151,
	1801, 1468, 2019, 1180, 2048, 1803, 2021, 1785, 1027, 1027,
	793, 2255, 1785, 2025, 1001, 1001, 2058, 2132, 1028, 2026,
	1908, 1584, 1190, 1001, 1001, 2035, 2036, 787, 2062, 2041,
	1188, 783, 151, 345, 764, 609, 713, 728, 645, 578,
	2106, 499, 660, 1078, 760, 754, 2047, 1136, 1128, 1129,
	1130, 1131, 1133, 1134, 1028, 2044, 1001, 863, 1864, 2271,
	2075, 2020, 1704, 2150, 2176, 1470, 1382, 1916, 1191, 45,
	598, 1783, 840, 1967, 1777, 1382, 1921, 1278, 1277, 392,
	573, 1058, 629, 862, 582, 2081, 598, 151, 1482, 151,
	1383, 389, 151, 599, 917, 864, 1874, 998, 865, 999,
	151, 345, 1028, 1219, 852, 996, 389, 1302, 1952, 599,
	1439, 1458, 1692, 1184, 832, 1030, 844, 148, 843, 1455,
	719, 2051, 1027, 2093, 1893, 525, 345, 1000, 1000, 2110,
	63, 598, 2112, 2096, 1787, 64, 1786, 151, 970, 2094,
	597, 1597, 2022, 345, 151, 345, 2109, 345, 2111, 1104,
	978, 1355, 1101, 151, 599, 2135, 958, 1793, 1027, 2128,
	351, 151, 2145, 1787, 1715, 1786, 721, 2127, 1505, 151,
	1497, 1493, 2162, 789, 920, 1170, 1785, 1303, 151, 151,
	148, 2160, 148, 2147, 748, 528, 1946, 2143, 1603, 2153,
	2167, 1323, 1001, 2157, 2170, 818, 2169, 1956, 2138, 2141,
	1112, 634, 633, 1273, 746, 1785, 1027, 1054, 1342, 1163,
	2156, 1160, 528, 623, 2189, 962, 148, 1541, 528, 151,
	2331, 528, 2196, 528, 1790, 528, 2182, 528, 2248, 528,
	113, 1087, 112, 2175, 390, 110, 528, 528, 2191, 2205,
	2185, 1000, 2130, 1567, 151, 151, 29, 27, 82, 390,
	83, 81, 24, 645, 151, 80, 79, 391, 2142, 2208,
	78, 77, 597, 2186, 2211, 76, 75, 151, 2193, 573,
	2210, 629, 391, 74, 665, 151, 2194, 1000, 73, 72,
	71, 151, 70, 598, 2224, 2121, 2122, 389, 151, 151,
	2214, 2229, 2222, 2221, 2034, 69, 68, 67, 62, 61,
	22, 1001, 20, 19, 2225, 6, 599, 2230, 26, 99,
	25, 151, 16, 151, 2226, 15, 151, 609, 389, 14,
	13, 925, 2236, 50, 1499, 1000, 49, 48, 47, 2227,
	44, 2244, 43, 42, 2258, 41, 40, 39, 2233, 2245,
	151, 2257, 7, 151, 2259, 2254, 957, 2263, 5, 97,
	94, 96, 2265, 2120, 2261, 93, 2260, 2264, 2267, 95,
	2250, 98, 90, 645, 1787, 975, 1786, 975, 91, 92,
	89, 88, 34, 33, 32, 31, 2, 151, 1, 0,
	2213, 345, 0, 151, 2286, 1238, 0, 0, 0, 345,
	1001, 2292, 0, 0, 345, 2291, 2294, 151, 0, 0,
	345, 1262, 2304, 2295, 1265, 598, 1785, 2308, 0, 2306,
	0, 0, 0, 2312, 1274, 2290, 151, 0, 2315, 2317,
	0, 665, 2318, 0, 2316, 0, 0, 0, 599, 2114,
	390, 0, 345, 1642, 1306, 2330, 528, 2329, 0, 528,
	0, 528, 0, 345, 345, 1312, 0, 0, 2334, 0,
	1124, 1125, 0, 391, 0, 0, 0, 2339, 1028, 0,
	0, 390, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1127, 0, 0, 0, 0, 0,
	0, 0, 1646, 0, 391, 0, 1001, 0, 0, 1028,
	1028, 0, 0, 0, 0, 0, 0, 1126, 1028, 1028,
	0, 1649, 1718, 1719, 0, 1736, 1737, 1738, 0, 0,
	0, 0, 0, 1644, 0, 0, 0, 0, 0, 1030,
	1030, 1647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1028, 0, 0, 1350, 0, 1645, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 60, 0, 345, 345,
	345, 2039, 345, 1132, 0, 1733, 1499, 1499, 1718, 1719,
	0, 0, 1027, 0, 0, 0, 0, 0, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 0, 0, 1718, 1719, 0, 0, 0,
	0, 0, 1648, 1027, 1027, 0, 0, 60, 0, 0,
	0, 1228, 1027, 1027, 0, 1724, 1142, 0, 0, 645,
	0, 1733, 0, 0, 645, 0, 0, 0, 0, 0,
	660, 0, 0, 1499, 1499, 1499, 0, 0, 0, 822,
	822, 0, 0, 1030, 0, 1027, 0, 0, 922, 0,
	1739, 2251, 2252, 2253, 0, 602, 0, 0, 610, 0,
	0, 0, 1304, 0, 0, 0, 2038, 0, 1734, 0,
	0, 1724, 60, 660, 660, 0, 0, 1028, 0, 1030,
	0, 0, 0, 0, 1143, 2274, 0, 0, 0, 0,
	0, 1000, 0, 0, 0, 345, 1536, 1537, 1724, 0,
	0, 1238, 0, 0, 1544, 0, 0, 0, 0, 0,
	1549, 1550, 1552, 1554, 1555, 0, 0, 0, 0, 345,
	0, 1562, 1000, 1000, 1734, 1565, 0, 1030, 1679, 1680,
	0, 1000, 1000, 0, 0, 345, 1735, 0, 0, 0,
	0, 0, 0, 1124, 1125, 970, 0, 970, 0, 528,
	0, 1734, 345, 0, 0, 0, 1592, 0, 0, 0,
	0, 345, 0, 1601, 1000, 0, 0, 1127, 0, 0,
	345, 0, 1128, 1129, 1130, 1131, 1133, 1134, 1351, 660,
	1353, 1027, 645, 0, 0, 0, 1028, 0, 997, 0,
	1126, 0, 1735, 0, 0, 1741, 1742, 1743, 0, 1499,
	1499, 1350, 1350, 0, 0, 1102, 0, 1107, 1377, 0,
	0, 0, 0, 1114, 0, 0, 1730, 1731, 1732, 1735,
	0, 1729, 1727, 1728, 1720, 1721, 1722, 1723, 1725, 1726,
	0, 1164, 1165, 1166, 1167, 1168, 0, 0, 0, 0,
	0, 1177, 0, 0, 0, 345, 1132, 0, 0, 0,
	0, 1185, 0, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
	1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
	1499, 1499, 0, 1499, 0, 1028, 0, 1729, 1727, 1728,
	1720, 1721, 1722, 1723, 1725, 1726, 1977, 0, 0, 1970,
	1027, 0, 0, 0, 0, 0, 0, 1968, 0, 1142,
	1000, 1972, 0, 0, 1729, 1727, 1728, 1720, 1721, 1722,
	1723, 1725, 1726, 0, 0, 1535, 0, 0, 0, 1978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 0, 0, 0, 1718, 1719, 0, 0, 0, 1560,
	1971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1575, 0, 0, 0, 0,
	0, 1884, 1885, 0, 0, 0, 0, 1143, 0, 0,
	0, 1028, 1586, 0, 0, 0, 0, 0, 0, 1027,
	0, 957, 1029, 1029, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1000,
	1973, 1782, 1974, 0, 0, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 0, 1944, 0, 1724, 0, 0,
	1976, 0, 0, 1238, 0, 970, 0, 1979, 0, 0,
	0, 0, 1819, 1135, 1136, 1128, 1129, 1130, 1131, 1133,
	1134, 0, 0, 0, 0, 1377, 0, 0, 0, 345,
	345, 0, 0, 0, 0, 1027, 0, 0, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 0,
	1734, 0, 0, 0, 0, 0, 1029, 1847, 1000, 0,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 345,
	0, 1499, 0, 0, 1030, 1030, 0, 0, 1975, 0,
	0, 1879, 0, 1030, 1030, 345, 0, 0, 822, 0,
	0, 0, 1029, 0, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1030, 1419, 1735, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 602, 0,
	1910, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	1029, 0, 0, 0, 0, 1177, 0, 0, 0, 0,
	0, 0, 997, 997, 1000, 0, 0, 0, 0, 0,
	0, 0, 1478, 1479, 0, 0, 1495, 0, 1507, 1509,
	1514, 1517, 1518, 1519, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 0, 1963, 1964, 1238,
	0, 0, 0, 0, 0, 0, 1720, 1721, 1722, 1723,
	1725, 1726, 0, 1782, 665, 0, 0, 0, 0, 1997,
	0, 1998, 0, 345, 2000, 2001, 0, 345, 0, 2005,
	0, 0, 0, 2103, 0, 0, 0, 0, 1782, 0,
	665, 1274, 0, 1782, 0, 0, 0, 0, 0, 1304,
	1377, 0, 1030, 0, 0, 0, 0, 0, 0, 1595,
	0, 0, 0, 0, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 0,
	345, 345, 0, 0, 345, 0, 1377, 0, 0, 1377,
	0, 0, 0, 0, 0, 1879, 0, 0, 0, 0,
	0, 1624, 997, 2056, 0, 1377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 602, 602, 1635, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 2076, 2179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1173,
	997, 1176, 0, 0, 0, 0, 0, 0, 1181, 0,
	0, 1030, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1663, 1664, 0, 0, 0, 0, 1669, 0, 0, 0,
	0, 1238, 0, 2095, 0, 0, 2097, 0, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 1782, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1688,
	0, 0, 0, 0, 0, 0, 1695, 0, 0, 0,
	1699, 0, 2129, 0, 0, 2235, 1782, 0, 0, 1708,
	0, 345, 0, 1999, 0, 0, 0, 2003, 665, 0,
	1030, 0, 60, 0, 0, 0, 0, 2152, 60, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 1177,
	0, 0, 0, 1879, 0, 0, 1514, 1514, 1514, 0,
	0, 0, 665, 1879, 0, 0, 0, 0, 0, 0,
	60, 0, 60, 0, 0, 0, 1029, 0, 0, 0,
	1377, 1377, 0, 0, 1377, 0, 0, 60, 0, 60,
	0, 1779, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 1029, 1029, 0,
	0, 0, 0, 0, 0, 0, 1029, 1029, 0, 0,
	0, 0, 0, 0, 0, 0, 1030, 0, 2198, 2199,
	0, 0, 0, 0, 0, 0, 0, 0, 2207, 0,
	822, 0, 0, 0, 0, 0, 0, 0, 0, 1029,
	0, 2218, 922, 0, 0, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 0, 1879, 0, 0, 0, 0,
	0, 0, 1879, 665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2243, 0, 665, 0, 0,
	345, 0, 0, 0, 2104, 0, 0, 0, 1882, 0,
	0, 1883, 0, 0, 0, 0, 0, 1782, 0, 1378,
	0, 0, 0, 1888, 2152, 0, 0, 1879, 0, 0,
	0, 0, 1897, 0, 0, 0, 0, 0, 0, 0,
	1901, 2140, 0, 1624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 1917, 0,
	0, 665, 1919, 0, 0, 1377, 0, 345, 0, 0,
	610, 0, 0, 0, 0, 1176, 0, 0, 0, 0,
	0, 2305, 0, 0, 0, 1029, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 1950, 1951, 0, 0, 0,
	1879, 0, 0, 0, 1957, 1958, 1959, 1124, 1125, 0,
	1144, 1145, 1146, 1154, 1155, 1156, 0, 997, 997, 0,
	0, 0, 0, 0, 1147, 0, 997, 997, 0, 0,
	1987, 1127, 0, 0, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 60, 1126, 0, 0, 0, 0, 997,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 610, 0, 1029, 0, 0, 0, 2033, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 0, 0, 0, 1718, 1719, 0, 1736, 1737, 1738,
	2247, 0, 0, 0, 0, 0, 0, 0, 0, 1151,
	1159, 2059, 2061, 0, 0, 0, 2064, 2065, 0, 0,
	0, 2067, 0, 0, 0, 1157, 0, 0, 2069, 0,
	2071, 0, 0, 0, 0, 0, 0, 1149, 2077, 0,
	0, 0, 0, 1142, 60, 0, 0, 1733, 0, 0,
	0, 0, 0, 0, 0, 0, 1658, 0, 0, 0,
	0, 0, 0, 1029, 0, 0, 0, 1304, 1148, 0,
	0, 2086, 0, 0, 0, 997, 0, 1718, 1719, 0,
	1736, 1737, 1738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 1724, 0, 0,
	0, 0, 1124, 1125, 0, 1144, 1145, 1146, 1154, 1155,
	1156, 1143, 0, 0, 1176, 0, 0, 0, 0, 1147,
	2119, 0, 0, 0, 0, 1152, 1127, 0, 0, 1158,
	1733, 0, 1739, 0, 1124, 1125, 0, 1144, 1145, 1146,
	1154, 1155, 1156, 0, 0, 0, 0, 0, 0, 1126,
	1734, 1147, 0, 0, 0, 1141, 0, 0, 1127, 1029,
	0, 1158, 0, 0, 0, 2155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1176,
	1724, 1126, 0, 0, 997, 2171, 2172, 1141, 1150, 0,
	0, 1138, 1139, 1140, 1153, 0, 1137, 1135, 1136, 1128,
	1129, 1130, 1131, 1133, 1134, 1132, 0, 0, 0, 0,
	0, 0, 1760, 0, 0, 2184, 0, 0, 1735, 0,
	0, 0, 0, 0, 1151, 1159, 0, 0, 2188, 0,
	0, 0, 0, 1734, 0, 0, 0, 1132, 0, 0,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1149, 0, 0, 0, 1151, 1159, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1157, 997, 0, 922, 0, 0, 0, 0,
	0, 1378, 0, 1148, 1149, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 1730, 1731,
	1732, 1735, 0, 1729, 1727, 1728, 1720, 1721, 1722, 1723,
	1725, 1726, 0, 0, 0, 1148, 0, 1378, 0, 0,
	1378, 0, 0, 0, 0, 0, 1143, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 1658, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1718, 1719, 0, 1736, 1737, 1738, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	0, 0, 1152, 0, 0, 2287, 0, 0, 0, 0,
	0, 1730, 1731, 1732, 0, 0, 1729, 1727, 1728, 1720,
	1721, 1722, 1723, 1725, 1726, 0, 0, 0, 2303, 2303,
	0, 0, 0, 1150, 0, 1733, 1138, 1139, 1140, 1153,
	0, 1137, 1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134,
	0, 0, 0, 0, 0, 0, 2303, 1759, 0, 0,
	0, 0, 0, 0, 0, 1150, 0, 0, 1138, 1139,
	1140, 1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131,
	1133, 1134, 0, 0, 0, 1724, 0, 0, 0, 1758,
	0, 2303, 1124, 1125, 0, 1144, 1145, 1146, 1154, 1155,
	1156, 0, 0, 0, 0, 1740, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 1158,
	1739, 0, 0, 0, 1124, 1125, 0, 1144, 1145, 1146,
	1154, 1155, 1156, 0, 0, 60, 0, 0, 1734, 1126,
	0, 1147, 0, 0, 0, 1141, 0, 0, 1127, 0,
	0, 1158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1378, 1378, 0, 0, 1378, 0, 0, 0, 0,
	0, 1126, 0, 610, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1735, 0, 0, 0,
	0, 0, 0, 0, 1151, 1159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1149, 0, 0, 0, 1151, 1159, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1148, 1149, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 0, 0, 1730, 1731, 1732, 0,
	0, 1729, 1727, 1728, 1720, 1721, 1722, 1723, 1725, 1726,
	0, 0, 0, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1152, 0, 0, 2148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1378, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1150, 0, 0, 1138, 1139, 1140, 1153,
	0, 1137, 1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134,
	0, 0, 0, 0, 0, 0, 0, 1710, 0, 0,
	0, 0, 0, 0, 0, 1150, 0, 0, 1138, 1139,
	1140, 1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131,
	1133, 1134, 0, 0, 0, 0, 2240, 0, 0, 0,
	0, 388, 0, 0, 0, 1176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 153, 154,
	407, 155, 408, 409, 410, 411, 290, 412, 413, 414,
	415, 156, 157, 158, 291, 292, 293, 294, 159, 295,
	296, 416, 160, 297, 298, 161, 417, 418, 299, 300,
	301, 419, 162, 302, 420, 393, 421, 163, 164, 165,
	0, 166, 422, 167, 168, 169, 423, 394, 170, 171,
	424, 425, 426, 427, 428, 429, 172, 173, 346, 174,
	303, 175, 304, 305, 430, 176, 431, 177, 432, 433,
	434, 178, 179, 435, 180, 436, 0, 437, 306, 181,
	182, 183, 307, 308, 438, 439, 440, 184, 185, 309,
	0, 186, 441, 187, 442, 443, 395, 444, 188, 310,
	445, 311, 446, 189, 190, 191, 192, 312, 313, 397,
	447, 196, 448, 193, 449, 396, 194, 314, 195, 315,
	316, 317, 450, 318, 451, 398, 197, 399, 198, 199,
	452, 201, 200, 453, 319, 400, 202, 401, 454, 203,
	455, 456, 204, 0, 205, 206, 207, 209, 320, 208,
	402, 210, 211, 213, 212, 457, 458, 459, 321, 214,
	322, 215, 216, 460, 217, 461, 462, 218, 463, 464,
	219, 323, 403, 220, 404, 324, 221, 222, 223, 224,
	465, 325, 225, 326, 226, 466, 227, 228, 229, 327,
	230, 231, 467, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 468, 243, 405, 244, 245, 328,
	246, 0, 250, 251, 252, 253, 469, 329, 254, 255,
	470, 256, 247, 248, 257, 406, 258, 330, 331, 259,
	471, 265, 260, 261, 249, 262, 264, 332, 263, 333,
	472, 266, 473, 267, 268, 269, 270, 271, 474, 334,
	335, 336, 475, 476, 272, 337, 338, 477, 273, 274,
	275, 276, 478, 479, 277, 278, 279, 280, 480, 281,
	481, 339, 282, 283, 284, 340, 341, 482, 483, 285,
	484, 485, 486, 487, 286, 287, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 388, 0,
	0, 0, 0, 0, 0, 0, 1872, 0, 0, 0,
	0, 0, 0, 0, 1873, 153, 154, 407, 155, 408,
	409, 410, 411, 290, 412, 413, 414, 415, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 416, 160,
	297, 298, 161, 417, 418, 299, 300, 301, 419, 162,
	302, 420, 393, 421, 163, 164, 165, 0, 166, 422,
	167, 168, 169, 423, 394, 170, 171, 424, 425, 426,
	427, 428, 429, 172, 173, 346, 174, 303, 175, 304,
	305, 430, 176, 431, 177, 432, 433, 434, 178, 179,
	435, 180, 436, 0, 437, 306, 181, 182, 183, 307,
	308, 438, 439, 440, 184, 185, 309, 0, 186, 441,
	187, 442, 443, 395, 444, 188, 310, 445, 311, 446,
	189, 190, 191, 192, 312, 313, 397, 447, 196, 448,
	193, 449, 396, 194, 314, 195, 315, 316, 317, 450,
	318, 451, 398, 197, 399, 198, 199, 452, 201, 200,
	453, 319, 400, 202, 401, 454, 203, 455, 456, 204,
	0, 205, 206, 207, 209, 320, 208, 402, 210, 211,
	213, 212, 457, 458, 459, 321, 214, 322, 215, 216,
	460, 217, 461, 462, 218, 463, 464, 219, 323, 403,
	220, 404, 324, 221, 222, 223, 224, 465, 325, 225,
	326, 226, 466, 227, 228, 229, 327, 230, 231, 467,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 468, 243, 405, 244, 245, 328, 246, 0, 250,
	251, 252, 253, 469, 329, 254, 255, 470, 256, 247,
	248, 257, 406, 258, 330, 331, 259, 471, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 472, 266, 473,
	267, 268, 269, 270, 271, 474, 334, 335, 336, 475,
	476, 272, 337, 338, 477, 273, 274, 275, 276, 478,
	479, 277, 278, 279, 280, 480, 281, 481, 339, 282,
	283, 284, 340, 341, 482, 483, 285, 484, 485, 486,
	487, 286, 287, 288, 289, 0, 0, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2228, 153, 154, 407, 155, 408, 409,
	410, 411, 290, 412, 413, 414, 415, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 416, 160, 297,
	298, 161, 417, 418, 299, 300, 301, 419, 162, 302,
	420, 393, 421, 163, 164, 165, 0, 166, 422, 167,
	168, 169, 423, 394, 170, 171, 424, 425, 426, 427,
	428, 429, 172, 173, 346, 174, 303, 175, 304, 305,
	430, 176, 431, 177, 432, 433, 434, 178, 179, 435,
	180, 436, 0, 437, 306, 181, 182, 183, 307, 308,
	438, 439, 440, 184, 185, 309, 0, 186, 441, 187,
	442, 443, 395, 444, 188, 310, 445, 311, 446, 189,
	190, 191, 192, 312, 313, 397, 447, 196, 448, 193,
	449, 396, 194, 314, 195, 315, 316, 317, 450, 318,
	451, 398, 197, 399, 198, 199, 452, 201, 200, 453,
	319, 400, 202, 401, 454, 203, 455, 456, 204, 0,
	205, 206, 207, 209, 320, 208, 402, 210, 211, 213,
	212, 457, 458, 459, 321, 214, 322, 215, 216, 460,
	217, 461, 462, 218, 463, 464, 219, 323, 403, 220,
	404, 324, 221, 222, 223, 224, 465, 325, 225, 326,
	226, 466, 227, 228, 229, 327, 230, 231, 467, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	468, 243, 405, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 469, 329, 254, 255, 470, 256, 247, 248,
	257, 406, 258, 330, 331, 259, 471, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 472, 266, 473, 267,
	268, 269, 270, 271, 474, 334, 335, 336, 475, 476,
	272, 337, 338, 477, 273, 274, 275, 276, 478, 479,
	277, 278, 279, 280, 480, 281, 481, 339, 282, 283,
	284, 340, 341, 482, 483, 285, 484, 485, 486, 487,
	286, 287, 288, 289, 388, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 951, 0, 0,
	0, 153, 154, 407, 155, 408, 409, 410, 411, 290,
	412, 413, 414, 415, 156, 157, 158, 291, 292, 293,
	294, 159, 295, 296, 416, 160, 297, 298, 161, 417,
	418, 299, 300, 301, 419, 162, 302, 420, 393, 421,
	163, 164, 165, 0, 166, 422, 167, 168, 169, 423,
	394, 170, 171, 424, 425, 426, 427, 428, 429, 172,
	173, 346, 174, 303, 175, 304, 305, 430, 176, 431,
	177, 432, 433, 434, 178, 179, 435, 180, 436, 0,
	437, 306, 181, 182, 183, 307, 308, 438, 439, 440,
	184, 185, 309, 0, 186, 441, 187, 442, 443, 395,
	444, 188, 310, 445, 311, 446, 189, 190, 191, 192,
	312, 313, 397, 447, 196, 448, 193, 449, 396, 194,
	314, 195, 315, 316, 317, 450, 318, 451, 398, 197,
	399, 198, 199, 452, 201, 200, 453, 319, 400, 202,
	401, 454, 203, 455, 456, 204, 0, 205, 206, 207,
	209, 320, 208, 402, 210, 211, 213, 212, 457, 458,
	459, 321, 214, 322, 215, 216, 460, 217, 461, 462,
	218, 463, 464, 219, 323, 403, 220, 404, 324, 221,
	222, 223, 224, 465, 325, 225, 326, 226, 466, 227,
	228, 229, 327, 230, 231, 467, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 468, 243, 405,
	244, 245, 328, 246, 0, 250, 251, 252, 253, 469,
	329, 254, 255, 470, 256, 247, 248, 257, 406, 258,
	330, 331, 259, 471, 265, 260, 261, 249, 262, 264,
	332, 263, 333, 472, 266, 473, 267, 268, 269, 270,
	271, 474, 334, 335, 336, 475, 476, 272, 337, 338,
	477, 273, 274, 275, 276, 478, 479, 277, 278, 279,
	280, 480, 281, 481, 339, 282, 283, 284, 340, 341,
	482, 483, 285, 484, 485, 486, 487, 286, 287, 288,
	289, 1461, 0, 860, 849, 850, 847, 848, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 154, 1465, 155, 0, 0, 0, 0, 876, 842,
	0, 0, 0, 156, 157, 158, 291, 891, 293, 892,
	159, 893, 894, 0, 160, 297, 298, 161, 845, 875,
	895, 896, 301, 0, 162, 887, 0, 868, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 171, 0, 869, 871, 0, 870, 872, 172, 173,
	346, 174, 897, 175, 898, 899, 0, 176, 0, 177,
	0, 1466, 0, 890, 179, 0, 180, 0, 0, 0,
	833, 181, 182, 183, 877, 878, 856, 0, 0, 184,
	185, 900, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 888, 0, 311, 0, 189, 190, 191, 192, 884,
	886, 397, 0, 196, 0, 193, 0, 396, 194, 901,
	195, 902, 903, 904, 0, 867, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 889, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 828, 0, 857,
	885, 214, 905, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 879, 221, 222,
	223, 224, 0, 880, 225, 326, 226, 0, 227, 228,
	229, 906, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 834, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 873, 256, 247, 248, 257, 406, 258, 907,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 908,
	263, 881, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 909, 910, 0, 0, 272, 882, 883, 855,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	874, 281, 0, 339, 282, 283, 284, 340, 911, 1464,
	0, 285, 0, 0, 0, 0, 286, 287, 288, 289,
	829, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 1467, 860, 849, 850, 847, 848, 839,
	835, 1462, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 153, 154, 0, 155, 0, 0, 0, 0, 876,
	842, 0, 0, 0, 156, 157, 158, 291, 891, 293,
	892, 159, 893, 894, 0, 160, 297, 298, 161, 845,
	875, 895, 896, 301, 0, 162, 887, 0, 868, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	394, 170, 171, 0, 869, 871, 0, 870, 872, 172,
	173, 346, 174, 897, 175, 898, 899, 923, 176, 0,
	177, 0, 0, 0, 890, 179, 0, 180, 0, 0,
	0, 833, 181, 182, 183, 877, 878, 856, 0, 0,
	184, 185, 900, 0, 186, 0, 187, 0, 0, 395,
	0, 188, 888, 0, 311, 0, 189, 190, 191, 192,
	884, 886, 397, 0, 196, 0, 193, 0, 396, 194,
	901, 195, 902, 903, 904, 0, 867, 0, 398, 197,
	399, 198, 199, 0, 201, 200, 0, 889, 400, 202,
	401, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 402, 210, 211, 213, 212, 828, 0,
	857, 885, 214, 905, 215, 216, 0, 217, 0, 0,
	218, 0, 0, 219, 323, 403, 220, 404, 879, 221,
	222, 223, 224, 0, 880, 225, 326, 226, 0, 227,
	228, 229, 906, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 405,
	244, 245, 834, 246, 0, 250, 251, 252, 253, 111,
	329, 254, 255, 873, 256, 247, 248, 257, 406, 258,
	907, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	908, 263, 881, 0, 266, 115, 267, 268, 269, 270,
	271, 0, 334, 909, 910, 0, 0, 272, 882, 883,
	855, 273, 274, 275, 276, 0, 0, 277, 278, 279,
	280, 874, 281, 0, 339, 282, 283, 284, 714, 911,
	0, 0, 285, 0, 0, 0, 108, 286, 287, 288,
	289, 829, 109, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 825, 826, 0, 0, 0, 0, 0, 0,
	0, 1179, 0, 0, 0, 611, 838, 860, 849, 850,
	847, 848, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 876, 842, 0, 0, 0, 156, 157, 158,
	291, 891, 293, 892, 159, 893, 894, 0, 160, 297,
	298, 161, 845, 875, 895, 896, 301, 0, 162, 887,
	0, 868, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 394, 170, 171, 0, 869, 871, 0,
	870, 872, 172, 173, 346, 174, 897, 175, 898, 899,
	0, 176, 0, 177, 0, 0, 0, 890, 179, 0,
	180, 0, 0, 0, 833, 181, 182, 183, 877, 878,
	856, 0, 0, 184, 185, 900, 0, 186, 0, 187,
	0, 0, 395, 0, 188, 888, 0, 311, 0, 189,
	190, 191, 192, 884, 886, 397, 0, 196, 0, 193,
	0, 396, 194, 901, 195, 902, 903, 904, 0, 867,
	0, 398, 197, 399, 198, 199, 0, 201, 200, 0,
	889, 400, 202, 401, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 402, 210, 211, 213,
	212, 828, 0, 857, 885, 214, 905, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 403, 220,
	404, 879, 221, 222, 223, 224, 0, 880, 225, 326,
	226, 0, 227, 228, 229, 906, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 405, 244, 245, 834, 246, 0, 250, 251,
	252, 253, 111, 329, 254, 255, 873, 256, 247, 248,
	257, 406, 258, 907, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 908, 263, 881, 0, 266, 115, 267,
	268, 269, 270, 271, 0, 334, 909, 910, 0, 0,
	272, 882, 883, 855, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 874, 281, 0, 339, 282, 283,
	284, 714, 911, 0, 0, 285, 0, 0, 0, 108,
	286, 287, 288, 289, 829, 109, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 825, 826, 860, 849, 850,
	847, 848, 839, 0, 1179, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 876, 842, 0, 0, 0, 156, 157, 158,
	291, 891, 293, 892, 159, 893, 894, 0, 160, 297,
	298, 161, 845, 875, 895, 896, 301, 0, 162, 887,
	0, 868, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 394, 170, 171, 0, 869, 871, 0,
	870, 872, 172, 173, 346, 174, 897, 175, 898, 899,
	0, 176, 0, 177, 0, 0, 0, 890, 179, 0,
	180, 0, 0, 0, 833, 181, 182, 183, 877, 878,
	856, 0, 0, 184, 185, 900, 0, 186, 0, 187,
	0, 0, 395, 0, 188, 888, 0, 311, 0, 189,
	190, 191, 192, 884, 886, 397, 0, 196, 0, 193,
	0, 396, 194, 901, 195, 902, 903, 904, 0, 867,
	0, 398, 197, 399, 198, 199, 0, 201, 200, 0,
	889, 400, 202, 401, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 402, 210, 211, 213,
	212, 828, 0, 857, 885, 214, 905, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 403, 220,
	404, 879, 221, 222, 223, 224, 0, 880, 225, 326,
	226, 0, 227, 228, 229, 906, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 405, 244, 245, 834, 246, 0, 250, 251,
	252, 253, 111, 329, 254, 255, 873, 256, 247, 248,
	257, 406, 258, 907, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 908, 263, 881, 0, 266, 115, 267,
	268, 269, 270, 271, 0, 334, 909, 910, 0, 0,
	272, 882, 883, 855, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 874, 281, 0, 339, 282, 283,
	284, 714, 911, 0, 0, 285, 0, 0, 0, 108,
	286, 287, 288, 289, 829, 109, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 825, 826, 860, 849, 850,
	847, 848, 839, 0, 1179, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 876, 842, 0, 0, 0, 156, 157, 158,
	291, 891, 293, 892, 159, 893, 894, 1510, 160, 297,
	298, 161, 845, 875, 895, 896, 301, 0, 162, 887,
	0, 868, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 394, 170, 171, 0, 869, 871, 0,
	870, 872, 172, 173, 346, 174, 897, 175, 898, 899,
	0, 176, 0, 177, 0, 0, 0, 890, 179, 0,
	180, 0, 0, 0, 833, 181, 182, 183, 877, 878,
	856, 0, 0, 184, 185, 900, 0, 186, 0, 187,
	0, 1515, 395, 0, 188, 888, 0, 311, 0, 189,
	190, 191, 192, 884, 886, 397, 0, 196, 0, 193,
	0, 396, 194, 901, 195, 902, 903, 904, 0, 867,
	0, 398, 197, 399, 198, 199, 0, 201, 200, 1511,
	889, 400, 202, 401, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 402, 210, 211, 213,
	212, 828, 0, 857, 885, 214, 905, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 403, 220,
	404, 879, 221, 222, 223, 224, 0, 880, 225, 326,
	226, 0, 227, 228, 229, 906, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 405, 244, 245, 834, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 873, 256, 247, 248,
	257, 406, 258, 907, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 908, 263, 881, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 909, 910, 0, 1512,
	272, 882, 883, 855, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 874, 281, 0, 339, 282, 283,
	284, 340, 911, 0, 0, 285, 0, 0, 0, 0,
	286, 287, 288, 289, 829, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 825, 826, 860, 849, 850,
	847, 848, 839, 0, 835, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 876, 842, 0, 0, 0, 156, 157, 158,
	291, 891, 293, 892, 159, 893, 894, 0, 160, 297,
	298, 161, 845, 875, 895, 896, 301, 0, 162, 887,
	0, 868, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 394, 170, 171, 0, 869, 871, 0,
	870, 872, 172, 173, 346, 174, 897, 175, 898, 899,
	0, 176, 0, 177, 0, 0, 0, 890, 179, 0,
	180, 0, 0, 0, 833, 181, 182, 183, 877, 878,
	856, 0, 0, 184, 185, 900, 0, 186, 0, 187,
	0, 0, 395, 0, 188, 888, 0, 311, 0, 189,
	190, 191, 192, 884, 886, 397, 0, 196, 0, 193,
	0, 396, 194, 901, 195, 902, 903, 904, 0, 867,
	0, 398, 197, 399, 198, 199, 0, 201, 200, 0,
	889, 400, 202, 401, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 402, 210, 211, 213,
	212, 828, 1826, 857, 885, 214, 905, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 403, 220,
	404, 879, 221, 222, 223, 224, 0, 880, 225, 326,
	226, 0, 227, 228, 229, 906, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 405, 244, 245, 834, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 873, 256, 247, 248,
	257, 406, 258, 907, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 908, 263, 881, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 909, 910, 0, 0,
	272, 882, 883, 855, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 874, 281, 0, 339, 282, 283,
	284, 340, 911, 0, 0, 285, 0, 0, 0, 0,
	286, 287, 288, 289, 829, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 825, 826, 823, 860, 849,
	850, 847, 848, 839, 835, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 153, 154, 0, 155, 0,
	0, 0, 0, 876, 842, 0, 0, 0, 156, 157,
	158, 291, 891, 293, 892, 159, 893, 894, 0, 160,
	297, 298, 161, 845, 875, 895, 896, 301, 0, 162,
	887, 0, 868, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 394, 170, 171, 0, 869, 871,
	0, 870, 872, 172, 173, 346, 174, 897, 175, 898,
	899, 0, 176, 0, 177, 0, 0, 0, 890, 179,
	0, 180, 0, 0, 0, 833, 181, 182, 183, 877,
	878, 856, 0, 0, 184, 185, 900, 0, 186, 0,
	187, 0, 0, 395, 0, 188, 888, 0, 311, 0,
	189, 190, 191, 192, 884, 886, 397, 0, 196, 0,
	193, 0, 396, 194, 901, 195, 902, 903, 904, 0,
	867, 0, 398, 197, 399, 198, 199, 0, 201, 200,
	0, 889, 400, 202, 401, 0, 203, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 208, 402, 210, 211,
	213, 212, 828, 0, 857, 885, 214, 905, 215, 216,
	0, 217, 0, 0, 218, 0, 0, 219, 323, 403,
	220, 404, 879, 221, 222, 223, 224, 0, 880, 225,
	326, 226, 0, 227, 228, 229, 906, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 405, 244, 245, 834, 246, 0, 250,
	251, 252, 253, 0, 329, 254, 255, 873, 256, 247,
	248, 257, 406, 258, 907, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 908, 263, 881, 0, 266, 0,
	267, 268, 269, 270, 271, 0, 334, 909, 910, 0,
	0, 272, 882, 883, 855, 273, 274, 275, 276, 0,
	0, 277, 278, 279, 280, 874, 281, 0, 339, 282,
	283, 284, 340, 911, 0, 0, 285, 0, 0, 0,
	0, 286, 287, 288, 289, 829, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 825, 826, 0, 0,
	0, 0, 0, 1183, 1456, 835, 0, 0, 0, 0,
	838, 860, 849, 850, 847, 848, 839, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 154,
	0, 155, 0, 0, 0, 0, 876, 842, 0, 0,
	0, 156, 157, 158, 291, 891, 293, 892, 159, 893,
	894, 0, 160, 297, 298, 161, 845, 875, 895, 896,
	301, 0, 162, 887, 0, 868, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 394, 170, 171,
	0, 869, 871, 0, 870, 872, 172, 173, 346, 174,
	897, 175, 898, 899, 0, 176, 0, 177, 0, 0,
	0, 890, 179, 0, 180, 0, 0, 0, 833, 181,
	182, 183, 877, 878, 856, 0, 0, 184, 185, 900,
	0, 186, 0, 187, 0, 0, 395, 0, 188, 888,
	0, 311, 0, 189, 190, 191, 192, 884, 886, 397,
	0, 196, 0, 193, 0, 396, 194, 901, 195, 902,
	903, 904, 0, 867, 0, 398, 197, 399, 198, 199,
	0, 201, 200, 0, 889, 400, 202, 401, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	402, 210, 211, 213, 212, 828, 0, 857, 885, 214,
	905, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 403, 220, 404, 879, 221, 222, 223, 224,
	0, 880, 225, 326, 226, 0, 227, 228, 229, 906,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 405, 244, 245, 834,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	873, 256, 247, 248, 257, 406, 258, 907, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 908, 263, 881,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	909, 910, 0, 0, 272, 882, 883, 855, 273, 274,
	275, 276, 0, 0, 277, 278, 279, 280, 874, 281,
	0, 339, 282, 283, 284, 340, 911, 0, 0, 285,
	0, 0, 0, 0, 286, 287, 288, 289, 829, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 825,
	826, 860, 849, 850, 847, 848, 839, 0, 835, 1947,
	0, 0, 0, 838, 0, 0, 0, 0, 153, 154,
	0, 155, 0, 0, 0, 0, 876, 842, 0, 0,
	0, 156, 157, 158, 291, 891, 293, 892, 159, 893,
	894, 0, 160, 297, 298, 161, 845, 875, 895, 896,
	301, 0, 162, 887, 0, 868, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 394, 170, 171,
	0, 869, 871, 0, 870, 872, 172, 173, 346, 174,
	897, 175, 898, 899, 0, 176, 0, 177, 0, 0,
	0, 890, 179, 0, 180, 0, 0, 0, 833, 181,
	182, 183, 877, 878, 856, 0, 0, 184, 185, 900,
	0, 186, 0, 187, 0, 0, 395, 0, 188, 888,
	0, 311, 0, 189, 190, 191, 192, 884, 886, 397,
	0, 196, 0, 193, 0, 396, 194, 901, 195, 902,
	903, 904, 0, 867, 0, 398, 197, 399, 198, 199,
	0, 201, 200, 0, 889, 400, 202, 401, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	402, 210, 211, 213, 212, 828, 0, 857, 885, 214,
	905, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 403, 220, 404, 879, 221, 222, 223, 224,
	0, 880, 225, 326, 226, 0, 227, 228, 229, 906,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 405, 244, 245, 834,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	873, 256, 247, 248, 257, 406, 258, 907, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 908, 263, 881,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	909, 910, 0, 0, 272, 882, 883, 855, 273, 274,
	275, 276, 0, 0, 277, 278, 279, 280, 874, 281,
	0, 339, 282, 283, 284, 340, 911, 1904, 0, 285,
	0, 0, 0, 0, 286, 287, 288, 289, 829, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 825,
	826, 860, 849, 850, 847, 848, 839, 0, 835, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 153, 154,
	0, 155, 0, 0, 0, 0, 876, 842, 0, 0,
	0, 156, 157, 158, 291, 891, 293, 892, 159, 893,
	894, 0, 160, 297, 298, 161, 845, 875, 895, 896,
	301, 0, 162, 887, 0, 868, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 394, 170, 171,
	0, 869, 871, 0, 870, 872, 172, 173, 346, 174,
	897, 175, 898, 899, 0, 176, 0, 177, 0, 0,
	0, 890, 179, 0, 180, 0, 0, 0, 833, 181,
	182, 183, 877, 878, 856, 0, 0, 184, 185, 900,
	0, 186, 0, 187, 0, 0, 395, 0, 188, 888,
	0, 311, 0, 189, 190, 191, 192, 884, 886, 397,
	0, 196, 0, 193, 0, 396, 194, 901, 195, 902,
	903, 904, 0, 867, 0, 398, 197, 399, 198, 199,
	0, 201, 200, 0, 889, 400, 202, 401, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	402, 210, 211, 213, 212, 828, 0, 857, 885, 214,
	905, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 403, 220, 404, 879, 221, 222, 223, 224,
	0, 880, 225, 326, 226, 0, 227, 228, 229, 906,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 405, 244, 245, 834,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	873, 256, 247, 248, 257, 406, 258, 907, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 908, 263, 881,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	909, 910, 0, 0, 272, 882, 883, 855, 273, 274,
	275, 276, 0, 0, 277, 278, 279, 280, 874, 281,
	0, 339, 282, 283, 284, 340, 911, 0, 0, 285,
	0, 0, 0, 0, 286, 287, 288, 289, 829, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 825,
	826, 0, 0, 0, 0, 0, 0, 0, 835, 1894,
	0, 0, 1875, 838, 860, 849, 850, 847, 848, 839,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 154, 0, 155, 0, 0, 0, 0, 876,
	842, 0, 0, 0, 156, 157, 158, 291, 891, 293,
	892, 159, 893, 894, 0, 160, 297, 298, 161, 845,
	875, 895, 896, 301, 0, 162, 887, 0, 868, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	394, 170, 171, 0, 869, 871, 0, 870, 872, 172,
	173, 346, 174, 897, 175, 898, 899, 0, 176, 0,
	177, 0, 0, 0, 890, 179, 0, 180, 0, 0,
	0, 833, 181, 182, 183, 877, 878, 856, 0, 0,
	184, 185, 900, 0, 186, 0, 187, 0, 0, 395,
	0, 188, 888, 0, 311, 0, 189, 190, 191, 192,
	884, 886, 397, 0, 196, 0, 193, 0, 396, 194,
	901, 195, 902, 903, 904, 0, 867, 0, 398, 197,
	399, 198, 199, 0, 201, 200, 0, 889, 400, 202,
	401, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 402, 210, 211, 213, 212, 828, 0,
	857, 885, 214, 905, 215, 216, 0, 217, 0, 0,
	218, 0, 0, 219, 323, 403, 220, 404, 879, 221,
	222, 223, 224, 0, 880, 225, 326, 226, 0, 227,
	228, 229, 906, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 405,
	244, 245, 834, 246, 0, 250, 251, 252, 253, 0,
	329, 254, 255, 873, 256, 247, 248, 257, 406, 258,
	907, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	908, 263, 881, 0, 266, 0, 267, 268, 269, 270,
	271, 0, 334, 909, 910, 0, 0, 272, 882, 883,
	855, 273, 274, 275, 276, 0, 0, 277, 278, 279,
	280, 874, 281, 0, 339, 282, 283, 284, 340, 911,
	0, 0, 285, 0, 0, 0, 0, 286, 287, 288,
	289, 829, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 825, 826, 860, 849, 850, 847, 848, 839,
	0, 835, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 153, 154, 0, 155, 0, 0, 0, 0, 876,
	842, 0, 0, 0, 156, 157, 158, 291, 891, 293,
	892, 159, 893, 894, 0, 160, 297, 298, 161, 845,
	875, 895, 896, 301, 0, 162, 887, 0, 868, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	394, 170, 171, 0, 869, 871, 0, 870, 872, 172,
	173, 346, 174, 897, 175, 898, 899, 923, 176, 0,
	177, 0, 0, 0, 890, 179, 0, 180, 0, 0,
	0, 833, 181, 182, 183, 877, 878, 856, 0, 0,
	184, 185, 900, 0, 186, 0, 187, 0, 0, 395,
	0, 188, 888, 0, 311, 0, 189, 190, 191, 192,
	884, 886, 397, 0, 196, 0, 193, 0, 396, 194,
	901, 195, 902, 903, 904, 0, 867, 0, 398, 197,
	399, 198, 199, 0, 201, 200, 0, 889, 400, 202,
	401, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 402, 210, 211, 213, 212, 828, 0,
	857, 885, 214, 905, 215, 216, 0, 217, 0, 0,
	218, 0, 0, 219, 323, 403, 220, 404, 879, 221,
	222, 223, 224, 0, 880, 225, 326, 226, 0, 227,
	228, 229, 906, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 405,
	244, 245, 834, 246, 0, 250, 251, 252, 253, 0,
	329, 254, 255, 873, 256, 247, 248, 257, 406, 258,
	907, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	908, 263, 881, 0, 266, 0, 267, 268, 269, 270,
	271, 0, 334, 909, 910, 0, 0, 272, 882, 883,
	855, 273, 274, 275, 276, 0, 0, 277, 278, 279,
	280, 874, 281, 0, 339, 282, 283, 284, 340, 911,
	0, 0, 285, 0, 0, 0, 0, 286, 287, 288,
	289, 829, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 825, 826, 860, 849, 850, 847, 848, 839,
	0, 835, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 153, 154, 0, 155, 0, 0, 0, 0, 876,
	842, 0, 0, 0, 156, 157, 158, 291, 891, 293,
	892, 159, 893, 894, 0, 160, 297, 298, 161, 845,
	875, 895, 896, 301, 0, 162, 887, 0, 868, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	394, 170, 171, 0, 869, 871, 0, 870, 872, 172,
	173, 346, 174, 897, 175, 898, 899, 0, 176, 0,
	177, 0, 0, 0, 890, 179, 0, 180, 0, 0,
	0, 833, 181, 182, 183, 877, 878, 856, 0, 0,
	184, 185, 900, 0, 186, 0, 187, 0, 1515, 395,
	0, 188, 888, 0, 311, 0, 189, 190, 191, 192,
	884, 886, 397, 0, 196, 0, 193, 0, 396, 194,
	901, 195, 902, 903, 904, 0, 867, 0, 398, 197,
	399, 198, 199, 0, 201, 200, 0, 889, 400, 202,
	401, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 402, 210, 211, 213, 212, 828, 0,
	857, 885, 214, 905, 215, 216, 0, 217, 0, 0,
	218, 0, 0, 219, 323, 403, 220, 404, 879, 221,
	222, 223, 224, 0, 880, 225, 326, 226, 0, 227,
	228, 229, 906, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 405,
	244, 245, 834, 246, 0, 250, 251, 252, 253, 0,
	329, 254, 255, 873, 256, 247, 248, 257, 406, 258,
	907, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	908, 263, 881, 0, 266, 0, 267, 268, 269, 270,
	271, 0, 334, 909, 910, 0, 0, 272, 882, 883,
	855, 273, 274, 275, 276, 0, 0, 277, 278, 279,
	280, 874, 281, 0, 339, 282, 283, 284, 340, 911,
	0, 0, 285, 0, 0, 0, 0, 286, 287, 288,
	289, 829, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 825, 826, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 1524, 838, 860, 849, 850,
	847, 848, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 876, 842, 0, 0, 0, 156, 157, 158,
	291, 891, 293, 892, 159, 893, 894, 0, 160, 297,
	298, 161, 845, 875, 895, 896, 301, 0, 162, 887,
	0, 868, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 394, 170, 171, 0, 869, 871, 0,
	870, 872, 172, 173, 346, 174, 897, 175, 898, 899,
	0, 176, 0, 177, 0, 0, 0, 890, 179, 0,
	180, 0, 0, 0, 833, 181, 182, 183, 877, 878,
	856, 0, 0, 184, 185, 900, 0, 186, 0, 187,
	0, 0, 395, 0, 188, 888, 0, 311, 0, 189,
	190, 191, 192, 884, 886, 397, 0, 196, 0, 193,
	0, 396, 194, 901, 195, 902, 903, 904, 0, 867,
	0, 398, 197, 399, 198, 199, 0, 201, 200, 0,
	889, 400, 202, 401, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 402, 210, 211, 213,
	212, 828, 0, 857, 885, 214, 905, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 403, 220,
	404, 879, 221, 222, 223, 224, 0, 880, 225, 326,
	226, 0, 227, 228, 229, 906, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 405, 244, 245, 834, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 873, 256, 247, 248,
	257, 406, 258, 907, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 908, 263, 881, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 909, 910, 0, 0,
	272, 882, 883, 855, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 874, 281, 0, 339, 282, 283,
	284, 340, 911, 0, 0, 285, 0, 0, 0, 0,
	286, 287, 288, 289, 829, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 825, 826, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 1522, 838,
	860, 849, 850, 847, 848, 839, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 154, 0,
	155, 0, 0, 0, 0, 876, 842, 0, 0, 0,
	156, 157, 158, 291, 891, 293, 892, 159, 893, 894,
	0, 160, 297, 298, 161, 845, 875, 895, 896, 301,
	0, 162, 887, 0, 868, 0, 163, 164, 165, 0,
	166, 0, 167, 168, 169, 0, 394, 170, 171, 0,
	869, 871, 0, 870, 872, 172, 173, 346, 174, 897,
	175, 898, 899, 0, 176, 0, 177, 0, 0, 0,
	890, 179, 0, 180, 0, 0, 0, 833, 181, 182,
	183, 877, 878, 856, 0, 0, 184, 185, 900, 0,
	186, 0, 187, 0, 0, 395, 0, 188, 888, 0,
	311, 0, 189, 190, 191, 192, 884, 886, 397, 0,
	196, 0, 193, 0, 396, 194, 901, 195, 902, 903,
	904, 0, 867, 0, 398, 197, 399, 198, 199, 0,
	201, 200, 0, 889, 400, 202, 401, 0, 203, 0,
	0, 204, 0, 205, 206, 207, 209, 320, 208, 402,
	210, 211, 213, 212, 828, 0, 857, 885, 214, 905,
	215, 216, 0, 217, 0, 0, 218, 0, 0, 219,
	323, 403, 220, 404, 879, 221, 222, 223, 224, 0,
	880, 225, 326, 226, 0, 227, 228, 229, 906, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 0, 243, 405, 244, 245, 834, 246,
	0, 250, 251, 252, 253, 0, 329, 254, 255, 873,
	256, 247, 248, 257, 406, 258, 907, 331, 259, 0,
	265, 260, 261, 249, 262, 264, 908, 263, 881, 0,
	266, 0, 267, 268, 269, 270, 271, 0, 334, 909,
	910, 0, 0, 272, 882, 883, 855, 273, 274, 275,
	276, 0, 0, 277, 278, 279, 280, 874, 281, 0,
	339, 282, 283, 284, 340, 911, 0, 0, 285, 0,
	0, 0, 0, 286, 287, 288, 289, 829, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 825, 826,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 1506, 838, 860, 849, 850, 847, 848, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 876, 842,
	0, 0, 0, 156, 157, 158, 291, 891, 293, 892,
	159, 893, 894, 0, 160, 297, 298, 161, 845, 875,
	895, 896, 301, 0, 162, 887, 0, 868, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 171, 0, 869, 871, 0, 870, 872, 172, 173,
	346, 174, 897, 175, 898, 899, 0, 176, 0, 177,
	0, 0, 0, 890, 179, 0, 180, 0, 0, 0,
	833, 181, 182, 183, 877, 878, 856, 0, 0, 184,
	185, 900, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 888, 0, 311, 0, 189, 190, 191, 192, 884,
	886, 397, 0, 196, 0, 193, 0, 396, 194, 901,
	195, 902, 903, 904, 0, 867, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 889, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 828, 0, 857,
	885, 214, 905, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 879, 221, 222,
	223, 224, 0, 880, 225, 326, 226, 0, 227, 228,
	229, 906, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 834, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 873, 256, 247, 248, 257, 406, 258, 907,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 908,
	263, 881, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 909, 910, 0, 0, 272, 882, 883, 855,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	874, 281, 0, 339, 282, 283, 284, 340, 911, 0,
	0, 285, 0, 0, 0, 0, 286, 287, 288, 289,
	829, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 1494, 838, 860, 849, 850, 847,
	848, 839, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 154, 0, 155, 0, 0, 0,
	0, 876, 842, 0, 0, 0, 156, 157, 158, 291,
	891, 293, 892, 159, 893, 894, 0, 160, 297, 298,
	161, 845, 875, 895, 896, 301, 0, 162, 887, 0,
	868, 0, 163, 164, 165, 0, 166, 0, 167, 168,
	169, 0, 394, 170, 171, 0, 869, 871, 0, 870,
	872, 172, 173, 346, 174, 897, 175, 898, 899, 0,
	176, 0, 177, 0, 0, 0, 890, 179, 0, 180,
	0, 0, 0, 833, 181, 182, 183, 877, 878, 856,
	0, 0, 184, 185, 900, 0, 186, 0, 187, 0,
	0, 395, 0, 188, 888, 0, 311, 0, 189, 190,
	191, 192, 884, 886, 397, 0, 196, 0, 193, 0,
	396, 194, 901, 195, 902, 903, 904, 0, 867, 0,
	398, 197, 399, 198, 199, 0, 201, 200, 0, 889,
	400, 202, 401, 0, 203, 0, 0, 204, 0, 205,
	206, 207, 209, 320, 208, 402, 210, 211, 213, 212,
	828, 0, 857, 885, 214, 905, 215, 216, 0, 217,
	0, 0, 218, 0, 0, 219, 323, 403, 220, 404,
	879, 221, 222, 223, 224, 0, 880, 225, 326, 226,
	0, 227, 228, 229, 906, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 0,
	243, 405, 244, 245, 834, 246, 0, 250, 251, 252,
	253, 0, 329, 254, 255, 873, 256, 247, 248, 257,
	406, 258, 907, 331, 259, 0, 265, 260, 261, 249,
	262, 264, 908, 263, 881, 0, 266, 0, 267, 268,
	269, 270, 271, 0, 334, 909, 910, 0, 0, 272,
	882, 883, 855, 273, 274, 275, 276, 0, 0, 277,
	278, 279, 280, 874, 281, 0, 339, 282, 283, 284,
	340, 911, 0, 0, 285, 0, 0, 0, 0, 286,
	287, 288, 289, 829, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 825, 826, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 1492, 838, 1484,
	849, 850, 847, 848, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 0, 155,
	0, 0, 0, 0, 876, 842, 0, 0, 0, 156,
	157, 158, 291, 891, 293, 892, 159, 893, 894, 0,
	160, 297, 298, 161, 845, 875, 895, 896, 301, 0,
	162, 887, 0, 868, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 394, 170, 171, 0, 869,
	871, 0, 870, 872, 172, 173, 346, 174, 897, 1487,
	898, 899, 0, 176, 0, 177, 0, 0, 0, 890,
	179, 0, 180, 0, 0, 0, 833, 181, 182, 183,
	877, 878, 856, 0, 0, 184, 185, 900, 0, 186,
	0, 187, 0, 0, 395, 0, 188, 888, 0, 311,
	0, 189, 190, 1488, 192, 884, 886, 397, 0, 196,
	0, 193, 0, 396, 194, 901, 195, 902, 903, 904,
	0, 867, 0, 398, 197, 399, 198, 199, 0, 201,
	200, 0, 889, 400, 202, 401, 0, 203, 0, 0,
	204, 0, 205, 1489, 1486, 209, 320, 208, 402, 210,
	211, 213, 212, 828, 0, 857, 885, 214, 905, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	403, 220, 404, 879, 221, 222, 223, 224, 0, 880,
	225, 326, 226, 0, 227, 228, 229, 906, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 405, 244, 245, 834, 246, 0,
	250, 251, 252, 1490, 0, 329, 254, 255, 873, 256,
	247, 248, 257, 406, 258, 907, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 908, 263, 881, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 909, 910,
	0, 0, 272, 882, 883, 855, 273, 274, 275, 276,
	0, 0, 277, 278, 279, 280, 874, 281, 0, 339,
	282, 283, 284, 340, 911, 0, 0, 285, 0, 0,
	0, 0, 286, 287, 1485, 289, 829, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 825, 826, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	1481, 838, 1484, 849, 850, 847, 848, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	154, 0, 155, 0, 0, 0, 0, 876, 842, 0,
	0, 0, 156, 157, 158, 291, 891, 293, 892, 159,
	893, 894, 0, 160, 297, 298, 161, 845, 875, 895,
	896, 301, 0, 162, 887, 0, 868, 0, 163, 164,
	165, 0, 166, 0, 167, 168, 169, 0, 394, 170,
	171, 0, 869, 871, 0, 870, 872, 172, 173, 346,
	174, 897, 1487, 898, 899, 0, 176, 0, 177, 0,
	0, 0, 890, 179, 0, 180, 0, 0, 0, 833,
	181, 182, 183, 877, 878, 856, 0, 0, 184, 185,
	900, 0, 186, 0, 187, 0, 0, 395, 0, 188,
	888, 0, 311, 0, 189, 190, 1488, 192, 884, 886,
	397, 0, 196, 0, 193, 0, 396, 194, 901, 195,
	902, 903, 904, 0, 867, 0, 398, 197, 399, 198,
	199, 0, 201, 200, 0, 889, 400, 202, 401, 0,
	203, 0, 0, 204, 0, 205, 1489, 1486, 209, 320,
	208, 402, 210, 211, 213, 212, 828, 0, 857, 885,
	214, 905, 215, 216, 0, 217, 0, 0, 218, 0,
	0, 219, 323, 403, 220, 404, 879, 221, 222, 223,
	224, 0, 880, 225, 326, 226, 0, 227, 228, 229,
	906, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 0, 243, 405, 244, 245,
	834, 246, 0, 250, 251, 252, 1490, 0, 329, 254,
	255, 873, 256, 247, 248, 257, 406, 258, 907, 331,
	259, 0, 265, 260, 261, 249, 262, 264, 908, 263,
	881, 0, 266, 0, 267, 268, 269, 270, 271, 0,
	334, 909, 910, 0, 0, 272, 882, 883, 855, 273,
	274, 275, 276, 0, 0, 277, 278, 279, 280, 874,
	281, 0, 339, 282, 283, 284, 340, 911, 0, 0,
	285, 0, 0, 0, 0, 286, 287, 1485, 289, 829,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	825, 826, 860, 849, 850, 847, 848, 839, 0, 835,
	0, 0, 0, 0, 838, 0, 0, 0, 0, 153,
	154, 0, 155, 0, 0, 0, 0, 876, 842, 0,
	0, 0, 156, 157, 158, 291, 891, 293, 892, 159,
	893, 894, 0, 160, 297, 298, 161, 845, 875, 895,
	896, 301, 0, 162, 887, 0, 868, 0, 163, 164,
	165, 0, 166, 0, 167, 168, 169, 0, 394, 170,
	171, 0, 869, 871, 0, 870, 872, 172, 173, 346,
	174, 897, 175, 898, 899, 0, 176, 0, 177, 0,
	0, 0, 890, 179, 0, 180, 0, 0, 0, 833,
	181, 182, 183, 877, 878, 856, 0, 0, 184, 185,
	900, 0, 186, 0, 187, 0, 0, 395, 0, 188,
	888, 0, 311, 0, 189, 190, 191, 192, 884, 886,
	397, 0, 196, 0, 193, 0, 396, 194, 901, 195,
	902, 903, 904, 0, 867, 0, 398, 197, 399, 198,
	199, 0, 201, 200, 0, 889, 400, 202, 401, 0,
	203, 0, 0, 204, 0, 205, 206, 207, 209, 320,
	208, 402, 210, 211, 213, 212, 828, 0, 857, 885,
	214, 905, 215, 216, 0, 217, 0, 0, 218, 0,
	0, 219, 323, 403, 220, 404, 879, 221, 222, 223,
	224, 0, 880, 225, 326, 226, 0, 227, 228, 229,
	906, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 0, 243, 405, 244, 245,
	834, 246, 0, 250, 251, 252, 253, 0, 329, 254,
	255, 873, 256, 247, 248, 257, 406, 258, 907, 331,
	259, 0, 265, 260, 261, 249, 262, 264, 908, 263,
	881, 0, 266, 0, 267, 268, 269, 270, 271, 0,
	334, 909, 910, 0, 0, 272, 882, 883, 855, 273,
	274, 275, 276, 0, 0, 277, 278, 279, 280, 874,
	281, 0, 339, 282, 283, 284, 340, 911, 0, 0,
	285, 0, 0, 0, 0, 286, 287, 288, 289, 829,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	825, 826, 860, 849, 850, 847, 848, 839, 0, 835,
	1451, 0, 0, 0, 838, 0, 0, 0, 0, 153,
	154, 0, 155, 0, 0, 0, 0, 876, 842, 0,
	0, 0, 156, 157, 158, 291, 891, 293, 892, 159,
	893, 894, 0, 160, 297, 298, 161, 845, 875, 895,
	896, 301, 0, 162, 887, 0, 868, 0, 163, 164,
	165, 0, 166, 0, 167, 168, 169, 0, 394, 170,
	171, 0, 869, 871, 0, 870, 872, 172, 173, 346,
	174, 897, 175, 898, 899, 0, 176, 0, 177, 0,
	0, 0, 890, 179, 0, 180, 0, 0, 0, 833,
	181, 182, 183, 877, 878, 856, 0, 0, 184, 185,
	900, 0, 186, 0, 187, 0, 0, 395, 0, 188,
	888, 0, 311, 0, 189, 190, 191, 192, 884, 886,
	397, 0, 196, 0, 193, 0, 396, 194, 901, 195,
	902, 903, 904, 0, 867, 0, 398, 197, 399, 198,
	199, 0, 201, 200, 0, 889, 400, 202, 401, 0,
	203, 0, 0, 204, 0, 205, 206, 207, 209, 320,
	208, 402, 210, 211, 213, 212, 828, 0, 857, 885,
	214, 905, 215, 216, 0, 217, 0, 0, 218, 0,
	0, 219, 323, 403, 220, 404, 879, 221, 222, 223,
	224, 0, 880, 225, 326, 226, 0, 227, 228, 229,
	906, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 0, 243, 405, 244, 245,
	834, 246, 0, 250, 251, 252, 253, 0, 329, 254,
	255, 873, 256, 247, 248, 257, 406, 258, 907, 331,
	259, 0, 265, 260, 261, 249, 262, 264, 908, 263,
	881, 0, 266, 0, 267, 268, 269, 270, 271, 0,
	334, 909, 910, 0, 0, 272, 882, 883, 855, 273,
	274, 275, 276, 0, 0, 277, 278, 279, 280, 874,
	281, 0, 339, 282, 283, 284, 340, 911, 0, 0,
	285, 0, 0, 0, 0, 286, 287, 288, 289, 829,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	825, 826, 823, 860, 849, 850, 847, 848, 839, 835,
	0, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	153, 154, 1103, 155, 0, 0, 0, 0, 876, 842,
	0, 0, 0, 156, 157, 158, 291, 891, 293, 892,
	159, 893, 894, 0, 160, 297, 298, 161, 845, 875,
	895, 896, 301, 0, 162, 887, 0, 868, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 171, 0, 869, 871, 0, 870, 872, 172, 173,
	346, 174, 897, 175, 898, 899, 0, 176, 0, 177,
	0, 0, 0, 890, 179, 0, 180, 0, 0, 0,
	833, 181, 182, 183, 877, 878, 856, 0, 0, 184,
	185, 900, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 888, 0, 311, 0, 189, 190, 191, 192, 884,
	886, 397, 0, 196, 0, 193, 0, 396, 194, 901,
	195, 902, 903, 904, 0, 867, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 889, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 828, 0, 857,
	885, 214, 905, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 879, 221, 222,
	223, 224, 0, 880, 225, 326, 226, 0, 227, 228,
	229, 906, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 834, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 873, 256, 247, 248, 257, 406, 258, 907,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 908,
	263, 881, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 909, 910, 0, 0, 272, 882, 883, 855,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	874, 281, 0, 339, 282, 283, 284, 340, 911, 0,
	0, 285, 0, 0, 0, 0, 286, 287, 288, 289,
	829, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 860, 849, 850, 847, 848, 839, 0,
	835, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 876, 842,
	0, 0, 0, 156, 157, 158, 291, 891, 293, 892,
	159, 893, 894, 0, 160, 297, 298, 161, 845, 875,
	895, 896, 301, 0, 162, 887, 0, 868, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 2302, 0, 869, 871, 0, 870, 872, 172, 173,
	346, 174, 897, 175, 898, 899, 0, 176, 0, 177,
	0, 0, 0, 890, 179, 0, 180, 0, 0, 0,
	833, 181, 182, 183, 877, 878, 856, 0, 0, 184,
	185, 900, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 888, 0, 311, 0, 189, 190, 191, 192, 884,
	886, 397, 0, 196, 0, 193, 0, 396, 194, 901,
	195, 902, 903, 904, 0, 867, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 889, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 828, 0, 857,
	885, 214, 905, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 879, 221, 222,
	223, 224, 0, 880, 225, 326, 226, 0, 227, 228,
	229, 906, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 834, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 873, 256, 247, 248, 257, 406, 258, 907,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 908,
	263, 881, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 909, 910, 0, 0, 272, 882, 883, 855,
	273, 274, 2301, 276, 0, 0, 277, 278, 279, 280,
	874, 281, 0, 339, 282, 283, 284, 340, 911, 0,
	0, 285, 0, 0, 0, 0, 286, 287, 288, 289,
	829, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 860, 849, 850, 847, 848, 839, 0,
	835, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 876, 842,
	0, 0, 0, 156, 157, 158, 2300, 891, 293, 892,
	159, 893, 894, 0, 160, 297, 298, 161, 845, 875,
	895, 896, 301, 0, 162, 887, 0, 868, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 2302, 0, 869, 871, 0, 870, 872, 172, 173,
	346, 174, 897, 175, 898, 899, 0, 176, 0, 177,
	0, 0, 0, 890, 179, 0, 180, 0, 0, 0,
	833, 181, 182, 183, 877, 878, 856, 0, 0, 184,
	185, 900, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 888, 0, 311, 0, 189, 190, 191, 192, 884,
	886, 397, 0, 196, 0, 193, 0, 396, 194, 901,
	195, 902, 903, 904, 0, 867, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 889, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 828, 0, 857,
	885, 214, 905, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 879, 221, 222,
	223, 224, 0, 880, 225, 326, 226, 0, 227, 228,
	229, 906, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 834, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 873, 256, 247, 248, 257, 406, 258, 907,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 908,
	263, 881, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 909, 910, 0, 0, 272, 882, 883, 855,
	273, 274, 2301, 276, 0, 0, 277, 278, 279, 280,
	874, 281, 0, 339, 282, 283, 284, 340, 911, 0,
	0, 285, 0, 0, 0, 0, 286, 287, 288, 289,
	829, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 860, 849, 850, 847, 848, 839, 0,
	835, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 876, 842,
	0, 0, 0, 156, 157, 158, 291, 891, 293, 892,
	159, 893, 894, 0, 160, 297, 298, 161, 845, 875,
	895, 896, 301, 0, 162, 887, 0, 868, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 171, 0, 869, 871, 0, 870, 872, 172, 173,
	346, 174, 897, 175, 898, 899, 0, 176, 0, 177,
	0, 0, 0, 890, 179, 0, 180, 0, 0, 0,
	833, 181, 182, 183, 877, 878, 856, 0, 0, 184,
	185, 900, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 888, 0, 311, 0, 189, 190, 191, 192, 884,
	886, 397, 0, 196, 0, 193, 0, 396, 194, 901,
	195, 902, 903, 904, 0, 867, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 889, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 828, 0, 857,
	885, 214, 905, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 879, 221, 222,
	223, 224, 0, 880, 225, 326, 226, 0, 227, 228,
	229, 906, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 834, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 873, 256, 247, 248, 257, 406, 258, 907,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 908,
	263, 881, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 909, 910, 0, 0, 272, 882, 883, 855,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	874, 281, 0, 339, 282, 283, 284, 340, 911, 0,
	0, 285, 0, 0, 0, 0, 286, 287, 288, 289,
	829, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 860, 849, 850, 847, 848, 839, 0,
	835, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 876, 842,
	0, 0, 0, 156, 157, 158, 291, 891, 293, 892,
	159, 893, 894, 0, 160, 297, 298, 161, 845, 875,
	895, 896, 301, 0, 162, 887, 0, 868, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 171, 0, 869, 871, 0, 870, 872, 172, 173,
	346, 174, 897, 175, 898, 899, 0, 176, 0, 177,
	0, 0, 0, 890, 179, 0, 180, 0, 0, 0,
	833, 181, 182, 183, 877, 878, 856, 0, 0, 184,
	185, 900, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 888, 0, 311, 0, 189, 190, 191, 192, 884,
	886, 397, 0, 196, 0, 193, 0, 396, 194, 901,
	195, 902, 903, 904, 0, 867, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 889, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 0, 0, 857,
	885, 214, 905, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 879, 221, 222,
	223, 224, 0, 880, 225, 326, 226, 0, 227, 228,
	229, 906, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 1504, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 873, 256, 247, 248, 257, 406, 258, 907,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 908,
	263, 881, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 909, 910, 0, 0, 272, 882, 883, 855,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	874, 281, 0, 339, 282, 283, 284, 340, 911, 0,
	0, 285, 0, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 1500, 1501, 860, 849, 850, 847, 848, 839, 0,
	1503, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 876, 842,
	0, 0, 0, 156, 157, 158, 291, 891, 293, 892,
	159, 893, 894, 0, 160, 297, 298, 161, 0, 875,
	895, 896, 301, 0, 162, 887, 0, 868, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 171, 0, 869, 871, 0, 870, 872, 172, 173,
	346, 174, 897, 175, 898, 899, 0, 176, 0, 177,
	0, 0, 0, 890, 179, 0, 180, 0, 0, 0,
	306, 181, 182, 183, 877, 878, 856, 0, 0, 184,
	185, 900, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 888, 0, 311, 0, 189, 190, 191, 192, 884,
	886, 397, 0, 196, 0, 193, 0, 396, 194, 901,
	195, 902, 903, 904, 0, 867, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 889, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 0, 0, 857,
	885, 214, 905, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 879, 221, 222,
	223, 224, 0, 880, 225, 326, 226, 0, 227, 228,
	229, 906, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 1504, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 873, 256, 247, 248, 257, 406, 258, 907,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 908,
	263, 881, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 909, 910, 0, 0, 272, 882, 883, 855,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	874, 281, 0, 339, 282, 283, 284, 340, 911, 0,
	0, 285, 0, 0, 0, 0, 286, 287, 288, 289,
	0, 860, 849, 850, 847, 848, 839, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 154,
	1503, 155, 0, 0, 0, 838, 876, 842, 0, 0,
	0, 156, 157, 158, 0, 891, 293, 892, 159, 893,
	894, 0, 160, 297, 298, 161, 845, 875, 895, 896,
	301, 0, 162, 887, 0, 868, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 394, 170, 2302,
	0, 869, 871, 0, 870, 872, 172, 173, 346, 174,
	897, 175, 898, 899, 0, 176, 0, 177, 0, 0,
	0, 890, 179, 0, 180, 0, 0, 0, 833, 181,
	182, 183, 877, 878, 856, 0, 0, 184, 185, 900,
	0, 186, 0, 187, 0, 0, 395, 0, 188, 888,
	0, 311, 0, 189, 190, 191, 192, 884, 886, 0,
	0, 196, 0, 193, 0, 396, 194, 901, 195, 902,
	903, 904, 0, 867, 0, 0, 197, 399, 198, 199,
	0, 201, 200, 0, 889, 400, 202, 0, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	402, 210, 211, 213, 212, 828, 0, 857, 885, 214,
	905, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 403, 220, 404, 879, 221, 222, 223, 224,
	0, 880, 225, 326, 226, 0, 227, 228, 229, 906,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 405, 244, 245, 834,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	873, 256, 247, 248, 257, 0, 258, 907, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 908, 263, 881,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	909, 910, 0, 0, 272, 882, 883, 855, 273, 274,
	2301, 276, 0, 0, 277, 278, 279, 280, 874, 281,
	0, 339, 282, 283, 284, 340, 911, 0, 0, 285,
	0, 0, 0, 0, 286, 287, 288, 289, 0, 860,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	826, 0, 0, 0, 0, 0, 153, 154, 835, 155,
	0, 0, 0, 838, 876, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 875, 299, 300, 301, 0,
	162, 887, 0, 868, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 394, 170, 171, 0, 869,
	871, 0, 870, 872, 172, 173, 346, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	877, 878, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 395, 0, 188, 888, 0, 311,
	0, 189, 190, 191, 192, 884, 886, 397, 0, 196,
	0, 193, 0, 396, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 398, 197, 399, 198, 199, 0, 201,
	200, 0, 889, 400, 202, 401, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 402, 210,
	211, 213, 212, 0, 0, 0, 885, 214, 322, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	403, 220, 404, 879, 221, 222, 223, 224, 0, 880,
	225, 326, 226, 0, 227, 228, 229, 327, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 405, 244, 245, 328, 246, 0,
	250, 251, 252, 253, 0, 329, 254, 255, 873, 256,
	247, 248, 257, 406, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 881, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 882, 883, 0, 273, 274, 275, 276,
	0, 0, 277, 278, 279, 280, 874, 281, 0, 339,
	282, 283, 284, 340, 341, 0, 611, 285, 596, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 154, 0, 155, 0,
	0, 0, 0, 290, 0, 0, 1784, 0, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 0, 160,
	297, 298, 161, 0, 0, 299, 300, 301, 0, 162,
	302, 0, 393, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 394, 170, 171, 0, 0, 0,
	0, 0, 0, 172, 173, 346, 174, 303, 175, 304,
	305, 0, 176, 0, 177, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 306, 181, 182, 183, 307,
	308, 0, 0, 0, 184, 185, 309, 0, 186, 0,
	187, 0, 0, 395, 0, 188, 310, 0, 311, 0,
	189, 190, 191, 192, 312, 313, 397, 0, 196, 0,
	193, 0, 396, 194, 314, 195, 315, 316, 317, 0,
	318, 0, 398, 197, 399, 198, 199, 0, 201, 200,
	0, 319, 400, 202, 401, 0, 203, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 208, 402, 210, 211,
	213, 212, 0, 0, 0, 321, 214, 322, 215, 216,
	0, 217, 0, 0, 218, 0, 0, 219, 323, 403,
	220, 404, 324, 221, 222, 223, 224, 0, 325, 225,
	326, 226, 0, 227, 228, 229, 327, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 405, 244, 245, 328, 246, 0, 250,
	251, 252, 253, 111, 329, 254, 255, 0, 256, 247,
	248, 257, 406, 258, 330, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 0, 266, 115,
	267, 268, 269, 270, 271, 0, 334, 335, 336, 0,
	0, 272, 337, 338, 0, 273, 274, 275, 276, 0,
	0, 277, 278, 279, 280, 0, 281, 0, 339, 282,
	283, 284, 714, 341, 0, 710, 285, 596, 0, 0,
	108, 286, 287, 288, 289, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 290, 0, 0, 102, 0, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 0, 160, 297,
	298, 161, 0, 0, 299, 300, 301, 0, 162, 302,
	0, 393, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 394, 170, 171, 0, 0, 0, 0,
	0, 0, 172, 173, 346, 174, 303, 175, 304, 305,
	0, 176, 0, 177, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 306, 181, 182, 183, 307, 308,
	0, 0, 0, 184, 185, 309, 0, 186, 0, 187,
	0, 0, 395, 0, 188, 310, 0, 311, 0, 189,
	190, 191, 192, 312, 313, 397, 0, 196, 0, 193,
	0, 396, 194, 314, 195, 315, 316, 317, 0, 318,
	0, 398, 197, 399, 198, 199, 0, 201, 200, 0,
	319, 400, 202, 401, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 402, 210, 211, 213,
	212, 0, 0, 0, 321, 214, 322, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 403, 220,
	404, 324, 221, 222, 223, 224, 0, 325, 225, 326,
	226, 0, 227, 228, 229, 327, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 405, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 111, 329, 254, 255, 0, 256, 247, 248,
	257, 406, 258, 330, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 0, 266, 115, 267,
	268, 269, 270, 271, 0, 334, 335, 336, 0, 0,
	272, 337, 338, 0, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 0, 281, 0, 339, 282, 283,
	284, 714, 341, 0, 0, 285, 0, 0, 0, 108,
	286, 287, 288, 289, 0, 109, 0, 0, 596, 593,
	0, 594, 589, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 153, 154, 0, 155, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 0, 160,
	297, 298, 161, 0, 0, 299, 300, 301, 0, 162,
	302, 0, 393, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 394, 170, 171, 0, 0, 0,
	0, 0, 0, 172, 173, 346, 174, 303, 175, 304,
	305, 1070, 176, 0, 177, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 306, 181, 182, 183, 307,
	308, 586, 0, 0, 184, 185, 309, 0, 186, 0,
	187, 0, 0, 395, 0, 188, 310, 0, 311, 0,
	189, 190, 191, 192, 312, 313, 397, 0, 196, 0,
	193, 0, 396, 194, 314, 195, 315, 316, 317, 0,
	318, 0, 398, 197, 399, 198, 199, 0, 201, 200,
	0, 319, 400, 202, 401, 0, 203, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 208, 402, 210, 211,
	213, 212, 0, 0, 0, 321, 214, 322, 215, 216,
	0, 217, 587, 0, 218, 0, 0, 219, 323, 403,
	220, 404, 324, 221, 222, 223, 224, 0, 325, 225,
	326, 226, 0, 227, 228, 229, 327, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 405, 244, 245, 328, 246, 0, 250,
	251, 252, 253, 0, 329, 254, 255, 0, 256, 247,
	248, 257, 406, 258, 330, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 0, 266, 0,
	267, 268, 269, 270, 271, 0, 334, 335, 336, 0,
	0, 272, 337, 338, 585, 273, 274, 275, 276, 0,
	0, 277, 278, 279, 280, 0, 281, 0, 339, 282,
	283, 284, 340, 341, 596, 593, 285, 594, 589, 584,
	0, 286, 287, 288, 289, 0, 0, 0, 0, 0,
	0, 153, 154, 0, 155, 0, 595, 590, 0, 290,
	0, 0, 0, 0, 156, 157, 158, 291, 292, 293,
	294, 159, 295, 296, 0, 160, 297, 298, 161, 0,
	0, 299, 300, 301, 0, 162, 302, 0, 393, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	394, 170, 171, 0, 0, 0, 0, 0, 0, 172,
	173, 346, 174, 303, 175, 304, 305, 1067, 176, 0,
	177, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 306, 181, 182, 183, 307, 308, 586, 0, 0,
	184, 185, 309, 0, 186, 0, 187, 0, 0, 395,
	0, 188, 310, 0, 311, 0, 189, 190, 191, 192,
	312, 313, 397, 0, 196, 0, 193, 0, 396, 194,
	314, 195, 315, 316, 317, 0, 318, 0, 398, 197,
	399, 198, 199, 0, 201, 200, 0, 319, 400, 202,
	401, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 402, 210, 211, 213, 212, 0, 0,
	0, 321, 214, 322, 215, 216, 0, 217, 587, 0,
	218, 0, 0, 219, 323, 403, 220, 404, 324, 221,
	222, 223, 224, 0, 325, 225, 326, 226, 0, 227,
	228, 229, 327, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 405,
	244, 245, 328, 246, 0, 250, 251, 252, 253, 0,
	329, 254, 255, 0, 256, 247, 248, 257, 406, 258,
	330, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	332, 263, 333, 0, 266, 0, 267, 268, 269, 270,
	271, 0, 334, 335, 336, 0, 0, 272, 337, 338,
	585, 273, 274, 275, 276, 0, 0, 277, 278, 279,
	280, 0, 281, 0, 339, 282, 283, 284, 340, 341,
	596, 593, 285, 594, 589, 584, 0, 286, 287, 288,
	289, 0, 0, 0, 0, 0, 0, 153, 154, 0,
	155, 0, 595, 590, 0, 290, 0, 0, 0, 0,
	156, 157, 158, 291, 292, 293, 294, 159, 295, 296,
	0, 160, 297, 298, 161, 0, 0, 299, 300, 301,
	0, 162, 302, 0, 393, 0, 163, 164, 165, 0,
	166, 0, 167, 168, 169, 0, 394, 170, 171, 0,
	0, 0, 0, 0, 0, 172, 173, 346, 174, 303,
	175, 304, 305, 747, 176, 0, 177, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 306, 181, 182,
	183, 307, 308, 586, 0, 0, 184, 185, 309, 0,
	186, 0, 187, 0, 0, 395, 0, 188, 310, 0,
	311, 0, 189, 190, 191, 192, 312, 313, 397, 0,
	196, 0, 193, 0, 396, 194, 314, 195, 315, 316,
	317, 0, 318, 0, 398, 197, 399, 198, 199, 0,
	201, 200, 0, 319, 400, 202, 401, 0, 203, 0,
	0, 204, 0, 205, 206, 207, 209, 320, 208, 402,
	210, 211, 213, 212, 0, 0, 0, 321, 214, 322,
	215, 216, 0, 217, 587, 0, 218, 0, 0, 219,
	323, 403, 220, 404, 324, 221, 222, 223, 224, 0,
	325, 225, 326, 226, 0, 227, 228, 229, 327, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 0, 243, 405, 244, 245, 328, 246,
	0, 250, 251, 252, 253, 0, 329, 254, 255, 0,
	256, 247, 248, 257, 406, 258, 330, 331, 259, 0,
	265, 260, 261, 249, 262, 264, 332, 263, 333, 0,
	266, 0, 267, 268, 269, 270, 271, 0, 334, 335,
	336, 0, 0, 272, 337, 338, 585, 273, 274, 275,
	276, 0, 0, 277, 278, 279, 280, 0, 281, 0,
	339, 282, 283, 284, 340, 341, 596, 593, 285, 594,
	589, 584, 0, 286, 287, 288, 289, 0, 0, 0,
	0, 0, 0, 153, 154, 0, 155, 0, 595, 590,
	0, 290, 0, 0, 0, 0, 156, 157, 158, 291,
	292, 293, 294, 159, 295, 296, 0, 160, 297, 298,
	161, 0, 0, 299, 300, 301, 0, 162, 302, 0,
	393, 0, 163, 164, 165, 0, 166, 0, 167, 168,
	169, 0, 394, 170, 171, 0, 0, 0, 0, 0,
	0, 172, 173, 346, 174, 303, 175, 304, 305, 0,
	176, 0, 177, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 306, 181, 182, 183, 307, 308, 586,
	0, 0, 184, 185, 309, 0, 186, 0, 187, 0,
	0, 395, 0, 188, 310, 0, 311, 0, 189, 190,
	191, 192, 312, 313, 397, 0, 196, 0, 193, 0,
	396, 194, 314, 195, 315, 316, 317, 0, 318, 0,
	398, 197, 399, 198, 199, 0, 201, 200, 0, 319,
	400, 202, 401, 0, 203, 0, 0, 204, 0, 205,
	206, 207, 209, 320, 208, 402, 210, 211, 213, 212,
	0, 0, 0, 321, 214, 322, 215, 216, 0, 217,
	587, 0, 218, 0, 0, 219, 323, 403, 220, 404,
	324, 221, 222, 223, 224, 0, 325, 225, 326, 226,
	0, 227, 228, 229, 327, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 0,
	243, 405, 244, 245, 328, 246, 0, 250, 251, 252,
	253, 0, 329, 254, 255, 0, 256, 247, 248, 257,
	406, 258, 330, 331, 259, 0, 265, 260, 261, 249,
	262, 264, 332, 263, 333, 0, 266, 0, 267, 268,
	269, 270, 271, 0, 334, 335, 336, 0, 0, 272,
	337, 338, 585, 273, 274, 275, 276, 0, 0, 277,
	278, 279, 280, 0, 281, 0, 339, 282, 283, 284,
	340, 341, 0, 0, 285, 0, 0, 0, 0, 286,
	287, 288, 289, 611, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 590, 0, 0, 0, 0,
	0, 0, 153, 154, 0, 155, 0, 0, 0, 0,
	290, 0, 0, 0, 0, 156, 157, 158, 291, 292,
	293, 294, 159, 295, 296, 0, 160, 297, 298, 161,
	0, 0, 299, 300, 301, 0, 162, 302, 0, 0,
	0, 163, 164, 165, 0, 166, 0, 167, 168, 169,
	0, 0, 170, 171, 0, 0, 0, 0, 0, 0,
	172, 173, 346, 174, 303, 175, 304, 305, 0, 176,
	0, 177, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 306, 181, 182, 183, 307, 308, 0, 0,
	0, 184, 185, 309, 0, 186, 0, 187, 0, 0,
	0, 0, 188, 310, 0, 311, 0, 189, 190, 191,
	192, 312, 313, 0, 0, 196, 0, 193, 0, 0,
	194, 314, 195, 315, 316, 317, 0, 318, 0, 0,
	197, 0, 198, 199, 0, 201, 200, 0, 319, 0,
	202, 0, 0, 203, 0, 0, 204, 0, 205, 206,
	207, 209, 320, 208, 0, 210, 211, 213, 212, 0,
	0, 0, 321, 214, 322, 215, 216, 0, 217, 0,
	646, 218, 0, 0, 219, 323, 0, 220, 0, 324,
	221, 222, 223, 224, 0, 325, 225, 326, 226, 0,
	227, 228, 229, 327, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 0, 243,
	0, 244, 245, 328, 246, 0, 250, 251, 252, 253,
	111, 329, 254, 255, 0, 256, 247, 248, 257, 0,
	258, 330, 331, 259, 0, 265, 260, 261, 249, 262,
	264, 332, 263, 333, 0, 266, 115, 267, 268, 269,
	270, 271, 0, 334, 335, 336, 0, 0, 272, 337,
	338, 0, 273, 274, 275, 276, 0, 0, 277, 278,
	279, 280, 0, 281, 0, 339, 282, 283, 284, 714,
	341, 0, 0, 285, 150, 0, 0, 108, 286, 287,
	288, 289, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 153, 154, 0, 155, 0, 0, 0, 0, 290,
	1375, 0, 1660, 0, 156, 157, 158, 291, 292, 293,
	294, 159, 295, 296, 0, 160, 297, 298, 161, 0,
	0, 299, 300, 301, 0, 162, 302, 0, 0, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	0, 170, 171, 0, 0, 0, 0, 0, 0, 172,
	173, 346, 174, 303, 175, 304, 305, 0, 176, 0,
	177, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 306, 181, 182, 183, 307, 308, 0, 0, 0,
	184, 185, 309, 0, 186, 0, 187, 0, 0, 0,
	0, 188, 310, 0, 311, 0, 189, 190, 191, 192,
	312, 313, 0, 0, 196, 0, 193, 0, 0, 194,
	314, 195, 315, 316, 317, 0, 318, 0, 0, 197,
	0, 198, 199, 0, 201, 200, 0, 319, 0, 202,
	0, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 0, 210, 211, 213, 212, 0, 0,
	0, 321, 214, 322, 215, 216, 0, 217, 0, 646,
	218, 0, 0, 219, 323, 0, 220, 0, 324, 221,
	222, 223, 224, 0, 325, 225, 326, 226, 0, 227,
	228, 229, 327, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 0,
	244, 245, 328, 246, 0, 250, 251, 252, 253, 111,
	329, 254, 255, 0, 256, 247, 248, 257, 0, 258,
	330, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	332, 263, 333, 0, 266, 115, 267, 268, 269, 270,
	271, 0, 334, 335, 336, 0, 0, 272, 337, 338,
	0, 273, 274, 275, 276, 0, 0, 277, 278, 279,
	280, 0, 281, 0, 339, 282, 283, 284, 714, 341,
	0, 611, 285, 150, 0, 0, 108, 286, 287, 288,
	289, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 290, 1375,
	0, 1660, 0, 156, 157, 158, 291, 292, 293, 294,
	159, 295, 296, 0, 160, 297, 298, 161, 0, 0,
	299, 300, 301, 0, 162, 302, 0, 0, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 0,
	170, 171, 0, 0, 0, 0, 0, 0, 172, 173,
	346, 174, 303, 175, 304, 305, 0, 176, 0, 177,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	306, 181, 182, 183, 307, 308, 0, 0, 0, 184,
	185, 309, 0, 186, 0, 187, 0, 0, 0, 0,
	188, 310, 0, 311, 0, 189, 190, 191, 192, 312,
	313, 0, 0, 196, 0, 193, 0, 0, 194, 314,
	195, 315, 316, 317, 0, 318, 0, 0, 197, 0,
	198, 199, 0, 201, 200, 0, 319, 0, 202, 0,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 0, 210, 211, 213, 212, 0, 0, 0,
	321, 214, 322, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 0, 220, 0, 324, 221, 222,
	223, 224, 0, 325, 225, 326, 226, 0, 227, 228,
	229, 327, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 0, 244,
	245, 328, 246, 0, 250, 251, 252, 253, 111, 329,
	254, 255, 0, 256, 247, 248, 257, 0, 258, 330,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 332,
	263, 333, 0, 266, 115, 267, 268, 269, 270, 271,
	0, 334, 335, 336, 0, 0, 272, 337, 338, 0,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	0, 281, 0, 339, 282, 283, 284, 714, 341, 0,
	1373, 285, 150, 0, 0, 108, 286, 287, 288, 289,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 153,
	154, 0, 155, 0, 0, 0, 0, 290, 0, 0,
	102, 0, 156, 157, 158, 291, 292, 293, 294, 159,
	295, 296, 0, 160, 297, 298, 161, 0, 0, 299,
	300, 301, 0, 162, 302, 0, 0, 0, 163, 164,
	165, 0, 166, 0, 167, 168, 169, 0, 0, 170,
	171, 0, 0, 0, 0, 0, 0, 172, 173, 346,
	174, 303, 175, 304, 305, 0, 176, 0, 177, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 306,
	181, 182, 183, 307, 308, 0, 0, 0, 184, 185,
	309, 0, 186, 0, 187, 0, 0, 0, 0, 188,
	310, 0, 311, 0, 189, 190, 191, 192, 312, 313,
	0, 0, 196, 0, 193, 0, 0, 194, 314, 195,
	315, 316, 317, 0, 318, 0, 0, 197, 0, 198,
	199, 0, 201, 200, 0, 319, 0, 202, 0, 0,
	203, 0, 0, 204, 0, 205, 206, 207, 209, 320,
	208, 0, 210, 211, 213, 212, 0, 0, 0, 321,
	214, 322, 215, 216, 0, 217, 0, 646, 218, 0,
	0, 219, 323, 0, 220, 0, 324, 221, 222, 223,
	224, 0, 325, 225, 326, 226, 0, 227, 228, 229,
	327, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 0, 243, 0, 244, 245,
	328, 246, 0, 250, 251, 252, 253, 0, 329, 254,
	255, 0, 256, 247, 248, 257, 0, 258, 330, 331,
	259, 0, 265, 260, 261, 249, 262, 264, 332, 263,
	333, 0, 266, 0, 267, 268, 269, 270, 271, 0,
	334, 335, 336, 0, 0, 272, 337, 338, 0, 273,
	274, 275, 276, 0, 0, 277, 278, 279, 280, 0,
	281, 0, 339, 282, 283, 284, 340, 341, 0, 0,
	285, 150, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 154,
	0, 155, 0, 0, 0, 0, 290, 1375, 0, 1380,
	0, 156, 157, 158, 291, 292, 293, 294, 159, 295,
	296, 0, 160, 297, 298, 161, 0, 0, 299, 300,
	301, 0, 162, 302, 0, 0, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 0, 170, 171,
	0, 0, 0, 0, 0, 0, 172, 173, 346, 174,
	303, 175, 304, 305, 0, 176, 0, 177, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 306, 181,
	182, 183, 307, 308, 0, 0, 0, 184, 185, 309,
	0, 186, 0, 187, 0, 0, 0, 0, 188, 310,
	0, 311, 0, 189, 190, 191, 192, 312, 313, 0,
	0, 196, 0, 193, 0, 0, 194, 314, 195, 315,
	316, 317, 0, 318, 0, 0, 197, 0, 198, 199,
	0, 201, 200, 0, 319, 0, 202, 0, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	0, 210, 211, 213, 212, 0, 0, 0, 321, 214,
	322, 215, 216, 0, 217, 0, 646, 218, 0, 0,
	219, 323, 0, 220, 0, 324, 221, 222, 223, 224,
	0, 325, 225, 326, 226, 0, 227, 228, 229, 327,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 0, 244, 245, 328,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	0, 256, 247, 248, 257, 0, 258, 330, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 332, 263, 333,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	335, 336, 0, 0, 272, 337, 338, 0, 273, 274,
	275, 276, 0, 0, 277, 278, 279, 280, 0, 281,
	0, 339, 282, 283, 284, 340, 341, 0, 0, 285,
	150, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 154, 0,
	155, 0, 0, 0, 0, 290, 1375, 0, 1380, 0,
	156, 157, 158, 291, 292, 293, 294, 159, 295, 296,
	0, 160, 297, 298, 161, 0, 0, 299, 300, 301,
	0, 162, 302, 0, 0, 0, 163, 164, 165, 0,
	166, 0, 167, 168, 169, 0, 0, 170, 171, 0,
	0, 0, 0, 0, 0, 172, 173, 346, 174, 303,
	175, 304, 305, 0, 176, 0, 177, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 306, 181, 182,
	183, 307, 308, 0, 0, 0, 184, 185, 309, 0,
	186, 0, 187, 0, 0, 0, 0, 188, 310, 0,
	311, 0, 189, 190, 191, 192, 312, 313, 0, 0,
	196, 0, 193, 0, 0, 194, 314, 195, 315, 316,
	317, 0, 318, 0, 0, 197, 0, 198, 199, 0,
	201, 200, 0, 319, 0, 202, 0, 0, 203, 0,
	0, 204, 0, 205, 206, 207, 209, 320, 208, 0,
	210, 211, 213, 212, 0, 0, 0, 321, 214, 322,
	215, 216, 0, 217, 0, 0, 218, 0, 0, 219,
	323, 0, 220, 0, 324, 221, 222, 223, 224, 0,
	325, 225, 326, 226, 0, 227, 228, 229, 327, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 0, 243, 0, 244, 245, 328, 246,
	0, 250, 251, 252, 253, 0, 329, 254, 255, 0,
	256, 247, 248, 257, 0, 258, 330, 331, 259, 0,
	265, 260, 261, 249, 262, 264, 332, 263, 333, 0,
	266, 0, 267, 268, 269, 270, 271, 0, 334, 335,
	336, 0, 0, 272, 337, 338, 0, 273, 274, 275,
	276, 0, 150, 277, 278, 279, 280, 0, 281, 0,
	339, 282, 283, 284, 340, 341, 0, 0, 285, 153,
	154, 0, 155, 286, 287, 288, 289, 290, 0, 0,
	0, 0, 156, 157, 158, 291, 292, 293, 294, 159,
	295, 296, 0, 160, 297, 298, 161, 0, 955, 299,
	300, 301, 0, 162, 302, 0, 0, 0, 163, 164,
	165, 0, 166, 0, 167, 168, 169, 0, 0, 170,
	171, 0, 0, 0, 0, 0, 0, 172, 173, 346,
	174, 303, 175, 304, 305, 0, 176, 0, 177, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 306,
	181, 182, 183, 307, 308, 0, 0, 0, 184, 185,
	309, 0, 186, 0, 187, 0, 0, 0, 0, 188,
	310, 0, 311, 0, 189, 190, 191, 192, 312, 313,
	0, 0, 196, 0, 193, 0, 0, 194, 314, 195,
	315, 316, 317, 0, 318, 0, 0, 197, 0, 198,
	199, 0, 201, 200, 0, 319, 0, 202, 0, 0,
	203, 0, 0, 204, 0, 205, 206, 207, 209, 320,
	208, 0, 210, 211, 213, 212, 0, 0, 0, 321,
	214, 322, 215, 216, 0, 217, 0, 0, 218, 0,
	0, 219, 323, 0, 220, 0, 324, 221, 222, 223,
	224, 0, 325, 225, 326, 226, 0, 227, 228, 229,
	327, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 0, 243, 0, 244, 245,
	328, 246, 0, 250, 251, 252, 253, 0, 329, 254,
	255, 0, 256, 247, 248, 257, 0, 258, 330, 331,
	259, 0, 265, 260, 261, 249, 262, 264, 332, 263,
	333, 0, 266, 0, 267, 268, 269, 270, 271, 0,
	334, 335, 336, 0, 0, 272, 337, 338, 0, 273,
	274, 275, 276, 0, 150, 277, 278, 279, 280, 0,
	281, 0, 339, 282, 283, 284, 340, 341, 0, 0,
	285, 153, 154, 0, 155, 286, 287, 288, 289, 290,
	0, 0, 0, 0, 156, 157, 158, 291, 292, 293,
	294, 159, 295, 296, 0, 160, 297, 298, 161, 1305,
	0, 299, 300, 301, 0, 162, 302, 0, 0, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	0, 170, 171, 0, 0, 0, 0, 0, 0, 172,
	173, 346, 174, 303, 175, 304, 305, 0, 176, 0,
	177, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 306, 181, 182, 183, 307, 308, 0, 0, 0,
	184, 185, 309, 0, 186, 0, 187, 0, 0, 0,
	0, 188, 310, 0, 311, 0, 189, 190, 191, 192,
	312, 313, 0, 0, 196, 0, 193, 0, 0, 194,
	314, 195, 315, 316, 317, 0, 318, 0, 0, 197,
	0, 198, 199, 0, 201, 200, 0, 319, 0, 202,
	0, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 0, 210, 211, 213, 212, 0, 0,
	0, 321, 214, 322, 215, 216, 0, 217, 0, 0,
	218, 0, 0, 219, 323, 0, 220, 0, 324, 221,
	222, 223, 224, 0, 325, 225, 326, 226, 0, 227,
	228, 229, 327, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 0,
	244, 245, 328, 246, 0, 250, 251, 252, 253, 0,
	329, 254, 255, 0, 256, 247, 248, 257, 0, 258,
	330, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	332, 263, 333, 0, 266, 0, 267, 268, 269, 270,
	271, 0, 334, 335, 336, 0, 0, 272, 337, 338,
	0, 273, 274, 275, 276, 0, 150, 277, 278, 279,
	280, 0, 281, 0, 339, 282, 283, 284, 340, 341,
	0, 0, 285, 153, 154, 0, 155, 286, 287, 288,
	289, 290, 0, 0, 0, 0, 156, 157, 158, 291,
	292, 293, 294, 159, 295, 296, 0, 160, 297, 298,
	161, 1911, 0, 299, 300, 301, 0, 162, 302, 0,
	0, 0, 163, 164, 165, 0, 166, 0, 167, 168,
	169, 0, 0, 170, 171, 0, 0, 0, 0, 0,
	0, 172, 173, 346, 174, 303, 175, 304, 305, 0,
	176, 0, 177, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 306, 181, 182, 183, 307, 308, 0,
	0, 0, 184, 185, 309, 0, 186, 0, 187, 0,
	0, 0, 0, 188, 310, 0, 311, 0, 189, 190,
	191, 192, 312, 313, 0, 0, 196, 0, 193, 0,
	0, 194, 314, 195, 315, 316, 317, 0, 318, 0,
	0, 197, 0, 198, 199, 0, 201, 200, 0, 319,
	0, 202, 0, 0, 203, 0, 0, 204, 0, 205,
	206, 207, 209, 320, 208, 0, 210, 211, 213, 212,
	0, 0, 0, 321, 214, 322, 215, 216, 0, 217,
	0, 0, 218, 0, 0, 219, 323, 0, 220, 0,
	324, 221, 222, 223, 224, 0, 325, 225, 326, 226,
	0, 227, 228, 229, 327, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 0,
	243, 0, 244, 245, 328, 246, 0, 250, 251, 252,
	253, 0, 329, 254, 255, 0, 256, 247, 248, 257,
	0, 258, 330, 331, 259, 0, 265, 260, 261, 249,
	262, 264, 332, 263, 333, 0, 266, 0, 267, 268,
	269, 270, 271, 0, 334, 335, 336, 0, 0, 272,
	337, 338, 0, 273, 274, 275, 276, 0, 0, 277,
	278, 279, 280, 0, 281, 0, 339, 282, 283, 284,
	340, 341, 0, 0, 285, 0, 0, 0, 0, 286,
	287, 288, 289, 0, 860, 849, 850, 847, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 154, 926, 155, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 156, 157, 158, 291, 891, 293,
	892, 159, 893, 894, 0, 160, 297, 298, 161, 0,
	0, 895, 896, 301, 0, 162, 302, 0, 393, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	394, 170, 171, 0, 0, 0, 0, 0, 0, 172,
	173, 346, 174, 897, 175, 898, 899, 0, 176, 0,
	177, 0, 0, 0, 890, 179, 0, 180, 0, 0,
	0, 306, 181, 182, 183, 307, 308, 856, 0, 0,
	184, 185, 900, 0, 186, 0, 187, 0, 0, 395,
	0, 188, 310, 0, 311, 0, 189, 190, 191, 192,
	312, 313, 397, 0, 196, 0, 193, 0, 396, 194,
	901, 195, 902, 903, 904, 0, 867, 0, 398, 197,
	399, 198, 199, 0, 201, 200, 0, 319, 400, 202,
	401, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 402, 210, 211, 213, 212, 0, 0,
	857, 321, 214, 905, 215, 216, 0, 217, 0, 0,
	218, 0, 0, 219, 323, 403, 220, 404, 324, 221,
	222, 223, 224, 0, 325, 225, 326, 226, 0, 227,
	228, 229, 906, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 405,
	244, 245, 328, 246, 0, 250, 251, 252, 253, 0,
	329, 254, 255, 0, 256, 247, 248, 257, 406, 258,
	907, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	908, 263, 333, 0, 266, 0, 267, 268, 269, 270,
	271, 0, 334, 909, 910, 0, 0, 272, 337, 338,
	855, 273, 274, 275, 276, 0, 0, 277, 278, 279,
	280, 0, 281, 0, 339, 282, 283, 284, 340, 911,
	0, 0, 285, 0, 0, 0, 0, 286, 287, 288,
	289, 752, 0, 596, 593, 0, 0, 0, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 290, 0,
	0, 0, 0, 156, 157, 158, 291, 292, 293, 294,
	159, 295, 296, 0, 160, 297, 298, 161, 0, 0,
	299, 300, 301, 0, 162, 302, 0, 393, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 171, 0, 0, 0, 0, 0, 0, 172, 173,
	346, 174, 303, 175, 304, 305, 0, 176, 0, 177,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	306, 181, 182, 183, 307, 308, 0, 0, 0, 184,
	185, 309, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 310, 0, 311, 0, 189, 190, 191, 192, 312,
	313, 397, 0, 196, 0, 193, 0, 396, 194, 314,
	195, 315, 316, 317, 0, 318, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 319, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 0, 0, 0,
	321, 214, 322, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 324, 221, 222,
	223, 224, 0, 325, 225, 326, 226, 0, 227, 228,
	229, 327, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 328, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 0, 256, 247, 248, 257, 406, 258, 330,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 332,
	263, 333, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 335, 336, 0, 0, 272, 337, 338, 0,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	0, 281, 0, 339, 282, 283, 284, 340, 341, 0,
	342, 285, 150, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	154, 0, 155, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 156, 157, 158, 291, 292, 293, 294, 159,
	295, 296, 0, 160, 297, 298, 161, 0, 0, 299,
	300, 301, 0, 162, 302, 0, 0, 0, 163, 164,
	165, 0, 166, 0, 167, 168, 169, 0, 0, 170,
	171, 0, 0, 0, 0, 0, 0, 172, 173, 146,
	174, 303, 175, 304, 305, 0, 176, 0, 177, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 306,
	181, 182, 183, 307, 308, 0, 0, 0, 184, 185,
	309, 0, 186, 0, 187, 0, 0, 0, 0, 188,
	310, 0, 311, 0, 189, 190, 191, 192, 312, 313,
	0, 0, 196, 0, 193, 0, 0, 194, 314, 195,
	315, 316, 317, 0, 318, 0, 0, 197, 0, 198,
	199, 0, 201, 200, 0, 319, 0, 202, 0, 0,
	203, 0, 0, 204, 0, 205, 206, 207, 209, 320,
	208, 0, 210, 211, 213, 212, 0, 0, 0, 321,
	214, 322, 215, 216, 0, 217, 0, 0, 218, 0,
	0, 219, 323, 0, 220, 0, 324, 221, 222, 223,
	224, 0, 325, 225, 326, 226, 0, 227, 228, 229,
	327, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 0, 243, 0, 244, 245,
	328, 246, 0, 250, 251, 252, 253, 0, 329, 254,
	255, 0, 256, 247, 248, 257, 0, 258, 330, 331,
	259, 0, 265, 260, 261, 249, 262, 264, 332, 263,
	333, 0, 266, 145, 267, 268, 269, 270, 271, 0,
	334, 335, 336, 0, 0, 272, 337, 338, 0, 273,
	274, 275, 276, 0, 0, 277, 278, 279, 280, 0,
	281, 0, 339, 282, 283, 284, 340, 341, 0, 142,
	285, 150, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 154,
	0, 155, 149, 0, 0, 0, 290, 0, 0, 0,
	0, 156, 157, 158, 291, 292, 293, 294, 159, 295,
	296, 0, 160, 297, 298, 161, 0, 0, 299, 300,
	301, 0, 162, 302, 0, 0, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 0, 170, 171,
	0, 0, 0, 0, 0, 0, 172, 173, 146, 174,
	303, 175, 304, 305, 0, 176, 0, 177, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 306, 181,
	182, 183, 307, 308, 0, 0, 0, 184, 185, 309,
	0, 186, 0, 187, 0, 0, 0, 0, 188, 310,
	0, 311, 0, 189, 190, 191, 192, 312, 313, 0,
	0, 196, 0, 193, 0, 0, 194, 314, 195, 315,
	316, 317, 0, 318, 0, 0, 197, 0, 198, 199,
	0, 201, 200, 0, 319, 0, 202, 0, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	0, 210, 211, 213, 212, 0, 0, 0, 321, 214,
	322, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 0, 220, 0, 324, 221, 222, 223, 224,
	0, 325, 225, 326, 226, 0, 227, 228, 229, 327,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 0, 244, 245, 328,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	0, 256, 247, 248, 257, 0, 258, 330, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 332, 263, 333,
	0, 266, 145, 267, 268, 269, 270, 271, 0, 334,
	335, 336, 0, 0, 272, 337, 338, 0, 273, 274,
	275, 276, 0, 0, 277, 278, 279, 280, 0, 281,
	0, 339, 282, 283, 284, 340, 341, 596, 593, 285,
	0, 0, 755, 0, 286, 287, 288, 289, 0, 0,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 149, 290, 0, 0, 0, 0, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 0, 160, 297,
	298, 161, 0, 0, 299, 300, 301, 0, 162, 302,
	0, 393, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 394, 170, 171, 0, 0, 0, 0,
	0, 0, 172, 173, 346, 174, 303, 175, 304, 305,
	0, 176, 0, 177, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 306, 181, 182, 183, 307, 308,
	0, 0, 0, 184, 185, 309, 0, 186, 0, 187,
	0, 0, 395, 0, 188, 310, 0, 311, 0, 189,
	190, 191, 192, 312, 313, 397, 0, 196, 0, 193,
	0, 396, 194, 314, 195, 315, 316, 317, 0, 318,
	0, 398, 197, 399, 198, 199, 0, 201, 200, 0,
	319, 400, 202, 401, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 402, 210, 211, 213,
	212, 0, 0, 0, 321, 214, 322, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 403, 220,
	404, 324, 221, 222, 223, 224, 0, 325, 225, 326,
	226, 0, 227, 228, 229, 327, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 405, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 0, 256, 247, 248,
	257, 406, 258, 330, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 335, 336, 0, 0,
	272, 337, 338, 0, 273, 274, 275, 276, 0, 150,
	277, 278, 279, 280, 0, 281, 0, 339, 282, 283,
	284, 340, 341, 0, 0, 285, 153, 154, 0, 155,
	286, 287, 288, 289, 290, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 0, 299, 300, 301, 0,
	162, 302, 0, 0, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 0, 170, 171, 0, 0,
	0, 0, 0, 0, 172, 173, 146, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	307, 308, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 0, 0, 188, 310, 0, 311,
	0, 189, 190, 191, 192, 312, 313, 0, 0, 196,
	0, 193, 0, 0, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 0, 197, 0, 198, 199, 0, 201,
	200, 0, 319, 0, 202, 0, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 0, 210,
	211, 213, 212, 0, 0, 0, 321, 214, 322, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	0, 220, 0, 324, 221, 222, 223, 224, 0, 325,
	225, 326, 226, 0, 227, 228, 229, 327, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 0, 244, 245, 328, 246, 0,
	250, 251, 252, 253, 0, 329, 254, 255, 0, 256,
	247, 248, 257, 0, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 333, 0, 266,
	145, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 337, 338, 0, 273, 274, 275, 276,
	0, 0, 277, 278, 279, 280, 0, 281, 0, 339,
	282, 283, 284, 340, 341, 596, 593, 285, 0, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 153, 154, 0, 155, 0, 0, 0, 149,
	290, 0, 0, 0, 0, 156, 157, 158, 291, 292,
	293, 294, 159, 295, 296, 0, 160, 297, 298, 161,
	0, 0, 299, 300, 301, 0, 162, 302, 0, 393,
	0, 163, 164, 165, 0, 166, 0, 167, 168, 169,
	0, 394, 170, 171, 0, 0, 0, 0, 0, 0,
	172, 173, 346, 174, 303, 175, 304, 305, 0, 176,
	0, 177, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 306, 181, 182, 183, 307, 308, 0, 0,
	0, 184, 185, 309, 0, 186, 0, 187, 0, 0,
	395, 0, 188, 310, 0, 311, 0, 189, 190, 191,
	192, 312, 313, 397, 0, 196, 0, 193, 0, 396,
	194, 314, 195, 315, 316, 317, 0, 318, 0, 398,
	197, 399, 198, 199, 0, 201, 200, 0, 319, 400,
	202, 401, 0, 203, 0, 0, 204, 0, 205, 206,
	207, 209, 320, 208, 402, 210, 211, 213, 212, 0,
	0, 0, 321, 214, 322, 215, 216, 0, 217, 0,
	0, 218, 0, 0, 219, 323, 403, 220, 404, 324,
	221, 222, 223, 224, 0, 325, 225, 326, 226, 0,
	227, 228, 229, 327, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 0, 243,
	405, 244, 245, 328, 246, 0, 250, 251, 252, 253,
	0, 329, 254, 255, 0, 256, 247, 248, 257, 406,
	258, 330, 331, 259, 0, 265, 260, 261, 249, 262,
	264, 332, 263, 333, 0, 266, 0, 267, 268, 269,
	270, 271, 0, 334, 335, 336, 0, 0, 272, 337,
	338, 0, 273, 274, 275, 276, 0, 150, 277, 278,
	279, 280, 0, 281, 0, 339, 282, 283, 284, 340,
	341, 0, 0, 285, 153, 154, 0, 155, 286, 287,
	288, 289, 290, 0, 0, 0, 0, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 0, 160, 297,
	298, 161, 0, 0, 299, 300, 301, 0, 162, 302,
	0, 0, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 0, 170, 171, 0, 0, 0, 0,
	0, 0, 172, 173, 346, 174, 303, 175, 304, 305,
	0, 176, 0, 177, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 306, 181, 182, 183, 307, 308,
	0, 0, 0, 184, 185, 309, 0, 186, 0, 187,
	0, 0, 0, 0, 188, 310, 0, 311, 0, 189,
	190, 191, 192, 312, 313, 0, 0, 196, 0, 193,
	0, 0, 194, 314, 195, 315, 316, 317, 0, 318,
	0, 0, 197, 0, 198, 199, 0, 201, 200, 0,
	319, 0, 202, 0, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 0, 210, 211, 213,
	212, 0, 0, 0, 321, 214, 322, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 0, 220,
	0, 324, 221, 222, 223, 224, 0, 325, 225, 326,
	226, 0, 227, 228, 229, 327, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 0, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 0, 256, 247, 248,
	257, 0, 258, 330, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 335, 336, 0, 0,
	272, 337, 338, 0, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 0, 281, 0, 339, 282, 283,
	284, 340, 341, 596, 0, 285, 0, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 149, 290, 0,
	0, 0, 0, 156, 157, 158, 291, 292, 293, 294,
	159, 295, 296, 0, 160, 297, 298, 161, 0, 0,
	299, 300, 301, 0, 162, 302, 0, 393, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 394,
	170, 171, 0, 0, 0, 0, 0, 0, 172, 173,
	346, 174, 303, 175, 304, 305, 0, 176, 0, 177,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	306, 181, 182, 183, 307, 308, 0, 0, 0, 184,
	185, 309, 0, 186, 0, 187, 0, 0, 395, 0,
	188, 310, 0, 311, 0, 189, 190, 191, 192, 312,
	313, 397, 0, 196, 0, 193, 0, 396, 194, 314,
	195, 315, 316, 317, 0, 318, 0, 398, 197, 399,
	198, 199, 0, 201, 200, 0, 319, 400, 202, 401,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 402, 210, 211, 213, 212, 0, 0, 0,
	321, 214, 322, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 403, 220, 404, 324, 221, 222,
	223, 224, 0, 325, 225, 326, 226, 0, 227, 228,
	229, 327, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 405, 244,
	245, 328, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 0, 256, 247, 248, 257, 406, 258, 330,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 332,
	263, 333, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 335, 336, 0, 0, 272, 337, 338, 0,
	273, 274, 275, 276, 0, 150, 277, 278, 279, 280,
	0, 281, 0, 339, 282, 283, 284, 340, 341, 0,
	0, 285, 153, 154, 0, 155, 286, 287, 288, 289,
	290, 0, 0, 0, 0, 156, 157, 158, 291, 292,
	293, 294, 159, 295, 296, 0, 160, 297, 298, 161,
	0, 0, 299, 300, 301, 1241, 162, 302, 0, 0,
	0, 163, 164, 165, 0, 166, 1239, 167, 168, 169,
	0, 0, 170, 171, 0, 0, 0, 0, 0, 0,
	172, 173, 346, 174, 303, 175, 304, 305, 0, 176,
	0, 177, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 306, 181, 182, 183, 307, 308, 0, 1282,
	0, 184, 185, 309, 0, 186, 0, 187, 1244, 0,
	0, 0, 188, 310, 0, 311, 0, 189, 190, 191,
	192, 312, 313, 0, 0, 196, 1280, 193, 0, 0,
	194, 314, 195, 315, 316, 317, 0, 318, 0, 0,
	197, 0, 198, 199, 0, 201, 200, 0, 319, 0,
	202, 0, 0, 203, 0, 0, 204, 0, 205, 206,
	207, 209, 320, 208, 0, 210, 211, 213, 212, 0,
	0, 0, 321, 214, 322, 215, 216, 0, 217, 0,
	0, 218, 0, 0, 219, 323, 0, 220, 0, 324,
	221, 222, 223, 224, 0, 325, 225, 326, 226, 1243,
	227, 228, 229, 327, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 0, 243,
	0, 244, 245, 328, 246, 0, 250, 251, 252, 253,
	0, 329, 254, 255, 0, 256, 247, 248, 257, 0,
	258, 330, 331, 259, 0, 265, 260, 261, 249, 262,
	264, 332, 263, 333, 0, 266, 0, 267, 268, 269,
	270, 271, 0, 334, 335, 336, 0, 0, 272, 337,
	338, 0, 273, 274, 275, 276, 0, 1281, 277, 278,
	279, 280, 0, 281, 0, 339, 282, 283, 284, 340,
	341, 150, 0, 285, 0, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 0, 0, 0, 0, 153, 154,
	0, 155, 0, 0, 0, 0, 290, 0, 0, 0,
	0, 156, 157, 158, 291, 292, 293, 294, 159, 295,
	296, 0, 160, 297, 298, 161, 0, 0, 299, 300,
	301, 1241, 162, 302, 0, 0, 1236, 163, 164, 165,
	0, 166, 1239, 167, 168, 169, 0, 0, 170, 171,
	0, 0, 0, 0, 0, 0, 172, 173, 346, 174,
	303, 175, 304, 305, 0, 176, 0, 177, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 306, 181,
	182, 183, 307, 308, 0, 0, 0, 184, 185, 309,
	0, 186, 0, 187, 1244, 0, 0, 0, 188, 310,
	0, 311, 0, 189, 190, 191, 192, 1235, 313, 0,
	0, 196, 0, 193, 0, 0, 194, 314, 195, 315,
	316, 317, 0, 318, 0, 0, 197, 0, 198, 199,
	0, 201, 200, 0, 319, 0, 202, 0, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	0, 210, 211, 213, 212, 0, 0, 0, 321, 214,
	322, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 0, 220, 0, 324, 221, 222, 223, 224,
	0, 325, 225, 326, 226, 1243, 227, 228, 229, 327,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 0, 244, 245, 328,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	0, 256, 247, 248, 257, 0, 258, 330, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 332, 263, 333,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	335, 336, 0, 0, 272, 337, 338, 0, 273, 274,
	275, 276, 0, 1242, 277, 278, 279, 280, 0, 281,
	0, 339, 282, 283, 284, 340, 341, 0, 693, 285,
	150, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 154, 0,
	155, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	156, 157, 158, 291, 292, 293, 294, 159, 295, 296,
	0, 160, 297, 298, 161, 0, 0, 299, 300, 301,
	0, 162, 302, 0, 0, 0, 163, 164, 165, 0,
	166, 0, 167, 168, 169, 0, 0, 170, 171, 0,
	0, 0, 0, 0, 0, 172, 173, 346, 174, 303,
	175, 304, 305, 0, 176, 0, 177, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 306, 181, 182,
	183, 307, 308, 0, 0, 0, 184, 185, 309, 0,
	186, 0, 187, 0, 0, 0, 0, 188, 310, 0,
	311, 0, 189, 190, 191, 192, 312, 313, 0, 0,
	196, 0, 193, 0, 0, 194, 314, 195, 315, 316,
	317, 0, 318, 0, 0, 197, 0, 198, 199, 0,
	201, 200, 0, 319, 0, 202, 0, 0, 203, 0,
	0, 204, 0, 205, 206, 207, 209, 320, 208, 0,
	210, 211, 213, 212, 0, 0, 0, 321, 214, 322,
	215, 216, 0, 217, 0, 646, 218, 0, 0, 219,
	323, 0, 220, 0, 324, 221, 222, 223, 224, 0,
	325, 225, 326, 226, 0, 227, 228, 229, 327, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 0, 243, 0, 244, 245, 328, 246,
	0, 250, 251, 252, 253, 0, 329, 254, 255, 0,
	256, 247, 248, 257, 0, 258, 330, 331, 259, 0,
	265, 260, 261, 249, 262, 264, 332, 263, 333, 0,
	266, 0, 267, 268, 269, 270, 271, 0, 334, 335,
	336, 0, 0, 272, 337, 338, 0, 273, 274, 275,
	276, 0, 0, 277, 278, 279, 280, 0, 281, 0,
	339, 282, 283, 284, 340, 341, 0, 652, 285, 150,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 0, 155,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 0, 299, 300, 301, 0,
	162, 302, 0, 0, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 0, 170, 171, 0, 0,
	0, 0, 0, 0, 172, 173, 346, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	307, 308, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 0, 0, 188, 310, 0, 311,
	0, 189, 190, 191, 192, 654, 313, 0, 0, 196,
	0, 193, 0, 0, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 0, 197, 0, 198, 199, 0, 201,
	200, 0, 319, 0, 202, 0, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 0, 210,
	211, 213, 212, 0, 0, 0, 321, 214, 322, 215,
	216, 0, 217, 0, 646, 218, 0, 0, 219, 323,
	0, 220, 0, 324, 221, 222, 223, 224, 0, 325,
	225, 326, 226, 0, 227, 228, 229, 327, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 0, 244, 245, 328, 246, 0,
	250, 251, 252, 253, 0, 329, 254, 255, 0, 256,
	247, 248, 257, 0, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 333, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 337, 338, 0, 273, 274, 275, 276,
	0, 0, 277, 278, 279, 280, 0, 281, 0, 339,
	282, 283, 284, 340, 341, 0, 648, 285, 150, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 154, 0, 155, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 0, 160,
	297, 298, 161, 0, 0, 299, 300, 301, 0, 162,
	302, 0, 0, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 0, 170, 171, 0, 0, 0,
	0, 0, 0, 172, 173, 346, 174, 303, 175, 304,
	305, 0, 176, 0, 177, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 306, 181, 182, 183, 307,
	308, 0, 0, 0, 184, 185, 309, 0, 186, 0,
	187, 0, 0, 0, 0, 188, 310, 0, 311, 0,
	189, 190, 191, 192, 650, 313, 0, 0, 196, 0,
	193, 0, 0, 194, 314, 195, 315, 316, 317, 0,
	318, 0, 0, 197, 0, 198, 199, 0, 201, 200,
	0, 319, 0, 202, 0, 0, 203, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 208, 0, 210, 211,
	213, 212, 0, 0, 0, 321, 214, 322, 215, 216,
	0, 217, 0, 646, 218, 0, 0, 219, 323, 0,
	220, 0, 324, 221, 222, 223, 224, 0, 325, 225,
	326, 226, 0, 227, 228, 229, 327, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 0, 244, 245, 328, 246, 0, 250,
	251, 252, 253, 0, 329, 254, 255, 0, 256, 247,
	248, 257, 0, 258, 330, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 0, 266, 0,
	267, 268, 269, 270, 271, 0, 334, 335, 336, 0,
	0, 272, 337, 338, 0, 273, 274, 275, 276, 0,
	0, 277, 278, 279, 280, 0, 281, 0, 339, 282,
	283, 284, 340, 341, 0, 643, 285, 150, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 290, 0, 0, 0, 0, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 0, 160, 297,
	298, 161, 0, 0, 299, 300, 301, 0, 162, 302,
	0, 0, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 0, 170, 171, 0, 0, 0, 0,
	0, 0, 172, 173, 346, 174, 303, 175, 304, 305,
	0, 176, 0, 177, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 306, 181, 182, 183, 307, 308,
	0, 0, 0, 184, 185, 309, 0, 186, 0, 187,
	0, 0, 0, 0, 188, 310, 0, 311, 0, 189,
	190, 191, 192, 312, 313, 0, 0, 196, 0, 193,
	0, 0, 194, 314, 195, 315, 316, 317, 0, 318,
	0, 0, 197, 0, 198, 199, 0, 201, 200, 0,
	319, 0, 202, 0, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 0, 210, 211, 213,
	212, 0, 0, 0, 321, 214, 322, 215, 216, 0,
	217, 0, 646, 218, 0, 0, 219, 323, 0, 220,
	0, 324, 221, 222, 223, 224, 0, 325, 225, 326,
	226, 0, 227, 228, 229, 327, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 0, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 0, 256, 247, 248,
	257, 0, 258, 330, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 335, 336, 0, 0,
	272, 337, 338, 0, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 0, 281, 0, 339, 282, 283,
	284, 340, 341, 0, 492, 285, 150, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 154, 495, 155, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 156, 157, 158, 291,
	292, 293, 294, 159, 295, 296, 0, 160, 297, 298,
	161, 0, 0, 299, 300, 301, 0, 162, 302, 0,
	0, 0, 163, 164, 165, 0, 166, 0, 167, 168,
	169, 0, 0, 170, 171, 0, 0, 0, 0, 0,
	0, 172, 173, 346, 174, 303, 175, 304, 305, 0,
	176, 0, 177, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 306, 181, 182, 183, 307, 308, 0,
	0, 0, 184, 185, 309, 0, 186, 0, 187, 0,
	0, 0, 0, 188, 310, 0, 311, 0, 189, 190,
	191, 192, 312, 313, 0, 0, 196, 0, 193, 0,
	0, 194, 314, 195, 315, 316, 317, 0, 318, 0,
	0, 197, 0, 198, 199, 0, 201, 200, 0, 319,
	0, 202, 0, 0, 203, 0, 0, 204, 0, 205,
	206, 207, 209, 320, 208, 0, 210, 211, 213, 212,
	0, 0, 0, 321, 214, 322, 215, 216, 0, 217,
	0, 0, 218, 0, 0, 219, 323, 0, 220, 0,
	324, 221, 222, 223, 224, 0, 325, 225, 326, 494,
	0, 227, 228, 229, 327, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 0,
	243, 0, 244, 245, 328, 246, 0, 250, 251, 252,
	253, 0, 329, 254, 255, 0, 256, 247, 248, 257,
	0, 258, 330, 331, 259, 0, 265, 260, 261, 249,
	262, 264, 332, 263, 333, 0, 266, 0, 267, 268,
	269, 270, 271, 0, 334, 335, 336, 0, 0, 272,
	337, 338, 0, 273, 274, 275, 276, 0, 150, 277,
	278, 279, 280, 0, 281, 0, 339, 282, 283, 284,
	340, 341, 0, 0, 285, 153, 154, 0, 155, 286,
	287, 288, 289, 290, 0, 1878, 0, 0, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 0, 160,
	297, 298, 161, 0, 0, 299, 300, 301, 0, 162,
	302, 0, 0, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 0, 170, 171, 0, 0, 0,
	0, 0, 0, 172, 173, 346, 174, 303, 175, 304,
	305, 0, 176, 0, 177, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 306, 181, 182, 183, 307,
	308, 0, 0, 0, 184, 185, 309, 0, 186, 0,
	187, 0, 0, 0, 0, 188, 310, 0, 311, 0,
	189, 190, 191, 192, 312, 313, 0, 0, 196, 0,
	193, 0, 0, 194, 314, 195, 315, 316, 317, 0,
	318, 0, 0, 197, 0, 198, 199, 0, 201, 200,
	0, 319, 0, 202, 0, 0, 203, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 208, 0, 210, 211,
	213, 212, 0, 0, 0, 321, 214, 322, 215, 216,
	0, 217, 0, 0, 218, 0, 0, 219, 323, 0,
	220, 0, 324, 221, 222, 223, 224, 0, 325, 225,
	326, 226, 0, 227, 228, 229, 327, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 0, 244, 245, 328, 246, 0, 250,
	251, 252, 253, 0, 329, 254, 255, 0, 256, 247,
	248, 257, 0, 258, 330, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 0, 266, 0,
	267, 268, 269, 270, 271, 0, 334, 335, 336, 0,
	0, 272, 337, 338, 0, 273, 274, 275, 276, 0,
	150, 277, 278, 279, 280, 0, 281, 0, 339, 282,
	283, 284, 340, 341, 0, 0, 285, 153, 154, 0,
	155, 286, 287, 288, 289, 290, 0, 0, 0, 0,
	156, 157, 158, 291, 292, 293, 294, 159, 295, 296,
	0, 160, 297, 298, 161, 0, 0, 299, 300, 301,
	0, 162, 302, 0, 0, 0, 163, 164, 165, 0,
	166, 0, 167, 168, 169, 0, 0, 170, 171, 0,
	0, 0, 0, 0, 0, 172, 173, 346, 174, 303,
	175, 304, 305, 0, 176, 0, 177, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 306, 181, 182,
	183, 307, 308, 0, 0, 0, 184, 185, 309, 0,
	186, 0, 187, 0, 0, 0, 0, 188, 310, 0,
	311, 0, 189, 190, 191, 192, 312, 313, 0, 0,
	196, 0, 193, 0, 0, 194, 314, 195, 315, 316,
	317, 0, 318, 0, 0, 197, 0, 198, 199, 0,
	201, 200, 0, 319, 0, 202, 0, 0, 203, 0,
	0, 204, 0, 205, 206, 207, 209, 320, 208, 0,
	210, 211, 213, 212, 0, 0, 0, 321, 214, 322,
	215, 216, 0, 217, 0, 646, 218, 0, 0, 219,
	323, 0, 220, 0, 324, 221, 222, 223, 224, 0,
	325, 225, 326, 226, 0, 227, 228, 229, 327, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 0, 243, 0, 244, 245, 328, 246,
	0, 250, 251, 252, 253, 0, 329, 254, 255, 0,
	256, 247, 248, 257, 0, 258, 330, 331, 259, 0,
	265, 260, 261, 249, 262, 264, 332, 263, 333, 0,
	266, 0, 267, 268, 269, 270, 271, 0, 334, 335,
	336, 0, 0, 272, 337, 338, 0, 273, 274, 275,
	276, 0, 0, 277, 278, 279, 280, 0, 281, 0,
	339, 282, 283, 284, 340, 341, 0, 1091, 285, 150,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 0, 155,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 0, 299, 300, 301, 0,
	162, 302, 0, 0, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 0, 170, 171, 0, 0,
	0, 0, 0, 0, 172, 173, 346, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	307, 308, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 0, 0, 188, 310, 0, 311,
	0, 189, 190, 191, 192, 312, 313, 0, 0, 196,
	0, 193, 0, 0, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 0, 197, 0, 198, 199, 0, 201,
	200, 0, 319, 0, 202, 0, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 0, 210,
	211, 213, 212, 0, 0, 0, 321, 214, 322, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	0, 220, 0, 324, 221, 222, 223, 224, 0, 325,
	225, 326, 226, 0, 227, 228, 229, 327, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 0, 244, 245, 328, 246, 0,
	250, 251, 252, 253, 0, 329, 254, 255, 0, 256,
	247, 248, 257, 0, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 333, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 337, 338, 0, 273, 274, 275, 276,
	0, 0, 277, 278, 279, 280, 0, 281, 0, 339,
	282, 283, 284, 340, 341, 0, 1089, 285, 150, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 154, 0, 155, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 0, 160,
	297, 298, 161, 0, 0, 299, 300, 301, 0, 162,
	302, 0, 0, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 0, 170, 171, 0, 0, 0,
	0, 0, 0, 172, 173, 346, 174, 303, 175, 304,
	305, 0, 176, 0, 177, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 306, 181, 182, 183, 307,
	308, 0, 0, 0, 184, 185, 309, 0, 186, 0,
	187, 0, 0, 0, 0, 188, 310, 0, 311, 0,
	189, 190, 191, 192, 312, 313, 0, 0, 196, 0,
	193, 0, 0, 194, 314, 195, 315, 316, 317, 0,
	318, 0, 0, 197, 0, 198, 199, 0, 201, 200,
	0, 319, 0, 202, 0, 0, 203, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 208, 0, 210, 211,
	213, 212, 0, 0, 0, 321, 214, 322, 215, 216,
	0, 217, 0, 0, 218, 0, 0, 219, 323, 0,
	220, 0, 324, 221, 222, 223, 224, 0, 325, 225,
	326, 226, 0, 227, 228, 229, 327, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 0, 244, 245, 328, 246, 0, 250,
	251, 252, 253, 0, 329, 254, 255, 0, 256, 247,
	248, 257, 0, 258, 330, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 0, 266, 0,
	267, 268, 269, 270, 271, 0, 334, 335, 336, 0,
	0, 272, 337, 338, 0, 273, 274, 275, 276, 0,
	150, 277, 278, 279, 280, 0, 281, 0, 339, 282,
	283, 284, 340, 341, 0, 0, 285, 153, 154, 1075,
	155, 286, 287, 288, 289, 290, 0, 0, 0, 0,
	156, 157, 158, 291, 292, 293, 294, 159, 295, 296,
	0, 160, 297, 298, 161, 0, 0, 299, 300, 301,
	0, 162, 302, 0, 0, 0, 163, 164, 165, 0,
	166, 0, 167, 168, 169, 0, 0, 170, 171, 0,
	0, 0, 0, 0, 0, 172, 173, 346, 174, 303,
	175, 304, 305, 0, 176, 0, 177, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 306, 181, 182,
	183, 307, 308, 0, 0, 0, 184, 185, 309, 0,
	186, 0, 187, 0, 0, 0, 0, 188, 310, 0,
	311, 0, 189, 190, 191, 192, 312, 313, 0, 0,
	196, 0, 193, 0, 0, 194, 314, 195, 315, 316,
	317, 0, 318, 0, 0, 197, 0, 198, 199, 0,
	201, 200, 0, 319, 0, 202, 0, 0, 203, 0,
	0, 204, 0, 205, 206, 207, 209, 320, 208, 0,
	210, 211, 213, 212, 0, 0, 0, 321, 214, 322,
	215, 216, 0, 217, 0, 0, 218, 0, 0, 219,
	323, 0, 220, 0, 324, 221, 222, 223, 224, 0,
	325, 225, 326, 226, 0, 227, 228, 229, 327, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 0, 243, 0, 244, 245, 328, 246,
	0, 250, 251, 252, 253, 0, 329, 254, 255, 0,
	256, 247, 248, 257, 0, 258, 330, 331, 259, 0,
	265, 260, 261, 249, 262, 264, 332, 263, 333, 0,
	266, 0, 267, 268, 269, 270, 271, 0, 334, 335,
	336, 0, 0, 272, 337, 338, 0, 273, 274, 275,
	276, 0, 0, 277, 278, 279, 280, 0, 281, 0,
	339, 282, 283, 284, 340, 341, 0, 967, 285, 150,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 0, 155,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 0, 299, 300, 301, 0,
	162, 302, 0, 0, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 0, 170, 171, 0, 0,
	0, 0, 0, 0, 172, 173, 346, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	307, 308, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 0, 0, 188, 310, 0, 311,
	0, 189, 190, 191, 192, 969, 313, 0, 0, 196,
	0, 193, 0, 0, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 0, 197, 0, 198, 199, 0, 201,
	200, 0, 319, 0, 202, 0, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 0, 210,
	211, 213, 212, 0, 0, 0, 321, 214, 322, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	0, 220, 0, 324, 221, 222, 223, 224, 0, 325,
	225, 326, 226, 0, 227, 228, 229, 327, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 0, 244, 245, 328, 246, 0,
	250, 251, 252, 253, 0, 329, 254, 255, 0, 256,
	247, 248, 257, 0, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 333, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 337, 338, 0, 273, 274, 275, 276,
	0, 0, 277, 278, 279, 280, 0, 281, 0, 339,
	282, 283, 284, 340, 341, 0, 521, 285, 150, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 154, 0, 155, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 0, 160,
	297, 298, 161, 0, 0, 299, 300, 733, 0, 162,
	302, 0, 0, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 0, 170, 171, 0, 0, 0,
	0, 0, 0, 172, 173, 346, 174, 303, 175, 304,
	305, 0, 176, 0, 177, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 306, 181, 182, 183, 307,
	308, 0, 0, 0, 184, 185, 309, 0, 186, 0,
	187, 0, 0, 0, 0, 188, 310, 0, 311, 0,
	189, 190, 191, 192, 312, 313, 0, 0, 196, 0,
	193, 0, 0, 194, 314, 195, 315, 316, 317, 0,
	318, 0, 0, 197, 0, 198, 199, 0, 201, 200,
	0, 319, 0, 202, 0, 0, 203, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 527, 0, 210, 211,
	213, 212, 0, 0, 0, 321, 214, 322, 215, 216,
	0, 217, 0, 0, 218, 0, 0, 219, 323, 0,
	220, 0, 324, 221, 222, 223, 224, 0, 325, 225,
	326, 226, 0, 227, 228, 229, 327, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 0, 244, 245, 328, 246, 0, 250,
	251, 252, 253, 0, 329, 254, 255, 0, 256, 247,
	248, 257, 0, 258, 330, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 0, 266, 0,
	267, 268, 269, 270, 271, 0, 523, 335, 336, 0,
	0, 734, 337, 338, 0, 273, 274, 275, 276, 0,
	150, 277, 278, 279, 280, 0, 281, 0, 339, 282,
	283, 284, 340, 341, 0, 0, 285, 153, 154, 724,
	155, 286, 287, 288, 289, 290, 0, 0, 0, 0,
	156, 157, 158, 291, 292, 293, 294, 159, 295, 296,
	0, 160, 297, 298, 161, 0, 0, 299, 300, 301,
	0, 162, 302, 0, 0, 0, 163, 164, 165, 0,
	166, 0, 167, 168, 169, 0, 0, 170, 171, 0,
	0, 0, 0, 0, 0, 172, 173, 346, 174, 303,
	175, 304, 305, 0, 176, 0, 177, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 306, 181, 182,
	183, 307, 308, 0, 0, 0, 184, 185, 309, 0,
	186, 0, 187, 0, 0, 0, 0, 188, 310, 0,
	311, 0, 189, 190, 191, 192, 312, 313, 0, 0,
	196, 0, 193, 0, 0, 194, 314, 195, 315, 316,
	317, 0, 318, 0, 0, 197, 0, 198, 199, 0,
	201, 200, 0, 319, 0, 202, 0, 0, 203, 0,
	0, 204, 0, 205, 206, 207, 209, 320, 208, 0,
	210, 211, 213, 212, 0, 0, 0, 321, 214, 322,
	215, 216, 0, 217, 0, 0, 218, 0, 0, 219,
	323, 0, 220, 0, 324, 221, 222, 223, 224, 0,
	325, 225, 326, 226, 0, 227, 228, 229, 327, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 0, 243, 0, 244, 245, 328, 246,
	0, 250, 251, 252, 253, 0, 329, 254, 255, 0,
	256, 247, 248, 257, 0, 258, 330, 331, 259, 0,
	265, 260, 261, 249, 262, 264, 332, 263, 333, 0,
	266, 0, 267, 268, 269, 270, 271, 0, 334, 335,
	336, 0, 0, 272, 337, 338, 0, 273, 274, 275,
	276, 0, 0, 277, 278, 279, 280, 0, 281, 0,
	339, 282, 283, 284, 340, 341, 0, 709, 285, 150,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 0, 155,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 0, 299, 300, 301, 0,
	162, 302, 0, 0, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 0, 170, 171, 0, 0,
	0, 0, 0, 0, 172, 173, 346, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	307, 308, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 0, 0, 188, 310, 0, 311,
	0, 189, 190, 191, 192, 708, 313, 0, 0, 196,
	0, 193, 0, 0, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 0, 197, 0, 198, 199, 0, 201,
	200, 0, 319, 0, 202, 0, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 0, 210,
	211, 213, 212, 0, 0, 0, 321, 214, 322, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	0, 220, 0, 324, 221, 222, 223, 224, 0, 325,
	225, 326, 226, 0, 227, 228, 229, 327, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 0, 244, 245, 328, 246, 0,
	250, 251, 252, 253, 0, 329, 254, 255, 0, 256,
	247, 248, 257, 0, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 333, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 337, 338, 0, 273, 274, 275, 276,
	0, 0, 277, 278, 279, 280, 0, 281, 0, 339,
	282, 283, 284, 340, 341, 0, 705, 285, 150, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 154, 0, 155, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 0, 160,
	297, 298, 161, 0, 0, 299, 300, 301, 0, 162,
	302, 0, 0, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 0, 170, 171, 0, 0, 0,
	0, 0, 0, 172, 173, 346, 174, 303, 175, 304,
	305, 0, 176, 0, 177, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 306, 181, 182, 183, 307,
	308, 0, 0, 0, 184, 185, 309, 0, 186, 0,
	187, 0, 0, 0, 0, 188, 310, 0, 311, 0,
	189, 190, 191, 192, 704, 313, 0, 0, 196, 0,
	193, 0, 0, 194, 314, 195, 315, 316, 317, 0,
	318, 0, 0, 197, 0, 198, 199, 0, 201, 200,
	0, 319, 0, 202, 0, 0, 203, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 208, 0, 210, 211,
	213, 212, 0, 0, 0, 321, 214, 322, 215, 216,
	0, 217, 0, 0, 218, 0, 0, 219, 323, 0,
	220, 0, 324, 221, 222, 223, 224, 0, 325, 225,
	326, 226, 0, 227, 228, 229, 327, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 0, 244, 245, 328, 246, 0, 250,
	251, 252, 253, 0, 329, 254, 255, 0, 256, 247,
	248, 257, 0, 258, 330, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 0, 266, 0,
	267, 268, 269, 270, 271, 0, 334, 335, 336, 0,
	0, 272, 337, 338, 0, 273, 274, 275, 276, 0,
	0, 277, 278, 279, 280, 0, 281, 0, 339, 282,
	283, 284, 340, 341, 0, 702, 285, 150, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 290, 0, 0, 0, 0, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 0, 160, 297,
	298, 161, 0, 0, 299, 300, 301, 0, 162, 302,
	0, 0, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 0, 170, 171, 0, 0, 0, 0,
	0, 0, 172, 173, 346, 174, 303, 175, 304, 305,
	0, 176, 0, 177, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 306, 181, 182, 183, 307, 308,
	0, 0, 0, 184, 185, 309, 0, 186, 0, 187,
	0, 0, 0, 0, 188, 310, 0, 311, 0, 189,
	190, 191, 192, 701, 313, 0, 0, 196, 0, 193,
	0, 0, 194, 314, 195, 315, 316, 317, 0, 318,
	0, 0, 197, 0, 198, 199, 0, 201, 200, 0,
	319, 0, 202, 0, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 0, 210, 211, 213,
	212, 0, 0, 0, 321, 214, 322, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 0, 220,
	0, 324, 221, 222, 223, 224, 0, 325, 225, 326,
	226, 0, 227, 228, 229, 327, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 0, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 0, 256, 247, 248,
	257, 0, 258, 330, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 335, 336, 0, 0,
	272, 337, 338, 0, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 0, 281, 0, 339, 282, 283,
	284, 340, 341, 0, 698, 285, 150, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 154, 0, 155, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 156, 157, 158, 291,
	292, 293, 294, 159, 295, 296, 0, 160, 297, 298,
	161, 0, 0, 299, 300, 301, 0, 162, 302, 0,
	0, 0, 163, 164, 165, 0, 166, 0, 167, 168,
	169, 0, 0, 170, 171, 0, 0, 0, 0, 0,
	0, 172, 173, 346, 174, 303, 175, 304, 305, 0,
	176, 0, 177, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 306, 181, 182, 183, 307, 308, 0,
	0, 0, 184, 185, 309, 0, 186, 0, 187, 0,
	0, 0, 0, 188, 310, 0, 311, 0, 189, 190,
	191, 192, 697, 313, 0, 0, 196, 0, 193, 0,
	0, 194, 314, 195, 315, 316, 317, 0, 318, 0,
	0, 197, 0, 198, 199, 0, 201, 200, 0, 319,
	0, 202, 0, 0, 203, 0, 0, 204, 0, 205,
	206, 207, 209, 320, 208, 0, 210, 211, 213, 212,
	0, 0, 0, 321, 214, 322, 215, 216, 0, 217,
	0, 0, 218, 0, 0, 219, 323, 0, 220, 0,
	324, 221, 222, 223, 224, 0, 325, 225, 326, 226,
	0, 227, 228, 229, 327, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 0,
	243, 0, 244, 245, 328, 246, 0, 250, 251, 252,
	253, 0, 329, 254, 255, 0, 256, 247, 248, 257,
	0, 258, 330, 331, 259, 0, 265, 260, 261, 249,
	262, 264, 332, 263, 333, 0, 266, 0, 267, 268,
	269, 270, 271, 0, 334, 335, 336, 0, 0, 272,
	337, 338, 0, 273, 274, 275, 276, 0, 0, 277,
	278, 279, 280, 0, 281, 0, 339, 282, 283, 284,
	340, 341, 0, 684, 285, 150, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 154, 0, 155, 0, 0, 0, 0,
	290, 0, 0, 0, 0, 156, 157, 158, 291, 292,
	293, 294, 159, 295, 296, 0, 160, 297, 298, 161,
	0, 0, 299, 300, 301, 0, 162, 302, 0, 0,
	0, 163, 164, 165, 0, 166, 0, 167, 168, 169,
	0, 0, 170, 171, 0, 0, 0, 0, 0, 0,
	172, 173, 346, 174, 303, 175, 304, 305, 0, 176,
	0, 177, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 306, 181, 182, 183, 307, 308, 0, 0,
	0, 184, 185, 309, 0, 186, 0, 187, 0, 0,
	0, 0, 188, 310, 0, 311, 0, 189, 190, 191,
	192, 686, 313, 0, 0, 196, 0, 193, 0, 0,
	194, 314, 195, 315, 316, 317, 0, 318, 0, 0,
	197, 0, 198, 199, 0, 201, 200, 0, 319, 0,
	202, 0, 0, 203, 0, 0, 204, 0, 205, 206,
	207, 209, 320, 208, 0, 210, 211, 213, 212, 0,
	0, 0, 321, 214, 322, 215, 216, 0, 217, 0,
	0, 218, 0, 0, 219, 323, 0, 220, 0, 324,
	221, 222, 223, 224, 0, 325, 225, 326, 226, 0,
	227, 228, 229, 327, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 0, 243,
	0, 244, 245, 328, 246, 0, 250, 251, 252, 253,
	0, 329, 254, 255, 0, 256, 247, 248, 257, 0,
	258, 330, 331, 259, 0, 265, 260, 261, 249, 262,
	264, 332, 263, 333, 0, 266, 0, 267, 268, 269,
	270, 271, 0, 334, 335, 336, 0, 0, 272, 337,
	338, 0, 273, 274, 275, 276, 0, 0, 277, 278,
	279, 280, 0, 281, 0, 339, 282, 283, 284, 340,
	341, 0, 682, 285, 150, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 154, 0, 155, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 156, 157, 158, 291, 292, 293,
	294, 159, 295, 296, 0, 160, 297, 298, 161, 0,
	0, 299, 300, 301, 0, 162, 302, 0, 0, 0,
	163, 164, 165, 0, 166, 0, 167, 168, 169, 0,
	0, 170, 171, 0, 0, 0, 0, 0, 0, 172,
	173, 346, 174, 303, 175, 304, 305, 0, 176, 0,
	177, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 306, 181, 182, 183, 307, 308, 0, 0, 0,
	184, 185, 309, 0, 186, 0, 187, 0, 0, 0,
	0, 188, 310, 0, 311, 0, 189, 190, 191, 192,
	312, 313, 0, 0, 196, 0, 193, 0, 0, 194,
	314, 195, 315, 316, 317, 0, 318, 0, 0, 197,
	0, 198, 199, 0, 201, 200, 0, 319, 0, 202,
	0, 0, 203, 0, 0, 204, 0, 205, 206, 207,
	209, 320, 208, 0, 210, 211, 213, 212, 0, 0,
	0, 321, 214, 322, 215, 216, 0, 217, 0, 0,
	218, 0, 0, 219, 323, 0, 220, 0, 324, 221,
	222, 223, 224, 0, 325, 225, 326, 226, 0, 227,
	228, 229, 327, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 0, 243, 0,
	244, 245, 328, 246, 0, 250, 251, 252, 253, 0,
	329, 254, 255, 0, 256, 247, 248, 257, 0, 258,
	330, 331, 259, 0, 265, 260, 261, 249, 262, 264,
	332, 263, 333, 0, 266, 0, 267, 268, 269, 270,
	271, 0, 334, 335, 336, 0, 0, 272, 337, 338,
	0, 273, 274, 275, 276, 0, 0, 277, 278, 279,
	280, 0, 281, 0, 339, 282, 283, 284, 340, 341,
	0, 680, 285, 150, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 154, 0, 155, 0, 0, 0, 0, 290, 0,
	0, 0, 0, 156, 157, 158, 291, 292, 293, 294,
	159, 295, 296, 0, 160, 297, 298, 161, 0, 0,
	299, 300, 301, 0, 162, 302, 0, 0, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 0,
	170, 171, 0, 0, 0, 0, 0, 0, 172, 173,
	346, 174, 303, 175, 304, 305, 0, 176, 0, 177,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	306, 181, 182, 183, 307, 308, 0, 0, 0, 184,
	185, 309, 0, 186, 0, 187, 0, 0, 0, 0,
	188, 310, 0, 311, 0, 189, 190, 191, 192, 312,
	313, 0, 0, 196, 0, 193, 0, 0, 194, 314,
	195, 315, 316, 317, 0, 318, 0, 0, 197, 0,
	198, 199, 0, 201, 200, 0, 319, 0, 202, 0,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 0, 210, 211, 213, 212, 0, 0, 0,
	321, 214, 322, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 0, 220, 0, 324, 221, 222,
	223, 224, 0, 325, 225, 326, 226, 0, 227, 228,
	229, 327, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 0, 244,
	245, 328, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 0, 256, 247, 248, 257, 0, 258, 330,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 332,
	263, 333, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 335, 336, 0, 0, 272, 337, 338, 0,
	273, 274, 275, 276, 0, 0, 277, 278, 279, 280,
	0, 281, 0, 339, 282, 283, 284, 340, 341, 0,
	676, 285, 150, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	154, 0, 155, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 156, 157, 158, 291, 292, 293, 294, 159,
	295, 296, 0, 160, 297, 298, 161, 0, 0, 299,
	300, 301, 0, 162, 302, 0, 0, 0, 163, 164,
	165, 0, 166, 0, 167, 168, 169, 0, 0, 170,
	171, 0, 0, 0, 0, 0, 0, 172, 173, 346,
	174, 303, 175, 304, 305, 0, 176, 0, 177, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 306,
	181, 182, 183, 307, 308, 0, 0, 0, 184, 185,
	309, 0, 186, 0, 187, 0, 0, 0, 0, 188,
	310, 0, 311, 0, 189, 190, 191, 192, 678, 313,
	0, 0, 196, 0, 193, 0, 0, 194, 314, 195,
	315, 316, 317, 0, 318, 0, 0, 197, 0, 198,
	199, 0, 201, 200, 0, 319, 0, 202, 0, 0,
	203, 0, 0, 204, 0, 205, 206, 207, 209, 320,
	208, 0, 210, 211, 213, 212, 0, 0, 0, 321,
	214, 322, 215, 216, 0, 217, 0, 0, 218, 0,
	0, 219, 323, 0, 220, 0, 324, 221, 222, 223,
	224, 0, 325, 225, 326, 226, 0, 227, 228, 229,
	327, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 0, 243, 0, 244, 245,
	328, 246, 0, 250, 251, 252, 253, 0, 329, 254,
	255, 0, 256, 247, 248, 257, 0, 258, 330, 331,
	259, 0, 265, 260, 261, 249, 262, 264, 332, 263,
	333, 0, 266, 0, 267, 268, 269, 270, 271, 0,
	334, 335, 336, 0, 0, 272, 337, 338, 0, 273,
	274, 275, 276, 0, 0, 277, 278, 279, 280, 0,
	281, 0, 339, 282, 283, 284, 340, 341, 0, 657,
	285, 150, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 154,
	0, 155, 0, 0, 0, 0, 290, 0, 0, 0,
	0, 156, 157, 158, 291, 292, 293, 294, 159, 295,
	296, 0, 160, 297, 298, 161, 0, 0, 299, 300,
	301, 0, 162, 302, 0, 0, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 0, 170, 171,
	0, 0, 0, 0, 0, 0, 172, 173, 346, 174,
	303, 175, 304, 305, 0, 176, 0, 177, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 306, 181,
	182, 183, 307, 308, 0, 0, 0, 184, 185, 309,
	0, 186, 0, 187, 0, 0, 0, 0, 188, 310,
	0, 311, 0, 189, 190, 191, 192, 659, 313, 0,
	0, 196, 0, 193, 0, 0, 194, 314, 195, 315,
	316, 317, 0, 318, 0, 0, 197, 0, 198, 199,
	0, 201, 200, 0, 319, 0, 202, 0, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	0, 210, 211, 213, 212, 0, 0, 0, 321, 214,
	322, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 0, 220, 0, 324, 221, 222, 223, 224,
	0, 325, 225, 326, 226, 0, 227, 228, 229, 327,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 0, 244, 245, 328,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	0, 256, 247, 248, 257, 0, 258, 330, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 332, 263, 333,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	335, 336, 0, 0, 272, 337, 338, 0, 273, 274,
	275, 276, 0, 0, 277, 278, 279, 280, 0, 281,
	0, 339, 282, 283, 284, 340, 341, 0, 655, 285,
	150, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 154, 0,
	155, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	156, 157, 158, 291, 292, 293, 294, 159, 295, 296,
	0, 160, 297, 298, 161, 0, 0, 299, 300, 301,
	0, 162, 302, 0, 0, 0, 163, 164, 165, 0,
	166, 0, 167, 168, 169, 0, 0, 170, 171, 0,
	0, 0, 0, 0, 0, 172, 173, 346, 174, 303,
	175, 304, 305, 0, 176, 0, 177, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 306, 181, 182,
	183, 307, 308, 0, 0, 0, 184, 185, 309, 0,
	186, 0, 187, 0, 0, 0, 0, 188, 310, 0,
	311, 0, 189, 190, 191, 192, 312, 313, 0, 0,
	196, 0, 193, 0, 0, 194, 314, 195, 315, 316,
	317, 0, 318, 0, 0, 197, 0, 198, 199, 0,
	201, 200, 0, 319, 0, 202, 0, 0, 203, 0,
	0, 204, 0, 205, 206, 207, 209, 320, 208, 0,
	210, 211, 213, 212, 0, 0, 0, 321, 214, 322,
	215, 216, 0, 217, 0, 0, 218, 0, 0, 219,
	323, 0, 220, 0, 324, 221, 222, 223, 224, 0,
	325, 225, 326, 226, 0, 227, 228, 229, 327, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 0, 243, 0, 244, 245, 328, 246,
	0, 250, 251, 252, 253, 0, 329, 254, 255, 0,
	256, 247, 248, 257, 0, 258, 330, 331, 259, 0,
	265, 260, 261, 249, 262, 264, 332, 263, 333, 0,
	266, 0, 267, 268, 269, 270, 271, 0, 334, 335,
	336, 0, 0, 272, 337, 338, 0, 273, 274, 275,
	276, 0, 0, 277, 278, 279, 280, 0, 281, 0,
	339, 282, 283, 284, 340, 341, 0, 570, 285, 150,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 0, 155,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 0, 299, 300, 301, 0,
	162, 302, 0, 0, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 0, 170, 171, 0, 0,
	0, 0, 0, 0, 172, 173, 346, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	307, 308, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 0, 0, 188, 310, 0, 311,
	0, 189, 190, 191, 192, 312, 313, 0, 0, 196,
	0, 193, 0, 0, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 0, 197, 0, 198, 199, 0, 201,
	200, 0, 319, 0, 202, 0, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 0, 210,
	211, 213, 212, 0, 0, 0, 321, 214, 322, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	0, 220, 0, 324, 221, 222, 223, 224, 0, 325,
	225, 326, 226, 0, 227, 228, 229, 327, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 0, 244, 245, 328, 246, 0,
	572, 251, 252, 253, 0, 329, 254, 255, 0, 256,
	247, 248, 257, 0, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 333, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 337, 338, 0, 273, 274, 275, 276,
	0, 0, 277, 278, 279, 280, 0, 281, 0, 339,
	282, 283, 284, 340, 341, 0, 521, 285, 150, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 154, 0, 155, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 156, 157,
	158, 291, 292, 293, 294, 159, 295, 296, 0, 160,
	297, 298, 161, 0, 0, 299, 300, 301, 0, 516,
	302, 0, 0, 0, 163, 164, 165, 0, 166, 0,
	167, 168, 169, 0, 0, 170, 171, 0, 0, 0,
	0, 0, 0, 172, 173, 346, 174, 303, 175, 304,
	305, 0, 176, 0, 177, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 306, 181, 182, 183, 307,
	308, 0, 0, 0, 184, 185, 309, 0, 186, 0,
	187, 0, 0, 0, 0, 188, 310, 0, 311, 0,
	189, 190, 191, 192, 312, 313, 0, 0, 196, 0,
	193, 0, 0, 194, 314, 195, 315, 316, 317, 0,
	318, 0, 0, 197, 0, 198, 199, 0, 201, 200,
	0, 319, 0, 202, 0, 0, 515, 0, 0, 204,
	0, 205, 206, 207, 209, 320, 527, 0, 210, 211,
	213, 212, 0, 0, 0, 321, 214, 322, 215, 216,
	0, 217, 0, 0, 218, 0, 0, 219, 323, 0,
	220, 0, 324, 221, 222, 223, 224, 0, 325, 225,
	326, 226, 0, 227, 228, 229, 327, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 0, 243, 0, 244, 245, 517, 246, 0, 250,
	251, 252, 253, 0, 329, 254, 518, 0, 256, 247,
	248, 257, 0, 258, 330, 331, 259, 0, 265, 260,
	261, 249, 262, 264, 332, 263, 333, 0, 266, 0,
	267, 268, 269, 270, 271, 0, 523, 335, 336, 0,
	0, 520, 337, 338, 0, 273, 274, 275, 276, 0,
	0, 277, 278, 279, 280, 0, 281, 0, 339, 282,
	283, 284, 340, 341, 0, 510, 285, 150, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 154, 0, 155, 0, 0,
	0, 0, 290, 0, 0, 0, 0, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 0, 160, 297,
	298, 161, 0, 0, 299, 300, 301, 0, 162, 302,
	0, 0, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 0, 170, 171, 0, 0, 0, 0,
	0, 0, 172, 173, 346, 174, 303, 175, 304, 305,
	0, 176, 0, 177, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 306, 181, 182, 183, 307, 308,
	0, 0, 0, 184, 185, 309, 0, 186, 0, 187,
	0, 0, 0, 0, 188, 310, 0, 311, 0, 189,
	190, 191, 192, 312, 313, 0, 0, 196, 0, 193,
	0, 0, 194, 314, 195, 315, 316, 317, 0, 318,
	0, 0, 197, 0, 198, 199, 0, 201, 200, 0,
	319, 0, 202, 0, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 0, 210, 211, 213,
	212, 0, 0, 0, 321, 214, 322, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 0, 220,
	0, 324, 221, 222, 223, 224, 0, 325, 225, 326,
	226, 0, 227, 228, 229, 327, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 0, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 0, 256, 247, 248,
	257, 0, 258, 330, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 335, 336, 0, 0,
	272, 337, 338, 0, 273, 274, 275, 276, 0, 0,
	277, 278, 279, 280, 0, 281, 0, 339, 282, 283,
	284, 340, 341, 0, 490, 285, 150, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 154, 0, 155, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 156, 157, 158, 291,
	292, 293, 294, 159, 295, 296, 0, 160, 297, 298,
	161, 0, 0, 299, 300, 301, 0, 162, 302, 0,
	0, 0, 163, 164, 165, 0, 166, 0, 167, 168,
	169, 0, 0, 170, 171, 0, 0, 0, 0, 0,
	0, 172, 173, 346, 174, 303, 175, 304, 305, 0,
	176, 0, 177, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 306, 181, 182, 183, 307, 308, 0,
	0, 0, 184, 185, 309, 0, 186, 0, 187, 0,
	0, 0, 0, 188, 310, 0, 311, 0, 189, 190,
	191, 192, 312, 313, 0, 0, 196, 0, 193, 0,
	0, 194, 314, 195, 315, 316, 317, 0, 318, 0,
	0, 197, 0, 198, 199, 0, 201, 200, 0, 319,
	0, 202, 0, 0, 203, 0, 0, 204, 0, 205,
	206, 207, 209, 320, 208, 0, 210, 211, 213, 212,
	0, 0, 0, 321, 214, 322, 215, 216, 0, 217,
	0, 0, 218, 0, 0, 219, 323, 0, 220, 0,
	324, 221, 222, 223, 224, 0, 325, 225, 326, 226,
	0, 227, 228, 229, 327, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 0,
	243, 0, 244, 245, 328, 246, 0, 250, 251, 252,
	253, 0, 329, 254, 255, 0, 256, 247, 248, 257,
	0, 258, 330, 331, 259, 0, 265, 260, 261, 249,
	262, 264, 332, 263, 333, 0, 266, 0, 267, 268,
	269, 270, 271, 0, 334, 335, 336, 0, 0, 272,
	337, 338, 0, 273, 274, 275, 276, 0, 0, 277,
	278, 279, 280, 0, 281, 0, 339, 282, 283, 284,
	340, 341, 0, 488, 285, 150, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 154, 0, 155, 0, 0, 0, 0,
	290, 0, 0, 0, 0, 156, 157, 158, 291, 292,
	293, 294, 159, 295, 296, 0, 160, 297, 298, 161,
	0, 0, 299, 300, 301, 0, 162, 302, 0, 0,
	0, 163, 164, 165, 0, 166, 0, 167, 168, 169,
	0, 0, 170, 171, 0, 0, 0, 0, 0, 0,
	172, 173, 346, 174, 303, 175, 304, 305, 0, 176,
	0, 177, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 306, 181, 182, 183, 307, 308, 0, 0,
	0, 184, 185, 309, 0, 186, 0, 187, 0, 0,
	0, 0, 188, 310, 0, 311, 0, 189, 190, 191,
	192, 312, 313, 0, 0, 196, 0, 193, 0, 0,
	194, 314, 195, 315, 316, 317, 0, 318, 0, 0,
	197, 0, 198, 199, 0, 201, 200, 0, 319, 0,
	202, 0, 0, 203, 0, 0, 204, 0, 205, 206,
	207, 209, 320, 208, 0, 210, 211, 213, 212, 0,
	0, 0, 321, 214, 322, 215, 216, 0, 217, 0,
	0, 218, 0, 0, 219, 323, 0, 220, 0, 324,
	221, 222, 223, 224, 0, 325, 225, 326, 226, 0,
	227, 228, 229, 327, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 0, 243,
	0, 244, 245, 328, 246, 0, 250, 251, 252, 253,
	0, 329, 254, 255, 0, 256, 247, 248, 257, 0,
	258, 330, 331, 259, 0, 265, 260, 261, 249, 262,
	264, 332, 263, 333, 0, 266, 0, 267, 268, 269,
	270, 271, 0, 334, 335, 336, 0, 0, 272, 337,
	338, 0, 273, 274, 275, 276, 0, 150, 277, 278,
	279, 280, 0, 281, 0, 339, 282, 283, 284, 340,
	341, 0, 0, 285, 153, 154, 0, 155, 286, 287,
	288, 289, 290, 0, 0, 0, 0, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 0, 160, 297,
	298, 161, 0, 0, 299, 300, 301, 0, 162, 302,
	0, 0, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 0, 170, 171, 0, 0, 0, 0,
	0, 0, 172, 173, 346, 174, 303, 175, 304, 305,
	0, 176, 0, 177, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 306, 181, 182, 183, 307, 308,
	0, 0, 0, 184, 185, 309, 0, 186, 0, 187,
	0, 0, 0, 0, 188, 310, 0, 311, 0, 189,
	190, 191, 192, 312, 313, 0, 0, 196, 0, 193,
	0, 0, 194, 314, 195, 315, 316, 317, 0, 318,
	0, 0, 197, 0, 198, 199, 0, 201, 200, 0,
	319, 0, 202, 0, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 0, 210, 211, 213,
	212, 0, 0, 0, 321, 214, 322, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 0, 220,
	0, 324, 221, 222, 223, 224, 0, 325, 225, 326,
	226, 0, 227, 228, 229, 327, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 0, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 0, 256, 247, 248,
	257, 0, 258, 330, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 335, 336, 0, 0,
	272, 337, 338, 0, 273, 274, 275, 276, 0, 150,
	277, 278, 279, 280, 0, 281, 0, 339, 282, 283,
	284, 340, 341, 0, 0, 285, 153, 154, 0, 155,
	286, 287, 288, 289, 290, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 0, 299, 300, 301, 0,
	162, 302, 0, 0, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 0, 170, 171, 0, 0,
	0, 0, 0, 0, 172, 173, 346, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	307, 308, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 0, 0, 188, 310, 0, 311,
	0, 189, 190, 191, 192, 1553, 313, 0, 0, 196,
	0, 193, 0, 0, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 0, 197, 0, 198, 199, 0, 201,
	200, 0, 319, 0, 202, 0, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 0, 210,
	211, 213, 212, 0, 0, 0, 321, 214, 322, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	0, 220, 0, 324, 221, 222, 223, 224, 0, 325,
	225, 326, 226, 0, 227, 228, 229, 327, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 0, 244, 245, 328, 246, 0,
	250, 251, 252, 253, 0, 329, 254, 255, 0, 256,
	247, 248, 257, 0, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 333, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 337, 338, 0, 273, 274, 275, 276,
	0, 150, 277, 278, 279, 280, 0, 281, 0, 339,
	282, 283, 284, 340, 341, 0, 0, 285, 153, 154,
	0, 155, 286, 287, 288, 289, 290, 0, 0, 0,
	0, 156, 157, 158, 291, 292, 293, 294, 159, 295,
	296, 0, 160, 297, 298, 161, 0, 0, 299, 300,
	301, 0, 162, 302, 0, 0, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 0, 170, 171,
	0, 0, 0, 0, 0, 0, 172, 173, 346, 174,
	303, 175, 304, 305, 0, 176, 0, 177, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 306, 181,
	182, 183, 307, 308, 0, 0, 0, 184, 185, 309,
	0, 186, 0, 187, 0, 0, 0, 0, 188, 310,
	0, 311, 0, 189, 190, 191, 192, 1551, 313, 0,
	0, 196, 0, 193, 0, 0, 194, 314, 195, 315,
	316, 317, 0, 318, 0, 0, 197, 0, 198, 199,
	0, 201, 200, 0, 319, 0, 202, 0, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	0, 210, 211, 213, 212, 0, 0, 0, 321, 214,
	322, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 0, 220, 0, 324, 221, 222, 223, 224,
	0, 325, 225, 326, 226, 0, 227, 228, 229, 327,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 0, 244, 245, 328,
	246, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	0, 256, 247, 248, 257, 0, 258, 330, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 332, 263, 333,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	335, 336, 0, 0, 272, 337, 338, 0, 273, 274,
	275, 276, 0, 150, 277, 278, 279, 280, 0, 281,
	0, 339, 282, 283, 284, 340, 341, 0, 0, 285,
	153, 154, 0, 155, 286, 287, 288, 289, 290, 0,
	0, 0, 0, 156, 157, 158, 291, 292, 293, 294,
	159, 295, 296, 0, 160, 297, 298, 161, 0, 0,
	299, 300, 301, 0, 162, 302, 0, 0, 0, 163,
	164, 165, 0, 166, 0, 167, 168, 169, 0, 0,
	170, 171, 0, 0, 0, 0, 0, 0, 172, 173,
	346, 174, 303, 175, 304, 305, 0, 176, 0, 177,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	306, 181, 182, 183, 307, 308, 0, 0, 0, 184,
	185, 309, 0, 186, 0, 187, 0, 0, 0, 0,
	188, 310, 0, 311, 0, 189, 190, 191, 192, 1540,
	313, 0, 0, 196, 0, 193, 0, 0, 194, 314,
	195, 315, 316, 317, 0, 318, 0, 0, 197, 0,
	198, 199, 0, 201, 200, 0, 319, 0, 202, 0,
	0, 203, 0, 0, 204, 0, 205, 206, 207, 209,
	320, 208, 0, 210, 211, 213, 212, 0, 0, 0,
	321, 214, 322, 215, 216, 0, 217, 0, 0, 218,
	0, 0, 219, 323, 0, 220, 0, 324, 221, 222,
	223, 224, 0, 325, 225, 326, 226, 0, 227, 228,
	229, 327, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 0, 243, 0, 244,
	245, 328, 246, 0, 250, 251, 252, 253, 0, 329,
	254, 255, 0, 256, 247, 248, 257, 0, 258, 330,
	331, 259, 0, 265, 260, 261, 249, 262, 264, 332,
	263, 333, 0, 266, 0, 267, 268, 269, 270, 271,
	0, 334, 335, 336, 0, 0, 272, 337, 338, 0,
	273, 274, 275, 276, 0, 150, 277, 278, 279, 280,
	0, 281, 0, 339, 282, 283, 284, 340, 341, 0,
	0, 285, 153, 154, 0, 155, 286, 287, 288, 289,
	290, 0, 0, 0, 0, 156, 157, 158, 291, 292,
	293, 294, 159, 295, 296, 0, 160, 297, 298, 161,
	0, 0, 299, 300, 301, 0, 162, 302, 0, 0,
	0, 163, 164, 165, 0, 166, 0, 167, 168, 169,
	0, 0, 170, 171, 0, 0, 0, 0, 0, 0,
	172, 173, 346, 174, 303, 175, 304, 305, 0, 176,
	0, 177, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 306, 181, 182, 183, 307, 308, 0, 0,
	0, 184, 185, 309, 0, 186, 0, 187, 0, 0,
	0, 0, 188, 310, 0, 311, 0, 189, 190, 191,
	192, 312, 313, 0, 0, 196, 0, 193, 0, 0,
	194, 314, 195, 315, 316, 317, 0, 318, 0, 0,
	197, 0, 198, 199, 0, 201, 200, 0, 319, 0,
	202, 0, 0, 203, 0, 0, 204, 0, 205, 206,
	207, 209, 320, 208, 0, 210, 211, 213, 212, 0,
	0, 0, 321, 214, 322, 215, 216, 0, 217, 0,
	0, 218, 0, 0, 219, 323, 0, 220, 0, 324,
	221, 222, 223, 224, 0, 325, 225, 326, 226, 0,
	227, 228, 229, 327, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 0, 243,
	0, 244, 245, 328, 246, 0, 572, 251, 252, 253,
	0, 329, 254, 255, 0, 256, 247, 248, 257, 0,
	258, 330, 331, 259, 0, 265, 260, 261, 249, 262,
	264, 332, 263, 333, 0, 266, 0, 267, 268, 269,
	270, 271, 0, 334, 335, 336, 0, 0, 272, 337,
	338, 0, 273, 274, 275, 276, 0, 150, 277, 278,
	279, 280, 0, 281, 0, 339, 282, 283, 284, 340,
	341, 0, 0, 285, 153, 154, 0, 155, 286, 287,
	288, 289, 290, 0, 979, 0, 0, 156, 157, 158,
	291, 292, 293, 294, 159, 295, 296, 0, 160, 297,
	298, 161, 0, 0, 299, 300, 301, 0, 162, 302,
	0, 0, 0, 163, 164, 165, 0, 166, 0, 167,
	168, 169, 0, 0, 170, 171, 0, 0, 0, 0,
	0, 0, 172, 173, 346, 174, 303, 175, 304, 305,
	0, 176, 0, 177, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 306, 181, 182, 183, 307, 308,
	0, 0, 0, 184, 185, 309, 0, 186, 0, 187,
	0, 0, 0, 0, 188, 310, 0, 311, 0, 189,
	190, 191, 192, 312, 313, 0, 0, 196, 0, 193,
	0, 0, 194, 314, 195, 315, 316, 317, 0, 318,
	0, 0, 197, 0, 198, 199, 0, 201, 200, 0,
	319, 0, 202, 0, 0, 203, 0, 0, 204, 0,
	205, 206, 207, 209, 320, 208, 0, 210, 211, 213,
	212, 0, 0, 0, 321, 214, 322, 215, 216, 0,
	217, 0, 0, 218, 0, 0, 219, 323, 0, 220,
	0, 324, 221, 222, 223, 224, 0, 325, 225, 326,
	226, 0, 227, 228, 229, 327, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	0, 243, 0, 244, 245, 328, 246, 0, 250, 251,
	252, 253, 0, 329, 254, 255, 0, 0, 247, 248,
	257, 0, 258, 330, 331, 259, 0, 265, 260, 261,
	249, 262, 264, 332, 263, 333, 0, 266, 0, 267,
	268, 269, 270, 271, 0, 334, 335, 336, 0, 0,
	272, 337, 338, 0, 273, 274, 275, 276, 0, 150,
	277, 278, 279, 280, 0, 281, 0, 339, 282, 283,
	284, 340, 341, 0, 0, 285, 153, 154, 0, 155,
	286, 287, 288, 289, 290, 0, 0, 0, 0, 156,
	157, 158, 291, 292, 293, 294, 159, 295, 296, 0,
	160, 297, 298, 161, 0, 0, 299, 300, 301, 0,
	162, 302, 0, 0, 0, 163, 164, 165, 0, 166,
	0, 167, 168, 169, 0, 0, 170, 171, 0, 0,
	0, 0, 0, 0, 172, 173, 346, 174, 303, 175,
	304, 305, 0, 176, 0, 177, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 306, 181, 182, 183,
	307, 308, 0, 0, 0, 184, 185, 309, 0, 186,
	0, 187, 0, 0, 0, 0, 188, 310, 0, 311,
	0, 189, 190, 191, 192, 312, 313, 0, 0, 196,
	0, 193, 0, 0, 194, 314, 195, 315, 316, 317,
	0, 318, 0, 0, 197, 0, 198, 199, 0, 201,
	200, 0, 319, 0, 202, 0, 0, 203, 0, 0,
	204, 0, 205, 206, 207, 209, 320, 208, 0, 210,
	211, 213, 212, 0, 0, 0, 321, 214, 322, 215,
	216, 0, 217, 0, 0, 218, 0, 0, 219, 323,
	0, 220, 0, 324, 221, 222, 223, 224, 0, 325,
	225, 326, 226, 0, 227, 228, 229, 327, 627, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 0, 243, 0, 244, 245, 328, 246, 0,
	250, 251, 252, 253, 0, 329, 254, 255, 0, 256,
	247, 248, 257, 0, 258, 330, 331, 259, 0, 265,
	260, 261, 249, 262, 264, 332, 263, 333, 0, 266,
	0, 267, 268, 269, 270, 271, 0, 334, 335, 336,
	0, 0, 272, 337, 338, 0, 273, 274, 275, 276,
	0, 150, 277, 278, 279, 280, 0, 281, 0, 339,
	282, 283, 284, 340, 341, 0, 0, 285, 153, 154,
	0, 155, 286, 287, 288, 289, 290, 0, 0, 0,
	0, 156, 157, 158, 291, 292, 293, 294, 159, 295,
	296, 0, 160, 297, 298, 161, 0, 0, 299, 300,
	301, 0, 162, 302, 0, 0, 0, 163, 164, 165,
	0, 166, 0, 167, 168, 169, 0, 0, 170, 171,
	0, 0, 0, 0, 0, 0, 172, 173, 346, 174,
	303, 175, 304, 305, 0, 176, 0, 177, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 306, 181,
	182, 183, 307, 308, 0, 0, 0, 184, 185, 309,
	0, 186, 0, 187, 0, 0, 0, 0, 188, 310,
	0, 311, 0, 189, 190, 191, 192, 312, 313, 0,
	0, 196, 0, 193, 0, 0, 194, 314, 195, 315,
	316, 317, 0, 318, 0, 0, 197, 0, 198, 199,
	0, 201, 200, 0, 319, 0, 202, 0, 0, 203,
	0, 0, 204, 0, 205, 206, 207, 209, 320, 208,
	0, 210, 211, 213, 212, 0, 0, 0, 321, 214,
	322, 215, 216, 0, 217, 0, 0, 218, 0, 0,
	219, 323, 0, 220, 0, 324, 221, 222, 0, 224,
	0, 325, 225, 326, 226, 0, 227, 0, 229, 327,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 0, 243, 0, 244, 245, 328,
	0, 0, 250, 251, 252, 253, 0, 329, 254, 255,
	0, 256, 247, 248, 257, 0, 258, 330, 331, 259,
	0, 265, 260, 261, 249, 262, 264, 332, 263, 333,
	0, 266, 0, 267, 268, 269, 270, 271, 0, 334,
	335, 336, 0, 0, 272, 337, 338, 0, 273, 274,
	275, 276, 0, 0, 277, 278, 279, 280, 0, 281,
	0, 339, 282, 283, 284, 340, 341, 0, 0, 285,
	0, 0, 0, 0, 286, 287, 288, 289, 1124, 1125,
	0, 1144, 1145, 1146, 1154, 1155, 1156, 0, 0, 0,
	0, 0, 0, 0, 0, 1147, 0, 0, 0, 0,
	0, 0, 1127, 0, 0, 1158, 0, 0, 0, 0,
	1124, 1125, 0, 1144, 1145, 1146, 1154, 1155, 1156, 0,
	0, 0, 0, 0, 0, 1126, 0, 1147, 0, 0,
	0, 1141, 0, 0, 1127, 0, 0, 1158, 0, 0,
	0, 0, 1124, 1125, 0, 1144, 1145, 1146, 1154, 1155,
	1156, 0, 0, 0, 0, 0, 0, 1126, 0, 1147,
	0, 0, 0, 1141, 0, 0, 1127, 0, 0, 1158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	1151, 1159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1132, 0, 0, 1157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1149, 0,
	0, 0, 1151, 1159, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1132, 0, 0, 1157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1148,
	1149, 0, 0, 0, 1151, 1159, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1148, 1149, 0, 0, 0, 0, 0, 1142, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1150,
	1152, 0, 1138, 1139, 1140, 1153, 0, 1137, 1135, 1136,
	1128, 1129, 1130, 1131, 1133, 1134, 0, 0, 0, 0,
	2238, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 0, 0, 1138, 1139, 1140, 1153, 0, 1137,
	1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134, 0, 0,
	0, 0, 2183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1150, 0, 0, 1138, 1139, 1140, 1153,
	0, 1137, 1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134,
	0, 0, 1124, 1125, 2178, 1144, 1145, 1146, 1154, 1155,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 1158,
	0, 0, 0, 0, 1124, 1125, 0, 1144, 1145, 1146,
	1154, 1155, 1156, 0, 0, 0, 0, 0, 0, 1126,
	0, 1147, 0, 0, 0, 1141, 0, 0, 1127, 0,
	0, 1158, 0, 0, 0, 0, 1124, 1125, 0, 1144,
	1145, 1146, 1154, 1155, 1156, 0, 0, 0, 0, 0,
	0, 1126, 0, 1147, 0, 0, 0, 1141, 0, 0,
	1127, 0, 0, 1158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 1126, 0, 0, 0, 0, 0, 1141,
	0, 0, 0, 0, 1151, 1159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1149, 0, 0, 0, 1151, 1159, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1132,
	0, 0, 1157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1148, 1149, 0, 0, 0, 1151, 1159,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1148, 1149, 0, 0, 0,
	0, 0, 1142, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1150, 1152, 0, 1138, 1139, 1140, 1153,
	0, 1137, 1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134,
	0, 0, 0, 0, 2174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1150, 0, 0, 1138, 1139,
	1140, 1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131,
	1133, 1134, 0, 0, 0, 0, 2113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1150, 0, 0,
	1138, 1139, 1140, 1153, 0, 1137, 1135, 1136, 1128, 1129,
	1130, 1131, 1133, 1134, 0, 0, 1124, 1125, 2091, 1144,
	1145, 1146, 1154, 1155, 1156, 0, 0, 0, 0, 0,
	0, 0, 0, 1147, 0, 0, 0, 0, 0, 0,
	1127, 0, 0, 1158, 0, 0, 0, 0, 1124, 1125,
	0, 1144, 1145, 1146, 1154, 1155, 1156, 0, 0, 0,
	0, 0, 0, 1126, 0, 1147, 0, 0, 0, 1141,
	0, 0, 1127, 0, 0, 1158, 0, 0, 0, 0,
	1124, 1125, 0, 1144, 1145, 1146, 1154, 1155, 1156, 0,
	0, 0, 0, 0, 0, 1126, 0, 1147, 0, 0,
	0, 1141, 0, 0, 1127, 0, 0, 1158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 0, 1141, 0, 0, 0, 0, 1151, 1159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1132, 0, 0, 1157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1149, 0, 0, 0,
	1151, 1159, 1142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1132, 0, 0, 1157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1148, 1149, 0,
	0, 0, 1151, 1159, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1148,
	1149, 0, 0, 0, 0, 0, 1142, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 0,
	0, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1150, 1152, 0,
	1138, 1139, 1140, 1153, 0, 1137, 1135, 1136, 1128, 1129,
	1130, 1131, 1133, 1134, 0, 0, 0, 0, 2090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1150,
	0, 0, 1138, 1139, 1140, 1153, 0, 1137, 1135, 1136,
	1128, 1129, 1130, 1131, 1133, 1134, 0, 0, 0, 0,
	1980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 0, 0, 1138, 1139, 1140, 1153, 0, 1137,
	1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134, 0, 0,
	1124, 1125, 1914, 1144, 1145, 1146, 1154, 1155, 1156, 0,
	0, 0, 0, 0, 0, 0, 0, 1147, 0, 0,
	0, 0, 0, 0, 1127, 0, 0, 1158, 0, 0,
	0, 0, 1124, 1125, 0, 1144, 1145, 1146, 1154, 1155,
	1156, 0, 0, 0, 0, 0, 0, 1126, 0, 1147,
	0, 0, 0, 1141, 0, 0, 1127, 0, 0, 1158,
	0, 0, 0, 0, 1124, 1125, 0, 1144, 1145, 1146,
	1154, 1155, 1156, 0, 0, 0, 0, 0, 0, 1126,
	0, 1147, 0, 0, 0, 1141, 0, 0, 1127, 0,
	0, 1158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 1151, 1159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1132, 0, 0, 1157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1149, 0, 0, 0, 1151, 1159, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1148, 1149, 0, 0, 0, 1151, 1159, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1148, 1149, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 1152, 0, 1138, 1139, 1140, 1153, 0, 1137,
	1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134, 0, 0,
	0, 0, 1898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1150, 0, 0, 1138, 1139, 1140, 1153,
	0, 1137, 1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134,
	0, 0, 0, 0, 1849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1150, 0, 0, 1138, 1139,
	1140, 1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131,
	1133, 1134, 0, 0, 1124, 1125, 1452, 1144, 1145, 1146,
	1154, 1155, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 1147, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 1158, 0, 0, 0, 0, 1124, 1125, 0, 1144,
	1145, 1146, 1154, 1155, 1156, 0, 0, 0, 0, 0,
	0, 1126, 0, 1147, 0, 0, 0, 1141, 0, 0,
	1127, 0, 0, 1158, 0, 0, 0, 0, 1124, 1125,
	0, 1144, 1145, 1146, 1154, 1155, 1156, 0, 0, 0,
	0, 0, 0, 1126, 0, 1147, 0, 0, 0, 1141,
	0, 0, 1127, 0, 0, 1158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 1151, 1159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1132,
	2323, 0, 1157, 0, 0, 0, 0, 1718, 1719, 0,
	1736, 1737, 1738, 0, 1149, 0, 0, 0, 1151, 1159,
	1142, 0, 0, 0, 1891, 0, 0, 0, 0, 0,
	0, 1132, 0, 1750, 1157, 0, 1749, 0, 0, 0,
	0, 0, 0, 0, 0, 1148, 1149, 0, 0, 0,
	1151, 1159, 1142, 0, 0, 0, 0, 0, 0, 0,
	1733, 0, 0, 0, 0, 0, 1157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1148, 1149, 0,
	0, 0, 0, 0, 1142, 0, 0, 0, 1143, 0,
	0, 2322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 1148,
	1724, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1739, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1734, 0, 1150, 1152, 0, 1138, 1139,
	1140, 1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131,
	1133, 1134, 0, 0, 1685, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1150, 0, 0,
	1138, 1139, 1140, 1153, 0, 1137, 1135, 1136, 1128, 1129,
	1130, 1131, 1133, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1150,
	0, 1735, 1138, 1139, 1140, 1153, 0, 1137, 1135, 1136,
	1128, 1129, 1130, 1131, 1133, 1134, 1124, 1125, 0, 1144,
	1145, 1146, 1154, 1155, 1156, 0, 0, 0, 0, 0,
	0, 1718, 1719, 1147, 1736, 1737, 1738, 0, 1364, 0,
	1127, 0, 0, 1158, 0, 0, 0, 1162, 1890, 0,
	0, 0, 0, 1124, 1125, 0, 1144, 1145, 1146, 1154,
	1155, 1156, 0, 1126, 0, 0, 0, 0, 0, 1141,
	1147, 0, 0, 0, 1161, 0, 0, 1127, 0, 0,
	1158, 1730, 1731, 1732, 1733, 0, 1729, 1727, 1728, 1720,
	1721, 1722, 1723, 1725, 1726, 0, 0, 1365, 0, 0,
	1126, 0, 0, 0, 0, 0, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1724, 0, 0, 0, 1151, 1159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1157, 0, 1132, 1124, 1125, 0,
	1144, 1145, 1146, 1154, 1155, 1156, 1149, 0, 0, 1739,
	0, 0, 1142, 0, 1147, 1151, 1159, 0, 0, 0,
	0, 1127, 0, 0, 1158, 0, 0, 1734, 0, 0,
	0, 1157, 0, 0, 0, 0, 0, 1148, 0, 0,
	0, 0, 0, 1149, 1126, 0, 0, 0, 0, 1142,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 1735, 0, 0, 0, 0,
	1132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1143, 0, 1151,
	1159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1152, 0, 0, 0, 1157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1149, 0, 0,
	0, 0, 0, 1142, 0, 0, 0, 1150, 0, 0,
	1138, 1139, 1140, 1153, 0, 1137, 1135, 1136, 1128, 1129,
	1130, 1131, 1133, 1134, 0, 1730, 1731, 1732, 1148, 608,
	1729, 1727, 1728, 1720, 1721, 1722, 1723, 1725, 1726, 0,
	0, 0, 0, 0, 1150, 0, 0, 1138, 1139, 1140,
	1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131, 1133,
	1134, 0, 1124, 1125, 0, 1144, 1145, 1146, 1154, 1155,
	1156, 1143, 0, 0, 0, 0, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 1152, 1127, 0, 0, 1158,
	0, 0, 0, 0, 1124, 1125, 0, 1144, 1145, 1146,
	1154, 1155, 1156, 0, 0, 0, 0, 0, 0, 1126,
	0, 1147, 0, 0, 0, 1141, 0, 0, 1127, 0,
	0, 1158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 1141, 1150, 0,
	0, 1138, 1139, 1140, 1153, 0, 1137, 1135, 1136, 1128,
	1129, 1130, 1131, 1133, 1134, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1151, 1159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	1157, 0, 1756, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1149, 0, 0, 0, 1151, 1159, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1148, 1149, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	1124, 1125, 0, 1144, 1145, 1146, 1154, 1155, 1156, 0,
	1152, 0, 0, 0, 0, 0, 0, 1147, 0, 0,
	0, 1751, 0, 0, 1127, 0, 0, 1158, 1143, 0,
	0, 0, 0, 1902, 0, 0, 0, 0, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1150, 0, 0, 1138, 1139, 1140, 1153,
	0, 1137, 1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1132, 0, 1150, 0, 0, 1138, 1139,
	1140, 1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131,
	1133, 1134, 1151, 1159, 0, 0, 0, 1124, 1125, 0,
	1144, 1145, 1146, 1154, 1155, 1156, 0, 0, 1157, 0,
	0, 0, 0, 0, 1147, 0, 0, 0, 0, 0,
	1149, 1127, 0, 0, 1158, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	1141, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 0, 0,
	1132, 0, 0, 0, 0, 0, 0, 0, 1152, 1124,
	1125, 0, 1144, 1145, 1146, 1154, 1155, 1156, 0, 1151,
	1159, 0, 0, 0, 0, 0, 1147, 0, 0, 0,
	1709, 0, 0, 1127, 0, 1157, 1158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1149, 0, 0,
	0, 0, 0, 1142, 0, 0, 1126, 0, 0, 0,
	0, 0, 1141, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 0, 0, 1138, 1139, 1140, 1153, 1148, 1137,
	1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134, 0, 0,
	1716, 0, 0, 1124, 1125, 0, 1144, 1145, 1146, 1154,
	1155, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	1147, 0, 1132, 0, 0, 0, 0, 1127, 0, 0,
	1158, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1151, 1159, 0, 0, 1152, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 1141, 1157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1149,
	0, 0, 0, 0, 0, 1142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1148, 0, 0, 0, 0, 0, 1132, 0, 1150, 0,
	0, 1138, 1139, 1140, 1153, 0, 1137, 1135, 1136, 1128,
	1129, 1130, 1131, 1133, 1134, 1151, 1159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1157, 0, 1143, 1124, 1125, 0, 1144, 1145, 1146,
	1154, 1155, 1156, 1149, 0, 0, 0, 1152, 0, 1142,
	0, 1147, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 1158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1150, 0, 0, 1138, 1139, 1140, 1153, 1143, 1137, 1135,
	1136, 1128, 1129, 1130, 1131, 1133, 1134, 0, 0, 0,
	0, 1152, 0, 0, 0, 0, 0, 1132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1151, 1159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1157, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1149, 35, 103, 0, 0, 0,
	1142, 0, 0, 0, 1150, 0, 0, 1138, 1139, 1140,
	1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131, 1133,
	1134, 105, 0, 0, 0, 0, 0, 37, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 0, 0, 0, 0, 46, 0, 0, 106, 0,
	0, 0, 54, 0, 51, 0, 0, 0, 1143, 0,
	1124, 1125, 0, 1144, 1145, 1146, 1154, 1155, 1156, 0,
	56, 0, 1152, 0, 0, 0, 52, 0, 0, 0,
	0, 0, 0, 0, 1127, 0, 0, 1158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1150, 0, 0, 1138, 1139,
	1140, 1153, 0, 1137, 1135, 1136, 1128, 1129, 1130, 1131,
	1133, 1134, 0, 0, 0, 0, 0, 53, 0, 0,
	1124, 1125, 0, 1132, 0, 0, 1154, 1155, 1156, 0,
	0, 0, 0, 84, 85, 36, 0, 0, 57, 0,
	107, 0, 1151, 1159, 1127, 58, 0, 1158, 0, 111,
	0, 0, 0, 0, 65, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 1126, 0, 0,
	1149, 0, 0, 1141, 0, 115, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 109, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 1151, 1159, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 1018, 1010, 1035, 1002, 1026, 1025,
	1149, 0, 1004, 1003, 0, 0, 1142, 1037, 1036, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1031,
	0, 1023, 1022, 0, 0, 0, 0, 0, 0, 0,
	1021, 1150, 0, 0, 1138, 1139, 1140, 1153, 0, 1137,
	1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134, 1020, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 1018, 1010,
	1035, 1002, 1026, 1025, 0, 0, 1004, 1003, 1152, 0,
	0, 1037, 1036, 0, 0, 0, 1013, 1012, 1014, 1015,
	1016, 0, 1034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1031, 0, 1023, 1022, 1006, 0, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 1024,
	0, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	0, 1150, 1020, 0, 0, 0, 0, 1153, 0, 1137,
	1135, 1136, 1128, 1129, 1130, 1131, 1133, 1134, 1019, 0,
	0, 0, 1386, 1384, 1385, 1388, 1387, 0, 0, 0,
	1013, 1012, 1014, 1015, 1016, 0, 1034, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1007, 0, 529, 0,
	549, 0, 0, 0, 0, 0, 1017, 1008, 0, 0,
	0, 1006, 0, 0, 0, 0, 1039, 0, 0, 534,
	0, 0, 0, 1024, 0, 0, 1005, 1011, 0, 1032,
	1033, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1009, 533, 1019, 0, 0, 1038, 536, 0, 0, 0,
	0, 538, 539, 0, 0, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 537, 0,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 1008, 0, 0, 0, 0, 0, 0, 0, 548,
	1039, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 0, 0, 1032, 1033, 0, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 0, 1009, 0, 0, 0, 0, 1038,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 0, 547, 0, 0, 0, 552, 0,
	0, 0, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546,
}
var sqlPact = [...]int{

	36510, -1000, 70, -1000, -1000, 1823, 1821, -1000, -1000, 1818,
	-1000, 1815, -1000, 1813, 1812, 1811, 1810, 1808, 1806, 1805,
	1799, -1000, -1000, -1000, -1000, 1795, 1794, 1793, 1790, -1000,
	821, 1789, 1786, 1782, 1776, 20527, 20228, 31143, 922, 1773,
	1772, 1771, 1769, 1763, 1762, 760, 819, 1761, 1757, 1756,
	1751, 730, 5500, 30861, 30562, 24052, 1264, 1014, 30263, -1000,
	-1000, 1750, 1749, 1748, -1000, 29964, 37066, 1746, 1745, 1744,
	1743, 1740, 1738, 1736, 1735, 1734, 1733, 1730, -1000, 1729,
	1728, 1727, 1726, 1725, 29665, 1275, 994, 16662, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 167,
	-1000, 766, 204, 888, 877, 873, 871, 858, 32835, 31143,
	1724, 1625, 232, 1720, 522, 23753, 36510, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 23454, 23155, 29366, 29067, -1000, -1000,
	-1000, -1000, -1000, 664, 42, 21683, 31143, -1000, 74, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1420, 421, 74, -1000, -1000, 28768, 28469,
	28170, 1303, 27871, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1525, 1447, 1439, 22856, -1000, 27572, 27273, 26974, 26675, -1000,
	-1000, -1000, -1000, -1000, 15463, -1000, -1000, -1000, -1000, -1000,
	1719, 1718, 1717, 1716, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 387,
	-1000, 384, -1000, -1000, 26376, -1000, 1054, -1000, -1000, 62,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1048, -1000,
	-1000, -1000, -1000, -1000, -1000, 1915, 1087, 383, 26094, -1000,
	1227, -1000, -1000, 497, 678, -1000, -1000, 16366, 98, -1000,
	1356, -1000, 19929, 1085, 1584, 1219, 1523, 1912, 1520, 1513,
	1508, 1497, 1492, 1486, 1003, 564, 1909, 1419, 1418, -1000,
	-1000, -1000, 494, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 31143, -1000, -1000, -1000, 1313, -1000, 24616, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1851, -1000, -1000, -1000, -1000, 1883, -1000, -1000, -1000, -1000,
	766, -1000, -1000, -1000, 1163, 1542, 1542, 1542, 1614, 193,
	185, -1000, 167, -1000, 983, -1000, -1000, 983, -1000, -1000,
	-1000, -1000, -1000, -1000, 663, 32271, 3, 31143, -1000, 382,
	3, -1000, -1000, 12328, 12328, -1000, -1000, -1000, 379, -1000,
	-1000, -1000, 9370, -1000, -1000, 319, 19312, -1000, -1000, 977,
	1496, 540, -1000, 895, 1495, -1000, 867, -1000, 799, 1494,
	-85, 20823, 21683, 42, 38, -1000, -1000, -1000, 5193, 20823,
	755, 18466, 74, -1000, -1000, -1000, -1000, 366, 1141, 502,
	-1000, 195, -1000, 25795, -1000, 502, 1130, -1000, 24616, -1000,
	31143, -1000, 31143, -1000, 783, 32553, 133, 1489, -1000, -1000,
	133, 1476, -1000, 131, 1475, -1000, -1000, -1000, 1474, -1000,
	-1000, 66, -1000, -1000, 522, -1000, -1000, -1000, -1000, 1685,
	36910, -1000, 13609, -1000, -1000, 21105, 1262, 21105, -1000, -1000,
	31143, 13609, -1000, 1676, 1215, -1000, -1000, 37, 28, 1228,
	1218, 835, 16070, 15774, 1547, -1000, -1000, -1000, 85, 5500,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 25496, 1016, -1000,
	1438, 21105, -1000, 31143, -1000, -1000, 31143, -1000, 31143, -1000,
	31143, -1000, 31143, -1000, 31143, -1000, 31143, -1000, 1194, -1000,
	-1000, 25214, 24915, -1000, 841, 719, -1000, -1000, -1000, 135,
	-1000, -1000, -1000, -1000, -1000, 1163, -1000, 1040, 1260, 12649,
	1231, 13609, 167, -1000, -1000, 167, 167, 13609, -1000, -1000,
	-1000, 21, 8, -1000, 32271, -1000, 31143, 3, 1649, 31143,
	116, -1000, 35373, -1000, -1000, 13609, 13609, 13609, 13609, 13609,
	992, 432, -1000, 364, 359, 6783, -1000, -1000, 1876, -1000,
	-1000, -1000, 192, -1000, -1000, 13609, 74, -1000, -1000, -1000,
	-1000, 357, 1905, -1000, 471, -1000, -1000, -1000, 486, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1430, 356,
	355, -1000, -1000, -1000, -1000, 354, 352, 351, 350, 349,
	348, 337, 336, 335, 334, 333, 330, 329, 327, 325,
	911, -1000, 524, -1000, -1000, 524, 524, -1000, 317, 317,
	321, -1000, -1000, -1000, -1000, 317, -1000, -1000, -1000, 483,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 324, 116, -1000,
	61, -1000, 36243, -1000, -1000, -1000, 31143, -26, 939, -1000,
	22557, 1588, 1565, 1558, 24616, 1630, 144, 1417, 662, 24616,
	654, 1617, 144, 1415, 648, 31143, 31143, 257, -1000, 31143,
	-1000, -1000, -37, -1000, -1000, 1408, 60, -1000, -1000, 22261,
	1647, 1473, -1000, 935, -1000, 1645, 31143, -1000, 1032, 1117,
	-1000, 706, 1472, 510, 105, 1642, 105, 18748, -1000, 31143,
	-1000, 31143, -1000, -1000, 31143, -1000, 31143, -1000, 31143, 31143,
	31143, 1251, 21979, 144, 54, -1000, 1688, -1000, -1000, -1000,
	-1000, 178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	321, 911, 317, 317, 317, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 483, -1000, -1000, 524, 524, 524, -1000, -1000,
	53, 36243, 645, -1000, 1406, -1000, 490, 52, 574, -1000,
	-1000, 883, 1282, 1188, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1897, -2, -1000, -1000, -2,
	-1000, -1000, 5500, -1000, -1000, -1000, -1000, -1000, -1000, 31143,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 31143, 31143, 31143, -1000, 24616, -1000, -1000,
	-1000, -1000, 36243, -1000, 417, -1000, -1000, 36243, 834, 1288,
	-1000, 1288, -8, -1000, 35336, 883, 1282, -1000, -1000, 315,
	47, 510, 12328, 17868, 36826, 36910, 5500, 696, 13609, 13609,
	13609, 13609, 13609, 13609, 13609, 13609, 13609, 13609, 13609, 13609,
	13609, 13609, 13609, 13609, 13609, 13609, 13609, 13609, 13609, 13609,
	1207, 13609, 642, 13609, 13609, 13609, 13609, 1031, 989, 284,
	1011, 5500, -1000, -1000, 1844, 1844, 1844, 297, 297, 209,
	432, -1000, 13609, -1000, 144, 12008, 185, 34634, -9, 6463,
	-1000, -1000, -1000, 7744, 521, 36243, 74, 5809, -1000, 1874,
	773, 1445, 1339, 314, 424, 419, 13609, 13609, 11688, 11355,
	11022, 13929, 10689, 13609, 7103, 13609, 13609, 13609, 13609, 10356,
	10023, -1000, 310, -1000, -1000, -1000, -1000, 1871, -1000, -1000,
	1870, -1000, 689, 680, 1869, 510, 9370, -1000, 180, 884,
	31143, 31143, 31143, -1000, -1000, 1113, 31989, 1108, 36910, 31143,
	-1000, 309, 299, 1269, 1266, 31143, 31143, 31707, 31425, 31143,
	823, 144, -1000, 298, 31143, 856, 31143, 144, -1000, 296,
	31143, 848, -1000, 1325, 1057, -1000, 505, 20823, 752, 1388,
	31143, 179, 46, -18, 36910, -1000, -1000, -1000, -1000, -1000,
	31143, 313, 31143, 144, 31143, 1896, 144, 31143, 1469, 1490,
	450, 31143, 832, 13609, 886, -1000, 17569, 534, 31143, 832,
	109, -1000, -1000, -1000, 462, 31143, -1000, -1000, 133, 133,
	-1000, 131, -1000, -1000, -1000, -1000, -1000, 1715, 1713, 1711,
	1710, -1000, 36910, 428, 426, -1000, 1866, 640, -1000, 637,
	632, 629, -1000, 294, -1000, 13609, 31143, 31143, -1000, 1282,
	-1000, -1000, -1000, 797, -1000, 868, -1000, 16662, -1000, -30,
	-1000, -1000, -1000, 257, -1000, 834, -1000, 13609, 1865, -1000,
	-1000, -1000, 13609, -1000, -1000, -1000, -1000, -1000, 144, -1000,
	1338, -1000, -102, -1000, 1464, 1056, -148, 189, 478, -1000,
	17270, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 493, 776, 776, 643, 643, 643, 643, 1694, 1606,
	2320, 2603, 36710, 36710, 36710, 820, 380, 380, 36710, 36710,
	36710, 297, 36384, 239, 13609, 13609, 628, 982, 284, 239,
	13609, 239, 239, 239, 239, -1000, 1222, -1000, -1000, -1000,
	-1000, 1379, 278, 13929, 13929, -1000, -1000, -1000, 6783, 14249,
	-1000, -1000, -1000, -1000, -1000, 276, 13609, -1000, 34954, -161,
	39, -1000, -1000, 13609, -60, -95, -1000, -1000, 722, -1000,
	13609, -1000, -1000, 1, 13609, 13609, 13609, 175, 174, -1000,
	995, 275, 274, 13609, -1000, -1000, -1000, -1000, 36159, 4202,
	172, -1000, 1377, -82, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 171, -1000, 168, -1000, 36047, -82, 165, 4092, -1000,
	13929, 13929, 13929, 6783, 273, 164, -1000, 35018, -82, 35920,
	9690, 9690, 9690, 160, 35724, 13609, -82, 3874, 3842, 3627,
	30, 23, -1000, 13, -1000, 1863, 7, 156, 491, 488,
	154, 1338, -1000, -1000, -1000, -1000, 619, 616, 1468, -1000,
	1102, -1000, 542, -1000, 804, 13609, 14865, 272, 270, 950,
	-1000, 1467, 1043, 1466, 1043, -1000, -26, 854, -1000, 13609,
	-1000, 609, -1000, -1000, 13609, -1000, 601, 505, 1375, 724,
	-1000, 1006, -1000, -1000, 750, -1000, 1305, -1000, 22261, 269,
	31143, 268, -1000, 266, -1000, -1000, 265, 31143, 1223, 450,
	21401, -1000, 502, -1000, 7423, 36243, -1000, 832, 1568, 5,
	-1000, -1000, -1000, 510, 18748, 18167, 9370, 0, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 492, 1862, 153, 1096,
	1038, 892, 795, 1859, 36243, -30, -30, -1000, -1000, -1000,
	-1000, -1000, 31143, -1000, 1018, 34602, -1000, 152, 1332, 1609,
	-1000, 18167, 1277, 1276, 18167, 1185, 998, 998, 998, -1000,
	264, 410, 416, 478, 4567, 9050, 24334, 1004, 96, 151,
	16971, 1464, 13609, 239, 239, 13609, 13929, 13929, -1000, 239,
	-1000, -1000, -1000, -1000, -1000, 1374, 254, 13609, 36910, 35351,
	35097, -7, -1000, 8717, -32, -1000, 13609, -1000, 34570, -1000,
	-1000, 420, 1500, -1000, 13609, 35692, 150, 8397, -1000, 35477,
	-6, -6, -1000, 1895, -1000, 19030, 512, 1007, 34250, 36826,
	36910, -1000, 13609, -1000, -1000, 1369, 13609, -1000, 36826, 36910,
	13929, 13929, 13929, 13929, 13929, 13929, 13929, 13929, 13929, 13929,
	13929, 13929, 13929, 13929, 13929, 13929, 13929, 13929, 13929, 1234,
	13929, 1838, 1838, 1838, -36, 8077, -1000, 1351, 1369, 13609,
	13609, 36910, 149, 148, 145, -1000, 13609, -82, 13609, 13609,
	13609, -1000, -1000, -1000, 139, -1000, 1858, -1000, -1000, -1000,
	-1000, 1332, 31143, 31143, 31143, 1465, -1000, 2702, -1000, 34218,
	-14, -1000, 345, 1579, 13609, -1000, -1000, 249, 14865, 31143,
	-1000, 1197, 1220, 567, 31143, -1000, 31143, -1000, 31143, 31143,
	31143, -16, 31143, -35, 31143, -1000, 20823, 673, 246, -1000,
	-1000, 1320, -1000, 14865, 245, 31143, 22261, 1640, 14865, 1022,
	1243, 450, 21401, -1000, 706, -42, -1000, -1000, 279, 144,
	832, -1000, -47, -1000, 454, -1000, 407, 400, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 132, -1000, -1000, -1000,
	-1000, 495, 13609, 13609, 1464, 18167, 18167, 2243, 1272, 18167,
	-1000, -1000, -1000, -1000, 399, 406, 397, 15164, -1000, 478,
	24334, -1000, 1854, 1249, -40, -1000, -1000, -1000, 31143, 244,
	-1000, 478, 1704, 239, 3734, 228, 13609, 36910, 36610, -45,
	13609, 13609, -1000, -46, -1000, 13609, 395, 36243, -1000, -1000,
	-1000, 36243, 13609, 1846, 13609, 129, 128, 127, -1000, -1000,
	-1000, 33117, 13609, 123, -1000, 122, 121, 36243, 1351, 36243,
	-1000, -1000, 409, 409, 749, 749, 749, 749, 1838, 851,
	2794, 312, 2428, 2428, 2428, 2455, 859, 859, 2428, 2428,
	2428, 1365, 1190, 243, 2372, 13609, -61, -1000, -1000, -1000,
	36243, 36243, 120, -1000, -1000, -1000, -82, 267, 34186, 33866,
	-1000, 117, 495, -1000, -1000, -1000, 31143, -1000, 31143, -1000,
	5500, 31143, 1348, 1098, -1000, -1000, 1265, 241, 13929, 31143,
	-1000, 941, 14865, 1561, 74, 5500, 1561, 33834, 5809, -63,
	-74, 1083, -1000, 1076, 13609, -1000, 36910, 1043, 1043, -1000,
	599, 597, 592, -1000, 588, -1000, -71, 19620, 1892, 969,
	-75, 14865, -87, 115, 144, -88, 31143, -1000, 450, 21401,
	-1000, 1490, 1519, 31143, 1556, -1000, -1000, 240, -1000, -1000,
	-1000, -1000, 31143, 36243, -82, -1000, 2243, -1000, 238, 13609,
	18167, -1000, -148, -1000, -103, -1000, 478, -107, 24334, -1000,
	393, -163, -1000, 437, -1000, 478, 237, 31143, 24334, 13609,
	13609, 36610, -109, -1000, 239, 239, -1000, 33802, -1000, 36243,
	-1000, 35477, -1000, -1000, -1000, 962, -1000, 33482, -1000, -1000,
	-1000, -1000, 13929, 1345, 226, 36910, 33450, -1000, -1000, 13609,
	-1000, -1000, -1000, -1000, -1000, 1010, -1000, -1000, 31143, 1089,
	-1000, -1000, 13609, 2372, 225, 1305, 207, -1000, -1000, -1000,
	-1000, -1000, -1000, 1579, 1, -1000, 847, -1000, -1000, 36243,
	1578, -1000, -1000, 31143, 31143, 206, 203, -1000, 201, 74,
	-111, -1000, 282, 31143, 941, -115, -1000, 1305, -1000, 941,
	199, 21401, -1000, 1223, 667, -117, 31143, -1000, -1000, 6130,
	-72, -1000, 1638, -1000, 31143, 36243, -1000, 478, -1000, 1839,
	24334, 1251, -1000, -1000, 1249, -1000, 4884, 24334, 31143, -122,
	-1000, 239, 239, -1000, -1000, 114, 1007, 1599, -1000, 3817,
	13929, 36910, -123, -1000, 33418, -1000, -1000, 1461, 4234, 1184,
	31143, -1000, 31143, 1561, 108, 31143, 548, 5500, -1000, -1000,
	13609, 13609, 13609, 1892, -1000, -1000, 1886, 198, 1305, 941,
	-1000, 1305, 14865, -1000, 1243, 763, -1000, 510, -1000, 31143,
	196, -127, 24334, -1000, -1000, 391, -1000, -1000, 1837, -1000,
	-131, -1000, -1000, 845, 13609, 3817, -132, -1000, -1000, 1450,
	-1000, 1012, 912, 107, -133, -1000, -1000, 195, -1000, 13609,
	-1000, -137, -138, -6, -1000, -1000, 31143, -1000, 1305, -1000,
	-145, -1000, 18748, -1000, -1000, -1000, -1000, -1000, 478, 389,
	-1000, 106, 13289, 13289, -82, -1000, 31143, -1000, 1017, 1015,
	758, -1000, -1000, -1000, -1000, -1000, 1184, 36243, -1000, -1000,
	103, -150, -1000, 941, -128, 24334, -1000, -1000, -1000, -1000,
	14557, 1053, 818, 34986, -1000, -1000, -1000, 1511, -1000, 556,
	1147, 1147, 1012, 1846, 1008, 1305, -1000, -1000, 1702, -1000,
	-1000, -1000, -1000, -1000, -1000, 1700, -1000, -1000, 1229, -1000,
	-1000, -1000, -1000, -1000, -1000, 12969, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2258, 2256, 1548, 1571, 2255, 2254, 2253, 2252, 2251,
	2250, 2249, 2248, 2242, 2241, 2239, 2235, 2231, 2230, 2229,
	2228, 2222, 1560, 2217, 2216, 2215, 2213, 2212, 2210, 120,
	1543, 2208, 2207, 2206, 2203, 1541, 22, 1539, 2200, 89,
	2199, 2195, 2192, 113, 2190, 2188, 2185, 2183, 63, 2182,
	2180, 2179, 2178, 97, 2177, 2176, 2175, 2162, 2160, 2159,
	2158, 2153, 2146, 2145, 2141, 2140, 2136, 2135, 2132, 2131,
	2130, 2128, 2127, 105, 2126, 99, 2123, 21, 2122, 78,
	2119, 47, 168, 2425, 159, 2115, 2112, 2110, 2108, 2104,
	25, 111, 115, 2102, 167, 2100, 2097, 61, 45, 26,
	19, 2095, 102, 127, 1334, 44, 2094, 2093, 148, 170,
	2091, 31, 34, 1554, 164, 162, 129, 131, 2089, 2088,
	2087, 2084, 50, 2083, 12, 2082, 2081, 16, 72, 41,
	2080, 23, 18, 2075, 2071, 139, 2068, 76, 107, 1465,
	123, 141, 320, 2064, 77, 13, 81, 2057, 2055, 145,
	51, 2054, 35, 86, 155, 2053, 68, 177, 75, 32,
	80, 112, 2051, 2050, 2048, 96, 2046, 122, 90, 2044,
	2040, 91, 2037, 149, 151, 2032, 2031, 104, 2029, 134,
	2022, 2021, 157, 173, 160, 171, 2015, 2010, 2005, 4,
	52, 83, 9, 1435, 1415, 119, 65, 30, 29, 2001,
	1875, 1164, 1002, 39, 92, 62, 46, 93, 67, 70,
	156, 20, 2000, 1999, 124, 1998, 1996, 1994, 1993, 1992,
	87, 1991, 1990, 74, 154, 15, 3, 14, 101, 43,
	49, 71, 130, 163, 128, 1987, 94, 132, 58, 236,
	1985, 1984, 1937, 126, 1983, 1979, 1978, 1727, 1274, 882,
	184, 1977, 1975, 763, 659, 1974, 1970, 69, 1968, 133,
	125, 1964, 153, 161, 42, 1963, 48, 118, 103, 1961,
	117, 57, 0, 166, 143, 1959, 140, 84, 1958, 1957,
	1954, 1953, 24, 2, 10, 6, 7, 5, 73, 33,
	1952, 1951, 142, 27, 82, 1949, 169, 1948, 1945, 1944,
	40, 1943, 17, 1942, 11, 1940, 1939, 8, 1, 1938,
	1935, 152, 1924, 108, 1923, 1667, 1921, 158, 1920, 1919,
	1589, 60, 95,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 6, 6, 6, 6,
	6, 9, 9, 10, 16, 13, 18, 12, 12, 15,
	15, 92, 92, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 89, 89,
	94, 94, 94, 96, 96, 93, 93, 88, 88, 20,
	20, 46, 46, 270, 270, 271, 271, 76, 76, 80,
	80, 77, 78, 78, 79, 79, 21, 21, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 29, 29, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 34, 34, 34, 33, 33, 33,
	32, 32, 32, 31, 31, 31, 141, 141, 140, 140,
	143, 143, 35, 35, 35, 35, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 238, 238, 237, 38, 38, 212, 212, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 166,
	166, 41, 41, 41, 41, 41, 42, 42, 47, 47,
	311, 311, 311, 315, 315, 316, 316, 317, 317, 317,
	317, 317, 317, 317, 313, 313, 45, 45, 45, 74,
	50, 50, 50, 50, 50, 50, 50, 50, 52, 52,
	186, 51, 51, 51, 187, 187, 187, 187, 184, 184,
	184, 184, 103, 182, 182, 182, 182, 183, 183, 183,
	183, 183, 188, 188, 121, 121, 263, 262, 262, 268,
	268, 268, 119, 119, 119, 119, 119, 120, 120, 120,
	261, 261, 261, 261, 269, 269, 269, 269, 269, 269,
	267, 267, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	63, 63, 63, 109, 109, 109, 109, 109, 109, 54,
	54, 59, 59, 59, 59, 59, 61, 61, 55, 55,
	60, 60, 56, 56, 56, 56, 62, 62, 62, 62,
	62, 62, 64, 64, 64, 66, 66, 66, 66, 57,
	57, 58, 58, 67, 67, 65, 65, 65, 37, 312,
	312, 314, 314, 25, 25, 26, 26, 122, 122, 123,
	123, 191, 191, 191, 191, 124, 124, 95, 95, 95,
	190, 280, 280, 281, 281, 281, 281, 281, 281, 282,
	282, 282, 282, 282, 282, 282, 278, 278, 279, 276,
	276, 277, 277, 277, 277, 318, 318, 189, 189, 127,
	127, 285, 285, 285, 285, 283, 283, 283, 283, 283,
	286, 284, 287, 287, 287, 287, 287, 224, 224, 224,
	72, 72, 27, 27, 101, 101, 28, 28, 24, 24,
	24, 170, 170, 131, 131, 229, 229, 229, 112, 112,
	90, 90, 90, 14, 11, 11, 11, 11, 11, 11,
	19, 19, 17, 17, 171, 171, 172, 172, 44, 44,
	49, 49, 68, 68, 68, 68, 68, 68, 69, 69,
	69, 69, 71, 71, 71, 71, 70, 70, 320, 320,
	107, 107, 107, 107, 108, 108, 185, 185, 185, 185,
	185, 102, 23, 23, 23, 97, 97, 98, 98, 99,
	99, 100, 100, 321, 321, 43, 43, 43, 75, 75,
	115, 115, 179, 179, 179, 181, 181, 180, 180, 180,
	156, 156, 156, 73, 73, 136, 136, 145, 145, 146,
	146, 235, 147, 147, 48, 48, 83, 83, 81, 81,
	81, 81, 81, 81, 82, 82, 82, 84, 84, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 87,
	87, 293, 293, 293, 296, 296, 292, 294, 294, 295,
	295, 319, 319, 157, 157, 157, 126, 125, 125, 129,
	129, 128, 130, 130, 228, 154, 154, 154, 154, 173,
	173, 174, 174, 175, 175, 176, 176, 176, 177, 177,
	178, 178, 153, 153, 208, 208, 86, 86, 86, 135,
	135, 135, 137, 137, 198, 198, 198, 199, 199, 197,
	197, 197, 197, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 309, 309, 309, 310, 310, 227,
	227, 231, 231, 231, 231, 231, 231, 225, 225, 225,
	225, 226, 226, 236, 236, 160, 160, 160, 160, 158,
	158, 159, 159, 232, 232, 232, 232, 155, 155, 233,
	233, 233, 192, 192, 239, 239, 239, 257, 257, 134,
	134, 134, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 241,
	241, 241, 241, 243, 243, 243, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	256, 256, 256, 256, 256, 244, 244, 251, 251, 252,
	252, 253, 254, 245, 245, 246, 246, 247, 248, 255,
	255, 255, 255, 259, 259, 249, 249, 249, 249, 249,
	250, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 168, 168, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 202,
	202, 202, 202, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 288, 288, 288, 288, 288, 288,
	288, 288, 290, 290, 291, 291, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 297, 297, 298, 298, 300, 300, 301, 301, 302,
	303, 303, 303, 304, 305, 305, 299, 299, 306, 306,
	306, 307, 307, 308, 308, 308, 308, 308, 214, 214,
	214, 215, 215, 216, 222, 222, 222, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 110, 110, 110, 110, 110, 142, 142,
	211, 211, 209, 209, 209, 213, 213, 161, 161, 258,
	258, 258, 258, 258, 258, 258, 162, 162, 162, 169,
	163, 163, 164, 164, 164, 164, 164, 164, 205, 206,
	165, 165, 165, 207, 207, 217, 221, 221, 220, 219,
	219, 218, 218, 195, 195, 196, 196, 194, 193, 150,
	150, 149, 149, 148, 148, 322, 322, 223, 223, 151,
	151, 152, 144, 144, 234, 234, 234, 234, 138, 138,
	117, 117, 139, 139, 113, 113, 116, 116, 114, 114,
	114, 114, 132, 132, 133, 133, 111, 111, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 260,
	260, 260, 210, 104, 104, 104, 105, 105, 106, 106,
	265, 265, 265, 266, 266, 266, 266, 264, 264, 264,
	264, 264, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 0, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 4, 6, 6, 6, 5, 5, 4, 12, 4,
	12, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 2,
	7, 2, 6, 1, 1, 1, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 4, 6, 7, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 1, 2, 3, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 3, 1, 2, 5, 3, 0, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	0, 2, 2, 3, 2, 3, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 2, 3, 2,
	1, 2, 1, 2, 1, 2, 1, 3, 3, 4,
	5, 3, 2, 6, 3, 3, 4, 4, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 1, 3,
	3, 1, 2, 2, 1, 0, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	3, 2, 3, 1, 1, 1, 1, 2, 1, 3,
	3, 3, 4, 4, 4, 4, 3, 4, 3, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 2, 3, 4, 3, 3, 4,
	4, 4, 4, 3, 2, 5, 5, 6, 2, 2,
	0, 2, 0, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 3, 3, 0, 6, 3, 4, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 1, 3, 3,
	0, 3, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 3, 6, 7, 3, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 3, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 2, 1, 1, 1, 2, 2,
	8, 8, 1, 2, 1, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 7, 4, 6, 3, 3, 1, 5,
	6, 9, 3, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -46, -21, -22, -29,
	-30, -35, -37, -38, -40, -41, -42, -43, -75, -47,
	-49, -48, -50, -53, -68, -44, -45, -72, -73, -74,
	24, -5, -6, -7, -8, 35, 225, 67, 69, -23,
	-24, -25, -26, -27, -28, -295, 95, -31, -32, -33,
	-34, 104, 126, 207, 102, 88, 120, 228, 235, -81,
	-83, -51, -52, -187, -186, 244, 247, -54, -55, -56,
	-57, -58, -59, -60, -61, -62, -63, -64, -65, -66,
	-67, -69, -71, -70, 223, 224, 281, 290, -9, -10,
	-13, -12, -11, -16, -18, -15, -17, -19, -14, -293,
	-84, -82, 331, 36, 256, 61, 98, 230, 306, 312,
	-85, 239, -86, -87, 298, 265, 334, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 2, 265, 301, 81, 135, 20, 20,
	20, 20, 2, -311, -139, 265, 81, -114, -104, 324,
	4, -272, -274, 21, 22, 24, 34, 35, 36, 41,
	45, 48, 55, 60, 61, 62, 64, 66, 67, 68,
	71, 72, 79, 80, 82, 84, 88, 90, 94, 95,
	97, 102, 103, 104, 110, 111, 114, 116, 121, 126,
	127, 128, 129, 136, 139, 141, 134, 149, 151, 152,
	155, 154, 159, 162, 165, 167, 168, 169, 172, 170,
	174, 175, 177, 176, 182, 184, 185, 187, 190, 193,
	196, 199, 200, 201, 202, 205, 207, 209, 210, 211,
	213, 214, 216, 217, 218, 219, 220, 223, 221, 222,
	224, 225, 226, 228, 230, 231, 233, 245, 246, 257,
	235, 236, 237, 238, 241, 242, 244, 247, 249, 252,
	255, 256, 258, 261, 259, 254, 264, 266, 267, 268,
	269, 270, 277, 281, 282, 283, 284, 287, 288, 289,
	290, 292, 295, 296, 297, 302, 307, 308, 309, 310,
	29, 37, 38, 39, 40, 42, 43, 46, 47, 51,
	52, 53, 56, 83, 85, 86, 101, 105, 106, 112,
	122, 124, 130, 131, 140, 142, 143, 144, 146, 157,
	171, 181, 183, 194, 198, 204, 206, 212, 232, 240,
	250, 251, 260, 262, 272, 273, 274, 278, 279, 294,
	298, 299, 2, -311, -113, -104, 81, 2, 265, 291,
	301, -170, 81, 286, 20, 20, 20, 20, 20, 20,
	90, 139, 289, 288, 2, 301, 265, 135, 81, 20,
	20, 20, 20, 2, 331, -36, -48, -22, -30, -4,
	-43, -75, -73, -29, -53, -37, -35, -264, 4, -272,
	-274, -273, -275, 58, 70, 119, 138, 132, 148, 150,
	158, 160, 173, 195, 197, 229, 248, 23, 25, 26,
	27, 28, 30, 31, 32, 33, 44, 49, 50, 54,
	57, 59, 65, 69, 73, 74, 75, 76, 77, 78,
	87, 89, 91, 92, 93, 96, 98, 100, 107, 108,
	109, 115, 117, 118, 120, 123, 125, 133, 135, 137,
	145, 147, 153, 156, 161, 163, 164, 178, 179, 180,
	186, 188, 189, 191, 192, 203, 208, 215, 227, 239,
	243, 253, 263, 265, 271, 275, 276, 280, 285, 286,
	291, 293, 300, 301, 303, 304, 305, 306, 2, -104,
	2, -104, 2, -104, 207, 23, -315, 2, 23, -316,
	-317, 69, 95, 120, 239, 139, 90, 288, -315, 2,
	2, -104, 20, 20, 20, 162, 55, 232, 242, -183,
	277, 2, -182, 272, -263, -188, -140, 172, -104, 2,
	242, -109, 35, 55, 23, 121, 60, 82, 65, 66,
	135, 136, 152, 266, 277, 69, 292, 268, 103, 4,
	243, 81, 272, 172, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	2, -108, 235, -104, 2, -109, 242, 23, -319, 2,
	265, -268, -261, -224, 9, 280, 107, 188, -267, 8,
	323, -260, -266, 5, 7, 322, 4, -272, -274, -273,
	-82, -84, -83, -128, -129, 285, 145, 100, 192, -81,
	-83, 2, -293, 2, -320, 277, 2, 277, 2, -320,
	2, -320, 2, -107, 277, 275, -296, 213, -292, -104,
	-296, 20, 2, -125, -126, 23, 92, 20, 335, 20,
	2, -152, 331, 2, -232, -113, 189, -3, 2, -232,
	130, -113, 2, -232, 130, 2, -104, 2, -116, 130,
	-113, 275, 335, -139, -132, -104, -194, -193, 333, 118,
	118, 331, -149, -150, -193, -194, 2, -140, 130, -104,
	2, -140, 2, 135, 2, -104, 130, 2, 118, 2,
	147, 2, 147, 2, -233, -232, -141, 130, 2, -140,
	-141, 130, 2, -117, 130, 2, -116, -104, 130, 2,
	2, -238, -237, -266, 298, 20, 20, 20, 20, -212,
	331, -166, 331, -104, 23, 188, 335, 188, 2, 2,
	245, 331, -183, 53, 277, 2, -184, -102, -103, 149,
	209, 310, 275, 316, 118, -268, -121, 87, -143, 333,
	2, -109, 2, -270, -267, 9, 2, 245, 55, 2,
	-312, 188, 2, 118, 2, 2, 118, 2, 118, 2,
	118, 2, 118, 2, 118, 2, 118, 2, 149, 209,
	257, 265, 301, 2, 118, 118, 310, -104, -109, -155,
	-232, 8, 7, 7, -128, -129, -154, -173, -174, 161,
	109, 186, -157, 23, 92, -157, -157, 45, 332, 332,
	-185, -102, -103, -185, 275, -108, 335, -296, -133, 331,
	-144, -234, -200, 324, -202, 322, 323, 317, 178, 311,
	-214, -204, -217, 101, 232, 331, -113, -203, 336, 9,
	-290, -83, 30, -215, -216, 49, -104, 7, 8, 5,
	6, -111, -241, -210, -250, 280, 107, 180, -288, -289,
	4, -272, -265, -242, -252, -246, -249, 146, 58, 74,
	77, 75, 78, 243, 291, 50, 29, 105, 106, 198,
	204, 262, 278, 279, 130, 181, 131, 56, 122, 157,
	94, 38, 40, 42, 43, 51, 52, 83, 85, 86,
	112, 140, 142, 143, 144, 183, 212, 250, 260, 273,
	274, 299, -273, -253, -254, -247, -248, -255, -144, -152,
	-151, -223, -200, 87, 324, -113, 331, -92, 221, -91,
	22, 24, 95, 296, 101, 254, 269, 236, 221, 101,
	221, 254, 269, 236, 221, 101, 336, -270, -114, 335,
	-264, 324, -271, -270, 258, 332, -138, -113, -150, 331,
	-127, 178, -101, -294, 306, -127, 331, 2, -105, 130,
	-104, -294, 178, -233, -115, -113, -115, 244, -104, 31,
	-94, 335, 48, 226, 101, -94, 101, -94, 335, 101,
	101, 332, 335, 31, -211, -239, -240, -242, -251, -245,
	-249, -250, 41, 47, 46, 270, 171, 240, 251, 294,
	39, 187, 141, 140, 142, 143, 144, 250, 38, 212,
	112, 94, 86, 85, 183, 43, 42, -253, -254, -247,
	-248, 83, 273, 274, 146, 40, 52, 51, 299, 260,
	-142, -200, -311, -317, -311, -182, -263, -142, 31, 2,
	-184, 335, 335, 159, -120, 165, 177, 127, -269, 5,
	4, -210, -224, 87, 162, -250, -262, 87, -268, -262,
	87, 72, 333, -264, -140, 23, 2, 246, -314, 115,
	-311, -263, -263, -263, -263, -263, -263, -104, 159, 2,
	-263, 2, -263, 265, 135, 265, -94, 335, -154, -174,
	-173, -175, -200, 23, -178, 111, 174, -200, -202, -82,
	-82, -82, -130, -228, -200, 335, 335, -108, -292, 31,
	-132, -135, 335, 118, 10, 11, 57, 34, 322, 323,
	324, 325, 113, 326, 327, 320, 321, 319, 314, 315,
	316, 63, 166, 234, 13, 14, 15, 27, 191, 160,
	311, 132, 248, 317, 16, 17, 18, 148, 37, 133,
	-110, 31, 4, -118, -200, -200, -200, -200, -200, 197,
	-148, -195, 329, -83, 331, 331, -83, -200, -142, 331,
	7, -83, -209, 329, -218, -200, -149, 331, 5, 331,
	5, -297, 307, 115, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 206, -259, 302, -259, -259, -243, 331, -243, -244,
	331, -243, 308, 312, 331, -135, 335, 332, -113, 335,
	275, -171, 65, 59, -190, 130, 59, -276, -104, 65,
	-277, 54, 286, 208, 117, -171, 65, -171, 65, 65,
	-232, 34, -48, 118, 275, -232, 275, 34, -48, 118,
	275, -116, -104, -236, 313, -104, -236, 335, 118, 332,
	335, -122, -132, -123, -104, -191, -190, -278, -279, -276,
	135, 286, 108, 31, 101, 202, 31, 188, 178, -97,
	267, 101, -192, 304, -179, -48, 331, 87, 31, -179,
	-145, -146, -235, -147, -113, 331, -104, -140, -141, -141,
	-116, -117, -104, -36, -237, -39, -48, -43, -75, -73,
	-29, 332, 335, -134, 30, -167, 331, 309, 169, 84,
	128, 168, -168, 238, 332, 335, 275, 118, 332, 277,
	-103, -102, -119, 211, 252, 222, 241, 335, -264, -313,
	-104, -113, -116, -113, -232, -176, -260, 331, 323, -177,
	232, 233, 335, -90, 32, 91, -103, -102, 331, 332,
	-192, -234, -137, 2, -230, 329, -232, -113, -83, -231,
	331, -257, -239, -256, 217, 218, 216, 220, 219, -239,
	-264, 272, -200, -200, -200, -200, -200, -200, -200, -200,
	-200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
	-200, -200, -200, -200, 160, 132, 248, 37, 133, -200,
	275, -200, -200, -200, -200, 170, 178, 180, 280, 107,
	287, 92, 184, -322, 263, 33, -207, -83, 331, -222,
	28, 253, 23, -264, -214, 232, 331, -195, -200, -196,
	-142, 332, 332, 335, -142, -213, 330, -209, -221, -220,
	303, 2, 332, -142, 300, 23, 92, 324, 7, -167,
	-298, 110, 123, 331, 332, 2, 332, 2, -200, -200,
	-161, 2, -258, -142, 4, 309, 169, 84, 128, 168,
	238, -161, 2, -162, 2, -200, -142, -163, -201, -202,
	322, 323, 317, 331, 232, -164, 2, -200, -142, -200,
	44, 156, 276, -165, -200, 118, -142, -200, -200, -200,
	-142, -142, 2, -142, 2, 331, 7, 7, 272, 272,
	7, -192, -223, 332, -91, -113, -104, -104, 178, -190,
	130, -96, 178, -239, -104, 331, 331, 151, 151, -104,
	-104, 130, -104, 130, -104, -104, -92, 221, -48, 331,
	-113, 221, -104, -48, 331, -104, 221, -76, 129, 184,
	-79, 306, -270, 258, 118, -113, 332, 332, 335, -105,
	135, -105, -48, -140, 5, -48, -113, 101, -98, 97,
	-321, 316, -104, -156, 227, -200, -156, -181, 188, -138,
	298, -104, -156, -136, 335, 118, 316, -138, -94, -94,
	-94, 20, 20, 20, 20, -239, 329, 329, 7, 275,
	275, 275, 275, 331, -200, -313, -313, -102, 284, 62,
	211, -268, 335, -236, -177, -200, -228, -39, -153, 123,
	-236, 335, 70, -160, 150, 173, 119, 158, 229, 138,
	7, 104, -53, -197, 336, 331, -227, 312, -83, -231,
	331, -230, 310, -200, -200, 275, -322, 263, -207, -200,
	170, 180, 280, 107, 287, 92, 184, 118, 331, -201,
	-201, -142, -204, 331, -142, 330, 339, 332, -200, 330,
	330, 335, -219, -220, 96, -200, -129, 335, -128, -200,
	-142, -142, 332, 332, -303, 196, 331, 331, -200, 31,
	335, 332, 118, 332, 332, -169, 203, 332, 10, 11,
	322, 323, 324, 325, 113, 326, 327, 320, 321, 319,
	314, 315, 316, 63, 166, 234, 13, 14, 15, 148,
	133, -201, -201, -201, -142, 331, 332, -205, -206, 118,
	115, 31, -165, -165, -165, 332, 118, -142, 335, 335,
	335, 332, 332, 332, 7, 332, 335, 332, 310, 310,
	332, -153, 275, 275, 101, 178, 295, -280, -277, -200,
	-131, -229, -104, -291, 331, -288, -289, -111, 331, 331,
	-89, 95, 244, -172, 101, -94, 101, -94, 275, -171,
	65, -142, 275, -142, 275, -79, 118, 264, 190, 258,
	-124, 134, -191, 331, -105, 331, 331, -127, 331, -104,
	-99, 155, -321, -267, -294, -144, 179, -156, 64, 332,
	-192, -146, -137, -223, 332, 330, 7, 7, 332, 169,
	128, 168, -168, 168, -168, -168, 7, -104, 189, 332,
	332, -208, 125, 45, -230, 150, 150, -230, -160, 150,
	-158, 195, -158, -158, -309, 331, -36, 331, 2, 330,
	-227, -264, 329, 337, -142, 2, -226, -225, 31, -104,
	193, 332, -200, -200, -201, -201, 118, 331, -200, -211,
	27, 27, 332, -142, 332, 335, -196, -200, 332, -209,
	98, -200, 271, 332, 300, -129, -129, -129, 5, -304,
	-104, 331, 304, -128, 332, -257, -239, -200, -205, -200,
	-257, -239, -201, -201, -201, -201, -201, -201, -201, -201,
	-201, -201, -201, -201, -201, -201, -201, -201, -201, -201,
	-201, 92, 178, 184, -201, 335, -142, 332, -206, -205,
	-200, -200, -239, 332, 332, 332, -142, -200, -200, -200,
	332, 7, -208, -104, -104, -190, 101, -281, 65, -282,
	57, 108, 69, 178, 180, 286, 208, 54, 87, 215,
	332, 332, 335, -112, -149, 57, -112, -200, 331, -131,
	-132, 178, 87, 178, 87, 80, 282, -104, -104, -113,
	-104, -104, 332, -113, 332, -104, -271, 272, 331, 133,
	-131, 331, -132, -122, 31, -131, 188, -100, 154, -321,
	-267, -97, -180, 331, 188, -48, -156, 316, 330, 330,
	332, -300, 305, -200, -142, -230, -230, -159, 293, 188,
	150, -230, 330, 332, -310, 7, 330, -238, -227, -226,
	7, -199, -198, 116, 176, 332, -104, 331, -227, 27,
	27, -200, -211, 332, -200, -200, 332, -200, 330, -200,
	5, -200, 332, 332, 332, -305, -104, -200, 332, 332,
	332, -206, 118, 92, 184, 331, -200, 332, 332, 335,
	332, 332, 332, -300, -190, -104, -264, -104, 108, 130,
	180, 151, 331, -201, -113, -189, -318, 68, 261, -229,
	-90, -264, -90, 332, -142, 332, 332, 180, 180, -200,
	-239, -94, -94, 275, 275, 275, 275, -203, -111, -104,
	-78, -77, 5, 199, 332, -131, 332, 332, -48, 332,
	-113, -321, -267, -98, 93, -132, 65, -152, -83, 331,
	-301, -302, -104, -159, 331, -200, -230, -197, 332, 335,
	-227, 332, -226, 330, 335, 338, 316, -227, 331, -132,
	-225, -200, -200, 332, 332, -129, -299, 201, 332, -201,
	118, 331, -211, 332, -200, -282, -105, 178, -200, -106,
	331, -124, 331, -112, -129, 215, -93, 57, -104, -104,
	331, 331, 331, 335, 332, -80, 316, -104, -189, 332,
	-124, -189, 331, -267, -99, 288, 179, 332, -104, 335,
	31, -132, -227, 7, -226, -36, -198, -264, 329, -226,
	-132, 332, 332, -129, 45, -201, -211, 332, 332, 101,
	332, -285, 167, -104, -132, -90, 332, -113, -88, 293,
	-264, -142, -142, -142, -77, 5, 331, -124, -189, -124,
	-131, -100, 244, -192, -302, -304, 332, -225, 330, 7,
	332, -306, 210, 233, -142, 332, 108, -283, -286, -284,
	188, 119, 200, 249, 332, 332, -127, -200, 332, 332,
	-129, -132, -124, 332, -145, -227, 330, 332, -307, -308,
	37, 283, 72, -200, -307, -104, -284, 188, -286, 188,
	288, 90, -285, 332, 332, -189, -192, -226, -308, 205,
	114, 232, 205, 114, -287, 175, 226, 48, 244, -287,
	-283, -95, 48, 226, -124, 27, 21, 180, 87, -308,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 9, 10, 11,
	13, 14, 16, 17, 19, 21, 23, 25, 27, 29,
	31, 33, 34, 35, 36, 37, 39, 41, 43, 45,
	0, 48, 50, 52, 54, 0, 0, 0, -2, 130,
	132, 134, 136, 139, 141, 0, 0, 146, 148, 150,
	152, -2, 0, 0, 0, 0, 0, 0, 0, 564,
	-2, 240, 242, 244, 246, 0, 0, 303, 305, 307,
	309, 311, 313, 315, 317, 319, 321, 323, 325, 326,
	328, 492, 494, 496, 0, 0, -2, 0, 57, 58,
	59, 60, 61, 67, 68, 69, 70, 63, 65, 599,
	-2, 610, 0, -2, 0, -2, -2, -2, 0, 0,
	577, -2, 582, 584, 0, 0, -2, 6, 8, 12,
	15, 18, 20, 22, 24, 26, 28, 30, 32, 38,
	40, 42, 44, 47, 0, 0, 0, 0, 49, 51,
	53, 55, 109, 0, 220, 0, 1153, 1082, 1088, 1089,
	1113, 1114, 1115, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 111, 0, 0, 1084, 1153, 129, 0, 0,
	0, 0, 0, 461, 131, 133, 135, 137, 140, 142,
	0, 0, 0, 0, 145, 0, 0, 0, 0, 147,
	149, 151, 153, 172, 0, 174, 176, 177, 178, 179,
	180, 182, 184, 186, 188, 189, 190, 378, 1127, 1128,
	1129, 1130, 1131, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 194, 197,
	207, 210, 211, 212, 1206, 214, 0, 217, 223, 224,
	225, 227, 228, 229, 230, 231, 232, 233, 0, 219,
	490, 491, 241, 243, 245, -2, -2, 1308, -2, 252,
	-2, 267, 268, 1314, 0, 271, 276, -2, 168, 302,
	0, 331, 0, 0, 334, -2, 0, -2, 0, 0,
	0, 0, 0, -2, 0, 0, -2, 0, 0, 333,
	335, 336, 0, 338, 304, 306, 308, 310, 312, 314,
	316, 318, 320, 322, 324, 327, 329, 493, 495, 497,
	488, 489, 1230, 515, 236, 237, 0, 334, 0, 451,
	601, 239, 279, 280, 281, 290, 291, 292, 293, 447,
	0, 449, 300, 301, 1109, 0, 1123, 1124, 1125, 1126,
	-2, 575, 576, -2, 0, 605, 605, 605, 0, 0,
	576, 574, 0, 498, 520, 508, 500, 520, 502, 503,
	504, 505, 506, 507, 510, 0, 591, 1210, 594, 1095,
	592, 578, 579, 0, 0, 607, 606, 583, 0, 585,
	636, 637, 0, 589, 590, 693, 0, 2, 56, 0,
	1292, 693, 62, 0, 1292, 64, 0, 66, 0, 1292,
	1087, 0, 0, 221, 222, 1092, 1090, 1091, 0, 0,
	0, 0, 1085, 1061, 1059, 1060, 138, 430, 1292, -2,
	453, 430, 457, -2, 522, 598, 1292, 143, 0, 535,
	0, 538, 0, 553, 0, 699, 102, 1292, 156, 166,
	102, 1292, 159, 102, 1292, 162, 1080, 163, 1292, 165,
	-2, 0, 191, 193, -2, 181, 183, 185, 187, 0,
	0, 208, 0, 213, 215, 0, 0, 0, 247, 248,
	0, 0, 251, 1281, -2, 254, 255, 258, 259, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 169, 0,
	330, 332, 339, 340, 113, 114, 341, 0, 0, 346,
	382, 0, 348, 0, 350, 352, 0, 354, 0, 356,
	0, 358, 0, 360, 0, 362, 0, 365, 0, 367,
	368, 0, 0, 373, 0, 0, 337, 514, 238, 102,
	697, 448, 1111, 1110, -2, 0, 570, 617, 618, 0,
	0, 0, 0, 603, 604, 0, 0, 0, 566, 567,
	499, 516, 517, 501, 0, 512, 0, 593, 0, 0,
	641, 1072, 1076, 1077, 797, 0, 0, 0, 0, 0,
	0, 889, 891, 1286, 1308, 0, 893, 894, 0, 896,
	898, 899, 0, 902, 903, 1052, 1084, 1098, 1099, 1100,
	1101, 0, 0, 1104, 0, 1106, 1107, 1108, 952, 913,
	-2, -2, 1096, 729, 730, 731, 732, -2, 1322, 917,
	920, 923, 924, 925, 926, 0, 1270, 1287, 1288, 1304,
	1305, 1313, 1317, 1318, 1292, 1301, 1293, 1282, 1290, 1299,
	1158, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1122, 759, 760, 765, 766, 768, 641, 638,
	0, 1069, 1067, 1068, 694, 695, 0, 71, 485, 81,
	0, 485, 485, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 684, 1083, 0,
	1057, 1058, 684, 115, 126, 0, 0, 1078, 1062, 388,
	0, 0, 452, 0, 597, 0, 0, 458, 0, 1292,
	1116, 526, 0, 703, 0, 540, 0, 0, 700, 0,
	154, 0, 100, 101, 0, 157, 0, 160, 0, 0,
	0, 600, 0, 600, 0, 1010, 711, 712, 713, 714,
	715, 794, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 736, 737, 738, 739, 740, 741, 742,
	756, 0, 735, 735, 735, 748, 749, 757, 758, 763,
	764, 775, 776, 778, 780, 774, 774, 774, 771, 772,
	0, 1008, 0, 226, 0, 249, 0, 0, 0, 256,
	257, 0, 0, 0, 262, 287, 288, 289, 269, 294,
	295, 296, 297, 298, 299, 0, 263, 265, 277, 264,
	266, 270, 0, 170, 342, 343, 344, 345, 347, 0,
	379, 349, 353, 355, 357, 359, 361, 363, 366, 369,
	370, 371, 372, 0, 0, 0, 450, 0, 573, 615,
	616, 619, 623, 624, 627, 630, 631, 621, 797, 586,
	587, 588, 611, 612, 472, 0, 0, 511, 595, 0,
	0, 703, 0, 0, 0, 0, 0, 0, 987, 988,
	989, 990, 991, 992, 995, 996, 993, 994, 997, 998,
	999, 0, 0, 0, 1000, 1001, 1002, 0, 0, 1004,
	0, 1006, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 1075, 1003, 802, 803, 804, 826, 827, 0,
	890, 1063, 1056, 892, 0, 0, -2, 1008, 0, 0,
	895, 900, 901, 0, 0, 1051, -2, 0, 1103, 0,
	794, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1031, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 762, 773, 770, 769, 746, 0, 745, 743,
	0, 747, 0, 0, 0, 703, 0, 1071, 0, 0,
	0, 0, 0, 484, 83, 1292, 0, 104, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 1086, 118, 0, 1093, 125, 0, 0, 0,
	0, 0, 0, 387, 1092, 389, 391, 392, 393, 394,
	1117, 0, 1117, 0, 0, 0, 0, 0, 0, 528,
	534, 0, 552, 0, 552, 542, 0, 0, 0, 552,
	556, 557, 559, 560, 0, 0, 701, 167, 102, 102,
	1081, 102, 164, 175, 192, 195, 198, 199, 201, 203,
	205, 196, 0, 704, 706, 716, 0, 781, 782, 783,
	784, 785, 786, 795, 209, 0, 0, 0, 250, 0,
	260, 261, 521, 0, 284, 0, 286, 0, 171, 381,
	234, 375, 376, 684, 698, 0, 625, 0, 0, 622,
	628, 629, 0, 614, 470, 471, 518, 519, 600, 1094,
	633, 1073, 684, 640, 642, 0, 652, 693, 670, 658,
	0, 798, 707, 708, 750, 751, 752, 753, 754, 799,
	800, 0, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, -2, -2, -2, 818, 819, 820, -2, -2,
	-2, 824, 825, -2, 1005, 1007, 0, 1066, 0, -2,
	0, -2, -2, -2, -2, 838, 0, 840, 843, 845,
	847, 0, 0, 0, 0, 1065, 857, 1043, 0, 0,
	984, 985, 986, 1074, 842, 0, 0, 1064, 1055, 0,
	0, -2, 897, 0, 0, 0, 1014, 1015, 1050, 1046,
	0, 904, 905, 610, 0, 0, 0, 0, 0, 1112,
	962, 0, 0, 0, 918, 919, 921, 922, 0, 0,
	0, 930, 0, 1018, -2, -2, -2, -2, -2, -2,
	-2, 0, 932, 0, 934, 1008, 1028, 0, 0, 860,
	0, 0, 0, 0, 1308, 0, 937, 1008, 1036, 0,
	0, 0, 0, 0, 1008, 0, 1042, 0, 0, 0,
	0, 0, 948, 0, 950, 0, 0, 0, 0, 0,
	0, 633, 1070, 696, 82, 474, 0, 0, 0, 85,
	1292, 93, 0, 402, 0, 0, 0, 0, 0, 487,
	94, 1292, 102, 1292, 102, 95, 72, 485, 73, 0,
	480, 0, 473, 74, 0, 482, 0, 125, 0, 0,
	112, 0, 116, 127, 0, 1079, 396, 429, 0, 0,
	1117, 0, 385, 430, 454, 456, 0, 0, 530, 534,
	0, 533, 598, 144, 0, 702, 536, 552, 0, 0,
	544, 541, 539, 703, 0, 0, 0, 0, 155, 158,
	161, 200, 202, 204, 206, 1011, 0, 0, 0, 0,
	0, 0, 0, 0, 1009, 216, 218, 253, 282, 283,
	285, 278, 0, 377, 0, 0, 613, 0, 635, 0,
	639, 0, 0, 0, 0, 0, 690, 690, 690, 688,
	664, -2, 0, 670, 0, 0, 682, 0, -2, 658,
	0, 0, 0, -2, -2, 0, 0, 0, 858, -2,
	839, 841, 844, 846, 848, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 1053, 1056, -2, 1009, 1012,
	1013, 0, 0, 1047, 0, 0, 0, 0, 609, 610,
	610, 610, 911, 0, 912, 0, 0, 0, 0, 0,
	0, 929, 0, 931, 933, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 863, 864, 865, 0, 0, 936, 1034, 1035, 0,
	0, 0, 0, 0, 0, 942, 0, 1041, 0, 0,
	0, 946, 947, 949, 0, 733, 0, 755, 777, 779,
	767, 635, 0, 0, 0, 0, 103, 400, 419, 0,
	0, 463, 469, 469, 0, 914, 915, 0, 0, 0,
	87, 0, 0, 0, 0, 91, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 128,
	383, 0, 390, 0, 0, 0, 388, 0, 0, 0,
	532, 534, 0, 525, 526, 550, 551, 537, 549, 0,
	552, 558, 555, 561, 0, 709, 0, 0, 717, 787,
	788, 789, 790, 791, 792, 793, 0, 235, 620, 626,
	596, 956, 0, 0, 643, 0, 0, 0, 0, 0,
	685, 689, 686, 687, 0, 0, 0, 0, 662, 670,
	682, 649, 0, 0, 0, 656, 657, 681, 0, 680,
	669, -2, 801, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1044, 0, 979, 0, 0, 1055, -2, 1016,
	1045, 1049, 0, 906, 0, 0, 0, 0, 1105, 960,
	961, 965, 0, 0, 916, 0, 0, 1017, 1027, 1029,
	861, 862, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, -2, -2, -2, 879, 880, 881, -2, -2,
	-2, 0, 0, 0, 1030, 0, 0, 982, 1032, 1033,
	1038, 1039, 0, 939, 940, 941, 1040, 0, 0, 0,
	761, 0, 956, 476, 478, 84, 0, 401, 0, 404,
	0, 0, 0, 0, 410, 411, 0, 0, 0, 0,
	421, 428, 0, 472, 1097, 0, 472, 0, 0, 0,
	0, 0, 99, 0, 0, 486, 0, 102, 102, 475,
	0, 0, 0, 481, 0, 483, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 523, 534, 0,
	527, 528, 0, 0, 0, 543, 554, 0, 710, 705,
	796, 580, 0, 634, 632, 672, 0, 674, 0, 0,
	0, 676, 652, 665, 0, 667, 670, 0, 682, 654,
	0, 0, 647, 0, 646, 670, 678, 0, 0, 0,
	0, -2, 0, 851, -2, -2, 978, 1009, 1054, 1048,
	1102, 610, 907, 909, 910, 967, 964, 0, 951, 927,
	928, 1026, 0, 0, 0, 0, 1009, 981, 938, 0,
	944, 945, 734, 581, 86, 0, 405, 406, 1117, 0,
	409, 412, 0, 414, 1119, 396, 0, 425, 426, 464,
	465, 468, 466, 469, 610, 423, 0, 88, 89, 98,
	106, 90, 96, 0, 0, 0, 0, 683, 0, 0,
	0, 122, 120, 0, 428, 0, 418, 396, 386, 428,
	0, 0, 529, 530, 0, 0, 0, 562, 563, 0,
	955, 957, 0, 673, 0, 692, 675, 670, 666, 0,
	682, 600, 663, 650, 0, 651, 0, 682, 0, 0,
	659, -2, -2, 852, 980, 0, 610, 0, 953, -2,
	0, 0, 0, 983, 0, 403, 407, 0, 0, 434,
	0, 422, 0, 472, 0, 0, 108, 0, 477, 479,
	0, 0, 0, 0, 124, 121, 0, 0, 396, 428,
	384, 396, 0, 531, 532, 0, 546, 703, 548, 0,
	0, 0, 0, 668, 660, 0, 648, 644, 0, 655,
	0, 679, 908, 970, 0, -2, 0, 887, 943, 0,
	413, 439, 0, 0, 0, 467, 906, 430, 92, 0,
	105, 0, 0, 610, 123, 119, 0, 416, 396, 459,
	0, 524, 0, 547, 958, 959, 691, 653, 670, 0,
	677, 0, 0, 0, 966, 888, 0, 415, 435, 436,
	0, 431, 432, 433, 1118, 427, 434, 107, 78, 80,
	0, 0, 417, 428, 703, 682, 645, 963, 968, 971,
	-2, 1255, 1150, 0, 969, 408, 437, 0, 438, 0,
	0, 0, 439, 0, 399, 396, 545, 661, 0, 973,
	974, 975, 976, 977, 440, 0, 443, 444, 0, 441,
	424, 395, 397, 398, 460, 0, 442, 445, 446, 972,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 320, 3, 326, 321, 3,
	331, 332, 324, 322, 335, 323, 333, 325, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 339, 334,
	314, 316, 315, 3, 336, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 329, 3, 330, 327, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 337, 319, 338, 317,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 318, 57657, 328, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:823
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:829
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:835
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:846
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 8:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:848
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:855
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:862
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:866
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:868
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:870
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:872
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:881
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:883
		{
			return helpWith(sqllex, "RESET")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:885
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 46:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "ALTER")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:948
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:954
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:960
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:966
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:972
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:976
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:982
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:986
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1032
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1055
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = nil
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = DropCascade
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = DropRestrict
		}
	case 102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = DropDefault
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1128
		{
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			return unimplemented(sqllex, "alter using")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1132
		{
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1142
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.str = ""
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1209
		{
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1227
		{
			return helpWith(sqllex, "CREATE")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1237
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1243
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			return helpWith(sqllex, "DELETE")
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return helpWith(sqllex, "DROP")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1261
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1287
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1306
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1352
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1357
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1376
		{
			return helpWith(sqllex, "INSERT")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "DELETE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{ /* SKIP DOC */
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1402
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			return helpWith(sqllex, "INSERT")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			return helpWith(sqllex, "DELETE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "GRANT")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1519
		{
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return helpWith(sqllex, "RESET")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{ /* SKIP DOC */
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			return unimplemented(sqllex, "set local")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1607
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1643
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1693
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1698
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			return unimplemented(sqllex, "set from current")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1716
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = Low
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = Normal
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = High
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			return helpWith(sqllex, "SHOW")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.str = "client_encoding"
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1878
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1927
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1952
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1978
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2000
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2004
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2008
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = DropDefault
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			return unimplemented(sqllex, "match full")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2326
		{
			return unimplemented(sqllex, "match partial")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			return unimplemented(sqllex, "match simple")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2338
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			return unimplemented(sqllex, "no action")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			return unimplemented(sqllex, "action set null")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			return unimplemented(sqllex, "action set default")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = true
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = false
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2465
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2469
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = Ascending
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = Descending
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2509
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2511
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = true
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = false
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2607
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.str = ""
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.str = ""
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2666
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.str = ""
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.str = ""
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.str = ""
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = ""
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2731
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			return helpWith(sqllex, "INSERT")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2799
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2835
		{
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			return helpWith(sqllex, "SELECT")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			return helpWith(sqllex, "SELECT")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			return helpWith(sqllex, "VALUES")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			return helpWith(sqllex, "TABLE")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			return helpWith(sqllex, "TABLE")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3077
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3085
		{
			return unimplemented(sqllex, "cte")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3089
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3093
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3097
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = true
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = false
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = false
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = true
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3121
		{
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3285
		{
			return helpWith(sqllex, "VALUES")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3306
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &From{}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3328
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3373
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3390
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = nil
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = true
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = false
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.str = astFullJoin
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.str = astLeftJoin
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.str = astRightJoin
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.str = astInnerJoin
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3577
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3676
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3677
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3700
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3772
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = nil
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3917
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3949
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3989
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = year
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = month
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = day
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = hour
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = minute
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = month
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = hour
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = minute
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = minute
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = nil
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = second
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4084
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4119
		{
			return unimplemented(sqllex, "at tz")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4353
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4526
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4571
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4580
		{
			return unimplemented(sqllex, "variadic")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4581
		{
			return unimplemented(sqllex, "variadic")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4604
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			return unimplemented(sqllex, "func_application")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4625
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4634
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4643
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			return unimplemented(sqllex, "current role")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			return unimplemented(sqllex, "current user")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			return unimplemented(sqllex, "session user")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			return unimplemented(sqllex, "user")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4660
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4665
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4670
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 938:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4680
		{
			return unimplemented(sqllex, "treat")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4726
		{
			return unimplemented(sqllex, "within group")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4727
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = Window(nil)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4762
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.str = ""
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4824
		{
			return unimplemented(sqllex, "frame range")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4825
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4826
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4829
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4830
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4836
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4837
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4838
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4839
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4840
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = Any
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = Some
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = All
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = Plus
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = Minus
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = Mult
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = Div
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = FloorDiv
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = Mod
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = Bitand
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = Bitor
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = Pow
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = Bitxor
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = LT
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = GT
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = EQ
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = LE
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = GE
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = NE
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = Like
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = NotLike
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = ILike
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = NotILike
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5204
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5205
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5323
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5367
		{
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5403
		{
			return unimplemented(sqllex, "func const")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5412
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = DNull
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.str = ""
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
